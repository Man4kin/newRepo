
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Попытка
		СтруктурнаяЕдиница = ЭтаФорма.Параметры.Отбор.СтруктурнаяЕдиница;
	Исключение
	КонецПопытки;	
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Элементы.СтруктурнаяЕдиница.Доступность = Ложь;
		ПрочитатьРоли();
		Если НЕ ПараметрыСеанса.ЭтоЦентр И СтруктурнаяЕдиница <> ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница Тогда    //V
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;	
	КонецЕсли;	
	Сотрудники.Параметры.УстановитьЗначениеПараметра ("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРоли()
	нзАдресация = РегистрыСведений.Адресация.СоздатьНаборЗаписей();
	нзАдресация.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница);
	нзАдресация.Прочитать();
	тзАдресация = нзАдресация.Выгрузить();
	нзЗаменители = РегистрыСведений.АдресацияЗаменители.СоздатьНаборЗаписей();
	нзЗаменители.Прочитать();
	тзЗаменители = нзЗаменители.Выгрузить();
	тзТекущиеПереадресации = нзЗаменители.Выгрузить(); // создадим структуру колонок
	тзТекущиеПереадресации.Колонки.Добавить("Измененный", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица")); // этот заменитель указан в настройках
	тзТекущиеПереадресации.Очистить(); // а запоминать потом будет только назначения заменителей
	ЗаданныеРоли.ПолучитьЭлементы().Очистить();
	выбРоли = Справочники.ФункциональныеОбязанности.Выбрать(,,,"Наименование возр");
	Пока выбРоли.Следующий() Цикл
		СтрокаРоли = ЗаданныеРоли.ПолучитьЭлементы().Добавить();
		СтрокаРоли.Объект = выбРоли.Ссылка;
		мсвСотрудники = тзАдресация.НайтиСтроки(Новый Структура("РольИсполнителя",выбРоли.Ссылка));
		Для каждого Сотрудник из мсвСотрудники Цикл
			Строка = СтрокаРоли.ПолучитьЭлементы().Добавить();
			Строка.Объект = Сотрудник.Исполнитель;
			Строка.Временный = Сотрудник.Временный;
			мсвЗамы = тзЗаменители.НайтиСтроки(Новый Структура("РольИсполнителя,Сотрудник",ВыбРоли.Ссылка,Сотрудник.Исполнитель));
			Для каждого Зам из мсвЗамы Цикл
				// фактически подставится последний в данном разрезе
				Строка.Заменитель = Зам.Заменитель;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Модифицированность = Ложь;
КонецПроцедуры // ПрочитатьРоли()

&НаКлиенте
Процедура ДобавитьВыполнить()
	Если ЭтаФорма.ТолькоПросмотр или Элементы.Сотрудники.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Роль = ?(Элементы.ЗаданныеРоли.ТекущиеДанные.ПолучитьРодителя() = Неопределено, Элементы.ЗаданныеРоли.ТекущиеДанные, Элементы.ЗаданныеРоли.ТекущиеДанные.ПолучитьРодителя());
	Для каждого Исполнитель из Элементы.Сотрудники.ВыделенныеСтроки Цикл
		СсылкаНаСотрудника = Элементы.Сотрудники.ДанныеСтроки(Исполнитель).ПользовательСсылка;
		Нашли = Ложь;
		Для Каждого Строка Из Роль.ПолучитьЭлементы() Цикл
			Если Строка.Объект = СсылкаНаСотрудника Тогда
				Нашли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Нашли Тогда
			Продолжить;
		КонецЕсли;	
		
		Строка = Роль.ПолучитьЭлементы().Добавить();
		Строка.Объект = СсылкаНаСотрудника;
		Модифицированность = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрытьВыполнить()
	Если Модифицированность = Истина Тогда
		Сохранить();
	КонецЕсли;	
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура Сохранить()
	// пишем адресацию и заменителей - в одной транзакции
	НачатьТранзакцию();
	// адресация
	нзАдресация = РегистрыСведений.Адресация.СоздатьНаборЗаписей();
	нзАдресация.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница);
	нзАдресация.Прочитать(); // считаем текущее состояние
	нзАдресация.Очистить(); // очистим и заново заполним (дальше)
	// заменители
	нзЗаменители = РегистрыСведений.АдресацияЗаменители.СоздатьНаборЗаписей();
	нзЗаменители.Прочитать();
	нзЗаменители.Очистить();
	Для каждого Роль из ЗаданныеРоли.ПолучитьЭлементы() Цикл
		Для каждого Сотрудник из Роль.ПолучитьЭлементы() Цикл
			// адресация
			Запись = нзАдресация.Добавить();
			Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			Запись.РольИсполнителя = Роль.Объект;
			Запись.Исполнитель = Сотрудник.Объект;
			Запись.Временный = Сотрудник.Временный;
			// заменители
			Если не Сотрудник.Заменитель.Пустая() Тогда
				Запись = нзЗаменители.Добавить();
				Запись.РольИсполнителя = Роль.Объект;
				Запись.Сотрудник = Сотрудник.Объект;
				Запись.Заменитель = Сотрудник.Заменитель;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	нзАдресация.Записать(Истина);
	нзЗаменители.Записать(Истина);
	ЗафиксироватьТранзакцию();
	//// а теперь спросим, надо переадресовывать задачи для людей, у которых появились заменители
	//Если тзТекущиеПереадресации.Количество() Тогда
	//	фрмФорма = РегистрыСведений.Адресация.ПолучитьФорму("ФормаПереадресации");
	//	Для каждого Запись из тзТекущиеПереадресации Цикл
	//		Задача = фрмФорма.СписокЗадач.Добавить();
	//		Задача.Роль = Запись.РольИсполнителя;
	//		Задача.Исполнитель = Запись.Сотрудник;
	//		Задача.Заменитель = Запись.Заменитель;
	//		Задача.Режим = 1; // переадресация
	//	КонецЦикла;
	//	// а теперь выполним в этой форме все потребные манипуляции
	//	фрмФорма.ОткрытьМодально();
	//КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ЗаданныеРолиПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданныеРолиПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданныеРолиПриАктивизацииСтроки(Элемент)
	ДанныеСтроки = Элемент.ТекущиеДанные;
	СписокРолей.Очистить();
	Если ДанныеСтроки <> Неопределено И ДанныеСтроки.ПолучитьРодителя() <> Неопределено Тогда
		Для каждого ЭлементыПервыйУровень из ЗаданныеРоли.ПолучитьЭлементы() Цикл
			Роль = ЭлементыПервыйУровень.Объект;
			Для каждого ЭлементыВторойУровень из ЭлементыПервыйУровень.ПолучитьЭлементы() Цикл
				Если ЭлементыВторойУровень.Объект = ДанныеСтроки.Объект Тогда
					СписокРолей.Добавить(Роль, Строка(Роль));
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	ПрочитатьРоли();
	Сотрудники.Параметры.УстановитьЗначениеПараметра ("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданныеРолиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЭтаФорма.ТолькоПросмотр или Элементы.Сотрудники.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Роль = ?(Элементы.ЗаданныеРоли.ДанныеСтроки(Строка).ПолучитьРодителя() = Неопределено, Элементы.ЗаданныеРоли.ДанныеСтроки(Строка), Элементы.ЗаданныеРоли.ДанныеСтроки(Строка).ПолучитьРодителя());
	Для каждого СтрокаМассива из ПараметрыПеретаскивания.Значение Цикл
		СсылкаНаСотрудника = Элементы.Сотрудники.ДанныеСтроки(СтрокаМассива).ПользовательСсылка;
		Нашли = Ложь;
		Для Каждого СтрокаСписка Из Роль.ПолучитьЭлементы() Цикл
			Если СтрокаСписка.Объект = СсылкаНаСотрудника Тогда
				Нашли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Нашли Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаСписка1 = Роль.ПолучитьЭлементы().Добавить();
		СтрокаСписка1.Объект = СсылкаНаСотрудника;
		Модифицированность = Истина;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность = Истина Тогда
		Ответ = Вопрос(НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена, 5, КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда	
			Сохранить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СтруктурнаяЕдиницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Модифицированность = Истина Тогда
		Ответ = Вопрос(НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена, 5, КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда	
			Сохранить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

