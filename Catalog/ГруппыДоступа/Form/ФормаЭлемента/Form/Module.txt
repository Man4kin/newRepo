
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыДоступа.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Предопределенный");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если УправлениеДоступом.СвойстваВидаДоступа(Выборка.Ссылка).ВидДоступаЧерезПраваПоЗначениямДоступа Тогда
			ВидыДоступаЧерезПраваПоЗначениямДоступа.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ПрофильАдминистратор        = Справочники.ПрофилиГруппДоступа.Администратор;
	ГруппаДоступаАдминистраторы = Справочники.ГруппыДоступа.Администраторы;
	
	Элементы.ПользователиПодобрать.Доступность                = НЕ ТолькоПросмотр;
	//Элементы.КонтекстноеМенюПользователиПодобрать.Доступность = НЕ ТолькоПросмотр;
	
	ПользовательПустаяСсылка        = Справочники.Пользователи.ПустаяСсылка();
	ГруппаПользователейПустаяСсылка = Справочники.ГруппыПользователей.ПустаяСсылка();
	
	ВидДоступаПользователи = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	ВидДоступаПользователиСтандартныхТипов = ВидДоступаПользователи.ТипЗначения.Типы().Количество() = 2 И
	                                         ВидДоступаПользователи.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Пользователи")) И
	                                         ВидДоступаПользователи.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ГруппыПользователей"));
	
	
	СписокТиповПользователей.Добавить(Тип("СправочникСсылка.Пользователи"),        "Пользователи");
	
	// Заполнение списка выбора типа пользователей
	ЗаполнитьСписокТиповПользователей();
	
	УстановитьПривилегированныйРежим(Истина);
	Элементы.ПредставлениеТипаПользователей.Видимость = Объект.ТипПользователей <> Неопределено И
	                                                    ТипЗнч(Объект.ТипПользователей) <> Тип("СправочникСсылка.Пользователи");
	
	// Установка доступности свойств для группы доступа Администраторы
	Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
		
		Элементы.Наименование.ТолькоПросмотр              = Истина;
		Элементы.Профиль.ТолькоПросмотр                   = Истина;
		Элементы.ПредставлениеТипаПользователей.Видимость = Ложь;
		
		Если НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава") Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.ПользователиГруппыДоступа.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГруппаДоступа.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	ЗначениеВДанныеФормы(НаборЗаписей,ПользователиНаборЗаписей);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьСоставВидовДоступа(Истина);
	
	//ЗаполнитьНомераКартинокПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ)
	
	// Сохранение значений из таблицы формы в табличную часть объекта.
	ПоместитьЗаполнитьДанные(ТекущийВидДоступа);
	
	ОбработкаПроверкиЗаполнения(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
		ПараметрыЗаписи.Вставить("ЕстьОшибки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка = ГруппаДоступаАдминистраторы И
	     Объект.Профиль <> ПрофильАдминистратор Тогда
		Если Вопрос(НСтр("ru = 'У группы доступа Администраторы должен быть профиль Администратор!
		                       |
		                       |Установить профиль в группе доступа (или открыть её только для просмотра)?'"),
		                       РежимДиалогаВопрос.ОКОтмена,
		                       ,
		                       КодВозвратаДиалога.Отмена) = КодВозвратаДиалога.ОК Тогда
			Объект.Профиль = ПрофильАдминистратор;
			Модифицированность = Истина;
		Иначе
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзменилсяСоставВидовДоступаПриЧтении Тогда
		Если Вопрос(НСтр("ru = 'Изменился состав видов доступа профиля этой группы доступа!
		                       |
		                       |Обновить виды доступа в группе доступа (или открыть её только для просмотра)?'"),
		                       РежимДиалогаВопрос.ОКОтмена,
		                       ,
		                       КодВозвратаДиалога.Отмена) = КодВозвратаДиалога.ОК Тогда
			ОбновитьСоставВидовДоступа();
		Иначе
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
		Предупреждение(НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий команд и элементов формы
//

&НаКлиенте
Процедура Подобрать(Команда)
	
	ВыбратьПодобратьПользователей(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	// Сохраним значения таблицы значения в табличную часть.
	ПоместитьЗаполнитьДанные(ТекущийВидДоступа);
	ОбновитьСоставВидовДоступа();
	
КонецПроцедуры


&НаКлиенте
Процедура ПредставлениеТипаПользователейПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПредставлениеТипаПользователей) Тогда
		УдалитьНеТипичныеПользователи();
	Иначе
		ПредставлениеТипаПользователей = ТипыПользователей[0].Представление;
		Объект.ТипПользователей = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаПользователейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйЭлемент = ВыбратьИзСписка(ТипыПользователей, Элемент, ТипыПользователей.НайтиПоЗначению(Объект.ТипПользователей));
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		Модифицированность = Истина;
		Объект.ТипПользователей        = ВыбранныйЭлемент.Значение;
		ПредставлениеТипаПользователей = ВыбранныйЭлемент.Представление;
		
		ПредставлениеТипаПользователейПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Пользователь = Неопределено Тогда
		//Элемент.ТекущиеДанные.НомерКартинки = -1;
		Элемент.ТекущиеДанные.Пользователь = ПользовательПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И
	     Элемент.ТекущиеДанные <> Неопределено И
	     Элемент.ТекущиеДанные.Пользователь = ПользовательПустаяСсылка Тогда
		
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЕстьИзменения = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			
			Если ПользователиНаборЗаписей.НайтиСтроки(Новый Структура("Пользователь", Значение)).Количество() = 0 Тогда
				
				Строка = ПользователиНаборЗаписей.Добавить();
				Строка.Пользователь = Значение;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Элемент.ТекущиеДанные.Пользователь <> ВыбранноеЗначение Тогда
		ЕстьИзменения = Истина;
		Элемент.ТекущиеДанные.Пользователь = ВыбранноеЗначение;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		//ЗаполнитьНомераКартинокПользователей();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры


//&НаКлиенте
//Процедура ПользовательПриИзменении(Элемент)
//	
//	Если ЗначениеЗаполнено(Элементы.Пользователи.ТекущиеДанные.Пользователь) Тогда
//		ЗаполнитьНомераКартинокПользователей(Элементы.Пользователи.ТекущаяСтрока);
//	Иначе
//		Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПодобратьПользователей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Пользователи.ТекущиеДанные.Пользователь  = ПользовательПустаяСсылка;
	//Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыДоступаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		Элементы.ВидыДоступа.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)

	ЗначенияЗадаются = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
	
		ПоместитьЗаполнитьДанные(Элемент.ТекущиеДанные.ВидДоступа);
	
		Если ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(Элемент.ТекущиеДанные.ВидДоступа) = Неопределено Тогда
			ЗначенияЗадаются = Истина;
			Элементы.ТипыВидовДоступа.ТекущаяСтраница = Элементы.ОбычныйВидДоступа;
		Иначе
			Элементы.ТипыВидовДоступа.ТекущаяСтраница = Элементы.ВидДоступаЧерезПраваПоЗначениямДоступа;
		КонецЕсли;
		ОбновитьНадписьВидДоступа(ЗначенияЗадаются);
	КонецЕсли;
	
	Элементы.ЗначенияДоступа.Доступность = ЗначенияЗадаются;
	Элементы.ЗначенияДоступа.КоманднаяПанель.ПодчиненныеЭлементы.ЗначенияДоступаДобавить.Доступность = ЗначенияЗадаются;
	Элементы.ЗначениеДоступа.ЦветТекстаЗаголовка = ?(ЗначенияЗадаются, Новый Цвет, Новый Цвет(167, 144, 79));
	Элементы.ДоступРазрешен.ЦветТекстаЗаголовка  = ?(ЗначенияЗадаются, Новый Цвет, Новый Цвет(167, 144, 79));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ВидыДоступа.ТекущийЭлемент <> Элементы.ДоступРазрешенПоВиду Тогда
		Элементы.ВидыДоступа.ТекущийЭлемент = Элементы.ДоступРазрешенПоВиду;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступРазрешенПоВидуПриИзменении(Элемент)
	
	Элементы.ВидыДоступа.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьНадписьВидДоступа(ЗначенияЗадаются);
	
	Для каждого Строка ИЗ ЗначенияДоступа Цикл
		Строка.ДоступРазрешен = НЕ Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа))[0].ЗначенияЗаданы = ЗначенияДоступа.Количество() <> 0;
	
	ТекущийНомер = 1;
	Для каждого Строка Из ЗначенияДоступа Цикл
		Строка.НомерСтроки = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ДоступРазрешен = НЕ Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен;
		Элемент.ТекущиеДанные.НомерСтроки = ЗначенияДоступа.Количество();
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТекущийВидДоступа = ВидДоступаПользователи Тогда
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		Если ВидДоступаПользователиСтандартныхТипов ИЛИ
		     ТипЗнч(НачальноеЗначение) = Тип("СправочникСсылка.Пользователи") ИЛИ
		     ТипЗнч(НачальноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Новый Структура("ВыборГруппПользователей, ТекущаяСтрока,РежимВыбора", Истина, НачальноеЗначение,Истина), Элемент);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Новый Структура("ВыборГруппПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции формы
//

&НаКлиенте
Процедура ОбработкаПроверкиЗаполнения(Отказ)
	
	
	// Проверка незаполненных и повторяющихся пользователей и групп пользователей.
	НомерСтроки = ПользователиНаборЗаписей.Количество()-1;
	
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
		ТекущаяСтрока = ПользователиНаборЗаписей.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Пользователь) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен пользователь или группа пользователей!'"),
			                                                  ,
			                                                  "ПользователиНаборЗаписей[" + Формат(НомерСтроки, "ЧГ=0") + "].Пользователь",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = ПользователиНаборЗаписей.НайтиСтроки(Новый Структура("Пользователь", ТекущаяСтрока.Пользователь));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ?(ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.Пользователи"),
			                                                     НСтр("ru = 'Пользователь повторяется!'"),
			                                                     НСтр("ru = 'Группа пользователей повторяется!'") ),
			                                                  ,
			                                                  "ПользователиНаборЗаписей[" + Формат(НомерСтроки, "ЧГ=0") + "].Пользователь",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка наличия только элементов в предопределенной группе Администраторы.
		Если Объект.Ссылка = ГруппаДоступаАдминистраторы И ТипЗнч(ТекущаяСтрока.Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ?(ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей"),
			                                                     НСтр("ru = 'В предопределенной группе доступа Администраторы могут быть только пользователи.
			                                                                |Группы пользователей недопустимы!'"),
			                                                     НСтр("ru = 'В предопределенной группе доступа Администраторы могут быть только пользователи.
			                                                                |Внешние пользователи и группы внешних пользователей недопустимы!'") ),
			                                                  ,
			                                                  "ПользователиНаборЗаписей[" + Формат(НомерСтроки, "ЧГ=0") + "].Пользователь",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
	// Проверка незаполненных и повторяющихся значений доступа.
	НомерСтрокиВидДоступа = Объект.ВидыДоступа.Количество()-1;
	
	Пока НЕ Отказ И НомерСтрокиВидДоступа >= 0 Цикл
		ТекущаяСтрокаВидовДоступа = Объект.ВидыДоступа.Получить(НомерСтрокиВидДоступа);
		
		ЗначенияДоступаВидаДоступа = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа));
		НомерСтроки = ЗначенияДоступаВидаДоступа.Количество()-1;
		
		Пока НЕ Отказ И НомерСтроки >= 0 Цикл
			
			ТекущаяСтрока = ЗначенияДоступаВидаДоступа.Получить(НомерСтроки);
			
			// Проверка заполнения значения.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеДоступа) Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение не заполнено!'"),
				                                                  ,
				                                                  "ЗначенияДоступа[" + Формат(НомерСтроки, "ЧГ=0") + "].ЗначениеДоступа",
				                                                  ,
				                                                  Отказ);
				Возврат;
			КонецЕсли;
			
			// Проверка наличия повторяющихся значений.
			НайденныеЗначения = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа, ЗначениеДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа, ТекущаяСтрока.ЗначениеДоступа));
			Если НайденныеЗначения.Количество() > 1 Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение повторяется!'"),
				                                                  ,
				                                                  "ЗначенияДоступа[" + Формат(НомерСтроки, "ЧГ=0") + "].ЗначениеДоступа",
				                                                  ,
				                                                  Отказ);
				Возврат;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
		
		НомерСтрокиВидДоступа = НомерСтрокиВидДоступа - 1;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокТиповПользователей()
	
	ТипыПользователей.Добавить(Справочники.Пользователи.ПустаяСсылка(), Метаданные.Справочники.Пользователи.Синоним);
	
	
	Если Объект.ТипПользователей = Неопределено Тогда
		ПредставлениеТипаПользователей = "";
	Иначе
		НайденныйЭлемент = ТипыПользователей.НайтиПоЗначению(Объект.ТипПользователей);
		ПредставлениеТипаПользователей = ?(НайденныйЭлемент = Неопределено, СтрЗаменить(НСтр("ru = 'Неизвестный тип ""%1""'"), "%1", Строка(ТипЗнч(Объект.ТипПользователей))), НайденныйЭлемент.Представление);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УдалитьНеТипичныеПользователи()
	
	Если Объект.ТипПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ТипПользователей) = Тип("СправочникСсылка.Пользователи") Тогда
	
		Индекс = ПользователиНаборЗаписей.Количество()-1;
		Пока Индекс >= 0 Цикл
			
			Если ТипЗнч(ПользователиНаборЗаписей[Индекс].Пользователь) <> Тип("СправочникСсылка.Пользователи") И
			     ТипЗнч(ПользователиНаборЗаписей[Индекс].Пользователь) <> Тип("СправочникСсылка.ГруппыПользователей") Тогда
				
				ПользователиНаборЗаписей.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСоставВидовДоступа(ПриЧтенииНаСервере = Ложь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаВидыДоступа.ВидДоступа
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиГруппДоступаВидыДоступа
	|ГДЕ
	|	ПрофилиГруппДоступаВидыДоступа.Ссылка = &Ссылка
	|	И ПрофилиГруппДоступаВидыДоступа.ВидДоступа.Предопределенный");
	Запрос.УстановитьПараметр("Ссылка", Объект.Профиль);
	ВидыДоступаПрофиля = Запрос.Выполнить().Выгрузить();
	
	ИзменилсяСоставВидовДоступа = Ложь;
	
	// Добавление недостающих видов доступа.
	Для каждого СтрокаТЧ Из ВидыДоступаПрофиля Цикл
		
		Отбор = Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа);
		СвойстваВидаДоступа = УправлениеДоступом.СвойстваВидаДоступа(СтрокаТЧ.ВидДоступа);
		
		Если СвойстваВидаДоступа <> Неопределено
		   И НЕ СвойстваВидаДоступа.ВидДоступаИспользуетсяВсегда
		   И Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа)).Количество() = 0 Тогда
			
			ИзменилсяСоставВидовДоступа = Истина;
			Если ПриЧтенииНаСервере Тогда
				Прервать;
			Иначе
				НоваяСтрока = Объект.ВидыДоступа.Добавить();
				НоваяСтрока.ВидДоступа      = СтрокаТЧ.ВидДоступа;
				НоваяСтрока.ДоступРазрешен  = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление лишних видов доступа.
	Индекс = Объект.ВидыДоступа.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ТекущийВидДоступа1 = Объект.ВидыДоступа[Индекс].ВидДоступа;
		СвойстваВидаДоступа = УправлениеДоступом.СвойстваВидаДоступа(ТекущийВидДоступа1);
		Если СвойстваВидаДоступа = Неопределено
		 ИЛИ СвойстваВидаДоступа.ВидДоступаИспользуетсяВсегда
		 ИЛИ ВидыДоступаПрофиля.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа1)).Количество() = 0 Тогда
			
			ИзменилсяСоставВидовДоступа = Истина;
			Если ПриЧтенииНаСервере Тогда
				Прервать;
			Иначе
				Объект.ВидыДоступа.Удалить(Индекс);
				Для каждого ЭлементКоллекции Из Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа1)) Цикл
					Объект.ЗначенияДоступа.Удалить(ЭлементКоллекции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Модифицированность = Модифицированность ИЛИ ИзменилсяСоставВидовДоступа И НЕ ПриЧтенииНаСервере;
	
	// Установка флажка для запроса у пользователя решения обновить состав видов доступа.
	Если ПриЧтенииНаСервере
	     И НЕ Объект.Ссылка.Пустая() // ЭтоНовый
	     И ИзменилсяСоставВидовДоступа
	     И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Ссылка, "Профиль") = Объект.Профиль Тогда
	     
		ИзменилсяСоставВидовДоступаПриЧтении = Истина;
	КонецЕсли;
	
	Элементы.Доступ.Доступность = Объект.ВидыДоступа.Количество() > 0;
	
	// Установка порядка видов доступа по профилю.
	Если НЕ ИзменилсяСоставВидовДоступаПриЧтении Тогда
		Для каждого СтрокаТЧ Из ВидыДоступаПрофиля Цикл
			Индекс = Объект.ВидыДоступа.Индекс(Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа))[0]);
			Объект.ВидыДоступа.Сдвинуть(Индекс, ВидыДоступаПрофиля.Индекс(СтрокаТЧ) - Индекс);
		КонецЦикла;
	КонецЕсли;
	
	// Установка наличия заданных значений по видам доступа.
	Для каждого Строка Из Объект.ВидыДоступа Цикл
		Строка.ЗначенияЗаданы = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", Строка.ВидДоступа)).Количество() <> 0;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоместитьЗаполнитьДанные(НовыйВидДоступа)
	
	Если ЗначениеЗаполнено(ТекущийВидДоступа) Тогда
		// Перенесём значения и группы значений со свойством ДоступРазрешен.
		СтрокиУдалить = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа));
		Для каждого СтрокаУдалить Из СтрокиУдалить Цикл
			Объект.ЗначенияДоступа.Удалить(Объект.ЗначенияДоступа.Индекс(СтрокаУдалить));
		КонецЦикла;
		Для каждого Строка Из ЗначенияДоступа Цикл
			НоваяСтрока = Объект.ЗначенияДоступа.Добавить();
			НоваяСтрока.ВидДоступа      = ТекущийВидДоступа;
			НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			НоваяСтрока.ДоступРазрешен  = Строка.ДоступРазрешен;
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияДоступа.Очистить();
	Если ЗначениеЗаполнено(НовыйВидДоступа) Тогда
		// Копирование значений и групп значений со свойством ДоступРазрешен.
		ТекущийНомер = 1;
		СтрокиТЧ = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", НовыйВидДоступа));
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			НоваяСтрока = ЗначенияДоступа.Добавить();
			НоваяСтрока.ЗначениеДоступа = СтрокаТЧ.ЗначениеДоступа;
			НоваяСтрока.ДоступРазрешен  = СтрокаТЧ.ДоступРазрешен;
			НоваяСтрока.НомерСтроки = ТекущийНомер;
			ТекущийНомер = ТекущийНомер + 1;
		КонецЦикла;
	КонецЕсли;

	ТекущийВидДоступа = НовыйВидДоступа;
	Элементы.ЗначенияДоступа.Доступность = ЗначениеЗаполнено(ТекущийВидДоступа);

КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьНомераКартинокПользователей(ИдентификаторСтроки = Неопределено)
//	
//	Пользователи.ЗаполнитьНомераКартинокПользователей(Объект.Пользователи, "Пользователь", "НомерКартинки", ИдентификаторСтроки);
//	
//КонецПроцедуры


&НаСервере
Функция СформироватьДанныеВыбораПользователя(Текст)
	
	Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
	
		Возврат Пользователи.СформироватьДанныеВыбораПользователя(Текст, Ложь, Ложь);
		
	КонецЕсли;
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(Текст);
	
КонецФункции


&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(Элементы.Пользователи.ТекущиеДанные = Неопределено, Неопределено, Элементы.Пользователи.ТекущиеДанные.Пользователь));
	
	
	Если Объект.Ссылка <> ГруппаДоступаАдминистраторы Тогда
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
	КонецЕсли;
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",        ПараметрыФормы, Элементы.Пользователи);
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьНадписьВидДоступа(ЗначенияЗадаются = Истина)
	
	НадписьВидДоступа = Строка(Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа) +
	                    ?(ЗначенияЗадаются,
	                      ?(Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен,
	                        НСтр("ru = ' (список запрещенных)'"),
	                        НСтр("ru = ' (список разрешенных)'") ),
	                    "" );
	
	Если НЕ ЗначенияЗадаются Тогда
		Элементы.ОтображениеПредупреждения.ТекущаяСтраница = ?(Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен, Элементы.ПредупреждениеТребуется, Элементы.ПредупреждениеНеТребуется);
	КонецЕсли;

КонецФункции



&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Модифицированность Тогда
		НаборЗаписей = ДанныеФормыВЗначение(ПользователиНаборЗаписей, Тип("РегистрСведенийНаборЗаписей.ПользователиГруппыДоступа"));
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПользователиНаборЗаписей",НаборЗаписей);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ПользователиПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

