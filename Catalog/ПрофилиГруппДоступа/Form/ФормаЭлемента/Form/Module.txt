
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//** Подготовка постоянных коллекций
	
	ПодготовитьСписокВыбораИТаблицуРолей();
	
	// Заполнение списка всегда используемых видов доступа (для исключения при выборе).
	ВидыДоступаИспользуемыеВсегда = Новый СписокЗначений;
	ВидыДоступаИспользуемыеВсегдаСвойства = УправлениеДоступом.СвойстваВидаДоступа().НайтиСтроки(Новый Структура("ВидДоступаИспользуетсяВсегда", Истина));
	Для каждого СвойстваВидаДоступа Из ВидыДоступаИспользуемыеВсегдаСвойства Цикл
		ВидыДоступаИспользуемыеВсегда.Добавить(СвойстваВидаДоступа.ВидДоступа);
	КонецЦикла;
	
	//** Заполнение изменяемых коллекций
	
	// При создании копированием
	Если Объект.Роли.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.Роли[0].СинонимРоли) Тогда
		ЗаполнитьСинонимыТабличнойЧастиРоли();
	КонецЕсли;
	
	// Удаление роли ПолныеПрава из списка выбора и таблицы ролей
	СписокВыбораРолей.Удалить(СписокВыбораРолей.НайтиПоЗначению("ПолныеПрава"));
	ТаблицаРолей.Удалить(ТаблицаРолей.НайтиСтроки(Новый Структура("Имя", "ПолныеПрава"))[0]);
	
	//** Установка постоянной доступности свойств
	
	// Определение прав восстановления по начальному заполнению
	Элементы.ВосстановитьПоНачальномуЗаполнению.Видимость = УправлениеДоступом.ЕстьРоль("ПолныеПрава");
	
	// Определение возможности восстановления по начальному заполнению
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.ВосстановитьПоНачальномуЗаполнению.Доступность = Ложь;
	Иначе
		Элементы.ВосстановитьПоНачальномуЗаполнению.Доступность = УправлениеДоступом.ЕстьНачальноеЗаполнениеПрофиляГруппДоступа(Объект.Ссылка);
	КонецЕсли;
	
	// Определение возможности редактирования элементов формы (перезапись доступна)
	ЭтоПрофильАдминистратор = ТолькоПросмотр ИЛИ Объект.Ссылка = Справочники.ПрофилиГруппДоступа.Администратор;
	
	Элементы.Наименование.ТолькоПросмотр = ЭтоПрофильАдминистратор;
	
	// Настройка редактирования видов доступа
	Элементы.ВидыДоступа.ТолькоПросмотр                     =    ЭтоПрофильАдминистратор;
	Элементы.ВидыДоступаДобавить.Доступность                = НЕ ЭтоПрофильАдминистратор;
	Элементы.КонтекстноеМенюВидыДоступаДобавить.Доступность = НЕ ЭтоПрофильАдминистратор;
	
	УстановитьТолькоПросмотрРолей(ЭтоПрофильАдминистратор);
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьСинонимыТабличнойЧастиРоли();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
		ПараметрыЗаписи.Вставить("ЕстьОшибки");
	КонецЕсли;
	
	ЗаполнитьСинонимыТабличнойЧастиРоли();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
		Предупреждение(НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаПроверкиЗаполненияСпискаРолей(Отказ);
	
	// Проверка незаполненных и повторяющихся видов доступа.
	НомерСтроки = Объект.ВидыДоступа.Количество()-1;
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
	
		ТекущаяСтрока = Объект.ВидыДоступа.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидДоступа) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вид доступа не заполнен!'"),
			                                                  ,
			                                                  "Объект.ВидыДоступа[" + Формат(НомерСтроки, "ЧГ=0") + "].ВидДоступа",
			                                                  ,
			                                                  Отказ);
			Прервать;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущаяСтрока.ВидДоступа));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Вид доступа повторяется!'"),
			                                                  ,
			                                                  "Объект.ВидыДоступа[" + Формат(НомерСтроки, "ЧГ=0") + "].ВидДоступа",
			                                                  ,
			                                                  Отказ);
			Прервать;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
	Если Отказ Тогда
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказатьТолькоВыбранныеРоли"] = Ложь Тогда
		Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.СредиВсехВыбранныеРоли;
	Иначе
		Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.ТолькоВыбранныеРоли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий команд и элементов формы
//

&НаКлиенте
Процедура ВосстановитьПоНачальномуЗаполнению(Команда)
	
	Если Модифицированность Тогда
		Предупреждение(НСтр("ru = 'Сначала запишите изменения!'"));
	ИначеЕсли Вопрос(НСтр("ru = 'Заменить содержимое профиля содержимым начального заполнения?'"), РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
		УправлениеДоступом.НачальноеЗаполнениеПрофилейГруппДоступа(Объект.Ссылка);
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоступаПриИзменении(Элемент)
	
	Если ВидыДоступаИспользуемыеВсегда.НайтиПоЗначению(Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа) <> Неопределено Тогда
		Предупреждение(СтрЗаменить(НСтр("ru = 'Вид доступа ""%1"" не требуется выбирать.
		                                      |По нему ограничение всегда выполняется.'"), "%1", Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа));
		Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры


//** Для работы интерфейса ролей

&НаКлиенте
Процедура ПодобратьРоли(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораРолей", Новый Структура("ЗакрыватьПриВыборе", Ложь), Элементы.Роли);
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриИзменении(Элемент)
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьВыбранныеРоли(ВыбранноеЗначение);
	
КонецПроцедуры


&НаКлиенте
Процедура СинонимРолиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Роли.ТекущиеДанные.СинонимРоли) Тогда
		Элементы.Роли.ТекущиеДанные.СинонимРоли = СписокВыбораРолей.НайтиПоЗначению(Элементы.Роли.ТекущиеДанные.Роль).Представление;
	Иначе
		Элементы.Роли.ТекущиеДанные.Роль = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачальноеЗначение = ?(Элементы.Роли.ТекущиеДанные = Неопределено, Неопределено, Элементы.Роли.ТекущиеДанные.Роль);
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораРолей", Новый Структура("ТекущаяСтрока", НачальноеЗначение), Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Роли.ТекущиеДанные.Роль        = ВыбранноеЗначение;
	Элементы.Роли.ТекущиеДанные.СинонимРоли = СписокВыбораРолей.НайтиПоЗначению(Элементы.Роли.ТекущиеДанные.Роль).Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораРолей(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокВыбораРолей;
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаРолейПометкаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаРолей.ТекущиеДанные;
	
	НайденныеРоли = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
	
	Если СтрокаТаблицы.Пометка Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Строка = Объект.Роли.Добавить();
			Строка.Роль = СтрокаТаблицы.Имя;
			Строка.СинонимРоли = СтрокаТаблицы.Синоним;
		КонецЕсли;
	ИначеЕсли НайденныеРоли.Количество() > 0 Тогда
		Объект.Роли.Удалить(НайденныеРоли[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ПоказатьТолькоВыбранныеРоли = НЕ ПоказатьТолькоВыбранныеРоли;
	
	Элементы.ОтображениеРолей.ТекущаяСтраница = ?(ПоказатьТолькоВыбранныеРоли, Элементы.ТолькоВыбранныеРоли, Элементы.СредиВсехВыбранныеРоли);
	ТекущийЭлемент = ?(ПоказатьТолькоВыбранныеРоли, Элементы.Роли, Элементы.ТаблицаРолей);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьФлажкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	СнятьФлажкиНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции формы
//

//** Для работы интерфейса ролей

&НаСервере
Процедура УстановитьФлажкиНаСервере()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Истина;
		
		НайденныеРоли = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
		Если НайденныеРоли.Количество() = 0 Тогда
			Строка = Объект.Роли.Добавить();
			Строка.Роль = СтрокаТаблицы.Имя;
			Строка.СинонимРоли = СтрокаТаблицы.Синоним;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьФлажкиНаСервере()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Ложь;
		
		НайденныеРоли = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
		Если НайденныеРоли.Количество() > 0 Тогда
			Объект.Роли.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныеРоли(ВыбранныеРоли)
	
	Для каждого Значение Из ВыбранныеРоли Цикл
	
		ЭлементСписка = СписокВыбораРолей.НайтиПоЗначению(Значение);
		Если ЭлементСписка <> Неопределено Тогда
			
			Если Объект.Роли.НайтиСтроки(Новый Структура("Роль", Значение)).Количество() = 0 Тогда
				
				Строка = Объект.Роли.Добавить();
				Строка.Роль        = ЭлементСписка.Значение;
				Строка.СинонимРоли = ЭлементСписка.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСинонимыТабличнойЧастиРоли()
	
	ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
	
	Для каждого Строка Из Объект.Роли Цикл
		
		НайденнаяСтрока = ВсеРоли.Найти(Строка.Роль, "Имя");
		Строка.СинонимРоли = ?(НайденнаяСтрока = Неопределено, "? " + Строка.Роль, НайденнаяСтрока.Синоним);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокВыбораИТаблицуРолей()
	
	ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
	ВсеРоли.Сортировать("Синоним");
	
	Для каждого Строка Из ВсеРоли Цикл
		// Заполнение списка выбора
		СписокВыбораРолей.Добавить(Строка.Имя, Строка.Синоним);
		// Заполнение таблицы ролей
		СтрокаТаблицы = ТаблицаРолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотрРолей(Знач ТолькоПросмотрРолей)
	
	Элементы.Роли.ТолькоПросмотр         = ТолькоПросмотрРолей;
	Элементы.ТаблицаРолей.ТолькоПросмотр = ТолькоПросмотрРолей;
	
	Элементы.РолиПодобрать.Доступность                = НЕ ТолькоПросмотрРолей;
	Элементы.КонтекстноеМенюРолиПодобрать.Доступность = НЕ ТолькоПросмотрРолей;
	Элементы.ТаблицаРолейУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
	Элементы.ТаблицаРолейСнятьФлажки.Доступность      = НЕ ТолькоПросмотрРолей;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьРолиПоСписку()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя)).Количество() > 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеВыбораРолей(Текст)
	
	Список = СписокВыбораРолей.Скопировать();
	
	НомерЭлемента = Список.Количество()-1;
	Пока НомерЭлемента >= 0 Цикл
		Если Найти(ВРег(Список[НомерЭлемента].Представление), ВРег(Текст)) = 0 Тогда
			Список.Удалить(НомерЭлемента);
		КонецЕсли;
		НомерЭлемента = НомерЭлемента - 1;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияСпискаРолей(Отказ)
	
	// Проверка незаполненных и повторяющихся ролей.
	НомерСтроки = Объект.Роли.Количество()-1;
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
	
		ТекущаяСтрока = Объект.Роли.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СинонимРоли) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Роль не заполнена!'"),
			                                                  ,
			                                                  "Объект.Роли[" + Формат(НомерСтроки, "ЧГ=0") + "].СинонимРоли",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Объект.Роли.НайтиСтроки(Новый Структура("Роль", ТекущаяСтрока.Роль));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Роль повторяется!'"),
			                                                  ,
			                                                  "Объект.Роли[" + Формат(НомерСтроки, "ЧГ=0") + "].СинонимРоли",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры



