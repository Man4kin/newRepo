 &НаСервере
 Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Дерево = УправлениеСвойствамиСервер.ЗаполнитьДеревоНастроекБП(Объект.Ссылка);
	Если Дерево.Строки.Количество() = 0 Тогда
		Элементы.ГруппаДополнительныхСвойств.Видимость = Ложь;
	Иначе	
		ЗначениеВДанныеФормы(Дерево,ДеревоСвойств);
	КонецЕсли;
	 Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		 ЭтаФорма.ТолькоПросмотр = Истина;
	 КонецЕсли;	
	 Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		 ОбновитьСхему();
		 Элементы.БизнесПроцесс.Доступность = Ложь;
		 Элементы.БизнесПроцесс.СписокВыбора.Добавить(Объект.Код,Объект.Наименование);
		 БизнесПроцесс = Объект.Код;
	 Иначе	 
		 Если Объект.Владелец = Справочники.СтруктурныеЕдиницы.Центр Тогда
			 Фильтр = "Центр";
		 Иначе
			 Фильтр = "Магазин";
		 КонецЕсли;	
		 Для каждого БП Из Метаданные.БизнесПроцессы Цикл
			 Если Найти(БП.Пояснение,Фильтр) > 0 Тогда
				 Элементы.БизнесПроцесс.СписокВыбора.Добавить(БП.Имя,БП.Синоним);
			 КонецЕсли;	
		 КонецЦикла;	 
		 Элементы.БизнесПроцесс.Доступность = Истина;
	 КонецЕсли;	
 КонецПроцедуры
 
 &НаСервере
 Процедура ОбновитьСхему()
	 НастройкиКартаМаршрута = БизнесПроцессы[СокрЛП(Строка(Объект.Код))].получитькартуМаршрута();
	 для каждого Элемент из НастройкиКартаМаршрута.ЭлементыГрафическойСхемы цикл
		 если ТипЗнч(Элемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") 
			 //{ СИТЕК БрыляковЕЮ 2014-10-09  
			 ИЛИ ТипЗнч(Элемент) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния")
			 ИЛИ ТипЗнч(Элемент) = Тип("ЭлементГрафическойСхемыДекорация")
			 // СИТЕК БрыляковЕЮ 2014-10-09 }
			 тогда продолжить; конецесли;
		 Точка = Элемент.Значение;
		 Если Точка = неопределено тогда    
			 Точка = ПолучитьТочкуМаршрута(Точка.Имя);
		 конецесли;
		 ТочкаМаршрутаТЧ = Объект.НастройкиТочекМаршрута.НайтиСтроки(Новый Структура("ТочкаМаршрута",Точка));
		 Если ТочкаМаршрутаТЧ.КОличество()>0 тогда
			 Строка = ТочкаМаршрутаТЧ[0];
			 
			 УстановитьОформлениеЭлементаГрафическойСхемы(Истина,Строка.ТочкаМаршрута,Строка.Выполнять,Строка.Исполнитель,Строка.РольИсполнителя); 
		 Иначе
			 Попытка
				 УстановитьОформлениеЭлементаГрафическойСхемы(ИСтина,Точка,Ложь,Точка.Исполнитель,Точка.РольИсполнителя);
			 Исключение
				 УстановитьОформлениеЭлементаГрафическойСхемы(ИСтина,Точка);
			 КонецПопытки;	
		 Конецесли;
	 Конеццикла;
 конецпроцедуры
 
 
 &НаКлиенте
 Процедура НастройкиКартаМаршрутаПриАктивизации(Элемент)
	 ТекЭлементКартыМаршрута = Элементы.НастройкиКартаМаршрута.ТекущийЭлемент;
	 Если ТекЭлементКартыМаршрута = неопределено тогда
		 возврат;
	 конецесли;
	 ТМаршрута = ТекЭлементКартыМаршрута.Имя;
	 НаименованиеМаршрута = СокрЛП(ТекЭлементКартыМаршрута.Наименование);
	 Значение = ПолучитьТочкуМаршрута(ТМаршрута);
	 УстановитьВидимостьГруппыТочкаМаршрута(ПроверитьСоответствиеПоСтруктурнойЕдинице(Значение));
	 ЗаполнитьДанныеПоТочкеМаршрута(Значение);  
	 Элементы.НастройкиКартаМаршрута.ТекущийЭлемент = настройкиКартаМаршрута.ЭлементыГрафическойСхемы.Найти(ТекЭлементКартыМаршрута.Имя);
 КонецПроцедуры
 
 &НаСервере
 Процедура ЗаполнитьДанныеПоТочкеМаршрута(ТочкаМаршрута = неопределено)
	 СтрокиТочкаМаршрута = Объект.НастройкиТочекМаршрута.НайтиСтроки(Новый Структура("ТочкаМаршрута",ТочкаМаршрута));
	 Если СТрокиТочкаМаршрута.Количество()>0 тогда
		 СтрокаТочкаМаршрута = СтрокиТочкаМаршрута[0];
		 ВЫполнять = СтрокаТочкаМаршрута.Выполнять;
		 Групповая = СтрокаТочкаМаршрута.Групповая;
		 Исполнитель = СтрокаТочкаМаршрута.Исполнитель;
		 РольИсполнителя = СтрокаТочкаМаршрута.РольИсполнителя;
		 ОповещатьПоEmail = СтрокаТочкаМаршрута.ОповещатьПОEmail;
		 ОповещатьПоSmS =СтрокаТочкаМаршрута.ОповещатьПоSMS;
	 Иначе	 
		 ВЫполнять = Ложь;
		 Попытка
			 Групповая = ?(ТочкаМаршрута = Неопределено,Ложь,ТочкаМаршрута.Групповая);
		 Исключение
			 Групповая = Ложь;
		 КонецПопытки;	
		 Исполнитель = Неопределено;
		 Попытка
			 РольИсполнителя = ?(ТочкаМаршрута = Неопределено,Неопределено,ТочкаМаршрута.РольИсполнителя);
		 Исключение
			 РольИсполнителя = Неопределено;
		 КонецПопытки;	
		 ОповещатьПоEmail = Ложь;
		 ОповещатьПоSmS =Ложь;
	 конецесли;
 КонецПроцедуры
 &НаСервере
 Процедура УстановитьОформлениеЭлементаГрафическойСхемы(Групповое = Ложь,ТочкаМаршрута,Выполнение = Неопределено,Исполнитель = неопределено, РольИсполнителя = неопределено)
	 Если Не ПроверитьСоответствиеВидаТочкиМаршрута(ТочкаМаршрута) тогда
		 возврат;
	 конецесли;
	 ЭлементГрафическойСхемы = НастройкиКартаМаршрута.ЭлементыГрафическойСхемы.Найти(ТочкаМаршрута);
	 
	 Если ЭлементГрафическойСхемы<>Неопределено тогда
		 Если Выполнение=Неопределено тогда
			 //Если Групповое тогда
			 //	Выполнять = Истина;
			 //	Конецесли;
			 Выполнение = Истина;
		 Конецесли;
		 Если Выполнение тогда
			 КартаМаршрута = БизнесПроцессы[СокрЛП(Строка(Объект.Код))].получитькартуМаршрута();
			 ЭлементГрафическойСхемыКартыМаршрута = КартаМаршрута.ЭлементыГрафическойСхемы.Найти(ТочкаМаршрута);
			 Если ЭлементГрафическойСхемыКартыМаршрута<>Неопределено тогда
				 ЭлементГрафическойСХемы.ЦветФона = ЭлементГрафическойСхемыКартыМаршрута.ЦветФона;
			 конецесли;
		 ИначеЕсли Не Выполнение тогда
			 ЭлементГрафическойСхемы.цветФона = WebЦвета.СветлоСерый;
			 Если ЭлементГрафическойСхемыКартыМаршрута<>Неопределено и ТипЗнч(ЭлементГрафическойСхемыКартыМаршрута)<>Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") тогда
				 ЭлементГрафическойСХемы.пояснение = "Не выполяется";
			 конецесли;
		 Конецесли;
		 Если Выполнение тогда
			 Если ЗначениеЗаполнено(Исполнитель) и ЭлементГрафическойСхемыКартыМаршрута<>Неопределено и ТипЗнч(ЭлементГрафическойСхемыКартыМаршрута)<>Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") тогда
				 ЭлементГрафическойСхемы.Пояснение =  Исполнитель;
			 ИначеЕсли Не ЗначениеЗаполнено(Исполнитель) тогда	 
				 КартаМаршрута = БизнесПроцессы[СокрЛП(Строка(Объект.Код))].получитькартуМаршрута();
				 ЭлементГрафическойСхемыКартыМаршрута = КартаМаршрута.ЭлементыГрафическойСхемы.Найти(ТочкаМаршрута);
				 Если ЭлементГрафическойСхемыКартыМаршрута<>Неопределено и ТипЗнч(ЭлементГрафическойСхемыКартыМаршрута)<>Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") тогда
					 ЭлементГрафическойСХемы.ПОяснение = ЭлементГрафическойСхемыКартыМаршрута.Значение.Исполнитель;
				 конецесли;
			 Конецесли;
			 Если ЭлементГрафическойСхемыКартыМаршрута<>Неопределено и ТипЗнч(ЭлементГрафическойСхемыКартыМаршрута)<>Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") тогда
				 Если ЗначениеЗаполнено(РольИсполнителя) тогда
					 ЭлементГрафическойСхемы.Пояснение =  ЭлементГрафическойСхемы.Пояснение +?(ЗначениеЗаполнено(ИСполнитель),"/","")+РольИсполнителя;
				 ИначеЕсли Не ЗначениеЗаполнено(РольИсполнителя) тогда	 
					 КартаМаршрута = БизнесПроцессы[СокрЛП(Строка(Объект.Код))].получитькартуМаршрута();
					 ЭлементГрафическойСхемыКартыМаршрута = КартаМаршрута.ЭлементыГрафическойСхемы.Найти(ТочкаМаршрута);
					 Если ЭлементГрафическойСхемыКартыМаршрута<>Неопределено тогда
						 ЭлементГрафическойСХемы.Пояснение = ЭлементГрафическойСхемы.Пояснение +?(ЗначениеЗаполнено(ИСполнитель),"/","")+ЭлементГрафическойСхемыКартыМаршрута.Значение.РольИсполнителя;
					 конецесли;
				 Конецесли;
			 Конецесли;
			 
		 Конецесли;
	 Конецесли;
 КонецПроцедуры 
 
 &НаСервере
 Функция ПроверитьСоответствиеВидаТочкиМаршрута(ТочкаКартыМаршрута)
	 Если ТочкаКартыМаршрута = неопределено тогда
		 Возврат Ложь;
	 Конецесли;
	 Вид = ТочкаКартыМаршрута.Вид;
	 Если Вид = ВидТочкиМаршрутаБизнесПроцесса.ВложенныйБизнесПроцесс или Вид = ВидТочкиМаршрутаБизнесПроцесса.Действие тогда
		 Флаг = Истина;
	 Иначе
		 Флаг = Ложь;
	 Конецесли;
	 Возврат Флаг;
 Конецфункции
 
 &НаСервере
 Функция ПроверитьСоответствиеПоСтруктурнойЕдинице(ТочкаКартыМаршрута)
	 Если ТочкаКартыМаршрута = неопределено тогда
		 Возврат Ложь;
	 Конецесли;
	 Вид = ТочкаКартыМаршрута.Вид;
	 //Если Вид = ВидТочкиМаршрутаБизнесПроцесса.ВложенныйБизнесПроцесс или Вид = ВидТочкиМаршрутаБизнесПроцесса.Действие тогда
	 Если Вид = ВидТочкиМаршрутаБизнесПроцесса.Действие тогда
		 Если ЗначениеЗаполнено(ТочкаКартыМаршрута.Пояснение) Тогда
			 Если ПараметрыСеанса.ЭтоЦентр Тогда
				 Фильтр = "Центр";
			 Иначе
				 Фильтр = "Магазин";
			 КонецЕсли;	
			 Если Найти(ТочкаКартыМаршрута.Пояснение,Фильтр) > 0 Тогда
				 Флаг = Истина;
			 Иначе	 
				 Флаг = Ложь;
			 КонецЕсли	 
		 Иначе	 
			 Флаг = Истина;
		 КонецЕсли	 
	 Иначе
		 Флаг = Ложь;
	 Конецесли;
	 Возврат Флаг;
 Конецфункции
 
 &НаКлиенте
 Процедура ВыполнятьПриИзменении(Элемент)
	 ИзменитьЗначение(Элемент); 
	 ИзменитьЗначение(Элементы.Групповая); 
	 ИзменитьЗначение(Элементы.РольИсполнителя); 
	 УстановитьОформлениеЭлементаГрафическойСхемы(Ложь,ПолучитьТочкуМаршрута(ТМаршрута),ЭтаФорма[Элемент.Имя],ИСполнитель,РольИсполнителя);
	 ОбновитьСхему();
 	 Элементы.НастройкиКартаМаршрута.ТекущийЭлемент = настройкиКартаМаршрута.ЭлементыГрафическойСхемы.Найти(ТМаршрута);
КонецПроцедуры
 
 &НаСервере
 Функция ПолучитьТочкуМаршрута(Имя)
	 Попытка
	 	Возврат БизнесПроцессы[СокрЛп(Строка(Объект.ссылка.Код))].ТочкиМаршрута[Имя];
	Исключение
	 	Возврат Неопределено;
	КонецПопытки;	
 конецФункции
 
 
 
 &НаКлиенте
 Процедура ИзменитьЗначение(Элемент)	
	 СтрокиНастроекТочекМаршрута = Объект.НастройкиТочекМаршрута.НайтиСтроки(Новый Структура("ТочкаМаршрута",ПолучитьТочкуМаршрута(ТМаршрута)));
	 Если СтрокиНастроекТочекМаршрута.Количество() <> 0 Тогда
		 СтрокиНастроекТочекМаршрута[0][Элемент.Имя] = ЭтаФорма[Элемент.Имя];
	 Иначе
		 НоваяСТрока = Объект.НастройкиТочекМаршрута.Добавить();
		 НоваяСТрока.ТочкаМаршрута = ПолучитьТочкуМаршрута(ТМаршрута);
		 НоваяСТрока[элемент.Имя] =   ЭтаФорма[Элемент.Имя];
		 НоваяСтрока.Выполнять = Истина;
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ГрупповаяПриИзменении(Элемент)
	 ИзменитьЗначение(Элемент); 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ИсполнительПриИзменении(Элемент)
	 ИзменитьЗначение(Элемент); 
	 ОбновитьСхему();
 КонецПроцедуры
 
 &НаКлиенте
 Процедура РольИсполнителяПриИзменении(Элемент)
	 ИзменитьЗначение(Элемент); 
	 ОбновитьСхему(); 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОповещатьПоEmailПриИзменении(Элемент)
	 ИзменитьЗначение(Элемент); 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОповещатьПоSMSПриИзменении(Элемент)
	 ИзменитьЗначение(Элемент); 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПриОткрытии(Отказ)
	 УстановитьВИдимостьГруппыТочкаМаршрута(Ложь);
	 Элементы.Декорация1.Видимость = Ложь;
 КонецПроцедуры
 
 
 Процедура УстановитьВидимостьГруппыТочкаМаршрута(Флаг)
	 //Элементы.Выполнять.Видимость = флаг;
	 //Элементы.групповая.видимость = флаг;
	 //Элементы.ОповещатьПоEmail.Видимость = флаг;
	 //Элементы.ОповещатьПоSMS.видимость = флаг;
	 //Элементы.Исполнитель.Видимость = флаг;
	 //Элементы.РольИсполнителя.Видимость = флаг;
	 //Элементы.Декорация1.Видимость = Истина;
	 Элементы.Выполнять.Доступность = флаг;
	 Элементы.групповая.Доступность = флаг;
	 Элементы.ОповещатьПоEmail.Доступность = флаг;
	 Элементы.ОповещатьПоSMS.Доступность = Ложь;//флаг;
	 Элементы.Исполнитель.Доступность = флаг;
	 Элементы.РольИсполнителя.Доступность = флаг;
	 //Элементы.Декорация1.Видимость = Истина;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура БизнесПроцессПриИзменении(Элемент)
	 Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		 КодВозврата = Вопрос(Нстр("ru = 'Данные еще не записаны. Записать?'"), РежимДиалогаВопрос.ДаНет);
		 Если КодВозврата = КодВозвратаДиалога.Да Тогда
			 Объект.Код = БизнесПроцесс;
			 Объект.Наименование = Элементы.БизнесПроцесс.ТекстРедактирования;
			 ОбновитьСхему(); 
			 Записать();
		 КонецЕсли;	
	 КонецЕсли;	
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПослеЗаписи(ПараметрыЗаписи)
	 //Вставить содержимое обработчика
 КонецПроцедуры
 
 &НаКлиенте
Процедура ДеревоСвойствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	УправлениеСвойствамиКлиент.ДеревоСвойствПриНачалеРедактирования(Элемент,Объект);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвойствПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвойствПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Картинка = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправлениеСвойствамиСервер.ПеренестиЗначенияСвойств(ТекущийОбъект.ДополнительныеРеквизиты, РеквизитФормыВЗначение("ДеревоСвойств"));
КонецПроцедуры

