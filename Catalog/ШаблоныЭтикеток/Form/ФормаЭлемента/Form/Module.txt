
&НаКлиенте
Процедура Удалить(Команда)
	текОбласть = Элементы.тдРедактор.ТекущаяОбласть;
	Если текОбласть = неопределено тогда
		возврат;
	Конецесли;
	МассивСтрок = Объект.Области.НайтиСтроки(Новый Структура("ИмяОбласти",ТекОбласть.Имя));
	Если МассивСтрок.количество() = 0 тогда
		Возврат;
	конецесли;
	СтрокаТЧОбласти = МассивСтрок[0];
	Объект.Области.Удалить(Объект.Области.Индекс(СтрокаТчОбласти));
	тдРедактор.Рисунки.удалить(ТекОбласть);
	//тдРедактор.ТекущаяОбласть.Разъединить();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//popn+
	//СхемаКомпоновкиДанных = Обработки.ПечатьЦенниковИЭтикеток.ПолучитьМакет("ДоступныеПоля");
	СхемаКомпоновкиДанных = Обработки.ПечатьЦенниковИЭтикеток.ПолучитьМакет("ДоступныеПоляШаблоновЦенниковИЭтикеток");
	АдресВХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВХранилище));
	//popn-
	ЭтоНовый = Не ЗначениеЗаполнено(Объект.Ссылка);
	Если ЭтоНовый тогда
		Объект.ПоУмолчанию = Истина;
		
		// зададим общие параметры
		Элементы.тдРедактор.ОтображатьЗаголовки = Ложь;
		Элементы.тдРедактор.ОтображатьСетку = Истина;
		//popn+
		//Элементы.тдРедактор.ТолькоПросмотр = Истина;
		//popn-
		Элементы.тдРедактор.ВертикальнаяПолосаПрокрутки = Ложь;
		Элементы.тдРедактор.ГоризонтальнаяПолосаПрокрутки = Ложь;
		// зададим размер и парарметры строк/колонок стартовой области
		Область = тдРедактор.Область(1,1,100,100);
		Область.ВысотаСтроки = 6;
		Область.ШиринаКолонки = 2;
		// общая часть картинки
		Область = тдРедактор.Область(2,2,26,26);
		Область.Узор = ТипУзораТабличногоДокумента.Сплошной;
		Область.ЦветФона = WebЦвета.СеребристоСерый;//ЦветаСтиля.ФонЗаголовкаСправочника;
		лЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
		Область.Обвести(лЛиния,лЛиния,лЛиния,лЛиния);
	Иначе
		тдРедактор = Объект.Ссылка.Шаблон.Получить();
	Конецесли;
КонецПроцедуры

&НаСервере
Функция ПолучитьМакет(ИмяМакета)
	Макет =  Обработки.ПечатьЦенниковИЭтикеток.ПолучитьМакет(ИмяМакета);
	Возврат Макет;	
КонецФункции

// Функция получает строку с именем параметра штрихкода для передачи в СКД.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяПараметраШтрихкод()
	
	Возврат "ШтрихКод";
	
КонецФункции // ПолучитьИмяПараметраШтрихкод()

&НаСервере
Функция ВставитьРисунокШтрихкода(ИмяТекущейОбласти)
	МакетШК =   ПолучитьМакет("КартинкаШтрихкода");
		Картинка= Новый Картинка(МакетШК);
	РисунокШтрихкода = тдРедактор.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Индекс = тдРедактор.Рисунки.Индекс(РисунокШтрихкода);
	тдРедактор.Рисунки[Индекс].Картинка = Картинка;
	ОбластьИмя = ПолучитьИмяПараметраКартинка()+СтрЗаменить(Новый УникальныйИдентификатор,"-","_");
	тдРедактор.Рисунки[Индекс].Имя = ОбластьИмя;
	тдРедактор.Рисунки[Индекс].Расположить(тдРедактор.Область(ИмяТекущейОбласти));
	Возврат ОбластьИмя;
 КонецФункции // ВставитьРисунокШтрихкода()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяПараметраТекст()
	
	Возврат "Текст";
	
КонецФункции 

&НаСервере
Функция ВставитьТекст(ИмяТекущейОбласти,Текст)
	РисунокТекст = тдРедактор.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
	Индекс = тдРедактор.Рисунки.Индекс(РисунокТекст);
	ОбластьИМя =  ПолучитьИмяПараметраТекст()+СтрЗаменить(Новый УникальныйИдентификатор,"-","_");
	тдРедактор.Рисунки[Индекс].Имя =ОбластьИмя;
	тдРедактор.Рисунки[Индекс].Текст = Текст;
	тдРедактор.Рисунки[Индекс].Расположить(ТДРедактор.Область(ИмяТекущейОбласти));
	тдРедактор.Рисунки[Индекс].Шрифт = Новый Шрифт("Arial", 8, Ложь, Ложь, Ложь, Ложь);
	Возврат ОбластьИмя;
КонецФункции // ВставитьРисунокШтрихкода()

&НаКлиенте
Функция Область2Координаты(облОбласть, Кол1, Стр1, Кол2, Стр2) Экспорт
	Кол1 = облОбласть.Лево;
	Стр1 = облОбласть.Верх;
	Кол2 = облОбласть.Право;
	Стр2 = облОбласть.Низ;
	Возврат ?(Стр1 <> Стр2,Истина,Ложь);// Истина - ячейка, Ложь - область
КонецФункции // Область2Координаты()

&НаСервере
Функция ЕстьВхождениеИПерекрытиеОбластей(X1, Y1, X2, Y2)
	буПерекрытие = Ложь; стрИмя = "";
	Для каждого Область из Объект.Области Цикл
		Если ((X1 >= Область.Лево и X1 <= Область.Право) и (Y1 >= Область.Верх и Y1 <= Область.Низ)) или
			 ((X2 >= Область.Лево и X2 <= Область.Право) и (Y2 >= Область.Верх и Y2 <= Область.Низ)) Тогда
			буПерекрытие = Истина; // есть перекрытие
			//стрИмя = Область.Наименование;
		КонецЕсли;
	КонецЦикла; // выбор из коллекции тзОбласти
	// посмотрим на предмет вхождения
	Если не буПерекрытие Тогда // будем проверять только тогода, когда нет перекрытий
		Для каждого Область из Объект.Области Цикл
			Если (X1 <= Область.Лево и X1 <= Область.Право) и (X2 >= Область.Лево и X2 >= Область.Право) и
				 (Y1 <= Область.Верх и Y1 <= Область.Низ) и (Y2 >= Область.Верх и Y2 >= Область.Низ) Тогда
				буПерекрытие = Истина;
				//стрИмя = Область.Наименование;
			КонецЕсли;
		КонецЦикла; // выбор из коллекции тзОбласти
	КонецЕсли;
	Возврат буПерекрытие;
Конецфункции

&НаКлиенте
Процедура ДоступныеПоляДляВыбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//Если ТипЗнч(тдредактор.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
	//	Предупреждение("Для переноса поля шаблона нужно выделить ячейку или область ячеек!");
	//	Возврат;
	//Иначе
	//	ТекущаяОбласть = тдРедактор.ТекущаяОбласть;
	//	//ТекущаяОбласть.Объединить();
	//КонецЕсли;
	//
	//// получим координаты области
	//X1 = 0; X2 = 0; Y1 = 0; Y2 = 0;
	//буОбласть = Область2Координаты(ТекущаяОбласть, X1, Y1, X2, Y2);
	//// проверим на выход за пределы зоны рисования
	//X1 = ?(X1<2,2,X1); X1 = ?(X1>25,25,X1); X2 = ?(X2<2,2,X2); X2 = ?(X2>25,25,X2);
	//Y1 = ?(Y1<2,2,Y1); Y1 = ?(Y1>25,25,Y1); Y2 = ?(Y2<2,2,Y2); Y2 = ?(Y2>25,25,Y2);
	//тдРедактор.ТекущаяОбласть = тдРедактор.Область(Y1, X1, Y2, X2);
	//ЭтаФорма.ОбновитьОтображениеДанных();
	//ТекущаяОбласть = тдРедактор.ТекущаяОбласть;
	//буОбласть = Область2Координаты(ТекущаяОбласть, X1, Y1, X2, Y2);
	//// посмотрим на перекрытие
	//Если ЕстьВхождениеИПерекрытиеОбластей(X1, Y1, X2, Y2) Тогда
	//	//Предупреждение("Есть перекрытие или поглощение ("+стрИмя+") - добавить область нельзя!");
	//	Сообщить("Есть перекрытие или поглощение. Добавить область нельзя!");
	//	Возврат;
	//КонецЕсли;
	//
	//Картинка = неопределено;
	//ИмяПоляВШаблоне = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);
	//ТипОбласти = "Текст";
	//ПолеВШаблонеСТр = СокрЛП(Строка(ИмяПоляВШаблоне.Поле));
	//Если ПолеВШаблонеСтр = ПолучитьИмяПараметраШтрихкод() Тогда
	//	Область = ВставитьРисунокШтрихкода(ТекущаяОбласть.Имя);
	//	ТипОбласти = "ШтрихКод";
	//ИначеЕсли ПолеВШаблонеСтр = ПолучитьИмяПараметраКартинка() тогда
	//	ФАйлСКартинкой = ВыбратьФАйлСКартинкой();
	//	Если ФайлСКартинкой <> Неопределено тогда
	//		Область=	ВставитьРисунок(ФайлСКартинкой, ТекущаяОбласть.Имя);
	//	Иначе
	//		Возврат;
	//	Конецесли;
	//	ТипОбласти = "Картинка";
	//ИначеЕсли ПолеВШаблонеСтр = ПолучитьИмяПараметраТекст() тогда
	//	Текст = "";
	//	Подсказка = "Введите текст";
	//	Если ВвестиСтроку(Текст, Подсказка, 0, Истина) Тогда
	//		Область =	ВставитьТекст(ТекущаяОбласть.Имя,Текст);
	//	Иначе
	//		Возврат;
	//	Конецесли;	
	//	ТипОбласти = "Текст";
	//Иначе
	//	Область = ВставитьТекст(ТекущаяОбласть.Имя,ИмяПоляВШаблоне.Заголовок);
	//	ТипОбласти = "ЗначениеБД";
	//КонецЕсли;
	//ДобавитьСтрокуВТЧОбласти(СокрЛП(Строка(ИмяПоляВШаблоне.Поле)),Область,ТипОбласти, Новый Структура("Лево, Верх, Право, Низ", ТекущаяОбласть.Лево, ТекущаяОбласть.Верх, ТекущаяОбласть.Право, ТекущаяОбласть.Низ));
	
	//{БредовЮГ 2015-01-07 Изменяем механизм подбора данных СКД
	ТекСтрока = Элементы.ПараметрыПечати.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан параметр печати",Объект,"Объект.ПараметрыПечати");
		Возврат;
	КонецЕсли;
	ИмяПоляВШаблоне = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);
	ПолеВШаблонеСТр = СокрЛП(Строка(ИмяПоляВШаблоне.Поле));
	Если ПолеВШаблонеСТр = "ВычисляемоеПоле" тогда	
		Формула = ОткрытьФормуМодально("ОбщаяФорма.ФормаВычисленияТекста",Новый Структура("ВычисляемыйТекст",ТекСтрока.Izh_Вычисление),ЭтаФорма);
		Если Формула = Неопределено Тогда Возврат; КонецЕсли;
		ТекСтрока.Izh_Вычисление = Формула
	КонецЕсли;
	ТекСтрока.Значение = ПолеВШаблонеСТр;
	//БредовЮГ 2015-01-07 Изменяем механизм подбора данных СКД}
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВТЧОбласти(ИмяПоля,ИмяОбласти,ТипОбласти,сткКоординаты)
	Область = Объект.Области.Добавить();
	Область.ИмяПоля = ИмяПоля;
	Область.ИмяОбласти = ИмяОбласти;
	Область.Тип = Перечисления.типыОбластейЭтикеток[ТипОбласти];
	Область.Лево = сткКоординаты.Лево;
	Область.Верх = сткКоординаты.Верх;
	Область.Право = сткКоординаты.Право;
	Область.Низ = сткКоординаты.Низ;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяПараметраКартинка()
	
	Возврат "Картинка";
	
КонецФункции // ПолучитьИмяПараметраШтрихкод()

&НаКлиенте
Функция ВставитьРисунок(ФайлСКартинкой,ИмяТекущейОбласти) 
	Картинка= Новый Картинка(ФайлСКартинкой);
	РисунокШтрихкода = тдРедактор.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Индекс = тдРедактор.Рисунки.Индекс(РисунокШтрихкода);
	тдРедактор.Рисунки[Индекс].Картинка = Картинка;
	ОбластьИмя = ПолучитьИмяПараметраКартинка()+СтрЗаменить(Новый УникальныйИдентификатор,"-","_");
	тдРедактор.Рисунки[Индекс].Имя = ОбластьИмя;
	тдРедактор.Рисунки[Индекс].Расположить(тдРедактор.Область(ИмяТекущейОбласти));
	Возврат ОбластьИмя;
КонецФункции // ВставитьРисунокШтрихкода()

&НаКлиенте
Функция ВыбратьФайлСКартинкой()
	ФайлСКартинкой = неопределено;
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		
		УстановитьРасширениеРаботыСФайлами();
		
	КонецЕсли;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		дФайл = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		дФайл.Заголовок = "Выберите файл картинки ...";
		//дФайл.Фильтр = "Картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|Все файлы (*.*)|*.*|";
		дФайл.Фильтр = "Картинки (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|";
		дФайл.ПредварительныйПросмотр = Истина;
		дФайл.ПроверятьСуществованиеФайла = Истина;
		дФайл.МножественныйВыбор = Ложь;
		Если дФайл.Выбрать() Тогда
			ФайлСкартинкой =дфайл.ВыбранныеФайлы[0];
		КонецЕсли;
	Конецесли;
	Возврат ФайлСкартинкой;
конецфункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.Шаблон = Новый ХранилищеЗначения(тдРедактор);
КонецПроцедуры

&НаКлиенте
Процедура тдРедакторВыбор(Элемент, Область, СтандартнаяОбработка)
	
	мСтрок = Объект.Области.НайтиСтроки(Новый Структура("ИмяОбласти", Область.Имя));
	Если Не мСтрок.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОбластьТип = мСтрок[0].Тип;
		Если УникальныйИдентификаторФормыСвойствОбласти = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
			УникальныйИдентификаторФормыСвойствОбласти = Новый УникальныйИдентификатор;
		КонецЕсли;
		ФормаСвойствОбласти = ПолучитьФорму("Справочник.ШаблоныЭтикеток.Форма.СвойстваОбластиШаблона", , ЭтаФорма, УникальныйИдентификаторФормыСвойствОбласти);
		ЗаполнитьФормуСвойствОбласти(ФормаСвойствОбласти, Область, ОбластьТип);
		
		Если ФормаСвойствОбласти.Открыта() Тогда
			ФормаСвойствОбласти.Активизировать();
		Иначе
			ФормаСвойствОбласти.ЗакрыватьПриЗакрытииВладельца = Истина;
			ФормаСвойствОбласти.Открыть();
		КонецЕсли;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура тдРедакторПриАктивизацииОбласти(Элемент)
	
	Если Не УникальныйИдентификаторФормыСвойствОбласти = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Область = Элемент.ТекущаяОбласть;
		мСтрок = Объект.Области.НайтиСтроки(Новый Структура("ИмяОбласти", Область.Имя));
		Если Не мСтрок.Количество() = 0 Тогда
			ОбластьТип = мСтрок[0].Тип;
			ФормаСвойствОбласти = ПолучитьФорму("Справочник.ШаблоныЭтикеток.Форма.СвойстваОбластиШаблона", , ЭтаФорма, УникальныйИдентификаторФормыСвойствОбласти);
			Если ФормаСвойствОбласти.Открыта() Тогда
				ЗаполнитьФормуСвойствОбласти(ФормаСвойствОбласти, Область, ОбластьТип);
			КонецЕсли; 
		Конецесли;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура тдРедакторПриИзмененииСодержимогоОбласти(Элемент, Область)
	Если НЕ Объект.Области.НайтиСтроки(Новый Структура("ИмяОбласти",Область.Имя)).Количество()>0 тогда
		Область.Очистить(Истина,Ложь,Ложь);
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФормуСвойствОбласти(ФормаСвойствОбласти, Область, ОбластьТип)

	Если ОбластьТип = ПредопределенноеЗначение("Перечисление.ТипыОбластейЭтикеток.Текст") Или ОбластьТип = ПредопределенноеЗначение("Перечисление.ТипыОбластейЭтикеток.ЗначениеБД") Тогда
		ФормаСвойствОбласти.ВертикальноеПоложение = Область.ВертикальноеПоложение;
		ФормаСвойствОбласти.ГоризонтальноеПоложение = Область.ГоризонтальноеПоложение;
		ФормаСвойствОбласти.Жирный = Область.Шрифт.Жирный;
		ФормаСвойствОбласти.Наклонный = Область.Шрифт.Наклонный;
		ФормаСвойствОбласти.Размер = Область.Шрифт.Размер;
		ФормаСвойствОбласти.ШрифтИмя = Область.Шрифт.Имя;
		ФормаСвойствОбласти.Текст = Область.Текст;
		
		ФормаСвойствОбласти.Элементы.Шрифт.Видимость = Истина;
		ФормаСвойствОбласти.Элементы.НачертаниеИРазмер.Видимость = Истина;
		ФормаСвойствОбласти.Элементы.Положение.Видимость = Истина;
	Иначе
		ФормаСвойствОбласти.Текст = Строка(ОбластьТип);
		
		ФормаСвойствОбласти.Элементы.Шрифт.Видимость = Ложь;
		ФормаСвойствОбласти.Элементы.НачертаниеИРазмер.Видимость = Ложь;
		ФормаСвойствОбласти.Элементы.Положение.Видимость = Ложь;
	КонецЕсли;
	
	ФормаСвойствОбласти.Обвести = Область.ГраницаСверху;	//по верхней определяем, что есть рамка
	ФормаСвойствОбласти.ОбластьТип = ОбластьТип;
	ФормаСвойствОбласти.ОбластьИмя = Область.Имя;
	
	ФормаСвойствОбласти.Элементы.Текст.РедактированиеТекста = ОбластьТип = ПредопределенноеЗначение("Перечисление.ТипыОбластейЭтикеток.Текст");
	
КонецПроцедуры // ЗаполнитьФормуСвойствОбласти()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.ПоУмолчанию тогда
		выбШаблоны = Справочники.ШаблоныЭтикеток.Выбрать();
		Пока выбШаблоны.Следующий() Цикл
			Если выбШаблоны.Ссылка = ТекущийОбъект.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			Если выбШаблоны.ПоУмолчанию Тогда
				обШаблон = выбШаблоны.ПолучитьОбъект();
				обШаблон.ПоУмолчанию = Ложь;
				обШаблон.Записать();
			КонецЕсли;
		КонецЦикла;
	Конецесли;
КонецПроцедуры

//{БредовЮГ 2015-01-07 Шаблон печати по файлу, получение параметров из файла шаблона
&НаСервере
Процедура ПоместитьВХранилищеЗначенийНаСервере(ТекстФайла)
	ОбъектСправочник = РеквизитФормыВЗначение("Объект");
	ОбъектСправочник.Izh_ШаблонEPL = Новый ХранилищеЗначения(ТекстФайла);
	ОбъектСправочник.Записать();
	ЗначениеВРеквизитФормы(ОбъектСправочник,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлШаблона(Команда)
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Текст = "ru = ""Шаблон EPL""; en = ""File EPL""";
	Фильтр = НСтр(Текст)+"(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл шаблона EPL";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.ПараметрыПечати.Очистить();
		
		ИмяФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Объект.Izh_ИмяФайлаXML = ИмяФайла;
		
		//сохраняем текст файла в хранилище значений
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайла,КодировкаТекста.UTF8);
		ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
		ПоместитьВХранилищеЗначенийНаСервере(ТекстФайла);
		
		// читаем XML файл на наличие параметров печати
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		СледующаяИтерацияПараметр = Ложь;
		Пока ЧтениеXML.Прочитать() цикл
			Если СледующаяИтерацияПараметр И ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				НоваяСтрока = Объект.ПараметрыПечати.Добавить();
				НоваяСтрока.Параметр = ЧтениеXML.Значение;
				СледующаяИтерацияПараметр = Ложь;
			КонецЕсли;
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Name" Тогда
				СледующаяИтерацияПараметр = Истина;
			КонецЕсли;
		КонецЦикла;
		ЭтаФорма.Модифицированность=Истина;
	КонецЕсли;
КонецПроцедуры


//БредовЮГ 2015-01-07 Шаблон печати по файлу, получение параметров из файла шаблона}