Перем ВнешняяКомпонента;

&НаКлиенте 
Перем КомпонентаHL;
&НаКлиенте 
Перем Принтер;

///////////////////////////////////////////////////
//++БИТ БВО
&НаСервере
Функция ПолучитьФирмуНоменклатурыИзПравилПерепродажи(Номенклатура)
	
	Результат = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Ссылка.Код КАК Код
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Ссылка" , Номенклатура);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ.Ссылка КАК Ссылка,
	|	ТЗ.Код КАК Код
	|ПОМЕСТИТЬ ВТИерархия
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПерепродажаСрезПоследних.ФирмаПродажи,
	|	ВТИерархия.Ссылка КАК ГруппаНоменклатуры,
	|	ВТИерархия.Код КАК Код
	|ИЗ
	|	ВТИерархия КАК ВТИерархия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Перепродажа.СрезПоследних(&НаДату, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ПерепродажаСрезПоследних
	|		ПО ВТИерархия.Код = ПерепродажаСрезПоследних.ГруппаНоменклатуры
	|			И (ПерепродажаСрезПоследних.Izh_НеИспользовать = ЛОЖЬ)
	|ГДЕ
	|	НЕ ПерепродажаСрезПоследних.ФирмаПродажи ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерепродажаСрезПоследних.ФирмаПродажи,
	|	ВТИерархия.Ссылка,
	|	ВТИерархия.Код";
	Запрос.УстановитьПараметр("НаДату"	, ТекущаяДата());
	Запрос.УстановитьПараметр("ТЗ"		, ТЗ);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Объект.СтруктурнаяЕдиница);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Фирма = Объект.Фирма;
	Пока Выборка.Следующий() Цикл
		Фирма = Выборка.ФирмаПродажи;				
	КонецЦикла;
	
	Возврат Фирма;
	
КонецФункции
//--БИТ БВО

///////////////////////////////////////////////////
&НаКлиенте
Процедура ПодборНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// {ВетровИА 2015-08-11 Обращение 0000134674
	НаДату = ?(ЗначениеЗаполнено(Объект.ДатаАкции), Объект.ДатаАкции, ТекущаяДата());
	МассивНоменклатуры = Элемент.ВыделенныеСтроки;
	ШаблоныЦенника = ПолучитьШаблоныЦенника(МассивНоменклатуры, НаДату);
	// ВетровИА 2015-08-11 Обращение 0000134674} 
	
	Для Каждого Строка Из Элемент.ВыделенныеСтроки Цикл
		ТекСтрока = ОбработкаТабличныхЧастейКлиент.ЗаполнитьИзПодбора(ЭтаФорма, Объект, Элемент.ДанныеСтроки(Строка), Элементы.состав,СтандартнаяОбработка);	
		Если ТекСтрока <> Неопределено тогда
			Если ИзЗадачиБизнесПроцесса Тогда
				ТекСтрока.СтараяЦена = СтараяЦенаПриПодбореНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
			КонецЕсли;
			ТекСтрока.КоличествоЦенников = ?(Элементы.КоличествоЦенниковВоВсехСтроках.Видимость, КоличествоЦенниковВоВсехСтроках, 0);
			ТекСтрока.КоличествоЭтикеток = ?(Элементы.КоличествоЭтикетокВоВсехСтроках.Видимость, КоличествоЭтикетокВоВсехСтроках, 0);
			ТекСтрока.ШаблонЦенника = ШаблоныЦенника[ТекСтрока.Номенклатура];
			ТекСтрока.ШаблонЭтикетки = ПолучитьЭтикеткуПОУмолчанию();
			ТекСтрока.Флаг = Истина;
			//++БИТ БВО
			ТекСтрока.Фирма = ПолучитьФирмуНоменклатурыИзПравилПерепродажи(ТекСтрока.Номенклатура);
			//--БИТ БВО
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОткрыть(Команда)
	Элементы.ГруппаПодбор.Видимость = НЕ Элементы.ГруппаПодбор.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГруппыВПодборе(Команда)
	элементы.кнГруппы.пометка = не элементы.кнГруппы.пометка;
	флаг = Элементы.кнГруппы.пометка;
	ВЫполнить("ОбработкаТабличныхЧастейКлиент.ОтображениеГрупп(ПодборНоменклатуры,флаг)");
КонецПроцедуры

&НаСервере
Процедура Сохранитьпараметрыподбора()
	ПОдборНоменклатурыСервер.СохранитьПараметрыПодбора("ПечатьЦенниковИЭтикеток",ЭтаФорма.ИмяФормы,ЭтаФорма.Элементы);
конецпроцедуры

&НаСервере
Функция получитьНастройкуПодбора()
	возврат подборНоменклатурыСервер.ПолучитьНастройкуподбора("ПечатьЦенниковИЭтикеток",этаФорма.ИмяФормы);	
конецфункции

&НаКлиенте
процедура ЗагрузитьНастройкиПодбора()
	Настройки = ПолучитьНастройкуПодбора();
	ОбработкаТабличныхЧастейКлиент.загрузитьнастройкиподбора(ЭтаФорма,Настройки);
конецпроцедуры

&НаСервере
Процедура УстановитьПараметры()
	
	ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("ТекущееВремя", ТекущаяДата());
	ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗакрыть(Команда)
	Элементы.ГруппаПодбор.Видимость  = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Дерево(Команда)
	обработкатабличныхчастейклиент.ОтображениеДинамическогоСпискаДерево(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура Иерархия(Команда)
	обработкатабличныхчастейклиент.отображениединамическогоспискаиерархия(этаформа);	
КонецПроцедуры

&НаКлиенте
Процедура Список(Команда)
	обработкатабличныхчастейклиент.ОтображениеДинамическогоСпискаСписок(этаформа);	
КонецПроцедуры

///////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗадачаВыполнена = Ложь;
	ИзЗадачиБизнесПроцесса = Ложь;
	Если Параметры.Свойство("ВыполняемаяЗадача") Тогда
		ЗадачаСсылка = Параметры.ВыполняемаяЗадача;
		ИзЗадачиБизнесПроцесса = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		СтрукПараметров = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		Если СтрукПараметров.Свойство("Состав") тогда
			Если СтрукПараметров.Свойство("Ссылка") тогда
				Если ТипЗнч(СтрукПараметров.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
					Для Каждого Строка Из СтрукПараметров.Состав Цикл
						НоваяСтрока = Объект.Состав.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
						Если НоваяСтрока.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный Тогда
							НоваяСтрока.КоличествоЭтикеток = Строка.Количество*Строка.Коэффициент;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Объект.Состав.Загрузить(СтрукПараметров.Состав);
				КонецЕсли;
			Иначе
				Объект.Состав.Загрузить(СтрукПараметров.Состав);
			КонецЕсли;
		конецесли;
		если струкПараметров.Свойство("Фирма") тогда
			Объект.Фирма=СтрукПараметров.фирма;
		Конецесли;
		если струкпараметров.Свойство("Валюта") тогда
			Объект.Валюта = СТрукПараметров.валюта;
		конецесли;
		Если СтрукПараметров.Свойство("СтруктурнаяЕдиница") Тогда
			Объект.СтруктурнаяЕдиница = СтрукПараметров.СтруктурнаяЕдиница;
		КонецЕсли;
		Если СтрукПараметров.Свойство("ДатаАкции") Тогда
			Объект.ДатаАкции = СтрукПараметров.ДатаАкции;
		Иначе
			Объект.ДатаАкции = ТекущаяДата(); //dps+ 15/05/19	
		КонецЕсли;
		Если СтрукПараметров.Свойство("ДатаДок") Тогда
			ОбязательноРаспечатать(СтрукПараметров.ДатаДок);
		КонецЕсли;
	Иначе
		Объект.ДатаАкции = ТекущаяДата(); //dps+ 15/07/03 131623		
	Конецесли;
	
	Если ИзЗадачиБизнесПроцесса Тогда
		ДобавитьКолонкуСтараяЦена();
		БПСостав = Объект.Состав.Выгрузить(, "Фирма,Номенклатура, ЕдиницаИзмерения, Цена, ШаблонЦенника");
		БПСостав.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		БПСостав.ЗаполнитьЗначения(ЗадачаСсылка.БизнесПроцесс.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
		СоставСоСтаройЦеной = ПолучитьСтаруюЦену(БПСостав, Истина);
		Объект.Состав.Загрузить(СоставСоСтаройЦеной);
	КонецЕсли;
	
	Если Параметры.Свойство("Режим") Тогда
		Если Параметры.Режим = "ПечатьЦенников" тогда
			Элементы.Состав.ПодчиненныеЭлементы.КоличествоЭтикеток.Видимость = Ложь;
			Элементы.Состав.ПодчиненныеЭлементы.ШаблонЭтикетки.Видимость = Ложь;
			Элементы.КоличествоЭтикетокВоВсехСтроках.Видимость = Ложь;
			Элементы.НастройкаПринтераЭтикеток.Видимость = Ложь;
			
			КоличествоЭтикетокВоВсехСтроках = 0;
			КоличествоЦенниковВоВсехСтроках = ?(КоличествоЦенниковВоВсехСтроках = 0, 1, КоличествоЦенниковВоВсехСтроках);
		ИначеЕсли Параметры.Режим = "ПечатьЭтикеток" Тогда
			Элементы.Состав.ПодчиненныеЭлементы.КоличествоЦенников.Видимость = Ложь;
			Элементы.Состав.ПодчиненныеЭлементы.ШаблонЦенника.Видимость = Ложь;
			Элементы.КоличествоЦенниковВоВсехСтроках.Видимость = Ложь;
			
			КоличествоЦенниковВоВсехСтроках = 0;
			КоличествоЭтикетокВоВсехСтроках = ?(КоличествоЭтикетокВоВсехСтроках = 0, 1, КоличествоЭтикетокВоВсехСтроках);
		Конецесли;
	КонецЕсли;
	//Если Параметры.Свойство("РежимРА") Тогда                                        //dps+ 15/05/19
	//	Если Параметры.РежимРА Тогда
	//		ШаблонЦенникаПоУмолчанию = ПолучитьЦенникРАПоУмолчанию();
	//	Иначе
	//		ШаблонЦенникаПоУмолчанию = ПолучитьЦенникПоУмолчанию();
	//	КонецЕсли;
	//Иначе
	//	Если Не ИзЗадачиБизнесПроцесса Тогда 
	//		ШаблонЦенникаПоУмолчанию = ПолучитьЦенникПоУмолчанию();
	//	КонецЕсли;
	//КонецЕсли;
	ШаблонЭтикеткиПоУмолчанию = ПолучитьЭтикеткуПоУмолчанию();
	
	ЦенаЗаполнена = Ложь;
	
	// {ВетровИА 2015-08-11 Обращение 0000134674 
	МассивНоменклатуры = Объект.Состав.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	ШаблоныЦенника = РегистрыСведений.Izh_ПравилаВыбораШаблонаЦенника.ПолучитьШаблоныЦенника(МассивНоменклатуры, ТекущаяДата());  
	// ВетровИА 2015-08-11 Обращение 0000134674} 
	
	Для Каждого Строка из Объект.Состав Цикл
		Строка.КоличествоЦенников = КоличествоЦенниковВоВсехСтроках;
		Если КоличествоЭтикетокВоВсехСтроках = 0 Тогда
			Строка.КоличествоЭтикеток = КоличествоЭтикетокВоВсехСтроках;
		КонецЕсли;
		Строка.ШаблонЦенника = ШаблоныЦенника[Строка.Номенклатура];//?(ЗначениеЗаполнено(Строка.ШаблонЦенника), Строка.ШаблонЦенника, ШаблоныЦенника[Строка.Номенклатура]);
		Строка.ШаблонЭтикетки = ?(ЗначениеЗаполнено(Строка.ШаблонЭтикетки), Строка.ШаблонЭтикетки, ШаблонЭтикеткиПоУмолчанию);
		Строка.Флаг =  Строка.Обязательно;
		Если Строка.Цена > 0 Тогда
			ЦенаЗаполнена = Истина;
		КонецЕсли;
		Строка.Код = Строка.Номенклатура.Код;
		//++Минин 2015-09-15 0000138002
		Если Не ЗначениеЗаполнено(Строка.Фирма) Тогда 
			Строка.Фирма = ПолучитьФирмуНоменклатурыИзПравилПерепродажи(Строка.Номенклатура);
		КонецЕсли;
		//--Минин 2015-09-15 0000138002
	Конеццикла;
	Элементы.СоставЦена.Видимость = ЦенаЗаполнена;
	
	Если Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) И Не ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ЭтоГруппа Тогда
		Объект.СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПодборОткрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗагрузитьНастройкиПодбора();
	УстановитьПараметры();
	ПодключаемоеОборудованиеZebraПринтерЭтикетокКлиент.Инициализировать(КомпонентаHL);
	Попытка
		ВерсияКомпоненты = КомпонентаHL.GetVersion();
	Исключение
		ВерсияКомпоненты = "1.0.0.1";
	КонецПопытки; 
	ВерсияКомпоненты = СтрЗаменить(ВерсияКомпоненты,".",Символы.ПС);
	Релиз = Число(СтрПолучитьСтроку(ВерсияКомпоненты,4));
	
	Если Релиз< 3412 Тогда
		Сообщить("Используется старая версия компоненты , необходимо обновление ");	
	КонецЕсли;
	
	КоличествоЦенниковВоВсехСтроках = 1;    //dps
	//РаботаСПринтеромЭтикетокКлиент.УстановитьКомпоненту();	//временно или...
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ЗадачаВыполнена = Истина И ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		УправлениеБизнесПроцессамиСервер.ВыполнитьЗадачу(ЗадачаСсылка);
		Оповестить("ЗадачаВыполнена");
	КонецЕсли;
	СохранитьПараметрыПодбора();
КонецПроцедуры

&НаКлиенте
Процедура СоставВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	если поле.Имя = "СоставНоменклатура" тогда
		Стандартнаяобработка = ложь;
		ПодборОткрыть(Неопределено);
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоЦенниковВТЧ(Команда)
	для каждого элемент из Объект.Состав цикл
		Элемент.количествоЦенников =  ?(элемент.Обязательно И КоличествоЦенниковВоВсехСтроках = 0, 1, КоличествоЦенниковВоВсехСтроках);
	конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоЭтикетокВоВсехСтроках(Команда)
	для каждого элемент из Объект.Состав цикл
		Элемент.количествоЭтикеток =  КоличествоЭтикетокВоВсехСтроках;
	конеццикла;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПринтераЭтикеток(Команда)
	ОткрытьФорму("Обработка.ПринтерЭтикеток.Форма",, ЭтаФорма);
КонецПроцедуры

///////////////////////////////////////////////////
&НаСервере
Функция ПолучитьЦЕнникПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпрЦенники.Ссылка КАК Ценник
	|ИЗ
	|	Справочник.ШаблоныЦенников КАК СпрЦенники
	|ГДЕ
	|	СпрЦенники.ПоУмолчанию";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ценник = Выборка.Ценник;
	Иначе
		Ценник = Справочники.ШаблоныЦенников.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ценник;
КонецФУнкции

//&НаСервере
//Функция ПолучитьЦенникРАПоУмолчанию()
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СпрЦенники.Ссылка КАК Ценник
//	|ИЗ
//	|	Справочник.ШаблоныЦенников КАК СпрЦенники
//	|ГДЕ
//	|	СпрЦенники.ДляАкций";
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Ценник = Выборка.Ценник;
//	Иначе
//		Ценник = Справочники.ШаблоныЦенников.ПустаяСсылка();
//	КонецЕсли;
//	
//	Возврат Ценник;
//КонецФУнкции

&НаСервере
Функция ПолучитьЭтикеткуПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпрШаблоныЭтикеток.Ссылка КАК Этикетка
	|ИЗ
	|	Справочник.ШаблоныЭтикеток КАК СпрШаблоныЭтикеток
	|ГДЕ
	|	СпрШаблоныЭтикеток.ПоУмолчанию";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Этикетка = Выборка.Этикетка;
	Иначе
		Этикетка = Справочники.ШаблоныЭтикеток.ПустаяСсылка();
	КонецЕсли;
	
	Возврат   Этикетка;
КонецФункции

&НаСервере
Функция ПолучитьЦенникПоНоменклатуре(Номенклатура,ДляАкций,Ценник)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныЦенников.Ссылка КАК Ценник
	|ИЗ
	|	РегистрСведений.ЦенникиНоменклатуры КАК ЦенникиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныЦенников КАК ШаблоныЦенников
	|		ПО ЦенникиНоменклатуры.ШаблонЦенника = ШаблоныЦенников.Код
	|ГДЕ
	|	ЦенникиНоменклатуры.Номенклатура = &Номенклатура
	|	И ШаблоныЦенников.ДляАкций = &ДляАкций";
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);			   
	Запрос.УстановитьПараметр("ДляАкций",ДляАкций);			   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ценник = Выборка.Ценник;
	КонецЕсли;
	Возврат Ценник;
КонецФУнкции

///////////////////////////////////////////////////

&НаКлиенте
Процедура НастройкиПринтераПоУмолчанию(ПринтерПечати)
	НастройкиПринтера = "q240
	|Q154,21
	//|"+?(Найти(Нрег(ПринтерПечати),"plus")=0,"R104,0","R1,0")+"
	|R104,0
	|S4
	|ZB
	|D15
	|I8,C,001
	|N
	|A10,5,0,1,1,1,N,""Шаврон Блан Муалле бел""
	|A10,20,0,1,1,1,N,"" п/сл вино (алк11%) 0,""
	|A10,35,0,1,1,1,N,""75л 6шт  Sud OEno Serv""
	|A10,50,0,1,1,1,N,""Цена: 386.76 руб.""
	|A235,55,1,1,1,1,N,""01.09.15""
	|B10,70,0,E30,2,5,55,B,""3300299138338""
	|P1";
	СловарьПараметров = КомпонентаHL.MakeParmDict();
	КомпонентаHL.PrintEPL(ПринтерПечати,НастройкиПринтера,СловарьПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенниковИЭтикеток(Команда)
	УстановитьАктивностьЦены();
	ЗаполнитьДанные();
	
	//ценники
	БылиОшибкиПриПечатиЦенников = Ложь;
	
	МассивШаблоновЦенников = ПолучитьМассивШаблоновЦенников();
	Для Каждого ШаблонЦенника Из МассивШаблоновЦенников Цикл
		Если Не ШаблонЦенника.Пустая() Тогда
			ТабДок = ПолучитьТаблицуЦенников(ШаблонЦенника, БылиОшибкиПриПечатиЦенников);
			Если ТабДок.ВысотаТаблицы > 0 Тогда
				ТабДок.Показать("Ценники");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если БылиОшибкиПриПечатиЦенников Тогда
		Сообщить("При печати ценников некоторых товаров были обнаружены ошибки.
		|В колонке ""Количество ценников"" для этих товаров значение сброшено в ноль.", СтатусСообщения.Внимание);
	КонецЕсли;
	
	//этикетки
	МассивСтрок = Новый Массив;
	Для Каждого сСостава из Объект.Состав Цикл
		Если сСостава.КоличествоЭтикеток = 0 Или сСостава.Флаг = Ложь Или сСостава.ШаблонЭтикетки.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрок.Добавить(сСостава);
		//ПечатьЭтикетки(сСостава, сСостава.КоличествоЭтикеток, сСостава.ШаблонЭтикетки);
	КонецЦикла;
	Если МассивСтрок.Количество()>0 Тогда
		Принтеры = ПодключаемоеОборудованиеZebraПринтерЭтикетокКлиент.ПолучитьСписокПринтеров(КомпонентаHL);
		сзПринтеры = новый СписокЗначений;
		сзПринтеры.ЗагрузитьЗначения(принтеры);
		ВыбранныйЭлемент = сзПринтеры.ВыбратьЭлемент("Укажите принтер, на котором печатать этикетки");
		Если ВыбранныйЭлемент=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Принтер = ВыбранныйЭлемент.Значение;
		Попытка
			НастройкиПринтераПоУмолчанию(Принтер);
		Исключение
		КонецПопытки;
		Для Каждого ЭлементМассива ИЗ МассивСтрок Цикл
			ПечатьЭтикетки(ЭлементМассива, ЭлементМассива.КоличествоЭтикеток, ЭлементМассива.ШаблонЭтикетки);
		КонецЦикла;
	КонецЕсли;
	
	
	ЗадачаВыполнена = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивШаблоновЦенников()
	
	ТаблицаШаблоновЦенников = Объект.Состав.Выгрузить();
	ТаблицаШаблоновЦенников.Свернуть("ШаблонЦенника");
	МассивШаблоновЦенников = ТаблицаШаблоновЦенников.ВыгрузитьКолонку("ШаблонЦенника");
	Возврат МассивШаблоновЦенников;
	
КонецФункции

&НаСервере
Процедура ОбработатьТабличныйДокумент(ТабДок,спрШаблонЦенника,ОбщееКоличество)
	Горизонталь = спрШаблонЦенника.Горизонталь;
	Вертикаль =  спрШаблонЦенника.Вертикаль;
	ШаблонОбласть = спрШаблонЦенника.Шаблон.Получить();
	ОбластьДокумента = ШаблонОбласть.ПолучитьОбласть(СпрШаблонЦенника.АдресШаблона);
	Если ОбщееКоличество < Горизонталь Тогда
		Для I=ОбщееКоличество+1 По Горизонталь Цикл
			ОбластьДокумента.Рисунки.Очистить();
			Обл = ТабДок.Присоединить(ОбластьДокумента);
			Обл.Очистить(Истина,Истина,Истина);
		КонецЦикла;	
	КонецЕсли;
	Если спрШаблонЦенника.Ориентация Тогда
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Если ОбластьДокумента.ШиринаТаблицы*Горизонталь<100 Тогда
			ТабДок.АвтоМасштаб = Ложь;
			ТабДок.МасштабПечати = 10804/(ОбластьДокумента.ШиринаТаблицы*Горизонталь);
		Иначе
			ТабДок.АвтоМасштаб = Истина;
		КонецЕсли;	
	Иначе
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		Если ОбластьДокумента.ШиринаТаблицы*Горизонталь<100 Тогда
			ТабДок.АвтоМасштаб = Ложь;
			ТабДок.МасштабПечати = 15450/(ОбластьДокумента.ШиринаТаблицы*Горизонталь);
		Иначе
			ТабДок.АвтоМасштаб = Истина;
		КонецЕсли;	
	КонецЕсли;	
конецпроцедуры

&НаСервере
Функция ПолучитьТаблицуЦенников(ШаблонЦенникаСсылка, БылиОшибки)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Шаблон = ШаблонЦенникаСсылка.Шаблон.Получить();
	Если Не Шаблон = Неопределено Тогда
		Эталон = Обработки.ПечатьЦенниковИЭтикеток.ПолучитьМакет("Эталон");
		КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
		
		тдШаблонЦенника = Шаблон.ПолучитьОбласть(ШаблонЦенникаСсылка.АдресШаблона);
		
		ОбщееКоличество = 0;
		чГоризонталь = 0;
		чВертикаль = 0;
		
		СтруктураПоиска = Новый Структура("Флаг, ШаблонЦенника", Истина, ШаблонЦенникаСсылка);
		НайденныеСтроки = Объект.Состав.НайтиСтроки(СтруктураПоиска);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если Строка.КоличествоЦенников = 0 Тогда
				Продолжить;
			КонецЕсли;
			Отказ = Ложь;
			ПечатьЦенников(ТабДок,ШаблонЦенникаСсылка,тдШаблонЦенника, КоличествоМиллиметровВПикселе,Строка.Номенклатура,Строка.ЕДиницаИзмерения,Строка.КоличествоЦенников,ОбщееКоличество, Отказ, чГоризонталь, чВертикаль);
			Если Отказ Тогда
				БылиОшибки = Истина;
				Строка.КоличествоЦенников = 0;
				Строка.Флаг = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ОбщееКоличество > 0 Тогда
			ОбработатьТабличныйДокумент(ТабДок, ШаблонЦенникаСсылка, ОбщееКоличество);
			ТабДок.ПолеСверху = ШаблонЦенникаСсылка.ПолеСверху;
			ТабДок.ПолеСлева  = ШаблонЦенникаСсылка.ПолеСлева;
			ТабДок.ПолеСнизу  = ШаблонЦенникаСсылка.ПолеСнизу;
			ТабДок.ПолеСправа = ШаблонЦенникаСсылка.ПолеСправа;
			ТабДок.РазмерКолонтитулаСверху = 0;
			ТабДок.РазмерКолонтитулаСнизу = 0;
			ТабДок.ОтображатьЗаголовки = Ложь;
			ТабДок.ОтображатьСетку = Ложь;
		Конецесли;
	КонецЕсли;
	
	Возврат ТабДок;
КонецФункции

&НаСервере
Процедура ПечатьЦЕнников(ТабДок,ШаблонЦенникаСсылка,ШаблонЦенника,КоличествоМиллиметровВПикселе,Номенклатура,ЕдиницаИзмерения,КоличествоЦенников,ОбщееКоличество, Отказ, чГоризонталь, чВертикаль)	
	
	ТабДокЦенник = ПолучитьЦенник(ШаблонЦенникаСсылка,ШаблонЦенника,КоличествоМиллиметровВПикселе,Номенклатура,ЕдиницаИзмерения, Отказ);
	
	Если Не Отказ Тогда
		Для I=1 По КоличествоЦЕнников Цикл
			чГоризонталь=чГоризонталь+1;
			Если чГоризонталь=1 Тогда
				ТабДок.Вывести(ТабДокЦенник);
			Иначе	
				Обл = ТабДок.Присоединить(ТабДокЦенник);
			КонецЕсли;
			Если чГоризонталь = ШаблонЦенникаСсылка.Горизонталь Тогда
				чВертикаль=чВертикаль+1;
				чГоризонталь=0;
			КонецЕсли;
			Если чВертикаль=ШаблонЦенникаСсылка.Вертикаль Тогда
				чВертикаль=0;
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ОбщееКоличество = ОбщееКоличество + 1;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЦенник(ШаблонЦенникаСсылка, ШаблонЦенника, КоличествоМиллиметровВПикселе, Номенклатура, ЕдиницаИзмерения, Отказ)
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ВнешняяКомпонента = ШтриховыеКоды.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
		Если ВнешняяКомпонента = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода!'");
		КонецЕсли;
	КонецЕсли;
	
	сткРезультат = ПолучитьИзВременногоХранилища(Объект.Адрес);
	мСтрокиИсходныеДанные = сткРезультат.тзИсходныеДанные.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", Номенклатура, ЕдиницаИзмерения));
	СоответствиеПолейСКДКолонкамТаблицы = сткРезультат.СоответствиеПолейСКДКолонкамТаблицы;
	
	для каждого область из ШАблонЦенника.Рисунки цикл
		СтрокаОбластьШаблона = ШаблонЦенникаСсылка.Области.НайтиСтроки(Новый Структура("ИмяОбласти",Область.Имя)); 
		Если СТрокаОбластьШаблона.Количество()>0 тогда
			ОбластьШаблона = СтрокаОбластьШаблона[0];
			Если ОбластьШаблона.Тип = Перечисления.ТипыОбластейЭтикеток.ЗначениеБД тогда
				Если мСтрокиИсходныеДанные.Количество()>0 тогда
					сИсходныеДанные = мСтрокиИсходныеДанные[0];
					Если ОбластьШаблона.ИмяПоля = "ТекущаяДата" Или ОбластьШаблона.ИмяПоля = "ДатаНачалаАкции"
						Или ОбластьШаблона.ИмяПоля = "ДатаОкончанияАкции" Тогда
						Значение = Формат(сИсходныеДанные[ОбластьШаблона.ИмяПоля],"ДФ=dd.MM.yyyy");
					ИначеЕсли ОбластьШаблона.ИмяПоля = "Цена" Или ОбластьШаблона.ИмяПоля = "ЦенаПоАкции" Тогда
						Если сИсходныеДанные[ОбластьШаблона.ИмяПоля] = 0 Тогда
							Значение = "";
							Сообщить("Для номенклатуры """+СокрЛП(Номенклатура)+""" , (единица"+СокрЛП(ЕдиницаИзмерения)+") не задана цена или цена по акции.");
							Отказ = Истина;
						Иначе
							Значение = Формат(сИсходныеДанные[ОбластьШаблона.ИмяПоля],"ЧЦ=15; ЧДЦ=2");
						КонецЕсли;
					ИначеЕсли ОбластьШаблона.ИмяПоля = "ЦенаТолькоРубли" Или ОбластьШаблона.ИмяПоля = "ЦенаПоАкцииТолькоРубли" Тогда
						Значение = Формат(сИсходныеДанные[ОбластьШаблона.ИмяПоля],"ЧЦ=15; ЧДЦ=0");
					ИначеЕсли ОбластьШаблона.ИмяПоля = "ЦенаТолькоКопейки" Или ОбластьШаблона.ИмяПоля = "ЦенаПоАкцииТолькоКопейки" Тогда
						Значение = Формат(сИсходныеДанные[ОбластьШаблона.ИмяПоля],"ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=");
					Иначе
						НаименованиеКолонки = СоответствиеПолейСКДКолонкамТаблицы.Получить(ОбластьШаблона.ИмяПоля);
						Если НаименованиеКолонки = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = сИсходныеДанные[НаименованиеКолонки];
						КонецЕсли;
					конецесли;
					Область.Текст = Значение;
				Иначе
					Сообщить("Для номенклатуры """+СокрЛП(Номенклатура)+""" , (единица "+СокрЛП(ЕдиницаИзмерения)+") нет данных для печати ценника.");
					Отказ = Истина;
				Конецесли;
			ИначеЕсли ОбластьШаблона.Тип = Перечисления.ТипыОбластейЭтикеток.ШтрихКод тогда
				Если мСтрокиИсходныеДанные.Количество() > 0 Тогда
					ШтрихКод = СокрЛП(мСтрокиИсходныеДанные[0].ШтрихКод);
					Если ШаблонЦенникаСсылка.ВключатьВШКЦену Тогда
						//ШтрихКод = ШтрихКод + "/" + Формат(мСтрокиИсходныеДанные[0].Цена,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
						ШтрихКод = СокрЛП(мСтрокиИсходныеДанные[0].НоменклатураКод) + "/" + Формат(мСтрокиИсходныеДанные[0].Цена,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
					КонецЕсли;
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",          Окр(Область.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",          Окр(Область.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",        ШтрихКод);
					ПараметрыШтрихкода.Вставить("АвтоТип",         ШаблонЦенникаСсылка.АвтоматическиОпределятьТипШК);
					ПараметрыШтрихкода.Вставить("ТипКода",         ШаблонЦенникаСсылка.ТипШтрихКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст", ШаблонЦенникаСсылка.ОтображатьШК);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",    ШаблонЦенникаСсылка.РазмерШрифтаШК);
					
					Область.Картинка = ШтриховыеКоды.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);
				Иначе
					Сообщить("Для номенклатуры """+СокрЛП(Номенклатура)+""" , (единица "+СокрЛП(ЕдиницаИзмерения)+") нет данных для печати ценника.");
					Отказ = Истина;
				Конецесли;
				//{БредовЮГ 2014-12-29 Добавление вычисляемого поля	
			ИначеЕсли ОбластьШаблона.Тип = Перечисления.ТипыОбластейЭтикеток.ВычисляемоеПоле тогда
				Если мСтрокиИсходныеДанные.Количество()>0 тогда
					ИсточникДанныхСКД = мСтрокиИсходныеДанные[0];
					Параметр = "";
					Попытка
						Выполнить(ОбластьШаблона.Izh_Вычисление);	
					Исключение
						Сообщить(ОписаниеОшибки());
						Продолжить;
					КонецПопытки; 
					Область.Текст = Параметр;
				Иначе
					Сообщить("Для номенклатуры """+СокрЛП(Номенклатура)+""" , (единица "+СокрЛП(ЕдиницаИзмерения)+") нет данных для печати ценника.");
					Отказ = Истина;
				Конецесли;
				//БредовЮГ 2014-12-29 Добавление вычисляемого поля	}
			конецесли;
		Иначе
			Сообщить("Ошибка формата шаблона ценника """+СокрЛП(ШаблонЦенникаСсылка)+""". Пересоздайте поле """+СокрЛП(Область.Текст)+"""");
			Отказ = Истина;
		конецесли;
	конеццикла;
	
	Возврат ШаблонЦенника;
конецфункции

//++БИТ БВО
&НаСервере
Функция НоменклатураВГруппе(ПроверяемаяНоменклатура, ГруппаНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|	И Номенклатура.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("ГруппаНоменклатуры"	, ГруппаНоменклатуры);
	Запрос.УстановитьПараметр("Ссылка"				, ПроверяемаяНоменклатура);
	РезЗапроса = Запрос.Выполнить();	
		
	Возврат НЕ РезЗапроса.Пустой();
	
КонецФункции
//--БИТ БВО

&НаСервере
Процедура ЗаполнитьДанные()
	//
	//++БИТ БВО
	ГруппаАлко = Справочники.Номенклатура.НайтиПоКоду("2:4009"); //FOOD - АЛКОГОЛЬ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПерепродажаСрезПоследних.ФирмаПродажи КАК Фирма
	|ИЗ
	|	РегистрСведений.Перепродажа.СрезПоследних(
	|			&НаДату,
	|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ГруппаНоменклатуры = &ГруппаНоменклатуры) КАК ПерепродажаСрезПоследних";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, Объект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры"	, "2:4009");
	Запрос.УстановитьПараметр("НаДату"				, ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ФирмаАлко = Выборка.Фирма;
	Иначе
		ФирмаАлко = Объект.Фирма;
	КонецЕсли;
	//--БИТ БВО
	
	СхемаКомпоновкиДанных = Обработки.ПечатьЦенниковИЭтикеток.ПолучитьМакет("ДоступныеПоляШаблоновЦенниковИЭтикеток");
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ДобавитьВыбранныеПоляВНастройкиСКД(Компоновщик.Настройки);
	
	//++БИТ БВО
	УстановитьЗначениеПараметраСКД(Компоновщик, "ФирмаАлко"	, ФирмаАлко);	
	УстановитьЗначениеПараметраСКД(Компоновщик, "ГруппаАлко", ГруппаАлко);
	//--БИТ БВО
	УстановитьЗначениеПараметраСКД(Компоновщик, "Фирма", Объект.Фирма);
	УстановитьЗначениеПараметраСКД(Компоновщик, "Валюта", Объект.Валюта);
	УстановитьЗначениеПараметраСКД(Компоновщик, "ДатаАкции", Объект.ДатаАкции);
	УстановитьЗначениеПараметраСКД(Компоновщик, "Весы", Объект.Весы);
	УстановитьЗначениеПараметраСКД(Компоновщик, "ИспользоватьЦенуМладшейЕдиницыИзмерения", Объект.ИспользоватьЦенуМладшейЕдиницыИзмерения);
	УстановитьЗначениеПараметраСКД(Компоновщик, "СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя", ТекущаяДата());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТолькоСОстатками", Объект.ТолькоСОстатками);
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	СоответствиеПолейСКДКолонкамТаблицы = Новый Соответствие;
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		//СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
		СоответствиеПолейСКДКолонкамТаблицы.Вставить(Поле.ПутьКДанным, Поле.Имя);
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	ТекстПустышка =
	"	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Фирма,
	|		ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|		0 КАК Цена,
	|		0 КАК НомерСтроки)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстПустышка, "&Состав");
	
	//ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(СтруктураНастроек.ИсходныеДанные, "Порядок");
	Запрос.Параметры.Вставить("Состав", Объект.Состав.Выгрузить());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные1.КоличествоЦенников");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные1.КоличествоЭтикеток");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные1.ШаблонЦенника");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные1.ШаблонЭтикетки");
	
	тзИсходныеДанные = Запрос.Выполнить().Выгрузить();
	//++БИТ БВО 2015-10-13 - Т.к. макет "ДоступныеПоляШаблоновЦенниковИЭтикеток" меняется без учета доработок, то вставлю изменения по ГруппеАлко сюда
	//Задача: Для алкоголя печатать на ценнике фирму - алкооператора.
	Для Каждого СтрокаТЗ Из тзИсходныеДанные Цикл
		Если НоменклатураВГруппе(СтрокаТЗ.Номенклатура, ГруппаАлко) Тогда
			СтрокаТЗ.Фирма = ФирмаАлко;
		КонецЕсли;
	КонецЦикла;
	//--БИТ БВО 2015-10-13
	
	сткРезультат = Новый Структура("тзИсходныеДанные, СоответствиеПолейСКДКолонкамТаблицы", тзИсходныеДанные, СоответствиеПолейСКДКолонкамТаблицы);
	Объект.Адрес= ПоместитьВоВременноеХранилище(сткРезультат, Этаформа.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныеПоляВНастройкиСКД(Настройки)
	//обязательными полями являются только Номенклатура и ЕдиницаИзмерения
	//добавляем выбранные в шаблонах
	
	мУжеСуществующиеПоля = Новый Массив;
	Для каждого ВыбранноеПолеСКД Из Настройки.Выбор.Элементы Цикл
		мУжеСуществующиеПоля.Добавить(Строка(ВыбранноеПолеСКД.Поле));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Состав.ШаблонЦенника,
	|	Состав.ШаблонЭтикетки
	|ПОМЕСТИТЬ Состав
	|ИЗ
	|	&Состав КАК Состав
	|ГДЕ
	|	Состав.Флаг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныЭтикетокОбласти.Значение КАК ИмяПоля
	|ПОМЕСТИТЬ ПоляЭтикеток
	|ИЗ
	|	Состав КАК Состав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныЭтикеток.ПараметрыПечати КАК ШаблоныЭтикетокОбласти
	|		ПО Состав.ШаблонЭтикетки = ШаблоныЭтикетокОбласти.Ссылка
	|			И (НЕ ШаблоныЭтикетокОбласти.Значение В (&мУжеСуществующиеПоля))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныЦенниковОбласти.ИмяПоля
	|ПОМЕСТИТЬ ПоляЦенников
	|ИЗ
	|	Состав КАК Состав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныЦенников.Области КАК ШаблоныЦенниковОбласти
	|		ПО Состав.ШаблонЦенника = ШаблоныЦенниковОбласти.Ссылка
	|			И (ШаблоныЦенниковОбласти.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбластейЭтикеток.ЗначениеБД)
	|				ИЛИ ШаблоныЦенниковОбласти.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбластейЭтикеток.ШтрихКод))
	|			И (НЕ ШаблоныЦенниковОбласти.ИмяПоля В (&мУжеСуществующиеПоля))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоляЦенников.ИмяПоля
	|ИЗ
	|	ПоляЦенников КАК ПоляЦенников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПоляЭтикеток.ИмяПоля
	|ИЗ
	|	ПоляЭтикеток КАК ПоляЭтикеток";
	
	Запрос.УстановитьПараметр("Состав", Объект.Состав.Выгрузить());
	Запрос.УстановитьПараметр("мУжеСуществующиеПоля", мУжеСуществующиеПоля);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//проверить не изменилась ли конфигурация и не пропали ли выбранные в шаблонах объекты или их реквизиты
		ПолеСКД = НайтиПолеСКДПоПолномуИмени(Настройки.Выбор.ДоступныеПоляВыбора.Элементы, Выборка.ИмяПоля);
		Если Не ПолеСКД = Неопределено Тогда
			ВыбранноеПоле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Выборка.ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		
		ЗначениеПараметраКомпоновкиДанных.Значение = ЗначениеПараметра;
		ЗначениеПараметраКомпоновкиДанных.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраКомпоновкиДанных.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

&НаСервере
// Среди элементов полей СКД найти поле по имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя)
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
// Полное имя поля разделить по частям
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)
	
	масЧастей = Новый Массив;
	СтрИмя = ПолноеИмя;
	
	Пока Не ПустаяСтрока(СтрИмя) Цикл
		Если Лев(СтрИмя, 1) = "[" Тогда
			Поз = Найти(СтрИмя, "]");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
		Иначе
			Поз = Найти(СтрИмя, ".");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат масЧастей;
	
КонецФункции // ИзПолногоИмениПоляПолучитьЧасти()

&НаСервере
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя)
	
	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	колЧастей = масЧастейИмен.Количество();
	
	текИмя = масЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +"." + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;
	
КонецФункции

// Преобразует имена выбранных полей СКД по правилам формирования алиасов полей результата запроса
//
// Параметры
//  ИмяПоля  - Строка - Может содержать:
//		Точку. Прим. "Номенклатура.Код"
//		Несколько символов разделенными пробелами, заключенными в квадратные скобки. Прим. "Номенклатура.[Срок Хранения]"
//			как правило подобные имена полей появляются у данных связанных с объектом, наприм. ПВХ
// Возвращаемое значение:
//   Строка   - без точек, без пробелов, квадратные скобки заменены "_" (нижним подчеркиванием)
//
&НаСервере
Функция ПреобразоватьИмяПоля(Знач ИмяПоля)
	
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ИмяПоля, ".", ""), "[", "_"), "]", "_"), " ", "");
	
КонецФункции

&НаСервере
Функция ПолучитьШаблонЦенника(ШаблонЦенника)
	Шаблон = неопределено;
	Если ЗначениеЗаполнено(ШаблонЦЕнника) тогда
		Шаблон = ШаблонЦЕнника.Шаблон.Получить();
	конецесли;
	Возврат Шаблон;
конецфункции

///////////////////////////////

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоНоменклатуре(сткОтбор,  АдресХранилища)
	сткРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	тзИсходныеДанные = сткРезультат.тзИсходныеДанные;
	СоответствиеПолейСКДКолонкамТаблицы = сткРезультат.СоответствиеПолейСКДКолонкамТаблицы;
	
	мСтрокиИсходныеДанные = тзИсходныеДанные.НайтиСтроки(сткОтбор);
	Возврат мСтрокиИсходныеДанные;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеИзВременногоХранилища(сткОтбор, ИмяПоля, АдресХранилища)
	
	Значение = "";
	
	//ТЗнач = ПолучитьИзВременногоХранилища(Объект.Адрес);
	//Строки = ТЗнач.НайтиСтроки(сткОтбор);
	//Если Строки.Количество() > 0 Тогда 
	//	Выполнить("Значение = Строки[0]." + ИмяПоля);
	//КонецЕсли;
	//
	сткРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	тзИсходныеДанные = сткРезультат.тзИсходныеДанные;
	СоответствиеПолейСКДКолонкамТаблицы = сткРезультат.СоответствиеПолейСКДКолонкамТаблицы;
	
	мСтрокиИсходныеДанные = тзИсходныеДанные.НайтиСтроки(сткОтбор);
	Если мСтрокиИсходныеДанные.Количество() > 0 Тогда
		НаименованиеКолонки = СоответствиеПолейСКДКолонкамТаблицы.Получить(ИмяПоля);
		Если НаименованиеКолонки <> Неопределено Тогда
			Значение = мСтрокиИсходныеДанные[0][НаименованиеКолонки];
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Значение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеШаблонаЭтикетки(ШаблонЭтикетки)
	
	Рез = Новый Структура("Шаблон, СтруктураПараметровШК");
	Если ЗначениеЗаполнено(ШаблонЭтикетки) Тогда
		Рез.Шаблон = ШаблонЭтикетки.Шаблон.Получить();
		
		СтруктураПараметровШК = Новый Структура;
		СтруктураПараметровШК.Вставить("АвтоматическиОпределятьТипШК", ШаблонЭтикетки.АвтоматическиОпределятьТипШК);
		СтруктураПараметровШК.Вставить("ТипШтрихКода"                , ШаблонЭтикетки.ТипШтрихКода);
		СтруктураПараметровШК.Вставить("ОтображатьШК"                , ШаблонЭтикетки.ОтображатьШК);
		СтруктураПараметровШК.Вставить("ВключатьВШКЦену"             , ШаблонЭтикетки.ВключатьВШКЦену);
		
		Рез.СтруктураПараметровШК = СтруктураПараметровШК;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеОбластиШаблонаЭтикетки(ШаблонЭтикетки, ИмяОбласти)
	
	Рез = Новый Структура("Тип, Лево, Верх, Право, Низ, ИмяПоля");
	
	НайденнаяСтрока = ШаблонЭтикетки.Области.Найти(ИмяОбласти, "ИмяОбласти");
	Если Не НайденнаяСтрока = Неопределено Тогда
		Рез.Тип = НайденнаяСтрока.Тип;
		Рез.Лево = НайденнаяСтрока.Лево;
		Рез.Верх = НайденнаяСтрока.Верх;
		Рез.Право = НайденнаяСтрока.Право;
		Рез.Низ = НайденнаяСтрока.Низ;
		Рез.ИмяПоля = НайденнаяСтрока.ИмяПоля;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция ПечатьЭтикетки(Данные, КоличествоЭкземпляров, ШаблонЭтикетки)
	
	//Если ПринтерЭтикеток = Неопределено Тогда
	//	РаботаСПринтеромЭтикетокКлиент.УстановитьКомпоненту();
	//	Если ПринтерЭтикеток = Неопределено Или ПринтерЭтикеток.ЕстьСоединение = Ложь Тогда
	//		Сообщить("Ошибка подключения к принтеру этикеток");
	//		Возврат Ложь;
	//	КонецЕсли;
	//ИначеЕсли ПринтерЭтикеток.ЕстьСоединение = Ложь Тогда
	//	Сообщить("Ошибка подключения к принтеру этикеток");
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//сткДанныеШаблонаЭтикетки = ПолучитьДанныеШаблонаЭтикетки(ШаблонЭтикетки);
	//Шаблон = сткДанныеШаблонаЭтикетки.Шаблон;
	//Если сткДанныеШаблонаЭтикетки.Шаблон = Неопределено Тогда
	//	Сообщить("Не определен шаблон этикетки");
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//СтруктураПараметровШК = сткДанныеШаблонаЭтикетки.СтруктураПараметровШК;
	//
	////ВысотаСтроки = 6;
	////ШиринаКолонки = 2;
	//СмещениеПоXY=2;
	//ШиринаЭтикетки=25;
	//ВысотаЭтикетки=25;
	//ПринтерЭтикеток.НачатьЭтикетку();
	//Для каждого ОбластьЭтикетки Из Шаблон.Области Цикл
	//	сткДанныеОбластиШаблонаЭтикетки = ПолучитьДанныеОбластиШаблонаЭтикетки(ШаблонЭтикетки, ОбластьЭтикетки.Имя);
	//	
	//	ТипОбласти = сткДанныеОбластиШаблонаЭтикетки.Тип;
	//	Если ТипОбласти = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	чЛево=сткДанныеОбластиШаблонаЭтикетки.Лево-СмещениеПоXY;
	//	x=100/ШиринаЭтикетки*чЛево;
	//	чВерх=сткДанныеОбластиШаблонаЭтикетки.Верх-СмещениеПоXY;
	//	y=100/ВысотаЭтикетки*чВерх;
	//	чШирина=сткДанныеОбластиШаблонаЭтикетки.Право-сткДанныеОбластиШаблонаЭтикетки.Лево+1;
	//	dx=100/ШиринаЭтикетки*чШирина;
	//	чВысота=сткДанныеОбластиШаблонаЭтикетки.Низ-сткДанныеОбластиШаблонаЭтикетки.Верх+1;
	//	dy=100/ВысотаЭтикетки*чВысота;
	//	
	//	Если ТипОбласти = ПредопределенноеЗначение("Перечисление.ТипыОбластейЭтикеток.ЗначениеБД") Тогда
	//		
	//		ИмяПоля = сткДанныеОбластиШаблонаЭтикетки.ИмяПоля;
	//		сткОтбор = Новый Структура("Номенклатура,ЕдиницаИзмерения",Данные.Номенклатура,Данные.ЕдиницаИзмерения);
	//		Значение = ПолучитьЗначениеИзВременногоХранилища(сткОтбор, ИмяПоля, Объект.Адрес);
	//		//надо сделать преобразование в одной функции
	//		Если ИмяПоля = "ТекущаяДата" Или ИмяПоля = "ДатаНачалаАкции"
	//			Или ИмяПоля = "ДатаОкончанияАкции" Тогда
	//			Значение = Формат(Значение, "ДФ=dd.MM.yyyy");
	//		ИначеЕсли ИмяПоля = "Цена" Или ИмяПоля = "ЦенаПоАкции" Тогда
	//			//Если Значение = 0 Тогда
	//			//	Значение = "";
	//			//	Отказ = Истина;
	//			//Иначе
	//			Значение = Формат(Значение,"ЧЦ=15; ЧДЦ=2");
	//			//КонецЕсли;
	//		ИначеЕсли ИмяПоля = "ЦенаТолькоРубли" Или ИмяПоля = "ЦенаПоАкцииТолькоРубли" Тогда
	//			Значение = Формат(Значение,"ЧЦ=15; ЧДЦ=0");
	//		ИначеЕсли ИмяПоля = "ЦенаТолькоКопейки" Или ИмяПоля = "ЦенаПоАкцииТолькоКопейки" Тогда
	//			Значение = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=");
	//		конецесли;
	//		
	//		ЧислоВыравнивания = ЧислоВыравнивания(ОбластьЭтикетки.ВертикальноеПоложение, ОбластьЭтикетки.ГоризонтальноеПоложение);
	//		ЧислоНаправления = ЧислоНаправления(ОбластьЭтикетки.ОриентацияТекста);
	//		ТипШрифта = ПолучитьТипШрифтаПоИмени(ОбластьЭтикетки.Шрифт.Имя);
	//		Курсив = ?(ОбластьЭтикетки.Шрифт.Наклонный =  Истина, 1, 0);
	//		Жирный = ?(ОбластьЭтикетки.Шрифт.Жирный =  Истина, 1, 0);
	//		Размер = ОбластьЭтикетки.Шрифт.Размер;
	//		ПринтерЭтикеток.Шрифт(ТипШрифта,Курсив,Жирный,Размер);
	//		ПринтерЭтикеток.Текст(x,y,dx,dy,Строка(Значение),ЧислоНаправления,ЧислоВыравнивания);
	//	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.ТипыОбластейЭтикеток.ШтрихКод") Тогда
	//		ИмяПоля = сткДанныеОбластиШаблонаЭтикетки.ИмяПоля;
	//		сткОтбор = Новый Структура("Номенклатура,ЕдиницаИзмерения",Данные.Номенклатура,Данные.ЕдиницаИзмерения);
	//		НашШКод = СокрЛП(ПолучитьЗначениеИзВременногоХранилища(сткОтбор, ИмяПоля, Объект.Адрес));
	//		//popn+
	//		//ПринтерЭтикеток.ШтрихКод(x,y,dx,dy,0,НашШКод);
	//		Если СтруктураПараметровШК.АвтоматическиОпределятьТипШК Тогда
	//			ТипШтрихКода = 0;				
	//		Иначе
	//			Если СтруктураПараметровШК.ТипШтрихКода = 0 Тогда
	//				ТипШтрихКода = 1;				
	//			ИначеЕсли СтруктураПараметровШК.ТипШтрихКода = 1 Тогда
	//				ТипШтрихКода = 2;
	//			ИначеЕсли СтруктураПараметровШК.ТипШтрихКода = 2 Тогда
	//				ТипШтрихКода = 0;
	//			ИначеЕсли СтруктураПараметровШК.ТипШтрихКода = 3 Тогда
	//				ТипШтрихКода = 6;
	//			ИначеЕсли СтруктураПараметровШК.ТипШтрихКода = 4 Тогда
	//				ТипШтрихКода = 4;
	//			Иначе
	//				ТипШтрихКода = 0;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		ОтображатьШК = Число(СтруктураПараметровШК.ОтображатьШК);
	//		
	//		Если СтруктураПараметровШК.ВключатьВШКЦену Тогда
	//			текЦена = ПолучитьЗначениеИзВременногоХранилища(сткОтбор, "Цена", Объект.Адрес);	
	//			текКод = ПолучитьЗначениеИзВременногоХранилища(сткОтбор, "Номенклатура.Код", Объект.Адрес);	
	//			НашШКод = СокрЛП(текКод) + "/" + Формат(текЦена,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
	//		КонецЕсли;
	//		
	//		ПринтерЭтикеток.ШтрихКод(x,y,dx,dy,ТипШтрихКода,НашШКод,ОтображатьШК);
	//		//popn-
	//	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.ТипыОбластейЭтикеток.Текст") Тогда
	//		ЧислоНаправления = ЧислоНаправления(ОбластьЭтикетки.ОриентацияТекста);
	//		ЧислоВыравнивания = ЧислоВыравнивания(ОбластьЭтикетки.ВертикальноеПоложение, ОбластьЭтикетки.ГоризонтальноеПоложение);
	//		ТипШрифта = ПолучитьТипШрифтаПоИмени(ОбластьЭтикетки.Шрифт.Имя);
	//		Курсив = ?(ОбластьЭтикетки.Шрифт.Наклонный =  Истина, 1, 0);
	//		Жирный = ?(ОбластьЭтикетки.Шрифт.Жирный =  Истина, 1, 0);
	//		Размер = ОбластьЭтикетки.Шрифт.Размер;
	//		ПринтерЭтикеток.Шрифт(ТипШрифта,Курсив,Жирный,Размер);
	//		ПринтерЭтикеток.Текст(x,y,dx,dy,""+ОбластьЭтикетки.Текст,ЧислоНаправления,ЧислоВыравнивания);
	//	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.ТипыОбластейЭтикеток.Картинка") Тогда
	//		ОбластьЭтикетки.Картинка.Записать("Картинка.BMP");
	//		ПринтерЭтикеток.Картинка(x,y,dx,dy,1,"Картинка.BMP");
	//	Иначе
	//		ПринтерЭтикеток.Текст(5,5,55,24,"Неизвестный тип области этикетки. Обратитесь к разработчикам.");
	//		Ошибка = ПринтерЭтикеток.ПечататьЭтикетку(1);
	//		Сообщить("Неизвестный тип области этикетки. Обратитесь к разработчикам.");
	//		Возврат Ложь;
	//	КонецЕсли;
	//	//Если ОбластьЭтикетки.Рамка Тогда
	//	Если ОбластьЭтикетки.ГраницаСверху Тогда
	//		ПринтерЭтикеток.Рамка(x,y,dx,dy);
	//	КонецЕсли; 
	//КонецЦикла;
	
	//Ошибка = ПринтерЭтикеток.ПечататьЭтикетку(?(КоличествоЭкземпляров=0,1,КоличествоЭкземпляров));
	//если Ошибка <> "Порядок" тогда
	//	Сообщить(Ошибка);
	//	Возврат Ложь;
	//конецЕсли;
	//Возврат Истина;
	СтруктураПараметровПечати = ПолучитьСтруктуруПараметровПечати(ШаблонЭтикетки);
	ШаблонEPL = ПолучитьШаблонEPL(ШаблонЭтикетки);
	ПараметрыПечати = Новый Структура;
	Для Каждого ПараметрПечати из СтруктураПараметровПечати Цикл
		стрЗначения = ПараметрПечати.Значение;
		Если ПустаяСтрока(стрЗначения.ЗначениеПоля) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "У параметра """+ПараметрПечати.Ключ+""" не задано значение печати";
			Сообщение.Сообщить();
		КонецЕсли;
		сткОтбор = Новый Структура("Номенклатура,ЕдиницаИзмерения",Данные.Номенклатура,Данные.ЕдиницаИзмерения);
		
		Если ЗначениеЗаполнено(стрЗначения.Izh_Вычисление) Тогда
			//мСтрокиИсходныеДанные = ПолучитьДанныеПоНоменклатуре(сткОтбор,Объект.Адрес);
			//Если мСтрокиИсходныеДанные.Количество()>0 тогда
			//	ИсточникДанныхСКД = мСтрокиИсходныеДанные[0];
			//	Параметр = "";
			//	Попытка
			//		Выполнить(стрЗначения.Izh_Вычисление);	
			//	Исключение
			//		Сообщить(ОписаниеОшибки());
			//		Продолжить;
			//	КонецПопытки; 
			//	ПараметрыПечати.Вставить(ПараметрПечати.Ключ,СокрЛП(Строка(Параметр)));
			//Иначе
			//	Сообщить("Для номенклатуры """+СокрЛП(Данные.Номенклатура)+""" , (единица "+СокрЛП(Данные.ЕдиницаИзмерения)+") нет данных для печати этикетки.");
			//	Отказ = Истина;
			//Конецесли;
			Параметр = ВычислитьНаСервере(сткОтбор,Объект.Адрес,стрЗначения);	
			ПараметрыПечати.Вставить(ПараметрПечати.Ключ,СокрЛП(Строка(Параметр)));
			
		Иначе
			Значение = ПолучитьЗначениеИзВременногоХранилища(сткОтбор, стрЗначения.ЗначениеПоля, Объект.Адрес);
			ПараметрыПечати.Вставить(ПараметрПечати.Ключ,СокрЛП(Строка(Значение)));
		КонецЕсли;
	КонецЦикла;
	ПодключаемоеОборудованиеZebraПринтерЭтикетокКлиент.Печать(КомпонентаHL,Принтер,ШаблонEPL, ПараметрыПечати,КоличествоЭкземпляров);		
КонецФункции

&НаСервере
Функция ВычислитьНаСервере(сткОтбор,АдресХранилища,стрЗначения)
	мСтрокиИсходныеДанные = ПолучитьДанныеПоНоменклатуре(сткОтбор,АдресХранилища);
	Если мСтрокиИсходныеДанные.Количество()>0 тогда
		ИсточникДанныхСКД = мСтрокиИсходныеДанные[0];
		Параметр = "";
		Попытка
			Выполнить(стрЗначения.Izh_Вычисление);	
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат "";
		КонецПопытки;
		Возврат Параметр;
	Иначе
		Сообщить("Для номенклатуры """+СокрЛП(сткОтбор.Номенклатура)+""" , (единица "+СокрЛП(сткОтбор.ЕдиницаИзмерения)+") нет данных для печати этикетки.");
		Возврат "";
	Конецесли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШаблонEPL(ШаблонЭтикетки)
	ТекстШаблона = ШаблонЭтикетки.Izh_ШаблонEPL.Получить();
	Возврат ТекстШаблона;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровПечати(ШаблонЭтикетки)
	СтруктураПараметровПечати = Новый Структура;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШаблоныЭтикетокПараметрыПечати.Параметр,
	|	ШаблоныЭтикетокПараметрыПечати.Значение,
	|	ШаблоныЭтикетокПараметрыПечати.Izh_Вычисление
	|ИЗ
	|	Справочник.ШаблоныЭтикеток.ПараметрыПечати КАК ШаблоныЭтикетокПараметрыПечати
	|ГДЕ
	|	ШаблоныЭтикетокПараметрыПечати.Ссылка = &Ссылка");	
	Запрос.УстановитьПараметр("Ссылка",ШаблонЭтикетки);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураЗначений = Новый Структура("ЗначениеПоля,Izh_Вычисление",Выборка.Значение,Выборка.Izh_Вычисление);
		СтруктураПараметровПечати.Вставить(Выборка.Параметр,СтруктураЗначений);	
	КонецЦикла;
	Возврат СтруктураПараметровПечати;
КонецФункции

&НаКлиенте
Функция ЧислоВыравнивания(Вертикаль, Горизонталь)
	Если Горизонталь = ГоризонтальноеПоложение.Авто
		Или Горизонталь = ГоризонтальноеПоложение.ПоШирине Тогда
		Горизонталь = ГоризонтальноеПоложение.Центр;
	КонецЕсли;
	
	Если Вертикаль = ВертикальноеПоложение.Верх Тогда
		Если Горизонталь = ГоризонтальноеПоложение.Лево Тогда
			Возврат 0;
		ИначеЕсли Горизонталь = ГоризонтальноеПоложение.Центр Тогда
			Возврат 1;
		Иначе
			Возврат 2;
		Конецесли;
	ИначеЕсли Вертикаль = ВертикальноеПоложение.Центр Тогда
		Если Горизонталь = ГоризонтальноеПоложение.Лево Тогда
			Возврат 3;
		ИначеЕсли Горизонталь = ГоризонтальноеПоложение.Центр Тогда
			Возврат 4;
		Иначе
			Возврат 5;
		Конецесли;
	Иначе//Если Вертикаль = ВертикальноеПоложение.Низ Тогда
		Если Горизонталь = ГоризонтальноеПоложение.Лево Тогда
			Возврат 6;
		ИначеЕсли Горизонталь = ГоризонтальноеПоложение.Центр Тогда
			Возврат 7;
		Иначе
			Возврат 8;
		Конецесли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ЧислоНаправления(Направление)
	Если Направление = -90 Тогда
		Возврат 1;
	ИначеЕсли Направление = 90 Тогда
		Возврат 3;
	ИначеЕсли Направление = -180 ИЛИ Направление = 180 Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	Конецесли;
КонецФункции

&НаКлиенте
Функция ПолучитьТипШрифтаПоИмени(ШрифтИмя)
	
	ств = Новый Соответствие;
	//ств.Вставить("Arial Cyr"			, 0);
	//ств.Вставить("Times New Roman Cyr"	, 1);
	//ств.Вставить("Courier New Cyr"		, 2);
	ств.Вставить("Arial"			, 0);
	ств.Вставить("Times New Roman" 	, 1);
	ств.Вставить("Courier"			, 2);
	
	ТипШрифта = ств.Получить(ШрифтИмя);
	Если ТипШрифта = Неопределено Тогда
		ТипШрифта = 0;
	КонецЕсли;
	
	Возврат ТипШрифта;
	
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если Источник = "BarCodeScaner" И Событие = "BarCodeValue" Тогда
		Если Не ВводДоступен() Тогда
			КомпонентаСканераШК.СобытиеОбработано();
			Возврат;   
		КонецЕсли;
		СтрокаТЧ = РаботаСоСканеромШККлиент.ОбработкаШтрихКодаВДокументах(ЭтаФорма,Объект,Элементы.Состав,Данные,Неопределено);
		Если Не СтрокаТЧ = Неопределено И СтрокаТЧ.Флаг = Ложь Тогда
			СтрокаТЧ.КоличествоЦенников = ?(Элементы.КоличествоЦенниковВоВсехСтроках.Видимость, КоличествоЦенниковВоВсехСтроках, 0);
			СтрокаТЧ.КоличествоЭтикеток = ?(Элементы.КоличествоЭтикетокВоВсехСтроках.Видимость, КоличествоЭтикетокВоВсехСтроках, 0);
			СтрокаТЧ.ШаблонЦенника = ПолучитьЦенникПоУмолчанию();
			СтрокаТЧ.ШаблонЭтикетки = ПолучитьЭтикеткуПОУмолчанию();
			СтрокаТЧ.Флаг = Истина;
		КонецЕсли;
		КомпонентаСканераШК.СобытиеОбработано();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиТоварВСпискеПоШтрихкоду(Команда)
	
	ШК = "";
	Если Не ВвестиЗначение(ШК, НСтр("ru = 'Введите штрихкод'")) Тогда
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ШК) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСоСканеромШККлиент.ОбработкаШтрихКодаВСпискеНоменклатуры(ШК, ПодборНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для Каждого СтрокаСостава Из Объект.Состав Цикл
		СтрокаСостава.Флаг = ИСТИНА;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	Для Каждого СтрокаСостава Из Объект.Состав Цикл
		СтрокаСостава.Флаг = ?(СтрокаСостава.Обязательно, Истина, ЛОЖЬ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	УстановитьПараметры();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуСтараяЦена()
	
	КолонкаСтараяЦена = Новый РеквизитФормы("СтараяЦена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), "Объект.Состав", "Старая цена");
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(КолонкаСтараяЦена);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	НовыйЭлемент = Элементы.Вставить("СоставСтараяЦена", Тип("ПолеФормы"), Элементы.Состав, Элементы.СоставЦена);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.Состав.СтараяЦена";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтаруюЦену(СоставБП, СШаблоном = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Состав", СоставБП);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	//++МининНА 2015-07-15 0000133268
	Запрос.УстановитьПараметр("ДатаСрезаАкции", ТекущаяДата()-86400);
	//--МининНА 2015-07-15 0000133268
	Запрос.УстановитьПараметр("Валюта", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.Валюта);
	//++МининНА 2015-07-15 0000133268
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	Состав.Номенклатура,
	//|	Состав.ЕдиницаИзмерения,
	//|	Состав.СтруктурнаяЕдиница,
	//|	Состав.Цена"+?(СШаблоном,", Состав.ШаблонЦенника","")+"
	//|ПОМЕСТИТЬ втСостав
	//|ИЗ
	//|	&Состав КАК Состав
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЦеныНоменклатуры.Период,
	//|	ЦеныНоменклатуры.СтруктурнаяЕдиница,
	//|	ЦеныНоменклатуры.Номенклатура,
	//|	ЦеныНоменклатуры.ЕдиницаИзмерения,
	//|	ЦеныНоменклатуры.ID,
	//|	ЦеныНоменклатуры.Цена
	//|ПОМЕСТИТЬ втЦеныНоменклатуры
	//|ИЗ
	//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|			&ДатаСреза,
	//|			(Номенклатура, СтруктурнаяЕдиница, ЕдиницаИзмерения) В
	//|					(ВЫБРАТЬ
	//|						ТЗ.Номенклатура,
	//|						ТЗ.СтруктурнаяЕдиница,
	//|						ТЗ.ЕдиницаИзмерения
	//|					ИЗ
	//|						втСостав КАК ТЗ)
	//|				И Валюта = &Валюта) КАК ЦеныНоменклатуры
	//|ГДЕ
	//|	ЦеныНоменклатуры.АктивностьЗаписи
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Состав.Номенклатура,
	//|	Состав.ЕдиницаИзмерения,
	//|	ЕСТЬNULL(ВложенныйЗапрос.Цена, 0) КАК СтараяЦена,
	//|	Состав.Цена"+?(СШаблоном,", Состав.ШаблонЦенника","")+"
	//|ИЗ
	//|	втСостав КАК Состав
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	//|			ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|			ЦеныНоменклатуры.Цена КАК Цена
	//|		ИЗ
	//|			втЦеныНоменклатуры КАК ЦеныНоменклатуры
	//|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|					ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	//|					ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|					МАКСИМУМ(ЦеныНоменклатуры.ID) КАК ID
	//|				ИЗ
	//|					втЦеныНоменклатуры КАК ЦеныНоменклатуры
	//|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|							МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период,
	//|							ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	//|							ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	//|						ИЗ
	//|							втЦеныНоменклатуры КАК ЦеныНоменклатуры
	//|						
	//|						СГРУППИРОВАТЬ ПО
	//|							ЦеныНоменклатуры.Номенклатура,
	//|							ЦеныНоменклатуры.ЕдиницаИзмерения) КАК ЦеныВложенный
	//|						ПО ЦеныНоменклатуры.Период = ЦеныВложенный.Период
	//|							И ЦеныНоменклатуры.Номенклатура = ЦеныВложенный.Номенклатура
	//|							И ЦеныНоменклатуры.ЕдиницаИзмерения = ЦеныВложенный.ЕдиницаИзмерения
	//|				
	//|				СГРУППИРОВАТЬ ПО
	//|					ЦеныНоменклатуры.Номенклатура,
	//|					ЦеныНоменклатуры.ЕдиницаИзмерения) КАК ЦеныПоИД
	//|				ПО ЦеныНоменклатуры.ID = ЦеныПоИД.ID
	//|					И ЦеныНоменклатуры.Номенклатура = ЦеныПоИД.Номенклатура
	//|					И ЦеныНоменклатуры.ЕдиницаИзмерения = ЦеныПоИД.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	//|		ПО Состав.Номенклатура = ВложенныйЗапрос.Номенклатура
	//|			И Состав.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения";
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Состав.Номенклатура,
	|	Состав.ЕдиницаИзмерения,
	|	Состав.СтруктурнаяЕдиница,
	|	Состав.Фирма,
	|	Состав.Цена"+?(СШаблоном,", Состав.ШаблонЦенника","")+"
	|ПОМЕСТИТЬ втСостав
	|ИЗ
	|	&Состав КАК Состав
	|;
	|
	//++БИТ БВО 2015-10-27 - Алгоритм получения старой цены сделаю аналогичным алгоритмц получения последней цены при печати ценника по шаблону.
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЦеныНоменклатуры.Период,
	//|	ЦеныНоменклатуры.СтруктурнаяЕдиница,
	//|	ЦеныНоменклатуры.Номенклатура,
	//|	ЦеныНоменклатуры.ЕдиницаИзмерения,
	//|	ЦеныНоменклатуры.ID,
	//|	ЦеныНоменклатуры.Цена
	//|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	//|ИЗ
	//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|			&ДатаСреза,
	//|			(Номенклатура, СтруктурнаяЕдиница, ЕдиницаИзмерения) В
	//|					(ВЫБРАТЬ
	//|						ТЗ.Номенклатура,
	//|						ТЗ.СтруктурнаяЕдиница,
	//|						ТЗ.ЕдиницаИзмерения
	//|					ИЗ
	//|						втСостав КАК ТЗ)
	//|				И Валюта = &Валюта) КАК ЦеныНоменклатуры
	//|ГДЕ
	//|	ЦеныНоменклатуры.АктивностьЗаписи
	//|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период,
	|	ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.ID,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.ID) КАК ID,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаСреза,
	|				(Номенклатура, СтруктурнаяЕдиница, ЕдиницаИзмерения) В
	|						(ВЫБРАТЬ
	|						ТЗ.Номенклатура,
	|						ТЗ.СтруктурнаяЕдиница,
	|						ТЗ.ЕдиницаИзмерения
	|					ИЗ
	|						втСостав КАК ТЗ)
	|					И АктивностьЗаписи
	|					И Валюта = &Валюта) КАК ЦеныНоменклатурыСрезПоследних
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, АктивностьЗаписи) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура)
	|			И (ЦеныНоменклатурыСрезПоследних.ID = ВложенныйЗапрос.ID)
	|;
	//--БИТ БВО 2015-10-27
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПромоАкцииНоменклатура.Номенклатура,
	|	ПромоАкцииНоменклатура.СтруктурнаяЕдиница,
	|	ПромоАкцииНоменклатура.ЕдиницаИзмерения,
	|	ПромоАкцииНоменклатура.Цена,
	|	ПромоАкции.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ЦеныПромо
	|ИЗ
	|	РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкции КАК ПромоАкции
	|		ПО ПромоАкцииНоменклатура.IDПромо = ПромоАкции.IDПромо
	|			И ПромоАкцииНоменклатура.IDКомпоненты = ПромоАкции.IDКомпоненты
	|			И ПромоАкцииНоменклатура.IDДеталей = ПромоАкции.IDДеталей
	|			И ПромоАкцииНоменклатура.СтруктурнаяЕдиница = ПромоАкции.СтруктурнаяЕдиница
	|ГДЕ
	|	ПромоАкцииНоменклатура.Номенклатура В
	|			(ВЫБРАТЬ
	|				А.Номенклатура
	|			ИЗ
	|				втСостав КАК А)
	|	И НАЧАЛОПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаСрезаАкции, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Состав.Номенклатура,
	|	Состав.ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВТ_ЦеныПромо.Цена, ЕСТЬNULL(ВложенныйЗапрос.Цена, 0)) КАК СтараяЦена,
	|	Состав.Фирма,
	|	Состав.Цена"+?(СШаблоном,", Состав.ШаблонЦенника","")+"
	|ИЗ
	|	втСостав КАК Состав
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЦеныНоменклатуры.Цена КАК Цена
	|		ИЗ
	|			ВТ_ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|					ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|					МАКСИМУМ(ЦеныНоменклатуры.ID) КАК ID
	|				ИЗ
	|					ВТ_ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период,
	|							ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|							ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|						ИЗ
	|							ВТ_ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|						
	|						СГРУППИРОВАТЬ ПО
	|							ЦеныНоменклатуры.Номенклатура,
	|							ЦеныНоменклатуры.ЕдиницаИзмерения) КАК ЦеныВложенный
	|						ПО ЦеныНоменклатуры.Период = ЦеныВложенный.Период
	|							И ЦеныНоменклатуры.Номенклатура = ЦеныВложенный.Номенклатура
	|							И ЦеныНоменклатуры.ЕдиницаИзмерения = ЦеныВложенный.ЕдиницаИзмерения
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ЦеныНоменклатуры.Номенклатура,
	|					ЦеныНоменклатуры.ЕдиницаИзмерения) КАК ЦеныПоИД
	|				ПО ЦеныНоменклатуры.ID = ЦеныПоИД.ID
	|					И ЦеныНоменклатуры.Номенклатура = ЦеныПоИД.Номенклатура
	|					И ЦеныНоменклатуры.ЕдиницаИзмерения = ЦеныПоИД.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|		ПО Состав.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И Состав.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныПромо КАК ВТ_ЦеныПромо
	|		ПО Состав.Номенклатура = ВТ_ЦеныПромо.Номенклатура
	|			И Состав.ЕдиницаИзмерения = ВТ_ЦеныПромо.ЕдиницаИзмерения
	|			И Состав.СтруктурнаяЕдиница = ВТ_ЦеныПромо.СтруктурнаяЕдиница";
	//--МининНА 2015-07-15 0000133268
	
	//Объект.Состав.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция СтараяЦенаПриПодбореНоменклатуры(Номенклатура, ЕдиницаИзмерения)
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тз.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	тз.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	тз.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	СтрокаТЗ = тз.Добавить();
	СтрокаТЗ.Номенклатура = Номенклатура;
	СтрокаТЗ.ЕдиницаИзмерения = ЕдиницаИзмерения;
	СтрокаТЗ.СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	
	Возврат ПолучитьСтаруюЦену(тз).Получить(0).СтараяЦена;
	
КонецФункции

//{БредовЮГ 2014-12-29 Заполнение ТЧ
&НаСервереБезКонтекста
Функция ЗаполнитьПоПротоколу(Контрагент,ПоОстаткам=Ложь,ПоАкциям=Ложь,ДатаАкции)
	МассивНоменклатуры = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НоменклатураКонтрагента.Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ГДЕ
	|	НоменклатураКонтрагента.Контрагент = &Контрагент
	|	И НоменклатураКонтрагента.ОсновнойПоставщик
	|///////////////////////////////////////////
	|;
	|Выбрать РАЗЛИЧНЫЕ
	|	ИсточникДанных.Номенклатура
	|ИЗ 
	|	ВТНоменклатура КАК ИсточникДанных
	|"+?(ПоОстаткам,"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					А.Номенклатура
	|				ИЗ
	|					ВТНоменклатура КАК А)) КАК ОстаткиНоменклатурыОстатки
	|	ПО ИсточникДанных.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура ","")+"
	|"+?(ПоАкциям,"ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура
	|	ИЗ
	|		РегистрСведений.ПромоАкции КАК ПромоАкции
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|			ПО ПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
	|				И ПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	|				И ПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	|				И ПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	|				И ПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	|				И (НАЧАЛОПЕРИОДА(ПромоАкции.ДатаНачала, ДЕНЬ) <= &ТекущееВремя)
	|				И (КОНЕЦПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) >= &ТекущееВремя)
	|				И (ПромоАкции.ФлагОкончания = ЛОЖЬ)
	|				И (ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|				И (ПромоАкцииНоменклатура.Номенклатура В
	|					(ВЫБРАТЬ
	|						А.Номенклатура
	|					ИЗ
	|						ВТНоменклатура КАК А))
	|	ГДЕ
	|		ПромоАкцииНоменклатура.Цена <> 0) КАК ВложенныйЗАпрос
	|	ПО ИсточникДанных.Номенклатура = ВложенныйЗАпрос.Номенклатура ","")+"
	|");
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ТекущееВремя",?(ЗначениеЗаполнено(ДатаАкции),ДатаАкции,ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивНоменклатуры.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	Возврат МассивНоменклатуры
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьИзДокумента(ВыбранныйДокумент,ПоОстаткам=Ложь,ПоАкциям=Ложь,ДатаАкции)
	МассивНоменклатуры = Новый Массив;
	мдДокумент = ВыбранныйДокумент.Метаданные();
	мдИмя = мдДокумент.Имя;
	// ищем только в табличной части состав  и по реквизиту "Номенклатура" , можно усложнить по типу, но ломает
	Если мдДокумент.ТабличныеЧасти.Найти("Состав")=Неопределено 
		И мдДокумент.ТабличныеЧасти.Состав.Реквизиты.Найти("Номенклатура") = Неопределено Тогда
		Возврат МассивНоменклатуры;
	КонецЕсли;
	//++Минин 0000133330 2015-07-21 Если документ комплектация, то номенклатуру брать из поля "Комплект", иначе весь Состав
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДокументСостав."+?(мдИмя="Комплектация" и не ВыбранныйДокумент.Разукомплектация,"Ссылка.Комплект","Номенклатура")+" КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Документ."+мдИмя+".Состав КАК ДокументСостав
	|ГДЕ
	|	ДокументСостав.Ссылка = &Ссылка
	|///////////////////////////////////////////
	|;
	|Выбрать РАЗЛИЧНЫЕ
	|	ИсточникДанных.Номенклатура
	|ИЗ 
	|	ВТНоменклатура КАК ИсточникДанных
	|"+?(ПоОстаткам,"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					А.Номенклатура
	|				ИЗ
	|					ВТНоменклатура КАК А)) КАК ОстаткиНоменклатурыОстатки
	|	ПО ИсточникДанных.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура ","")+"
	|"+?(ПоАкциям,"ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура
	|	ИЗ
	|		РегистрСведений.ПромоАкции КАК ПромоАкции
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|			ПО ПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
	|				И ПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	|				И ПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	|				И ПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	|				И ПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	|				И (НАЧАЛОПЕРИОДА(ПромоАкции.ДатаНачала, ДЕНЬ) <= &ТекущееВремя)
	|				И (КОНЕЦПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) >= &ТекущееВремя)
	|				И (ПромоАкции.ФлагОкончания = ЛОЖЬ)
	|				И (ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|				И (ПромоАкцииНоменклатура.Номенклатура В
	|					(ВЫБРАТЬ
	|						А.Номенклатура
	|					ИЗ
	|						ВТНоменклатура КАК А))
	|	ГДЕ
	|		ПромоАкцииНоменклатура.Цена <> 0) КАК ВложенныйЗАпрос
	|	ПО ИсточникДанных.Номенклатура = ВложенныйЗАпрос.Номенклатура ","")+"
	|");
	Запрос.УстановитьПараметр("Ссылка",ВыбранныйДокумент);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ТекущееВремя",?(ЗначениеЗаполнено(ДатаАкции),ДатаАкции,ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивНоменклатуры.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	Возврат МассивНоменклатуры
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПоГруппе(ГруппаНоменклатуры,ПоОстаткам=Ложь,ПоАкциям=Ложь,ДатаАкции)
	МассивНоменклатуры = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Группа = 0
	|	И Номенклатура.Транзакционный
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.Продаваемый
	|	И Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)
	|///////////////////////////////////////////
	|;
	|Выбрать РАЗЛИЧНЫЕ
	|	ИсточникДанных.Номенклатура
	|ИЗ 
	|	ВТНоменклатура КАК ИсточникДанных
	|"+?(ПоОстаткам,"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					А.Номенклатура
	|				ИЗ
	|					ВТНоменклатура КАК А)) КАК ОстаткиНоменклатурыОстатки
	|	ПО ИсточникДанных.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура ","")+"
	|"+?(ПоАкциям,"ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура
	|	ИЗ
	|		РегистрСведений.ПромоАкции КАК ПромоАкции
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|			ПО ПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
	|				И ПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	|				И ПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	|				И ПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	|				И ПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	|				И (НАЧАЛОПЕРИОДА(ПромоАкции.ДатаНачала, ДЕНЬ) <= &ТекущееВремя)
	|				И (КОНЕЦПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) >= &ТекущееВремя)
	|				И (ПромоАкции.ФлагОкончания = ЛОЖЬ)
	|				И (ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|				И (ПромоАкцииНоменклатура.Номенклатура В
	|					(ВЫБРАТЬ
	|						А.Номенклатура
	|					ИЗ
	|						ВТНоменклатура КАК А))
	|	ГДЕ
	|		ПромоАкцииНоменклатура.Цена <> 0) КАК ВложенныйЗАпрос
	|	ПО ИсточникДанных.Номенклатура = ВложенныйЗАпрос.Номенклатура ","")+"
	|");
	Запрос.УстановитьПараметр("ГруппаНоменклатуры",ГруппаНоменклатуры);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ТекущееВремя",?(ЗначениеЗаполнено(ДатаАкции),ДатаАкции,ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивНоменклатуры.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	Возврат МассивНоменклатуры
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПоНачалуАкции(ПоОстаткам=Ложь, ДатаАкции)  //dps+
	МассивНоменклатуры = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПромоАкции.IDПромо,
	|	ПромоАкции.IDКомпоненты,
	|	ПромоАкции.IDГруппы,
	|	ПромоАкции.IDДеталей,
	|	ПромоАкции.ДатаНачала,
	|	ПромоАкции.ДатаОкончания,
	|	ПОДСТРОКА(ПромоАкции.Название,0,50) КАК Название,
	|	ПромоАкции.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.ПромоАкции КАК ПромоАкции
	|ГДЕ
	|	ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ПромоАкции.ДатаНачала = НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПромоАкцииНоменклатура.Номенклатура.Ссылка КАК Номенклатура,
	|	МАКСИМУМ(ВТ.Название) КАК Название
	|ИЗ
	|	РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	|		ПО ПромоАкцииНоменклатура.IDПромо = ВТ.IDПромо
	|			И ПромоАкцииНоменклатура.IDКомпоненты = ВТ.IDКомпоненты
	|			И ПромоАкцииНоменклатура.IDГруппы = ВТ.IDГруппы
	|			И ПромоАкцииНоменклатура.IDДеталей = ВТ.IDДеталей
	|			И ПромоАкцииНоменклатура.СтруктурнаяЕдиница = ВТ.СтруктурнаяЕдиница
	|		"+?(ПоОстаткам,"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(, ) КАК ОстаткиНоменклатурыОстатки
	|		ПО ПромоАкцииНоменклатура.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура","")+ " 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПромоАкцииНоменклатура.Номенклатура");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ДатаНачала",?(ЗначениеЗаполнено(ДатаАкции),ДатаАкции,ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивНоменклатуры.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	Возврат МассивНоменклатуры
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШаблоныЦенника(МассивНоменклатуры, Дата)	
	
	Возврат РегистрыСведений.Izh_ПравилаВыбораШаблонаЦенника.ПолучитьШаблоныЦенника(МассивНоменклатуры, Дата);	
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧасть(Команда)
	Если Объект.Состав.Количество()>0 Тогда
		Если Вопрос("Очистить табличную часть ?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			Объект.Состав.Очистить();
		КонецЕсли;
	КонецЕсли;
	МассивНоменклатуры = Новый Массив;
	//ЦенникПоУмолчанию = ПолучитьЦенникПоУмолчанию();
	ЭтикеткаПоУмолчанию = ПолучитьЭтикеткуПОУмолчанию();
	КоличествоЦенников = ?(Элементы.КоличествоЦенниковВоВсехСтроках.Видимость, КоличествоЦенниковВоВсехСтроках, 0);
	КоличествоЭтикеток = ?(Элементы.КоличествоЭтикетокВоВсехСтроках.Видимость, КоличествоЭтикетокВоВсехСтроках, 0);
	Если Команда.Имя = "ЗаполнитьПоПротоколу" Тогда
		Отборы = Новый Структура("ПротоколРЦ,Поставщик", Ложь,Истина);
		ПараметрыВыбора = Новый Структура("Отбор", Отборы);
		Контрагент = ОткрытьФормуМодально("Справочник.Контрагенты.ФормаВыбора",ПараметрыВыбора);
		Если ЗначениеЗаполнено(Контрагент) Тогда
			МассивНоменклатуры = ЗаполнитьПоПротоколу(Контрагент,Объект.ТолькоСОстатками,Объект.ТолькоПоАкциям,Объект.ДатаАкции);
		КонецЕсли;
	ИначеЕсли Команда.Имя = "ЗаполнитьИзДокумента" Тогда 
		сзТипыДокумента = Новый СписокЗначений;
		сзТипыДокумента.Добавить("ПриходнаяНакладная","Приходная накладная");
		сзТипыДокумента.Добавить("КоррекцияЗапасов","Коррекция запасов");
		//++Минин 0000133330 2015-07-21
		сзТипыДокумента.Добавить("Комплектация","Комплектация");
		//--Минин 0000133330 2015-07-21
		ВыбранныйЭлемент = сзТипыДокумента.ВыбратьЭлемент(,);
		Если ВыбранныйЭлемент<>Неопределено Тогда
			ВыбранныйДокумент = ОткрытьФормуМодально("Документ."+ВыбранныйЭлемент.Значение+".ФормаВыбора");	
			Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
				МассивНоменклатуры = ЗаполнитьИзДокумента(ВыбранныйДокумент,Объект.ТолькоСОстатками,Объект.ТолькоПоАкциям,Объект.ДатаАкции);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Команда.Имя = "ЗаполнитьПоГруппе" Тогда
		ВыбраннаяГруппа = ОткрытьФормуМодально("Справочник.Номенклатура.ФормаВыбораГруппы");
		Если ЗначениеЗаполнено(ВыбраннаяГруппа) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбраннаяГруппа,"Группа")=1 тогда
			МассивНоменклатуры = ЗаполнитьПоГруппе(ВыбраннаяГруппа,Объект.ТолькоСОстатками,Объект.ТолькоПоАкциям,Объект.ДатаАкции);
		КонецЕсли;
	ИначеЕсли Команда.Имя = "ЗаполнитьПоНачалуАкции" Тогда 	 //dps+
		МассивНоменклатуры = ЗаполнитьПоНачалуАкции(Объект.ТолькоСОстатками,Объект.ДатаАкции);
	КонецЕсли;
	//dps-	
	
	// {ВетровИА 2015-08-11 Обращение 0000134674
	НаДату = ?(ЗначениеЗаполнено(Объект.ДатаАкции), Объект.ДатаАкции, ТекущаяДата());  		
	ШаблоныЦенника = ПолучитьШаблоныЦенника(МассивНоменклатуры, НаДату);
	// ВетровИА 2015-08-11 Обращение 0000134674}
 
	Для Каждого ЭлементМассива из МассивНоменклатуры Цикл
		СтруктураПодмены = Новый Структура("Номенклатура,Код",ЭлементМассива,ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементМассива,"Код"));
		ТекСтрока = ОбработкаТабличныхЧастейКлиент.ЗаполнитьИзПодбора(ЭтаФорма,Объект,СтруктураПодмены,Элементы.состав,Истина);	
		Если текстрока <> Неопределено тогда
			Если ИзЗадачиБизнесПроцесса Тогда
				ТекСтрока.СтараяЦена = СтараяЦенаПриПодбореНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
			КонецЕсли;
			ТекСтрока.КоличествоЦенников = КоличествоЦенников;
			ТекСтрока.КоличествоЭтикеток = КоличествоЭтикеток;
			ТекСтрока.ШаблонЦенника =  ШаблоныЦенника[ТекСтрока.Номенклатура];
			ТекСтрока.ШаблонЭтикетки = ЭтикеткаПоУмолчанию;
			ТекСтрока.Флаг = Истина;
			//++БИТ БВО
			ТекСтрока.Фирма = ПолучитьФирмуНоменклатурыИзПравилПерепродажи(ТекСтрока.Номенклатура);
			//--БИТ БВО
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	//dps+  15\05\30 000151824	
	Если Команда.Имя = "ЗаполнитьИзДокумента" И ЗначениеЗаполнено(ВыбранныйДокумент) Тогда 
		ОбязательноРаспечатать(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "Дата"));
		Объект.ДатаАкции = ТекущаяДата();
	КонецЕсли;
	//dps-  15\05\30 000151824
	
КонецПроцедуры
//БредовЮГ 2014-12-29 Заполнение ТЧ}

// {ВетровИА 2015-08-07 Обращение 0000134678 
&НаКлиенте
Процедура УстановитьШаблонЦенника(Команда)
	ТекущийШаблонЦенника = Элементы.Состав.ТекущиеДанные.ШаблонЦенника;
	ТипЦенника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийШаблонЦенника, "ТипЦенника");
	ПараметрыВыбора = Новый Структура("ФильтрПоТипуЦенника", ТипЦенника);
	ВыбранныйШаблонЦенника = ОткрытьФормуМодально("Справочник.ШаблоныЦенников.Форма.ФормаВыбора", ПараметрыВыбора, ЭтаФорма);
	Если ЗначениеЗаполнено(ВыбранныйШаблонЦенника) Тогда
		Для Каждого Строка Из Объект.Состав Цикл  
			Если Строка.ШаблонЦенника = ТекущийШаблонЦенника Тогда
				 Строка.ШаблонЦенника = ВыбранныйШаблонЦенника; 			
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры
// ВетровИА 2015-08-07 Обращение 0000134678} 

//dps+
&НаСервере
Процедура УстановитьШаблонНаСервере(Шаблон, ВидШаблона)
	Для Каждого Строка Из Объект.Состав Цикл
		Строка[ВидШаблона] = Шаблон;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЭтикетки(Команда)
	ШаблонЭ = ОткрытьФормуМодально("Справочник.ШаблоныЭтикеток.ФормаВыбора");
	УстановитьШаблонНаСервере(ШаблонЭ,"ШаблонЭтикетки");
КонецПроцедуры

//&НаСервере
//Функция ШаблонЦенника(Номенклатура)
//	Запрос = Новый Запрос("ВЫБРАТЬ
//	|	ПромоАкцииНоменклатура.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//	|	ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура,
//	|	МИНИМУМ(ПромоАкцииНоменклатура.Цена) КАК Цена,
//	|	ПромоАкции.ДатаНачала КАК ДатаНачала,
//	|	ПромоАкции.ДатаОкончания КАК ДатаОкончания,
//	|	ПромоАкции.Название КАК Название,
//	|	ПромоАкции.ОписаниеПромо КАК ОписаниеПромо,
//	|	ПромоАкции.IDДеталей КАК Основание,
//	|	ПромоАкцииНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
//	|ИЗ
//	|	РегистрСведений.ПромоАкции КАК ПромоАкции
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
//	|		ПО ПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
//	|			И ПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
//	|			И ПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
//	|			И ПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
//	|			И ПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
//	|			И (НАЧАЛОПЕРИОДА(ПромоАкции.ДатаНачала, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ))
//	|			И (КОНЕЦПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ))
//	|			И (ПромоАкции.ФлагОкончания = ЛОЖЬ)
//	|			И (ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
//	|			И (ПромоАкцииНоменклатура.Номенклатура = &Номенклатура)
//	|ГДЕ
//	|	ПромоАкцииНоменклатура.Цена <> 0
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ПромоАкцииНоменклатура.СтруктурнаяЕдиница,
//	|	ПромоАкцииНоменклатура.Номенклатура,
//	|	ПромоАкции.ДатаНачала,
//	|	ПромоАкции.ДатаОкончания,
//	|	ПромоАкции.Название,
//	|	ПромоАкции.ОписаниеПромо,
//	|	ПромоАкции.IDДеталей,
//	|	ПромоАкцииНоменклатура.ЕдиницаИзмерения");
//	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
//	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
//	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
//	рез = Запрос.Выполнить().Выбрать();
//	Если рез.Количество() = 0 Тогда 
//		Возврат ПолучитьЦенникПоУмолчанию();
//	Иначе 
//		Возврат ПолучитьЦенникРАПоУмолчанию();
//	КонецЕсли;
//КонецФункции

&НаСервере
Процедура ОбязательноРаспечатать(Дата) //dps+  15\05\30 000151824
	Для Каждого СтрокаСостава Из Объект.Состав Цикл
		СтрокаСостава.Флаг = ЛОЖЬ;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ID КАК ID,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
	|	NULL КАК Остаток
	|ПОМЕСТИТЬ ВТИтог
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ),
	|			СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)
	|				И НЕ АктивностьЗаписи
	|				И Номенклатура В (&СписокНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|			МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.ID) КАК ID
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|					НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ),
	|					СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)
	|						И НЕ АктивностьЗаписи
	|						И Номенклатура В (&СписокНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|					МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|							НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ),
	|							СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)
	|								И НЕ АктивностьЗаписи
	|								И Номенклатура В (&СписокНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|				ПО ЦеныНоменклатурыСрезПоследних.Период = ВложенныйЗапрос.Период
	|					И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|					И ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|					И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|			ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|			ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|			И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|			И ЦеныНоменклатурыСрезПоследних.ID = ВложенныйЗапрос.ID
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВложенныйЗапрос.Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		Ном.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ОстаткиНоменклатурыОстатки.КоличествоОстаток ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ОстаткиНоменклатурыОстатки.КоличествоОстаток
	|		КОНЕЦ КАК Остаток
	|	ИЗ
	|		Справочник.Номенклатура КАК Ном
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(&ДатаДок, Номенклатура В (&СписокНоменклатуры)) КАК ОстаткиНоменклатурыОстатки
	|			ПО Ном.Ссылка = ОстаткиНоменклатурыОстатки.Номенклатура
	|	ГДЕ
	|		Ном.Ссылка В(&СписокНоменклатуры)) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Остаток <= 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтог.Номенклатура,
	|	МАКСИМУМ(ВТИтог.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ВТИтог.Цена) КАК Цена,
	|	МАКСИМУМ(ВТИтог.ID) КАК ID,
	|	МАКСИМУМ(ВТИтог.Период) КАК Период,
	|	МАКСИМУМ(ВТИтог.Остаток) КАК Остаток
	|ИЗ
	|	ВТИтог КАК ВТИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИтог.Номенклатура";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаДок", Новый Граница(Дата,ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СписокНоменклатуры", Объект.Состав.Выгрузить(,"Номенклатура"));
	рез = Запрос.Выполнить().Выбрать();
	Пока рез.Следующий() Цикл
		мсвСтр = Объект.Состав.НайтиСтроки(Новый Структура("Номенклатура", рез.Номенклатура));
		Для Каждого стр Из мсвСтр Цикл
			стр.Обязательно = Истина;
			стр.Флаг = Истина;
			Если ЗначениеЗаполнено(рез.ID) Тогда стр.IDЦеныНоменклатуры = рез.ID; КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоставПередНачаломИзменения(Элемент, Отказ)
	Поле = Элементы.Состав.ТекущийЭлемент.Имя;
	Если Поле = "ШаблонЭтикетки" ИЛИ
		Поле = "ШаблонЦенника" Тогда 
		Возврат;
	КонецЕсли;
	ТекСтрока = Элементы.Состав.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда 
		Отказ = ТекСтрока.Обязательно;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьАктивностьЦены()
	//Установка активности цены номенклатуры после печати
	СтруктураПоиска = Новый Структура("Обязательно", Истина);
	НайденныеСтроки = Объект.Состав.НайтиСтроки(СтруктураПоиска);
	СЕ = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если Строка.КоличествоЦенников = 0 ИЛИ НЕ ЗначениеЗаполнено(Строка.IDЦеныНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		рсЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		рсЗаписи.Отбор.СтруктурнаяЕдиница.Установить(СЕ);
		рсЗаписи.Отбор.Номенклатура.Установить(Строка.Номенклатура);
		рсЗаписи.Отбор.ЕдиницаИзмерения.Установить(Строка.ЕдиницаИзмерения);
		рсЗаписи.Отбор.ID.Установить(Строка.IDЦеныНоменклатуры);
		рсЗаписи.Прочитать();
		Для Каждого рсЗапись Из рсЗаписи Цикл
			рсЗапись.АктивностьЗаписи = Истина;
		КонецЦикла;
		рсЗаписи.Записать();
	КонецЦикла;
КонецПроцедуры
//dps-

// {ВетровИА 2015-08-07 Обращение 0000134678
&НаКлиенте
Процедура ШаблонЦенникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура("ФильтрПоТипуЦенника", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элементы.Состав.ТекущиеДанные.ШаблонЦенника, "ТипЦенника"));
	ВыбранныйШаблонЦенника = ОткрытьФормуМодально("Справочник.ШаблоныЦенников.Форма.ФормаВыбора", ПараметрыВыбора,ЭтаФорма);
	Если ЗначениеЗаполнено(ВыбранныйШаблонЦенника) Тогда
		Объект.Состав[Элементы.Состав.ТекущиеДанные.НомерСтроки - 1].ШаблонЦенника = ВыбранныйШаблонЦенника;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
			
КонецПроцедуры
// ВетровИА 2015-08-07 Обращение 0000134678}

