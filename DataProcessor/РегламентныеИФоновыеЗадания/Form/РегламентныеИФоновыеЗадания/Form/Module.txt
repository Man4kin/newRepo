////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа.
		                             |
		                             |Работа с регламентными и фоновыми заданиями
		                             |выполняется только администраторами.'");
	КонецЕсли;
	
	ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий = РегламентныеЗаданияСлужебный.ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий();
	
	ПустойИдентификатор = Строка(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	ТекстНеОпределено = РегламентныеЗаданияСлужебный.ТекстНеОпределено();
	
	Если ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий Тогда
		Элементы.ИмяПользователя.Видимость = Ложь;
		Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
			Элементы.ТаблицаРегламентныеЗаданияНастройкаВыполнения.Видимость = Истина;
			Элементы.ТаблицаРегламентныеЗаданияОткрытьОтдельныйСеансВыполнения.Видимость = Истина;
		КонецЕсли;
		Элементы.ТаблицаФоновыеЗаданияОтменить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не НастройкиЗагружены Тогда
		ЗаполнитьНастройкиФормы(Новый Соответствие);
	КонецЕсли;
	
	ОбновитьСписокВыбораРегламентногоЗадания();
	ЗагрузитьНастройкиОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РегламентныеИФоновыеЗадания" Тогда
		
		Если ЗначениеЗаполнено(Параметр) Тогда
			ОбновитьТаблицуРегламентныхЗаданий(Параметр);
		Иначе
			ПодключитьОбработчикОжидания("ОтложенноеОбновленияДанных", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ЗаполнитьНастройкиФормы(Настройки);
	
	НастройкиЗагружены = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОтбораПоПериодуПриИзменении(Элемент)
	
	ТекущаяДатаСеанса = ТекущаяДатаСеансаНаСервере();
	
	Элементы.ОтборПериодС.ТолькоПросмотр  = НЕ (ВидОтбораПоПериоду = 4);
	Элементы.ОтборПериодПо.ТолькоПросмотр = НЕ (ВидОтбораПоПериоду = 4);
	
	Если ВидОтбораПоПериоду = 0 Тогда
		ОтборПериодС  = '00010101';
		ОтборПериодПо = '00010101';
		
	ИначеЕсли ВидОтбораПоПериоду = 4 Тогда
		ОтборПериодС  = НачалоДня(ТекущаяДатаСеанса);
		ОтборПериодПо = ОтборПериодС;
	Иначе
		ОбновитьАвтоматическийПериод(ЭтаФорма, ТекущаяДатаСеанса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтбиратьПоРегламентномуЗаданиюПриИзменении(Элемент)

	Элементы.РегламентноеЗаданиеДляОтбора.Доступность = ОтбиратьПоРегламентномуЗаданию;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентноеЗаданиеДляОтбораОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РегламентноеЗаданиеДляОтбораИдентификатор = ПустойИдентификатор;
	РегламентноеЗаданиеДляОтбораПредставление = ТекстНеОпределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентноеЗаданиеДляОтбораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлементСписка = Элементы.РегламентноеЗаданиеДляОтбора.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	РегламентноеЗаданиеДляОтбораИдентификатор = ЭлементСписка.Значение;
	РегламентноеЗаданиеДляОтбораПредставление = ЭлементСписка.Представление;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаФоновыеЗадания

&НаКлиенте
Процедура ТаблицаФоновыеЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФоновоеЗадание();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаРегламентныеЗадания

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьСкопироватьИзменитьРегламентноеЗадание(?(Копирование, "Скопировать", "Добавить"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДобавитьСкопироватьИзменитьРегламентноеЗадание("Изменить");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки.Количество() > 1 Тогда
		Предупреждение(НСтр("ru = 'Выберите одно регламентное задание.'"));
		
	ИначеЕсли Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Выберите регламентное задание.'"));
		
	ИначеЕсли Не ЗначениеЗаполнено(Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные.Идентификатор) Тогда
		// Группа заданий. Не обрабатываем.
		
	ИначеЕсли Элемент.ТекущиеДанные.Предопределенное Тогда
		Предупреждение(НСтр("ru = 'Невозможно удалить предопределенное регламентное задание.'") );
		
	Иначе
		Ответ = Вопрос(НСтр("ru = 'Удалить регламентное задание?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ТекДанные = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
			УдалитьРегламентноеЗаданиеВыполнитьНаСервере(ТекДанные.Идентификатор);
			
			ЭлементыДерева = ТаблицаРегламентныеЗадания.ПолучитьЭлементы();
			ИД = ЭлементыДерева.Индекс(ТекДанные);
			
			Если ИД = -1 Тогда
				Для Каждого ТекЭлемент Из ЭлементыДерева Цикл
					Если ТекЭлемент = ТекДанные.ПолучитьРодителя() Тогда
						ВложенныеЭлементы = ТекЭлемент.ПолучитьЭлементы();
						ВложенныеЭлементы.Удалить(ВложенныеЭлементы.Индекс(ТекДанные));
						// Если Остался один элемент - вывести из группы...
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЭлементыТаблицы = ТаблицаРегламентныеЗадания.ПолучитьЭлементы();
				ЭлементыТаблицы.Удалить(ЭлементыТаблицы.Индекс(ТекДанные));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВручную(Команда)

	Если Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные = Неопределено Тогда
		Предупреждение( НСтр("ru = 'Выберите регламентное задание.'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки;
	ВыделенныеСтроки = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки Цикл
		ВыделенныеСтроки.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	Индекс = 0;
	
	МассивСообщенийОбОшибках = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ОбновитьВсе = Индекс = ВыделенныеСтроки.Количество()-1;
		ПроцедураУжеВыполняется = Неопределено;
		ТекущиеДанные = ТаблицаРегламентныеЗадания.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Или ТекущиеДанные.Идентификатор = ПустойИдентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий Тогда
			
			МоментЗапуска   = Неопределено;
			МоментОкончания = Неопределено;
			НомерСеанса     = Неопределено;
			НачалоСеанса    = Неопределено;
			ПроцедураВыполнена = ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(
				ТекущиеДанные.Идентификатор,
				МоментЗапуска,
				,
				МоментОкончания,
				НомерСеанса,
				НачалоСеанса,
				,
				ОбновитьВсе,
				ПроцедураУжеВыполняется);
			
			Если ПроцедураВыполнена Тогда
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Выполнена процедура регламентного задания'"),
					,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.
						|Процедура выполнялась с %2 по %3'"),
						ТекущиеДанные.Наименование,
						Строка(МоментЗапуска),
						Строка(МоментОкончания)),
					БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную);
			Иначе
				Если ПроцедураУжеВыполняется Тогда
					МассивСообщенийОбОшибках.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Процедура регламентного задания ""%1""
							|  уже выполняется в сеансе %2, открытом %3.'"),
							ТекущиеДанные.Наименование,
							Строка(НомерСеанса),
							Строка(НачалоСеанса)));
				Иначе
					Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки.Удалить(
						Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки.Найти(ВыделеннаяСтрока));
				КонецЕсли;
			КонецЕсли;
		Иначе
			МоментЗапуска                = Неопределено;
			ИдентификаторФоновогоЗадания = "";
			ПредставлениеФоновогоЗадания = "";
			
			Если ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(
					ТекущиеДанные.Идентификатор,
					МоментЗапуска,
					ИдентификаторФоновогоЗадания,
					,
					,
					,
					ПредставлениеФоновогоЗадания,
					ОбновитьВсе,
					ПроцедураУжеВыполняется) Тогда
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Запущена процедура регламентного задания'"),
					,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.
						|Процедура запущена в фоновом задании %2'"),
						ТекущиеДанные.Наименование,
						Строка(МоментЗапуска)),
					БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную);
				
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Добавить(
					ИдентификаторФоновогоЗадания,
					ТекущиеДанные.Наименование);
				
				ПодключитьОбработчикОжидания(
					"СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания", 0.1, Истина);
			Иначе
				Если ПроцедураУжеВыполняется Тогда
					МассивСообщенийОбОшибках.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Процедура регламентного задания ""%1""
							|  уже выполняется в фоновом задании ""%2"", начатом %3.'"),
							ТекущиеДанные.Наименование,
							ПредставлениеФоновогоЗадания,
							Строка(МоментЗапуска)));
				Иначе
					Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки.Удалить(
						Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки.Найти(ВыделеннаяСтрока));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	КоличествоОшибок = МассивСообщенийОбОшибках.Количество();
	Если КоличествоОшибок > 0 Тогда
		ЗаголовокТекстаПроОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Задания выполнены с ошибками (%1 из %2)'"),
			Формат(КоличествоОшибок, "ЧГ="),
			Формат(ВыделенныеСтроки.Количество(), "ЧГ="));
		
		ТекстВсехОшибок = Новый ТекстовыйДокумент;
		ТекстВсехОшибок.ДобавитьСтроку(ЗаголовокТекстаПроОшибки + ":");
		Для Каждого ТекстЭтойОшибки Из МассивСообщенийОбОшибках Цикл
			ТекстВсехОшибок.ДобавитьСтроку("");
			ТекстВсехОшибок.ДобавитьСтроку(ТекстЭтойОшибки);
		КонецЦикла;
		
		Если КоличествоОшибок > 5 Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(1, НСтр("ru = 'Показать ошибки'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			Ответ = Вопрос(ЗаголовокТекстаПроОшибки, Кнопки);
			
			Если Ответ = 1 Тогда
				ТекстВсехОшибок.Показать();
			КонецЕсли;
		Иначе
			Предупреждение(СокрЛП(ТекстВсехОшибок.ПолучитьТекст()));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОтдельныйСеанс(Команда)
	
	Состояние(НСтр("ru = 'Запуск отдельного сеанса для выполнения регламентных заданий.'"),
	          ,
	          НСтр("ru = 'Пожалуйста, подождите...'"));
	
	ПодключитьОбработчикОжидания(
		"ЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданийЧерезОбработчикОжидания", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВыполненияРегламентныхЗаданий(Команда)
	
	ПараметрыФормы = Новый Структура("СкрытьКомандуЗапускаОтдельногоСеанса", Истина);
	
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.НастройкаВыполненияРегламентныхЗаданий", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВыполнить(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеРегламентногоЗаданияВыполнить(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение( НСтр("ru = 'Выберите регламентное задание.'") );
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Или ТекущиеДанные.Идентификатор = ПустойИдентификатор Тогда // Группа заданий. Не обрабатываем.
		
	ИначеЕсли Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки.Количество() > 1 Тогда
		Предупреждение(НСтр("ru = 'Выберите одно регламентное задание.'"));
	Иначе
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(
			ПолучитьРасписание(ТекущиеДанные.Идентификатор));
		
		Если Диалог.ОткрытьМодально() Тогда
			
			УстановитьРасписание(ТекущиеДанные.Идентификатор, Диалог.Расписание);
			
			ОбновитьТаблицуРегламентныхЗаданий(ТекущиеДанные.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРегламентноеЗадание(Команда)
	
	УстановитьИспользованиеРегламентногоЗадания(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРегламентноеЗадание(Команда)
	
	УстановитьИспользованиеРегламентногоЗадания(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФоновоеЗаданиеВыполнить(Команда)
	
	ОткрытьФоновоеЗадание();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьФоновоеЗаданиеВыполнить(Команда)
	
	Если Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные = Неопределено Тогда
		Предупреждение( НСтр("ru = 'Выберите фоновое задание.'") );
		
	Иначе
		ОтменитьФоновоеЗаданиеНаСервере(Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные.Идентификатор);
		
		Предупреждение(НСтр("ru = 'Задание отменено, но состояние отмены будет
		                          |установлено сервером только через секунды,
		                          |возможно потребуется обновить данные вручную.'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция ПолучитьРасписание(Знач ИдентификаторРегламентногоЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегламентныеЗаданияСервер.ПолучитьРасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьРасписание(Знач ИдентификаторРегламентногоЗадания, Знач Расписание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания,
		Расписание);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиФормы(Знач Настройки)
	
	ОбновитьТаблицуРегламентныхЗаданий();
	
	// Настройка отбора фоновых заданий.
	Если Настройки.Получить("ОтборПоСостояниюАктивно") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюАктивно", Истина);
	КонецЕсли;
	
	Если Настройки.Получить("ОтборПоСостояниюЗавершено") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюЗавершено", Истина);
	КонецЕсли;
	
	Если Настройки.Получить("ОтборПоСостояниюЗавершеноАварийно") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюЗавершеноАварийно", Истина);
	КонецЕсли;

	Если Настройки.Получить("ОтборПоСостояниюОтменено") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюОтменено", Истина);
	КонецЕсли;
	
	Если Настройки.Получить("ОтбиратьПоРегламентномуЗаданию") = Неопределено
	 ИЛИ Настройки.Получить("РегламентноеЗаданиеДляОтбораИдентификатор")   = Неопределено Тогда
		Настройки.Вставить("ОтбиратьПоРегламентномуЗаданию", Ложь);
		Настройки.Вставить("РегламентноеЗаданиеДляОтбораИдентификатор", ПустойИдентификатор);
	КонецЕсли;
	
	// Настройка отбора по периоду "За все время".
	// См. также обработчик события ВидОтбораПоПериодуПриИзменении переключателя.
	Если Настройки.Получить("ВидОтбораПоПериоду") = Неопределено
	 ИЛИ Настройки.Получить("ОтборПериодС")       = Неопределено
	 ИЛИ Настройки.Получить("ОтборПериодПо")      = Неопределено Тогда
		
		Настройки.Вставить("ВидОтбораПоПериоду", 0);
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Настройки.Вставить("ОтборПериодС",  НачалоДня(ТекущаяДатаСеанса) - 3*3600);
		Настройки.Вставить("ОтборПериодПо", НачалоДня(ТекущаяДатаСеанса) + 9*3600);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Настройки Цикл
		Попытка
			ЭтаФорма[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// Настройка видимости и доступности.
	Элементы.ОтборПериодС.ТолькоПросмотр  = Не (ВидОтбораПоПериоду = 4);
	Элементы.ОтборПериодПо.ТолькоПросмотр = Не (ВидОтбораПоПериоду = 4);
	Элементы.РегламентноеЗаданиеДляОтбора.Доступность = ОтбиратьПоРегламентномуЗаданию;
	
	ОбновитьАвтоматическийПериод(ЭтаФорма, ТекущаяДатаСеанса());
	
	ОбновитьТаблицуФоновыхЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФоновоеЗадание()
	
	Если Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные = Неопределено Тогда
		Предупреждение (НСтр("ru = 'Выберите фоновое задание.'"));
	Иначе
		СписокПередаваемыхСвойств =
		"Идентификатор,
		|Ключ,
		|Наименование,
		|ИмяМетода,
		|Состояние,
		|Начало,
		|Конец,
		|Расположение,
		|СообщенияПользователюИОписаниеИнформацииОбОшибке,
		|ИдентификаторРегламентногоЗадания,
		|НаименованиеРегламентногоЗадания";
		ЗначенияТекущихДанных = Новый Структура(СписокПередаваемыхСвойств);
		ЗаполнитьЗначенияСвойств(ЗначенияТекущихДанных, Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Идентификатор", Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные.Идентификатор);
		ПараметрыФормы.Вставить("СвойстваФоновогоЗадания", ЗначенияТекущихДанных);
		
		ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.ФоновоеЗадание", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяДатаСеансаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервере
Функция ОповещенияОбОкончанииВыполненияРегламентныхЗаданий()
	
	ОповещенияОбОкончанииВыполнения = Новый Массив;
	
	Если ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
		Индекс = ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() - 1;
		
		УстановитьПривилегированныйРежим(Истина);
		Пока Индекс >= 0 Цикл
			
			Отбор = Новый Структура("УникальныйИдентификатор", Новый УникальныйИдентификатор(
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Значение));
			
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			Если МассивФоновыхЗаданий.Количество() = 1 Тогда
				МоментОкончания = МассивФоновыхЗаданий[0].Конец;
				
				Если ЗначениеЗаполнено(МоментОкончания) Тогда
					
					ОповещенияОбОкончанииВыполнения.Добавить(
						Новый Структура(
							"ПредставлениеРегламентногоЗадания,
							|МоментОкончания",
							ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Представление,
							МоментОкончания));
					
					ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
				КонецЕсли;
			Иначе
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ОбновитьДанные();
	
	Возврат ОповещенияОбОкончанииВыполнения;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания()
	
	ОповещенияОбОкончанииВыполнения = ОповещенияОбОкончанииВыполненияРегламентныхЗаданий();
	
	Для Каждого Оповещение Из ОповещенияОбОкончанииВыполнения Цикл
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнена процедура регламентного задания'"),
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1.
				           |Процедура завершена в фоновом задании %2'"),
				Оповещение.ПредставлениеРегламентногоЗадания,
				Строка(Оповещение.МоментОкончания)),
			БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную);
	КонецЦикла;
	
	Если ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
		
		ПодключитьОбработчикОжидания(
			"СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания", 2, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораРегламентногоЗадания()
	
	Дерево = РеквизитФормыВЗначение("ТаблицаРегламентныеЗадания", Тип("ДеревоЗначений"));
	Список = Элементы.РегламентноеЗаданиеДляОтбора.СписокВыбора;
	
	// Добавление предопределенного элемента.
	Если Список.Количество() = 0 Тогда
		Список.Добавить(ПустойИдентификатор, ТекстНеОпределено);
	КонецЕсли;
	
	Индекс = 1;
	
	Для Каждого ГруппаЗаданий Из Дерево.Строки Цикл
		Для Каждого Задание Из ГруппаЗаданий.Строки Цикл
			Если Индекс >= Список.Количество()
			 Или Список[Индекс].Значение <> Задание.Идентификатор Тогда
				// Вставка нового задания.
				Список.Вставить(Индекс, Задание.Идентификатор, Задание.Наименование);
			Иначе
				Список[Индекс].Представление = Задание.Наименование;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Удаление лишних строк.
	Пока Индекс < Список.Количество() Цикл
		Список.Удалить(Индекс);
	КонецЦикла;
	
	ЭлементСписка = Список.НайтиПоЗначению(РегламентноеЗаданиеДляОтбораИдентификатор);
	Если ЭлементСписка = Неопределено Тогда
		
		РегламентноеЗаданиеДляОтбораИдентификатор = ПустойИдентификатор;
		РегламентноеЗаданиеДляОтбораПредставление = ТекстНеОпределено;
	Иначе
		РегламентноеЗаданиеДляОтбораПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(Знач ИдентификаторРегламентногоЗадания,
                                                     МоментЗапуска,
                                                     ИдентификаторФоновогоЗадания,
                                                     МоментОкончания = Неопределено,
                                                     НомерСеанса = Неопределено,
                                                     НачалоСеанса = Неопределено,
                                                     ПредставлениеФоновогоЗадания = Неопределено,
                                                     ОбновитьВсе = Ложь,
                                                     ПроцедураУжеВыполняется = Неопределено)
	
	Если ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий Тогда
		МоментЗапуска = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗапускВыполнен = РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(
		ИдентификаторРегламентногоЗадания,
		МоментЗапуска,
		ИдентификаторФоновогоЗадания,
		МоментОкончания,
		НомерСеанса,
		НачалоСеанса,
		ПредставлениеФоновогоЗадания,
		ПроцедураУжеВыполняется);
	
	Если ОбновитьВсе Тогда
		ОбновитьДанные();
	Иначе
		ОбновитьТаблицуРегламентныхЗаданий(ИдентификаторРегламентногоЗадания);
	КонецЕсли;
	
	Возврат ЗапускВыполнен;
	
КонецФункции

&НаСервере
Процедура ОтменитьФоновоеЗаданиеНаСервере(Знач Идентификатор)
	
	РегламентныеЗаданияСлужебный.ОтменитьФоновоеЗадание(Идентификатор);
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРегламентноеЗаданиеВыполнитьНаСервере(Знач Идентификатор)
	
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Идентификатор);
	Задание.Удалить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкопироватьИзменитьРегламентноеЗадание(Знач Действие)
	
	ТекущиеДанные = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Выберите регламентное задание.'"));
		
	ИначеЕсли Действие = "Добавить" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Действие", Действие);
		ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли Действие = "Изменить" Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Или ТекущиеДанные.Идентификатор = ПустойИдентификатор Тогда // Группа заданий.
			ТекущаяСтрока = Элементы.ТаблицаРегламентныеЗадания.ТекущаяСтрока;
			Если Элементы.ТаблицаРегламентныеЗадания.Развернут(ТекущаяСтрока) Тогда
				Элементы.ТаблицаРегламентныеЗадания.Свернуть(ТекущаяСтрока);
			Иначе
				Элементы.ТаблицаРегламентныеЗадания.Развернуть(ТекущаяСтрока);
			КонецЕсли;
		Иначе // Регламентное задание
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
			ПараметрыФормы.Вставить("Действие",      Действие);
			ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли Действие = "Скопировать" Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Или ТекущиеДанные.Идентификатор = ПустойИдентификатор Тогда // Группа заданий.
			Предупреждение(НСтр("ru = 'Выберите регламентное задание.'"));
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
			ПараметрыФормы.Вставить("Действие",      Действие);
			ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенноеОбновленияДанных()
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные()
	
	ОбновитьТаблицуРегламентныхЗаданий();
	ОбновитьТаблицуФоновыхЗаданий();
	ОбновитьСписокВыбораРегламентногоЗадания();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуРегламентныхЗаданий(ИдентификаторРегламентногоЗадания = Неопределено)
	
	// Обновление таблицы РегламентныеЗадания и списка СписокВыбора регламентного задания для отбора.
	ЗаданияВМоделиСервиса = Новый Соответствие;
	ПодсистемаРаботаВМоделиСервиса = Неопределено;
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() И ПодсистемаРаботаВМоделиСервиса <> Неопределено Тогда
		Для Каждого ОбъектМетаданных Из Метаданные.РегламентныеЗадания Цикл
			Если ПодсистемаРаботаВМоделиСервиса.Состав.Содержит(ОбъектМетаданных) Тогда
				ЗаданияВМоделиСервиса.Вставить(ОбъектМетаданных.Имя, Истина);
				Продолжить;
			КонецЕсли;
			Для Каждого Подсистема Из ПодсистемаРаботаВМоделиСервиса.Подсистемы Цикл
				Если Подсистема.Состав.Содержит(ОбъектМетаданных) Тогда
					ЗаданияВМоделиСервиса.Вставить(ОбъектМетаданных.Имя, Истина);
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ИдентификаторРегламентногоЗадания = Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ТекущиеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
		УстановитьПривилегированныйРежим(Ложь);
		
		сЗадания = Новый Соответствие;
		
		// Сначала разобъем все задания по группам.
		Для Каждого Задание Из ТекущиеЗадания Цикл
			Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() И ЗаданияВМоделиСервиса[Задание.Метаданные.Имя] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			мЗаданияГруппы = сЗадания.Получить(Задание.Метаданные.Синоним);
			
			Если мЗаданияГруппы = Неопределено Тогда
				мЗаданияГруппы = Новый Массив;
			КонецЕсли;
			
			мЗаданияГруппы.Добавить(Задание);
			сЗадания.Вставить(Задание.Метаданные.Синоним, мЗаданияГруппы);
		КонецЦикла;
		
		// Теперь "слепим" из полученных групп "правильное" дерево.
		// Параллельно посчитаем общее количество заданий.
		Дерево = РеквизитФормыВЗначение("ТаблицаРегламентныеЗадания", Тип("ДеревоЗначений"));
		Дерево.Строки.Очистить();
		КоличествоГрупп = 0;
		КоличествоЗаданий = 0;
		Для Каждого ГруппаЗаданий Из сЗадания Цикл
			мсвЗаданияГруппы = ГруппаЗаданий.Значение;
			Если мсвЗаданияГруппы.Количество() > 1 Тогда
				ГруппаЭлемент = Дерево.Строки.Вставить(КоличествоГрупп);
				ГруппаЭлемент.Наименование = мсвЗаданияГруппы[0].Метаданные.Синоним;
				ГруппаЭлемент.Идентификатор = ПустойИдентификатор;
				Для Каждого Задание Из мсвЗаданияГруппы Цикл
					НоваяСтрока = ГруппаЭлемент.Строки.Добавить();
					ОбновитьСтрокуТаблицыРегламентныхЗаданий(НоваяСтрока, Задание);
					НоваяСтрока.Идентификатор = Строка(Задание.УникальныйИдентификатор);
					НоваяСтрока.Картинка = 2;
					КоличествоЗаданий = КоличествоЗаданий + 1;
				КонецЦикла;
			Иначе
				НоваяСтрока = Дерево.Строки.Добавить();
				ОбновитьСтрокуТаблицыРегламентныхЗаданий(НоваяСтрока, мсвЗаданияГруппы[0]);
				НоваяСтрока.Идентификатор = Строка(мсвЗаданияГруппы[0].УникальныйИдентификатор);
				НоваяСтрока.Картинка = 2;
				КоличествоЗаданий = КоличествоЗаданий + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Теперь перенесем сформированное дерево в форму...
		СейчасНаФорме = ТаблицаРегламентныеЗадания.ПолучитьЭлементы();
		ИндексПервогоУровня = 0;
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			ЭтоГруппа = (СтрокаДерева.Идентификатор = ПустойИдентификатор);
			Если ЭтоГруппа Тогда
				Если ИндексПервогоУровня >= СейчасНаФорме.Количество() Или СейчасНаФорме.Получить(ИндексПервогоУровня).Наименование <> СтрокаДерева.Наименование Тогда
					Обновить = СейчасНаФорме.Вставить(ИндексПервогоУровня);
					Обновить.Наименование = СтрокаДерева.Наименование;
					Обновить.Идентификатор = СтрокаДерева.Идентификатор;
				Иначе
					Обновить = СейчасНаФорме.Получить(ИндексПервогоУровня);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Обновить, СтрокаДерева);
				ИндексПервогоУровня = ИндексПервогоУровня + 1;
				ИндексВторогоУровня = 0;
				
				Для Каждого СтрокаДереваВторогоУровня Из СтрокаДерева.Строки Цикл
					СейчасНаФормеВторогоУровня = Обновить.ПолучитьЭлементы();
					Если ИндексВторогоУровня >= СейчасНаФормеВторогоУровня.Количество() Или СейчасНаФормеВторогоУровня.Получить(ИндексВторогоУровня).Идентификатор <> СтрокаДереваВторогоУровня.Идентификатор Тогда
						ОбновитьСтрокуВторогоУровня = СейчасНаФормеВторогоУровня.Вставить(ИндексВторогоУровня);
						ОбновитьСтрокуВторогоУровня.Идентификатор = СтрокаДереваВторогоУровня.Идентификатор;
					Иначе
						ОбновитьСтрокуВторогоУровня = СейчасНаФормеВторогоУровня.Получить(ИндексВторогоУровня);
					КонецЕсли;
					ИндексВторогоУровня = ИндексВторогоУровня + 1;
					ЗаполнитьЗначенияСвойств(ОбновитьСтрокуВторогоУровня, СтрокаДереваВторогоУровня);
				КонецЦикла;
				Пока ИндексВторогоУровня < СейчасНаФормеВторогоУровня.Количество() Цикл
					СейчасНаФормеВторогоУровня.Удалить(ИндексВторогоУровня);
				КонецЦикла;
			Иначе
				Если ИндексПервогоУровня >= СейчасНаФорме.Количество() Или СейчасНаФорме.Получить(ИндексПервогоУровня).Идентификатор <> СтрокаДерева.Идентификатор Тогда
					Обновить = СейчасНаФорме.Вставить(ИндексПервогоУровня);
					Обновить.Идентификатор = СтрокаДерева.Идентификатор;
				Иначе
					Обновить = СейчасНаФорме.Получить(ИндексПервогоУровня);
				КонецЕсли;
				ИндексПервогоУровня = ИндексПервогоУровня + 1;
				ЗаполнитьЗначенияСвойств(Обновить, СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
		Пока ИндексПервогоУровня < СейчасНаФорме.Количество() Цикл
			СейчасНаФорме.Удалить(ИндексПервогоУровня);
		КонецЦикла;
		
		// Обновлять количество заданий в заголовке будем только при полном перестроении дерева.
		// При обновлении одного регламентного задания данная операция не требуется.
		ПозицияСкобки = Найти(Элементы.РегламентныеЗадания.Заголовок, " (");
		Если ПозицияСкобки > 0 Тогда
			Элементы.РегламентныеЗадания.Заголовок = Лев(Элементы.РегламентныеЗадания.Заголовок, ПозицияСкобки - 1);
		КонецЕсли;
		ЭлементовВСписке = КоличествоЗаданий;
		Если ЭлементовВСписке > 0 Тогда
			Элементы.РегламентныеЗадания.Заголовок = Элементы.РегламентныеЗадания.Заголовок + " (" + Формат(ЭлементовВСписке, "ЧГ=") + ")";
		КонецЕсли;
		
	Иначе
		
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторРегламентногоЗадания));
		
		Строки = НайтиСтрокуПоОтборуВДеревеФормы(ТаблицаРегламентныеЗадания, Новый Структура("Идентификатор", ИдентификаторРегламентногоЗадания));
		
		Если Задание <> Неопределено И Строки.Количество() > 0 Тогда
			НайденнаяСтрока = ТаблицаРегламентныеЗадания.НайтиПоИдентификатору(Строки[0][0]);
			ОбновитьСтрокуТаблицыРегламентныхЗаданий(НайденнаяСтрока, Задание);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуТаблицыРегламентныхЗаданий(Строка, Задание);
	
	ЗаполнитьЗначенияСвойств(Строка, Задание);
	
	// Уточнение наименования
	Строка.Наименование = РегламентныеЗаданияСлужебный.ПредставлениеРегламентногоЗадания(Задание);
	
	// Установка Даты завершения и Состояния завершения по последней фоновой процедуре
	СвойстваПоследнегоФоновогоЗадания = РегламентныеЗаданияСлужебный.ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
	
	Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда
		Строка.ДатаОкончания       = ТекстНеОпределено;
		Строка.СостояниеВыполнения = ТекстНеОпределено;
	Иначе
		Строка.ДатаОкончания       = ?(ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.Конец),
		                               СвойстваПоследнегоФоновогоЗадания.Конец,
		                               "<>");
		Строка.СостояниеВыполнения = СвойстваПоследнегоФоновогоЗадания.Состояние;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуФоновыхЗаданий()
	
	// 1. Подготовка отбора.
	Отбор = Новый Структура;
	
	// 1.1. Добавление отбора по состояниям.
	МассивСостояний = Новый Массив;
	
	Если ОтборПоСостояниюАктивно Тогда 
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.Активно);
	КонецЕсли;
	
	Если ОтборПоСостояниюЗавершено Тогда 
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.Завершено);
	КонецЕсли;
	
	Если ОтборПоСостояниюЗавершеноАварийно Тогда 
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
	КонецЕсли;
	
	Если ОтборПоСостояниюОтменено Тогда 
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.Отменено);
	КонецЕсли;
	
	Если МассивСостояний.Количество() <> 4 Тогда
		Если МассивСостояний.Количество() = 1 Тогда
			Отбор.Вставить("Состояние", МассивСостояний[0]);
		Иначе
			Отбор.Вставить("Состояние", МассивСостояний);
		КонецЕсли;
	КонецЕсли;
	
	// 1.2. Добавление отбора по регламентному заданию.
	Если ОтбиратьПоРегламентномуЗаданию Тогда
		Отбор.Вставить(
				"ИдентификаторРегламентногоЗадания",
				?(РегламентноеЗаданиеДляОтбораИдентификатор = ПустойИдентификатор,
				"",
				РегламентноеЗаданиеДляОтбораИдентификатор));
	КонецЕсли;
	
	// 1.3. Добавление отбора по периоду.
	Если ВидОтбораПоПериоду <> 0 Тогда
		ОбновитьАвтоматическийПериод(ЭтаФорма, ТекущаяДатаСеанса());
		Отбор.Вставить("Начало", ОтборПериодС);
		Отбор.Вставить("Конец",  ОтборПериодПо);
	КонецЕсли;
	
	// 2. Обновление списка фоновых заданий.
	Таблица = ТаблицаФоновыеЗадания;
	
	ТекущаяТаблица = РегламентныеЗаданияСлужебный.ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор);
	
	Индекс = 0;
	Для Каждого Задание ИЗ ТекущаяТаблица Цикл
		
		Если Индекс >= Таблица.Количество()
		 ИЛИ Таблица[Индекс].Идентификатор <> Задание.Идентификатор Тогда
			// Вставка нового задания.
			Обновляемое = Таблица.Вставить(Индекс);
			// Установка уникального идентификатора.
			Обновляемое.Идентификатор = Задание.Идентификатор;
		Иначе
			Обновляемое = Таблица[Индекс];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Обновляемое, Задание);
		
		// Установка наименования регламентного задания из коллекции ТаблицаРегламентныеЗадания.
		Если ЗначениеЗаполнено(Обновляемое.ИдентификаторРегламентногоЗадания) Тогда
			
			Обновляемое.ИдентификаторРегламентногоЗадания
				= Обновляемое.ИдентификаторРегламентногоЗадания;
			
			Дерево = РеквизитФормыВЗначение("ТаблицаРегламентныеЗадания", Тип("ДеревоЗначений"));
			Строки = Дерево.Строки.НайтиСтроки(Новый Структура("Идентификатор", Обновляемое.ИдентификаторРегламентногоЗадания), Истина);
			
			Обновляемое.НаименованиеРегламентногоЗадания
				= ?(Строки.Количество() = 0, НСтр("ru = '<не найдено>'"), Строки[0].Наименование);
		Иначе
			Обновляемое.НаименованиеРегламентногоЗадания  = ТекстНеОпределено;
			Обновляемое.ИдентификаторРегламентногоЗадания = ТекстНеОпределено;
		КонецЕсли;
		
		// Получение информации об ошибках.
		Обновляемое.СообщенияПользователюИОписаниеИнформацииОбОшибке 
			= РегламентныеЗаданияСлужебный.СообщенияИОписанияОшибокФоновогоЗадания(
				Обновляемое.Идентификатор, Задание);
		
		// Увеличение индекса
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// Удаление лишних строк.
	Пока Индекс < Таблица.Количество() Цикл
		Таблица.Удалить(Таблица.Количество()-1);
	КонецЦикла;
	КоличествоФоновыхЗаданийВТаблице = Таблица.Количество();
	
	Элементы.ТаблицаФоновыеЗадания.Обновить();
	
	ПозицияСкобки = Найти(Элементы.ФоновыеЗадания.Заголовок, " (");
	Если ПозицияСкобки > 0 Тогда
		Элементы.ФоновыеЗадания.Заголовок = Лев(Элементы.ФоновыеЗадания.Заголовок, ПозицияСкобки - 1);
	КонецЕсли;
	ЭлементовВСписке = ТаблицаФоновыеЗадания.Количество();
	Если ЭлементовВСписке > 0 Тогда
		Элементы.ФоновыеЗадания.Заголовок = Элементы.ФоновыеЗадания.Заголовок + " (" + Формат(ЭлементовВСписке, "ЧГ=") + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьАвтоматическийПериод(Форма, ТекущаяДатаСеанса)
	
	Если Форма.ВидОтбораПоПериоду = 1 Тогда
		Форма.ОтборПериодС  = НачалоДня(ТекущаяДатаСеанса) - 3*3600;
		Форма.ОтборПериодПо = НачалоДня(ТекущаяДатаСеанса) + 9*3600;
		
	ИначеЕсли Форма.ВидОтбораПоПериоду = 2 Тогда
		Форма.ОтборПериодС  = НачалоДня(ТекущаяДатаСеанса) - 24*3600;
		Форма.ОтборПериодПо = КонецДня(Форма.ОтборПериодС);
		
	ИначеЕсли Форма.ВидОтбораПоПериоду = 3 Тогда
		Форма.ОтборПериодС  = НачалоДня(ТекущаяДатаСеанса);
		Форма.ОтборПериодПо = КонецДня(Форма.ОтборПериодС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеРегламентногоЗадания(Включено)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки Цикл
		ТекущиеДанные = ТаблицаРегламентныеЗадания.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Тогда
			Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(ТекущиеДанные.Идентификатор);
			Если Задание.Использование <> Включено Тогда
				Задание.Использование = Включено;
				Задание.Записать();
				ТекущиеДанные.Использование = Включено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// <Ищет строки по заданным отборам>
//
// Параметры
//  <Дерево>  - <ДанныеФормыДерево> - <Ссылка на строку дерева, либо на реквизит формы ДеревоЗначений>
//  <ИскомаяСтрока>  - <Массив.Структура> - <Массив, где каждый элемент - это условие одного отбора>
//                 <Отбор - Структура, где Ключ = колонка в дереве, Значение - условие поиска>
//
// Возвращаемое значение:
//   <Массив.Массив>   - <Двумерный массив. Элемент верхнего уровня - массив из найденных подстрок>
//
Функция НайтиСтрокуПоОтборуВДеревеФормы(Дерево, Отбор) Экспорт
	
	ТипПоиска = ТипЗнч(Отбор);
	Если ТипПоиска = Тип("Массив") Тогда
		МассивПоиска = Отбор;
		
	ИначеЕсли ТипПоиска = Тип("Структура") Тогда
		МассивПоиска = Новый Массив;
		МассивПоиска.Добавить(Отбор);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Массив = РекурсивнаяФункцияДФ(Дерево, МассивПоиска, МассивПоиска.Количество());
	
	Возврат Массив;
	
КонецФункции // НайтиСтрокуПоОтборуВДеревеФормы()

&НаСервереБезКонтекста
Функция РекурсивнаяФункцияДФ(Дерево, МассивПоиска, КоличествоВМассивеПоиска)
	
	// Массив строк. Элементы - массив строк по каждому параметру
	НайденныеСтроки = Новый Массив(КоличествоВМассивеПоиска, 1);
	
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	
	//Выбираем строку дерева
	Для Каждого Строка Из ЭлементыДерева Цикл
		
		//Выбираем элемент массива типа структура для сравнения
		r = 0;
		Пока r < КоличествоВМассивеПоиска Цикл
			
			//Выбираем значения из структуры поиска и сравниваем их
			СоответствуетУсловию = Истина;
			Для Каждого КлючЗн Из МассивПоиска[r] Цикл
				Если Строка[КлючЗн.Ключ] <> КлючЗн.Значение Тогда
					СоответствуетУсловию = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			//Заносим найденную строку в массив найденных строк.
			Если СоответствуетУсловию Тогда
				НайденнаяСтрока = Строка.ПолучитьИдентификатор();
				НайденныеСтроки[r][0] = НайденнаяСтрока;
			КонецЕсли;
			r = r + 1;
		КонецЦикла;
		
		//Идём дальше по дереву:
		МассивРекурсивно = РекурсивнаяФункцияДФ(Строка, МассивПоиска, КоличествоВМассивеПоиска);
		
		i = 0;
		Пока i < МассивРекурсивно.Количество() Цикл
			Если МассивРекурсивно[i].Количество() > 0 И МассивРекурсивно[i][0] <> Неопределено Тогда
				j = 0;
				Пока j < МассивРекурсивно[i].Количество() Цикл
					Если НайденныеСтроки[i][0] = Неопределено Тогда
						НайденныеСтроки[i][0] = МассивРекурсивно[i][j];
					Иначе
						НайденныеСтроки[i].Добавить(МассивРекурсивно[i][j]);
					КонецЕсли;
					j = j + 1;
				КонецЦикла;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции // РекурсивнаяФункцияДФ()

&НаКлиенте
Процедура ПриЗакрытии()
	СохранитьПараметрыПодбора();
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыПодбора()
	Настройки = Новый Структура("РежимПросмотра", СтрЗаменить(Строка(ЭтаФорма.Элементы["ТаблицаРегламентныеЗадания"].Отображение), " ", ""));
	НаборЗаписей = РегистрыСведений.ДопНастройкиФорм.СоздатьНаборЗаписей();
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.ОбъектМД = "РегламентныеИФоновыеЗадания";
	НоваяЗапись.Форма = ЭтаФорма.ИмяФормы;
	НоваяЗапись.Настройка = Новый ХранилищеЗначения(Настройки);
	НаборЗаписей.Записать();
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкуПодбора()
	Возврат ПодборНоменклатурыСервер.ПолучитьНастройкуПодбора("РегламентныеИФоновыеЗадания", ЭтаФорма.ИмяФормы);
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНастройкиОтображения()
	
	Настройка = ПолучитьНастройкуПодбора();
	
	Если Настройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = Неопределено;
	Настройка.Свойство("РежимПросмотра", Настройки);
	Если Настройки = Неопределено Тогда
		Настройки = "Дерево";
	КонецЕсли;
	ЭтаФорма.Элементы["ТаблицаРегламентныеЗадания"].Отображение = ОтображениеТаблицы[Настройки];
	ЭтаФорма.Элементы["ТаблицаРегламентныеЗадания" + Настройки].Пометка = Истина;
	
КонецПроцедуры
