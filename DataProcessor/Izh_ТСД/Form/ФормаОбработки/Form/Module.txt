//////////////////////////////////
// Параметры : 	ВнешнийВызов - Тип Булево , показывает что вызывается из другой формы
//			   	ВидДействия - Тип Строка ; Допустимые значения:"Приемка","Отгрузка","Инвентаризация"
//			   	АдресХранилища - Тип Строка, Адрес, гле хранится входящая ТЗ : колонки
//				СтруктураПараметров - Тип Структура, хранятся передаваемые параметры.
//				СтруктураПараметров.ОтборКонтрагент - Тип СправочникССылка.Контрагенты ;  отбо по контрагенту при приемке 
//             	СтруктураПараметров.ТипДействия - Тип Строка ;  допустимые значения "ЗагрузкаВТСД" ,"ВыгрузкаИзТСД"  при инвентаризации
//				СтруктураПараметров.УсловиеОтбора - Тип СписокЗначений ; пока сделал для Инвентаризационной описи, может где еще пригодится ; при инвентаризации

//////////////////////////////////////
////////////// ВАЖНО!!!!! Убрать обрезание до 10 символов второго поля, поставли временно как заглушку

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// ОБРАБОТЧИКИ ФОРМЫ ОБЩИЕ, ОБЩИЕ ПРОЦЕДУРЫ//////////////////////

&НаСервереБезКонтекста
Процедура ДобавитьОтборВСКД(НаборДаннных,ИмяЭлемента,Использование=Ложь)
	Отбор = НаборДаннных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Использование;
	Если ИмяЭлемента <> "Дата" Тогда   // решил дату не выносить в отбор
		Отбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);	
	КонецЕсли;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
КонецПроцедуры

// поля в СКД
&НаСервереБезКонтекста
Процедура ДобавитьПолеВНаборДанных(НаборДанных,ИмяЭлемента,Заголовок)
	Поле = НаборДанных.поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.Поле = ИмяЭлемента;
	Поле.ПутьКДанным = ИмяЭлемента;
	Поле.Заголовок = Заголовок;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВВыборКолонок(НаборДанных,ИмяЭлемента,Заголовок,Использование=Истина)
	ВыбранноеПоле = НаборДанных.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Использование;
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	ВыбранноеПоле.Заголовок = Заголовок;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматЧисла(ВходящееЧисло)
	Возврат Формат(ВходящееЧисло,"ЧГ=0");	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьТекстБезРазделителя(ВходящийТекст)
	Возврат СокрЛП(СтрЗаменить(ВходящийТекст,","," "));	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Если Параметры.ВнешнийВызов Тогда
	//	Если Параметры.ВидДействия = "Инвентаризация" Тогда
	//		АдресХранилищаТовары = Параметры.АдресХранилища;
	//		
	//		
	//		
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	Элементы.КомпоновщикНастроекНастройкиОтбор_ТолькоОстатки.Пометка = Ложь;
	ТолькоОстатки = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикКнопки(Команда)
	Для Каждого ЭлементКнопка из Элементы.ГруппаКнопок.ПодчиненныеЭлементы Цикл
		Если ЭлементКнопка.Имя = Команда.Имя Тогда
			ЭлементКнопка.ЦветФона = WebЦвета.ЗеленаяЛужайка;	
			Элементы["Группа"+ЭлементКнопка.Имя].Видимость = Истина;
			Если ЭлементКнопка.Имя = "Отгрузка" Тогда
				ИнициализироватьКомпоновщикСКД_Отгрузка();
			ИначеЕсли ЭлементКнопка.Имя = "Инвентаризация" Тогда
				ИнициализироватьКомпоновщикСКД_Инвентарзация();
			КонецЕсли;
			
		Иначе
			ЭлементКнопка.ЦветФона = Новый Цвет();
			Элементы["Группа"+ЭлементКнопка.Имя].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСКД_Инвентаризация(ВходящийОтбор)
	Настройки = КомпоновщикНастроек_Инвентаризация.Настройки;
	ЭлементГруппаОтбор = Настройки.Отбор.Элементы[0];
	ЭлементГруппаОтбор.ПравоеЗначение = ВходящийОтбор;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.ВнешнийВызов Тогда
		ПодменаКнопки = Новый Структура("Имя",Параметры.ВидДействия);
		Для Каждого ЭлементКнопка из Элементы.ГруппаКнопок.ПодчиненныеЭлементы Цикл
			ЭлементКнопка.Видимость = ЭлементКнопка.Имя = Параметры.ВидДействия 
		КонецЦикла;
		Если Параметры.ВидДействия = "Инвентаризация" Тогда
			Отказ = Истина;
			
			Если ТипЗнч(Параметры.СтруктураПараметров)=Тип("Структура") И Параметры.СтруктураПараметров.Свойство("ТипДействия") И Параметры.СтруктураПараметров.ТипДействия="ЗагрузкаВТСД" Тогда
				ИнициализироватьКомпоновщикСКД_Инвентарзация();
				Если Параметры.СтруктураПараметров.Свойство("УсловиеОтбора") Тогда
					УстановитьПараметрыСКД_Инвентаризация(Параметры.СтруктураПараметров.УсловиеОтбора);
				КонецЕсли;
				Если Параметры.СтруктураПараметров.Свойство("ПоОстаткам") Тогда
					Элементы.КомпоновщикНастроекНастройкиОтбор_ТолькоОстатки.Пометка =Параметры.СтруктураПараметров.ПоОстаткам;
				КонецЕсли;
				ЗагрузитьВТерминал_Инвентаризация();
			ИначеЕсли ТипЗнч(Параметры.СтруктураПараметров)=Тип("Структура") И Параметры.СтруктураПараметров.Свойство("ТипДействия") И Параметры.СтруктураПараметров.ТипДействия="ВыгрузкаИзТСД" Тогда
				АдресХранилищаТекста = Неопределено;
				Если МенеджерОборудованияКлиент.ПолучитьФАйлИзДокумента(УникальныйИдентификатор, АдресХранилищаТекста,0) Тогда
					Инвентаризация_ОбработатьФайл(АдресХранилищаТекста);
				Иначе	
					Возврат;
				КонецЕсли;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внешний вызов с не предусмотренным параметром ");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ПодменаКнопки = Новый Структура("Имя","Приемка");
	КонецЕсли;
	Элементы.ВыполнитьДействие.Заголовок = ?(Параметры.ВнешнийВызов,"Закрыть (с количество)","Сформировать Акты приемки");
	Элементы.ЗагрузкаКонтрагентов.Видимость = НЕ Параметры.ВнешнийВызов;
	ОбработчикКнопки(ПодменаКнопки);
КонецПроцедуры

//Шилов М.В. 25.02.14 Выгрузка по правилам для 8-,12-,13-ти значных ШК
&НаСервере
Функция ПолучитьШКДляВыгрузки(ИсходныйШК)
	ШКEAN8=Прав(ИсходныйШК,8);
	ШК12=Прав(ИсходныйШК,12);
	
	Если "00000"+ШКEAN8 = ИсходныйШК Тогда
		Возврат ШКEAN8;
	ИначеЕсли "0"+ШК12 = ИсходныйШК Тогда
		Возврат ШК12;
	Иначе 
		Возврат ИсходныйШК;
	КонецЕсли;
КонецФункции
//Шилов М.В. 25.02.14

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////П Р И Е М К А ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция Приемка_СформироватьФайлВыгрузкиНаСервере()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИсточникДанных.НомерСтроки КАК НомерСтроки,
	|	ИсточникДанных.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ втКонтрагентов
	|ИЗ
	|	&ВходящаяТЗ КАК ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагента.Номенклатура,
	|	НоменклатураКонтрагента.Контрагент,
	|	втКонтрагентов.НомерСтроки
	|ПОМЕСТИТЬ НоменклатураКонтрагентов
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтрагентов КАК втКонтрагентов
	|		ПО НоменклатураКонтрагента.Контрагент = втКонтрагентов.Контрагент
	|ГДЕ
	|	НоменклатураКонтрагента.Контрагент В
	|			(ВЫБРАТЬ
	|				А.Контрагент
	|			ИЗ
	|				втКонтрагентов КАК А)
	|	И НЕ НоменклатураКонтрагента.Номенклатура.ПростойНабор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	НоменклатураКонтрагентов.Контрагент КАК Контрагент,
	//|	НоменклатураКонтрагентов.Номенклатура.Наименование КАК Номенклатура,
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентов.Контрагент.Код КАК КодКонтрагента,
	|	НоменклатураКонтрагентов.Номенклатура.Код КАК НоменклатураКод,
	|	НоменклатураПолная.Код КАК ШтрихКод
	|ИЗ
	|	НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураПолная
	|		ПО НоменклатураКонтрагентов.Номенклатура = НоменклатураПолная.Родитель
	|			
	|ГДЕ
	|	НЕ НоменклатураПолная.Код ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(КодКонтрагента),
	|	МАКСИМУМ(НоменклатураКод)
	|ПО
	|	НомерСтроки,
	|	Контрагент,
	|	Номенклатура");
	
	Запрос.УстановитьПараметр("ВходящаяТЗ",ОбъектОбработка.СписокКонтрагентов.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат "";
	КонецЕсли;
	ТекстФайлика = "";
	ВыборкаПоНомеру = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНомеру.Следующий() Цикл
		НомерСтроки = ВыборкаПоНомеру.НомерСтроки;
		ВыборкаПоКонтрагенту = ВыборкаПоНомеру.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			ТекстФАйлика = ТекстФайлика + ?(ПустаяСтрока(ТекстФайлика),"",Символы.ПС);
			ТекстФАйлика = ТекстФАйлика + ФорматЧисла(НомерСтроки)+",,"+Прав(ВернутьТекстБезРазделителя(СокрЛП(ВыборкаПоКонтрагенту.Контрагент))+"~"+ФорматЧисла(ВыборкаПоКонтрагенту.КодКонтрагента)+"~",67)+",,"; 	
			ВыборкаПоНоменклатуре = ВыборкаПоКонтрагенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНоменклатуре.Следующий() Цикл
				ТекстФАйлика = ТекстФайлика + ?(ПустаяСтрока(ТекстФайлика),"",Символы.ПС);
				//ТекстФАйлика = ТекстФайлика + Символы.ПС;
				ТекстФАйлика = ТекстФАйлика + Лев(ФорматЧисла(НомерСтроки)+" "+СокрЛП(ВыборкаПоНоменклатуре.НоменклатураКод),16)+",,"+Лев(ВернутьТекстБезРазделителя(ВыборкаПоНоменклатуре.Номенклатура),67)+",,"; 	
				ВыборкаПоШтрихКодам = ВыборкаПоНоменклатуре.Выбрать();
				Пока ВыборкаПоШтрихКодам.Следующий() Цикл
					ТекстФАйлика = ТекстФайлика + ?(ПустаяСтрока(ТекстФайлика),"",Символы.ПС);
					//ТекстФАйлика = ТекстФайлика + Символы.ПС;
					//Шилов М.В. 25.02.14 обработка 8-,12-,13-ти значных ШК
					ТекстФАйлика = ТекстФАйлика + Лев(ФорматЧисла(НомерСтроки)+ПолучитьШКДляВыгрузки(СокрЛП(ВыборкаПоШтрихКодам.ШтрихКод)),16)+","+Лев(ФорматЧисла(НомерСтроки)+" "+СокрЛП(ВыборкаПоНоменклатуре.НоменклатураКод),12)+",,,"; 	
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Возврат ТекстФайлика;
КонецФункции

&НаКлиенте
Процедура Приемка_ЗагрузитьВТерминал(Команда)
	ТекстФайлика = Приемка_СформироватьФайлВыгрузкиНаСервере();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла,КодировкаТекста.ANSI);
	МенеджерОборудованияКлиент.ЗагрузитьФайлВБазу(Новый УникальныйИдентификатор, ИмяВременногоФайла,1);
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентов1ВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	Контрагент = Элемент.ТекущаяСтрока;
	Строки = Объект.СписокКонтрагентов.НайтиСтроки(Новый Структура("Контрагент",Контрагент)); 
	Если Строки.Количество()=0 Тогда
		стр = Объект.СписокКонтрагентов.Добавить();
		стр.Контрагент = Контрагент;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОткрытьПодбор(Команда=Неопределено)
	Элементы.ГруппаСписокКонтрагентов.Видимость = Не Элементы.ГруппаСписокКонтрагентов.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Элементы.ГруппаСписокКонтрагентов.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанных_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанных_ПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
//считаем что файлик имеет структуру для приемки
Процедура Приемка_ОбработатьТекстНаСервере(АдресВХранилище)
	тзТоваров = Новый ТаблицаЗначений;
	тзТоваров.Колонки.Добавить("Контрагент");
	тзТоваров.Колонки.Добавить("Номенклатура");
	тзТоваров.Колонки.Добавить("Количество");
	тзТоваров.Колонки.Добавить("Документ");
	ТекстПарсинга = ПолучитьИзВременногоХранилища(АдресВХранилище);	
	ТекКонтрагент = Неопределено;
	Для ъ=1 По СтрЧислоСтрок(ТекстПарсинга) Цикл
		СтрокаПарсинга = СтрПолучитьСтроку(ТекстПарсинга,ъ);
		МногоСтрочная = СтрЗаменить(СтрокаПарсинга,",",Символы.ПС);
		Строка1 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,1));
		Строка2 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,2));
		Строка3 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,3));
		Строка4 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,4));
		Строка5 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,5));
		Если СтрЧислоВхождений(Строка3,"~")=2 И СтрЧислоВхождений(Строка1," ")=0 Тогда // предполагаем что это строка контрагента
			ПарсингСтрокиКонтрагента = СтрЗаменить(Строка3,"~",Символы.ПС);
			Попытка 
				КодКонтрагента = СтрПолучитьСтроку(ПарсингСтрокиКонтрагента,2);
				ТекКонтрагент = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
				Продолжить;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Возникла ошибка при поиске кода контрагента в строке :
				|"+СтрокаПарсинга);
				Возврат;
			КонецПопытки;
		КонецЕсли;
		Если ПустаяСтрока(Строка4) Тогда Продолжить; КонецЕсли;  // нам не нужны позиции с 0 количеством
		ПарсингСтрокиСНоменклатурой = СтрЗаменить(Строка1," ",Символы.ПС);
		Попытка 
			КодНоменклатура = СтрПолучитьСтроку(ПарсингСтрокиСНоменклатурой,2);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Возникла ошибка при поиске кода номенклатуры в строке :
			|"+СтрокаПарсинга);
			Возврат;
		КонецПопытки;
		ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(КодНоменклатура);
		Если ТекНоменклатура.Пустая() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена номенклатура с кодом "+КодНоменклатура);
			Продолжить; 
		КонецЕсли;	
		НоваяСтрока = тзТоваров.Добавить();
		НоваяСтрока.Контрагент = ТекКонтрагент;
		НоваяСтрока.Номенклатура = ТекНоменклатура;
		НоваяСтрока.Количество = Число(Строка4);
		НоваяСтрока.Документ = "Документ №"+Строка5;
	КонецЦикла;
	Если Параметры.ВнешнийВызов Тогда // отберем только нужного контрагента 
		Если ТипЗнч(Параметры.СтруктураПараметров) = Тип("Структура") И Параметры.СтруктураПараметров.Свойство("ОтборКонтрагент") Тогда
			МассивСтрокКонтрагента = тзТоваров.НайтиСтроки(Новый Структура("Контрагент",Параметры.СтруктураПараметров.ОтборКонтрагент));	
			тзБуфер = тзТоваров.Скопировать(МассивСтрокКонтрагента,);
			тзТоваров = тзБуфер.Скопировать(,);
		КонецЕсли;
	КонецЕсли;
	
	тзКонтрагентов = тзТоваров.Скопировать(,"Контрагент,Документ");
	тзКонтрагентов.Свернуть("Контрагент,Документ",);
	тзКонтрагентов.Сортировать("Контрагент,Документ");
	дзДеревоКонтрагентов = Новый ДеревоЗначений;
	дзДеревоКонтрагентов.Колонки.Добавить("Пометка");
	дзДеревоКонтрагентов.Колонки.Добавить("Контрагент");
	дзДеревоКонтрагентов.Колонки.Добавить("Документ");
	
	ТекКонтрагент = Неопределено;
	Для Каждого СтрокаТЗ из тзКонтрагентов Цикл
		Если ТекКонтрагент<>СтрокаТЗ.Контрагент Тогда
			ТекКонтрагент = СтрокаТЗ.Контрагент;
			СтрокаУзел = дзДеревоКонтрагентов.Строки.Добавить();
			СтрокаУзел.Контрагент = СтрокаТЗ.Контрагент;
		КонецЕсли;
		СтрокаПодчиненная = СтрокаУзел.Строки.Добавить();
		СтрокаПодчиненная.Контрагент = СтрокаТЗ.Контрагент;
		СтрокаПодчиненная.Пометка = Ложь;
		СтрокаПодчиненная.Документ = СтрокаТЗ.Документ;
	КонецЦикла;
	ЗначениеВРеквизитФормы(дзДеревоКонтрагентов,"КонтрагентыВыгрузкаИзТСД");
	ЗагрузкаТоваровИзТСД.Загрузить(тзТоваров);
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ВыгрузитьИзТерминала(Команда)
	АдресХранилищаТекста = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ПолучитьФайлИзБазы(УникальныйИдентификатор, АдресХранилищаТекста,1) Тогда
		Возврат;
	КонецЕсли;
	Приемка_ОбработатьТекстНаСервере(АдресХранилищаТекста);
	ЭтаФорма.ОбновитьОтображениеДанных();
	Элементы.ЗагрузкаТоваровИзТСД.Видимость = ЗагрузкаТоваровИзТСД.Количество()>0;
	КонтрагентыВыгрузкаИзТСДПриАктивизацииСтроки();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыгрузкаИзТСДПриАктивизацииСтроки(Элемент=Неопределено)
	Если Элементы.КонтрагентыВыгрузкаИзТСД.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	УстановитьОтборПоКонтрагенту(Элементы.КонтрагентыВыгрузкаИзТСД.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоКонтрагенту(ТекДанные)
	Элементы.ЗагрузкаТоваровИзТСД.ОтборСтрок= Новый ФиксированнаяСтруктура("Контрагент,Документ",ТекДанные.Контрагент,ТекДанные.Документ);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТЗВХранилище()
	ДеревоЗначений = РеквизитФормыВЗначение("КонтрагентыВыгрузкаИзТСД");
	МассивСтрокДЗ = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Пометка",Истина),Истина);
	Если МассивСтрокДЗ.Количество()<>1 Тогда
		Возврат;
	КонецЕсли;
	МассивСтрок = ЗагрузкаТоваровИзТСД.НайтиСтроки(Новый Структура("Контрагент,Документ",МассивСтрокДЗ[0].Контрагент,МассивСтрокДЗ[0].Документ));
	ПоместитьВоВременноеХранилище(ЗагрузкаТоваровИзТСД.Выгрузить(МассивСтрок,),Параметры.АдресХранилища);
КонецПроцедуры

&НаСервере
Процедура СформироватьАктыПриемки()
	ДеревоЗначений = РеквизитФормыВЗначение("КонтрагентыВыгрузкаИзТСД");
	МассивСтрок = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Пометка",Истина),Истина);
	Если МассивСтрок.Количество()= 0 Тогда Возврат; КонецЕсли;
	ЕстьОшибка = Ложь;
	МассивДокументов = Новый Массив;
	НачатьТранзакцию();
	Для Каждого СтрокаДерева из МассивСтрок Цикл
		МассивСтрокТЧ = ЗагрузкаТоваровИзТСД.НайтиСтроки(Новый Структура("Контрагент,Документ",СтрокаДерева.Контрагент,СтрокаДерева.Документ));
		Если МассивСтрокТЧ.Количество()=0 Тогда Продолжить; КонецЕсли;
		Если МассивСтрокТЧ.Количество()=0 Тогда Продолжить; КонецЕсли;
		ДокОбъект = Документы.АктПриемки.СоздатьДокумент();
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.ИнициализироватьДокумент();
		ДокОбъект.Контрагент = СтрокаДерева.Контрагент;
		ДокОбъект.Грузоотправитель = СтрокаДерева.Контрагент;
		Для Каждого СтрокаМассиваТЧ из МассивСтрокТЧ Цикл
			НоваяСтрока = ДокОбъект.Состав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассиваТЧ);
			НоваяСтрока.Цена = Разработка_Ижтрейдинг_Сервер.ПолучитьЦенуНоменклатуры(ДокОбъект.Контрагент,НоваяСтрока.Номенклатура);
			СтруктураДанных = Новый Структура;    	
			СтруктураДанных.Вставить("Номенклатура",	 НоваяСтрока.Номенклатура);
			СтруктураДанных.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
			СтруктураДанных.Вставить("Коэффициент",НоваяСтрока.Коэффициент);
			СтруктураДанных.Вставить("СтавкаНДС", НоваяСтрока.Номенклатура);
			ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураДанных);
			НоваяСтрока.Ключ = Новый УникальныйИдентификатор;
			НоваяСтрока.КоличествоПоДокументу = НоваяСтрока.Количество;
			НоваяСтрока.СуммаПоДокументу = НоваяСтрока.Количество * НоваяСтрока.Цена;
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
		КонецЦикла;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			МассивДокументов.Добавить(ДокОбъект);
		Исключение
			ЕстьОшибка = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сохранить документ Акт приемки ("+ОписаниеОшибки()+")");
		КонецПопытки;
	КонецЦикла;
	Если ЕстьОшибка Тогда 
		ОтменитьТранзакцию();
		Возврат; 
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	Для Каждого СтрокаМассива из МассивДокументов Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сформирован "+СтрокаМассива.Ссылка,СтрокаМассива);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОбойтиДерево(УзелДерева=Неопределено)
	Если УзелДерева = Неопределено Тогда
		УзелДерева = КонтрагентыВыгрузкаИзТСД[0];
	КонецЕсли;
	Если УзелДерева.получитьЭлементы().Количество()=0 Тогда 
	КонецЕсли;	
	
	
	
КонецФункции	


&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Параметры.ВнешнийВызов Тогда // обрабатывается, когда вызываем модально из приходной накладной
		ЗаписатьТЗВХранилище();
		Закрыть(КодВозвратаДиалога.ОК);
	Иначе  // тут обрабатываем обычный
		СформироватьАктыПриемки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыгрузкаИзТСДПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элементы.КонтрагентыВыгрузкаИзТСД.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Отказ = Истина; Возврат; КонецЕсли;
	Если ТекДанные.ПолучитьРодителя()=Неопределено Тогда Отказ = Истина; Возврат; КонецЕсли;
	// далее написать условия блокирования при вызове из документа, чтоб блокировались "лишние" контрагенты
	Если Параметры.ВнешнийВызов Тогда
		УзелДерева = ТекДанные.ПолучитьРодителя();
		Для Каждого строкаДерева из УзелДерева.ПолучитьЭлементы() Цикл
			строкаДерева.Пометка=Ложь;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////О Т Г Р У З К А //////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ИнициализироватьКомпоновщикСКД_Отгрузка()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СКД = ОбработкаОбъект.ПолучитьМакет("Отгрузка");
	Объект.АдресСКД_Отгрузка = ПоместитьВоВременноеХранилище(СКД,Новый УникальныйИдентификатор); 
	КомпоновщикНастроек_Отгрузки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Объект.АдресСКД_Отгрузка));
	КомпоновщикНастроек_Отгрузки.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
КонецПроцедуры

&НаСервере
Функция СформироватьФайлБазыНаСервере_Отгрузка()
	СКД = ПолучитьИзВременногоХранилища(Объект.АдресСКД_Отгрузка);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД,КомпоновщикНастроек_Отгрузки.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ТЗРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Запрос = Новый Запрос("
	|Выбрать
	|	ИсточникДанных.Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	&ТЗРезультат КАК ИсточникДанных
	|;
	|/////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Номенклатура.Наименование КАК Номенклатура,
	|	НоменклатураКонтрагентов.Номенклатура.Код КАК НоменклатураКод,
	|	НоменклатураПолная.Код КАК ШтрихКод
	|ИЗ
	|	ВТНоменклатура КАК НоменклатураКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (Выбрать 
	|								А.Ссылка как Номенклатура, 
	|								А.Родитель как Родитель, 
	|								А.Код как Код 
	|							ИЗ 
	|								Справочник.Номенклатура КАК А 
	|							ГДЕ А.Родитель В (Выбрать Б.Номенклатура из ВТНоменклатура КАК Б)
	|								 ) КАК НоменклатураПолная
	|		ПО НоменклатураКонтрагентов.Номенклатура = НоменклатураПолная.Родитель
	|			
	|ГДЕ
	|	НЕ НоменклатураПолная.Код ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураКонтрагентов.Номенклатура.Код");
	Запрос.УстановитьПараметр("ТЗРезультат",ТЗРезультат);
	//Запрос.УстановитьПараметр("ТипШтрихКода",Справочники.СлужебныеКоды.НайтиПоКоду("EAN13"));
	Результат = Запрос.Выполнить();
	ТекстФайл = "";
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		//Шилов М.В. 25.02.14 обработка 8-,12-,13-ти значных ШК
		ТекстФайл = ТекстФайл + ?(ПустаяСтрока(ТекстФайл),"",Символы.ПС)+ Лев(ПолучитьШКДляВыгрузки(СокрЛП(Выборка.ШтрихКод)),15)+","+СокрЛП(ЛЕВ(Выборка.НоменклатураКод,12))+","+Лев(ВернутьТекстБезРазделителя(СокрЛП(Выборка.Номенклатура)),68)+",,";	
	КонецЦикла;
	Возврат ТекстФайл;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьВТерминал_Отгрузка(Команда)
	ТекстФайлика = СформироватьФайлБазыНаСервере_Отгрузка();	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла,КодировкаТекста.ANSI);
	МенеджерОборудованияКлиент.ЗагрузитьФайлВБазу(Новый УникальныйИдентификатор, ИмяВременногоФайла,2,0);
КонецПроцедуры

&НаСервере
Процедура НахождениеРасхожденийНаСервере(НомерДокумента,ДокументЗаказ)
	//++Минин
	тзРеализация = Новый ТаблицаЗначений;
	тзРеализация.Колонки.Добавить("Номенклатура");
	тзРеализация.Колонки.Добавить("Количество");
	Для Каждого Стр Из ДокументЗаказ Цикл 
		тзСостав = Стр.Значение.Состав.Выгрузить(,"Номенклатура,Количество");
		Для каждого эл Из тзСостав Цикл
			Строка = тзРеализация.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,эл);
		КонецЦикла;
	КонецЦикла;
	//--Минин
	тзРеализация.Свернуть("Номенклатура","Количество");
	Для Каждого СтрокаДокумента из тзРеализация Цикл
		МассивСтрок = Отгрузка_тзТоварРасхождения.НайтиСтроки(Новый Структура("НомерДок,Номенклатура",НомерДокумента,СтрокаДокумента.Номенклатура));
		Если МассивСтрок.Количество()=0 Тогда // значит нет такой строки, добавляем
			НоваяСтрока = Отгрузка_тзТоварРасхождения.Добавить();
			НоваяСтрока.НомерДок = НомерДокумента;
			НоваяСтрока.Номенклатура = СтрокаДокумента.Номенклатура;
			НоваяСтрока.Количество = 0;
			НоваяСтрока.КоличествоВРасходнойНакладной = СтрокаДокумента.Количество;
		Иначе
			СтрокаТЗ = МассивСтрок[0];
			СтрокаТЗ.КоличествоВРасходнойНакладной = СтрокаДокумента.Количество;
		КонецЕсли;
	КонецЦикла;
	//++Минин
	Для Каждого СтрокаТЗ из Отгрузка_тзТоварРасхождения Цикл
		СтрокаТЗ.Расхождение = СтрокаТЗ.Количество - СтрокаТЗ.КоличествоВРасходнойНакладной;
	КонецЦикла;
	//--Минин
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_тзДокументыДокументЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПолучитьФорму("Обработка.Izh_ТСД.Форма.ФормаПодбора");
	Результат = ФормаВыбора.ОткрытьМодально();
	Если Результат = Неопределено Тогда Возврат; КонецЕсли;
	ТекСтрока = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	ОчистимДанныеЗаказа(ТекСтрока);
	ТекСтрока.ДокументЗаказ = Результат;
	НахождениеРасхожденийНаСервере(ТекСтрока.НомерДок,ТекСтрока.ДокументЗаказ);
	Приемка_ПриАктивизацииСтроки();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНоменклатуру(ВходящийШК)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура.Родитель КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код");
	Запрос.УстановитьПараметр("Код",ВходящийШК);
	Результат = Запрос.Выполнить();
	Выборка =Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Номенклатура;
КонецФункции

&НаСервере
Процедура Отгрузка_ОбработатьТекстНаСервере(АдресВХранилище)
	тзРезультат = ДанныеФормыВЗначение(Отгрузка_тзТоварРасхождения,Тип("ТаблицаЗначений"));
	тзРезультат.Очистить();
	ТекстПарсинга = ПолучитьИзВременногоХранилища(АдресВХранилище);	
	Для ъ=1 по СтрЧислоСтрок(ТекстПарсинга) Цикл
		Буфер = СтрПолучитьСтроку(ТекстПарсинга,ъ);
		Буфер = СтрЗаменить(Буфер,",",Символы.ПС);
		НоваяСтрока = тзРезультат.Добавить();
		НоваяСтрока.НомерДок = "Документ "+СтрПолучитьСтроку(Буфер,1);
		НоваяСтрока.Номенклатура = НайтиНоменклатуру(СтрПолучитьСтроку(Буфер,2));
		НоваяСтрока.Количество = Число(СтрПолучитьСтроку(Буфер,3));
		НоваяСтрока.Расхождение = 0;
	КонецЦикла;
	тзРезультат.Свернуть("НомерДок,Номенклатура","Количество,КоличествоВРасходнойНакладной,Расхождение");
	тзРезультат.Сортировать("НомерДок");
	тзДокументы = тзРезультат.Скопировать(,"НомерДок");
	тзДокументы.Свернуть("НомерДок");
	тзДокументы.Колонки.Добавить("ДокументЗаказ");
	ЗначениеВДанныеФормы(тзДокументы,Отгрузка_тзДокументы);
	ЗначениеВДанныеФормы(тзРезультат,Отгрузка_тзТоварРасхождения);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРасхождения(ТекДанные)
	Элементы.Отгрузка_тзТоварРасхожденияКоличествоВРасходнойНакладной.Видимость = ЗначениеЗаполнено(ТекДанные.ДокументЗаказ);
	Элементы.Отгрузка_тзТоварРасхожденияРасхождение.Видимость = ЗначениеЗаполнено(ТекДанные.ДокументЗаказ);
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ПриАктивизацииСтроки(Элемент=Неопределено)
	ТекДанные = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	УстановитьВидимостьРасхождения(ТекДанные);
	УстановитьОтборПоДокументу(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоДокументу(ТекДанные)
	Элементы.Отгрузка_тзТоварРасхождения.ОтборСтрок= Новый ФиксированнаяСтруктура("НомерДок",ТекДанные.НомерДок);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзТерминала_Отгрузка(Команда)
	АдресХранилищаТекста = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ПолучитьФАйлИзДокумента(УникальныйИдентификатор, АдресХранилищаТекста,0) Тогда
		Возврат;
	КонецЕсли;
	Отгрузка_ОбработатьТекстНаСервере(АдресХранилищаТекста);
	ЭтаФорма.ОбновитьОтображениеДанных();
	Элементы.Отгрузка_тзТоварРасхождения.Видимость = Отгрузка_тзТоварРасхождения.Количество()>0;
	Приемка_ПриАктивизацииСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ОчистимДанныеЗаказа(ТекСтрока)
	МассивСтрок = Отгрузка_тзТоварРасхождения.НайтиСтроки(Новый Структура("НомерДок",ТекСтрока.НомерДок));
	Для Каждого СтрокаТЧ из МассивСтрок Цикл
		СтрокаТЧ.КоличествоВРасходнойНакладной = 0;
	КонецЦикла;
	МассивСтрок = Отгрузка_тзТоварРасхождения.НайтиСтроки(Новый Структура("НомерДок,Количество",ТекСтрока.НомерДок,0));
	Для Каждого ЭлементаМассива из МассивСтрок Цикл
		Отгрузка_тзТоварРасхождения.Удалить(ЭлементаМассива);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_тзДокументыДокументЗаказОчистка(Элемент, СтандартнаяОбработка)
	ТекСтрока = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	Если ТекСтрока=Неопределено Тогда Возврат; КонецЕсли;
	ОчистимДанныеЗаказа(ТекСтрока);
	УстановитьВидимостьРасхождения(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_тзТоварРасхожденияКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	РассчитатьРасхождения(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_тзТоварРасхожденияКоличествоВРасходнойНакладнойПриИзменении(Элемент)
	ТекДанные = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	РассчитатьРасхождения(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРасхождения(ТекДанные)
	ТекДанные.Расхождение = ТекДанные.Количество - ТекДанные.КоличествоВРасходнойНакладной;
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	ТабДок = ПечатьНаСервере();
	ТабДок.ПокаЗать();
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()
	тзРезультат = ДанныеФормыВЗначение(Отгрузка_тзТоварРасхождения,Тип("ТаблицаЗначений"));
	ТабДок = Новый ТабличныйДокумент;
	ПострПечать = Новый ПостроительОтчета;
	ПострПечать.ИсточникДанных = Новый ОписаниеИсточникаДанных(тзРезультат);
	ПострПечать.ОформитьМакет();
	ПострПечать.Выполнить();
	Для каждого Колонка Из ПострПечать.ВыбранныеПоля Цикл
		Колонка.Представление = тзРезультат.Колонки[Колонка.Имя].Заголовок;
	КонецЦикла;
	ПострПечать.Вывести(ТабДок);
	Возврат ТабДок
КонецФункции

&НаКлиенте
Процедура Сохранить(Команда)
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогФыбораФайла.Фильтр	=	"Файл данных (*.xls)|*.xls";
	ДиалогФыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"xls";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	Если ДиалогФыбораФайла.Выбрать() Тогда
		ТабДок = ПечатьНаСервере();
		ТабДок.Записать(ДиалогФыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.XLS);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_тзДокументыДокументЗаказОткрытие(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Документ) Тогда Возврат; КонецЕсли;
	ДокСсылка = ТекДанные.ДокументЗаказ;
	Попытка
		СтруктураПараметров = Новый Структура("Ключ", ДокСсылка);
		Форма = ПолучитьФорму("Документ.РасходнаяНакладная.ФормаОбъекта", СтруктураПараметров,ЭтаФорма,ЭтаФорма);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка: "+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура ФормаВыбораНесколькихЗаказов(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////И Н В Е Н Т А Р И З А Ц И Я///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ИнициализироватьКомпоновщикСКД_Инвентарзация()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СКД = ОбработкаОбъект.ПолучитьМакет("Инвентаризация");
	Объект.АдресСКД_Инвентаризация = ПоместитьВоВременноеХранилище(СКД,Новый УникальныйИдентификатор); 
	КомпоновщикНастроек_Инвентаризация.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Объект.АдресСКД_Инвентаризация));
	КомпоновщикНастроек_Инвентаризация.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
КонецПроцедуры

&НаСервере
Функция СформироватьФайлБазыНаСервере_Инвентаризация()
	СКД = ПолучитьИзВременногоХранилища(Объект.АдресСКД_Инвентаризация);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПараметрыТолькоОстатки = КомпоновщикНастроек_Инвентаризация.Настройки.ПараметрыДанных.Элементы[0];
	ПараметрыТолькоОстатки.Значение = Элементы.КомпоновщикНастроекНастройкиОтбор_ТолькоОстатки.Пометка;
	ПараметрыТолькоОстатки.Использование = Истина;
	
	ПараметрыДатаНачала = КомпоновщикНастроек_Инвентаризация.Настройки.ПараметрыДанных.Элементы[3];
	ПараметрыДатаНачала.Значение = ТекущаяДата()-63072000;
	ПараметрыДатаНачала.Использование = Истина;
	
	ПараметрыДатаОкончания = КомпоновщикНастроек_Инвентаризация.Настройки.ПараметрыДанных.Элементы[4];
	ПараметрыДатаОкончания.Значение = ТекущаяДата();
	ПараметрыДатаОкончания.Использование = Истина;
	
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД,КомпоновщикНастроек_Инвентаризация.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ТЗРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Запрос = Новый Запрос("
	|Выбрать
	|	ИсточникДанных.Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	&ТЗРезультат КАК ИсточникДанных
	|;
	|/////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Номенклатура.Наименование КАК Номенклатура,
	|	НоменклатураКонтрагентов.Номенклатура.Код КАК НоменклатураКод,
	|	НоменклатураПолная.Код КАК ШтрихКод
	|ИЗ
	|	ВТНоменклатура КАК НоменклатураКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (Выбрать 
	|								А.Ссылка как Номенклатура, 
	|								А.Родитель как Родитель, 
	|								А.Код как Код 
	|							ИЗ 
	|								Справочник.Номенклатура КАК А 
	|							ГДЕ А.Родитель В (Выбрать Б.Номенклатура из ВТНоменклатура КАК Б)
	|								 ) КАК НоменклатураПолная
	|		ПО НоменклатураКонтрагентов.Номенклатура = НоменклатураПолная.Родитель
	|			
	|ГДЕ
	|	НЕ НоменклатураПолная.Код ЕСТЬ NULL 
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураКонтрагентов.Номенклатура.Код
	|ИТОГИ
	|	МАКСИМУМ(НоменклатураПолная.Код),
	|	МАКСИМУМ(НоменклатураКонтрагентов.Номенклатура.Наименование)
	|ПО
	|	НоменклатураКод");
	Запрос.УстановитьПараметр("ТЗРезультат",ТЗРезультат);
	//Запрос.УстановитьПараметр("ТипШтрихКода",Справочники.СлужебныеКоды.НайтиПоКоду("EAN13"));
	Результат = Запрос.Выполнить();
	ТекстФайл = "";
	ВыборкаПоТоваруТранз = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоТоваруТранз.Следующий() Цикл
		//Шилов М.В. 25.02.14 обработка 8-,12-,13-ти значных ШК
		ТекстФайл = ТекстФайл + ?(ПустаяСтрока(ТекстФайл),"",Символы.ПС)+ Прав(ПолучитьШКДляВыгрузки(СокрЛП(ВыборкаПоТоваруТранз.ШтрихКод)),13)+","+СокрЛП(Прав(ВыборкаПоТоваруТранз.НоменклатураКод,7))+","+Лев(ВернутьТекстБезРазделителя(СокрЛП(ВыборкаПоТоваруТранз.Номенклатура)),50)+",,";
		ТекстФайл = ТекстФайл + ?(ПустаяСтрока(ТекстФайл),"",Символы.ПС)+ Прав(СокрЛП(ВыборкаПоТоваруТранз.НоменклатураКод),13)+",,"+ПолучитьШКДляВыгрузки(СокрЛП(ВыборкаПоТоваруТранз.ШтрихКод))+",,";
		ВыборкаПоТоваруНеТранз = ВыборкаПоТоваруТранз.Выбрать();
		Пока ВыборкаПоТоваруНеТранз.Следующий() Цикл
			Если ВыборкаПоТоваруНеТранз.ШтрихКод = ВыборкаПоТоваруТранз.ШтрихКод Тогда Продолжить; КонецЕсли;
			ТекстФайл = ТекстФайл + ?(ПустаяСтрока(ТекстФайл),"",Символы.ПС)+ Прав(ПолучитьШКДляВыгрузки(СокрЛП(ВыборкаПоТоваруНеТранз.ШтрихКод)),13)+",,"+ПолучитьШКДляВыгрузки(СокрЛП(ВыборкаПоТоваруТранз.ШтрихКод))+",,";
		КонецЦикла;
		//Шилов М.В.
	КонецЦикла;
	Возврат ТекстФайл;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьВТерминал_Инвентаризация(Команда=Неопределено)
	ТекстФайлика = СформироватьФайлБазыНаСервере_Инвентаризация();	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ПутьКФайлу = "\\fileserver\K\Exchange\ФайлыТСД\";
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекПользователь = Строка(ОбщегоНазначения.ТекущийПользователь());
	ТекПользователь = СтрЗаменить(ТекПользователь," ","_");
	ФорматДата = Формат(ТекущаяДата(),"ДФ=dd_MM_yyyy_HH_mm_ss");
	ТекстовыйДокумент.Записать(ПутьКФайлу+ТекПользователь+"_"+ФорматДата+".txt");
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла,КодировкаТекста.ANSI);
	МенеджерОборудованияКлиент.ЗагрузитьФайлВБазу(Новый УникальныйИдентификатор, ИмяВременногоФайла,1);
КонецПроцедуры

&НаКлиенте
Процедура Кнопка_ТолькоОстатки(Команда)
	Элементы.КомпоновщикНастроекНастройкиОтбор_ТолькоОстатки.Пометка = НЕ Элементы.КомпоновщикНастроекНастройкиОтбор_ТолькоОстатки.Пометка;
КонецПроцедуры

&НаСервере
Процедура Инвентаризация_ОбработатьФайл(АдрестТекста)
	//тзТоваров = Новый ТаблицаЗначений;
	//тзТоваров.Колонки.Добавить("Номенклатура");
	//тзТоваров.Колонки.Добавить("Количество");
	//ТекстПарсинга = ПолучитьИзВременногоХранилища(АдрестТекста);	
	//Для ъ=1 По СтрЧислоСтрок(ТекстПарсинга) Цикл
	//	СтрокаПарсинга = СтрПолучитьСтроку(ТекстПарсинга,ъ);
	//	МногоСтрочная = СтрЗаменить(СтрокаПарсинга,",",Символы.ПС);
	//	Строка1 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,1));
	//	Строка2 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,2));
	//	Строка3 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,3));
	//	Строка4 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,4));
	//	Строка5 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,5));
	//	Если ПустаяСтрока(Строка4) Тогда Продолжить; КонецЕсли;  // нам не нужны позиции с 0 количеством
	//	Если НЕ ЗначениеЗаполнено(Число(Строка4)) Тогда Продолжить; КонецЕсли;  // нам не нужны позиции с 0 количеством
	//	ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(Строка2);
	//	Если ТекНоменклатура.Пустая() Тогда 
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Не найдена номенклатура с кодом "+Строка2;
	//		Сообщение.Сообщить();
	//		Продолжить; 
	//	КонецЕсли;	
	//	НоваяСтрока = тзТоваров.Добавить();
	//	НоваяСтрока.Номенклатура = ТекНоменклатура;
	//	НоваяСтрока.Количество = Число(Строка4);
	//КонецЦикла;
	//тзТоваров.Свернуть("Номенклатура","Количество");
	//ПоместитьВоВременноеХранилище(тзТоваров,Параметры.АдресХранилища);
	тзТоваров = Новый ТаблицаЗначений;
	тзТоваров.Колонки.Добавить("Номенклатура");
	тзТоваров.Колонки.Добавить("Количество");
	ТекстПарсинга = ПолучитьИзВременногоХранилища(АдрестТекста);	
	Для ъ=1 По СтрЧислоСтрок(ТекстПарсинга) Цикл
		СтрокаПарсинга = СтрПолучитьСтроку(ТекстПарсинга,ъ);
		МногоСтрочная = СтрЗаменить(СтрокаПарсинга,",",Символы.ПС);
		Строка1 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,1)); // левое поле
		Строка2 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,2)); // левое поле
		Строка3 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,3)); // Штрихкод
		Строка4 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,4)); // Количество
		Строка5 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,5)); // Брак
		Если ПустаяСтрока(Строка4) Тогда Продолжить; КонецЕсли;
		ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(Строка3);
		Если ТекНоменклатура.Пустая() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена номенклатура с штрихкодом "+Строка3);
			Продолжить; 
		КонецЕсли;	
		НоваяСтрока = тзТоваров.Добавить();
		НоваяСтрока.Номенклатура = ТекНоменклатура.Родитель;
		НоваяСтрока.Количество = Число(Строка4);
	КонецЦикла;
	тзТоваров.Свернуть("Номенклатура","Количество");
	ПоместитьВоВременноеХранилище(тзТоваров,Параметры.АдресХранилища);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеИЗТСДВФайл(Команда)
	АдресХранилищаТекста = Неопределено;
	Если МенеджерОборудованияКлиент.ПолучитьФАйлИзДокумента(УникальныйИдентификатор, АдресХранилищаТекста,0) Тогда 
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ИмяПользователя = ОбщегоНазначения.ТекущийПользователь();
		ИмяПользователя = стрЗаменить(Строка(ИмяПользователя)," ","");
		ДиалогВыбораФайла.ПолноеИмяФайла = ИмяПользователя;
		Текст = "ru = ""Текст""; en = ""Text""";
		Фильтр = НСтр(Текст)+"(*.txt)|*.txt";
		ДиалогВыбораФайла.Фильтр = Фильтр;
		ДиалогВыбораФайла.Расширение = "txt";
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
		ДиалогВыбораФайла.Заголовок = "Укажите имя файла";
		Если ДиалогВыбораФайла.Выбрать() Тогда
			ТекстПарсинга = ПолучитьИзВременногоХранилища(АдресХранилищаТекста);	
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ТекстПарсинга);
			ТекстовыйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,КодировкаТекста.ANSI);
		Иначе
			Текст = "ru = ""Файл(ы) не выбран!""; en = ""File(s) not selected!""";
			Предупреждение(НСтр(Текст));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////О Т Г Р У З К А  П Р О Ч Е Е///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция СформироватьФайликНаСервере()
	ТХТ="";
	Для каждого ДокЗаказов Из Элементы.СпЗаказов.ВыделенныеСтроки Цикл
		ТХТ=ТХТ+Символы.ПС;
		НомДок=СокрЛП(ДокЗаказов.Номер);
		Префикс=Строка(ДокЗаказов.УникальныйИдентификатор());
		Клиент=СтрЗаменить(Лев(ДокЗаказов.Контрагент.Наименование,60),","," ");
		ТХТ=ТХТ+Префикс+",,,,,"+НомДок+","+Клиент;
		Для каждого СтрЗаказ Из ДокЗаказов.Состав Цикл
			ВыбрШК=Справочники.Номенклатура.Выбрать(СтрЗаказ.Номенклатура);
			Пока ВыбрШК.Следующий() Цикл
				ТХТ=ТХТ+Символы.ПС;
				ТХТ=ТХТ+Префикс+ПолучитьШКДляВыгрузки(СокрЛП(ВыбрШК.Код))+",,"+СтрЗаменить(СтрЗаказ.Номенклатура.Наименование,",",".")+",0,"+Формат(СтрЗаказ.Количество,"ЧГ=0; ЧРД='.'")+","+НомДок+","+Клиент;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТХТ=Сред(ТХТ,2);
	Возврат ТХТ;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьВТерминал(Команда)
	ТекстФайлика = СформироватьФайликНаСервере();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла,КодировкаТекста.ANSI);
	Если МенеджерОборудованияКлиент.ЗагрузитьФайлВБазу(Новый УникальныйИдентификатор, ИмяВременногоФайла,3) Тогда
		ЗаписатьСтатусыДокументовВРегистр();	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтатусыДокументовВРегистр()
	ТекДата= ТекущаяДата();
	Для каждого ДокЗаказов Из Элементы.СпЗаказов.ВыделенныеСтроки Цикл		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В ТСД загружен документ : "+ДокЗаказов);
		рсПризнакПечатиНаборногоЛиста = РегистрыСведений.Izh_СостояниеДокумента.СоздатьМенеджерЗаписи();                                          	
		рсПризнакПечатиНаборногоЛиста.Состояние = Перечисления.Izh_СостояниеДокумента.ВыгруженВТСД;
		рсПризнакПечатиНаборногоЛиста.Документ = ДокЗаказов;
		рсПризнакПечатиНаборногоЛиста.Сотрудник = ПараметрыСеанса.ТекущийПользователь;
		рсПризнакПечатиНаборногоЛиста.Период = ТекДата;
		рсПризнакПечатиНаборногоЛиста.Записать();
	КонецЦикла;
	Элементы.СпЗаказов.Обновить();
КонецПроцедуры

&НаСервере
Процедура ОбработкаФайлаИзБазы(АдресХранилища)
	знДанныеЗаказов=РеквизитФормыВЗначение("ДанныеЗаказов");
	знДанныеЗаказов.Строки.Очистить();
	
	СтрОбработки=ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ТЗ=Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Заказ");
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("Кол");
	ТЗ.Колонки.Добавить("КолВЗаказе");
	
	Для ъ=1 По СтрЧислоСтрок(СтрОбработки)-1 Цикл
		Стр=СтрПолучитьСтроку(СтрОбработки, ъ);
		Стр=СтрЗаменить(Стр, ",", Символы.ПС);
		
		СтрТЗ=ТЗ.Добавить();
		СтрТЗ.Заказ=Документы.ЗаказВнешний.ПолучитьСсылку(Новый УникальныйИдентификатор(Лев(СтрПолучитьСтроку(Стр, 1),36)));
		Если ЗначениеЗаполнено(Сред(СтрПолучитьСтроку(Стр, 1),37)) Тогда
			СтрТЗ.Номенклатура=Справочники.Номенклатура.НайтиПоКоду(СокрП(Сред(СтрПолучитьСтроку(Стр, 1),37))).Родитель;
			СтрТЗ.Кол=Число(СтрПолучитьСтроку(Стр, 4));
			СтрТЗ.КолВЗаказе=Число(СтрПолучитьСтроку(Стр, 5));
		Иначе
			СтрТЗ.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
			СтрТЗ.Кол=0;
			СтрТЗ.КолВЗаказе=0;
		КонецЕсли;	
	КонецЦикла;
	ТЗ.Свернуть("Заказ,Номенклатура,КолВЗаказе","Кол");
	ТЗ.Сортировать("Заказ,Номенклатура");
	
	Заказ_=Документы.ЗаказВнешний.ПустаяСсылка();
	Для каждого СтрТЗ Из ТЗ Цикл
		Если СтрТЗ.Заказ<>Заказ_ Тогда
			СтрЗаказы=знДанныеЗаказов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрЗаказы, СтрТЗ ,"Заказ");
			СтрЗаказы.ФлВыгружать=Истина;
			Заказ_=СтрТЗ.Заказ;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрТЗ.Номенклатура) Тогда
			СтрНоменкл=СтрЗаказы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрНоменкл, СтрТЗ);
			СтрНоменкл.ФлВыгружать=Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(знДанныеЗаказов,"ДанныеЗаказов");
КонецПроцедуры

//{{ШиловМВ 13.10.14 №000130057
&НаСервере
Функция ПолучитьШКНоменкл(Номенкл)
	стрШК="";
	ВыбрШК=Справочники.Номенклатура.Выбрать(Номенкл);
	Пока ВыбрШК.Следующий() Цикл
		стрШК=стрШК+СокрЛП(ВыбрШК.Код)+", ";
	КонецЦикла;
	Если СтрШК<>"" Тогда
		СтрШК=Лев(СтрШК,СтрДлина(СтрШК)-2);
	КонецЕсли;
	
	Возврат СтрШК;
КонецФункции

&НаСервере
Функция ПечатьРасхождений(Таб)
	знОбъект=РеквизитФормыВЗначение("Объект");
	Макет=знОбъект.ПолучитьМакет("Расхождения");
	Шапка=Макет.ПолучитьОбласть("Шапка");
	Строка=Макет.ПолучитьОбласть("Строка");
	
	знДанныеЗаказов=РеквизитФормыВЗначение("ДанныеЗаказов");
	_Заказ=Документы.ЗаказВнешний.ПустаяСсылка();
	ПечатьРасх=Ложь;
	Для каждого стрЗаказы Из знДанныеЗаказов.Строки Цикл
		Для каждого стрНоменкл Из стрЗаказы.Строки Цикл
			Если стрНоменкл.Кол=стрНоменкл.КолВЗаказе Тогда
				Продолжить;
			КонецЕсли;
			ПечатьРасх=Истина;			
			Если стрНоменкл.Заказ<>_Заказ Тогда
				Шапка.Параметры.ДокЗаказ=стрНоменкл.Заказ;
				Таб.Вывести(Шапка);
				_Заказ=стрНоменкл.Заказ;
				Ном=0;
			КонецЕсли;
			Ном=Ном+1;
			Строка.Параметры.Ном=Ном;
			Строка.Параметры.НаименТовара=строка(стрНоменкл.Номенклатура);
			Строка.Параметры.ШК=ПолучитьШКНоменкл(стрНоменкл.Номенклатура);
			Строка.Параметры.Заказ=стрНоменкл.Кол;
			Строка.Параметры.Набор=стрНоменкл.КолВЗаказе;
			Строка.Параметры.Расх=стрНоменкл.КолВЗаказе-стрНоменкл.Кол;
			Таб.Вывести(Строка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПечатьРасх;
КонецФункции
//ШиловМВ 13.10.14 №000130057}}

&НаКлиенте
Процедура ПрочитатьИзТерминала(Команда)
	АдресХранилищаТекста = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ПолучитьФайлИзБазы(УникальныйИдентификатор, АдресХранилищаТекста,3) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаФайлаИзБазы(АдресХранилищаТекста);
	//{{ШиловМВ 13.10.14 №000130057
	Таб=Новый ТабличныйДокумент;
	Если ПечатьРасхождений(Таб) Тогда
		Таб.Показать();
	КонецЕсли;
	//ШиловМВ 13.10.14 №000130057}}
	Для каждого Заказ из ДанныеЗаказов.ПолучитьЭлементы() Цикл
		Элементы.ДанныеЗаказов.Развернуть(Заказ.ПолучитьИдентификатор()); 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Возврат Окр(СтавкаНДС * Сумма / (100 + СтавкаНДС),2);
	
КонецФункции

&НаСервере
Процедура РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	
	//Если СтрокаТабличнойЧасти.Свойство("Цена") И СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
	СтрокаТабличнойЧасти.Сумма = Окр(СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена,2);
	//КонецЕсли;
	
	//Если СтрокаТабличнойЧасти.Свойство("ЦенаУпр") И СтрокаТабличнойЧасти.Свойство("СуммаУпр") Тогда
	//	СтрокаТабличнойЧасти.СуммаУпр = Окр(СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаУпр,2);
	//КонецЕсли;
	
	//Если СтрокаТабличнойЧасти.Свойство("СуммаНДС") И СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
	СтрокаТабличнойЧасти.СуммаНДС = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	Истина,
	ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	//КонецЕсли;
	
	//Если СтрокаТабличнойЧасти.Свойство("СуммаНДСУпр") И СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
	//	СтрокаТабличнойЧасти.СуммаНДСУпр = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаУпр,
	//	Истина,
	//	ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	//КонецЕсли;
	
	//Если СтрокаТабличнойЧасти.Свойство("ЦенаБезНДС") И СтрокаТабличнойЧасти.Свойство("СуммаБезНДС") Тогда
	СтрокаТабличнойЧасти.СуммаБезНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
	СтрокаТабличнойЧасти.ЦенаБезНДС = Окр(СтрокаТабличнойЧасти.СуммаБезНДС / СтрокаТабличнойЧасти.Количество,2);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьСуммуБезНДСВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	
	СтавкаНДС = ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаБезНДС = Окр(СтрокаТабличнойЧасти.ЦенаБезНДС * СтрокаТабличнойЧасти.Количество, 2);
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезНДС * (1 + СтавкаНДС / 100);
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаБезНДС;
	СтрокаТабличнойЧасти.Цена = Окр(СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество, 2);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКоличестваВТабличнойЧасти(ТекСтрока)
	Если ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ВключатьНДСВЦеныКонтрагентов") = Истина Тогда
		РасчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
	Иначе
		РасчитатьСуммуБезНДСВСтрокеТабличнойЧасти(ТекСтрока);
	КонецЕсли;
	
	//Если ТекСтрока.Свойство("Вес") Тогда
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Номенклатура",ТекСтрока.Номенклатура);
	СтруктураДанных.Вставить("ЕдиницаИзмерения",ТекСтрока.ЕдиницаИзмерения);
	СтруктураДанных.Вставить("Количество",ТекСтрока.Количество);
	СтруктураДанных.Вставить("ЕдиницаВеса",ТекСтрока.ЕдиницаВеса);
	СтруктураДанных.Вставить("Вес",ТекСтрока.Вес);
	ОбработкаТабличныхЧастейСервер.ЗаполнитьВесТовара(СтруктураДанных);
	ТекСтрока.ЕдиницаВеса = СтруктураДанных.ЕдиницаВеса;
	ТекСтрока.Вес = СтруктураДанных.Вес;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыСерв()
	знДанныеЗаказов=РеквизитФормыВЗначение("ДанныеЗаказов");
	
	Для каждого СтрЗаказы Из знДанныеЗаказов.Строки Цикл
		Если СтрЗаказы.ФлВыгружать Тогда
			
			СформДокум=Новый Массив;
			Документы.ЗаказВнешний.СформироватьПакетДокументов(СтрЗаказы.Заказ,СформДокум);
			
			Для каждого Докум Из СформДокум Цикл
				Если ТипЗнч(Докум)=Тип("ДокументОбъект.РасходнаяНакладная") Тогда
					ДокРН=Докум;
					
					Для каждого СтрНоменкл Из СтрЗаказы.Строки Цикл
						СтрРН=ДокРН.Состав.Найти(СтрНоменкл.Номенклатура, "Номенклатура");
						Если СтрРН<>Неопределено Тогда
							СтрРН.Количество=СтрНоменкл.Кол;
							Если СтрРН.Количество=0 Тогда
								ДокРН.Состав.Удалить(СтрРН);
							Иначе
								ПриИзмененииКоличестваВТабличнойЧасти(СтрРН);
							КонецЕсли;
						КонецЕсли; 
					КонецЦикла;
					
					Попытка
						//{БредовЮГ 2014-12-07 Наряд№000136217
						//ДокРН.Записать(РежимЗаписиДокумента.Проведение);
						ДокРН.Записать(РежимЗаписиДокумента.Запись);
						//БредовЮГ 2014-12-07 Наряд№000136217}
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при записи расходной накладной ( "+ОписаниеОшибки()+" )");
						ДокРН.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	СформироватьДокументыСерв();
КонецПроцедуры


&НаКлиенте
Процедура ДанныеЗаказовФлВыгружатьПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

