&НаКлиенте
Перем КомпонентаВесы;

/////////////////////////////////////////////////////////////
&НаКлиенте
Процедура Дерево(Команда)
	обработкатабличныхчастейклиент.ОтображениеДинамическогоСпискаДерево(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура Иерархия(Команда)
	обработкатабличныхчастейклиент.отображениединамическогоспискаиерархия(этаформа);	
КонецПроцедуры

&НаКлиенте
Процедура Список(Команда)
	обработкатабличныхчастейклиент.ОтображениеДинамическогоСпискаСписок(этаформа);	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГруппыВПодборе(Команда)
	элементы.кнГруппы.пометка = не элементы.кнГруппы.пометка;
	флаг = Элементы.кнГруппы.пометка;
	ВЫполнить("ОбработкаТабличныхЧастейКлиент.ОтображениеГрупп(ПодборНоменклатуры,флаг)");
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыПодбора()
	ПОдборНоменклатурыСервер.СохранитьПараметрыПодбора("РаботаСВесами",ЭтаФорма.ИмяФормы,ЭтаФорма.Элементы);
конецпроцедуры

&НаСервере
Функция ПолучитьНастройкуПодбора()
	возврат подборНоменклатурыСервер.ПолучитьНастройкуподбора("РаботаСВесами",этаФорма.ИмяФормы);	
конецфункции

&НаКлиенте
Процедура УстановитьПараметры()
	
	ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("ТекущееВремя", ТекущаяДата());
	ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
КонецПроцедуры

&НаКлиенте
процедура ЗагрузитьНастройкиПодбора()
	Настройки = ПолучитьНастройкуПодбора();
	ОбработкаТабличныхЧастейКлиент.загрузитьнастройкиподбора(ЭтаФорма,Настройки);
конецпроцедуры

&НаКлиенте
Процедура ПодборНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Весы = Элементы.ДеревоВесов.ТекущиеДанные.Весы;
	Для каждого Эл Из Элемент.ВыделенныеСтроки Цикл
		ДобавитьВСписокВесовыхТоваров(Весы, Эл);
	КонецЦикла;
	ОбновитьСпискиНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура НайтиТоварВСпискеПоШтрихкоду(Команда)
	
	ШК = "";
	Если Не ВвестиЗначение(ШК, НСтр("ru = 'Введите штрихкод'")) Тогда
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ШК) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСоСканеромШККлиент.ОбработкаШтрихКодаВСпискеНоменклатуры(ШК, ПодборНоменклатуры);
	
КонецПроцедуры
/////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОчиститьПросроченнуюДатуСрокаХранения();
	
	Если СтруктурнаяЕдиница.Пустая() Тогда
		Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ЭтоГруппа Тогда
			Элементы.СтруктурнаяЕдиница.Видимость = Истина;
		Иначе
			СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
			Элементы.СтруктурнаяЕдиница.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ВыполняемаяЗадача = Параметры.ВыполняемаяЗадача;
	ЗаполнитьСписокВесов();
	ЗаполнитьСписокВесовыхТоваров();
	//ЗаполнитьСписокНеПривязанныхТоваров();
	ЗаполнитьСписокДиапазонов();
	
	Если Не Объект.ВыполняемаяЗадача.Пустая() Тогда
		Если ТипЗнч(Объект.ВыполняемаяЗадача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.НоваяНоменклатура") Тогда
			Если Объект.ВыполняемаяЗадача.БизнесПроцесс.Основание.Транзакционный Тогда
				ТранзакционныйТовар = Объект.ВыполняемаяЗадача.БизнесПроцесс.Основание;
			Иначе
				ТранзакционныйТовар = Объект.ВыполняемаяЗадача.БизнесПроцесс.Основание.Родитель;
			КонецЕсли;
			ПодборНоменклатуры.Отбор.Элементы.Очистить();
			Отбор = ПодборНоменклатуры.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.Использование = Истина;
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			Отбор.ПравоеЗначение = ТранзакционныйТовар;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВесовПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЗначениеОтбора = "";
		ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("Весы", Неопределено);
	Иначе
		ЗначениеОтбора = Элемент.ТекущиеДанные.Весы;
		ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("Весы", ЗначениеОтбора);
	КонецЕсли;
	СтрОтбора = Новый ФиксированнаяСтруктура("Весы", ЗначениеОтбора);
	Элементы.СписокВесовыхТоваров.ОтборСтрок = СтрОтбора;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВыполнить()
	Попытка
		КомпонентаВесы.Config();
	Исключение
		Сообщить("Ошибка выполнения операции в компоненте работы с весами: "+ ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
		КомпонентаВесы = Новый COMОбъект("CCScl.LixScaleClient");
	Исключение
		Если ЗначениеЗаполнено(Объект.ВыполняемаяЗадача) Тогда
			КомпонентаВесы = Неопределено;
		Иначе	
			Сообщить("Компонента ""Весы"" не установлена!", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;	
	КонецПопытки;

	УстановитьПараметры();
	ЗагрузитьНастройкиПодбора();
	
КонецПроцедуры

&НаСервере
//Получает данные для выгрузки в весы
//Параметры:
//	Весы - весы, для которых формируется данные (СправочникСсылка.Весы)
//	маНоменклатура - массив товаров (СправочникСсылка.Номенклатура)
//Возвращаемое значение:
//	выборка запроса с данными
Функция ЗаполнитьТаблицуДляВыгрузки(Весы, маНоменклатура)
	
	пвхСрокХранения = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаСрокХранения));
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВесовойТовар.Код КАК Код,
	|	ВесовойТовар.ПрефиксPLU,
	|	ВесовойТовар.НоменклатураКод КАК ШтрихКод,
	|	ВесовойТовар.НоменклатураНаименование,
	|	ЕСТЬNULL(НоменклатураДополнительныеРеквизитыСрокХранения.Значение, 0) КАК СрокХранения,
	|	ЕСТЬNULL(НоменклатураДополнительныеРеквизитыСостав.Значение, """") КАК Состав,
	|	0 КАК ВесТары,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|	ВесовойТовар.ТранзакционныйТовар.ТипТовара КАК ТипТовара,
	|	ВесовойТовар.СрокГодностиДо КАК СрокГодностиДо
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВесовойТовар.Код КАК Код,
	|		ВЫБОР
	|			КОГДА тВесы.ВыгружатьПрефиксШК
	|				ТОГДА тНоменклатура.ПрефиксPLU
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК ПрефиксPLU,
	|		тНоменклатура.Код КАК НоменклатураКод,
	|		ВЫБОР
	|			КОГДА тНоменклатура.Транзакционный
	|				ТОГДА тНоменклатура.Ссылка
	|			ИНАЧЕ тНоменклатура.Родитель
	|		КОНЕЦ КАК ТранзакционныйТовар,
	|		тНоменклатура.Наименование КАК НоменклатураНаименование,
	|		ВесовойТовар.СрокГодностиДо КАК СрокГодностиДо,
	|		тВесы.РеквизитСостав КАК РеквизитСостав
	|	ИЗ
	|		Справочник.Весы КАК тВесы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВесовойТовар КАК ВесовойТовар
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК тНоменклатура
	|				ПО ВесовойТовар.Номенклатура = тНоменклатура.Ссылка
	|			ПО (ВЫБОР
	|					КОГДА тВесы.ВыгружатьТоварыТолькоЭтихВесов = ИСТИНА
	|						ТОГДА тВесы.Ссылка = ВесовойТовар.Владелец
	|					ИНАЧЕ тВесы.Ссылка = ВесовойТовар.Владелец
	|							ИЛИ тВесы.Родитель.Ссылка = ВесовойТовар.Владелец
	|							ИЛИ тВесы.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
	|							ИЛИ тВесы.Родитель.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
	|							ИЛИ тВесы.Родитель.Родитель.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
	|				КОНЕЦ)
	|	ГДЕ
	|		тВесы.Ссылка = &Весы
	|		И тВесы.ПометкаУдаления = ЛОЖЬ
	|		И тНоменклатура.Ссылка ЕСТЬ НЕ NULL 
	|		И ВесовойТовар.ПометкаУдаления = ЛОЖЬ
	|		И ВесовойТовар.Номенклатура В(&Номенклатура)) КАК ВесовойТовар
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущееВремя, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|					МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.ID) КАК ID
	|				ИЗ
	|					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущееВремя, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|							МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	|						ИЗ
	|							РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущееВремя, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|						ГДЕ
	|							ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
	|						
	|						СГРУППИРОВАТЬ ПО
	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|							ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|						ПО ЦеныНоменклатурыСрезПоследних.Период = ВложенныйЗапрос.Период
	|							И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|							И ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|							И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|				ГДЕ
	|					ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|				ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|					И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|					И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|					И ЦеныНоменклатурыСрезПоследних.ID = ВложенныйЗапрос.ID) КАК ЦеныНоменклатуры
	|		ПО ВесовойТовар.ТранзакционныйТовар = ЦеныНоменклатуры.Номенклатура
	|			И ВесовойТовар.ТранзакционныйТовар.БазоваяЕдиницаИзмерения = ЦеныНоменклатуры.ЕдиницаИзмерения.ЕдиницаПоКлассификатору
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизитыСрокХранения
	|		ПО ВесовойТовар.ТранзакционныйТовар = НоменклатураДополнительныеРеквизитыСрокХранения.Ссылка
	|			И (НоменклатураДополнительныеРеквизитыСрокХранения.Свойство = &СрокХранения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизитыСостав
	|		ПО ВесовойТовар.РеквизитСостав = НоменклатураДополнительныеРеквизитыСостав.Свойство
	|			И ВесовойТовар.ТранзакционныйТовар = НоменклатураДополнительныеРеквизитыСостав.Ссылка";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Весы", Весы);
	Запрос.УстановитьПараметр("Номенклатура", маНоменклатура);
	Запрос.УстановитьПараметр("СрокХранения", пвхСрокХранения);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ТекущееВремя", ТекущаяДата());
	
	ТаблицаДляВыгрузки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Возврат Истина;
КонецФункции

&НаКлиенте
//Выгружает товары в весы
//Параметры:
//	маТоварыПоВесам - Массив структур, каждый элемент массива определяет весы и список выгружаемых товаров для них.
//	Элемент массива (Ключ = Значение):
//		Весы = весы (СправочникСсылка.Весы)
//		Номенклатура = массив ссылок на товары (массив СправочникСсылка.Номенклатура)
Функция ЗагрузкаТовараВВесы(маТоварыПоВесам, Удаление = Ложь) Экспорт
	
	Попытка
		КомпонентаВесы = Новый COMОбъект("CCScl.LixScaleClient");
	Исключение
		Сообщить("Компонента ""Весы"" не установлена!", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецПопытки;
	КомпонентаВесы.SetInteractive(0);
	Результат = КомпонентаВесы.Connect();
	Если Результат = 0 Тогда
		Сообщить("Весы: Не установлено ни одного соединения!", СтатусСообщения.Внимание);
		Возврат Ложь;			
	ИначеЕсли Результат = 3 Тогда
		Сообщить("Весы: Не задано ни одного сервера, не установлено ни одного соединения!",СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
	
	ПрефиксШтучногоШК = ПолучитьПрефиксШтучногоШК();
	
	Для Каждого стВесы Из маТоварыПоВесам Цикл
		//ДобавлялиИнгредиенты = Ложь;	теперь пока всегда добавляем
		Весы = стВесы.Весы;
		НаименованиеВесов = СокрЛП(Весы);
		маНоменклатура = стВесы.Номенклатура;
		Если Удаление = Ложь Тогда
			ЗаполнитьТаблицуДляВыгрузки(Весы, маНоменклатура);
		Иначе
			ЗаполнитьТаблицуДляВыгрузкиУдаление(Весы, маНоменклатура);
		КонецЕсли;
		//КоличествоТоваровВыгрузки = ТаблицаДляВыгрузки.Количество();
		Для каждого Выборка Из ТаблицаДляВыгрузки Цикл			
			КодКлавиши = Выборка.Код;
			//Представление = Лев(СокрЛП(Выборка.НоменклатураНаименование), 70);
			Представление = Выборка.НоменклатураНаименование;
			ШтрихКод = СокрЛП(Выборка.ШтрихКод);
			Если СтрДлина(ШтрихКод) = 13 И Найти(ШтрихКод, ПрефиксШтучногоШК) = 1 Тогда
				ШтрихКод = Сред(ШтрихКод,7,6);
			Иначе
				ШтрихКод = СокрЛП(Выборка.ПрефиксPLU) + ШтрихКод;
			КонецЕсли; 
			Если стрДлина(СокрЛП(ШтрихКод))>7 Тогда
				Сообщить("Товар "+Представление+" не выгружен, длинный штрих-код");
				Продолжить;		
			КонецЕсли; 
			//Если СокрЛП(ШтрихКод) = "" Тогда
			//	Сообщить("Товар "+Представление+" не выгружен, нет штрих-кода");
			//	Продолжить;		
			//КонецЕсли; 
			ШтрихКод = Число(ШтрихКод);
			Цена = Выборка.Цена;
			//Если НЕ ЗначениеЗаполнено(Цена) ИЛИ Цена>1000000 Тогда
			//	Цена = 0;
			//КонецЕсли;
			//Если Цена = 0 Тогда
			Если Цена = 0 И Удаление = Ложь Тогда
				Сообщить("Товар "+Представление+" не выгружен, Цена = 0");
			//	Продолжить;//теперь не "удаляем"	//опять удаляем
				Представление = "Товар удален";
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.СрокГодностиДо) Тогда
				СрокХранения = (Выборка.СрокГодностиДо - НачалоДня(ТекущаяДата())) / 60 / 60 / 24;
				//СрокХранения = число(Формат(Год(Выборка.СрокГодностиДо), "ЧГ=0") + Месяц(Выборка.СрокГодностиДо) + Формат(День(Выборка.СрокГодностиДо), "ЧЦ=2; ЧВН=; ЧГ=0"));
			Иначе
				СрокХранения = Выборка.СрокХранения;
			КонецЕсли;
			ВесТары = Цел(Выборка.ВесТары * 1000);
			СоставТовара = Выборка.Состав;
			Если ПустаяСтрока(СоставТовара) Тогда
				КодИнгредиента = "";
			Иначе
				Результат = КомпонентаВесы.AddIngredient(НаименованиеВесов, КодКлавиши, СоставТовара);
				Результат = КомпонентаВесы.TransmitIngredients(НаименованиеВесов);
				//ДобавлялиИнгредиенты = Истина;
				КодИнгредиента = "$" + КодКлавиши;
			КонецЕсли;
			
			//Результат = КомпонентаВесы.Transmitt(НаименованиеВесов, КодКлавиши, ШтрихКод, Представление, Окр(Цена*100,0), СрокХранения, ВесТары);
			Если Выборка.ТипТовара = ПредопределенноеЗначение("Перечисление.ТипыТоваров.Весовой") тогда
				Результат = КомпонентаВесы.TransmitEx(НаименованиеВесов, КодКлавиши, ШтрихКод, Представление, Окр(Цена*100,0), СрокХранения, ВесТары, КодИнгредиента);
			иначе
				//TransmitNonWeight(ИмяВесов, номерПЛУ, КодПЛУ, Наименование, Цена, СрокХранения)
				//Результат= КомпонентаВесы.TransmitNonWeight(НаименованиеВесов, КодКлавиши, ШтрихКод, Представление, Окр(Цена*100,0), СрокХранения);
				Результат= КомпонентаВесы.TransmitNonWeightEx(НаименованиеВесов, КодКлавиши, ШтрихКод, Представление, Окр(Цена*100,0), СрокХранения, КодИнгредиента);
			Конецесли;
			Если Результат = 0 Тогда
				Сообщить("Весы: Сервер не нашел весы с именем - " + СокрЛП(НаименованиеВесов) + "!", СтатусСообщения.Внимание);
				Если Весы = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;	
			ИначеЕсли Результат = 2 Тогда
				Сообщить("Весы: Соединение с сервером весов не установлено!", СтатусСообщения.Внимание);
				Возврат Ложь;
			ИначеЕсли Результат = 3 Тогда
				Сообщить("Весы: Ошибка при обмене данных с сервером!", СтатусСообщения.Внимание);
				Возврат Ложь;
			ИначеЕсли Удаление = Истина Тогда
				УдалитьВесовойТовар(Выборка.ВесовойТовар, Весы);
			КонецЕсли;
		КонецЦикла;
		//Если ДобавлялиИнгредиенты Тогда
		//	Результат = КомпонентаВесы.TransmitIngredients(НаименованиеВесов);
		//КонецЕсли; 
	КонецЦикла;
	КомпонентаВесы.Disconnect();
	//КомпонентаВесы = "";
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьВыполнить()
	
	Ответ = Вопрос("Товары будут выгружены! Подтвердите действие!", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	маТоварыПоВесам = ПолучитьМассивТоварыПоВесам();
	Если маТоварыПоВесам.Количество() > 0 Тогда
		ЗагрузкаТовараВВесы(маТоварыПоВесам);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьмаВесы(СтрокаДерева,маВесы)
	Для Каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если Строка.Флаг Тогда
			маВесы.Добавить(Строка.Весы);
		КонецЕсли;
		ЗаполнитьмаВесы(Строка,маВесы);
	КонецЦикла;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокНеПривязанныхТоваров() Возврат;
	Запрос = Новый Запрос;
	ТекстОтбораПоОснованию = "";
	Если Не Объект.ВыполняемаяЗадача.Пустая() Тогда
		Если ТипЗнч(Объект.ВыполняемаяЗадача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.НоваяНоменклатура") Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА Номенклатура.Транзакционный
			|			ТОГДА Номенклатура.Ссылка
			|		ИНАЧЕ Номенклатура.Родитель
			|	КОНЕЦ КАК Ссылка
			|ПОМЕСТИТЬ ТранзакционныйТовар
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТранзакционныйТовар.Ссылка КАК Номенклатура
			|ИЗ
			|	ТранзакционныйТовар КАК ТранзакционныйТовар
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
			|		ПО ТранзакционныйТовар.Ссылка = СтатусыНоменклатуры.Номенклатура
			|			И (СтатусыНоменклатуры.СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница))
			|ГДЕ
			|	ТранзакционныйТовар.Ссылка.ПометкаУдаления = ЛОЖЬ
			|	И ТранзакционныйТовар.Ссылка.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Весовой)
			|	И СтатусыНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТоваров.Активный)
			|	И 0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(ВесовойТовар.Ссылка)
			|			ИЗ
			|				Справочник.ВесовойТовар КАК ВесовойТовар
			|			ГДЕ
			|				ВесовойТовар.Номенклатура В ИЕРАРХИИ
			|					(ВЫБРАТЬ
			|						ТранзакционныйТовар.Ссылка
			|					ИЗ
			|						ТранзакционныйТовар КАК ТранзакционныйТовар))";
			Запрос.УстановитьПараметр("Ссылка", Объект.ВыполняемаяЗадача.БизнесПроцесс.Основание);
		Иначе
			//код не доработан
			Основание = Объект.ВыполняемаяЗадача.БизнесПроцесс.Основание;
			выбДокИмя = Основание.Метаданные().Имя;
			ТекстОтбораПоОснованию = 
			"ВЫБРАТЬ
			|	ДокументСостав.Номенклатура КАК Ссылка
			|ИЗ
			|	Документ." + выбДокИмя + ".Состав КАК ДокументСостав
			|ГДЕ
			|	ДокументСостав.Ссылка = &Основание";
			Запрос.УстановитьПараметр("Основание", Основание);
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДокументСостав.Номенклатура КАК Номенклатура
			|ИЗ
			|		Документ." + выбДокИмя + ".Состав КАК ДокументСостав
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВесовойТовар КАК ВесовойТовар
			|		ПО ТоварыДокументаОтфильтрованные.Номенклатура = ВесовойТовар.Номенклатура
			|ГДЕ
			|	ВесовойТовар.Номенклатура ЕСТЬ NULL 
			|		И ДокументСостав.Ссылка = &Основание
			|		И ДокументСостав.Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Весовой)";
			//|		И НЕ ДокументСостав.Номенклатура.Фасованный";
		КонецЕсли;
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВесовойТовар КАК ВесовойТовар
		|		ПО СправочникНоменклатура.Ссылка = ВесовойТовар.Номенклатура.Родитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
		|		ПО СправочникНоменклатура.Ссылка = СтатусыНоменклатуры.Номенклатура
		|			И (СтатусыНоменклатуры.СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница))
		|ГДЕ
		|	ВесовойТовар.Номенклатура ЕСТЬ NULL 
		|	И СправочникНоменклатура.Транзакционный
		|	И СправочникНоменклатура.ПометкаУдаления = ЛОЖЬ
		|	И СправочникНоменклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Весовой)
		|	И СтатусыНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТоваров.Активный)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница); //V
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "СписокНеПривязанныхТоваров");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВесов()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Весы.Ссылка КАК Весы,
	|	0 КАК Флаг
	|ИЗ
	|	Справочник.Весы КАК Весы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Весы ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), "ДеревоВесов");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВесовыхТоваров()
	пвхСрокХранения = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаСрокХранения));
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникВесы.Ссылка КАК Весы,
	|	ВесовойТовар.Ссылка,
	|	ВесовойТовар.Код,
	|	ВесовойТовар.Номенклатура,
	|	ВесовойТовар.Номенклатура.Наименование,
	|	ВесовойТовар.СрокГодностиДо,
	|	ВЫБОР
	|		КОГДА ВесовойТовар.Номенклатура.Транзакционный
	|			ТОГДА ВесовойТовар.Номенклатура
	|		ИНАЧЕ ВесовойТовар.Номенклатура.Родитель
	|	КОНЕЦ КАК ТранзакционныйТовар,
	|	ВЫБОР
	|		КОГДА ВесовойТовар.Номенклатура.Транзакционный
	|			ТОГДА ВесовойТовар.Номенклатура.Код
	|		ИНАЧЕ ВесовойТовар.Номенклатура.Родитель.Код
	|	КОНЕЦ КАК ТранзакционныйКод,
	|	ВЫБОР
	|		КОГДА ВесовойТовар.Номенклатура.Транзакционный
	|			ТОГДА ВесовойТовар.Номенклатура.БазоваяЕдиницаИзмерения
	|		ИНАЧЕ ВесовойТовар.Номенклатура.Родитель.БазоваяЕдиницаИзмерения
	|	КОНЕЦ КАК БазоваяЕдиницаИзмерения
	|ПОМЕСТИТЬ ВесовойТовар
	|ИЗ
	|	Справочник.ВесовойТовар КАК ВесовойТовар
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Весы КАК СправочникВесы
	|		ПО (ВЫБОР
	|				КОГДА СправочникВесы.ВыгружатьТоварыТолькоЭтихВесов = ИСТИНА
	|					ТОГДА СправочникВесы.Ссылка = ВесовойТовар.Владелец
	|				ИНАЧЕ СправочникВесы.Ссылка = ВесовойТовар.Владелец
	|						ИЛИ СправочникВесы.Родитель.Ссылка = ВесовойТовар.Владелец
	|						ИЛИ СправочникВесы.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
	|						ИЛИ СправочникВесы.Родитель.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
	|						ИЛИ СправочникВесы.Родитель.Родитель.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК Флаг,
	|	ВесовойТовар.Весы,
	|	ВесовойТовар.Код КАК PLU,
	|	ВесовойТовар.ТранзакционныйКод КАК Код,
	|	ВесовойТовар.Номенклатура,
	|	ВесовойТовар.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|	ВесовойТовар.Ссылка КАК ВесовойТовар,
	|	ЕСТЬNULL(НоменклатураДополнительныеРеквизитыСрокХранения.Значение, 0) КАК СрокХранения,
	|	0 КАК ВесТары,
	|	ВесовойТовар.СрокГодностиДо
	|ИЗ
	|	ВесовойТовар КАК ВесовойТовар
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущееВремя, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|					МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.ID) КАК ID
	|				ИЗ
	|					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущееВремя, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|							МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	|						ИЗ
	|							РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущееВремя, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|						ГДЕ
	|							ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
	|						
	|						СГРУППИРОВАТЬ ПО
	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|							ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|						ПО ЦеныНоменклатурыСрезПоследних.Период = ВложенныйЗапрос.Период
	|							И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|							И ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|							И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|				ГДЕ
	|					ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|				ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|					И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|					И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|					И ЦеныНоменклатурыСрезПоследних.ID = ВложенныйЗапрос.ID) КАК ЦеныНоменклатуры
	|		ПО ВесовойТовар.ТранзакционныйТовар = ЦеныНоменклатуры.Номенклатура
	|			И ВесовойТовар.БазоваяЕдиницаИзмерения = ЦеныНоменклатуры.ЕдиницаИзмерения.ЕдиницаПоКлассификатору
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизитыСрокХранения
	|		ПО (НоменклатураДополнительныеРеквизитыСрокХранения.Свойство = &СрокХранения)
	|			И ВесовойТовар.ТранзакционныйТовар = НоменклатураДополнительныеРеквизитыСрокХранения.Ссылка";
	Запрос.УстановитьПараметр("СрокХранения", пвхСрокХранения);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ТекущееВремя", ТекущаяДата());
	Рез = Запрос.Выполнить();
	тз = Рез.Выгрузить();
	ЗначениеВРеквизитФормы(тз, "СписокВесовыхТоваров");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДиапазонов()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Весы.Ссылка КАК Весы,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ВесовойТовар.Код), 0) КАК КоличествоПозиций,
	|	ЕСТЬNULL(МИНИМУМ(ВесовойТовар.Код), 0) КАК ТекущийМинимум,
	|	ЕСТЬNULL(МАКСИМУМ(ВесовойТовар.Код), 0) КАК ТекущийМаксимум,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ВесовойТоварРодителя.Код),0)+1 КАК НовыйМинимум,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ВесовойТоварРодителя.Код),0)+ЕСТЬNULL(КОЛИЧЕСТВО(ВесовойТовар.Код),0) КАК НовыйМаксимум
	|ИЗ
	|	Справочник.Весы КАК Весы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВесовойТовар КАК ВесовойТовар
	|		ПО Весы.Ссылка = ВесовойТовар.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВесовойТовар КАК ВесовойТоварРодителя
	|		ПО Весы.Родитель = ВесовойТоварРодителя.Владелец
	|ГДЕ
	|	(НЕ Весы.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Весы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Весы ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДиапазонов");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиНоменклатуры()
	
	ЗаполнитьСписокВесовыхТоваров();
	//ЗаполнитьСписокНеПривязанныхТоваров();
	УстановитьПараметры();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//Если ТекущаяСтраница = Элементы.СтраницаНазначенияДиапазоновPLU Тогда
	//	ЗаполнитьСписокДиапазонов();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НазначитьPLUВыполнить()
	Ответ = Вопрос("PLU коды будут изменены! Подтвердите действие!", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
    ЗаписатьСписокДиапазонов(ДеревоДиапазонов);
	ЗаполнитьСписокДиапазонов();
	
	ЗаполнитьСписокВесовыхТоваров();
	ДеревоВесовПриАктивизацииСтроки(Элементы.ДеревоВесов);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСписокДиапазонов(Дерево)
	Для Каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		ЗаписатьДиапазонPLU(СтрокаДерева.Весы,СтрокаДерева.НовыйМинимум,СтрокаДерева.НовыйМаксимум);
		ЗаписатьСписокДиапазонов(СтрокаДерева);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДиапазонPLU(Весы,НовыйМинимум,НовыйМаксимум)
	НачатьТранзакцию();
	ВесовыеТовары = Справочники.ВесовойТовар.Выбрать(,Весы,, "Наименование Возр");
	N=99999;
	Пока ВесовыеТовары.Следующий() Цикл
		Если ВесовыеТовары.Код > НовыйМаксимум Тогда
			ДобСтроки = Объект.НулевыеДиапазоны.Добавить();
			ДобСтроки.Весы = Весы;
			ДобСтроки.Код = ВесовыеТовары.Код;
			ДобСтроки.Номенклатура = ВесовыеТовары.Номенклатура;
			//ДобСтроки.Характеристика = ВесовыеТовары.Характеристика;
		КонецЕсли;	
		ВесовыеТоварыОбъект = ВесовыеТовары.ПолучитьОбъект();
		ВесовыеТоварыОбъект.Код = N;
		ВесовыеТоварыОбъект.Записать();
		N = N + 1;
	КонецЦикла;
    М = НовыйМинимум;
	ВесовыеТовары = Справочники.ВесовойТовар.Выбрать(,Весы,, "Наименование Возр");
	Пока ВесовыеТовары.Следующий() Цикл
		ВесовыеТоварыОбъект = ВесовыеТовары.ПолучитьОбъект();
		ВесовыеТоварыОбъект.Код = М;
		ВесовыеТоварыОбъект.Записать();
		М = М + 1;
	КонецЦикла;
	//ОмПривилегированный.ОбновитьНумерациюОбъектовПоПолномуИмениМетаданных("Справочник.ВесовойТовар");
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура НовыйМинимумПриИзменении(Элемент)
	Элементы.ДеревоДиапазонов.ТекущиеДанные.НовыйМаксимум = ?(Элементы.ДеревоДиапазонов.ТекущиеДанные.КоличествоПозиций = 0,Элементы.ДеревоДиапазонов.ТекущиеДанные.НовыйМинимум,Элементы.ДеревоДиапазонов.ТекущиеДанные.НовыйМинимум+Элементы.ДеревоДиапазонов.ТекущиеДанные.КоличествоПозиций-1);
	ОбновитьДиапазоны(Элементы.ДеревоДиапазонов.ТекущиеДанные,Элементы.ДеревоДиапазонов.ТекущиеДанные.НовыйМаксимум)
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДиапазоны(Дерево,НовыйМаксимум)
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
    	Строка.НовыйМинимум = НовыйМаксимум + 1;
		Строка.НовыйМаксимум = ?(Строка.КоличествоПозиций = 0,Строка.НовыйМинимум,Строка.НовыйМинимум+Строка.КоличествоПозиций-1);
		ОбновитьДиапазоны(Строка,Строка.НовыйМаксимум)
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокВесовыхТоваровПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Весы = Элемент.ОтборСтрок.Весы;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Для Каждого Элемент Из ПараметрыПеретаскивания.Значение Цикл
			ДобавитьВСписокВесовыхТоваров(Весы, Элемент);
		КонецЦикла;	
	КонецЕсли;
	ОбновитьСпискиНоменклатуры();
	
КонецПроцедуры

&НаСервереБезКонтекста
//в параметр Номенклатура передается товар с ШК
Процедура ДобавитьВесовойТовар(Весы, Номенклатура)

	ШтриховыеКоды.ДобавитьВесовойТовар(Весы, Номенклатура);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивНоменклатурыСШКСервер(Номенклатура)

	Если Номенклатура.Группа = 0 Тогда
		мНоменклатураСШК = ШтриховыеКоды.ПолучитьМассивНоменклатурыСШКДляВесов(Номенклатура);
	Иначе
		мНоменклатураСШК = Новый Массив;
	КонецЕсли;
	
	Возврат мНоменклатураСШК;
КонецФункции

&НаКлиенте
//в параметр Номенклатура передается транзакционный товар
Процедура ДобавитьВСписокВесовыхТоваров(Весы, Номенклатура)

	мНоменклатураСШК = ПолучитьМассивНоменклатурыСШКСервер(Номенклатура);
	Если мНоменклатураСШК.Количество() = 0 Тогда
		Сообщить("У номенклатуры " + Номенклатура + " нет штрих-кода");
	ИначеЕсли мНоменклатураСШК.Количество() = 1 Тогда
		ДобавитьВесовойТовар(Весы, мНоменклатураСШК[0]);
	Иначе
		сз = Новый СписокЗначений;
		сз.ЗагрузитьЗначения(мНоменклатураСШК);
		СтрукОтбор     = Новый Структура("Ссылка",сз);
		СтрукПараметры = Новый Структура("Отбор",СтрукОтбор);
		ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", СтрукПараметры, ЭтаФорма);
		//ФормаВыбора.Открыть();
		ФормаВыбора.Заголовок = "Выберите товар со штрих-кодом";
		//ФормаВыбора.Список.Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		//сз = Новый СписокЗначений;
		//сз.ЗагрузитьЗначения(мНоменклатураСШК);
		//Отбор = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//Отбор.Использование = Истина;
		//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		//Отбор.ПравоеЗначение = сз;
		//Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ОбработкаТабличныхЧастейКлиент.ОтображениеДинамическогоСпискаСписок(ФормаВыбора, "Список");
		ОбработкаТабличныхЧастейКлиент.ОтображениеГрупп(ФормаВыбора.Список,Ложь);
		ФормаВыбора.Элементы.кнГруппы.Пометка = Ложь;
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВесовойТовар(ВесовойТовар, Весы)

	Если ВесовойТовар.Владелец = Весы Тогда
		ШтриховыеКоды.УдалитьВесовойТовар(ВесовойТовар);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Номенклатура1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСпискаВесового(Команда)
	
	Ответ = Вопрос("Товары будут удалены! Подтвердите действие!", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	
	маТоварыПоВесам = ПолучитьМассивТоварыПоВесам();
	Если маТоварыПоВесам.Количество() > 0 Тогда
		Результат = ЗагрузкаТовараВВесы(маТоварыПоВесам, Истина);
		Если Результат = Истина Тогда
			ОбновитьСпискиНоменклатуры();
			ДеревоВесовПриАктивизацииСтроки(Элементы.ДеревоВесов);
		КонецЕсли;
	КонецЕсли; 
	
	//Для каждого Строка Из маНоменклатураВесовСтроки Цикл	//for history
	//	УдалитьИзСписокаВесовыхТоваров(Строка.ВесовойТовар);
	//	ДобСтроки=НулевыеДиапазоны.Добавить();
	//	ДобСтроки.Весы=Весы;
	//	ДобСтроки.Код=Строка.Код;
	//ДобСтроки.Номенклатура=Строка.Номенклатура;
	//КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ЗначениеЗаполнено(Объект.ВыполняемаяЗадача) Тогда
		УправлениеБизнесПроцессамиСервер.ВыполнитьЗадачу(Объект.ВыполняемаяЗадача);
		Оповестить("ЗадачаВыполнена");
	КонецЕсли;	
	СохранитьПараметрыПодбора();
КонецПроцедуры

&НаКлиенте
Процедура СписокНеПривязанныхТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Возврат;
	
	Весы = Элементы.ДеревоВесов.ТекущиеДанные.Весы;
	Для каждого ИндексСтроки Из Элемент.ВыделенныеСтроки Цикл
		ДобавитьВСписокВесовыхТоваров(Весы, Элемент.ДанныеСтроки(ИндексСтроки).Номенклатура);
	КонецЦикла;
	ОбновитьСпискиНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
//выбор происходит товара с шк, когда невозможно определить основной шк из формы, открытой в ДобавитьВСписокВесовыхТоваров()
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Весы = Элементы.ДеревоВесов.ТекущиеДанные.Весы;
	ДобавитьВесовойТовар(Весы, ВыбранноеЗначение);
	ОбновитьСпискиНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВесовогоТовара(Команда)
	Если ЗначениеЗаполнено(Элементы.СписокВесовыхТоваров.ОтборСтрок) Тогда
		Весы = Элементы.СписокВесовыхТоваров.ОтборСтрок.Весы;
		маНоменклатураВесовСтроки = СписокВесовыхТоваров.НайтиСтроки(Новый Структура("Весы", Весы));
		Для каждого сВесовогоТовара Из маНоменклатураВесовСтроки Цикл
			сВесовогоТовара.Флаг = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиВесовогоТовара(Команда)
	Если ЗначениеЗаполнено(Элементы.СписокВесовыхТоваров.ОтборСтрок) Тогда
		Весы = Элементы.СписокВесовыхТоваров.ОтборСтрок.Весы;
		маНоменклатураВесовСтроки = СписокВесовыхТоваров.НайтиСтроки(Новый Структура("Весы", Весы));
		Для каждого сВесовогоТовара Из маНоменклатураВесовСтроки Цикл
			сВесовогоТовара.Флаг = Ложь;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПрефиксШтучногоШК()

	Возврат Константы.ПрефиксШтучногоТовара.Получить();

КонецФункции


&НаКлиенте
Процедура ОчиститьПамятьВесов(Команда)
	
	Ответ = Вопрос("Будет произведена попытка очистить память у выбранных весов!", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	
	Попытка
		КомпонентаВесы = Новый COMОбъект("CCScl.LixScaleClient");
	Исключение
		Сообщить("Компонента ""Весы"" не установлена!", СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
	КомпонентаВесы.SetInteractive(0);
	Результат = КомпонентаВесы.Connect();
	Если Результат = 0 Тогда
		Сообщить("Весы: Не установлено ни одного соединения!", СтатусСообщения.Внимание);
		Возврат;
	ИначеЕсли Результат = 3 Тогда
		Сообщить("Весы: Не задано ни одного сервера, не установлено ни одного соединения!",СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДереваВесов Из ДеревоВесов.ПолучитьЭлементы() Цикл
		Если СтрокаДереваВесов.Флаг Тогда
			Попытка
				КомпонентаВесы.ClearMemory(СокрЛП(СтрокаДереваВесов.Весы));
				Сообщить("Пямять весов """ + СтрокаДереваВесов.Весы + """ должна быть очищена.");
			Исключение
				Сообщить("Неудачная попытка очистки памяти весов " + СтрокаДереваВесов.Весы,  СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	КомпонентаВесы.Disconnect();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьПросроченнуюДатуСрокаХранения()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВесовойТовар.Ссылка
		|ИЗ
		|	Справочник.ВесовойТовар КАК ВесовойТовар
		|ГДЕ
		|	ВесовойТовар.СрокГодностиДо <= &ТекущаяДата
		|	И ВесовойТовар.СрокГодностиДо <> &ПустаяДата";

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		оВесовойТовар = Выборка.Ссылка.ПолучитьОбъект();
		оВесовойТовар.СрокГодностиДо = Дата("00010101");
		оВесовойТовар.Записать();
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокВесовыхТоваровСрокГодностиДоПриИзменении(Элемент)
	
	СрокГодностиДо = Элементы.СписокВесовыхТоваров.ТекущиеДанные.СрокГодностиДо;
	Если СрокГодностиДо < ТекущаяДата() Тогда
		ЗаполнитьСписокВесовыхТоваров();
		ДеревоВесовПриАктивизацииСтроки(Элементы.ДеревоВесов);
		Сообщить("Срок годности не может быть меньше текущей даты!");
		Возврат;
	КонецЕсли;
	ВесовойТоварСсылка = Элементы.СписокВесовыхТоваров.ТекущиеДанные.ВесовойТовар;
	УстановитьСрокГодностиДо(ВесовойТоварСсылка, СрокГодностиДо);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСрокГодностиДо(ВесовойТоварСсылка, СрокГодностиДо)

	оВесовойТовар = ВесовойТоварСсылка.ПолучитьОбъект();
	оВесовойТовар.СрокГодностиДо = СрокГодностиДо;
	оВесовойТовар.Записать();

КонецПроцедуры
&НаСервере
//Получает данные для выгрузки в весы
//Параметры:
//	Весы - весы, для которых формируется данные (СправочникСсылка.Весы)
//	маНоменклатура - массив товаров (СправочникСсылка.Номенклатура)
//Возвращаемое значение:
//	выборка запроса с данными
Функция ЗаполнитьТаблицуДляВыгрузкиУдаление(Весы, маНоменклатура)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	тВесовойТовар.Код КАК Код,
	|	"""" КАК ПрефиксPLU,
	|	тВесовойТовар.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	тВесовойТовар.Номенклатура.Код КАК ШтрихКод,
	|	0 КАК СрокХранения,
	|	"""" КАК Состав,
	|	0 КАК ВесТары,
	|	0 КАК Цена,
	|	тВесовойТовар.ТранзакционныйТовар.ТипТовара КАК ТипТовара,
	|	0 КАК СрокГодностиДо,
	|	тВесовойТовар.Ссылка КАК ВесовойТовар
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВесовойТовар.Код КАК Код,
	|		ВесовойТовар.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ВесовойТовар.Номенклатура.Транзакционный
	|				ТОГДА ВесовойТовар.Номенклатура
	|			ИНАЧЕ ВесовойТовар.Номенклатура.Родитель
	|		КОНЕЦ КАК ТранзакционныйТовар,
	//|		ВесовойТовар.СрокГодностиДо КАК СрокГодностиДо,
	//|		СправочникВесы.РеквизитСостав КАК РеквизитСостав
	|		ВесовойТовар.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.Весы КАК СправочникВесы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВесовойТовар КАК ВесовойТовар
	|			ПО (ВЫБОР
	|					КОГДА СправочникВесы.ВыгружатьТоварыТолькоЭтихВесов = ИСТИНА
	|						ТОГДА СправочникВесы.Ссылка = ВесовойТовар.Владелец
	|					ИНАЧЕ СправочникВесы.Ссылка = ВесовойТовар.Владелец
	|							ИЛИ СправочникВесы.Родитель.Ссылка = ВесовойТовар.Владелец
	|							ИЛИ СправочникВесы.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
	|							ИЛИ СправочникВесы.Родитель.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
	|							ИЛИ СправочникВесы.Родитель.Родитель.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
	|				КОНЕЦ)
	|	ГДЕ
	|		СправочникВесы.Ссылка = &Весы
	|		И ВесовойТовар.Номенклатура ЕСТЬ НЕ NULL 
	//|		И ВесовойТовар.ПометкаУдаления = ЛОЖЬ
	//|		И СправочникВесы.ПометкаУдаления = ЛОЖЬ
	|		И ВесовойТовар.Номенклатура В(&Номенклатура)) КАК тВесовойТовар";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Весы", Весы);
	Запрос.УстановитьПараметр("Номенклатура", маНоменклатура);
	//Запрос.УстановитьПараметр("СрокХранения", пвхСрокХранения);
	//Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	//Запрос.УстановитьПараметр("ТекущееВремя", ТекущаяДата());
	
	ТаблицаДляВыгрузки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПолучитьМассивТоварыПоВесам()

	маТоварыПоВесам = Новый Массив;	//Рез
	
	маВесы = Новый Массив;
	ЗаполнитьМаВесы(ДеревоВесов, маВесы);
	Если маВесы.Количество() = 0 Тогда
		Сообщить("Нет выбранных весов!");
		Возврат маТоварыПоВесам;
	КонецЕсли;
	
	Для Каждого Весы Из маВесы Цикл
		ОтборТоваров = Новый Структура("Флаг, Весы", Истина, Весы);
		маНоменклатураВесовСтроки = СписокВесовыхТоваров.НайтиСтроки(ОтборТоваров);
		чКоличествоТоваров = маНоменклатураВесовСтроки.Количество();
		Если чКоличествоТоваров > 0 Тогда
			маНоменклатураВесов = Новый Массив(чКоличествоТоваров);
			Для й = 0 По маНоменклатураВесовСтроки.Количество() - 1 Цикл
				маНоменклатураВесов[й] = маНоменклатураВесовСтроки[й].Номенклатура;
			КонецЦикла;
			маТоварыПоВесам.Добавить(Новый Структура("Весы, Номенклатура", Весы, маНоменклатураВесов));//в структуре два элемента - весы и список выгружаемой номенклатуры для этих весов
		КонецЕсли;
	КонецЦикла;
	
	Возврат маТоварыПоВесам;
КонецФункции
