//////////////////////////////////
// Параметры : 	ВнешнийВызов - Тип Булево , показывает что вызывается из другой формы
//			   	ВидДействия - Тип Строка ; Допустимые значения:"Приемка","Отгрузка","Инвентаризация"
//			   	АдресХранилища - Тип Строка, Адрес, гле хранится входящая ТЗ : колонки
//				СтруктураПараметров - Тип Структура, хранятся передаваемые параметры.
//				СтруктураПараметров.ОтборКонтрагент - Тип СправочникССылка.Контрагенты ;  отбо по контрагенту при приемке 
//             	СтруктураПараметров.ТипДействия - Тип Строка ;  допустимые значения "ЗагрузкаВТСД" ,"ВыгрузкаИзТСД"  при инвентаризации
//				СтруктураПараметров.УсловиеОтбора - Тип СписокЗначений ; пока сделал для Инвентаризационной описи, может где еще пригодится ; при инвентаризации

//////////////////////////////////////
////////////// ВАЖНО!!!!! Убрать обрезание до 10 символов второго поля, поставли временно как заглушку

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// ОБРАБОТЧИКИ ФОРМЫ ОБЩИЕ, ОБЩИЕ ПРОЦЕДУРЫ//////////////////////

&НаСервереБезКонтекста
Процедура ДобавитьОтборВСКД(НаборДаннных,ИмяЭлемента,Использование=Ложь)
	Отбор = НаборДаннных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Использование;
	Если ИмяЭлемента <> "Дата" Тогда   // решил дату не выносить в отбор
		Отбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);	
	КонецЕсли;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
КонецПроцедуры

// поля в СКД
&НаСервереБезКонтекста
Процедура ДобавитьПолеВНаборДанных(НаборДанных,ИмяЭлемента,Заголовок)
	Поле = НаборДанных.поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.Поле = ИмяЭлемента;
	Поле.ПутьКДанным = ИмяЭлемента;
	Поле.Заголовок = Заголовок;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВВыборКолонок(НаборДанных,ИмяЭлемента,Заголовок,Использование=Истина)
	ВыбранноеПоле = НаборДанных.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Использование;
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	ВыбранноеПоле.Заголовок = Заголовок;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматЧисла(ВходящееЧисло)
	Возврат Формат(ВходящееЧисло,"ЧГ=0");	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьТекстБезРазделителя(ВходящийТекст)
	Возврат СокрЛП(СтрЗаменить(ВходящийТекст,","," "));	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Если Параметры.ВнешнийВызов Тогда
	//	Если Параметры.ВидДействия = "Инвентаризация" Тогда
	//		АдресХранилищаТовары = Параметры.АдресХранилища;
	//		
	//		
	//		
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	Элементы.КомпоновщикНастроекНастройкиОтбор_ТолькоОстатки.Пометка = Ложь;
	ТолькоОстатки = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикКнопки(Команда)
	Для Каждого ЭлементКнопка из Элементы.ГруппаКнопок.ПодчиненныеЭлементы Цикл
		Если ЭлементКнопка.Имя = Команда.Имя Тогда
			ЭлементКнопка.ЦветФона = WebЦвета.ЗеленаяЛужайка;	
			Элементы["Группа"+ЭлементКнопка.Имя].Видимость = Истина;
			Если ЭлементКнопка.Имя = "Отгрузка" Тогда
				ИнициализироватьКомпоновщикСКД_Отгрузка();
			ИначеЕсли ЭлементКнопка.Имя = "Инвентаризация" Тогда
				ИнициализироватьКомпоновщикСКД_Инвентарзация();
			ИначеЕсли ЭлементКнопка.Имя = "ПриемкаЦехаПриМагазине" Тогда
				ИнициализироватьКомпоновщикСКД_ПриемкаЦехаПриМагазине();
			КонецЕсли;
			
		Иначе
			ЭлементКнопка.ЦветФона = Новый Цвет();
			Элементы["Группа"+ЭлементКнопка.Имя].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСКД_Инвентаризация(ВходящийОтбор)
	Настройки = КомпоновщикНастроек_Инвентаризация.Настройки;
	ЭлементГруппаОтбор = Настройки.Отбор.Элементы[0];
	ЭлементГруппаОтбор.ПравоеЗначение = ВходящийОтбор;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.ВнешнийВызов Тогда
		ПодменаКнопки = Новый Структура("Имя",Параметры.ВидДействия);
		Для Каждого ЭлементКнопка из Элементы.ГруппаКнопок.ПодчиненныеЭлементы Цикл
			ЭлементКнопка.Видимость = ЭлементКнопка.Имя = Параметры.ВидДействия 
		КонецЦикла;
		Если Параметры.ВидДействия = "Инвентаризация" Тогда
			Отказ = Истина;
			
			Если ТипЗнч(Параметры.СтруктураПараметров)=Тип("Структура") И Параметры.СтруктураПараметров.Свойство("ТипДействия") И Параметры.СтруктураПараметров.ТипДействия="ЗагрузкаВТСД" Тогда
				ИнициализироватьКомпоновщикСКД_Инвентарзация();
				Если Параметры.СтруктураПараметров.Свойство("УсловиеОтбора") Тогда
					УстановитьПараметрыСКД_Инвентаризация(Параметры.СтруктураПараметров.УсловиеОтбора);
				КонецЕсли;
				Если Параметры.СтруктураПараметров.Свойство("ПоОстаткам") Тогда
					Элементы.КомпоновщикНастроекНастройкиОтбор_ТолькоОстатки.Пометка =Параметры.СтруктураПараметров.ПоОстаткам;
				КонецЕсли;
				ЗагрузитьВТерминал_Инвентаризация();
			ИначеЕсли ТипЗнч(Параметры.СтруктураПараметров)=Тип("Структура") И Параметры.СтруктураПараметров.Свойство("ТипДействия") И Параметры.СтруктураПараметров.ТипДействия="ВыгрузкаИзТСД" Тогда
				АдресХранилищаТекста = Неопределено;
				Если МенеджерОборудованияКлиент.ПолучитьФАйлИзДокумента(УникальныйИдентификатор, АдресХранилищаТекста,0) Тогда
					Инвентаризация_ОбработатьФайл(АдресХранилищаТекста);
				Иначе	
					Возврат;
				КонецЕсли;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внешний вызов с не предусмотренным параметром ");
			КонецЕсли;
		ИначеЕсли Параметры.ВидДействия = "Приемка" Тогда
			//Сразуже получим данные из ТСД
			Приемка_ВыгрузитьИзТерминала(UnDefined);
			//Запишем полученные данные из ТСД в хранилище
			ЗаписатьТЗВХранилище();
			//Закроем форму т.к. все данные уже получили и пользователю ее видеть необязательно.
			Закрыть(КодВозвратаДиалога.ОК);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		ПодменаКнопки = Новый Структура("Имя","Приемка");
	КонецЕсли;
	Элементы.ВыполнитьДействие.Заголовок = ?(Параметры.ВнешнийВызов,"Закрыть (с количеством)","Заполнить Приходные накладные");
	Элементы.ЗагрузкаКонтрагентов.Видимость = НЕ Параметры.ВнешнийВызов;
	ОбработчикКнопки(ПодменаКнопки);
КонецПроцедуры

//Шилов М.В. 25.02.14 Выгрузка по правилам для 8-,12-,13-ти значных ШК
&НаСервере
Функция ПолучитьШКДляВыгрузки(ИсходныйШК)
	ШКEAN8=Прав(ИсходныйШК,8);
	ШК12=Прав(ИсходныйШК,12);
	
	Если "00000"+ШКEAN8 = ИсходныйШК Тогда
		Возврат ШКEAN8;
	ИначеЕсли "0"+ШК12 = ИсходныйШК Тогда
		Возврат ШК12;
	Иначе 
		Возврат ИсходныйШК;
	КонецЕсли;
КонецФункции
//Шилов М.В. 25.02.14

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////П Р И Е М К А ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция Приемка_СформироватьФайлВыгрузкиНаСервере()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИсточникДанных.НомерСтроки КАК НомерСтроки,
	                      |	ИсточникДанных.Контрагент КАК Контрагент
	                      |ПОМЕСТИТЬ втКонтрагентов
	                      |ИЗ
	                      |	&ВходящаяТЗ КАК ИсточникДанных
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	НоменклатураКонтрагента.Номенклатура,
	                      |	НоменклатураКонтрагента.Контрагент,
	                      |	втКонтрагентов.НомерСтроки
	                      |ПОМЕСТИТЬ НоменклатураКонтрагентов
	                      |ИЗ
	                      |	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ втКонтрагентов КАК втКонтрагентов
	                      |		ПО НоменклатураКонтрагента.Контрагент = втКонтрагентов.Контрагент
	                      |ГДЕ
	                      |	НоменклатураКонтрагента.Контрагент В
	                      |			(ВЫБРАТЬ
	                      |				А.Контрагент
	                      |			ИЗ
	                      |				втКонтрагентов КАК А)
	                      |	И НЕ НоменклатураКонтрагента.Номенклатура.ПростойНабор
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	НоменклатураКонтрагентов.НомерСтроки КАК НомерСтроки,
	                      |	НоменклатураКонтрагентов.Контрагент КАК Контрагент,
	                      |	НоменклатураКонтрагентов.Номенклатура.Наименование КАК Номенклатура,
	                      |	НоменклатураКонтрагентов.Контрагент.Код КАК КодКонтрагента,
	                      |	НоменклатураКонтрагентов.Номенклатура.Код КАК НоменклатураКод,
	                      |	ВЫБОР
	                      |		КОГДА НоменклатураПолная.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Весовой)
	                      |			ТОГДА ""26"" + НоменклатураПолная.Код
	                      |		ИНАЧЕ НоменклатураПолная.Код
	                      |	КОНЕЦ КАК ШтрихКод
	                      |ИЗ
	                      |	НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураПолная
	                      |		ПО НоменклатураКонтрагентов.Номенклатура = НоменклатураПолная.Родитель
	                      |ГДЕ
	                      |	НЕ НоменклатураПолная.Код ЕСТЬ NULL 
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерСтроки
	                      |ИТОГИ
	                      |	МАКСИМУМ(КодКонтрагента),
	                      |	МАКСИМУМ(НоменклатураКод)
	                      |ПО
	                      |	НомерСтроки,
	                      |	Контрагент,
	                      |	Номенклатура");
	
	Запрос.УстановитьПараметр("ВходящаяТЗ",ОбъектОбработка.СписокКонтрагентов.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат "";
	КонецЕсли;
	ТекстФайлика = "";
	ВыборкаПоНомеру = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНомеру.Следующий() Цикл
		НомерСтроки = ВыборкаПоНомеру.НомерСтроки;
		ВыборкаПоКонтрагенту = ВыборкаПоНомеру.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			ТекстФАйлика = ТекстФайлика + ?(ПустаяСтрока(ТекстФайлика),"",Символы.ПС);
			ТекстФАйлика = ТекстФАйлика + ФорматЧисла(НомерСтроки)+",,"+Прав(ВернутьТекстБезРазделителя(СокрЛП(ВыборкаПоКонтрагенту.Контрагент))+"~"+ФорматЧисла(ВыборкаПоКонтрагенту.КодКонтрагента)+"~",67)+",,"; 	
			ВыборкаПоНоменклатуре = ВыборкаПоКонтрагенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНоменклатуре.Следующий() Цикл
				ТекстФАйлика = ТекстФайлика + ?(ПустаяСтрока(ТекстФайлика),"",Символы.ПС);
				//ТекстФАйлика = ТекстФайлика + Символы.ПС;
				ТекстФАйлика = ТекстФАйлика + Лев(ФорматЧисла(НомерСтроки)+" "+СокрЛП(ВыборкаПоНоменклатуре.НоменклатураКод),16)+",,"+Лев(ВернутьТекстБезРазделителя(ВыборкаПоНоменклатуре.Номенклатура),67)+",,"; 	
				ВыборкаПоШтрихКодам = ВыборкаПоНоменклатуре.Выбрать();
				Пока ВыборкаПоШтрихКодам.Следующий() Цикл
					ТекстФАйлика = ТекстФайлика + ?(ПустаяСтрока(ТекстФайлика),"",Символы.ПС);
					//ТекстФАйлика = ТекстФайлика + Символы.ПС;
					//Шилов М.В. 25.02.14 обработка 8-,12-,13-ти значных ШК
					ТекстФАйлика = ТекстФАйлика + Лев(ФорматЧисла(НомерСтроки)+ПолучитьШКДляВыгрузки(СокрЛП(ВыборкаПоШтрихКодам.ШтрихКод)),16)+","+Лев(ФорматЧисла(НомерСтроки)+" "+СокрЛП(ВыборкаПоНоменклатуре.НоменклатураКод),12)+",,,"; 	
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Возврат ТекстФайлика;
КонецФункции

&НаКлиенте
Процедура Приемка_ЗагрузитьВТерминал(Команда)
	ТекстФайлика = Приемка_СформироватьФайлВыгрузкиНаСервере();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла,КодировкаТекста.ANSI);
	МенеджерОборудованияКлиент.ЗагрузитьФайлВБазу(Новый УникальныйИдентификатор, ИмяВременногоФайла,1);
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентов1ВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	Контрагент = Элемент.ТекущаяСтрока;
	Строки = Объект.СписокКонтрагентов.НайтиСтроки(Новый Структура("Контрагент",Контрагент)); 
	Если Строки.Количество()=0 Тогда
		стр = Объект.СписокКонтрагентов.Добавить();
		стр.Контрагент = Контрагент;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОткрытьПодбор(Команда=Неопределено)
	Элементы.ГруппаСписокКонтрагентов.Видимость = Не Элементы.ГруппаСписокКонтрагентов.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Элементы.ГруппаСписокКонтрагентов.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанных_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанных_ПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
//считаем что файлик имеет структуру для приемки
Процедура Приемка_ОбработатьТекстНаСервере(АдресВХранилище)
	тзТоваров = Новый ТаблицаЗначений;
	тзТоваров.Колонки.Добавить("Контрагент");
	тзТоваров.Колонки.Добавить("Номенклатура");
	тзТоваров.Колонки.Добавить("Количество");
	тзТоваров.Колонки.Добавить("Документ");
	ТекстПарсинга = ПолучитьИзВременногоХранилища(АдресВХранилище);	
	ТекКонтрагент = Неопределено;
	СписокПротоколов = Новый СписокЗначений;
	
	ИспользуемыйПротокол 		= Неопределено;
	ДокументПриходнаяНакладная 	= Неопределено;
	
	Если Параметры.ВнешнийВызов Тогда // отберем только нужного контрагента 
		Если ТипЗнч(Параметры.СтруктураПараметров) = Тип("Структура") Тогда
			Если Параметры.СтруктураПараметров.Свойство("ОтборКонтрагент") Тогда
				ИспользуемыйПротокол 		= Параметры.СтруктураПараметров.ОтборКонтрагент;
			ИначеЕсли Параметры.СтруктураПараметров.Свойство("Основание") Тогда
				ДокументПриходнаяНакладная  = Параметры.СтруктураПараметров.Основание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для ъ=1 По СтрЧислоСтрок(ТекстПарсинга) Цикл
		СтрокаПарсинга = СтрПолучитьСтроку(ТекстПарсинга,ъ);
		МногоСтрочная = СтрЗаменить(СтрокаПарсинга,",",Символы.ПС);
		//++БИТ БВО - 2015-10-08 - Переделка под формат,выгруженный из базы, не из документа
		//Строка1 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,6)); // Штрих-код
		//Строка2 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,7)); // Протокол
		//Строка4 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,8)); // Принятое количество
		
		Строка1 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,1)); // Штрих-код
		Строка2 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,2)); // Протокол
		//Строка3 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,3)); // Наименование номенклатуры или штрих-код
		Строка4 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,4)); // Принятое количество
		//Строка5 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,5)); // Удалить
		
		Если ПустаяСтрока(Строка4) Тогда
			Продолжить;
		Иначе
			Попытка
				ПринятоеКоличество = Число(Строка4);
				Если ПринятоеКоличество = 0 Тогда
					Продолжить;	
				КонецЕсли;
				
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;	
		
		ТекКонтрагент = Справочники.Контрагенты.НайтиПоКоду(Строка2);
		Если ТекКонтрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Возникла ошибка при поиске кода контрагента в строке :
			|"+СтрокаПарсинга);
			Возврат;
		КонецЕсли;
		
		Если (ИспользуемыйПротокол <> Неопределено)and(ИспользуемыйПротокол <> ТекКонтрагент) Тогда
			Продолжить;
		КонецЕсли;	
		
		НайденныйПротокол = СписокПротоколов.НайтиПоЗначению(ТекКонтрагент);
		Если НайденныйПротокол = Неопределено Тогда
			СписокПротоколов.Добавить(ТекКонтрагент);
		КонецЕсли;
		
		ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(Строка1);
		If ТекНоменклатура.Пустая() Then
			ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(Сред(Строка1,3));
		EndIf;	
		
		Если ТекНоменклатура.Пустая() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена номенклатура с кодом "+Строка1);
			Продолжить;
		Иначе 
			ТекНоменклатура = ТекНоменклатура.Родитель;
		КонецЕсли;
		
		НоваяСтрока = тзТоваров.Добавить();
		НоваяСтрока.Контрагент = ТекКонтрагент;
		НоваяСтрока.Номенклатура = ТекНоменклатура;
		НоваяСтрока.Количество = -ПринятоеКоличество;
		Если ДокументПриходнаяНакладная <> UnDefined Тогда
			НоваяСтрока.Документ = ДокументПриходнаяНакладная;
		КонецЕсли;
	КонецЦикла;
	
	дзДеревоКонтрагентов = Новый ДеревоЗначений;
	дзДеревоКонтрагентов.Колонки.Добавить("Пометка");
	дзДеревоКонтрагентов.Колонки.Добавить("Контрагент");
	дзДеревоКонтрагентов.Колонки.Добавить("Документ");
	
	Если ДокументПриходнаяНакладная = UnDefined Тогда
		ДанныеДокументовПоПротоколу = ПолучитьДанныеДокументовПоВыбраннымПротоколам(СписокПротоколов);
		Для Каждого ТекущийПротокол Из СписокПротоколов Цикл
			НайденныеСтроки = ДанныеДокументовПоПротоколу.НайтиСтроки(Новый Структура("Протокол",ТекущийПротокол.Значение));
			втПланируемыеПоступления = ДанныеДокументовПоПротоколу.Скопировать(НайденныеСтроки);
			втПланируемыеПоступления.Свернуть("ПланируемоеПоступление");
			Если втПланируемыеПоступления.Количество() > 0 Тогда
				СтрокаУзел = дзДеревоКонтрагентов.Строки.Добавить();
				СтрокаУзел.Контрагент = ТекущийПротокол.Значение;
				Для Каждого ТекущееПП Из втПланируемыеПоступления Цикл
					ДокПриходнаяНакладная = ПолучитьПриходнуюНакладнуюПоПланируемомуПоступлению(ТекущееПП.ПланируемоеПоступление);
					СтрокаПодчиненная = СтрокаУзел.Строки.Добавить();
					СтрокаПодчиненная.Контрагент = ТекущийПротокол.Значение;
					СтрокаПодчиненная.Пометка = Ложь;
					СтрокаПодчиненная.Документ = ?(ДокПриходнаяНакладная=Неопределено,ТекущееПП.ПланируемоеПоступление,ДокПриходнаяНакладная);
				КонецЦикла;
			Иначе
				
			КонецЕсли;
		КонецЦикла;
	Иначе
		тзКонтрагентов = тзТоваров.Скопировать(,"Контрагент,Документ");
		тзКонтрагентов.Свернуть("Контрагент,Документ",);
		тзКонтрагентов.Сортировать("Контрагент,Документ");
		
		ТекКонтрагент = Неопределено;
		Для Каждого СтрокаТЗ из тзКонтрагентов Цикл
			Если ТекКонтрагент<>СтрокаТЗ.Контрагент Тогда
				ТекКонтрагент = СтрокаТЗ.Контрагент;
				СтрокаУзел = дзДеревоКонтрагентов.Строки.Добавить();
				СтрокаУзел.Контрагент = СтрокаТЗ.Контрагент;
			КонецЕсли;
			СтрокаПодчиненная = СтрокаУзел.Строки.Добавить();
			СтрокаПодчиненная.Контрагент = СтрокаТЗ.Контрагент;
			СтрокаПодчиненная.Пометка = Ложь;
			СтрокаПодчиненная.Документ = СтрокаТЗ.Документ;
		КонецЦикла;
	КонецЕсли;
	ЗначениеВРеквизитФормы(дзДеревоКонтрагентов,"КонтрагентыВыгрузкаИзТСД");
	ЗагрузкаТоваровИзТСД.Загрузить(тзТоваров);
	
	//Для ъ=1 По СтрЧислоСтрок(ТекстПарсинга) Цикл
	//	СтрокаПарсинга = СтрПолучитьСтроку(ТекстПарсинга,ъ);
	//	МногоСтрочная = СтрЗаменить(СтрокаПарсинга,",",Символы.ПС);
	//	Строка1 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,1));
	//	Строка2 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,2));
	//	Строка3 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,3));
	//	Строка4 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,4));
	//	Строка5 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,5));
	//	Если СтрЧислоВхождений(Строка3,"~")=2 И СтрЧислоВхождений(Строка1," ")=0 Тогда // предполагаем что это строка контрагента
	//		ПарсингСтрокиКонтрагента = СтрЗаменить(Строка3,"~",Символы.ПС);
	//		Попытка 
	//			КодКонтрагента = СтрПолучитьСтроку(ПарсингСтрокиКонтрагента,2);
	//			ТекКонтрагент = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
	//			Продолжить;
	//		Исключение
	//			Сообщение = Новый СообщениеПользователю;
	//			Сообщение.Текст = "Возникла ошибка при поиске кода контрагента в строке :
	//			|"+СтрокаПарсинга;
	//			Сообщение.Сообщить();
	//			Возврат;
	//		КонецПопытки;
	//	КонецЕсли;
	//	Если ПустаяСтрока(Строка4) Тогда Продолжить; КонецЕсли;  // нам не нужны позиции с 0 количеством
	//	ПарсингСтрокиСНоменклатурой = СтрЗаменить(Строка1," ",Символы.ПС);
	//	Попытка 
	//		КодНоменклатура = СтрПолучитьСтроку(ПарсингСтрокиСНоменклатурой,2);
	//	Исключение
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Возникла ошибка при поиске кода номенклатуры в строке :
	//		|"+СтрокаПарсинга;
	//		Сообщение.Сообщить();
	//		Возврат;
	//	КонецПопытки;
	//	ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(КодНоменклатура);
	//	Если ТекНоменклатура.Пустая() Тогда 
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Не найдена номенклатура с кодом "+КодНоменклатура;
	//		Сообщение.Сообщить();
	//		Продолжить; 
	//	КонецЕсли;	
	//	НоваяСтрока = тзТоваров.Добавить();
	//	НоваяСтрока.Контрагент = ТекКонтрагент;
	//	НоваяСтрока.Номенклатура = ТекНоменклатура;
	//	НоваяСтрока.Количество = Число(Строка4);
	//	НоваяСтрока.Документ = "Документ №"+Строка5;
	//КонецЦикла;
	//Если Параметры.ВнешнийВызов Тогда // отберем только нужного контрагента 
	//	Если ТипЗнч(Параметры.СтруктураПараметров) = Тип("Структура") И Параметры.СтруктураПараметров.Свойство("ОтборКонтрагент") Тогда
	//		МассивСтрокКонтрагента = тзТоваров.НайтиСтроки(Новый Структура("Контрагент",Параметры.СтруктураПараметров.ОтборКонтрагент));	
	//		тзБуфер = тзТоваров.Скопировать(МассивСтрокКонтрагента,);
	//		тзТоваров = тзБуфер.Скопировать(,);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//тзКонтрагентов = тзТоваров.Скопировать(,"Контрагент,Документ");
	//тзКонтрагентов.Свернуть("Контрагент,Документ",);
	//тзКонтрагентов.Сортировать("Контрагент,Документ");
	//дзДеревоКонтрагентов = Новый ДеревоЗначений;
	//дзДеревоКонтрагентов.Колонки.Добавить("Пометка");
	//дзДеревоКонтрагентов.Колонки.Добавить("Контрагент");
	//дзДеревоКонтрагентов.Колонки.Добавить("Документ");
	//
	//ТекКонтрагент = Неопределено;
	//Для Каждого СтрокаТЗ из тзКонтрагентов Цикл
	//	Если ТекКонтрагент<>СтрокаТЗ.Контрагент Тогда
	//		ТекКонтрагент = СтрокаТЗ.Контрагент;
	//		СтрокаУзел = дзДеревоКонтрагентов.Строки.Добавить();
	//		СтрокаУзел.Контрагент = СтрокаТЗ.Контрагент;
	//	КонецЕсли;
	//	СтрокаПодчиненная = СтрокаУзел.Строки.Добавить();
	//	СтрокаПодчиненная.Контрагент = СтрокаТЗ.Контрагент;
	//	СтрокаПодчиненная.Пометка = Ложь;
	//	СтрокаПодчиненная.Документ = СтрокаТЗ.Документ;
	//КонецЦикла;
	//ЗначениеВРеквизитФормы(дзДеревоКонтрагентов,"КонтрагентыВыгрузкаИзТСД");
	//ЗагрузкаТоваровИзТСД.Загрузить(тзТоваров);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДокументовПоВыбраннымПротоколам(СписокПротоколов)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВложенныйЗапрос.ПланируемоеПоступление,
	                      |	ВложенныйЗапрос.Протокол,
	                      |	ВложенныйЗапрос.Номенклатура,
	                      |	ВложенныйЗапрос.КоличествоРасход,
	                      |	ВложенныйЗапрос.КоличествоНачальныйОстаток,
	                      |	ВложенныйЗапрос.КоличествоКонечныйОстаток,
	                      |	ВложенныйЗапрос.КоличествоОборот,
	                      |	ВложенныйЗапрос.КоличествоПриход
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ЗаказыИсходящиеОстаткиИОбороты.ПоДокументу КАК ПланируемоеПоступление,
	                      |		ЗаказыИсходящиеОстаткиИОбороты.ПоДокументу.Контрагент КАК Протокол,
	                      |		ЗаказыИсходящиеОстаткиИОбороты.Номенклатура КАК Номенклатура,
	                      |		СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход,
	                      |		СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
	                      |		СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток,
	                      |		СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
	                      |		СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход
	                      |	ИЗ
	                      |		РегистрНакопления.ЗаказыИсходящие.ОстаткиИОбороты(
	                      |				,
	                      |				,
	                      |				,
	                      |				,
	                      |				ПоДокументу ССЫЛКА Документ.ПланируемаяПоставка
	                      |					И ПоДокументу.Контрагент В (&СписокПротоколов)
	                      |					И ПоДокументу.ДатаПоставкиДо >= НачалоПериода(&ТекущаяДата,День)) КАК ЗаказыИсходящиеОстаткиИОбороты
	                      |	
	                      |	СГРУППИРОВАТЬ ПО
	                      |		ЗаказыИсходящиеОстаткиИОбороты.ПоДокументу,
	                      |		ЗаказыИсходящиеОстаткиИОбороты.Номенклатура,
	                      |		ЗаказыИсходящиеОстаткиИОбороты.ПоДокументу.Контрагент) КАК ВложенныйЗапрос
	                      |ГДЕ
	                      |	ВложенныйЗапрос.КоличествоРасход = 0");
	Запрос.УстановитьПараметр("СписокПротоколов",СписокПротоколов);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();	
	Возврат ТаблицаРезультата;
КонецФункции	

&НаСервере
Функция ПолучитьПриходнуюНакладнуюПоПланируемомуПоступлению(ДокОснование)
	Результат = Неопределено;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПриходнаяНакладная.Ссылка
	                      |ИЗ
	                      |	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	                      |ГДЕ
	                      |	ПриходнаяНакладная.ДокОснование = &ДокОснование
	                      |	И НЕ ПриходнаяНакладная.ПометкаУдаления");
	Запрос.УстановитьПараметр("ДокОснование",ДокОснование);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Процедура Приемка_ВыгрузитьИзТерминала(Команда)
	АдресХранилищаТекста = Неопределено;
	
	//++БИТ БВО - 2015-10-08
	//Если НЕ МенеджерОборудованияКлиент.ПолучитьФайлИзДокумента(УникальныйИдентификатор, АдресХранилищаТекста,0) Тогда		
	Если НЕ МенеджерОборудованияКлиент.ПолучитьФайлИзБазы(УникальныйИдентификатор, АдресХранилищаТекста,1) Тогда
	//--БИТ БВО - 2051-10-08
		Возврат;
	КонецЕсли;	
	
	//Если НЕ МенеджерОборудованияКлиент.ПолучитьФайлИзБазы(УникальныйИдентификатор, АдресХранилищаТекста,1) Тогда
	//	Возврат;
	//КонецЕсли;		
	
	Приемка_ОбработатьТекстНаСервере(АдресХранилищаТекста);
	ЭтаФорма.ОбновитьОтображениеДанных();
	Элементы.ЗагрузкаТоваровИзТСД.Видимость = ЗагрузкаТоваровИзТСД.Количество()>0;
	КонтрагентыВыгрузкаИзТСДПриАктивизацииСтроки();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыгрузкаИзТСДПриАктивизацииСтроки(Элемент=Неопределено)
	Если Элементы.КонтрагентыВыгрузкаИзТСД.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	УстановитьОтборПоКонтрагенту(Элементы.КонтрагентыВыгрузкаИзТСД.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоКонтрагенту(ТекДанные)
	Элементы.ЗагрузкаТоваровИзТСД.ОтборСтрок= Новый ФиксированнаяСтруктура("Контрагент,Документ",ТекДанные.Контрагент,ТекДанные.Документ);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТЗВХранилище()
	//ДеревоЗначений = РеквизитФормыВЗначение("КонтрагентыВыгрузкаИзТСД");
	//МассивСтрокДЗ = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Пометка",Истина),Истина);
	//Если МассивСтрокДЗ.Количество()<>1 Тогда
	//	Возврат;
	//КонецЕсли;
	//МассивСтрок = ЗагрузкаТоваровИзТСД.НайтиСтроки(Новый Структура("Контрагент,Документ",МассивСтрокДЗ[0].Контрагент,МассивСтрокДЗ[0].Документ));
	//ПоместитьВоВременноеХранилище(ЗагрузкаТоваровИзТСД.Выгрузить(МассивСтрок,),Параметры.АдресХранилища);
	//МассивСтрок = ЗагрузкаТоваровИзТСД.НайтиСтроки(Новый Структура("Контрагент,Документ",МассивСтрокДЗ[0].Контрагент,МассивСтрокДЗ[0].Документ));
	ПоместитьВоВременноеХранилище(ЗагрузкаТоваровИзТСД.Выгрузить(),Параметры.АдресХранилища);	
КонецПроцедуры

&НаСервере
Процедура СформироватьАктыПриемки()
	ДеревоЗначений = РеквизитФормыВЗначение("КонтрагентыВыгрузкаИзТСД");
	МассивСтрок = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Пометка",Истина),Истина);
	Если МассивСтрок.Количество()= 0 Тогда Возврат; КонецЕсли;
	ЕстьОшибка = Ложь;
	МассивДокументов = Новый Массив;
	
	НачатьТранзакцию();
	Для Каждого СтрокаДерева из МассивСтрок Цикл
		МассивСтрокТЧ = ЗагрузкаТоваровИзТСД.НайтиСтроки(Новый Структура("Контрагент,Документ",СтрокаДерева.Контрагент,СтрокаДерева.Документ));
		Если МассивСтрокТЧ.Количество()=0 Тогда Продолжить; КонецЕсли;
		Если МассивСтрокТЧ.Количество()=0 Тогда Продолжить; КонецЕсли;
		ДокОбъект = Документы.АктПриемки.СоздатьДокумент();
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.ИнициализироватьДокумент();
		ДокОбъект.Контрагент = СтрокаДерева.Контрагент;
		ДокОбъект.Грузоотправитель = СтрокаДерева.Контрагент;
		Для Каждого СтрокаМассиваТЧ из МассивСтрокТЧ Цикл
			НоваяСтрока = ДокОбъект.Состав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассиваТЧ);
			НоваяСтрока.Цена = Разработка_Ижтрейдинг_Сервер.ПолучитьЦенуНоменклатуры(ДокОбъект.Контрагент,НоваяСтрока.Номенклатура);
			СтруктураДанных = Новый Структура;    	
			СтруктураДанных.Вставить("Номенклатура",	 НоваяСтрока.Номенклатура);
			СтруктураДанных.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
			СтруктураДанных.Вставить("Коэффициент",НоваяСтрока.Коэффициент);
			СтруктураДанных.Вставить("СтавкаНДС", НоваяСтрока.Номенклатура);
			ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураДанных);
			НоваяСтрока.Ключ = Новый УникальныйИдентификатор;
			НоваяСтрока.КоличествоПоДокументу = НоваяСтрока.Количество;
			НоваяСтрока.СуммаПоДокументу = НоваяСтрока.Количество * НоваяСтрока.Цена;
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
		КонецЦикла;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			МассивДокументов.Добавить(ДокОбъект);
		Исключение
			ЕстьОшибка = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сохранить документ Акт приемки ("+ОписаниеОшибки()+")");
		КонецПопытки;
	КонецЦикла;
	Если ЕстьОшибка Тогда 
		ОтменитьТранзакцию();
		Возврат; 
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	Для Каждого СтрокаМассива из МассивДокументов Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сформирован "+СтрокаМассива.Ссылка,СтрокаМассива);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОбойтиДерево(УзелДерева=Неопределено)
	Если УзелДерева = Неопределено Тогда
		УзелДерева = КонтрагентыВыгрузкаИзТСД[0];
	КонецЕсли;
	Если УзелДерева.получитьЭлементы().Количество()=0 Тогда 
	КонецЕсли;	
	
	
	
КонецФункции	


&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Параметры.ВнешнийВызов Тогда // обрабатывается, когда вызываем модально из приходной накладной
		ЗаписатьТЗВХранилище();
		Закрыть(КодВозвратаДиалога.ОК);
	Иначе  // тут обрабатываем обычный
		//СформироватьАктыПриемки();
		ЗаполнитьПриходнуюНакладную();
		DoMessageBox("Заполнение выбранных приходных накладных выполнено!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыгрузкаИзТСДПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элементы.КонтрагентыВыгрузкаИзТСД.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Отказ = Истина; Возврат; КонецЕсли;
	Если ТекДанные.ПолучитьРодителя()=Неопределено Тогда Отказ = Истина; Возврат; КонецЕсли;
	// далее написать условия блокирования при вызове из документа, чтоб блокировались "лишние" контрагенты
	Если Параметры.ВнешнийВызов Тогда
		УзелДерева = ТекДанные.ПолучитьРодителя();
		Для Каждого строкаДерева из УзелДерева.ПолучитьЭлементы() Цикл
			строкаДерева.Пометка=Ложь;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

// BIT_ALProzorov 10/07/2015 -->>
&НаСервере
Процедура ЗаполнитьПриходнуюНакладную()
	ДеревоЗначений = РеквизитФормыВЗначение("КонтрагентыВыгрузкаИзТСД");
	МассивСтрок = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Пометка",Истина),Истина);
	Если МассивСтрок.Количество()= 0 Тогда Возврат; КонецЕсли;
	ЕстьОшибка = Ложь;
	МассивДокументов = Новый Массив;
	
	НачатьТранзакцию();
	Для Каждого СтрокаДерева из МассивСтрок Цикл
		Если ТипЗнч(СтрокаДерева.Документ) <> Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			
			Продолжить;
		КонецЕсли;
		МассивСтрокТЧ = ЗагрузкаТоваровИзТСД.НайтиСтроки(Новый Структура("Контрагент,Документ",СтрокаДерева.Контрагент,СтрокаДерева.Документ));
		Если МассивСтрокТЧ.Количество()=0 Тогда Продолжить; КонецЕсли;
		ДокОбъект = СтрокаДерева.Документ.ПолучитьОбъект();
		Для Каждого СтрокаНакладной Из ДокОбъект.Состав Цикл
			ДанныеПоНоменклатуре = 	ЗагрузкаТоваровИзТСД.НайтиСтроки(Новый Структура("Контрагент,Документ,Номенклатура",СтрокаДерева.Контрагент,СтрокаДерева.Документ,СтрокаНакладной.Номенклатура));
			Если ДанныеПоНоменклатуре.Количество() <> 0 Тогда
				СтрокаНакладной.Количество = ДанныеПоНоменклатуре[0].Количество;
				Если ОбщегоНазначенияСервер.ЕстьПравоСмотретьСебестоимость() Тогда
					Если ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ВключатьНДСВЦеныКонтрагентов") = Истина Тогда
						СтрокаНакладной.Сумма = Окр(СтрокаНакладной.Количество * СтрокаНакладной.Цена,2);
						СтрокаНакладной.СуммаНДС = РассчитатьСуммуНДС(СтрокаНакладной.Сумма,Истина,ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаНакладной.СтавкаНДС));
						СтрокаНакладной.СуммаБезНДС = СтрокаНакладной.Сумма - СтрокаНакладной.СуммаНДС;
						СтрокаНакладной.ЦенаБезНДС = Окр(СтрокаНакладной.СуммаБезНДС / СтрокаНакладной.Количество,2);
					Иначе
						СтавкаНДС = ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаНакладной.СтавкаНДС);
						СтрокаНакладной.СуммаБезНДС = Окр(СтрокаНакладной.ЦенаБезНДС * СтрокаНакладной.Количество, 2);
						СтрокаНакладной.Сумма = СтрокаНакладной.СуммаБезНДС * (1 + СтавкаНДС / 100);
						СтрокаНакладной.СуммаНДС = СтрокаНакладной.Сумма - СтрокаНакладной.СуммаБезНДС;
						СтрокаНакладной.Цена = Окр(СтрокаНакладной.Сумма / СтрокаНакладной.Количество, 2);
					КонецЕсли;
				КонецЕсли;
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("Номенклатура",СтрокаНакладной.Номенклатура);
				СтруктураДанных.Вставить("ЕдиницаИзмерения",СтрокаНакладной.ЕдиницаИзмерения);
				СтруктураДанных.Вставить("Количество",СтрокаНакладной.Количество);
				СтруктураДанных.Вставить("ЕдиницаВеса",СтрокаНакладной.ЕдиницаВеса);
				СтруктураДанных.Вставить("Вес",СтрокаНакладной.Вес);
				ОбработкаТабличныхЧастейСервер.ЗаполнитьВесТовара(СтруктураДанных);
				СтрокаНакладной.ЕдиницаВеса = СтруктураДанных.ЕдиницаВеса;
				СтрокаНакладной.Вес = СтруктураДанных.Вес;
			КонецЕсли;
		КонецЦикла;
		Попытка 
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			МассивДокументов.Добавить(ДокОбъект);
		Исключение
			ЕстьОшибка = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сохранить документ """+СокрЛП(СтрокаДерева.Документ)+""" ("+ОписаниеОшибки()+")");
		КонецПопытки;
	КонецЦикла;	
	Если ЕстьОшибка Тогда 
		ОтменитьТранзакцию();
		Возврат; 
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	
	//НачатьТранзакцию();
	//Для Каждого СтрокаДерева из МассивСтрок Цикл
	//	МассивСтрокТЧ = ЗагрузкаТоваровИзТСД.НайтиСтроки(Новый Структура("Контрагент,Документ",СтрокаДерева.Контрагент,СтрокаДерева.Документ));
	//	Если МассивСтрокТЧ.Количество()=0 Тогда Продолжить; КонецЕсли;
	//	Если МассивСтрокТЧ.Количество()=0 Тогда Продолжить; КонецЕсли;
	//	ДокОбъект = Документы.АктПриемки.СоздатьДокумент();
	//	ДокОбъект.Дата = ТекущаяДата();
	//	ДокОбъект.ИнициализироватьДокумент();
	//	ДокОбъект.Контрагент = СтрокаДерева.Контрагент;
	//	ДокОбъект.Грузоотправитель = СтрокаДерева.Контрагент;
	//	Для Каждого СтрокаМассиваТЧ из МассивСтрокТЧ Цикл
	//		НоваяСтрока = ДокОбъект.Состав.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассиваТЧ);
	//		НоваяСтрока.Цена = Разработка_Ижтрейдинг_Сервер.ПолучитьЦенуНоменклатуры(ДокОбъект.Контрагент,НоваяСтрока.Номенклатура);
	//		СтруктураДанных = Новый Структура;    	
	//		СтруктураДанных.Вставить("Номенклатура",	 НоваяСтрока.Номенклатура);
	//		СтруктураДанных.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
	//		СтруктураДанных.Вставить("Коэффициент",НоваяСтрока.Коэффициент);
	//		СтруктураДанных.Вставить("СтавкаНДС", НоваяСтрока.Номенклатура);
	//		ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураДанных);
	//		НоваяСтрока.Ключ = Новый УникальныйИдентификатор;
	//		НоваяСтрока.КоличествоПоДокументу = НоваяСтрока.Количество;
	//		НоваяСтрока.СуммаПоДокументу = НоваяСтрока.Количество * НоваяСтрока.Цена;
	//		НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
	//	КонецЦикла;
	//	Попытка
	//		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	//		МассивДокументов.Добавить(ДокОбъект);
	//	Исключение
	//		ЕстьОшибка = Истина;
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Не удалось сохранить документ Акт приемки ("+ОписаниеОшибки()+")";
	//		Сообщение.Сообщить();	
	//	КонецПопытки;
	//КонецЦикла;
	//Если ЕстьОшибка Тогда 
	//	ОтменитьТранзакцию();
	//	Возврат; 
	//КонецЕсли;
	//ЗафиксироватьТранзакцию();
	//Для Каждого СтрокаМассива из МассивДокументов Цикл
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Сформирован "+СтрокаМассива.Ссылка;
	//	Сообщение.УстановитьДанные(СтрокаМассива);
	//	Сообщение.Сообщить();	
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПротокол(Команда)
	
	ФормаВыборкПротокола = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора");
	ФормаВыборкПротокола.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	
	СписокДоступныхПротоколов = ПолучитьСписокДоступныхПротоколовНаСервере();
	
	ЭлементОтбора = ФормаВыборкПротокола.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокДоступныхПротоколов;
	ЭлементОтбора.Использование = Истина;
	
	ВыбранныйПротокол = ФормаВыборкПротокола.ОткрытьМодально();
	Если ВыбранныйПротокол <> Неопределено Тогда
		ЭлементыДерева = ПриемкаДанныеДляЗагрузки.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() = 0 Тогда
			НовыйЭлемент = ЭлементыДерева.Добавить();
			НовыйЭлемент.Контрагент = ВыбранныйПротокол; 
			ПланируемыеПоставкиПоПротоколу = ПолучитьСписокДоступныхПланируемыхПоступленийНаСервере(ВыбранныйПротокол);
			Для Каждого ТекущаяПП Из ПланируемыеПоставкиПоПротоколу Цикл
				НЭ = НовыйЭлемент.ПолучитьЭлементы();
				НоваяПП = НЭ.Добавить();
				НоваяПП.ПланируемаяПоставка = ТекущаяПП;
			КонецЦикла;
		Иначе
			ДобавитьЭлемент = Истина;
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				Если ЭлементДерева.Контрагент = ВыбранныйПротокол Тогда
					ДобавитьЭлемент = Ложь;
					Break;
				КонецЕсли;	
			КонецЦикла;
			Если ДобавитьЭлемент Тогда
				НовыйЭлемент = ЭлементыДерева.Добавить();
				НовыйЭлемент.Контрагент = ВыбранныйПротокол;
				ПланируемыеПоставкиПоПротоколу = ПолучитьСписокДоступныхПланируемыхПоступленийНаСервере(ВыбранныйПротокол);
				Для Каждого ТекущаяПП Из ПланируемыеПоставкиПоПротоколу Цикл
					НЭ = НовыйЭлемент.ПолучитьЭлементы();
					НоваяПП = НЭ.Добавить();
					НоваяПП.ПланируемаяПоставка = ТекущаяПП;
				КонецЦикла;	
			Иначе
				Предупреждение("Выбранный контрагент уже есть в списке!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДоступныхПротоколовНаСервере()
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ВложенныйЗапрос.Контрагент
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ВложенныйЗапрос.ПоДокументу КАК ПоДокументу,
	                      |		ВложенныйЗапрос.ПоДокументу.Контрагент КАК Контрагент
	                      |	ИЗ
	                      |		(ВЫБРАТЬ
	                      |			СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход,
	                      |			ЗаказыИсходящиеОстаткиИОбороты.ПоДокументу КАК ПоДокументу,
	                      |			СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
	                      |			СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток,
	                      |			СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
	                      |			СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход
	                      |		ИЗ
	                      |			РегистрНакопления.ЗаказыИсходящие.ОстаткиИОбороты(
	                      |					,
	                      |					,
	                      |					,
	                      |					,
	                      |					ПоДокументу ССЫЛКА Документ.ПланируемаяПоставка
	                      |						И ПоДокументу.ДатаПоставкиДо >= НачалоПериода(&ТекущаяДата,День)) КАК ЗаказыИсходящиеОстаткиИОбороты
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			ЗаказыИсходящиеОстаткиИОбороты.ПоДокументу) КАК ВложенныйЗапрос
	                      |	ГДЕ
	                      |		ВложенныйЗапрос.КоличествоРасход = 0) КАК ВложенныйЗапрос");
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());						  
	МассивКонтрагентов = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивКонтрагентов.Добавить(Выборка.Контрагент);
	КонецЦикла;
	Возврат МассивКонтрагентов;
КонецФункции	

&НаКлиенте
Процедура ДобавитьПланируемуюПоставку(Команда)
	ЭлементыДерева = ПриемкаДанныеДляЗагрузки.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		Предупреждение("Не выбран ни один контрагент.");
	Иначе
		Если Элементы.ПриемкаДанныеДляЗагрузки.ТекущиеДанные <> Неопределено Тогда
			Если ЗначениеЗаполнено(Элементы.ПриемкаДанныеДляЗагрузки.ТекущиеДанные.Контрагент) Тогда
				ТекущийПротокол = Элементы.ПриемкаДанныеДляЗагрузки.ТекущиеДанные.Контрагент;
			Иначе
				ТекущийПротокол = Элементы.ПриемкаДанныеДляЗагрузки.ТекущиеДанные.ПолучитьРодителя().Контрагент;
			КонецЕсли;
			
			СписокДоступныхПП = ПолучитьСписокДоступныхПланируемыхПоступленийНаСервере(ТекущийПротокол);
			
			ФормаВыбораПланируемойПоставки = ПолучитьФорму("Документ.ПланируемаяПоставка.ФормаВыбора");
		    ЭлементОтбора = ФормаВыбораПланируемойПоставки.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		    ЭлементОтбора.ПравоеЗначение = СписокДоступныхПП;
		    ЭлементОтбора.Использование = Истина;
			
			ВыбраннаяПоставка = ФормаВыбораПланируемойПоставки.ОткрытьМодально();
			Если ВыбраннаяПоставка <> Неопределено Тогда
				ЭлементыДерева = ПриемкаДанныеДляЗагрузки.ПолучитьЭлементы();
				Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
					Если ЭлементДерева.Контрагент = ТекущийПротокол Тогда
						НЭ = ЭлементДерева.ПолучитьЭлементы();
						ДобавлятьНовыйЭлемент = Истина;
						Для Каждого ТЭ Из НЭ Цикл
							Если ТЭ.ПланируемаяПоставка = ВыбраннаяПоставка Тогда
								ДобавлятьНовыйЭлемент = Ложь;
								Прервать;
							КонецЕсли	
						КонецЦикла;
						
						Если ДобавлятьНовыйЭлемент Тогда
							НовыйЭлемент = НЭ.Добавить();
							НовыйЭлемент.ПланируемаяПоставка = ВыбраннаяПоставка;
						КонецЕсли;	
						Break;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДоступныхПланируемыхПоступленийНаСервере(Протокол)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВложенныйЗапрос.ПоДокументу
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход,
	                      |		ЗаказыИсходящиеОстаткиИОбороты.ПоДокументу КАК ПоДокументу,
	                      |		СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
	                      |		СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток,
	                      |		СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
	                      |		СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход
	                      |	ИЗ
	                      |		РегистрНакопления.ЗаказыИсходящие.ОстаткиИОбороты(
	                      |				,
	                      |				,
	                      |				,
	                      |				,
	                      |				ПоДокументу ССЫЛКА Документ.ПланируемаяПоставка
	                      |					И ПоДокументу.Контрагент = &Контрагент
	                      |					И ПоДокументу.ДатаПоставкиДо >= НачалоПериода(&ТекущаяДата,День)) КАК ЗаказыИсходящиеОстаткиИОбороты
	                      |	
	                      |	СГРУППИРОВАТЬ ПО
	                      |		ЗаказыИсходящиеОстаткиИОбороты.ПоДокументу) КАК ВложенныйЗапрос
	                      |ГДЕ
	                      |	ВложенныйЗапрос.КоличествоРасход = 0");
	Запрос.УстановитьПараметр("Контрагент",Протокол);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	МассивДокументов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.ПоДокументу);	
	КонецЦикла;
	Возврат МассивДокументов;
КонецФункции	

&НаКлиенте
Процедура ПриемкаДанныеДляЗагрузкиКонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элементы.ПриемкаДанныеДляЗагрузки.ТекущиеДанные.ПланируемаяПоставка) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(Элементы.ПриемкаДанныеДляЗагрузки.ТекущиеДанные.ПланируемаяПоставка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ЗагрузкаВТерминал(Команда)
	МассивПланируемыхПоступлений = Новый Массив;
	ЭлементыДерева = ПриемкаДанныеДляЗагрузки.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ПланируемыеПоступленияПоПротоколу = ЭлементДерева.ПолучитьЭлементы();
		Для Каждого ТекущееПП Из ПланируемыеПоступленияПоПротоколу Цикл
			МассивПланируемыхПоступлений.Добавить(ТекущееПП.ПланируемаяПоставка);	
		КонецЦикла;
	КонецЦикла;
	ТекстФайлика = Приемка_ФормированиеФайлаВыгрузкиНаСервере(МассивПланируемыхПоступлений);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла,КодировкаТекста.ANSI);
	МенеджерОборудованияКлиент.ЗагрузитьФайлВБазу(Новый УникальныйИдентификатор, ИмяВременногоФайла,1);
КонецПроцедуры

&НаСервере
Функция Приемка_ФормированиеФайлаВыгрузкиНаСервере(СписокПланируемыхПоступлений)
	ПустаяСтрока = "                                                                      ";
	ТекстФайлика = "";
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЗаказыИсходящиеОстаткиИОбороты.Номенклатура КАК Номенклатура,
	                      |	ЗаказыИсходящиеОстаткиИОбороты.ПоДокументу.Контрагент КАК Протокол,
	                      |	СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
	                      |	СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток,
	                      |	СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
	                      |	СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
	                      |	СУММА(ЗаказыИсходящиеОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
	                      |ИЗ
	                      |	РегистрНакопления.ЗаказыИсходящие.ОстаткиИОбороты(, , Регистратор, , ПоДокументу В (&СписокПланируемыхПоставок)) КАК ЗаказыИсходящиеОстаткиИОбороты
	                      |ГДЕ
	                      |	ЗаказыИсходящиеОстаткиИОбороты.Регистратор ССЫЛКА Документ.ПланируемаяПоставка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ЗаказыИсходящиеОстаткиИОбороты.ПоДокументу.Контрагент,
	                      |	ЗаказыИсходящиеОстаткиИОбороты.Номенклатура");
	Запрос.УстановитьПараметр("СписокПланируемыхПоставок",СписокПланируемыхПоступлений);
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		ДанныеПоШтрихКодам = Справочники.Номенклатура.Выбрать(Выборка.Номенклатура);
		ПервыйШтрихКод = "";
		Протокол = СокрЛП(Выборка.Протокол.Код);
		НаименованиеНоменклатуры = ВернутьТекстБезРазделителя(Выборка.Номенклатура.ПолноеНаименование);
		Принято = Формат(Выборка.КоличествоПриход,"ЧЦ=5; ЧГ=0");
		Пока ДанныеПоШтрихКодам.Следующий() Цикл
			Если ДанныеПоШтрихКодам.Транзакционный Тогда
				Продолжить;
			КонецЕсли;			
			ТекстФайлика = ТекстФайлика + ?(ТекстФайлика = "","",Символы.ПС);
			Шкод = СокрЛП(ДанныеПоШтрихКодам.Код);
			Имя = ?(ПервыйШтрихКод = "",НаименованиеНоменклатуры,ПервыйШтрихКод);
			Если ПервыйШтрихКод = "" Тогда
				ПервыйШтрихКод = Шкод;
			КонецЕсли;
			ТекстФайлика = ТекстФайлика
				+ Лев(Шкод+ПустаяСтрока,16)+","
				+ Лев(Протокол+ПустаяСтрока,12)+","
				+ Лев(Имя+ПустаяСтрока,68)+","
				+ Лев(Принято+ПустаяСтрока,5)+","
				+ "0";
		КонецЦикла;	
	КонецЦикла;
	Возврат ТекстФайлика;
КонецФункции	

&НаКлиенте
Процедура КонтрагентыВыгрузкаИзТСДПометкаПриИзменении(Элемент)
	РаспеределитьДокументыПоПозициямНаСервере();
	КонтрагентыВыгрузкаИзТСДПриАктивизацииСтроки();
КонецПроцедуры

&НаСервере
Процедура РаспеределитьДокументыПоПозициямНаСервере()
	ЭлементыДерева = РеквизитФормыВЗначение("КонтрагентыВыгрузкаИзТСД");
	МассивЛистьев = Новый Массив;
	Для Каждого ВеткаДерева Из ЭлементыДерева.Строки Цикл
		//ЛистьяДерева = ВеткаДерева.ПолучитьЭлементы();
		Для Каждого ЛистДерева Из ВеткаДерева.Строки Цикл
			Если ЛистДерева.Пометка Тогда
				МассивЛистьев.Добавить(ЛистДерева);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Очистим текущее распределение
	ВремТаб = ЗагрузкаТоваровИзТСД.Выгрузить();
	ВремТаб.Свернуть("Номенклатура, Контрагент","Количество");
	ЗагрузкаТоваровИзТСД.Загрузить(ВремТаб);
	Для Каждого ЛистДерева Из МассивЛистьев Цикл
		ДокументЗагрузки = ЛистДерева.Документ;
		ПолеКоличество = ?(ТипЗнч(ДокументЗагрузки)=Тип("ДокументСсылка.ПриходнаяНакладная"),"КоличествоПоДокументу","Количество");
		Для Каждого ТекСтрокаСостава Из ДокументЗагрузки.Состав Цикл
			НайденныеСтроки = ЗагрузкаТоваровИзТСД.НайтиСтроки(Новый Структура("Номенклатура",ТекСтрокаСостава.Номенклатура));
			Для Каждого СтрокаЗагрузки Из НайденныеСтроки Цикл
				Если СтрокаЗагрузки.Документ <> UnDefined Тогда
					Continue;
				КонецЕсли;
				
				РаспределенноеКоличество = Мин(ТекСтрокаСостава[ПолеКоличество],СтрокаЗагрузки.Количество);
				
				Если РаспределенноеКоличество = СтрокаЗагрузки.Количество Тогда
					СтрокаЗагрузки.Документ = ДокументЗагрузки;	
				ИначеЕсли РаспределенноеКоличество < СтрокаЗагрузки.Количество Тогда
					НоваяСтрока = ЗагрузкаТоваровИзТСД.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗагрузки);
					НоваяСтрока.Количество = СтрокаЗагрузки.Количество - РаспределенноеКоличество;
					СтрокаЗагрузки.Документ = ДокументЗагрузки;
					СтрокаЗагрузки.Количество = РаспределенноеКоличество;
				Иначе
					СтрокаЗагрузки.Документ = ДокументЗагрузки;	
				КонецЕсли;
				Break;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры	
// BIT_ALProzorov 10/07/2015 <<--

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////О Т Г Р У З К А //////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ИнициализироватьКомпоновщикСКД_Отгрузка()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СКД = ОбработкаОбъект.ПолучитьМакет("Отгрузка");
	Объект.АдресСКД_Отгрузка = ПоместитьВоВременноеХранилище(СКД,Новый УникальныйИдентификатор); 
	КомпоновщикНастроек_Отгрузки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Объект.АдресСКД_Отгрузка));
	КомпоновщикНастроек_Отгрузки.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
КонецПроцедуры

&НаСервере
Функция СформироватьФайлБазыНаСервере_Отгрузка()
	СКД = ПолучитьИзВременногоХранилища(Объект.АдресСКД_Отгрузка);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД,КомпоновщикНастроек_Отгрузки.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ТЗРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Запрос = Новый Запрос("
	|Выбрать
	|	ИсточникДанных.Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	&ТЗРезультат КАК ИсточникДанных
	|;
	|/////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Номенклатура.Наименование КАК Номенклатура,
	|	НоменклатураКонтрагентов.Номенклатура.Код КАК НоменклатураКод,
	|	НоменклатураПолная.Код КАК ШтрихКод
	|ИЗ
	|	ВТНоменклатура КАК НоменклатураКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (Выбрать 
	|								А.Ссылка как Номенклатура, 
	|								А.Родитель как Родитель, 
	|								А.Код как Код 
	|							ИЗ 
	|								Справочник.Номенклатура КАК А 
	|							ГДЕ А.Родитель В (Выбрать Б.Номенклатура из ВТНоменклатура КАК Б)
	|								 ) КАК НоменклатураПолная
	|		ПО НоменклатураКонтрагентов.Номенклатура = НоменклатураПолная.Родитель
	|			
	|ГДЕ
	|	НЕ НоменклатураПолная.Код ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураКонтрагентов.Номенклатура.Код");
	Запрос.УстановитьПараметр("ТЗРезультат",ТЗРезультат);
	//Запрос.УстановитьПараметр("ТипШтрихКода",Справочники.СлужебныеКоды.НайтиПоКоду("EAN13"));
	Результат = Запрос.Выполнить();
	ТекстФайл = "";
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		//Шилов М.В. 25.02.14 обработка 8-,12-,13-ти значных ШК
		ТекстФайл = ТекстФайл + ?(ПустаяСтрока(ТекстФайл),"",Символы.ПС)+ Лев(ПолучитьШКДляВыгрузки(СокрЛП(Выборка.ШтрихКод)),15)+","+СокрЛП(ЛЕВ(Выборка.НоменклатураКод,12))+","+Лев(ВернутьТекстБезРазделителя(СокрЛП(Выборка.Номенклатура)),68)+",,";	
	КонецЦикла;
	Возврат ТекстФайл;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьВТерминал_Отгрузка(Команда)
	ТекстФайлика = СформироватьФайлБазыНаСервере_Отгрузка();	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла,КодировкаТекста.ANSI);
	МенеджерОборудованияКлиент.ЗагрузитьФайлВБазу(Новый УникальныйИдентификатор, ИмяВременногоФайла,2,0);
КонецПроцедуры

&НаСервере
Процедура НахождениеРасхожденийНаСервере(НомерДокумента,ДокументЗаказ)
	//++Минин
	тзРеализация = Новый ТаблицаЗначений;
	тзРеализация.Колонки.Добавить("Номенклатура");
	тзРеализация.Колонки.Добавить("Количество");
	Для Каждого Стр Из ДокументЗаказ Цикл 
		тзСостав = Стр.Значение.Состав.Выгрузить(,"Номенклатура,Количество");
		Для каждого эл Из тзСостав Цикл
			Строка = тзРеализация.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,эл);
		КонецЦикла;
	КонецЦикла;
	//--Минин
	тзРеализация.Свернуть("Номенклатура","Количество");
	Для Каждого СтрокаДокумента из тзРеализация Цикл
		МассивСтрок = Отгрузка_тзТоварРасхождения.НайтиСтроки(Новый Структура("НомерДок,Номенклатура",НомерДокумента,СтрокаДокумента.Номенклатура));
		Если МассивСтрок.Количество()=0 Тогда // значит нет такой строки, добавляем
			НоваяСтрока = Отгрузка_тзТоварРасхождения.Добавить();
			НоваяСтрока.НомерДок = НомерДокумента;
			НоваяСтрока.Номенклатура = СтрокаДокумента.Номенклатура;
			НоваяСтрока.Количество = 0;
			НоваяСтрока.КоличествоВРасходнойНакладной = СтрокаДокумента.Количество;
		Иначе
			СтрокаТЗ = МассивСтрок[0];
			СтрокаТЗ.КоличествоВРасходнойНакладной = СтрокаДокумента.Количество;
		КонецЕсли;
	КонецЦикла;
	//++Минин
	Для Каждого СтрокаТЗ из Отгрузка_тзТоварРасхождения Цикл
		СтрокаТЗ.Расхождение = СтрокаТЗ.Количество - СтрокаТЗ.КоличествоВРасходнойНакладной;
	КонецЦикла;
	//--Минин
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_тзДокументыДокументЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПолучитьФорму("Обработка.Izh_ТСД.Форма.ФормаПодбора");
	Результат = ФормаВыбора.ОткрытьМодально();
	Если Результат = Неопределено Тогда Возврат; КонецЕсли;
	ТекСтрока = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	ОчистимДанныеЗаказа(ТекСтрока);
	ТекСтрока.ДокументЗаказ = Результат;
	НахождениеРасхожденийНаСервере(ТекСтрока.НомерДок,ТекСтрока.ДокументЗаказ);
	Приемка_ПриАктивизацииСтроки();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНоменклатуру(ВходящийШК)
	ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(ВходящийШК);
	If ТекНоменклатура.Пустая() Then
		ВходящийШК = Сред(ВходящийШК,3);
		ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(ВходящийШК);
	EndIf;
	If ТекНоменклатура.Пустая() Then
		Return ТекНоменклатура;	
	Else
		Return ТекНоменклатура.Родитель;
	EndIf;
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	Номенклатура.Родитель КАК Номенклатура
	//|ИЗ
	//|	Справочник.Номенклатура КАК Номенклатура
	//|ГДЕ
	//|	Номенклатура.Код = &Код");
	//Запрос.УстановитьПараметр("Код",ВходящийШК);
	//Результат = Запрос.Выполнить();
	//Выборка =Результат.Выбрать();
	//Выборка.Следующий();
	//Возврат Выборка.Номенклатура;
КонецФункции

&НаСервере
Процедура Отгрузка_ОбработатьТекстНаСервере(АдресВХранилище)
	тзРезультат = ДанныеФормыВЗначение(Отгрузка_тзТоварРасхождения,Тип("ТаблицаЗначений"));
	тзРезультат.Очистить();
	ТекстПарсинга = ПолучитьИзВременногоХранилища(АдресВХранилище);	
	Для ъ=1 по СтрЧислоСтрок(ТекстПарсинга) Цикл
		Буфер = СтрПолучитьСтроку(ТекстПарсинга,ъ);
		Буфер = СтрЗаменить(Буфер,",",Символы.ПС);
		НоваяСтрока = тзРезультат.Добавить();
		НоваяСтрока.НомерДок = "Документ "+СтрПолучитьСтроку(Буфер,1);
		НоваяСтрока.Номенклатура = НайтиНоменклатуру(СтрПолучитьСтроку(Буфер,2));
		НоваяСтрока.Количество = Число(СтрПолучитьСтроку(Буфер,3));
		НоваяСтрока.Расхождение = 0;
	КонецЦикла;
	тзРезультат.Свернуть("НомерДок,Номенклатура","Количество,КоличествоВРасходнойНакладной,Расхождение");
	тзРезультат.Сортировать("НомерДок");
	тзДокументы = тзРезультат.Скопировать(,"НомерДок");
	тзДокументы.Свернуть("НомерДок");
	тзДокументы.Колонки.Добавить("ДокументЗаказ");
	ЗначениеВДанныеФормы(тзДокументы,Отгрузка_тзДокументы);
	ЗначениеВДанныеФормы(тзРезультат,Отгрузка_тзТоварРасхождения);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРасхождения(ТекДанные)
	Элементы.Отгрузка_тзТоварРасхожденияКоличествоВРасходнойНакладной.Видимость = ЗначениеЗаполнено(ТекДанные.ДокументЗаказ);
	Элементы.Отгрузка_тзТоварРасхожденияРасхождение.Видимость = ЗначениеЗаполнено(ТекДанные.ДокументЗаказ);
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ПриАктивизацииСтроки(Элемент=Неопределено)
	ТекДанные = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	УстановитьВидимостьРасхождения(ТекДанные);
	УстановитьОтборПоДокументу(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоДокументу(ТекДанные)
	Элементы.Отгрузка_тзТоварРасхождения.ОтборСтрок= Новый ФиксированнаяСтруктура("НомерДок",ТекДанные.НомерДок);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзТерминала_Отгрузка(Команда)
	АдресХранилищаТекста = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ПолучитьФАйлИзДокумента(УникальныйИдентификатор, АдресХранилищаТекста,0) Тогда
		Возврат;
	КонецЕсли;
	Отгрузка_ОбработатьТекстНаСервере(АдресХранилищаТекста);
	ЭтаФорма.ОбновитьОтображениеДанных();
	Элементы.Отгрузка_тзТоварРасхождения.Видимость = Отгрузка_тзТоварРасхождения.Количество()>0;
	Приемка_ПриАктивизацииСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ОчистимДанныеЗаказа(ТекСтрока)
	МассивСтрок = Отгрузка_тзТоварРасхождения.НайтиСтроки(Новый Структура("НомерДок",ТекСтрока.НомерДок));
	Для Каждого СтрокаТЧ из МассивСтрок Цикл
		СтрокаТЧ.КоличествоВРасходнойНакладной = 0;
	КонецЦикла;
	МассивСтрок = Отгрузка_тзТоварРасхождения.НайтиСтроки(Новый Структура("НомерДок,Количество",ТекСтрока.НомерДок,0));
	Для Каждого ЭлементаМассива из МассивСтрок Цикл
		Отгрузка_тзТоварРасхождения.Удалить(ЭлементаМассива);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_тзДокументыДокументЗаказОчистка(Элемент, СтандартнаяОбработка)
	ТекСтрока = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	Если ТекСтрока=Неопределено Тогда Возврат; КонецЕсли;
	ОчистимДанныеЗаказа(ТекСтрока);
	УстановитьВидимостьРасхождения(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_тзТоварРасхожденияКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	РассчитатьРасхождения(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_тзТоварРасхожденияКоличествоВРасходнойНакладнойПриИзменении(Элемент)
	ТекДанные = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	РассчитатьРасхождения(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРасхождения(ТекДанные)
	ТекДанные.Расхождение = ТекДанные.Количество - ТекДанные.КоличествоВРасходнойНакладной;
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	ТабДок = ПечатьНаСервере();
	ТабДок.ПокаЗать();
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()
	тзРезультат = ДанныеФормыВЗначение(Отгрузка_тзТоварРасхождения,Тип("ТаблицаЗначений"));
	ТабДок = Новый ТабличныйДокумент;
	ПострПечать = Новый ПостроительОтчета;
	ПострПечать.ИсточникДанных = Новый ОписаниеИсточникаДанных(тзРезультат);
	ПострПечать.ОформитьМакет();
	ПострПечать.Выполнить();
	Для каждого Колонка Из ПострПечать.ВыбранныеПоля Цикл
		Колонка.Представление = тзРезультат.Колонки[Колонка.Имя].Заголовок;
	КонецЦикла;
	ПострПечать.Вывести(ТабДок);
	Возврат ТабДок
КонецФункции

&НаКлиенте
Процедура Сохранить(Команда)
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогФыбораФайла.Фильтр	=	"Файл данных (*.xls)|*.xls";
	ДиалогФыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"xls";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	Если ДиалогФыбораФайла.Выбрать() Тогда
		ТабДок = ПечатьНаСервере();
		ТабДок.Записать(ДиалогФыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.XLS);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_тзДокументыДокументЗаказОткрытие(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.Отгрузка_тзДокументы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Документ) Тогда Возврат; КонецЕсли;
	ДокСсылка = ТекДанные.ДокументЗаказ;
	Попытка
		СтруктураПараметров = Новый Структура("Ключ", ДокСсылка);
		Форма = ПолучитьФорму("Документ.РасходнаяНакладная.ФормаОбъекта", СтруктураПараметров,ЭтаФорма,ЭтаФорма);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка: "+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура ФормаВыбораНесколькихЗаказов(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////И Н В Е Н Т А Р И З А Ц И Я///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ИнициализироватьКомпоновщикСКД_Инвентарзация()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СКД = ОбработкаОбъект.ПолучитьМакет("Инвентаризация");
	Объект.АдресСКД_Инвентаризация = ПоместитьВоВременноеХранилище(СКД,Новый УникальныйИдентификатор); 
	КомпоновщикНастроек_Инвентаризация.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Объект.АдресСКД_Инвентаризация));
	КомпоновщикНастроек_Инвентаризация.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
КонецПроцедуры

&НаСервере
Функция СформироватьФайлБазыНаСервере_Инвентаризация()
	СКД = ПолучитьИзВременногоХранилища(Объект.АдресСКД_Инвентаризация);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПараметрыТолькоОстатки = КомпоновщикНастроек_Инвентаризация.Настройки.ПараметрыДанных.Элементы[0];
	ПараметрыТолькоОстатки.Значение = Элементы.КомпоновщикНастроекНастройкиОтбор_ТолькоОстатки.Пометка;
	ПараметрыТолькоОстатки.Использование = Истина;
	
	ПараметрыДатаНачала = КомпоновщикНастроек_Инвентаризация.Настройки.ПараметрыДанных.Элементы[3];
	ПараметрыДатаНачала.Значение = ТекущаяДата()-63072000;
	ПараметрыДатаНачала.Использование = Истина;
	
	ПараметрыДатаОкончания = КомпоновщикНастроек_Инвентаризация.Настройки.ПараметрыДанных.Элементы[4];
	ПараметрыДатаОкончания.Значение = ТекущаяДата();
	ПараметрыДатаОкончания.Использование = Истина;
	
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД,КомпоновщикНастроек_Инвентаризация.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ТЗРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ТекстФайл = "";
	Для Каждого ТекущаяНоменклатура Из ТЗРезультат Цикл
		ВыборкаПоНоменклатуре = Справочники.Номенклатура.Выбрать(ТекущаяНоменклатура.Номенклатура);
		ПерваяСтрока = Истина;
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			ТекстФайл = ТекстФайл + ?(ТекстФайл="","",Символы.ПС);
			Если ПерваяСтрока Тогда
				Шкод		  = СокрЛП(ВыборкаПоНоменклатуре.ПрефиксPLU) + СокрЛП(ВыборкаПоНоменклатуре.Код);
				ВнутреннийКод = СокрЛП(ТекущаяНоменклатура.Номенклатура.Код);
				Имя			  = ВернутьТекстБезРазделителя(СокрЛП(ТекущаяНоменклатура.Номенклатура.ПолноеНаименование));
				ПерваяСтрока = Ложь;
				Количество = "0";
				Брак	   = "0";
				ТекстФайл  = ТекстФайл
					+ Лев(Шкод,16)+","
					+ Лев(ВнутреннийКод,12)+","
					+ Лев(Имя,68)+","
					+ Лев(Количество,5)+","
					+ Лев(Брак,50);
				ТекстФайл = ТекстФайл + ?(ТекстФайл="","",Символы.ПС);
				Шкод = СокрЛП(ТекущаяНоменклатура.Номенклатура.Код);
				Имя  = СокрЛП(ВыборкаПоНоменклатуре.ПрефиксPLU) + СокрЛП(ВыборкаПоНоменклатуре.Код);
				ВнутреннийКод = "";
			Иначе
				Шкод = СокрЛП(ТекущаяНоменклатура.Номенклатура.Код);
				Имя  = СокрЛП(ВыборкаПоНоменклатуре.ПрефиксPLU) + СокрЛП(ВыборкаПоНоменклатуре.Код);
				ВнутреннийКод = "";
			КонецЕсли;
			Количество = "0";
			Брак	   = "0";
			ТекстФайл  = ТекстФайл
				+ Лев(Шкод,16)+","
				+ Лев(ВнутреннийКод,12)+","
				+ Лев(Имя,68)+","
				+ Лев(Количество,5)+","
				+ Лев(Брак,50);
		КонецЦикла;	
	КонецЦикла;
	Возврат ТекстФайл;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьВТерминал_Инвентаризация(Команда=Неопределено)
	ТекстФайлика = СформироватьФайлБазыНаСервере_Инвентаризация();	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла,КодировкаТекста.ANSI);
	МенеджерОборудованияКлиент.ЗагрузитьФайлВБазу(Новый УникальныйИдентификатор, ИмяВременногоФайла,1);
КонецПроцедуры

&НаКлиенте
Процедура Кнопка_ТолькоОстатки(Команда)
	Элементы.КомпоновщикНастроекНастройкиОтбор_ТолькоОстатки.Пометка = НЕ Элементы.КомпоновщикНастроекНастройкиОтбор_ТолькоОстатки.Пометка;
КонецПроцедуры

&НаСервере
Процедура Инвентаризация_ОбработатьФайл(АдрестТекста)
	//тзТоваров = Новый ТаблицаЗначений;
	//тзТоваров.Колонки.Добавить("Номенклатура");
	//тзТоваров.Колонки.Добавить("Количество");
	//ТекстПарсинга = ПолучитьИзВременногоХранилища(АдрестТекста);	
	//Для ъ=1 По СтрЧислоСтрок(ТекстПарсинга) Цикл
	//	СтрокаПарсинга = СтрПолучитьСтроку(ТекстПарсинга,ъ);
	//	МногоСтрочная = СтрЗаменить(СтрокаПарсинга,",",Символы.ПС);
	//	Строка1 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,1));
	//	Строка2 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,2));
	//	Строка3 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,3));
	//	Строка4 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,4));
	//	Строка5 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,5));
	//	Если ПустаяСтрока(Строка4) Тогда Продолжить; КонецЕсли;  // нам не нужны позиции с 0 количеством
	//	Если НЕ ЗначениеЗаполнено(Число(Строка4)) Тогда Продолжить; КонецЕсли;  // нам не нужны позиции с 0 количеством
	//	ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(Строка2);
	//	Если ТекНоменклатура.Пустая() Тогда 
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Не найдена номенклатура с кодом "+Строка2;
	//		Сообщение.Сообщить();
	//		Продолжить; 
	//	КонецЕсли;	
	//	НоваяСтрока = тзТоваров.Добавить();
	//	НоваяСтрока.Номенклатура = ТекНоменклатура;
	//	НоваяСтрока.Количество = Число(Строка4);
	//КонецЦикла;
	//тзТоваров.Свернуть("Номенклатура","Количество");
	//ПоместитьВоВременноеХранилище(тзТоваров,Параметры.АдресХранилища);
	тзТоваров = Новый ТаблицаЗначений;
	тзТоваров.Колонки.Добавить("Номенклатура");
	тзТоваров.Колонки.Добавить("Количество");
	ТекстПарсинга = ПолучитьИзВременногоХранилища(АдрестТекста);	
	Для ъ=1 По СтрЧислоСтрок(ТекстПарсинга) Цикл
		СтрокаПарсинга = СтрПолучитьСтроку(ТекстПарсинга,ъ);
		МногоСтрочная = СтрЗаменить(СтрокаПарсинга,",",Символы.ПС);
		//Строка1 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,1)); // левое поле
		//Строка2 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,2)); // левое поле
		Строка3 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,4)); // Штрихкод
		Строка4 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,5)); // Количество
		//Строка5 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,5)); // Брак
		Если ПустаяСтрока(Строка4) Тогда Продолжить; КонецЕсли;
		ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(Строка3);
		If ТекНоменклатура.Пустая() Then
			ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(Сред(Строка3,3));
		EndIf;	
		Если ТекНоменклатура.Пустая() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена номенклатура с штрихкодом "+Строка3);
			Продолжить; 
		КонецЕсли;	
		НоваяСтрока = тзТоваров.Добавить();
		НоваяСтрока.Номенклатура = ТекНоменклатура.Родитель;
		НоваяСтрока.Количество = Число(Строка4);
	КонецЦикла;
	тзТоваров.Свернуть("Номенклатура","Количество");
	ПоместитьВоВременноеХранилище(тзТоваров,Параметры.АдресХранилища);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеИЗТСДВФайл(Команда)
	АдресХранилищаТекста = Неопределено;
	Если МенеджерОборудованияКлиент.ПолучитьФАйлИзДокумента(УникальныйИдентификатор, АдресХранилищаТекста,0) Тогда 
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ИмяПользователя = ОбщегоНазначения.ТекущийПользователь();
		ИмяПользователя = стрЗаменить(Строка(ИмяПользователя)," ","");
		ДиалогВыбораФайла.ПолноеИмяФайла = ИмяПользователя;
		Текст = "ru = ""Текст""; en = ""Text""";
		Фильтр = НСтр(Текст)+"(*.txt)|*.txt";
		ДиалогВыбораФайла.Фильтр = Фильтр;
		ДиалогВыбораФайла.Расширение = "txt";
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
		ДиалогВыбораФайла.Заголовок = "Укажите имя файла";
		Если ДиалогВыбораФайла.Выбрать() Тогда
			ТекстПарсинга = ПолучитьИзВременногоХранилища(АдресХранилищаТекста);	
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ТекстПарсинга);
			ТекстовыйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,КодировкаТекста.ANSI);
		Иначе
			Текст = "ru = ""Файл(ы) не выбран!""; en = ""File(s) not selected!""";
			Предупреждение(НСтр(Текст));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////О Т Г Р У З К А  П Р О Ч Е Е///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция СформироватьФайликНаСервере()
	ТХТ="";
	Для каждого ДокЗаказов Из Элементы.СпЗаказов.ВыделенныеСтроки Цикл
		ТХТ=ТХТ+Символы.ПС;
		НомДок=СокрЛП(ДокЗаказов.Номер);
		Префикс=Строка(ДокЗаказов.УникальныйИдентификатор());
		Клиент=СтрЗаменить(Лев(ДокЗаказов.Контрагент.Наименование,60),","," ");
		ТХТ=ТХТ+Префикс+",,,,,"+НомДок+","+Клиент;
		Для каждого СтрЗаказ Из ДокЗаказов.Состав Цикл
			ВыбрШК=Справочники.Номенклатура.Выбрать(СтрЗаказ.Номенклатура);
			Пока ВыбрШК.Следующий() Цикл
				ТХТ=ТХТ+Символы.ПС;
				ТХТ=ТХТ+Префикс+ПолучитьШКДляВыгрузки(СокрЛП(ВыбрШК.Код))+",,"+СтрЗаменить(СтрЗаказ.Номенклатура.Наименование,",",".")+",0,"+Формат(СтрЗаказ.Количество,"ЧГ=0; ЧРД='.'")+","+НомДок+","+Клиент;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТХТ=Сред(ТХТ,2);
	Возврат ТХТ;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьВТерминал(Команда)
	ТекстФайлика = СформироватьФайликНаСервере();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла,КодировкаТекста.ANSI);
	Если МенеджерОборудованияКлиент.ЗагрузитьФайлВБазу(Новый УникальныйИдентификатор, ИмяВременногоФайла,3) Тогда
		ЗаписатьСтатусыДокументовВРегистр();	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтатусыДокументовВРегистр()
	ТекДата= ТекущаяДата();
	Для каждого ДокЗаказов Из Элементы.СпЗаказов.ВыделенныеСтроки Цикл		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В ТСД загружен документ : "+ДокЗаказов);
		рсПризнакПечатиНаборногоЛиста = РегистрыСведений.Izh_СостояниеДокумента.СоздатьМенеджерЗаписи();                                          	
		рсПризнакПечатиНаборногоЛиста.Состояние = Перечисления.Izh_СостояниеДокумента.ВыгруженВТСД;
		рсПризнакПечатиНаборногоЛиста.Документ = ДокЗаказов;
		рсПризнакПечатиНаборногоЛиста.Сотрудник = ПараметрыСеанса.ТекущийПользователь;
		рсПризнакПечатиНаборногоЛиста.Период = ТекДата;
		рсПризнакПечатиНаборногоЛиста.Записать();
	КонецЦикла;
	Элементы.СпЗаказов.Обновить();
КонецПроцедуры

&НаСервере
Процедура ОбработкаФайлаИзБазы(АдресХранилища)
	знДанныеЗаказов=РеквизитФормыВЗначение("ДанныеЗаказов");
	знДанныеЗаказов.Строки.Очистить();
	
	СтрОбработки=ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ТЗ=Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Заказ");
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("Кол");
	ТЗ.Колонки.Добавить("КолВЗаказе");
	
	Для ъ=1 По СтрЧислоСтрок(СтрОбработки)-1 Цикл
		Стр=СтрПолучитьСтроку(СтрОбработки, ъ);
		Стр=СтрЗаменить(Стр, ",", Символы.ПС);
		
		СтрТЗ=ТЗ.Добавить();
		СтрТЗ.Заказ=Документы.ЗаказВнешний.ПолучитьСсылку(Новый УникальныйИдентификатор(Лев(СтрПолучитьСтроку(Стр, 1),36)));
		Если ЗначениеЗаполнено(Сред(СтрПолучитьСтроку(Стр, 1),37)) Тогда
			СтрТЗ.Номенклатура=Справочники.Номенклатура.НайтиПоКоду(СокрП(Сред(СтрПолучитьСтроку(Стр, 1),37))).Родитель;
			СтрТЗ.Кол=Число(СтрПолучитьСтроку(Стр, 4));
			СтрТЗ.КолВЗаказе=Число(СтрПолучитьСтроку(Стр, 5));
		Иначе
			СтрТЗ.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
			СтрТЗ.Кол=0;
			СтрТЗ.КолВЗаказе=0;
		КонецЕсли;	
	КонецЦикла;
	ТЗ.Свернуть("Заказ,Номенклатура,КолВЗаказе","Кол");
	ТЗ.Сортировать("Заказ,Номенклатура");
	
	Заказ_=Документы.ЗаказВнешний.ПустаяСсылка();
	Для каждого СтрТЗ Из ТЗ Цикл
		Если СтрТЗ.Заказ<>Заказ_ Тогда
			СтрЗаказы=знДанныеЗаказов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрЗаказы, СтрТЗ ,"Заказ");
			СтрЗаказы.ФлВыгружать=Истина;
			Заказ_=СтрТЗ.Заказ;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрТЗ.Номенклатура) Тогда
			СтрНоменкл=СтрЗаказы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрНоменкл, СтрТЗ);
			СтрНоменкл.ФлВыгружать=Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(знДанныеЗаказов,"ДанныеЗаказов");
КонецПроцедуры

//{{ШиловМВ 13.10.14 №000130057
&НаСервере
Функция ПолучитьШКНоменкл(Номенкл)
	стрШК="";
	ВыбрШК=Справочники.Номенклатура.Выбрать(Номенкл);
	Пока ВыбрШК.Следующий() Цикл
		стрШК=стрШК+СокрЛП(ВыбрШК.Код)+", ";
	КонецЦикла;
	Если СтрШК<>"" Тогда
		СтрШК=Лев(СтрШК,СтрДлина(СтрШК)-2);
	КонецЕсли;
	
	Возврат СтрШК;
КонецФункции

&НаСервере
Функция ПечатьРасхождений(Таб)
	знОбъект=РеквизитФормыВЗначение("Объект");
	Макет=знОбъект.ПолучитьМакет("Расхождения");
	Шапка=Макет.ПолучитьОбласть("Шапка");
	Строка=Макет.ПолучитьОбласть("Строка");
	
	знДанныеЗаказов=РеквизитФормыВЗначение("ДанныеЗаказов");
	_Заказ=Документы.ЗаказВнешний.ПустаяСсылка();
	ПечатьРасх=Ложь;
	Для каждого стрЗаказы Из знДанныеЗаказов.Строки Цикл
		Для каждого стрНоменкл Из стрЗаказы.Строки Цикл
			Если стрНоменкл.Кол=стрНоменкл.КолВЗаказе Тогда
				Продолжить;
			КонецЕсли;
			ПечатьРасх=Истина;			
			Если стрНоменкл.Заказ<>_Заказ Тогда
				Шапка.Параметры.ДокЗаказ=стрНоменкл.Заказ;
				Таб.Вывести(Шапка);
				_Заказ=стрНоменкл.Заказ;
				Ном=0;
			КонецЕсли;
			Ном=Ном+1;
			Строка.Параметры.Ном=Ном;
			Строка.Параметры.НаименТовара=строка(стрНоменкл.Номенклатура);
			Строка.Параметры.ШК=ПолучитьШКНоменкл(стрНоменкл.Номенклатура);
			Строка.Параметры.Заказ=стрНоменкл.Кол;
			Строка.Параметры.Набор=стрНоменкл.КолВЗаказе;
			Строка.Параметры.Расх=стрНоменкл.КолВЗаказе-стрНоменкл.Кол;
			Таб.Вывести(Строка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПечатьРасх;
КонецФункции
//ШиловМВ 13.10.14 №000130057}}

&НаКлиенте
Процедура ПрочитатьИзТерминала(Команда)
	АдресХранилищаТекста = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ПолучитьФайлИзБазы(УникальныйИдентификатор, АдресХранилищаТекста,3) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаФайлаИзБазы(АдресХранилищаТекста);
	//{{ШиловМВ 13.10.14 №000130057
	Таб=Новый ТабличныйДокумент;
	Если ПечатьРасхождений(Таб) Тогда
		Таб.Показать();
	КонецЕсли;
	//ШиловМВ 13.10.14 №000130057}}
	Для каждого Заказ из ДанныеЗаказов.ПолучитьЭлементы() Цикл
		Элементы.ДанныеЗаказов.Развернуть(Заказ.ПолучитьИдентификатор()); 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Возврат Окр(СтавкаНДС * Сумма / (100 + СтавкаНДС),2);
	
КонецФункции

&НаСервере
Процедура РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	
	//Если СтрокаТабличнойЧасти.Свойство("Цена") И СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
	СтрокаТабличнойЧасти.Сумма = Окр(СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена,2);
	//КонецЕсли;
	
	//Если СтрокаТабличнойЧасти.Свойство("ЦенаУпр") И СтрокаТабличнойЧасти.Свойство("СуммаУпр") Тогда
	//	СтрокаТабличнойЧасти.СуммаУпр = Окр(СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаУпр,2);
	//КонецЕсли;
	
	//Если СтрокаТабличнойЧасти.Свойство("СуммаНДС") И СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
	СтрокаТабличнойЧасти.СуммаНДС = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	Истина,
	ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	//КонецЕсли;
	
	//Если СтрокаТабличнойЧасти.Свойство("СуммаНДСУпр") И СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
	//	СтрокаТабличнойЧасти.СуммаНДСУпр = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаУпр,
	//	Истина,
	//	ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	//КонецЕсли;
	
	//Если СтрокаТабличнойЧасти.Свойство("ЦенаБезНДС") И СтрокаТабличнойЧасти.Свойство("СуммаБезНДС") Тогда
	СтрокаТабличнойЧасти.СуммаБезНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
	СтрокаТабличнойЧасти.ЦенаБезНДС = Окр(СтрокаТабличнойЧасти.СуммаБезНДС / СтрокаТабличнойЧасти.Количество,2);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьСуммуБезНДСВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	
	СтавкаНДС = ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаБезНДС = Окр(СтрокаТабличнойЧасти.ЦенаБезНДС * СтрокаТабличнойЧасти.Количество, 2);
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезНДС * (1 + СтавкаНДС / 100);
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаБезНДС;
	СтрокаТабличнойЧасти.Цена = Окр(СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество, 2);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКоличестваВТабличнойЧасти(ТекСтрока)
	Если ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ВключатьНДСВЦеныКонтрагентов") = Истина Тогда
		РасчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
	Иначе
		РасчитатьСуммуБезНДСВСтрокеТабличнойЧасти(ТекСтрока);
	КонецЕсли;
	
	//Если ТекСтрока.Свойство("Вес") Тогда
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Номенклатура",ТекСтрока.Номенклатура);
	СтруктураДанных.Вставить("ЕдиницаИзмерения",ТекСтрока.ЕдиницаИзмерения);
	СтруктураДанных.Вставить("Количество",ТекСтрока.Количество);
	СтруктураДанных.Вставить("ЕдиницаВеса",ТекСтрока.ЕдиницаВеса);
	СтруктураДанных.Вставить("Вес",ТекСтрока.Вес);
	ОбработкаТабличныхЧастейСервер.ЗаполнитьВесТовара(СтруктураДанных);
	ТекСтрока.ЕдиницаВеса = СтруктураДанных.ЕдиницаВеса;
	ТекСтрока.Вес = СтруктураДанных.Вес;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыСерв()
	знДанныеЗаказов=РеквизитФормыВЗначение("ДанныеЗаказов");
	
	Для каждого СтрЗаказы Из знДанныеЗаказов.Строки Цикл
		Если СтрЗаказы.ФлВыгружать Тогда
			
			СформДокум=Новый Массив;
			Документы.ЗаказВнешний.СформироватьПакетДокументов(СтрЗаказы.Заказ,СформДокум);
			
			Для каждого Докум Из СформДокум Цикл
				Если ТипЗнч(Докум)=Тип("ДокументОбъект.РасходнаяНакладная") Тогда
					ДокРН=Докум;
					
					Для каждого СтрНоменкл Из СтрЗаказы.Строки Цикл
						СтрРН=ДокРН.Состав.Найти(СтрНоменкл.Номенклатура, "Номенклатура");
						Если СтрРН<>Неопределено Тогда
							СтрРН.Количество=СтрНоменкл.Кол;
							Если СтрРН.Количество=0 Тогда
								ДокРН.Состав.Удалить(СтрРН);
							Иначе
								ПриИзмененииКоличестваВТабличнойЧасти(СтрРН);
							КонецЕсли;
						КонецЕсли; 
					КонецЦикла;
					
					Попытка
						//{БредовЮГ 2014-12-07 Наряд№000136217
						//ДокРН.Записать(РежимЗаписиДокумента.Проведение);
						ДокРН.Записать(РежимЗаписиДокумента.Запись);
						//БредовЮГ 2014-12-07 Наряд№000136217}
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при записи расходной накладной ("+ОписаниеОшибки()+")");
						ДокРН.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	СформироватьДокументыСерв();
КонецПроцедуры


&НаКлиенте
Процедура ДанныеЗаказовФлВыгружатьПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаДанныеДляЗагрузкиКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// BiT ALProzorov 28/08/2015 -->>
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////П Р И Е М К А  Ц Е Х А  П Р И  М А Г А З И Н Е  ////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ЗагрузитьВтерминал_ПриемкаЦехаПриМагазине(Команда)
	ТекстФайлика = СформироватьФайлБазыНаСервере_ПриемкаЦехаПриМагазине();	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайлика);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла,КодировкаТекста.ANSI);
	МенеджерОборудованияКлиент.ЗагрузитьФайлВБазу(Новый УникальныйИдентификатор, ИмяВременногоФайла,1);
КонецПроцедуры

&НаСервере
Функция СформироватьФайлБазыНаСервере_ПриемкаЦехаПриМагазине()
	СКД = ПолучитьИзВременногоХранилища(Объект.АдресСКД_ПриемкаЦехаПриМагазине);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПараметрыСтатусТоваров = КомпоновщикНастроек_ПриемкаЦехаПриМагазине.Настройки.ПараметрыДанных.Элементы[0];
	ПараметрыСтатусТоваров.Значение 	 = Перечисления.СтатусыТоваров.Активный;
	ПараметрыСтатусТоваров.Использование = Истина;
	
	ПараметрыСтруктурнаяЕд = КомпоновщикНастроек_ПриемкаЦехаПриМагазине.Настройки.ПараметрыДанных.Элементы[1];
	ПараметрыСтруктурнаяЕд.Значение 	 = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	ПараметрыСтруктурнаяЕд.Использование = Истина;
	
	ПараметрыДопСвойство = КомпоновщикНастроек_ПриемкаЦехаПриМагазине.Настройки.ПараметрыДанных.Элементы[2];
	ПараметрыДопСвойство.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыКонтрагентов.НайтиПоКоду("0000000382");//Свойство "Магазин-цех"
	ПараметрыДопСвойство.Использование = Истина;
	
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД,КомпоновщикНастроек_ПриемкаЦехаПриМагазине.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ТЗРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ТекстФайл = "";
	
	ЭлементыДерева = ПриемкаЦеха.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	ПредыдущийПоставщик = UnDefined;
	
	Для Каждого ТекущаяНоменклатура Из ТЗРезультат Цикл
		ВыборкаПоНоменклатуре = Справочники.Номенклатура.Выбрать(ТекущаяНоменклатура.Номенклатура);
		Если ПредыдущийПоставщик <> ТекущаяНоменклатура.ОсновнойПоставщик Тогда
			НовыйПоставщик = ЭлементыДерева.Добавить();
			НовыйПоставщик.Протокол = ТекущаяНоменклатура.ОсновнойПоставщик;
			НЭ = НовыйПоставщик.ПолучитьЭлементы();
			ПредыдущийПоставщик = ТекущаяНоменклатура.ОсновнойПоставщик;
		КонецЕсли;
		
		ПерваяСтрока = Истина;
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			ТекстФайл = ТекстФайл + ?(ТекстФайл="","",Символы.ПС);
			Если ПерваяСтрока Тогда
				Шкод		  = СокрЛП(ВыборкаПоНоменклатуре.ПрефиксPLU) + СокрЛП(ВыборкаПоНоменклатуре.Код);
				ВнутреннийКод = СокрЛП(ТекущаяНоменклатура.Номенклатура.Код);
				Имя			  = ВернутьТекстБезРазделителя(СокрЛП(ТекущаяНоменклатура.Номенклатура.ПолноеНаименование));
				ПерваяСтрока = Ложь;
				Количество = "0";
				Брак	   = "0";
				ТекстФайл  = ТекстФайл
					+ Лев(Шкод,16)+","
					+ Лев(ВнутреннийКод,12)+","
					+ Лев(Имя,68)+","
					+ Лев(Количество,5)+","
					+ Лев(Брак,50);
				ТекстФайл = ТекстФайл + ?(ТекстФайл="","",Символы.ПС);
				Шкод = СокрЛП(ТекущаяНоменклатура.Номенклатура.Код);
				Имя  = СокрЛП(ВыборкаПоНоменклатуре.ПрефиксPLU) + СокрЛП(ВыборкаПоНоменклатуре.Код);
				ВнутреннийКод = "";
			Иначе
				Шкод = СокрЛП(ТекущаяНоменклатура.Номенклатура.Код);
				Имя  = СокрЛП(ВыборкаПоНоменклатуре.ПрефиксPLU) + СокрЛП(ВыборкаПоНоменклатуре.Код);
				ВнутреннийКод = "";
			КонецЕсли;
			
			НоваяНоменклатура = НЭ.Добавить();
			НоваяНоменклатура.Номенклатура	= ВыборкаПоНоменклатуре.Ссылка;
			НоваяНоменклатура.ШтрихКод		= Имя;
			
			Количество = "0";
			Брак	   = "0";
			ТекстФайл  = ТекстФайл
				+ Лев(Шкод,16)+","
				+ Лев(ВнутреннийКод,12)+","
				+ Лев(Имя,68)+","
				+ Лев(Количество,5)+","
				+ Лев(Брак,50);
		КонецЦикла;	
	КонецЦикла;
	Возврат ТекстФайл;
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикСКД_ПриемкаЦехаПриМагазине()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СКД = ОбработкаОбъект.ПолучитьМакет("ПриемкаЦехаПриМагазине");
	Объект.АдресСКД_ПриемкаЦехаПриМагазине = ПоместитьВоВременноеХранилище(СКД,Новый УникальныйИдентификатор); 
	КомпоновщикНастроек_ПриемкаЦехаПриМагазине.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Объект.АдресСКД_ПриемкаЦехаПриМагазине));
	КомпоновщикНастроек_ПриемкаЦехаПриМагазине.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаИзТерминала_ПриемкаЦехаПриМагазине(Команда)
	АдресХранилищаТекста = Неопределено;
	Если МенеджерОборудованияКлиент.ПолучитьФАйлИзДокумента(УникальныйИдентификатор, АдресХранилищаТекста,0) Тогда
		ПриемкаЦехаПриМагазине_ОбработатьФайл(АдресХранилищаТекста);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриемкаЦехаПриМагазине_ОбработатьФайл(АдрестТекста)
	ПриемкаЦехаВыгрузка.Очистить();
	тзТоваров = Новый ТаблицаЗначений;
	тзТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТекстПарсинга = ПолучитьИзВременногоХранилища(АдрестТекста);	
	Для ъ=1 По СтрЧислоСтрок(ТекстПарсинга) Цикл
		СтрокаПарсинга = СтрПолучитьСтроку(ТекстПарсинга,ъ);
		МногоСтрочная = СтрЗаменить(СтрокаПарсинга,",",Символы.ПС);
		Строка3 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,1)); // Штрихкод
		Строка4 = СокрЛП(СтрПолучитьСтроку(МногоСтрочная,2)); // Количество
		Если ПустаяСтрока(Строка4) Тогда Продолжить; КонецЕсли;
		ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(Строка3);
		If ТекНоменклатура.Пустая() Then
			ТекНоменклатура = Справочники.Номенклатура.НайтиПоКоду(Сред(Строка3,3));
		EndIf;	
		Если ТекНоменклатура.Пустая() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена номенклатура с штрихкодом "+Строка3);
			Продолжить; 
		КонецЕсли;
		НоваяСтрока = тзТоваров.Добавить();
		НоваяСтрока.Номенклатура = ТекНоменклатура.Родитель;
		НоваяСтрока.Количество = Число(Строка4);
	КонецЦикла;
	тзТоваров.Свернуть("Номенклатура","Количество");
	Если тзТоваров.Количество()>0 Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ТаблицаНоменклатуры.Номенклатура,
		                      |	ТаблицаНоменклатуры.Количество
		                      |ПОМЕСТИТЬ вт_Номенклатура
		                      |ИЗ
		                      |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	вт_Номенклатура.Номенклатура,
		                      |	вт_Номенклатура.Количество,
		                      |	СтатусыНоменклатуры.ОсновнойПоставщик
		                      |ПОМЕСТИТЬ вт_НоменклатураСпоставщиками
		                      |ИЗ
		                      |	вт_Номенклатура КАК вт_Номенклатура
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
		                      |		ПО вт_Номенклатура.Номенклатура = СтатусыНоменклатуры.Номенклатура
		                      |ГДЕ
		                      |	СтатусыНоменклатуры.Номенклатура В
		                      |			(ВЫБРАТЬ
		                      |				вт_Номенклатура.Номенклатура
		                      |			ИЗ
		                      |				вт_Номенклатура)
		                      |	И СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		                      |	И СтатусыНоменклатуры.Статус = &Статус
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	вт_НоменклатураСпоставщиками.Номенклатура КАК Номенклатура,
		                      |	СУММА(вт_НоменклатураСпоставщиками.Количество) КАК Количество,
		                      |	вт_НоменклатураСпоставщиками.ОсновнойПоставщик КАК Протокол,
		                      |	ЕСТЬNULL(НоменклатураКонтрагента.Цена, 0) КАК Цена
		                      |ИЗ
		                      |	вт_НоменклатураСпоставщиками КАК вт_НоменклатураСпоставщиками
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Izh_ЗначенияСвойствОбъектов КАК Izh_ЗначенияСвойствОбъектов
		                      |		ПО вт_НоменклатураСпоставщиками.ОсновнойПоставщик = Izh_ЗначенияСвойствОбъектов.Объект
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
		                      |		ПО вт_НоменклатураСпоставщиками.Номенклатура = НоменклатураКонтрагента.Номенклатура
		                      |			И вт_НоменклатураСпоставщиками.ОсновнойПоставщик = НоменклатураКонтрагента.Контрагент
		                      |ГДЕ
		                      |	Izh_ЗначенияСвойствОбъектов.Свойство = &Свойство
		                      |	И Izh_ЗначенияСвойствОбъектов.Значение = &СтруктурнаяЕдиница
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	вт_НоменклатураСпоставщиками.ОсновнойПоставщик,
		                      |	вт_НоменклатураСпоставщиками.Номенклатура,
		                      |	ЕСТЬNULL(НоменклатураКонтрагента.Цена, 0)
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Протокол
		                      |ИТОГИ
		                      |	СУММА(Количество)
		                      |ПО
		                      |	Протокол");
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры",тзТоваров);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыТоваров.Активный);
		Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыКонтрагентов.НайтиПоКоду("0000000382")); //Свойство "Магазин-цех"
		ВыборкаПоПротоколам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПротоколам.Следующий() Цикл
			ВыборкаПоНоменклатуре = ВыборкаПоПротоколам.Выбрать();
			ДокументПП = Документы.ПланируемаяПоставка.СоздатьДокумент();
			ДокументПП.Дата			      = ТекущаяДата();
			ДокументПП.Контрагент 		  = ВыборкаПоПротоколам.Протокол;
			ДокументПП.СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
			ДокументПП.ДатаПоставкиОт     = ТекущаяДата();
			ДокументПП.ДатаПоставкиДо     = ТекущаяДата();
			ДокументПП.Автор 			  = ПараметрыСеанса.ТекущийПользователь;
			ДокументПП.АдресДоставки 	  = УправлениеКонтактнойИнформациейСервер.ПолучитьКонтактнуюИнформацияОбъекта(ДокументПП.СтруктурнаяЕдиница,Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
			Если ТипЗнч(ДокументПП.Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДокументПП.Контрагент.Валюта) Тогда
				Валюта = ДокументПП.Контрагент.Валюта;
			Иначе
				Валюта = ДокументПП.СтруктурнаяЕдиница.ПолучитьВалютуТекущейСЕ();
			КонецЕсли;
			ДокументПП.Валюта             = Валюта;
			СтруктураКурса 				  = РаботаСКурсамиВалют.ЗаполнитьДанныеКурсаДляВалюты(Валюта);
			ДокументПП.Курс 			  = СтруктураКурса.Курс;
			ДокументПП.Кратность		  = СтруктураКурса.Кратность;
			ДокументПП.ЗаказМагазина      = Истина;
			
			ЗапросОпределенияФирмы = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			                                      |	СвязьФирмИКонтрагентов.Фирма
			                                      |ПОМЕСТИТЬ ФирмыКонтагента
			                                      |ИЗ
			                                      |	РегистрСведений.СвязьФирмИКонтрагентов КАК СвязьФирмИКонтрагентов
			                                      |ГДЕ
			                                      |	СвязьФирмИКонтрагентов.Контрагент = &Контрагент
			                                      |;
			                                      |
			                                      |////////////////////////////////////////////////////////////////////////////////
			                                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			                                      |	ПерепродажаСрезПоследних.ФирмаПродажи КАК Фирма
			                                      |ИЗ
			                                      |	РегистрСведений.Перепродажа.СрезПоследних(
			                                      |			,
			                                      |			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
			                                      |				И ФирмаПокупки В
			                                      |					(ВЫБРАТЬ
			                                      |						ФирмыКонтагента.Фирма
			                                      |					ИЗ
			                                      |						ФирмыКонтагента)) КАК ПерепродажаСрезПоследних");
			ЗапросОпределенияФирмы.УстановитьПараметр("Контрагент",ДокументПП.Контрагент);
			ЗапросОпределенияФирмы.УстановитьПараметр("СтруктурнаяЕдиница",ДокументПП.СтруктурнаяЕдиница);
			Выборка = ЗапросОпределенияФирмы.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДокументПП.Фирма = Выборка.Фирма;
			КонецЕсли;
			
			Пока ВыборкаПоНоменклатуре.Следующий() Цикл
				НоваяСтрока = ДокументПП.Состав.Добавить();
				НоваяСтрока.Номенклатура 	 = ВыборкаПоНоменклатуре.Номенклатура;
				НоваяСтрока.Количество	 	 = ВыборкаПоНоменклатуре.Количество;
				НоваяСтрока.Артикул 	 	 = АвтоЗаказ.ПолучитьАртикул(ДокументПП.Контрагент,НоваяСтрока.Номенклатура);
				НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура, Истина);
				Если ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) тогда
					 НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
				Иначе
					 НоваяСтрока.Коэффициент = 0;
				КонецЕсли;
				НоваяСтрока.Цена             = ВыборкаПоНоменклатуре.Цена;
				
				// BiT ALProzorov 31/08/2015 -->>
				Если ДокументПП.Контрагент.НеПлательщикНДС Тогда
					СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
				Иначе
					СтавкаНДС = ВыборкаПоНоменклатуре.Номенклатура.СтавкаНДС;
				КонецЕсли;
				НоваяСтрока.СтавкаНДС = СтавкаНДС;
				// BiT ALProzorov 31/08/2015 <<--
				
				РасчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			КонецЦикла;
			
			Если ДокументПП.Состав.Количество() > 0 Тогда
				ДокументПП.СуммаИтого    = ДокументПП.Состав.Итог("Сумма");
				ДокументПП.СуммаНДСИтого = ДокументПП.Состав.Итог("СуммаНДС");
				ДокументПП.Записать(РежимЗаписиДокумента.Запись);
				НС = ПриемкаЦехаВыгрузка.Добавить();
				НС.Протокол 			= ДокументПП.Контрагент;
				НС.ПланируемаяПоставка  = ДокументПП.Ссылка;
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры
// BiT ALProzorov 28/08/2015 <<--