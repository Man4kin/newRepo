&НаСервереБезКонтекста
Функция ПолучитьИмяМетаданных(ДокССылка)
	Возврат ДокСсылка.Метаданные().Имя;	
КонецФункции

&НаКлиенте
Процедура ПодборОткрыть(Команда)
	Элементы.ПодборНоменклатуры.Видимость = НЕ Элементы.ПодборНоменклатуры.Видимость;
КонецПроцедуры

//++Минин 0000135957 2015-08-24
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	//ПодборОткрыть(Неопределено);
	
	ПараметрыФормы = ПодготовитьПараметрыДляПодбора();
	Если ОткрытьФормуМодально("ОбщаяФорма.ПодборНоменклатуры",Новый Структура("СтруктураПараметров",ПараметрыФормы),ЭтаФорма) <> "ОК" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОбработатьПодборНаСервере(ПараметрыФормы.АдресВременногоХранилища);
	
	Для Каждого Строка Из ВыбраннаяНоменклатура Цикл
		ОбработкаТабличныхЧастейКлиент.ЗаполнитьИзПодбора(ЭтаФорма,Объект,Строка,Элементы.Товары,СтандартнаяОбработка,Строка.Количество,,Элементы.Товары.Имя);
	КонецЦикла;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаПодбораНоменклатуры()
	Возврат "ВЫБРАТЬ
	|	СписокНоменклатуры.Код,
	|	СписокНоменклатуры.Наименование,
	|	СписокНоменклатуры.Группа,
	|	ВЫБОР
	|		КОГДА СписокНоменклатуры.ПометкаУдаления
	|			ТОГДА ВЫБОР
	|					КОГДА СписокНоменклатуры.Группа = 0
	|						ТОГДА 2
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписокНоменклатуры.Группа = 0
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка,
	|	СписокНоменклатуры.Ссылка КАК Номенклатура,
	// {ВетровИА Обращение 000162494 14.09.2015
	|	СУММА(ОстаткиНоменклатурыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	// ВетровИА Обращение 000162494 14.09.2015}
	|ИЗ
	|	Справочник.Номенклатура КАК СписокНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки КАК ОстаткиНоменклатурыОстатки
	|		ПО СписокНоменклатуры.Ссылка = ОстаткиНоменклатурыОстатки.Номенклатура
	|ГДЕ
	|	НЕ СписокНоменклатуры.Код ПОДОБНО ""У%""
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНоменклатуры.Код,
	|	СписокНоменклатуры.Наименование,
	|	СписокНоменклатуры.Группа,
	|	СписокНоменклатуры.ПометкаУдаления,
	|	СписокНоменклатуры.Ссылка";
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыДляПодбора()
	СтруктураПараметровПодбора = Новый Структура("ТекстЗапроса,Параметры,АдресВременногоХранилища",);
	СтруктураПараметровПодбора.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено,ЭтаФорма.УникальныйИдентификатор);
	СтруктураПараметровПодбора.ТекстЗапроса = ТекстЗапросаПодбораНоменклатуры();
	СтруктураПараметрыЗапроса = Новый Структура();
	СтруктураПараметровПодбора.Параметры = СтруктураПараметрыЗапроса;

	Возврат СтруктураПараметровПодбора;	
КонецФункции

&НаСервере
Процедура ОбработатьПодборНаСервере(АдресХранилища)
	тзЗначений = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЗначениеВРеквизитФормы(тзЗначений,"ВыбраннаяНоменклатура");
КонецПроцедуры
//--Минин 0000135957 2015-08-24

&НаКлиенте
Процедура ПодборНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ЗапрашиватьКоличество = Истина;
	Для Каждого Строка Из Элемент.ВыделенныеСтроки Цикл
		Количество = ОбработкаТабличныхЧастейКлиент.ЗапросКоличества(ЗапрашиватьКоличество);
		ТекСтрока = ЗаполнитьСтрокуИзПодбора(ЭтаФорма,Объект,Элемент.ДанныеСтроки(Строка),Элементы.Товары,СтандартнаяОбработка,Количество);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция  ЗаполнитьСтрокуИзПодбора(Форма,Объект,СтрокаПодбора,ЭлементПриемник,СтандартнаяОбработка,Количество = 1,ВыборГрупп = Ложь,ИмяСостава="Состав") экспорт
	ТекСтрока = неопределено;
	СтандартнаяОбработка = Ложь;
	Номенклатура = СтрокаПодбора.Номенклатура;
	если Номенклатура = неопределено тогда
		Возврат неопределено;
	конецесли;
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если НЕ выборГрупп и ОбщегоНазначенияСервер.ПолучитьСвойствоПоссылке(Номенклатура,"Группа") = 1 тогда
			возврат неопределено;
		конецесли;
		Если ОбщегоНазначенияСервер.ПолучитьСвойствоПоссылке(Номенклатура,"Группа") = 0 И НЕ ОбщегоНазначенияСервер.ПолучитьСвойствоПоСсылке(Номенклатура,"Транзакционный") тогда
			состояние("Добавлять можно только товары транзакционного уровня!",,,БиблиотекаКартинок.Предупреждение32);
			возврат неопределено;
		Конецесли;
	КонецЕсли;
	Форма.Модифицированность = Истина;
	Строки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если Строки.Количество() = 0 Тогда
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.номенклатура = Номенклатура;
		НоваяСтрока.Количество = Количество;
		ТекСТрока = НоваяСтрока;
	КонецЕсли;
	Возврат ТекСтрока;	
конецФУнкции

&НаКлиенте
Процедура ЗакрытьПодбор(Команда)
	Элементы.ПодборНоменклатуры.Видимость = НЕ Элементы.ПодборНоменклатуры.Видимость;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДокументы(Команда)
	//++БИТ БВО
	//ЗаполнитьДокументамиНаСервере();
	БИТ_ЗаполнитьДокументамиНаСервере();
	//--БИТ БВО
	Если Объект.ТоварыСДокументами.Количество()>0 Тогда
		Элементы.ТоварыСДокументами.Видимость = Истина;
		Элементы.Автоматически.Видимость = Истина;
		ОбновитьОстаткиНаСкладах();
		Элементы.ОстаткиТоваров.Видимость = Истина;
		АвтоматическиПриИзменении();
		ТоварыПриАктивизацииСтроки();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументамиНаСервере()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	тзТовары.Номенклатура
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&тзТовары КАК тзТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНоменклатурыОбороты.Регистратор КАК Документ,
	|	ОстаткиНоменклатурыОбороты.Номенклатура,
	|	ОстаткиНоменклатурыОбороты.КоличествоПриход
	|ПОМЕСТИТЬ ВТПРиходные
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Обороты(
	|			"+?(ЗначениеЗаполнено(ОбъектОбработка.ДатаНачала),"НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)","")+",
	|			"+?(ЗначениеЗаполнено(ОбъектОбработка.ДатаКонца),"КОНЕЦПЕРИОДА(&ДатаКонца, ДЕНЬ)","")+",
	|			Регистратор,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					А.Номенклатура
	|				ИЗ
	|					ВТТовары КАК А)) КАК ОстаткиНоменклатурыОбороты
	|ГДЕ
	|	ОстаткиНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|	И НЕ ВЫРАЗИТЬ(ОстаткиНоменклатурыОбороты.Регистратор КАК Документ.ПриходнаяНакладная).БонуснаяПоставка
	|	И ВЫБОР КОГДА ВЫРАЗИТЬ(ОстаткиНоменклатурыОбороты.Регистратор КАК Документ.ПриходнаяНакладная).Контрагент ССЫЛКА Справочник.Контрагенты 
	|		ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(ОстаткиНоменклатурыОбороты.Регистратор КАК Документ.ПриходнаяНакладная).Контрагент КАК Справочник.Контрагенты).ВозвратыРазрешены 
	|		ИНАЧЕ ИСТИНА 
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНоменклатурыОбороты.Номенклатура,
	|	ВЫРАЗИТЬ(ОстаткиНоменклатурыОбороты.Регистратор.ДокОснование КАК Документ.ПриходнаяНакладная) КАК ДокументПрихода,
	|	СУММА(ОстаткиНоменклатурыОбороты.КоличествоРасход) КАК КоличествоРасход
	|ПОМЕСТИТЬ ВТРасход
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Обороты(
	|			"+?(ЗначениеЗаполнено(ОбъектОбработка.ДатаНачала),"НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)","")+",
	|			,
	|			Регистратор,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					А.Номенклатура
	|				ИЗ
	|					ВТТовары КАК А)) КАК ОстаткиНоменклатурыОбороты
	|ГДЕ
	//|	ВЫРАЗИТЬ(ОстаткиНоменклатурыОбороты.Регистратор КАК Документ.РасходнаяНакладная).Контрагент ССЫЛКА Справочник.Контрагенты и
	|	 ОстаткиНоменклатурыОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|	И ВЫРАЗИТЬ(ОстаткиНоменклатурыОбороты.Регистратор КАК Документ.РасходнаяНакладная).ДокОснование В
	|			(ВЫБРАТЬ
	|				А.Документ
	|			ИЗ
	|				ВТПриходные КАК А)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатурыОбороты.Номенклатура,
	|	ВЫРАЗИТЬ(ОстаткиНоменклатурыОбороты.Регистратор.ДокОснование КАК Документ.ПриходнаяНакладная)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПРиходные.Документ,
	|	ВТПРиходные.Номенклатура,
	|	ВТПРиходные.КоличествоПриход - ЕСТЬNULL(ВТРасход.КоличествоРасход, 0) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТПРиходные КАК ВТПРиходные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасход КАК ВТРасход
	|		ПО ВТПРиходные.Документ = ВТРасход.ДокументПрихода
	|			И ВТПРиходные.Номенклатура = ВТРасход.Номенклатура
	|ГДЕ 
	|	(ВТПРиходные.КоличествоПриход - ЕСТЬNULL(ВТРасход.КоличествоРасход, 0))>0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРезультат.Документ,
	|   Количество(Различные ВТРезультат.Номенклатура) КАК КолСовпадений
	|ПОМЕСТИТЬ ВТСовпадения
	|ИЗ
	|	ВТРезультат КАК ВТРезультат
	|Сгруппировать По 
	|	ВТРезультат.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРезультат.Документ,
	|	ВТРезультат.Документ.Контрагент КАК Контрагент,
	|	ВТРезультат.Номенклатура,
	|   ВТРезультат.КоличествоОстаток,
	|	ВЫБОР КОГДА ВТСовпадения.КолСовпадений>1 ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьСовпадение
	|ИЗ
	|	ВТРезультат КАК ВТРезультат
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТСовпадения КАК ВТСовпадения
	|	ПО ВТРезультат.Документ = ВТСовпадения.Документ
	|УПОРЯДОЧИТЬ ПО
	|	ВТРезультат.Документ.Дата
	|");
	Запрос.УстановитьПараметр("тзТовары"	, ОбъектОбработка.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДатаНачала"	, ОбъектОбработка.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца"	, ОбъектОбработка.ДатаКонца);
	РезультатЗапроса = Запрос.Выполнить();
	ОбъектОбработка.ТоварыСДокументами.Загрузить(РезультатЗапроса.Выгрузить());
	
	ЗначениеВРеквизитФормы(ОбъектОбработка,"Объект");
	
	
	//тест
	ЭлементОУ = УсловноеОформление.Элементы.Добавить();
	ЭлементОУ.Использование    = Истина;
	ЭлементОУ.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);	
	
	ЭлементУсловия                = ЭлементОУ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТоварыСДокументами.ЕстьСовпадение");
	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	ЭлементУсловия.Использование  = Истина;
	
	ОформляемоеПоле      = ЭлементОУ.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыСДокументамиДокумент");	
	ОформляемоеПоле      = ЭлементОУ.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыСДокументамиДокумент");	
	ОформляемоеПоле      = ЭлементОУ.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыСДокументамиКоличествоОстаток");	
	//
	////тест
	
КонецПроцедуры

//++БИТ БВО - Функция получает все подчиненные документы для приходной накладной
Функция ПолучитьПодчиненныеДокументы(Ссылка, ТаблицаДокументов, НачальныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураПодчиненности.Ссылка
	|ИЗ
	|	КритерийОтбора.СтруктураПодчиненности(&Ссылка) КАК СтруктураПодчиненности
	|ГДЕ
	|	(СтруктураПодчиненности.Ссылка ССЫЛКА Документ.КорректировкаПоступления
	|			ИЛИ СтруктураПодчиненности.Ссылка ССЫЛКА Документ.КорректировкаРеализации	
	|			ИЛИ СтруктураПодчиненности.Ссылка ССЫЛКА Документ.РасходнаяНакладная)	
	|	И СтруктураПодчиненности.Ссылка.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("Ссылка"			, Ссылка);	
	Запрос.УстановитьПараметр("ДокПриходная"	, НачальныйДокумент);
	Запрос.УстановитьПараметр("ФирмаПолучатель"	, НачальныйДокумент.Фирма);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь; //Когда нет подчиненных документов
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();		
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаДокументов.Добавить();		
		НоваяСтрока.Ссылка			= Выборка.Ссылка;
		НоваяСтрока.ТипДокумента	= ТипЗнч(Выборка.Ссылка);
		НоваяСтрока.ДокОснование	= НачальныйДокумент;
		
		ЕстьПодчиненныеДокументы = ПолучитьПодчиненныеДокументы(Выборка.Ссылка, ТаблицаДокументов, НачальныйДокумент);
		НоваяСтрока.ПоследнийДокВЦепочке = НЕ ЕстьПодчиненныеДокументы;		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
//--БИТ БВО

&НаСервере
Процедура БИТ_ЗаполнитьДокументамиНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	тзТовары.Номенклатура
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&тзТовары КАК тзТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНоменклатурыОбороты.Регистратор КАК Документ,
	|	ОстаткиНоменклатурыОбороты.Номенклатура,
	|	ОстаткиНоменклатурыОбороты.КоличествоПриход	
	|ПОМЕСТИТЬ ВТДокументыСНоменклатурой
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Обороты(
	|			"+?(ЗначениеЗаполнено(ОбъектОбработка.ДатаНачала),"НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)","")+",
	|			"+?(ЗначениеЗаполнено(ОбъектОбработка.ДатаКонца),"КОНЕЦПЕРИОДА(&ДатаКонца, ДЕНЬ)","")+",
	|			Регистратор,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					А.Номенклатура
	|				ИЗ
	|					ВТТовары КАК А)) КАК ОстаткиНоменклатурыОбороты
	|ГДЕ
	|	ОстаткиНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|	И НЕ ВЫРАЗИТЬ(ОстаткиНоменклатурыОбороты.Регистратор КАК Документ.ПриходнаяНакладная).БонуснаяПоставка
	|	И ВЫБОР КОГДА ВЫРАЗИТЬ(ОстаткиНоменклатурыОбороты.Регистратор КАК Документ.ПриходнаяНакладная).Контрагент ССЫЛКА Справочник.Контрагенты 
	|		ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(ОстаткиНоменклатурыОбороты.Регистратор КАК Документ.ПриходнаяНакладная).Контрагент КАК Справочник.Контрагенты).ВозвратыРазрешены 
	|		ИНАЧЕ ИСТИНА 
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументыСНоменклатурой.Документ
	|ИЗ 
	|	ВТДокументыСНоменклатурой КАК ВТДокументыСНоменклатурой
	|СГРУППИРОВАТЬ ПО
	|	ВТДокументыСНоменклатурой.Документ";
	Запрос.УстановитьПараметр("тзТовары"	, ОбъектОбработка.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДатаНачала"	, ОбъектОбработка.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца"	, ОбъектОбработка.ДатаКонца);	
	
	ТаблицаДокументов = Новый ТаблицаЗначений;	
	ТаблицаДокументов.Колонки.Добавить("Ссылка"					, Новый ОписаниеТипов("ДокументСсылка.РасходнаяНакладная, ДокументСсылка.ПриходнаяНакладная, ДокументСсылка.КорректировкаРеализации, ДокументСсылка.КорректировкаПоступления, ДокументСсылка.ПередачаТоваровМеждуФирмами"));
	ТаблицаДокументов.Колонки.Добавить("ТипДокумента"			, Новый ОписаниеТипов("Тип"));	
	ТаблицаДокументов.Колонки.Добавить("ДокОснование"			, Новый ОписаниеТипов("ДокументСсылка.РасходнаяНакладная, ДокументСсылка.ПриходнаяНакладная, ДокументСсылка.КорректировкаРеализации, ДокументСсылка.КорректировкаПоступления, ДокументСсылка.ПередачаТоваровМеждуФирмами"));
	ТаблицаДокументов.Колонки.Добавить("ПоследнийДокВЦепочке"	, Новый ОписаниеТипов("Булево"));	
	
	ТаблицаОстатков = Новый ТаблицаЗначений;	
	ТаблицаОстатков.Колонки.Добавить("Документ"				, Новый ОписаниеТипов("ДокументСсылка.РасходнаяНакладная, ДокументСсылка.ПриходнаяНакладная, ДокументСсылка.КорректировкаРеализации, ДокументСсылка.КорректировкаПоступления, ДокументСсылка.ПередачаТоваровМеждуФирмами"));
	ТаблицаОстатков.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	
	ТаблицаОстатков.Колонки.Добавить("КоличествоОстаток"	, Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));	
	ТаблицаОстатков.Колонки.Добавить("Цена"					, Новый ОписаниеТипов("Число"));	
			
	РезультатЗапроса	= Запрос.Выполнить();
	ВыборкаПриходных	= РезультатЗапроса.Выбрать();
	Пока ВыборкаПриходных.Следующий() Цикл				
		ТаблицаДокументов.Очистить();
				
		МассивФильтруемойНоменклатуры = ОбъектОбработка.Товары.ВыгрузитьКолонку("Номенклатура");
		ОбъектОбработка.ПолучитьКонечныеОстаткиПоДокументу(ВыборкаПриходных.Документ, ТаблицаДокументов, ТаблицаОстатков, МассивФильтруемойНоменклатуры);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗОстатков.Документ,
	|	ТЗОстатков.Номенклатура,
	|	ТЗОстатков.КоличествоОстаток,
	|	ТЗОстатков.СтавкаНДС,
	|	ТЗОстатков.Цена
	|ПОМЕСТИТЬ ВТОстаткиПоДокументам
	|ИЗ	
	|	&ТЗОстатков КАК ТЗОстатков
	|;
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	ВТОстаткиПоДокументам.Документ,
	|	ВТОстаткиПоДокументам.Номенклатура,
	|	ВТОстаткиПоДокументам.КоличествоОстаток,
	|	ВТОстаткиПоДокументам.СтавкаНДС,
	|	ВТОстаткиПоДокументам.Цена
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТОстаткиПоДокументам КАК ВТОстаткиПоДокументам	
	|ГДЕ 
	|	ВТОстаткиПоДокументам.КоличествоОстаток >0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРезультат.Документ,
	|   Количество(Различные ВТРезультат.Номенклатура) КАК КолСовпадений
	|ПОМЕСТИТЬ ВТСовпадения
	|ИЗ
	|	ВТРезультат КАК ВТРезультат
	|Сгруппировать По 
	|	ВТРезультат.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРезультат.Документ,
	|	ВТРезультат.Документ.Контрагент КАК Контрагент,
	|	ВТРезультат.Номенклатура,
	|   ВТРезультат.КоличествоОстаток,
	|	ВТРезультат.СтавкаНДС,
	|	ВТРезультат.Цена,
	|	ВЫБОР КОГДА ВТСовпадения.КолСовпадений>1 ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьСовпадение
	|ИЗ
	|	ВТРезультат КАК ВТРезультат
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТСовпадения КАК ВТСовпадения
	|	ПО ВТРезультат.Документ = ВТСовпадения.Документ
	|УПОРЯДОЧИТЬ ПО
	|	ВТРезультат.Документ.Дата
	|";	
	Запрос.УстановитьПараметр("ТЗОстатков"	, ТаблицаОстатков);			
	РезультатЗапроса = Запрос.Выполнить();
	ОбъектОбработка.ТоварыСДокументами.Загрузить(РезультатЗапроса.Выгрузить());
	
	ЗначениеВРеквизитФормы(ОбъектОбработка,"Объект");
			
	ЭлементОУ = УсловноеОформление.Элементы.Добавить();
	ЭлементОУ.Использование    = Истина;
	ЭлементОУ.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);	
	
	ЭлементУсловия                = ЭлементОУ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТоварыСДокументами.ЕстьСовпадение");
	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	ЭлементУсловия.Использование  = Истина;
	
	ОформляемоеПоле      = ЭлементОУ.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыСДокументамиДокумент");	
	ОформляемоеПоле      = ЭлементОУ.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыСДокументамиДокумент");	
	ОформляемоеПоле      = ЭлементОУ.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыСДокументамиКоличествоОстаток");		
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиНаСкладах()
	Для ъ=1 по 8 Цикл
		Элементы["ОстаткиТоваровСклад"+ъ].Видимость = Ложь;	
	КонецЦикла;
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	тзТовары.Номенклатура
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&тзТовары КАК тзТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстатки.Фирма,
	|	ОстаткиНоменклатурыОстатки.Номенклатура,
	|	ОстаткиНоменклатурыОстатки.МестоХранения КАК Склад,
	|	ОстаткиНоменклатурыОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					А.Номенклатура
	|				ИЗ
	|					ВТТовары КАК А)) КАК ОстаткиНоменклатурыОстатки");
	Запрос.УстановитьПараметр("тзТовары",ОбъектОбработка.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	тзВременная = РезультатЗапроса.Выгрузить();
	тзФирмы = тзВременная.Скопировать(,"Склад");
	тзФирмы.Свернуть("Склад",);
	СоответсвияСкладов = Новый Соответствие;
	НомерСклада = 1;
	СтрокаСвертки = "";
	Для Каждого СтрокаТЗ из тзФирмы Цикл
		СоответсвияСкладов.Вставить(СтрокаТЗ.Склад,"Склад"+НомерСклада);
		тзВременная.Колонки.Добавить("Склад"+НомерСклада,,Строка(СтрокаТЗ.Склад));
		СтрокаСвертки = СтрокаСвертки + ?(ПустаяСтрока(СтрокаСвертки),"",",")+"Склад"+НомерСклада;
		НомерСклада = НомерСклада+1;
	КонецЦикла;
	Для Каждого СтрокаТЗ из тзВременная Цикл
		СтрокаТЗ[СоответсвияСкладов[СтрокаТЗ.Склад]] = СтрокаТЗ.КоличествоОстаток;
	КонецЦикла;
	тзВременная.Колонки.Удалить("Склад");
	тзВременная.Колонки.Удалить("КоличествоОстаток");
	тзВременная.Свернуть("Номенклатура,Фирма",СтрокаСвертки);
	ОстаткиТоваров.Загрузить(тзВременная);
	Для Каждого ЭлементаСоответствия из СоответсвияСкладов Цикл
		Элементы["ОстаткиТоваров"+ЭлементаСоответствия.Значение].Видимость = Истина;
		Элементы["ОстаткиТоваров"+ЭлементаСоответствия.Значение].Заголовок = ЭлементаСоответствия.Ключ;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент=Неопределено)
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	УстановитьОтборПоНоменклатуре(Элементы.Товары.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоНоменклатуре(текНоменклатура)
	Элементы.ТоварыСДокументами.ОтборСтрок= Новый ФиксированнаяСтруктура("Номенклатура",текНоменклатура);
	Элементы.ОстаткиТоваров.ОтборСтрок= Новый ФиксированнаяСтруктура("Номенклатура",текНоменклатура);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	ТекСтрокаТовары = Элементы.Товары.ТекущиеДанные;
	мсв = Объект.ТоварыСДокументами.НайтиСтроки(Новый Структура("Номенклатура",ТекСтрокаТовары.Номенклатура));
	Для каждого эл из мсв Цикл
		Объект.ТоварыСДокументами.Удалить(эл);
	КонецЦикла;	
	мсв = ОстаткиТоваров.НайтиСтроки(Новый Структура("Номенклатура",ТекСтрокаТовары.Номенклатура));
	Для каждого эл из мсв Цикл
		ОстаткиТоваров.Удалить(эл);
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура АвтоматическиПриИзменении(Элемент=Неопределено)
	Элементы.ТоварыСДокументамиПометка.Видимость = НЕ Объект.Автоматически;
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Автоматически = Ложь;
	Объект.ДатаНачала= НачалоМесяца(ТекущаяДата());
	Объект.ДатаКонца = КонецМесяца(ТекущаяДата());
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыВозврата(Команда)
	СфомироватьДокументыВозвратаНаСервере();
	Элементы.Товары.ТекущаяСтрока = 0;
	ТоварыПриАктивизацииСтроки();
КонецПроцедуры

&НаСервере
Процедура СформироватьНеАвтоматическоеЗакрытие(ОбъектОбработка)
	
	тзТовары = ОбъектОбработка.Товары.Выгрузить();
	тзТоварыСДокументами = ОбъектОбработка.ТоварыСДокументами.Выгрузить();
	тзТоварыСДокументами.Колонки.Добавить("КоличествоСписания",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Для Каждого СтрокаТовара из тзТовары Цикл  // сначало по каждому товару рассчитаем списание в документах
		НужноСписать = 	СтрокаТовара.Количество;
		СтруктураПоиска = Новый Структура("Номенклатура,Пометка",СтрокаТовара.Номенклатура,Истина);
		МассивСтрок = тзТоварыСДокументами.НайтиСтроки(СтруктураПоиска);
		//Если МассивСтрок.Количество() = 0 Тогда Сообщить("Внимание: по номенклатуре : " + СтрокаТовара.Номенклатура + " не указана приходная накладная."); КонецЕсли;
		Для Каждого СтрокаМассива из МассивСтрок Цикл
			Если НужноСписать=0 Тогда прервать; КонецЕсли;
			Списываем = Мин(СтрокаМассива.количествоОстаток,НужноСписать);
			СтрокаМассива.КоличествоСписания = Списываем;
			НужноСписать = НужноСписать - Списываем;
		КонецЦикла;
	КонецЦикла;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТоварыСДокументами.Пометка,
	|	ТоварыСДокументами.Номенклатура,
	|	ТоварыСДокументами.Документ,
	|	ТоварыСДокументами.КоличествоОстаток,
	//++БИТ БВО
	//|	ТоварыСДокументами.КоличествоСписания
	|	ТоварыСДокументами.КоличествоСписания,
	|	ТоварыСДокументами.Цена,
	|	ТоварыСДокументами.СтавкаНДС
	//--БИТ БВО
	|ПОМЕСТИТЬ ВТВторая
	|ИЗ
	|	&тзТоварыСДокументами КАК ТоварыСДокументами
	|ГДЕ
	|	ТоварыСДокументами.Пометка
	|	И ТоварыСДокументами.КоличествоСписания <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВторая.Документ КАК Документ,
	|	ВТВторая.КоличествоСписания,	
	//++БИТ БВО
	//|	ВТВторая.Номенклатура
	|	ВТВторая.Номенклатура,
	|	ВТВторая.Цена,
	|	ВТВторая.СтавкаНДС
	//--БИТ БВО
	|ИЗ
	|	ВТВторая КАК ВТВторая
	|ИТОГИ ПО
	|	Документ");
	Запрос.УстановитьПараметр("тзТоварыСДокументами",тзТоварыСДокументами);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоДокПрихода = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	БылиОшибки = Ложь;
	МассивДок = Новый Массив;
	Пока ВыборкаПоДокПрихода.Следующий() Цикл
		НачатьТранзакцию();
		ДокОбъект = Документы.РасходнаяНакладная.СоздатьДокумент();
		ДокОбъект.Заполнить(ВыборкаПоДокПрихода.Документ);
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Контрагент) и ТипЗнч(ВыборкаПоДокПрихода.Документ.Контрагент) = Тип("СправочникСсылка.Организации") Тогда 
			ДокОбъект.Контрагент = ВыборкаПоДокПрихода.Документ.Контрагент.Контрагент;
		КонецЕсли;
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.Возврат = Истина;
		ВыборкаПоНоменклатуре = ВыборкаПоДокПрихода.Выбрать();
		МассивСтрок = Новый Массив;
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			СтруктураПоиска = Новый Структура("Номенклатура",ВыборкаПоНоменклатуре.Номенклатура);
			МассивСтрокДокумента = ДокОбъект.Состав.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрокДокумента.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			СтрокаТЧ = МассивСтрокДокумента[0];
			СтрокаТЧ.Количество = ВыборкаПоНоменклатуре.КоличествоСписания;
			//++БИТ БВО
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.Цена) Тогда
				СтрокаТЧ.Цена = ВыборкаПоНоменклатуре.Цена;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.СтавкаНДС) Тогда
				СтрокаТЧ.СтавкаНДС = ВыборкаПоНоменклатуре.СтавкаНДС;
			КонецЕсли;
			//--БИТ БВО
			СтрокаТЧ.Количество = ВыборкаПоНоменклатуре.КоличествоСписания;
			СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
			Ставка = СтрокаТЧ.СтавкаНДС.Ставка;
			СтрокаТЧ.СуммаНДС = Окр(Ставка * СтрокаТЧ.Сумма / (100 + Ставка),2);
			МассивСтрок.Добавить(СтрокаТЧ);
		КонецЦикла;           
		тзНоваяСостав = ДокОбъект.Состав.Выгрузить(МассивСтрок,);
		ДокОбъект.Состав.Загрузить(тзНоваяСостав);
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			МассивДок.Добавить(ДокОбъект);
		Исключение
			БылиОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать документ возврата поставщику ("+ОписаниеОшибки()+")");
		КонецПопытки;
		
		Если БылиОшибки Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сформирован документ: "+ДокОбъект.Ссылка,ДокОбъект.Ссылка);
			тзВыч = ДокОбъект.Состав.Выгрузить(,"Номенклатура, Количество");
			//++БИТ БВО			
			ЗаписьЖурналаРегистрации("Данные.Добавление", 
											УровеньЖурналаРегистрации.Примечание, 
												ДокОбъект.Ссылка.Метаданные(), 
													ДокОбъект.Ссылка,
														"Документ создан обработкой Izh_ВозвратТовараПоставщику");
			//--БИТ БВО
			Для Каждого стрВыч Из тзВыч Цикл
				СтруктураПоиска = Новый Структура("Номенклатура",стрВыч.Номенклатура);
				мсв = ОбъектОбработка.Товары.НайтиСтроки(СтруктураПоиска);
				мсв[0].Количество = мсв[0].Количество - стрВыч.Количество;
				Если мсв[0].Количество <= 0 Тогда 
					ОбъектОбработка.Товары.Удалить(мсв[0]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ОбъектОбработка,"Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЕстьОшибкаКоличестваВозврата(ОбъектОбработка)
	
	Запрос = Новый 	Запрос("ВЫБРАТЬ
	|	тзТовары.Номенклатура,
	|	тзТовары.НомерСтроки,
	|	тзТовары.Количество
	|ПОМЕСТИТЬ ВТПервая
	|ИЗ
	|	&тзТовары КАК тзТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСДокументами.Пометка,
	|	ТоварыСДокументами.Номенклатура,
	|	ТоварыСДокументами.Документ,
	|	ТоварыСДокументами.КоличествоОстаток
	|ПОМЕСТИТЬ ВТВторая
	|ИЗ
	|	&тзТоварыСДокументами КАК ТоварыСДокументами
	|ГДЕ
	|	ТоварыСДокументами.Пометка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.НомерСтроки,
	|	ИсточникДанных.Количество,
	|	ИсточникДанных.Количество - ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) КАК Нехватка
	|ИЗ
	|	ВТПервая КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТВторая.Номенклатура КАК Номенклатура,
	|			СУММА(ВТВторая.КоличествоОстаток) КАК КоличествоОстаток
	|		ИЗ
	|			ВТВторая КАК ВТВторая
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТВторая.Номенклатура) КАК ВложенныйЗапрос
	|		ПО ИсточникДанных.Номенклатура = ВложенныйЗапрос.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) - ИсточникДанных.Количество < 0");
	Запрос.УстановитьПараметр("тзТовары" , ОбъектОбработка.Товары.Выгрузить());
	Запрос.УстановитьПараметр("тзТоварыСДокументами" , ОбъектОбработка.ТоварыСДокументами.Выгрузить());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По номенклатуре позиция: "+Выборка.НомерСтроки+". Нехватает на возврат: "+Формат(Выборка.Нехватка,"ЧГ=0"));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СфомироватьДокументыВозвратаНаСервере()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");	
	Если Объект.Автоматически Тогда  // закрываем как по партиям, FIFO 	ЭТУ ВЕТКУ ПОКА НЕ РАЕЛИЗУЮ, ОТКАЗАЛИСЬ
		
	Иначе // смотрим что пользователь отметил галочками, проверяем количество списания
		ЕстьОшибкаКоличестваВозврата(ОбъектОбработка);
		СформироватьНеАвтоматическоеЗакрытие(ОбъектОбработка)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСДокументамиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСДокументамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ТоварыСДокументами.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если Элементы.ТоварыСДокументами.ТекущийЭлемент.Имя <> "ТоварыСДокументамиДокумент" Тогда Возврат; КонецЕсли;
	ДокСсылка = ТекДанные.Документ;
	Попытка
		СтруктураПараметров = Новый Структура("Ключ", ДокСсылка);
		ОткрытьФорму("Документ."+ПолучитьИмяМетаданных(ДокСсылка) + ".ФормаОбъекта", СтруктураПараметров,ЭтаФорма,ЭтаФорма);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицуОстатков(Номенклатура)
	тзОстатки = РеквизитФормыВЗначение("ОстаткиТоваров");
	Возврат "";
КонецФункции

&НаСервере
Функция ПечататьНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("ПечатнаяФорма");
	ОбластьТовар = Макет.ПолучитьОбласть("Товар");
	ОбластьНакладная = Макет.ПолучитьОбласть("Накладная");
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	ОбластьРазрыв = Макет.ПолучитьОбласть("Разрыв");
	ОбластьПустаяЯчейка = Макет.ПолучитьОбласть("СтрокаСклад|ФирмаКолонка");
	ОбластьСкладКолонка = Макет.ПолучитьОбласть("СтрокаСклад|СкладКолонка");
	ОбластьФирмаСтрока = Макет.ПолучитьОбласть("ФирмаСтрока|ФирмаКолонка");
	ОбластьКоличество = Макет.ПолучитьОбласть("ФирмаСтрока|СкладКолонка");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "Печать_ФормированиеВозвратов";
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТоварыСДокументами.Пометка,
	|	ТоварыСДокументами.Номенклатура КАК Номенклатура,
	|	ТоварыСДокументами.Документ,
	|	ТоварыСДокументами.КоличествоОстаток
	|ПОМЕСТИТЬ ВТТоварыСДокументами
	|ИЗ
	|	&тзТоварыСДокументами КАК ТоварыСДокументами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыСДокументами.Пометка,
	|	ВТТоварыСДокументами.Номенклатура КАК Номенклатура,
	|	ВТТоварыСДокументами.Номенклатура.ПолноеНаименование КАК Наименование,
	|	ВТТоварыСДокументами.Документ,
	|	ВТТоварыСДокументами.КоличествоОстаток,
	|	ВТТоварыСДокументами.Номенклатура.Код КАК НоменклатураКод
	|ИЗ
	|	ВТТоварыСДокументами КАК ВТТоварыСДокументами
	|ИТОГИ
	|	МАКСИМУМ(НоменклатураКод)
	|ПО
	|	Номенклатура");
	Запрос.УстановитьПараметр("тзТоварыСДокументами",ОбработкаОбъект.ТоварыСДокументами.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоНоменклатуре = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		ОбластьТовар.Параметры.КодТовара = ВыборкаПоНоменклатуре.НоменклатураКод;
		ОбластьТовар.Параметры.НаименованиеТовара = ВыборкаПоНоменклатуре.Наименование;
		ТабДок.Вывести(ОбластьТовар);
		ПорядковыйНомер = 1 ;
		Выборка = ВыборкаПоНоменклатуре.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьНакладная.Параметры.ПорядковыйНомер = ПорядковыйНомер;
			ОбластьНакладная.Параметры.Накладная = Выборка.Документ;
			ОбластьНакладная.Параметры.Количество = Выборка.КоличествоОстаток;
			ПорядковыйНомер = ПорядковыйНомер + 1;
			ТабДок.Вывести(ОбластьНакладная);
		КонецЦикла;
		
		МассивСтрок = ОстаткиТоваров.НайтиСтроки(Новый Структура("Номенклатура",ВыборкаПоНоменклатуре.Номенклатура));
		Если МассивСтрок.Количество()>0 Тогда
			ТабДок.Вывести(ОбластьРазделитель);
			ТабДок.Вывести(ОбластьПустаяЯчейка);
			СоответствиеСкладов = Новый Соответствие;
			тзТовары = ОстаткиТоваров.Выгрузить(МассивСтрок,);
			Для Каждого Колонка из тзТовары.Колонки Цикл
				Если Найти(Колонка.Имя,"Склад")=0 Тогда Продолжить; КонецЕсли;
				Если Элементы["ОстаткиТоваров"+Колонка.Имя].Видимость <> Истина Тогда Продолжить; КонецЕсли;
				ИмяСклада = Элементы["ОстаткиТоваров"+Колонка.Имя].Заголовок;
				СоответствиеСкладов.Вставить(Колонка.Имя,ИмяСклада);
				ОбластьСкладКолонка.Параметры.Склад = ИмяСклада;
				ТабДок.Присоединить(ОбластьСкладКолонка);
			КонецЦикла;
			Для Каждого СтрокаТЗ из тзТовары Цикл
				ОбластьФирмаСтрока.Параметры.Фирма = СтрокаТЗ.Фирма;
				ТабДок.Вывести(ОбластьФирмаСтрока);
				Для Каждого Колонка из тзТовары.Колонки Цикл
					Если Найти(Колонка.Имя,"Склад")=0 Тогда Продолжить; КонецЕсли;
					Если Элементы["ОстаткиТоваров"+Колонка.Имя].Видимость <> Истина Тогда Продолжить; КонецЕсли;
					ОбластьКоличество.Параметры.Количество = СтрокаТЗ[Колонка.Имя];	
					ТабДок.Присоединить(ОбластьКоличество);
					
				КонецЦикла;	
			КонецЦикла;
		КонецЕсли;
		ТабДок.Вывести(ОбластьРазрыв);
	КонецЦикла;
	Возврат ТабДок;
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	ТабДок = ПечататьНаСервере();
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Показать();
КонецПроцедуры

//++Минин
&НаКлиенте
Процедура ОткрытьФормуПриходныхНакладных(Команда)
	ОткрытьФорму("Обработка.Izh_ВозвратТовараПоставщику.Форма.ФормаВыбораПриходныхНакладных",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Объект.Товары.Очистить();
	Для Каждого Стр из ВыбранноеЗначение Цикл 
		Строка = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строка,Стр);
	КонецЦикла;
КонецПроцедуры
//--Минин

//++Минин 0000135957 2015-08-24
&НаКлиенте
Процедура ПоискПоШтрихКоду(Команда)Экспорт 
	ШтрихКод = "";
	Если ВвестиСтроку(ШтрихКод,"Введите штрихкод",20,Ложь) Тогда
		ПоискНоменклатуры(ШтрихКод);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоискНоменклатуры(ШтрихКод) 
	Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ШтрихКод);
	Если НЕ Номенклатура.Пустая() и НЕ Номенклатура.Транзакционный Тогда 
		Элементы.ПодборНоменклатуры.ТекущаяСтрока = Номенклатура.Родитель;
	иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Товар с кодом "+Штрихкод+" не найден");
	КонецЕсли;
КонецПроцедуры
//--Минин 0000135957 2015-08-24

&НаСервере
Функция ПоместитьВовременноеХранилищеНаСервере()
	тзШаблон = Новый ТаблицаЗначений;
	тзШаблон.Колонки.Добавить("Номенклатура");
	тзШаблон.Колонки.Добавить("Количество");
	Возврат ПоместитьВоВременноеХранилище(тзШаблон,ЭтаФорма.УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОбработатьРезультатТСДНаСервере(АдресХранилища)
	тзРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);		
	Для Каждого СтрокаТЗ из тзРезультат Цикл
		МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура",СтрокаТЗ.Номенклатура));
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТЗ.Номенклатура;
			НоваяСтрока.Количество = СтрокаТЗ.Количество;
		Иначе
			МассивСтрок[0].Количество = СтрокаТЗ.Количество;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Izh_ДанныеИзТСД(Команда)
	Если Вопрос("Заполнить данными из терминала ?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
		АдресХранилища = ПоместитьВоВременноеХранилищеНаСервере();
		ФормаОбработки = ПолучитьФорму("Обработка.Izh_ТСД.Форма.ФормаОбработки",Новый Структура("АдресХранилища,ВидДействия,ВнешнийВызов,СтруктураПараметров",АдресХранилища,"Инвентаризация",Истина,Новый Структура("ТипДействия","ВыгрузкаИзТСД")),ЭтаФорма.УникальныйИдентификатор);
		ФормаОбработки.ОткрытьМодально();
		ОбработатьРезультатТСДНаСервере(АдресХранилища);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВсеОтмеченныеДокументы()
	
	ОбрОбъект = РеквизитФормыВЗначение("Объект");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗТовары.Количество КАК КоличествоСписать,
	|	ТЗТовары.Номенклатура
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ТЗТовары КАК ТЗТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗСДоками.Пометка,
	|	ТЗСДоками.Номенклатура,
	|	ТЗСДоками.Документ,
	|	ТЗСДоками.КоличествоОстаток,
	|	ТЗСДоками.ЕстьСовпадение,
	|	ТЗСДоками.Контрагент,
	|	ТЗСДоками.Цена,
	|	ТЗСДоками.СтавкаНДС
	|ПОМЕСТИТЬ ВТТоварыСДоками
	|ИЗ
	|	&ТЗСДоками КАК ТЗСДоками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыСДоками.Пометка,
	|	ВТТоварыСДоками.Номенклатура,
	|	ВТТоварыСДоками.Документ КАК Документ,
	|	ВТТоварыСДоками.КоличествоОстаток,
	|	ВТТоварыСДоками.ЕстьСовпадение,
	|	ВТТоварыСДоками.Контрагент,
	|	ВТТоварыСДоками.Цена,
	|	ВТТоварыСДоками.СтавкаНДС,
	|	ВТТовары.КоличествоСписать
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварыСДоками КАК ВТТоварыСДоками
	|		ПО ВТТовары.Номенклатура = ВТТоварыСДоками.Номенклатура
	|ГДЕ
	|	ВТТоварыСДоками.Пометка = ИСТИНА
	|	И ВТТоварыСДоками.Номенклатура В(&СписокНоменклатуры)
	|ИТОГИ ПО
	|	Документ";
	Запрос.УстановитьПараметр("ТЗТовары", ОбрОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТЗСДоками", ОбрОбъект.ТоварыСДокументами.Выгрузить());
	Запрос.УстановитьПараметр("СписокНоменклатуры", ОбрОбъект.Товары.ВыгрузитьКолонку("Номенклатура"));
	
	Возврат Запрос.Выполнить();		
	
КонецФункции

&НаСервере
Процедура СформироватьКоррекцииЗапасовНаСервере(Знач МассивВыделенныхСтрок)
	
	ОбрОбъект = РеквизитФормыВЗначение("Объект");
	
	ВыборкаПоДокументам = ПолучитьВсеОтмеченныеДокументы().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
				
		ДокПН = ВыборкаПоДокументам.Документ;
		
		НовыйДокКоррекция = Документы.КоррекцияЗапасов.СоздатьДокумент();
		НовыйДокКоррекция.Дата				= ТекущаяДата();
		НовыйДокКоррекция.СтруктурнаяЕдиница= ДокПН.СтруктурнаяЕдиница;
		НовыйДокКоррекция.Фирма				= ДокПН.Фирма;
		НовыйДокКоррекция.ВидСписания		= Справочники.ВидыСписания.НайтиПоНаименованию("СписаниеЗаСчетПоставщика");
		НовыйДокКоррекция.Склад				= ДокПН.Склад;				
		НовыйДокКоррекция.ДокОснование		= ДокПН;
		
		ВыборкаТоваров = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаТоваров.Следующий() Цикл			
			
			СтрокаТовара = ОбрОбъект.Товары.Найти(ВыборкаТоваров.Номенклатура,"Номенклатура");
			Если СтрокаТовара = Неопределено Тогда
				Продолжить;			
			КонецЕсли;			
			
			ВсегоСписать = СтрокаТовара.Количество;
			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", ВыборкаТоваров.Номенклатура);
			МассивСтрок = ДокПН.Состав.НайтиСтроки(Отбор);								
			Если МассивСтрок.Количество() > 0 И ВсегоСписать > 0 Тогда				
				СтрокаОснования = МассивСтрок[0];
				Списать = Мин(ВсегоСписать, ВыборкаТоваров.КоличествоОстаток);
				
				СтрокаСостава = НовыйДокКоррекция.Состав.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСостава, СтрокаОснования);
				СтрокаСостава.Количество= Списать;
				СтрокаСостава.Цена		= ВыборкаТоваров.Цена;
				СтрокаСостава.СтавкаНДС	= ВыборкаТоваров.СтавкаНДС;				
				Ставка	= ?(ЗначениеЗаполнено(СтрокаСостава.СтавкаНДС), СтрокаСостава.СтавкаНДС.Ставка, 0);
				Сумма	= СтрокаСостава.Цена * СтрокаСостава.Количество;
				СтрокаСостава.ЦенаУпр		= ВыборкаТоваров.Цена;
				СтрокаСостава.СуммаУпр		= Сумма;
				СтрокаСостава.СуммаНДСУпр	= Izh_ОбщегоНазначенияСервер.РассчитатьСуммуНДС(Сумма, Истина, Ставка);
				
				СтрокаТовара.Количество = СтрокаТовара.Количество - Списать;
			КонецЕсли;									
		КонецЦикла;
		
		НовыйДокКоррекция.ПерераспределитьСоставПоОстаткам();		
		Попытка
			НовыйДокКоррекция.Записать(РежимЗаписиДокумента.Проведение);								
			Сообщить("Создан документ " + СокрЛП(НовыйДокКоррекция));			
		Исключение
			СообщениеОшибки = ОписаниеОшибки();
			Сообщить("Не удалось провести " + СокрЛП(НовыйДокКоррекция));
		КонецПопытки;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбрОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКоррекцииЗапасов(Команда)
		
	СформироватьКоррекцииЗапасовНаСервере(Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры



//&НаСервере
//Процедура УсловноеОформлениеНаСервере()
//	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
//	спДокументы =  Новый СписокЗначений;

//	МассивСтрок = ОбъектОбработка.ТоварыСДокументами.НайтиСтроки(Новый Структура("Пометка",Истина));
//	Для Каждого СтрокаМассива из МассивСтрок Цикл
//		Если спДокументы.НайтиПоЗначению(СтрокаМассива.Документ)<>Неопределено Тогда Продолжить; КонецЕсли;
//		спДокументы.Добавить(СтрокаМассива.Документ);
//	КонецЦикла;
//	
//	УсловноеОформление.Элементы.Очистить();
//	ЭлементОУ = УсловноеОформление.Элементы.Добавить();
//	ЭлементОУ.Использование    = Истина;
//	ЭлементОУ.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);	
//	
//	ЭлементУсловия                = ЭлементОУ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТоварыСДокументами.Документ");
//	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
//	ЭлементУсловия.ПравоеЗначение = спДокументы;
//	ЭлементУсловия.Использование  = Истина;
//	
//	ЭлементУсловия                = ЭлементОУ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТоварыСДокументами.Пометка");
//	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
//	ЭлементУсловия.ПравоеЗначение = Истина;
//	ЭлементУсловия.Использование  = Истина;
//	
//	ОформляемоеПоле      = ЭлементОУ.Поля.Элементы.Добавить();
//	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыСДокументамиДокумент");	
//	ОформляемоеПоле      = ЭлементОУ.Поля.Элементы.Добавить();
//	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыСДокументамиДокумент");	
//	ОформляемоеПоле      = ЭлементОУ.Поля.Элементы.Добавить();
//	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыСДокументамиКоличествоОстаток");	
//	
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ТоварыСДокументамиПометкаПриИзменении(Элемент)
//	ТекСтрока = Элементы.ТоварыСДокументами.ТекущиеДанные;
//	Если ТекСтрока=Неопределено Тогда Возврат; КонецЕсли;
//	УсловноеОформлениеНаСервере();
//КонецПроцедуры

//{БредовЮГ 2013-07-30 Работа с терминалом


//БредовЮГ 2013-07-30}
