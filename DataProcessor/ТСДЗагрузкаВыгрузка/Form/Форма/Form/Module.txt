&НаКлиенте
Перем db_shema, db_idx;

//Вспомогательные функции
&НаКлиенте
Функция ВернутьВидДокумента(Код) 
	Если Число(Код) = 0 Тогда
		Возврат "Инвентаризация";
	ИначеЕсли Число(Код) = 1 Тогда
		Возврат "ПриходнаяНакладная";
	ИначеЕсли Число(Код) = 2 Тогда
		Возврат "РасходнаяНакладная";
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьЦенуЗакупки(Фирма, Номенклатура, ТекДата)

	ФильтрНоменклатуры = "&Номенклатура";

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляПолученияЦен(ФильтрНоменклатуры, Истина);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Фирма", Фирма);
	Запрос.УстановитьПараметр("Период", ТекДата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Цена;
	КонецЕсли;

	Возврат 0;
	
КонецФункции // ПолучитьЦенуЗакупки()

&НаСервере
Функция ПолучитьЦенуПродажи(Номенклатура, ТекДата)
	
	ФильтрНоменклатуры = "&Номенклатура";

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляПолученияЦен(ФильтрНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Период", ТекДата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Цена;
	КонецЕсли;

	Возврат 0;
	
КонецФункции // ПолучитьЦенуПродажи()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстЗапросаДляПолученияЦен(ФильтрНоменклатуры, Закупочные = Ложь)

	Если Закупочные Тогда
		//ТекстЗапроса = "ВЫБРАТЬ
		//			   |	ЦеныНоменклатурыЗакупочныеСрезПоследних.Номенклатура,
		//			   |	ЦеныНоменклатурыЗакупочныеСрезПоследних.ЕдиницаИзмерения,
		//			   |	ЦеныНоменклатурыЗакупочныеСрезПоследних.Цена
		//			   |ИЗ
		//			   |	РегистрСведений.ЦеныНоменклатурыЗакупочные.СрезПоследних(
		//			   |			&Период,
		//			   |			Фирма = &Фирма" + ?(ФильтрНоменклатуры = Неопределено, "", " И Номенклатура В ИЕРАРХИИ ("+ФильтрНоменклатуры+")") + "
		//			   |				) КАК ЦеныНоменклатурыЗакупочныеСрезПоследних";
		ТекстЗапроса = "ВЫБРАТЬ
		               |	НоменклатураКонтрагента.Номенклатура,
		               |	НоменклатураКонтрагента.ЕдиницаЗаказа,
		               |	МАКСИМУМ(НоменклатураКонтрагента.Цена) КАК Цена,
		               |	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
		               |ИЗ
		               |	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |		ПО НоменклатураКонтрагента.ЕдиницаЗаказа = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
		               |			И НоменклатураКонтрагента.Номенклатура = ЕдиницыИзмерения.Владелец
		               |ГДЕ
		               |	НоменклатураКонтрагента.ОсновнойПоставщик
		               |	" + ?(ФильтрНоменклатуры = Неопределено, "", "И НоменклатураКонтрагента.Номенклатура В ИЕРАРХИИ ("+ФильтрНоменклатуры+")") + "
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НоменклатураКонтрагента.Номенклатура,
		               |	НоменклатураКонтрагента.ЕдиницаЗаказа,
		               |	ЕдиницыИзмерения.Ссылка
		               |";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		               |	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена	//есть еще СЕ, но тсд их не переваривает
		               |ИЗ
					   //|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)" + ?(ФильтрНоменклатуры = Неопределено, "", " И Номенклатура В ИЕРАРХИИ ("+ФильтрНоменклатуры+")") + ") КАК ЦеныНоменклатурыСрезПоследних
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		               |			ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |			ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |			МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.ID) КАК ID
		               |		ИЗ
					   //|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
		               |			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)" + ?(ФильтрНоменклатуры = Неопределено, "", " И Номенклатура В ИЕРАРХИИ ("+ФильтрНоменклатуры+")") + ") КАК ЦеныНоменклатурыСрезПоследних
		               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		               |					ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |					МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
		               |				ИЗ
					   //|					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
		               |					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)" + ?(ФильтрНоменклатуры = Неопределено, "", " И Номенклатура В ИЕРАРХИИ ("+ФильтрНоменклатуры+")") + ") КАК ЦеныНоменклатурыСрезПоследних
		               |				ГДЕ
		               |					ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
		               |				
		               |				СГРУППИРОВАТЬ ПО
		               |					ЦеныНоменклатурыСрезПоследних.Номенклатура,
		               |					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
		               |					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница) КАК ВложенныйЗапрос
		               |				ПО ЦеныНоменклатурыСрезПоследних.Период = ВложенныйЗапрос.Период
		               |					И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
		               |					И ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
		               |					И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
		               |		ГДЕ
		               |			ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ЦеныНоменклатурыСрезПоследних.Номенклатура,
		               |			ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
		               |			ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница) КАК ВложенныйЗапрос
		               |		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
		               |			И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
		               |			И ЦеныНоменклатурыСрезПоследних.ID = ВложенныйЗапрос.ID
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВложенныйЗапрос.Номенклатура,
		               |	ВложенныйЗапрос.ЕдиницаИзмерения";
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

//-----------------------------
&НаСервере
Функция ЗаполнитьТаблицуВыгрузкиНоменклатуры(ТекстФильтрНоменклатуры = Неопределено, СтрукПараметрыЗапроса = Неопределено)
	
	ТаблицаНоменклатурыВыгрузка.Очистить();
	
	Если ВидВыгрузки = 0	//всю
		ИЛИ ВидВыгрузки = 1	//остатки по складу
		ИЛИ ВидВыгрузки = 2	//только выбранная
		ИЛИ ВидВыгрузки = 3	//номенклатуру контрагентов
		ИЛИ ВидВыгрузки = 5 Тогда	//номенклатуру из заказов
		
		Если СтрукПараметрыЗапроса = Неопределено Тогда
			СтрукПараметрыЗапроса = Новый Структура;
		КонецЕсли;
		//СтрукПараметрыЗапроса.Вставить("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		
		Если ВидВыгрузки = 0 Тогда	//всю
		ИначеЕсли ВидВыгрузки = 1 Тогда	//остатки по складу
			Если Не Склад.Пустая() Тогда
				ТекстФильтрНоменклатуры =
				"ВЫБРАТЬ
				|	ОстаткиНоменклатурыОстатки.Номенклатура
				|ИЗ
				|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(, МестоХранения = &Склад) КАК ОстаткиНоменклатурыОстатки";
				СтрукПараметрыЗапроса.Вставить("Склад", Склад);
			КонецЕсли;	
		ИначеЕсли ВидВыгрузки = 2 Тогда	//только выбранная
			ТекстФильтрНоменклатуры = "&Номенклатура";
			маНоменклатура = ТаблицаДляВыгрузки.Выгрузить(Новый Структура("Выгружать", Истина), "Номенклатура").ВыгрузитьКолонку("Номенклатура");
			СтрукПараметрыЗапроса.Вставить("Номенклатура", маНоменклатура);
		ИначеЕсли ВидВыгрузки = 3 Тогда	//номенклатуру контрагентов
			ТекстФильтрНоменклатуры =
			"ВЫБРАТЬ
			|	НоменклатураКонтрагента.Номенклатура КАК Номенклатура
			|ИЗ
			|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
			|ГДЕ
			|	НоменклатураКонтрагента.Контрагент В ИЕРАРХИИ (&Контрагент)";
			маПоставщики = ТаблицаДляВыгрузки.Выгрузить(Новый Структура("Выгружать", Истина), "Поставщик").ВыгрузитьКолонку("Поставщик");
			СтрукПараметрыЗапроса.Вставить("Контрагент", маПоставщики);
		ИначеЕсли ВидВыгрузки = 5 Тогда	//номенклатуру из заказов
			ТекстФильтрНоменклатуры =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПланируемаяПоставкаСостав.Номенклатура
			|ИЗ
			|	Документ.ПланируемаяПоставка.Состав КАК ПланируемаяПоставкаСостав
			|ГДЕ
			|	ПланируемаяПоставкаСостав.Ссылка В(&Заказы)";
			маЗаказы = ТаблицаДляВыгрузки.Выгрузить(Новый Структура("Выгружать", Истина), "Документы").ВыгрузитьКолонку("Документы");
			СтрукПараметрыЗапроса.Вставить("Заказы", маЗаказы);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка,
		|	СправочникНоменклатура.Код,
		|	СправочникНоменклатура.Наименование,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Весовой)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ТипТовара,
		|	СправочникНоменклатура.БазоваяЕдиницаИзмерения.Код КАК КодБазовойЕдиницы,
		|	ВЫБОР
		|		КОГДА &КонтрольАссортиментнойМатрицы
		|			ТОГДА ВЫБОР
		|					КОГДА СтатусыНоменклатуры.Номенклатура ЕСТЬ NULL 
		|						ТОГДА 0
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЕстьВМатрице
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
		|		ПО (СправочникНоменклатура.Ссылка = СтатусыНоменклатуры.Номенклатура
		|				И СтатусыНоменклатуры.СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)
		|				И СтатусыНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТоваров.Активный))
		|ГДЕ
		|	СправочникНоменклатура.Группа = 0
		|	И СправочникНоменклатура.Транзакционный
		|	И СправочникНоменклатура.ВидТовара <> ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
		|	И СправочникНоменклатура.БазоваяЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)";
		
		Если Не ТекстФильтрНоменклатуры = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И Ссылка В ИЕРАРХИИ (" + ТекстФильтрНоменклатуры + ")";
		КонецЕсли;	
		Для каждого эл Из СтрукПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(эл.Ключ, эл.Значение);
		КонецЦикла; 
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница); //V
		Запрос.УстановитьПараметр("КонтрольАссортиментнойМатрицы", КонтрольАссортиментнойМатрицы);
		
		ТаблицаНоменклатурыВыгрузка.Загрузить(Запрос.Выполнить().Выгрузить());
		
	ИначеЕсли ВидВыгрузки = 4 Тогда	//любые из отмеченных в ТаблицаДокументов (видов документов)
		//проверка на одинаковые номера документов
		Отказ = Ложь;
		Для Каждого сТаблицы Из ТаблицаДляВыгрузки Цикл
			Если НЕ сТаблицы.Выгружать Тогда
				Продолжить;
			КонецЕсли;
			Если сТаблицы.Документы.Пустая() Тогда
				Сообщить("В строке № " + (ТаблицаДляВыгрузки.Индекс(сТаблицы)+1) + " не выбран документ для выгрузки.", СтатусСообщения.Внимание);	
				Отказ = Истина;
			ИначеЕсли ПустаяСтрока(сТаблицы.КакВыгружать) Тогда
				Сообщить("Не указано поле ""Как выгружать"", у документа - " + сТаблицы.Документы, СтатусСообщения.Внимание);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		промТаблицаДляВыгрузки = ТаблицаДляВыгрузки.Выгрузить(Новый Структура("Выгружать", Истина), "Документы");
		промТаблицаДляВыгрузки.Колонки.Добавить("НомерДокумента");
		Для Каждого Строка Из промТаблицаДляВыгрузки Цикл
			Строка.НомерДокумента = Строка.Документы.Номер;	
		КонецЦикла;
		промТаблицаДляВыгрузки.Сортировать("НомерДокумента");
		ПредыдущийНомер = "";
		Для Каждого Строка Из промТаблицаДляВыгрузки Цикл
			текНомер = Строка.НомерДокумента;
			Если ТекНомер = ПредыдущийНомер Тогда
				Сообщить("В ТСД нельзя выгружать документы с одинаковыми номерами. Документы: " + Строка.Документы+" и " + промТаблицаДляВыгрузки.Получить(промТаблицаДляВыгрузки.Индекс(Строка)-1).Документы ,СтатусСообщения.Внимание);	
				Отказ = Истина;
			КонецЕсли;
			ПредыдущийНомер = ТекНомер;
		КонецЦикла;
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Услуга = Перечисления.ВидыТоваров.Услуга;
		Для каждого СтрокаВыгрузки Из ТаблицаДляВыгрузки Цикл
			Если НЕ СтрокаВыгрузки.Выгружать Тогда
				Продолжить;
			КонецЕсли;
			ВидДокумента = СтрокаВыгрузки.Документы.Метаданные().Имя;
			//ЕстьЕдиницыИзмерения = Метаданные.Документы[ВидДокумента].ТабличныеЧасти.Состав.Реквизиты.Найти("ЕдиницаИзмерения");
			ЕстьКоличествоПоДокументу = Метаданные.Документы[ВидДокумента].ТабличныеЧасти.Состав.Реквизиты.Найти("КоличествоПоДокументу");
			ЕстьКоэффициент = Метаданные.Документы[ВидДокумента].ТабличныеЧасти.Состав.Реквизиты.Найти("Коэффициент");
			Если СтрокаВыгрузки.КакВыгружать = "Как ведомость" Тогда	//без денег
				ЕстьЦена = Неопределено;
				ЕстьСумма = Неопределено;
			Иначе
				ЕстьЦена = Метаданные.Документы[ВидДокумента].ТабличныеЧасти.Состав.Реквизиты.Найти("Цена");
				ЕстьСумма = Метаданные.Документы[ВидДокумента].ТабличныеЧасти.Состав.Реквизиты.Найти("Сумма");
			КонецЕсли;
			Если ЕстьКоэффициент = Неопределено Тогда
				Коэффициент = 1;
			КонецЕсли;
			//Если СтрокаВыгрузки.Документы.Состав.Количество() > 10000 Тогда
			//	Сообщить("Невозможно выгрузить документ с количеством строк > 10000");	
			//	Продолжить;
			//КонецЕсли;
			Для Каждого сСостав Из СтрокаВыгрузки.Документы.Состав Цикл
				Если сСостав.Номенклатура.ВидТовара = Услуга Тогда
					Продолжить;
				КонецЕсли;	
				СтрокаТаблицы = ТаблицаНоменклатурыВыгрузка.Добавить();
				СтрокаТаблицы.ДокНомерСтроки = сСостав.НомерСтроки;
				СтрокаТаблицы.Ссылка = сСостав.Номенклатура;
				СтрокаТаблицы.Код = сСостав.Номенклатура.Код;
				СтрокаТаблицы.Наименование = сСостав.Номенклатура.Наименование;
				СтрокаТаблицы.ТипТовара = ?(сСостав.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Весовой,0,1);
				СтрокаТаблицы.КодБазовойЕдиницы = сСостав.Номенклатура.БазоваяЕдиницаИзмерения.Код;
				Если Не ЕстьКоэффициент = Неопределено Тогда
					Коэффициент = ?(сСостав.Коэффициент = 0, 1, сСостав.Коэффициент);
				КонецЕсли;
				Если ЕстьКоличествоПоДокументу = Неопределено Тогда
					СтрокаТаблицы.Количество = сСостав.Количество * Коэффициент;
				Иначе
					СтрокаТаблицы.Количество = сСостав.КоличествоПоДокументу * Коэффициент;
				КонецЕсли;
				Если Не ЕстьЦена = Неопределено Тогда
					СтрокаТаблицы.Цена = сСостав.Цена / Коэффициент;
				КонецЕсли;
				Если Не ЕстьСумма = Неопределено Тогда
					СтрокаТаблицы.Сумма = сСостав.Сумма;
				КонецЕсли;
				СтрокаТаблицы.НомерДокумента = СтрокаВыгрузки.Документы.Номер;
				СтрокаТаблицы.КакВыгружать = СтрокаВыгрузки.КакВыгружать;
			КонецЦикла; 
		КонецЦикла;//Из ТаблицаДляВыгрузки
	КонецЕсли;
	Возврат ТаблицаНоменклатурыВыгрузка.Количество() > 0;
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуЕдиниц()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Код,
	|	КлассификаторЕдиницИзмерения.Наименование
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения";
	ТаблицаЕдиницВыгрузка.Загрузить(Запрос.Выполнить().Выгрузить());
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуВыгрузкиШК(ТекстФильтрНоменклатуры, СтрукПараметрыЗапроса)
	
	ТекстЗапросаЗакупочные = ПолучитьТекстЗапросаДляПолученияЦен(ТекстФильтрНоменклатуры,Истина);
	ТекстЗапросаРозничные = ПолучитьТекстЗапросаДляПолученияЦен(ТекстФильтрНоменклатуры);
	мТипыКодов = ШтриховыеКоды.ПолучитьМассивСсылокТиповШтриховыхКодов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА СправочникНоменклатура.ТипКода.Код = ""VPLU""
	               |			ТОГДА СправочникНоменклатура.ПрефиксPLU + СправочникНоменклатура.Код
	               |		ИНАЧЕ СправочникНоменклатура.Код
	               |	КОНЕЦ КАК Код,
	               |	ВЫБОР
	               |		КОГДА СправочникНоменклатура.Транзакционный
	               |			ТОГДА СправочникНоменклатура.Код
	               |		ИНАЧЕ СправочникНоменклатура.Родитель.Код
	               |	КОНЕЦ КАК КодНоменклатуры,
	               |	ВЫБОР
	               |		КОГДА СправочникНоменклатура.Транзакционный
	               |			ТОГДА СправочникНоменклатура.БазоваяЕдиницаИзмерения.Код
	               |		ИНАЧЕ СправочникНоменклатура.Родитель.БазоваяЕдиницаИзмерения.Код
	               |	КОНЕЦ КАК КодБазовойЕдиницы,
				   |	ЕСТЬNULL(ЦеныЗакупки.Цена, 0) КАК ЦенаЗакупки,
				   |	ЕСТЬNULL(ЦеныПродажи.Цена, 0) КАК ЦенаПродажи
	               |ИЗ
	               |	Справочник.Номенклатура КАК СправочникНоменклатура
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ("+ТекстЗапросаЗакупочные+") КАК ЦеныЗакупки
				   |		ПО ЦеныЗакупки.Номенклатура = СправочникНоменклатура.Родитель
				   |			И ЦеныЗакупки.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = ЦеныЗакупки.Номенклатура.БазоваяЕдиницаИзмерения
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ("+ТекстЗапросаРозничные+") КАК ЦеныПродажи
				   |		ПО ЦеныПродажи.Номенклатура = СправочникНоменклатура.Родитель
				   |			И ЦеныПродажи.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = ЦеныПродажи.Номенклатура.БазоваяЕдиницаИзмерения
				   |ГДЕ
				   |	СправочникНоменклатура.ТипКода В (&ТипыКодов)
	               |	И (СправочникНоменклатура.Родитель В(&Товар) ИЛИ СправочникНоменклатура.Ссылка В(&Товар))";
	Запрос.УстановитьПараметр("Товар", ТаблицаНоменклатурыВыгрузка.Выгрузить(, "Ссылка").ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Фирма", "");
	Запрос.УстановитьПараметр("ТипыКодов", мТипыКодов);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Если СтрукПараметрыЗапроса = Неопределено Тогда
		СтрукПараметрыЗапроса = Новый Структура;
	КонецЕсли;
	Для каждого эл Из СтрукПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(эл.Ключ, эл.Значение);
	КонецЦикла; 
	ТаблицаШтрихКодовВыгрузка.Загрузить(Запрос.Выполнить().Выгрузить());
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуШапокДокументовВыгрузка()

	ТаблицаШапокДокументовВыгрузка.Очистить();
	Для каждого Строка Из ТаблицаДляВыгрузки Цикл
		Если Не Строка.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		нс = ТаблицаШапокДокументовВыгрузка.Добавить();
		нс.ДокументУИД = Строка(Строка.Документы.УникальныйИдентификатор());
		нс.Номер = Строка.Документы.Номер;
		нс.Дата = Строка.Документы.Дата;
		ТипДокумента = 0;
		Если Строка.КакВыгружать = "Как приходную накладную" Тогда
			ТипДокумента = 1;
		ИначеЕсли Строка.КакВыгружать = "Как расходную накладную" Тогда
			ТипДокумента = 2;
		КонецЕсли;
		нс.ТипДокумента = ТипДокумента;
		нс.ВидДокумента = Строка.Документы.Метаданные().Имя;
		ЕстьКонтрагент = Метаданные.Документы[нс.ВидДокумента].Реквизиты.Найти("Контрагент");
		Если ЕстьКонтрагент <> Неопределено И ЗначениеЗаполнено(Строка.Документы.Контрагент) Тогда
			нс.ПоставщикКод = Строка.Документы.Контрагент.Код;
			нс.ПоставщикУИД = Строка(Строка.Документы.Контрагент.УникальныйИдентификатор());
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуВыгрузкиЗаказами(ДнейНазад, ДнейВперед, СписокПоставщиков)
	ДатаПоставкиНачало = НачалоДня(ТекущаяДата())-ДнейНазад*86400;
	ДатаПоставкиКонец = КонецДня(НачалоДня(ТекущаяДата())+ДнейВперед*86400);
	
	ТаблицаДляВыгрузки.Очистить();
	
	СписокКонтрагентов = Новый СписокЗначений();
	СписокСтруктурныхЕдиниц = Новый СписокЗначений();
	Для Каждого стр Из СписокПоставщиков Цикл
		Если ТипЗнч(стр.Значение)=Тип("СправочникСсылка.Контрагенты") Тогда
			СписокКонтрагентов.Добавить(стр.Значение);
		Иначе
			СписокСтруктурныхЕдиниц.Добавить(стр.Значение);
		КонецЕсли;
	КонецЦикла;
	
		мСтрок = Объект.ТаблицаДокументов.НайтиСтроки(Новый Структура("Значение", "ПланируемаяПоставка"));
		Если мСтрок.Количество() = 0 Тогда
			КакВыгружать = "";
		Иначе
			КакВыгружать = мСтрок[0].КакВыгружать;
		КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Заказ.Ссылка,
				   //|	ВЫБОР КОГДА ЗакрытиеЗаказов.ПоДокументу ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ Выгружать,
|	Истина КАК Выгружать,
|	""" + КакВыгружать + """ КАК КакВыгружать
	               |ИЗ
	               |	Документ.ПланируемаяПоставка КАК Заказ
				   //|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗакрытиеЗаказов ЗакрытиеЗаказов
				   //|		ПО Заказ.Ссылка=ЗакрытиеЗаказов.ПоДокументу
	               |ГДЕ
	               |	Заказ.Проведен
				   //|	И Заказ.ДатаПоставки МЕЖДУ &ДатаПоставкиНачало И &ДатаПоставкиКонец
				   |"+?(СписокСтруктурныхЕдиниц.Количество()>0,"
	               |	И Заказ.СтруктурнаяЕдиница В(&СтруктурнаяЕдиница)","")+"
				   |"+?(СписокКонтрагентов.Количество()>0,"
	               |	И Заказ.Контрагент В(&Контрагент)","")+"
				   //|УПОРЯДОЧИТЬ ПО Заказ.ДатаПоставки
				   |";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаПоставкиНачало", ДатаПоставкиНачало);
	Запрос.УстановитьПараметр("ДатаПоставкиКонец", ДатаПоставкиКонец);
	Запрос.УстановитьПараметр("Контрагент", СписокКонтрагентов);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СписокСтруктурныхЕдиниц);
	
	ТаблицаДляВыгрузки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗаполнитьТабДляВыгрузкиПоставщики()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДляВыгрузки", ТаблицаДляВыгрузки.Выгрузить(Новый Структура("Выгружать", Истина)));
	Если ВидВыгрузки = 4 Или ВидВыгрузки = 5 Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаДляВыгрузки.Выгружать,
		               |	ТаблицаДляВыгрузки.Документы
		               |ПОМЕСТИТЬ ВременнаяТаблица
		               |ИЗ
		               |	&ТаблицаДляВыгрузки КАК ТаблицаДляВыгрузки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Контрагенты.Код,
		               |	Контрагенты.Наименование,
		               |	Контрагенты.Ссылка КАК Контрагент
		               |ИЗ
		               |	ВременнаяТаблица КАК ВременнаяТаблица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		               |		ПО ВременнаяТаблица.Документы.Контрагент = Контрагенты.Ссылка
					   //|ГДЕ
					   //|	ВременнаяТаблица.Выгружать = ИСТИНА
					   |";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаДляВыгрузки.Выгружать,
		               |	ТаблицаДляВыгрузки.Поставщик
		               |ПОМЕСТИТЬ ВременнаяТаблица
		               |ИЗ
		               |	&ТаблицаДляВыгрузки КАК ТаблицаДляВыгрузки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Контрагенты.Код,
		               |	Контрагенты.Наименование,
		               |	Контрагенты.Ссылка КАК Контрагент
		               |ИЗ
		               |	ВременнаяТаблица КАК ВременнаяТаблица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		               |		ПО ВременнаяТаблица.Поставщик = Контрагенты.Ссылка
					   //|ГДЕ
					   //|	ВременнаяТаблица.Выгружать = ИСТИНА
					   |";
	КонецЕсли;
	ТабДляВыгрузкиПоставщики.Загрузить(Запрос.Выполнить().Выгрузить());
	Возврат Истина;

КонецФункции // ЗаполнитьТабДляВыгрузкиПоставщики()

&НаСервере
Функция ПолучитьТаблицуШтрихкодов(МассивНоменклатуры, ФильтрНоменклатуры, ТекДата)
	Запрос = Новый Запрос;
	СтрукПараметрыЗапроса = Новый Структура;
	ТекстЗапросаЗакупочные = ПолучитьТекстЗапросаДляПолученияЦен(ФильтрНоменклатуры,Истина);
	ТекстЗапросаРозничные = ПолучитьТекстЗапросаДляПолученияЦен(ФильтрНоменклатуры);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СправочникНоменклатура.Код,
	//|	ШтриховыеКоды.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	1 КАК Коэффициент,
	|	СправочникНоменклатура.Код КАК КодНоменклатуры,
	|	СправочникНоменклатура.БазоваяЕдиницаИзмерения.Код КАК КодБазовойЕдиницы,
	|   """" КАК Характеристика,
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныЗакупки.Цена, 0) КАК ЦенаЗакупки,
	|	ЕСТЬNULL(ЦеныПродажи.Цена, 0) КАК ЦенаПродажи
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+ТекстЗапросаЗакупочные+") КАК ЦеныЗакупки
	|		ПО ЦеныЗакупки.Номенклатура = СправочникНоменклатура.Ссылка
	|			И ЦеныЗакупки.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = ЦеныЗакупки.Номенклатура.БазоваяЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+ТекстЗапросаРозничные+") КАК ЦеныПродажи
	|		ПО ЦеныПродажи.Номенклатура = СправочникНоменклатура.Ссылка
	|			И ЦеныПродажи.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = ЦеныПродажи.Номенклатура.БазоваяЕдиницаИзмерения
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В (&Номенклатура)";
	//Для каждого элем Из СтрукПараметрыЗапроса Цикл
	//	Запрос.УстановитьПараметр(элем.Ключ, элем.Значение);
	//КонецЦикла; 
	Запрос.УстановитьПараметр("Период", ТекДата);
	Запрос.УстановитьПараметр("Фирма", "");
	Запрос.УстановитьПараметр("Номенклатура",МассивНоменклатуры);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	промТаблицаШтрихКодовВыгрузка = Запрос.Выполнить().Выгрузить();
	Для каждого сТаблицы Из промТаблицаШтрихКодовВыгрузка Цикл
		сТаблицы.КодБазовойЕдиницы = Строка(сТаблицы.Номенклатура.БазоваяЕдиницаИзмерения.УникальныйИдентификатор());
	КонецЦикла;

	ТаблицаШтрихКодовВыгрузка = промТаблицаШтрихКодовВыгрузка.Скопировать();
	Возврат ТаблицаШтрихКодовВыгрузка;
КонецФункции

&НаКлиенте
Процедура ВидВыгрузкиПриИзменении(Элемент)
	ТаблицаДляВыгрузки.Очистить();	
	Если ВидВыгрузки = 2 ИЛИ ВидВыгрузки = 3 ИЛИ ВидВыгрузки = 4 ИЛИ ВидВыгрузки = 5 Тогда
		Элементы.ТаблицаДляВыгрузки.Доступность = Истина;
		Элементы.ТаблицаДляВыгрузкиКоманднаяПанель.Доступность = Истина;
	Иначе	
		Элементы.ТаблицаДляВыгрузки.Доступность = Ложь;		
		Элементы.ТаблицаДляВыгрузкиКоманднаяПанель.Доступность = Ложь;
	КонецЕсли; 
	Если ВидВыгрузки = 1 Тогда
		Элементы.Склад.Доступность = Истина;		
	Иначе
		Элементы.Склад.Доступность = Ложь;		
	КонецЕсли;	
	Если ВидВыгрузки = 2 Тогда
		Элементы.ТаблицаДляВыгрузкиНоменклатура.Видимость = Истина;
		Элементы.ТаблицаДляВыгрузкиДокументы.Видимость = Ложь;
		Элементы.ТаблицаДляВыгрузкиКакВыгружать.Видимость = Ложь;
	ИначеЕсли ВидВыгрузки = 4 Тогда
		Элементы.ТаблицаДляВыгрузкиНоменклатура.Видимость = Ложь;
		Элементы.ТаблицаДляВыгрузкиДокументы.Видимость = Истина;
		Элементы.ТаблицаДляВыгрузкиКакВыгружать.Видимость = Истина;
	КонецЕсли;
	Если ВидВыгрузки = 4 Тогда
		//Элементы.ВыгрузкаКоличества.Доступность = Ложь;
		//Элементы.ВыгрузкаКоличества1.Доступность = Ложь;
		ВыгрузкаКоличества=2;
		Элементы.ЗапретПревышениеКоличества.Доступность = Истина;
		Элементы.ВыгружатьКоличество.Доступность = Истина;
	Иначе	
		//Элементы.ВыгрузкаКоличества.Доступность = Ложь;
		//Элементы.ВыгрузкаКоличества1.Доступность = Ложь;
		Элементы.ЗапретПревышениеКоличества.Доступность = Ложь;
		Элементы.ВыгружатьКоличество.Доступность = Ложь;
	КонецЕсли;
	Если ВидВыгрузки = 3 Тогда
		Элементы.ТаблицаДляВыгрузкиНоменклатура.Видимость = Ложь;
		Элементы.ТаблицаДляВыгрузкиДокументы.Видимость = Ложь;
		Элементы.ТаблицаДляВыгрузкиКакВыгружать.Видимость = Ложь;
		Элементы.ТаблицаДляВыгрузкиПоставщик.Видимость = Истина;
		//Элементы.ТаблицаДляВыгрузкиДоговор.Видимость = Истина;
		Элементы.ТаблицаДляВыгрузкиДоговор.Видимость = Ложь;
	ИначеЕсли ВидВыгрузки = 5 Тогда
		ВыгрузкаКоличества = 2;
		Элементы.ТаблицаДляВыгрузкиНоменклатура.Видимость = Ложь;
		Элементы.ТаблицаДляВыгрузкиДокументы.Видимость = Истина;
		Элементы.ТаблицаДляВыгрузкиКакВыгружать.Видимость = Ложь;
		Элементы.ТаблицаДляВыгрузкиПоставщик.Видимость = Ложь;
		Элементы.ТаблицаДляВыгрузкиДоговор.Видимость = Ложь;
		//Элементы.ЗапретПревышениеКоличества.Доступность = Истина;
		Элементы.ВыгружатьКоличество.Доступность = Истина;
	Иначе 
		Элементы.ТаблицаДляВыгрузкиПоставщик.Видимость = Ложь;
		Элементы.ТаблицаДляВыгрузкиДоговор.Видимость = Ложь;
	КонецЕсли;
	Если ВидВыгрузки = 3 Или ВидВыгрузки = 5 Тогда
		//Элементы.ТаблицаДляВыгрузкиУстановитьПараметрыВыгрузки.Доступность = Истина;		
		Элементы.ТаблицаДляВыгрузкиЗаполнитьТаблицуВыгрузки.Доступность = Истина;
	Иначе
		//Элементы.ТаблицаДляВыгрузкиУстановитьПараметрыВыгрузки.Доступность = Ложь;		
		Элементы.ТаблицаДляВыгрузкиЗаполнитьТаблицуВыгрузки.Доступность = Ложь;
	КонецЕсли;
	
	Если ВидВыгрузки > 1 Тогда
		Элементы.ТаблицаДляВыгрузкиСнятьВсеФлажки.Доступность = Истина;
		Элементы.ТаблицаДляВыгрузкиУстановитьВсеФлажки.Доступность = Истина;
	Иначе
		Элементы.ТаблицаДляВыгрузкиСнятьВсеФлажки.Доступность = Ложь;
		Элементы.ТаблицаДляВыгрузкиУстановитьВсеФлажки.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуВыгрузки(Команда)
	
	Если ВидВыгрузки = 5 Тогда
		ЗаполнитьТаблицуВыгрузкиЗаказами(Авто_КоличествоДнейНазад, Авто_КоличествоДнейВперед, Авто_СписокПоставщиков);
	ИначеЕсли ВидВыгрузки = 3 Тогда
		Для каждого эл Из Авто_СписокПоставщиков Цикл
			нс = ТаблицаДляВыгрузки.Добавить();
			нс.Поставщик = эл.Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлажки(Команда)
	Для каждого Строка Из ТаблицаДляВыгрузки Цикл
		Строка.Выгружать = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлажки(Команда)
	Для каждого Строка Из ТаблицаДляВыгрузки Цикл
		Строка.Выгружать = Истина;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Каталог = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "Каталог");
	ИспользоватьФайлыКаталогаОбмена = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "ИспользоватьФайлыКаталогаОбмена");
	ДействиеНадДокументом = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "ДействиеНадДокументом");
	//ВидКомпоненты = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "ВидКомпоненты");
	СписокТиповДокументов = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "СписокТиповДокументов");
	
	КонтрольАссортиментнойМатрицы =  ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "КонтрольАссортиментнойМатрицы");
	КонтрольТоваровКонтрагента = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "КонтрольТоваровКонтрагента");
	КонтрольЗаказов = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "КонтрольЗаказов");
	КонтрольЗакупочныхЦен = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "КонтрольЗакупочныхЦен");
	Если КонтрольАссортиментнойМатрицы=Неопределено Тогда КонтрольАссортиментнойМатрицы=Ложь; КонецЕсли;
	Если КонтрольТоваровКонтрагента=Неопределено Тогда КонтрольТоваровКонтрагента=Ложь; КонецЕсли;
	Если КонтрольЗаказов=Неопределено Тогда КонтрольЗаказов=Ложь; КонецЕсли;
	Если КонтрольЗакупочныхЦен=Неопределено Тогда КонтрольЗакупочныхЦен=Ложь; КонецЕсли;
	
	Авто_КоличествоДнейВперед = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "Авто_КоличествоДнейВперед");
	Авто_КоличествоДнейНазад = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "Авто_КоличествоДнейНазад");
	Авто_СписокПоставщиков = ХранилищеНастроекДанныхФорм.Загрузить("ТСДЗагрузкаВыгрузка", "Авто_СписокПоставщиков");
	
	ВыгрузкаКоличества = Макс(ВыгрузкаКоличества,1);
	
	Если ЗначениеЗаполнено(Параметры.КлючНазначенияИспользования) Тогда
		Если Параметры.КлючНазначенияИспользования = "Выгрузить" Тогда
			Для Каждого текДокВыгрузки Из Параметры.СписокДокументов Цикл
				НоваяСтрока = ТаблицаДляВыгрузки.Добавить();
				НоваяСтрока.Выгружать = Истина;
				НоваяСтрока.Документы = текДокВыгрузки.Значение;
				НоваяСтрока.КакВыгружать = Параметры.КакВыгружать;
			КонецЦикла;
			ВидВыгрузки = 4;
		ИначеЕсли Параметры.КлючНазначенияИспользования = "Загрузить" Тогда
			ДействиеНадДокументом = 0;// открывать документ
		КонецЕсли;
	Иначе
		Для каждого Документ из Метаданные.Документы Цикл
			Попытка
				Состав = Документ.ТабличныеЧасти.Состав;
				ЕстьНоменклатура = Документ.ТабличныеЧасти.Состав.Реквизиты.Номенклатура;
				ЕстьКоличество = Документ.ТабличныеЧасти.Состав.Реквизиты.Количество;
			Исключение
				Продолжить;	
			КонецПопытки;
			Строка = Объект.ТаблицаДокументов.Добавить();
			Строка.Значение = Документ.Имя;
			Строка.Представление = Документ.Синоним;
			ЭлементСписка = СписокТиповДокументов.НайтиПоЗначению(Документ.Имя);
			Если ЭлементСписка <>Неопределено Тогда
				Строка.Флаг = Истина;
				Строка.КакВыгружать = ЭлементСписка.Представление;
			Иначе
				Попытка
					Состав = Документ.ТабличныеЧасти.Состав.Реквизиты.Цена;
					Строка.КакВыгружать = "Как приходную накладную";
				Исключение
					Строка.КакВыгружать = "Как ведомость";
				КонецПопытки;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.КлючНазначенияИспользования = "Выгрузить" Тогда
		//Отказ = Истина;
		ВыгрузкаДанных(Неопределено);
	ИначеЕсли Параметры.КлючНазначенияИспользования = "Загрузить" Тогда
		Отказ = Истина;
		ЗагрузкаДанных(Неопределено);
		Если Объект.ТаблицаЗагрузки.Количество() = 0 Тогда
			Сообщить("Не найдено ни одного документа для загрузки.");	
			Возврат;
		ИначеЕсли Объект.ТаблицаЗагрузки.Количество() > 1 Тогда
			Отказ = Ложь;
			Возврат;
		КонецЕсли;
		СоздатьДокументы(Неопределено);
	КонецЕсли;
	//ГруппаНовойНоменклатуры = ВосстановитьЗначение("ТСДЗагрузкаВыгрузка_ГруппаНовойНоменклатуры");
	//Элементы.ПанельЗагрузки.ТекущаяСтраница = 	Элементы.ПанельЗагрузки.Страницы.Получить(?(ВидКомпоненты=1,0,1));
	//Элементы.СписокТиповДокументов.СписокВыбора = СписокТиповДокументов;
	ВидВыгрузкиПриИзменении("");
	СтраницыПриСменеСтраницы(Неопределено, Элементы.Страницы.ПодчиненныеЭлементы.ВыгрузкаДанных);
КонецПроцедуры

&НаСервере
Функция НайтиДокументПоНомеру(Тип, НомерДокумента, ДатаДокумента)

	Если ДатаДокумента = Неопределено Тогда	//поищем в этом году
		ДокументСсылка = Документы[Тип].НайтиПоНомеру(НомерДокумента, ТекущаяДата());
		Если ДокументСсылка.Пустая() Тогда	// и прошлом году
			ДокументСсылка = Документы[Тип].НайтиПоНомеру(НомерДокумента, НачалоГода(ТекущаяДата()) - 1);
		КонецЕсли;
	Иначе
		ДокументСсылка = Документы[Тип].НайтиПоНомеру(НомерДокумента, ДатаДокумента);
	КонецЕсли;

	Возврат ДокументСсылка;
	
КонецФункции // НайтиДокументПоНомеру()

&НаСервере
Функция НайтиНоменклатуруПоКоду(Код)

	Возврат Справочники.Номенклатура.НайтиПоКоду(Код);

КонецФункции // НайтиНоменклатуруПоКоду()

&НаСервере
Функция НайтиКонтрагентаПоКоду(Код)

	Возврат Справочники.Контрагенты.НайтиПоКоду(Код);

КонецФункции // НайтиНоменклатуруПоКоду()

&НаКлиенте
Процедура ПолучитьСхемуБазы()
	
	// схема базы
	db_shema = "
	|create table units (
	|	id nvarchar(20) primary key, 
	|	name nvarchar(100) null,
	|	dcd int null
	|);
	
	|create table dim_kinds (
	|	id nvarchar(20) primary key, 
	|	name nvarchar(100) null,  
	|	dcd int null
	|);
	
	|create table dimensions (
	|	id nvarchar(20) primary key, 
	|	name nvarchar(100) null,  
	|	dim_kind_id nvarchar(20) constraint fk_dimensions_dim_kinds references dim_kinds(id), 
	|	dcd int null
	|);
	
	|create table items (
	|	id nvarchar(20) primary key, 
	|	name nvarchar(100) null,
	|	type int, 
	|	dim_kind_id nvarchar(20) 
	|	   constraint fk_items_dim_kinds references dim_kinds(id), 
	|	unit_id nvarchar(20) 
	|	   constraint fk_items_units references units(id) not null, 
	|	description nvarchar(128),
	|	dcd int null,
	|	is_matrix int default 0
	|);
	
	|create table barcodes (
	|	id nvarchar(30) primary key, 
	|	factor real,
	|	acc_price real,
	|	price real,
	|	item_id nvarchar(20) 
	|		constraint fk_barcodes_items references items(id),
	|	unit_id nvarchar(20) 
	|	   constraint fk_barcodes_units references units(id), 
	|	dim_id nvarchar(20) null
	|	   constraint fk_barcodes_dimensions references dimensions(id), 
	|	dcd int null
	|);
	
	|create table suppliers (
	|	id nvarchar(20) primary key,
	|	name nvarchar(100) null
	|);
	
	|create table contracts (
	|	id nvarchar(20) primary key,
	|	supp_id nvarchar(20)
	|		constraint fk_contract_supplier references suppliers(id),
	|	name nvarchar(100) null
	|);
	
	|create table ords (
	|	id nvarchar(20) primary key,
	|	cont_id nvarchar(20)
	|		constraint fk_ord_contract references contracts(id),
	|	name nvarchar(100) null, 
	|	barcode nvarchar(30) null default null
	|);
	
	|create table headers (
	|	id nvarchar(20) primary key, 
	|	name nvarchar(100) null,
	|	type int, 
	|	overqty int,
	|	description nvarchar(128),
	|	dcd int null,
	|	info nvarchar(30),	
	|	supp_id nvarchar(20)  null default null
	|		constraint fk_supp_headers references suppliers(id),
	|	cont_id nvarchar(20) null default null
	|		constraint fk_cont_headers references contracts(id),
	|	ord_id nvarchar(20) null default null
	|		constraint fk_ord_headers references ords(id)
	|);
	
	|create table stocks (
	|	doc_id nvarchar(20) 
	|		constraint fk_stocks_headers references headers(id),
	|	item_id nvarchar(30)
	|		constraint fk_stocks_items references items(id),
	|	dim_id nvarchar(20) 
	|	   constraint fk_ord_items_dimensions references dimensions(id), 
	|	quantity real,
	|	comment nvarchar(128),
	|	dcd int null,
	|	primary key (doc_id, item_id, dim_id)
	|);
	
	|create table waybills (
	|	doc_id nvarchar(20)
	|		constraint fk_waybills_headers references headers(id),
	|	item_id nvarchar(30)
	|		constraint fk_waybills_items references items(id),
	|	dim_id nvarchar(20) 
	|	   constraint fk_ord_items_dimensions references dimensions(id), 
	|	quantity real,
	|	price real,
	|	amount real,
	|	pos int,
	|	loadqty real,
	|	comment nvarchar(128),
	|	dcd int null,
	|	primary key (doc_id, item_id, dim_id)
	|);
	
	|create table ord_items (
	|	item_id nvarchar(30)
	|		constraint fk_ord_items references items(id),
	|	dim_id nvarchar(20) 
	|	   constraint fk_ord_items_dimensions references dimensions(id), 
	|	ord_id nvarchar(20)
	|		constraint fk_ord_items_ord references ords(id),
	|	max_qty real default null,
	|	price real,
	|	primary key (item_id, dim_id, ord_id)
	|);
	
	|create table cont_items (
	|	barcode_id nvarchar(30)
	|		constraint fk_cont_items references barcodes(id),
	|	cont_id nvarchar(20)
	|		constraint fk_cont_items_cont references contracts(id),
	|	min_price real default 0,
	|	max_price real default 0,
	|	primary key (barcode_id, cont_id)
	|);
	
	|create table version (
	|	no int
	|);
	
	|insert into version values (9)
	|";
	
	// индексы в базе
	db_idx=
	"create index ix_bc_item_id  on  barcodes (item_id);
	|create index ix_bc_unit_id  on  barcodes (unit_id);	
	|create index ix_bc_dim_id  on  barcodes (dim_id);	
	|create index ix_items_dim_id  on  items (dim_kind_id);	
	|create index ix_items_unit_id  on  items (unit_id);	
	|create index ix_items_name  on  items (name);	
	|create index ix_items_desc  on  items (description);";	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаДанных(Команда)
	ОчиститьСообщения();
	ВремяНачало=ТекущаяДата();
	
	//Получаем номенклатуру для выгрузки
	ТекстФильтрНоменклатуры = Неопределено;
	СтрукПараметрыЗапроса = Неопределено;
	ТекДата = ВремяНачало;
	Если Не ЗаполнитьТаблицуВыгрузкиНоменклатуры(ТекстФильтрНоменклатуры, СтрукПараметрыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	//ТаблицаШтрихКодовВыгрузка = ПолучитьТаблицуШтрихкодов(МассивНоменклатуры, ФильтрНоменклатуры, ТекДата);
	//ЗаполнитьТаблицуВыгрузкиШК(ТекстФильтрНоменклатуры, СтрукПараметрыЗапроса);
	
	//ЗаполнитьТаблицуШапокДокументовВыгрузка();
	
	ПолучитьСхемуБазы();
	
	// создаем пустую базу 	
	Попытка 
		db = Новый COMОбъект("LiteX.LiteConnection");
	Исключение
		Сообщить("Ошибка загрузки компоненты для работы с базой данных ТСД!",СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;	
	ИмяФайлаВыгрузки = "dcd2.db3";
	// удаляем базу, если она там есть
	УдалитьФайлы(СокрЛП(Каталог),ИмяФайлаВыгрузки);
	Попытка 
		db.Open(СокрЛП(Каталог)+ИмяФайлаВыгрузки);          
	Исключение
		Сообщить("Не обнаружен ключ защиты!",СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
	// создаем таблички
	Состояние("Создаем структуру БД...");
	db.BatchExecute(db_shema);
	db.execute("begin transaction");
	
	Состояние("Выгрузка номенклатуры...");
	query = db.Prepare("insert into items 
	|(id, name, type, dim_kind_id, unit_id, description, dcd, is_matrix) 
	| values (:id,:name,:type,:dim_kind_id,:unit_id,:description,:dcd, :is_matrix)");
	Для Каждого Строка Из ТаблицаНоменклатурыВыгрузка Цикл
		query.BindParameter(":id",СокрЛП(Строка.Код));	
		query.BindParameter(":name",Строка.Наименование);
		query.BindParameter(":type",Строка.ТипТовара);
		query.BindParameter(":dim_kind_id","");
		query.BindParameter(":unit_id",СокрЛП(Строка.КодБазовойЕдиницы));
		query.BindParameter(":description","");//Лев(СокрЛП(Строка.Наименование),128));
		query.BindParameter(":dcd",0);
		query.BindParameter(":is_matrix",Строка.ЕстьВМатрице);
		Попытка
			query.Execute(); 
		Исключение
			Сообщить("Не выгружена номенклатура " + Строка.Код);
		КонецПопытки;
	КонецЦикла;	
	
	ЗаполнитьТаблицуЕдиниц();
	Состояние("Выгрузка единиц...");
	query = db.Prepare("insert into units (id,name) values (:id,:name)");
	Для Каждого Строка Из ТаблицаЕдиницВыгрузка Цикл
		query.BindParameter(":id",Строка.Код);
		query.BindParameter(":name",Строка.Наименование);
		query.Execute(); 
	КонецЦикла;	
	
	ЗаполнитьТаблицуВыгрузкиШК(ТекстФильтрНоменклатуры, СтрукПараметрыЗапроса);
	Состояние("Выгрузка штрих - кодов...");
	query = db.Prepare("insert into barcodes (id,factor,acc_price, price,item_id,unit_id,dim_id,dcd) values (:id,:factor,:acc_price,:price,:item_id,:unit_id,:dim_id,:dcd)");
	Для Каждого Строка Из ТаблицаШтрихКодовВыгрузка Цикл
	//Для Каждого Строка Из ТаблицаНоменклатурыВыгрузка Цикл
		query.BindParameter(":id",СокрЛП(Строка.Код));
		query.BindParameter(":acc_price",Строка.ЦенаЗакупки);
		query.BindParameter(":price",Строка.ЦенаПродажи);
		query.BindParameter(":factor",1);//Строка.Коэффициент);
		query.BindParameter(":item_id",СокрЛП(Строка.КодНоменклатуры));//КодНоменклатуры);
		query.BindParameter(":unit_id",СокрЛП(Строка.КодБазовойЕдиницы));//Строка.КодЕдиницы);
		query.BindParameter(":dim_id", "");//?(Строка.Характеристика=Неопределено,"",Строка(Строка.Характеристика.УникальныйИдентификатор())));
		query.BindParameter(":dcd",0);
		query.Execute(); 
	КонецЦикла;	
	
	Если ВидВыгрузки = 3 Тогда // выгружаем по поставщикам договорам
		
		Состояние("Выгрузка поставщиков...");
		query = db.Prepare("insert into suppliers 
		|(id, name) 
		| values (:id,:name)");
		Для Каждого Строка из ТабДляВыгрузкиПоставщики Цикл
			query.BindParameter(":id",Строка.Код);	
			query.BindParameter(":name",Строка.Наименование);
			Попытка
				query.Execute(); 
			Исключение
				Сообщить(" Не выгружен поставщик "+Строка.Наименование);
			КонецПопытки;
		КонецЦикла;
		//Состояние("Выгрузка договоров...");
		//query = db.Prepare("insert into contracts 
		//|(id, supp_id, name) 
		//| values (:id,:supp_id,:name)");
		//Для Каждого Строка из ТаблицаДоговоров Цикл
		//	КодДоговора = Строка.Договор.Код;
		//	
		//	query.BindParameter(":id",Строка(Строка.Договор.Ссылка.УникальныйИдентификатор()));	
		//	query.BindParameter(":supp_id",Строка.Договор.Владелец.Код);
		//	query.BindParameter(":name",Строка.Договор.Наименование);
		//	Попытка
		//		query.Execute(); 
		//	Исключение
		//		Сообщить(" Не выгружен договор "+Строка.Договор.Наименование);
		//	КонецПопытки;
		//КонецЦикла;
		//Состояние("Выгрузка товаров договора...");
		//query = db.Prepare("insert into cont_items 
		//|(barcode_id, cont_id, min_price, max_price) 
		//| values (:barcode_id,:cont_id,:min_price,:max_price)");
		//
		//Для Каждого Строка из ТаблицаДляВыгрузки Цикл
		//	Если НЕ Строка.Выгружать Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	//Если нет контроля номенклатуры по договору, тогда не выгружаем товары
		//	Если НЕ (Строка.Договор.КонтрольНоменклатуры 
		//		И КонтрольТоваровКонтрагента
		//		И (ТекущаяДата()>=Строка.Договор.ДатаНачалаКонтрольНоменклатуры)) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	// выбрать товары договора и цены
		//	табТоварыДоговора = ПолучитьТоварыДоговора(Строка.Договор);
		//	Для Каждого стр Из ТабТоварыДоговора Цикл
		//		query.BindParameter(":cont_id",Строка(Строка.Договор.Ссылка.УникальныйИдентификатор()));	
		//		промШК = стр.Номенклатура.Код;
		//		query.BindParameter(":barcode_id",промШК);
		//		Если КонтрольЗакупочныхЦен И Строка.Договор.КонтрольЦен И (ТекущаяДата()>=Строка.Договор.ДатаНачалаКонтрольЦен) Тогда
		//			минЦена  = Стр.Цена/100*(100-стр.ОтклонениеМинус);
		//			максЦена = Стр.Цена/100*(100+стр.ОтклонениеПлюс);
		//		Иначе
		//			минЦена = 0;
		//			максЦена = 0;
		//		КонецЕсли;
		//		query.BindParameter(":min_price",минЦена);
		//		query.BindParameter(":max_price",максЦена);
		//		Попытка
		//			query.Execute() ; 
		//		Исключение
		//			Сообщить(" Не выгружен договор "+Строка.Договор.Наименование);
		//		КонецПопытки;
		//	КонецЦикла;
		//КонецЦикла;
	ИначеЕсли ВидВыгрузки = 4 Или ВидВыгрузки = 5 Тогда
		
		ЗаполнитьТаблицуШапокДокументовВыгрузка();
		Если ВидВыгрузки = 5 Тогда	//заказы
			ЗаполнитьТабДляВыгрузкиПоставщики();
			
			// Выгружаем поставщиков
			Состояние("Выгрузка поставщиков...");
			query = db.Prepare("insert into suppliers 
			|(id, name) 
			| values (:id,:name)");
			Для Каждого Строка из ТабДляВыгрузкиПоставщики Цикл
				query.BindParameter(":id",Строка.Код);	
				query.BindParameter(":name",Строка.Наименование);
				Попытка
					query.Execute(); 
				Исключение
					Сообщить(" Не выгружен поставщик "+Строка.Наименование);
				КонецПопытки;
			КонецЦикла;
			
			// Выгружаем "договоры"
			Состояние("Выгрузка договоров...");
			query = db.Prepare("insert into contracts 
			|(id, supp_id, name) 
			| values (:id,:supp_id,:name)");
			//Для Каждого Строка из ТабДляВыгрузкиДоговоры Цикл
			Для Каждого Строка из ТабДляВыгрузкиПоставщики Цикл
				//query.BindParameter(":id",Строка.Код);	
				//query.BindParameter(":supp_id",Строка.Владелец);
				//query.BindParameter(":name",Строка.Наименование);
				query.BindParameter(":id",Строка(Строка.Контрагент.УникальныйИдентификатор()));	
				query.BindParameter(":supp_id",Строка.Код);
				query.BindParameter(":name","Договор " + Строка.Наименование);
				Попытка
					query.Execute(); 
				Исключение
					Сообщить(" Не выгружен договор "+Строка.Наименование);
				КонецПопытки;
			КонецЦикла;
			
			// выгружаем заказы
			Состояние("Выгрузка заказов...");
			query = db.Prepare("insert into ords 
			|(id, cont_id, name, barcode) 
			| values (:id,:cont_id,:name,:barcode)");
			Для Каждого Стр из ТаблицаШапокДокументовВыгрузка Цикл
				query.BindParameter(":id",Стр.Номер);	
				query.BindParameter(":cont_id",Строка(Стр.ПоставщикУИД));
				query.BindParameter(":name","Заказ " + Строка(Стр.Номер) + " от "+ Строка(Стр.Дата));
				query.BindParameter(":barcode",Строка(Стр.ДокументУИД));
				Попытка
					query.Execute(); 
				Исключение
					Сообщить(" Не выгружен заказ "+Строка.Документы.Договор.Наименование);
				КонецПопытки;
			КонецЦикла;
			
			// выгружаем товары заказов
			Состояние("Выгрузка товаров заказов...");
			query = db.Prepare("insert into ord_items 
			|(item_id, dim_id, ord_id, max_qty) 
			| values (:item_id,:dim_id,:ord_id,:max_qty)");
			Для Каждого Стр из ТаблицаНоменклатурыВыгрузка Цикл
				query.BindParameter(":item_id",Стр.Код);	
				//Если Стр.Документы.Договор.КонтрольПоЗаказу И КонтрольЗаказов И
				//	(ТекущаяДата()>=Стр.Документы.Договор.ДатаНачалаКонтрольПоЗаказу) Тогда
				Количество = Стр.Количество;
				//Иначе
				//	Количество = 0;
				//КонецЕсли;
				query.BindParameter(":dim_id","");
				query.BindParameter(":ord_id",Стр.НомерДокумента);
				query.BindParameter(":max_qty",Количество);
				Попытка
					query.Execute(); 
				Исключение
					Сообщить(" Не выгружен заказ "+Стр.НомерДокумента);
				КонецПопытки;
			КонецЦикла;
			
		ИначеЕсли ВидВыгрузки = 4 Тогда
			Состояние("Выгрузка документов...");
			query = db.Prepare("insert into headers (id,name,type,overqty,description,dcd,info,supp_id,cont_id,ord_id) values (:id,:name,:type,:overqty,:description,:dcd,:info,:supp_id,:cont_id,:ord_id)");
			Для Каждого Строка Из ТаблицаШапокДокументовВыгрузка Цикл
				query.BindParameter(":id",Строка.Номер);
				query.BindParameter(":name",Строка.Номер+" от "+Строка.Дата);
				query.BindParameter(":type",Строка.ТипДокумента);
				query.BindParameter(":overqty",?(ЗапретПревышениеКоличества=1,0,1));
				query.BindParameter(":description",Строка.ВидДокумента);
				query.BindParameter(":dcd",0);
				query.BindParameter(":info","");
				query.BindParameter(":supp_id",Строка.ПоставщикКод);	
				query.BindParameter(":cont_id",Строка(Строка.ПоставщикУИД));
				
				//Генерируем виртуальный заказ для контроля
				Если ЗапретПревышениеКоличества Тогда							
					query.BindParameter(":ord_id",Строка.Номер);
				Иначе
					query.BindParameter(":ord_id","");
				КонецЕсли;
				query.Execute(); 
			КонецЦикла;	
			
			query = db.Prepare("insert into waybills (doc_id,item_id,dim_id,quantity,price,amount,pos,loadqty,comment,dcd) values (:doc_id,:item_id,:dim_id,:quantity,:price,:amount,:pos,:loadqty,:comment,:dcd)");					
			Для Каждого Строка Из ТаблицаНоменклатурыВыгрузка Цикл
				Если Строка.КакВыгружать = "Как ведомость" Тогда
					Продолжить;
				КонецЕсли;	
				query.BindParameter(":doc_id",Строка.НомерДокумента);
				query.BindParameter(":item_id",СокрЛП(Строка.Код));
				query.BindParameter(":dim_id","");
				//Если ВыгрузкаКоличества = 1 Тогда
				//	query.BindParameter(":quantity",?(Строка.Количество=Null,0,Строка.Количество));
				//Иначе
				query.BindParameter(":quantity",0);
				//КонецЕсли;	
				query.BindParameter(":price",?(Строка.Цена=Null,0,Строка.Цена));
				//Если ВыгрузкаКоличества = 1 Тогда
				//	query.BindParameter(":amount",?(Строка.Сумма=NUll,0,Строка.Сумма));
				//Иначе
				query.BindParameter(":amount",0);
				//КонецЕсли;	
				query.BindParameter(":pos",Строка.ДокНомерСтроки);
				query.BindParameter(":loadqty",?(Строка.Количество=Null,0,Строка.Количество));
				query.BindParameter(":comment","");
				query.BindParameter(":dcd",0);
				query.Execute(); 
			КонецЦикла;	
			
			//Генерируем виртуальный заказ для контроля за количеством товара с несколькими ШК
			Если ЗапретПревышениеКоличества Тогда
				query = db.Prepare("insert into ords (id, cont_id, name, barcode) values (:id, :cont_id, :name, :barcode)");
				Для Каждого Строка Из ТаблицаШапокДокументовВыгрузка Цикл
					query.BindParameter(":id", Строка.Номер);
					query.BindParameter(":cont_id", "");
					query.BindParameter(":name", "авт.заказ");
					query.BindParameter(":barcode", "");
					query.Execute();
				КонецЦикла;
				
				query = db.Prepare("insert into ord_items 
				|(item_id, dim_id, ord_id, max_qty) 
				| values (:item_id,:dim_id,:ord_id,:max_qty)");
				Для Каждого СтрДок из ТаблицаНоменклатурыВыгрузка Цикл
					query.BindParameter(":item_id",СтрДок.Код);	
					query.BindParameter(":dim_id","");
					query.BindParameter(":ord_id",СтрДок.НомерДокумента);
					query.BindParameter(":max_qty",СтрДок.Количество);
					Попытка
						query.Execute(); 
					Исключение
						Сообщить(" Не выгружен автоматический заказ.");
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
			
			query = db.Prepare("insert into stocks (doc_id,item_id,dim_id,quantity,comment,dcd) values (:doc_id,:item_id,:dim_id,:quantity,:comment,:dcd)");
			Для Каждого Строка Из ТаблицаНоменклатурыВыгрузка Цикл
				Если Строка.КакВыгружать <> "Как ведомость" Тогда
					Продолжить;
				КонецЕсли;	
				query.BindParameter(":doc_id",Строка.НомерДокумента);
				query.BindParameter(":item_id",СокрЛП(Строка.Код));
				query.BindParameter(":dim_id","");
				//Если ВыгрузкаКоличества = 1 Тогда
				//	query.BindParameter(":quantity",?(Строка.Количество=Null,0,Строка.Количество));
				//Иначе
				query.BindParameter(":quantity",0);
				//КонецЕсли;	
				query.BindParameter(":comment","");
				query.BindParameter(":dcd",0);
				Попытка 
					query.Execute(); 
				Исключение
					Сообщить("Ошибка. Дубль штрих-кода: " + Строка.ШтрихКод);	
				КОнецПопытки;
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	db.BatchExecute(db_idx);
	db.execute("commit transaction");      
	query.close();
	db.close();
	ПутьКФайлуОбмена = СокрЛП(Каталог) + ?(Прав(СокрЛП(Каталог), 1) = "\", "", "\") + ИмяФайлаВыгрузки;
	Если Не ИспользоватьФайлыКаталогаОбмена Тогда
		СкопироватьФайлНаТСД(ПутьКФайлуОбмена);
	КонецЕсли;
	
	Сообщить("Выгружено номенклатуры - "+ТаблицаНоменклатурыВыгрузка.Количество());
	//Если ОмЗаполнениеДанными.ОтладкаРазрешена() Тогда
	//	Время = ТекущаяДата()-ВремяНачало;
	//	Параметры = "Выгружено номенклатуры - "+ТаблицаНоменклатурыВыгрузка.Количество();
	//	ОмПривилегированный.ЗаписьИнформацииОтладки("Выгрузка в ТСД",Параметры,Время);
	//КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузкаДанных(Команда)
	
	Объект.ТаблицаЗагрузки.Очистить();
	Объект.ТаблицаРеквизитов.Очистить();
	
	ИмяФайлаЗагрузки = "dcd2.in.db3";
	ПутьКФайлуОбмена = СокрЛП(Каталог) + ?(Прав(СокрЛП(Каталог), 1) = "\", "", "\") + ИмяФайлаЗагрузки;
	Если Не ИспользоватьФайлыКаталогаОбмена И Не СкопироватьФайлСТСД(ПутьКФайлуОбмена) Тогда
		Возврат;
	КонецЕсли;
	ФайлНаДиске = Новый Файл(СокрЛП(Каталог)+ИмяФайлаЗагрузки);
	
	Если НЕ ФайлНаДиске.Существует() Тогда
		Сообщить("В каталоге "+СокрЛП(Каталог)+" отсутствует файл "+ИмяФайлаЗагрузки,СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	Попытка
		db = Новый COMОбъект("LiteX.LiteConnection");
	Исключение
		Сообщить("Ошибка загрузки компоненты для работы с базой данных ТСД!",СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	Попытка 
		db.Open(СокрЛП(Каталог)+ИмяФайлаЗагрузки);          
	Исключение
		Сообщить("Не обнаружен ключ защиты!", СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
	//шапки документов
	query=db.Prepare("select id, name, type, description, dcd, info, supp_id, cont_id, ord_id from headers");
	Пока query.Step()=0 Цикл
		сТаблицаЗагрузки = Объект.ТаблицаЗагрузки.Добавить();	//на самом деле эта таблица шапок документов
		сТаблицаЗагрузки.Загружать = Истина;
		сТаблицаЗагрузки.НомерДокумента = query.ColumnValue("id");	//номер документа
		сТаблицаЗагрузки.Наименование = query.ColumnValue("name");	//текстовое представление "номер от дата"
		Инфо = query.ColumnValue("info");	//при выгрузке документа в это поле передавали год в формате ГГГГММДД
		Если ПустаяСтрока(Инфо) Тогда
			ДатаДокумента = ТекущаяДата();
		Иначе
			Попытка
				ДатаДокумента = Дата(Инфо);
			Исключение
				ДатаДокумента = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		чТипДокументаВТСД = query.ColumnValue("type");	//0 - инвертаризация, 1 - приходная, 2 - расходная
		Если чТипДокументаВТСД = 0 Тогда
			сТаблицаЗагрузки.Представление = "Инвентаризация";
			сТаблицаЗагрузки.ТипЗначения = 2;
		Иначе//Если чТипДокументаВТСД = 1 Или чТипДокументаВТСД = 2 Тогда
			сТаблицаЗагрузки.Представление = "Накладная";
			сТаблицаЗагрузки.ТипЗначения = 3;
		КонецЕсли;
		
		Если ПустаяСтрока(query.ColumnValue("description")) Тогда	//имя документа из метаданных, которое было передано из 1с
			// если пустая, то могли создать в ТСД только инвентаризацию, приходную или расходную
			ОписаниеТипаДокумента = ВернутьВидДокумента(query.ColumnValue("type"));
		Иначе
			ОписаниеТипаДокумента = СокрЛП(query.ColumnValue("description"));
			Если ОписаниеТипаДокумента = "ЗаказВнешний" Тогда
				ОписаниеТипаДокумента = "РасходнаяНакладная";
			КонецЕсли;
		КонецЕсли;
		
		ЭлементСписка = СписокТиповДокументов.НайтиПоЗначению(ОписаниеТипаДокумента);	//по "описанию" в списке ищем тип докомента доступного для загрузки
		Если ЭлементСписка <> Неопределено Тогда
			сТаблицаЗагрузки.Ссылка = НайтиДокументПоНомеру(ЭлементСписка.Значение, сТаблицаЗагрузки.НомерДокумента, ДатаДокумента);
			сТаблицаЗагрузки.ТипДокумента = ЭлементСписка.Значение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(query.ColumnValue("supp_id")) Тогда
			сТаблицаЗагрузки.Поставщик = НайтиКонтрагентаПоКоду(query.ColumnValue("supp_id"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(сТаблицаЗагрузки.Ссылка) Тогда
			Если чТипДокументаВТСД = 0 Тогда
				сТаблицаЗагрузки.Картинка = 3;
			Иначе
				сТаблицаЗагрузки.Картинка = 1;
			КонецЕсли;
			//Строка.Картинка = 3;// или 1 (ТД6)
		Иначе	
			Если чТипДокументаВТСД = 0 Тогда
				сТаблицаЗагрузки.Картинка = 2;
			Иначе
				сТаблицаЗагрузки.Картинка = 0;
			КонецЕсли;
			//Строка.Картинка = 2;// или 0 (ТД6)
			
			Если сТаблицаЗагрузки.ТипДокумента = "ПриходнаяНакладная" Тогда	//не нашли документ, который  м.б. был создан по ранее выгруженному заказу
				//Если ЗначениеЗаполнено(query.ColumnValue("supp_id")) Тогда
				//	сТаблицаЗагрузки.Поставщик = НайтиКонтрагентаПоКоду(query.ColumnValue("supp_id"));
				//КонецЕсли;
				//Если ЗначениеЗаполнено(query.ColumnValue("cont_id")) Тогда
				//	Попытка
				//		сТаблицаЗагрузки.Договор = Справочники.Договоры.ПолучитьСсылку(Новый УникальныйИдентификатор(query.ColumnValue("cont_id")));
				//	Исключение
				//	КонецПопытки;
				//КонецЕсли;
				Если ЗначениеЗаполнено(query.ColumnValue("ord_id")) Тогда
					сТаблицаЗагрузки.Заказ = НайтиДокументПоНомеру("ПланируемаяПоставка", query.ColumnValue("ord_id"), ДатаДокумента);
				КонецЕсли;
			ИначеЕсли сТаблицаЗагрузки.ТипДокумента = "РасходнаяНакладная" Тогда	//не нашли документ, который  м.б. был создан по ранее выгруженному ЗаказВнешний
				Если ЗначениеЗаполнено(query.ColumnValue("ord_id")) Тогда
					сТаблицаЗагрузки.Заказ = НайтиДокументПоНомеру("ЗаказВнешний", query.ColumnValue("ord_id"), ДатаДокумента);
					Если ЗначениеЗаполнено(сТаблицаЗагрузки.Заказ) Тогда
						сТаблицаЗагрузки.Поставщик = сТаблицаЗагрузки.Заказ.Контрагент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;//Пока query.Step() = 0 Цикл	из headers 
		
	//инвентаризации	
	query=db.Prepare("select doc_id, item_id, dim_id, quantity, comment, dcd from stocks");
	Пока query.Step()=0 Цикл
		сТаблицаРеквизитов = Объект.ТаблицаРеквизитов.Добавить();	//на самом деле эта таблица строк документов
		сТаблицаРеквизитов.ИндексСтроки = query.ColumnValue("doc_id");
		сТаблицаРеквизитов.КодНоменклатуры = query.ColumnValue("item_id");
		сТаблицаРеквизитов.Характеристика = "";//?(ПустаяСтрока(query.ColumnValue("dim_id")), ХарактеристикаПустаяСсылка, спрХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(query.ColumnValue("dim_id"))));
		сТаблицаРеквизитов.Количество = query.ColumnValue("quantity");
		сТаблицаРеквизитов.Комментарий = query.ColumnValue("comment");
	КонецЦикла;
	
	//накладные
	query=db.Prepare("select doc_id, item_id, dim_id, quantity, price, amount, comment, dcd from waybills");
	Пока query.Step()=0 Цикл
		сТаблицаРеквизитов = Объект.ТаблицаРеквизитов.Добавить();	//на самом деле эта таблица строк документов
		сТаблицаРеквизитов.ИндексСтроки = query.ColumnValue("doc_id");
		сТаблицаРеквизитов.КодНоменклатуры = query.ColumnValue("item_id");
		сТаблицаРеквизитов.Характеристика = "";//?(ПустаяСтрока(query.ColumnValue("dim_id")), ХарактеристикаПустаяСсылка, спрХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(query.ColumnValue("dim_id"))));
		сТаблицаРеквизитов.Количество = query.ColumnValue("quantity");
		сТаблицаРеквизитов.Комментарий = query.ColumnValue("comment");
		
		сТаблицаРеквизитов.Цена = query.ColumnValue("price");
		сТаблицаРеквизитов.Сумма = query.ColumnValue("amount");
	КонецЦикла;
	
	query.Close();
	db.close();
	
	ОбработатьТаблицуРеквизитов();
	
	//ТаблицаЗагрузкиПриАктивизацииСтроки(Элементы.ТаблицаЗагрузки);
		
	Элементы.СоздатьДокументы.Доступность = Истина;
	//Элементы.кнСоздать.Картинка = БиблиотекаКартинок.ФонКнопкиДиалогаПоУмолчанию;
	Элементы.СоздатьДокументы.КнопкаПоУмолчанию = Истина;
	//Элементы.Закрыть.Картинка = БиблиотекаКартинок.ФонКнопкиДиалога;
	Элементы.Закрыть.КнопкаПоУмолчанию = Ложь;
КонецПроцедуры

&НаСервере
//подставляем номенклатуру по коду и ее базовую единицу
Процедура ОбработатьТаблицуРеквизитов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	тСостав.НомерСтроки,
	               |	тСостав.ИндексСтроки,
	               |	тСостав.КодНоменклатуры,
	               |	тСостав.Характеристика,
	               |	тСостав.Количество,
	               |	тСостав.Комментарий,
	               |	тСостав.Цена,
	               |	тСостав.Сумма
	               |ПОМЕСТИТЬ тСостав
	               |ИЗ
	               |	&тСостав КАК тСостав
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тСостав.НомерСтроки КАК НомерСтроки,
	               |	тСостав.ИндексСтроки КАК ИндексСтроки,
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	тСостав.Характеристика КАК Характеристика,
	               |	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
	               |	1 КАК Коэффициент,
	               |	тСостав.Количество КАК Количество,
	               |	тСостав.Цена КАК Цена,
	               |	тСостав.Сумма КАК Сумма,
	               |	тСостав.Комментарий,
	               |	тСостав.КодНоменклатуры
	               |ИЗ
	               |	тСостав КАК тСостав
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |			ПО Номенклатура.Ссылка = ЕдиницыИзмерения.Владелец
	               |				И Номенклатура.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	               |		ПО тСостав.КодНоменклатуры = Номенклатура.Код
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИндексСтроки,
	               |	НомерСтроки";
	Запрос.УстановитьПараметр("тСостав", Объект.ТаблицаРеквизитов.Выгрузить());
	Объект.ТаблицаРеквизитов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	ОтборПоИндексу = Новый Структура;
	
	Для Каждого сЗагрузки Из Объект.ТаблицаЗагрузки Цикл
		Если Не сЗагрузки.Загружать Тогда
			Продолжить;
		КонецЕсли;
		ВидДокумента = сЗагрузки.ТипДокумента;
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
			Сообщить("В строке № " + сЗагрузки.НомерСтроки + " не указан вид создаваемого документа.",СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;	
		Если ЗначениеЗаполнено(сЗагрузки.Ссылка) Тогда
			КлючФормыДокумента = сЗагрузки.Ссылка;
		Иначе
			КлючФормыДокумента = Неопределено;
		КонецЕсли;
		
		ОтборПоИндексу.Вставить("ИндексСтроки",сЗагрузки.НомерДокумента);
		МассивСтрок = Объект.ТаблицаРеквизитов.НайтиСтроки(ОтборПоИндексу);
		мСтроки = Новый Массив;
		Для каждого Эл Из МассивСтрок Цикл
			Если Не ЗначениеЗаполнено(Эл.Номенклатура) Тогда
				Сообщить("Не найдена номенклатура: " + Эл.Номенклатура + ", с кодом: " + Эл.КодНоменклатуры);
				Продолжить;
			КонецЕсли;	
			мСтроки.Добавить(Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, Коэффициент, Цена, Сумма, ШтрихКод", 
			Эл.Номенклатура, Эл.ЕдиницаИзмерения, Эл.Количество, Эл.Коэффициент, Эл.Цена, Эл.Сумма, Эл.ШтрихКод));
		КонецЦикла;
		СтруктураОснование = Новый Структура();
		СтруктураОснование.Вставить("Источник", "ДанныеТСД");
		СтруктураОснование.Вставить("Номер", сЗагрузки.НомерДокумента);
		СтруктураОснование.Вставить("Контрагент", сЗагрузки.Поставщик);
		СтруктураОснование.Вставить("ДокОснование", сЗагрузки.Заказ);
		СтруктураОснование.Вставить("Состав", мСтроки);
		
		СтруктураПараметров = Новый Структура("Ключ, Основание", КлючФормыДокумента, СтруктураОснование);
		//Если ДействиеНадДокументом = 0 Тогда	//открыть форму
		//	рез = ОткрытьФормуМодально("Документ."+ВидДокумента+".ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
		//Иначе//Если ДействиеНадДокументом = 1 Тогда	//записать
			ДокументСсылка = ЗаписатьДокументНаСервере(ВидДокумента, СтруктураПараметров);
		//КонецЕсли;	
		//Если НЕ Документ.Ссылка.Пустая() Тогда
		//	сЗагрузки.Ссылка = Документ.Ссылка;
		//КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДокументНаСервере(ВидДокумента, СтруктураПараметров)
	
	Если СтруктураПараметров.Ключ = Неопределено Тогда	//ссылка на существующий документ
		оДокумент = Документы[ВидДокумента].СоздатьДокумент();
		оДокумент.Дата = ТекущаяДата();
	Иначе
		оДокумент = СтруктураПараметров.Ключ.ПолучитьОбъект();
	КонецЕсли;
	оДокумент.Заполнить(СтруктураПараметров.Основание);
	оДокумент.Записать();
	Сообщить("Записан документ " + оДокумент);
	Возврат оДокумент.Ссылка;
	
КонецФункции

&НаКлиенте
Функция СкопироватьФайлНаТСД(ПутьКФайлу)
	
	Попытка
		sync = Новый COMОбъект("LiteX.CESync");
	Исключение
		Сообщить("Ошибка загрузки компоненты для работы с базой данных ТСД!",СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		sync.CopyPCtoCE(СтрЗаменить(ПутьКФайлу, "\", "\\"));
	Исключение
		_ОписаниеОшибки = ОписаниеОшибки();
		Сообщить("Ошибка копирования файла на ТСД! " + _ОписаниеОшибки, СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецПопытки;
	
	Если УдалятьФайлВыгрузки Тогда
		УдалитьФайлы(ПутьКФайлу);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СкопироватьФайлСТСД(ПутьКФайлу)
	
	Попытка
		sync = Новый COMОбъект("LiteX.CESync");
	Исключение
		_ОписаниеОшибки = ОписаниеОшибки();
		Сообщить("Ошибка загрузки компоненты для работы с базой данных ТСД!",СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		sync.CopyCEtoPC(СтрЗаменить(ПутьКФайлу, "\", "\\"));
	Исключение
		_ОписаниеОшибки = ОписаниеОшибки();
		Сообщить("Ошибка копирования файла с ТСД! " + _ОписаниеОшибки, СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьАвтоматически(Команда)
	Если КонтрольАссортиментнойМатрицы Тогда
		Если КонтрольТоваровКонтрагента Тогда					
			Если КонтрольЗаказов Тогда
				ВидВыгрузки = 5;
			Иначе							
				ВидВыгрузки = 3;
			КонецЕсли;
			ВидВыгрузкиПриИзменении(Неопределено);
			ЗаполнитьТаблицуВыгрузки(Неопределено);
		Иначе
			ВидВыгрузки=0; //Товары из АМ
			ВидВыгрузкиПриИзменении(Неопределено);
		КонецЕсли; 
	Иначе
		ВидВыгрузки=0; //Все товары				
		ВидВыгрузкиПриИзменении(Неопределено);
	КонецЕсли;
	
	ВыгрузкаДанных(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "ВыгрузкаДанных" Тогда
		Элементы.Выгрузить.Видимость = Истина;
		Элементы.ВыгрузитьАвтоматически.Видимость = Истина;
		Элементы.Загрузить.Видимость = Ложь;
		Элементы.СоздатьДокументы.Видимость = Ложь;
	ИначеЕсли ТекущаяСтраница.Имя = "ЗагрузкаДанных" Тогда
		Элементы.Выгрузить.Видимость = Ложь;
		Элементы.ВыгрузитьАвтоматически.Видимость = Ложь;
		Элементы.Загрузить.Видимость = Истина;
		Элементы.СоздатьДокументы.Видимость = Истина;
	Иначе//Если ТекущаяСтраница.Имя = "Настройки" Тогда
		Элементы.Выгрузить.Видимость = Ложь;
		Элементы.ВыгрузитьАвтоматически.Видимость = Ложь;
		Элементы.Загрузить.Видимость = Ложь;
		Элементы.СоздатьДокументы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//Вкладка НАСТРОЙКИ
&НаКлиенте
Процедура КаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		УстановитьРасширениеРаботыСФайлами();
	КонецЕсли;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		Файл = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Файл.Заголовок = "Выберите каталог";
		Файл.Каталог = Элемент.ТекстРедактирования;
		Файл.МножественныйВыбор = Ложь;
		Файл.ПредварительныйПросмотр = Ложь;
		Файл.ПроверятьСуществованиеФайла = Истина;
		Если Не Файл.Выбрать() Тогда
			Возврат;
		КонецЕсли;
		Каталог = Файл.Каталог;
		Каталог = ?(Сред(Каталог,СтрДлина(СокрЛП(Каталог)))="\",Каталог,Каталог+"\");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ЗаполнитьСписокТиповДокументов();
	СохранитьНастройкиФормы();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "Каталог", Каталог);
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "ИспользоватьФайлыКаталогаОбмена", ИспользоватьФайлыКаталогаОбмена);
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "ДействиеНадДокументом", ДействиеНадДокументом);
	//ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "ВидКомпоненты", ВидКомпоненты);
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "СписокТиповДокументов", СписокТиповДокументов);
	
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "КонтрольАссортиментнойМатрицы", КонтрольАссортиментнойМатрицы);
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "КонтрольТоваровКонтрагента", КонтрольТоваровКонтрагента);
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "КонтрольЗаказов", КонтрольЗаказов);
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "КонтрольЗакупочныхЦен", КонтрольЗакупочныхЦен);
	
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "Авто_КоличествоДнейВперед", Авто_КоличествоДнейВперед);
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "Авто_КоличествоДнейНазад", Авто_КоличествоДнейНазад);
	ХранилищеНастроекДанныхФорм.Сохранить("ТСДЗагрузкаВыгрузка", "Авто_СписокПоставщиков", Авто_СписокПоставщиков);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляВыгрузкиДокументыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВидВыгрузки = 5 Тогда
		ТипСтр = "ДокументСсылка.ПланируемаяПоставка";
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(ТипСтр);
		Элемент.ВыбиратьТип = Ложь;
	Иначе 
		Элемент.ВыбиратьТип = Истина;
		Массив = Новый Массив;
		Для Каждого СтрокаСписка Из СписокТиповДокументов Цикл
			Массив.Добавить(Тип("ДокументСсылка."+СтрокаСписка.Значение));
		КонецЦикла;	
		Если Массив.Количество() > 0 Тогда
			Элемент.ОграничениеТипа = Новый ОписаниеТипов(Массив);
			Если Массив.Количество() = 1 Тогда
				Элемент.ВыбиратьТип = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКонтроля(Команда)
	ФормаКонтроля = ПолучитьФорму("Обработка.ТСДЗагрузкаВыгрузка.Форма.НастройкаКонтроля");
	ФормаКонтроля.КонтрольАссортиментнойМатрицы = КонтрольАссортиментнойМатрицы;
	ФормаКонтроля.КонтрольТоваровКонтрагента = КонтрольТоваровКонтрагента;
	ФормаКонтроля.КонтрольЗаказов = КонтрольЗаказов;
	ФормаКонтроля.КонтрольЗакупочныхЦен = КонтрольЗакупочныхЦен;
	Если ФормаКонтроля.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		КонтрольАссортиментнойМатрицы = ФормаКонтроля.КонтрольАссортиментнойМатрицы;
		КонтрольТоваровКонтрагента = ФормаКонтроля.КонтрольТоваровКонтрагента;
		КонтрольЗаказов = ФормаКонтроля.КонтрольЗаказов;
		КонтрольЗакупочныхЦен = ФормаКонтроля.КонтрольЗакупочныхЦен;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтоматическойВыгрузкиЗаказов(Команда)
	ФормаНастройкаАвтоматическойВыгрузкиЗаказов = ПолучитьФорму("Обработка.ТСДЗагрузкаВыгрузка.Форма.НастройкаАвтоматическойВыгрузкиЗаказов");
	ФормаНастройкаАвтоматическойВыгрузкиЗаказов.КоличествоДнейВперед = Авто_КоличествоДнейВперед;
	ФормаНастройкаАвтоматическойВыгрузкиЗаказов.КоличествоДнейНазад = Авто_КоличествоДнейНазад;
	ФормаНастройкаАвтоматическойВыгрузкиЗаказов.СписокПоставщиков = Авто_СписокПоставщиков;
	Если ФормаНастройкаАвтоматическойВыгрузкиЗаказов.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		Авто_КоличествоДнейВперед = ФормаНастройкаАвтоматическойВыгрузкиЗаказов.КоличествоДнейВперед;
		Авто_КоличествоДнейНазад = ФормаНастройкаАвтоматическойВыгрузкиЗаказов.КоличествоДнейНазад;
		Авто_СписокПоставщиков = ФормаНастройкаАвтоматическойВыгрузкиЗаказов.СписокПоставщиков;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокТиповДокументов()

	СписокТиповДокументов.Очистить();
	мСтрок = Объект.ТаблицаДокументов.НайтиСтроки(Новый Структура("Флаг", Истина));
	Для Каждого Строка Из мСтрок Цикл
		СписокТиповДокументов.Добавить(Строка.Значение, Строка.КакВыгружать);				
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСписокТиповДокументов()

&НаКлиенте
Процедура ТаблицаДокументовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаполнитьСписокТиповДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагрузкиПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЗначениеОтбора = "";
		ТипЗначения = 1;
	Иначе
		ЗначениеОтбора = Элемент.ТекущиеДанные.НомерДокумента;
		ТипЗначения = Элемент.ТекущиеДанные.ТипЗначения;
	КонецЕсли;
	Элементы.ТаблицаРеквизитов.ОтборСтрок = Новый ФиксированнаяСтруктура("ИндексСтроки", ЗначениеОтбора);
	Если ТипЗначения = 2 Тогда
		Элементы.ТаблицаРеквизитовЦена.Видимость = Ложь;
		Элементы.ТаблицаРеквизитовСумма.Видимость = Ложь;
	ИначеЕсли ТипЗначения = 3 Тогда
		Элементы.ТаблицаРеквизитовЦена.Видимость = Истина;
		Элементы.ТаблицаРеквизитовСумма.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагрузкиПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаЗагрузкиТипДокумента" Тогда
		Отказ = Истина;
		
		сзТиповДокументов = Новый СписокЗначений;
		сзТиповДокументов.ЗагрузитьЗначения(СписокТиповДокументов.ВыгрузитьЗначения()); // для очистки представления списка значений. Т.к. там хранится "Как выгружать документ".
		ВыбранныйЭлемент = сзТиповДокументов.ВыбратьЭлемент();
		Если ВыбранныйЭлемент <> Неопределено Тогда
			Элемент.ТекущиеДанные.ТипДокумента = ВыбранныйЭлемент.Значение;
		КонецЕсли;	
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаЗагрузкиЗагружать" Тогда
	Иначе
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляВыгрузкиДокументыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	мСтрок = ТаблицаДляВыгрузки.НайтиСтроки(Новый Структура("Документы", ВыбранноеЗначение));
	Если мСтрок.Количество() > 0 И Не ЗначениеЗаполнено(Элементы.ТаблицаДляВыгрузки.ТекущиеДанные.Документы) Тогда
		Сообщить("Данное значение уже добавлено в список выгрузки");
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) <> Тип("Тип") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		мСтрок = Объект.ТаблицаДокументов.НайтиСтроки(Новый Структура("Значение", ПолучитьИмяМетаданныхОбъекта(ВыбранноеЗначение)));
		Для каждого Строка Из мСтрок Цикл
			Элементы.ТаблицаДляВыгрузки.ТекущиеДанные.КакВыгружать = Строка.КакВыгружать;
			Элементы.ТаблицаДляВыгрузки.ТекущиеДанные.Выгружать = Истина;
			Прервать;	//хоть и не обязательно
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяМетаданныхОбъекта(парОбъект)

	Возврат парОбъект.Метаданные().Имя;

КонецФункции // ПолучитьИмяМетаданныхОбъекта()

&НаСервере
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, ВидДокумента, ИмяТабЧасти) Экспорт

	МетаданныеДокумента = Метаданные.Документы[ВидДокумента];
	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;
	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

