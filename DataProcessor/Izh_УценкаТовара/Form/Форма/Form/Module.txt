
&НаКлиенте
Процедура НаборыКомплектыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПараметрыФормы = ПодготовитьПараметрыДляПодбора();
	Если ОткрытьФормуМодально("ОбщаяФорма.ПодборНоменклатуры",Новый Структура("СтруктураПараметров",ПараметрыФормы),ЭтаФорма) <> "ОК" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОбработатьПодборНаСервере(ПараметрыФормы.АдресВременногоХранилища);
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборНаСервере(АдресХранилища)
	
	ПерезаписыватьТаблицы = Ложь;
		
	ТЗВерхнейЧасти = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ТЗВерхнейЧасти.Колонки.Добавить("ЕдИзм");
	ТЗВерхнейЧасти.Колонки.Добавить("Коэффициент");
	ТЗВерхнейЧасти.Колонки.Добавить("РозничнаяЦена");
	ТЗВерхнейЧасти.Колонки.Добавить("НоваяЦена");
	
	ТЗНижнейЧасти = ТЗВерхнейЧасти.СкопироватьКолонки();
	ТЗНижнейЧасти.Колонки.Добавить("Владелец");
	
	Для Каждого СтрокаТЗ Из ТЗВерхнейЧасти Цикл		
		СтруктураЦен = ПолучитьЦенуНоменклатуры(Объект.ДатаУценки, СтрокаТЗ.Номенклатура, Объект.СтруктурнаяЕдиница);
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтруктураЦен);
		СтрокаТЗ.Коэффициент = 1;				
		
		//Заполнение состава
		//ТЗСоставаПоВладельцу = ПолучитьСоставНабораНоменклатуры(СтрокаТЗ.Номенклатура);
		ТЗКомплетовСодержащихНоменклатуру = ПолучитьКомплектыСНоменклатурой(СтрокаТЗ.Номенклатура);
		Для Каждого СтрокаТЗСостава Из ТЗКомплетовСодержащихНоменклатуру Цикл
			НоваяСтрокаНижнейЧасти = ТЗНижнейЧасти.Добавить();						
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНижнейЧасти, СтрокаТЗСостава);
			НоваяСтрокаНижнейЧасти.Коэффициент	= СтрокаТЗ.Коэффициент;
			НоваяСтрокаНижнейЧасти.Количество	= СтрокаТЗ.Количество;
			НоваяСтрокаНижнейЧасти.ЕдИзм		= СтрокаТЗ.ЕдИзм;
			НоваяСтрокаНижнейЧасти.Владелец  	= СтрокаТЗ.Номенклатура;
			НоваяСтрокаНижнейЧасти.РозничнаяЦена= СтрокаТЗ.РозничнаяЦена - (СтрокаТЗ.РозничнаяЦена * Объект.ПроцентИзмененияЦены / 100);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПерезаписыватьТаблицы Тогда		
		Объект.УценочныеПозиции.Загрузить(ТЗВерхнейЧасти);
		Объект.УценяемыеПозиции.Загрузить(ТЗНижнейЧасти);
	Иначе
		Для Каждого СтрокаТЗ Из ТЗВерхнейЧасти Цикл
			НоваяСтрока = Объект.УценочныеПозиции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЦикла;
		Для Каждого СтрокаТЗ Из ТЗНижнейЧасти Цикл
			НоваяСтрока = Объект.УценяемыеПозиции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЦикла;	
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ПолучитьЦенуНоменклатуры(НаДату, Номенклатура, СтруктурнаяЕдиница)
	
	Результат = Новый Структура("РозничнаяЦена, ЕдИзм", 0, Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдИзм
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&НаДату,
	|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.ID УБЫВ";
	Запрос.УстановитьПараметр("НаДату"				, НаДату);
	Запрос.УстановитьПараметр("Номенклатура"		, Номенклатура); 
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, СтруктурнаяЕдиница);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Вставить("РозничнаяЦена"	, Выборка.Цена);
		Результат.Вставить("ЕдИзм"			, Выборка.ЕдИзм);		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПересчитатьЦены()
	
	Для Каждого СтрокаУценки Из Объект.УценочныеПозиции Цикл				
		МассивСтрокСостава = Объект.УценяемыеПозиции.НайтиСтроки(Новый Структура("Владелец", СтрокаУценки.Номенклатура));
		Для Каждого СтрокаСостава Из МассивСтрокСостава Цикл
			СтрокаСостава.РозничнаяЦена = СтрокаУценки.РозничнаяЦена - (СтрокаУценки.РозничнаяЦена * Объект.ПроцентИзмененияЦены / 100);						
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСоставНабораНоменклатуры(Номенклатура)
	
	Результат = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатураСоставНабора.Компонент КАК Номенклатура,
	|	НоменклатураСоставНабора.Количество
	|ИЗ
	|	Справочник.Номенклатура.СоставНабора КАК НоменклатураСоставНабора
	|ГДЕ
	|	НоменклатураСоставНабора.Ссылка = &НоменклатураВладелец";	
	Запрос.УстановитьПараметр("НоменклатураВладелец" , Номенклатура); 	
	Результат = Запрос.Выполнить().Выгрузить();	
	               
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьКомплектыСНоменклатурой(Номенклатура)
	
	Результат = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатураСоставНабора.Ссылка КАК Номенклатура	
	|ИЗ
	|	Справочник.Номенклатура.СоставНабора КАК НоменклатураСоставНабора
	|ГДЕ
	|	НоменклатураСоставНабора.Компонент = &НоменклатураКомпонент
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураСоставНабора.Ссылка";	
	Запрос.УстановитьПараметр("НоменклатураКомпонент" , Номенклатура); 	
	Результат = Запрос.Выполнить().Выгрузить();	
	               
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция ПодготовитьПараметрыДляПодбора()
	
	СтруктураПараметровПодбора = Новый Структура("ТекстЗапроса,Параметры,АдресВременногоХранилища",);
	СтруктураПараметровПодбора.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено,ЭтаФорма.УникальныйИдентификатор);		
	//{БредовЮГ 2015-07-12 Наряд 000156533 от 12.07.2015 12:40:15	
	ТекстЗапроса = ТекстЗапросаПодбораНоменклатуры();
	ТекстУсловия = "";
	ПараметрыЗапроса = Новый Структура();
	Если ЗначениеЗаполнено(Объект.Фирма) Тогда
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия),""  , " И ")+" Фирма = &Фирма";
		ПараметрыЗапроса.Вставить("Фирма",Объект.Фирма);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия),"" ," И ")+" МестоХранения = &МестоХранения";
		ПараметрыЗапроса.Вставить("МестоХранения",Объект.Склад);
	КонецЕсли;
	СтруктураПараметровПодбора.ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТекстУсловия%",ТекстУсловия);
	//БредовЮГ  2015-07-12 Наряд 000156533 от 12.07.2015 12:40:15 } 	
	СтруктураПараметровПодбора.Вставить("Параметры", ПараметрыЗапроса);
	Возврат СтруктураПараметровПодбора;
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаПодбораНоменклатуры()
	
	Возврат "ВЫБРАТЬ
	|	СписокНоменклатуры.Код,
	|	СписокНоменклатуры.Наименование,
	|	СписокНоменклатуры.Группа,
	|	ВЫБОР
	|		КОГДА СписокНоменклатуры.ПометкаУдаления
	|			ТОГДА ВЫБОР
	|					КОГДА СписокНоменклатуры.Группа = 0
	|						ТОГДА 2
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписокНоменклатуры.Группа = 0
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка,
	|	СписокНоменклатуры.Ссылка КАК Номенклатура
	//{БредовЮГ 2015-07-12 Наряд 000156533 от 12.07.2015 12:40:15
	|,
	|	СУММА(ОстаткиНоменклатуры.КоличествоОстаток) КАК КоличествоОстаток 
	//БредовЮГ  2015-07-12 Наряд 000156533 от 12.07.2015 12:40:15 } 	
	|ИЗ
	|	Справочник.Номенклатура КАК СписокНоменклатуры
	//{БредовЮГ 2015-07-12 Наряд 000156533 от 12.07.2015 12:40:15
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|					,
	|					%ТекстУсловия% ) КАК ОстаткиНоменклатуры
	|			ПО СписокНоменклатуры.Ссылка = ОстаткиНоменклатуры.Номенклатура
	//БредовЮГ  2015-07-12 Наряд 000156533 от 12.07.2015 12:40:15 } 	
	|ГДЕ
	|	СписокНоменклатуры.Ссылка В
	|			(ВЫБРАТЬ
	|				НоменклатураСоставНабора.Компонент
	|			ИЗ
	|				Справочник.Номенклатура.СоставНабора КАК НоменклатураСоставНабора)
	|	ИЛИ НЕ СписокНоменклатуры.Группа = 0
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНоменклатуры.Код,
	|	СписокНоменклатуры.Наименование,
	|	СписокНоменклатуры.Группа,
	|	ВЫБОР
	|		КОГДА СписокНоменклатуры.ПометкаУдаления
	|			ТОГДА ВЫБОР
	|					КОГДА СписокНоменклатуры.Группа = 0
	|						ТОГДА 2
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписокНоменклатуры.Группа = 0
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ,
	|	СписокНоменклатуры.Ссылка";
	
КонецФункции

&НаКлиенте
Процедура НаборыКомплектыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.УценочныеПозиции.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;				
	ТекНоменклатура	= Элементы.УценочныеПозиции.ТекущиеДанные.Номенклатура;	
	УстановитьОтборПоНоменклатуреВладельцу(ТекНоменклатура);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоУценяемыхПозицийПоВладельцу(НоменклатураВладелец, НовоеКоличество)
	
	Если НЕ ЗначениеЗаполнено(НоменклатураВладелец) Тогда
		Возврат;
	КонецЕсли;					
	
	Отбор = Новый Структура("Владелец", НоменклатураВладелец);
	МассивСтрок = Объект.УценяемыеПозиции.НайтиСтроки(Отбор);
	Для Каждого Строка Из МассивСтрок Цикл
		Строка.Количество = НовоеКоличество;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьОтборПоНоменклатуреВладельцу(Владелец)
		
	Элементы.УценяемыеПозиции.ОтборСтрок = Новый ФиксированнаяСтруктура("Владелец", Владелец);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентИзмененияЦеныПриИзменении(Элемент)
	
	Если Объект.ПроцентИзмененияЦены > 50 Тогда
		Объект.ПроцентИзмененияЦены = 50;
	КонецЕсли;
	Если Объект.ПроцентИзмененияЦены < 0 Тогда
		Объект.ПроцентИзмененияЦены = 0;
	КонецЕсли;	
	
	ПересчитатьЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Если Объект.УценочныеПозиции.Количество() > 0 
		ИЛИ Объект.УценяемыеПозиции.Количество() > 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопроса", ЭтаФорма, Параметры)
								, "Табличные части будут очищены, продолжить?"
								, РежимДиалогаВопрос.ДаНет);	 
	КонецЕсли;		
	ЗаполнитьСкладИзСтруктурнойЕдиницы();							
								
КонецПроцедуры

&НаСервере
Функция ОтправитьНовуюЦенуНаВебсервис(СтрокаТаблицыСостава, СообщениеОшибки = "")
	
	Попытка
		ВебСервис			= УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
		Определение			= Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
		URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса			= Определение.Сервисы.Получить(0).Имя;
		ИмяТочки			= Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси				= Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		Прокси.Пользователь	= ВебСервис.Имя;
		Прокси.Пароль		= ВебСервис.Пароль;		
		
		КорневыеСвойства	= ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/RegPrcChgDesc").КорневыеСвойства;
		
		RegPrcChgDesc		= КорневыеСвойства.Получить("RegPrcChgDesc").Тип;
		RegPrcChgDtl		= КорневыеСвойства.Получить("RegPrcChgDtl").Тип;
		Результат			= Истина;
		ПакетRegPrcChgDesc	= ФабрикаXDTO.Создать(RegPrcChgDesc);
		ПакетRegPrcChgDesc.location = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
		ПакетRegPrcChgDesc.loc_type = ?(Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");		
						
		ПакетRegPrcChgDtl = ФабрикаXDTO.Создать(RegPrcChgDtl);
		ПакетRegPrcChgDtl.price_change_id		= 9999999999;
		ПакетRegPrcChgDtl.item					= СокрЛП(СтрокаТаблицыСостава.Номенклатура.Код);
		ПакетRegPrcChgDtl.effective_date		= ОбменДаннымиRIBСервер.RibData(Объект.ДатаУценки);
		ПакетRegPrcChgDtl.selling_retail_changed_ind = 1;
		ПакетRegPrcChgDtl.selling_unit_retail	= СтрокаТаблицыСостава.РозничнаяЦена;
		ПакетRegPrcChgDtl.selling_uom			= СокрЛП(СтрокаТаблицыСостава.Номенклатура.БазоваяЕдиницаИзмерения.Наименование);
		ПакетRegPrcChgDtl.selling_currency		= Объект.СтруктурнаяЕдиница.Валюта.Наименование;
		ПакетRegPrcChgDtl.multi_unit_changed_ind= 0;
		ПакетRegPrcChgDesc.RegPrcChgDtl.Добавить(ПакетRegPrcChgDtl);

		
		RibMessages	= ОбменДаннымиRIBСервер.УпаковатьВСообщение(ТекущаяДата(),"",ПакетRegPrcChgDesc,"RegPrcChgDesc","RegPrcChg","regprcchgcre",ПакетRegPrcChgDesc.location);
		Результат	= ОбменДаннымиRIBСервер.ОтправитьСообщение(RibMessages,Прокси);
		Если RibMessages <> "" Тогда
			Сообщить(RibMessages);
		КонецЕсли;
		
		Возврат Истина;
	Исключение
		СообщениеОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСкладИзСтруктурнойЕдиницы()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");		
	Если ЗначениеЗаполнено(ОбработкаОбъект.СтруктурнаяЕдиница) 
		И НЕ ЗначениеЗаполнено(ОбработкаОбъект.Склад) Тогда
		
		ОбработкаОбъект.Склад = ОбработкаОбъект.СтруктурнаяЕдиница.СкладТорговогоЗала;
	КонецЕсли;							
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
								
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        ОчиститьТабличныеЧасти();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныеЧасти()
	
	Объект.УценочныеПозиции.Очистить();
	Объект.УценяемыеПозиции.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаУценкиПриИзменении(Элемент)
	
	Если Объект.УценочныеПозиции.Количество() > 0 
		ИЛИ Объект.УценяемыеПозиции.Количество() > 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопроса", ЭтаФорма, Параметры)
								, "Табличные части будут очищены, продолжить?"
								, РежимДиалогаВопрос.ДаНет);	 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивСЕ = Новый Массив;
	Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ЭтоГруппа Тогда
		Выборка = Справочники.СтруктурныеЕдиницы.ВыбратьИерархически(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		Пока Выборка.Следующий() Цикл
			МассивСЕ.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Иначе
		МассивСЕ.Добавить(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	КонецЕсли;
	Элементы.СтруктурнаяЕдиница.СписокВыбора.ЗагрузитьЗначения(МассивСЕ);
	
	Если МассивСЕ.Количество() = 1 Тогда
		Объект.СтруктурнаяЕдиница = МассивСЕ[0];
		ЗаполнитьСкладИзСтруктурнойЕдиницы();
	КонецЕсли;	
	Объект.ТипЗапроса	= "Переоценка";
	Объект.ДатаУценки	= ТекущаяДата();
	Объект.ПроцентИзмененияЦены = 50;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаЗаполнения(СообщениеОшибки = "")
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		СообщениеОшибки = СообщениеОшибки + "Не выбран склад" + Символы.ПС;
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		СообщениеОшибки = СообщениеОшибки + "Не выбрана структурная единица" + Символы.ПС;
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Процедура ЗаписатьИзмененияВБДНаСервере()
	
	МассивНовыхЦен = Новый Массив;
	
	СообщениеОшибки = "";
	Отказ = ПроверкаЗаполнения(СообщениеОшибки);
	
	Если Отказ Тогда
		Сообщить(СообщениеОшибки);
	КонецЕсли;
	
	Для Каждого СтрокаСостава Из Объект.УценяемыеПозиции Цикл
		
		МассивСтрок = Объект.УценочныеПозиции.НайтиСтроки(Новый Структура("Номенклатура", СтрокаСостава.Владелец));
		Если МассивСтрок.Количество() > 0 Тогда
			Период = ТекущаяДата();
			
			НоваяКомплектация = Документы.Комплектация.СоздатьДокумент();
			НоваяКомплектация.Дата				= Период;
			НоваяКомплектация.Фирма				= Объект.Фирма;
			НоваяКомплектация.Склад				= Объект.Склад;
			НоваяКомплектация.ВидСписания		= Справочники.ВидыСписания.НайтиПоНаименованию("ВнешнийВидПродукта");
			НоваяКомплектация.Комплект			= СтрокаСостава.Номенклатура;			
			НоваяКомплектация.ЕдиницаИзмерения	= СтрокаСостава.ЕдИзм;
			НоваяКомплектация.Коэффициент		= СтрокаСостава.Коэффициент;
			НоваяКомплектация.Количество		= СтрокаСостава.Количество;
			НоваяКомплектация.Комментарий		= "Создано автоматически обработкой ""Уценка товара""";			
			
			//Заполнение ТЧ
			НоваяСтрокаСостава = НоваяКомплектация.Состав.Добавить();
			СтрокаНабора = МассивСтрок[0];
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСостава, СтрокаНабора);
			НоваяСтрокаСостава.ЕдиницаИзмерения = СтрокаНабора.ЕдИзм;			
			//Получение остатков в разрезе статусов и ставок НДС
			НоваяКомплектация.ПерераспределитьСоставПоОстаткам();
			
			Если НоваяКомплектация.Состав.Количество() > 0 Тогда
				Попытка
					НоваяКомплектация.Записать(РежимЗаписиДокумента.Проведение);
					Сообщить("Сформирован и проведен документ: " + СокрЛП(НоваяКомплектация));
					
					МассивНовыхЦен.Добавить(СтрокаСостава);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;				
			
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого СтрокаЦены Из МассивНовыхЦен Цикл
		СообщениеОшибки = "";
		Если ОтправитьНовуюЦенуНаВебсервис(СтрокаЦены, СообщениеОшибки) Тогда
			Сообщить("Отправлен пакет на обновление цены ("+ СокрЛП(СтрокаЦены.Номенклатура) + ", " + Формат(СтрокаЦены.РозничнаяЦена, "ЧГ=") + ")");
		Иначе
			Сообщить(СообщениеОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьИзмененияВБД(Команда)
	
	Если Объект.УценочныеПозиции.Количество() > 0 
		ИЛИ Объект.УценяемыеПозиции.Количество() > 0 Тогда
	
		ЗаписатьИзмененияВБДНаСервере();
	Иначе
		Сообщить("Нечего записывать.");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НаборыКомплектыПередУдалением(Элемент, Отказ)
	
	ТекНоменклатура		= Элемент.ТекущиеДанные.Номенклатура;		
	МассивСтрокСостава	= Объект.УценяемыеПозиции.НайтиСтроки(Новый Структура("Владелец", ТекНоменклатура));
	Для Каждого СтрокаСостава Из МассивСтрокСостава Цикл
		Объект.УценяемыеПозиции.Удалить(СтрокаСостава);
	КонецЦикла;
		
КонецПроцедуры


&НаКлиенте
Процедура УценяемыеПозицииПриИзменении(Элемент)
	
	Если Элементы.УценочныеПозиции.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;				
	ТекНоменклатура	= Элементы.УценочныеПозиции.ТекущиеДанные.Номенклатура;
	ТекКоличество	= Элементы.УценочныеПозиции.ТекущиеДанные.Количество;	
	ПересчитатьКоличествоУценяемыхПозицийПоВладельцу(ТекНоменклатура, ТекКоличество);
	
КонецПроцедуры


&НаКлиенте
Процедура НаборыКомплектыКоличествоПриИзменении(Элемент)
	
	Если Элементы.УценочныеПозиции.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;				
	ТекНоменклатура	= Элементы.УценочныеПозиции.ТекущиеДанные.Номенклатура;
	ТекКоличество	= Элементы.УценочныеПозиции.ТекущиеДанные.Количество;	
	ПересчитатьКоличествоУценяемыхПозицийПоВладельцу(ТекНоменклатура, ТекКоличество);
	
КонецПроцедуры

