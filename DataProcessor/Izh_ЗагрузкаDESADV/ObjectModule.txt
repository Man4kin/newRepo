Перем СчетчикСегментов;
Перем ПодготовленныеДанные;
Перем ТабличнаяЧасть;
Перем Данные;
Перем Результат;

//{БредовЮГ 2014-06-03 Функция используется и при загрузке и при выгрузке , Формат ничего не делает со строкой и возвращает ее.
Функция ПреобразоватьДату(Дата,ФорматДаты)
	Если ФорматДаты="203" тогда
		Возврат Формат(Дата,"ДФ=""ггггММддЧЧммсс""");
	Иначе
		Возврат Формат(Дата,"ДФ=ггггММдд")+"000000";
	КонецЕсли;
КонецФункции
//БредовЮГ 2014-06-03 Функция используется и при загрузке и при выгрузке , Формат ничего не делает со строкой и возвращает ее.}

Функция ПолучитьПодчиненныйУзелПоИмени(Узел,Имя)
	Попытка
		Список=ПолучСписокПотомковЭлементаПоИмени_DOM(Узел,Имя);
		если ДлинаСписка_DOM(Список)=0 тогда
			Возврат Неопределено;	
		Иначе 
			Возврат ЭлементСписка_DOM(Список,0);
		КонецЕсли;	
	Исключение
		ВызватьИсключение "Не определен родитель элемента "+Имя;
	КонецПопытки;
КонецФункции

Функция ПустойУзел(Значение)
	Если Значение<>Неопределено тогда
		Возврат Ложь;	
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция ЗначениеМодиифкатораДаты(Модификатор_)
	//	2   = Delivery date/time, requested 
	//10   = Shipment date/time, requested 
	//11   = Despatch date and/or time 
	//15   = Promotion start date/time 
	//37   = Ship not before date/time 
	//38   = Ship not later than date/time 
	//61   = Cancel if not delivered by this date 
	//63   = Delivery date/time, latest 
	//64   = Delivery date/time, earliest 
	//69   = Delivery date/time, promised for 
	//X14   = Requested for delivery week commencing (EAN Code) 
	//137   = Document/message date/time 
	//171 = Reference date/time 
	//200   = Pick-up/collection date/time of cargo 
	//263   = Invoicing period 
	//273   = Validity period 
	//282   = Confirmation date lead time 
	//383   = Cancel if not shipped by this date 
	Модификатор=ВРЕГ(Модификатор_);
	
	Если Модификатор="2" тогда
		Возврат "ДатаПоставки";
	ИначеЕсли Модификатор="10" тогда
		Возврат "ДатаОтгрузки";
	ИначеЕсли Модификатор="11" тогда
		Возврат "ДатаОтправки";
	ИначеЕсли Модификатор="15" тогда
		Возврат "ДатаНачалаПромоАкции";
	ИначеЕсли Модификатор="37" тогда
		Возврат "ДатаОтгрузкиНеРаньше";
	ИначеЕсли Модификатор="38" тогда
		Возврат "ДатаОтгрузкиНеПозже";
	ИначеЕсли Модификатор="61" тогда
		Возврат "ДатаОтменыЕслиНеПоставлено";
	ИначеЕсли Модификатор="63" тогда
		Возврат "ДатаПоставкиПоздняя";
	ИначеЕсли Модификатор="64" тогда
		Возврат "ДатаПоставкиРанняя";	
	ИначеЕсли Модификатор="69" тогда
		Возврат "ДатаПоставкиОбещенная";
	ИначеЕсли Модификатор="X14" тогда
		Возврат "";//?
	ИначеЕсли Модификатор="137" тогда
		Возврат "ДатаДокумента";
	ИначеЕсли Модификатор="171" тогда
		Возврат "ДатаЗаказа";
	ИначеЕсли Модификатор="200" тогда
		Возврат "ДатаУпаковки";
	ИначеЕсли Модификатор="263" тогда
		Возврат "ПериодПредаставленияСчета";
	ИначеЕсли Модификатор="273" тогда
		Возврат "ПериодПроверки";
	ИначеЕсли Модификатор="383" тогда
		Возврат "ДатаОтменыЕслиНеОтгружено";	
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция УвеличитьСчетчикСегментов()
	СчетчикСегментов=СчетчикСегментов+1;
	Возврат СчетчикСегментов;
КонецФункции


Функция ЗаписатьUNH(XML,Узел)
	Попытка
		UNH=ДобавитьЭлемент_DOM(XML,Узел,"UNH");
		ДобавитьЭлемент_DOM(XML,UNH,"E0062",ПолучитьДанные("НомерСообщения"));
		s009=ДобавитьЭлемент_DOM(XML,UNH,"S009");
		ДобавитьЭлемент_DOM(XML,s009,"E0065","DESADV");
		ДобавитьЭлемент_DOM(XML,s009,"E0052","D");
		ДобавитьЭлемент_DOM(XML,s009,"E0054","01B");
		ДобавитьЭлемент_DOM(XML,s009,"E0051","UN");
		ДобавитьЭлемент_DOM(XML,s009,"E0057","EAN007");
		УвеличитьСчетчикСегментов();
	Исключение
		ВызватьИсключение "Не удалось собрать сегмент UNH "+ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;
КонецФункции

Функция ЗаписатьBGM(XML,Узел)
	Попытка
		BGM=ДобавитьЭлемент_DOM(XML,Узел,"BGM");
		C002= ДобавитьЭлемент_DOM(XML,BGM,"C002");
		ДобавитьЭлемент_DOM(XML,C002,"E1001","351");
		C106=ДобавитьЭлемент_DOM(XML,BGM,"C106");
		ДобавитьЭлемент_DOM(XML,C106,"E1004",ПолучитьДанные("НомерДокумента"));
		ДобавитьЭлемент_DOM(XML,BGM,"E1225",ПолучитьДанные("ФункцияСообщения"));	 
		УвеличитьСчетчикСегментов();
	Исключение
		ВызватьИсключение "Не удалось собрать сегмент BGM "+ОписаниеОшибки();
	КонецПопытки;
КонецФункции

Функция ОпределитьФорматДаты(Дат)
	Если НачалоДня(Дат)=Дат тогда
		Возврат "102";
	Иначе
		Возврат "203";
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьСегментDTM(XML,Узел,Дата_,Модификатор,ФорматДаты="")
	Попытка
		Если ФорматДаты="" тогда
			ФорматДаты=ОпределитьФорматДаты(Дата_);
		КонецЕсли;
		DTM=ДобавитьЭлемент_DOM(XML,Узел,"DTM");
		C507= ДобавитьЭлемент_DOM(XML,DTM,"C507");
		ДобавитьЭлемент_DOM(XML,C507,"E2005",Модификатор); 
		ДобавитьЭлемент_DOM(XML,C507,"E2380",ПреобразоватьДату(Дата_,ФорматДаты));
		ДобавитьЭлемент_DOM(XML,C507,"E2379",ФорматДаты);
		УвеличитьСчетчикСегментов();
	исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;	
КонецФункции

Функция ЗаписатьDTM(XML,Узел)
	Попытка
		ДатаДокумента=ПолучитьДанные("ДатаДокумента");
		Если не ЗначениеЗаполнено(ДатаДокумента) тогда
			Возврат "Не определена дата документа!";	
		КонецЕсли;
		ВыгрузитьСегментDTM(XML,Узел,ДатаДокумента,"137");
		
		ДатаПоставки=ПолучитьДанные("ДатаПоставки");
		Если ЗначениеЗаполнено(ДатаПоставки) тогда
			Если ДатаПоставки<ДатаДокумента тогда
				///ВызватьИсключение "Дата поставки не может быть меньше чем дата заказа!";	
			КонецЕсли;
			ВыгрузитьСегментDTM(XML,Узел,ДатаПоставки,"358");
		КонецЕсли;
		
		ДатаПоставкиОжидаемая=ПолучитьДанные("ДатаПоставкиОжидаемая");
		Если ЗначениеЗаполнено(ДатаПоставкиОжидаемая) тогда
			Если ДатаПоставкиОжидаемая<ДатаДокумента тогда
				///	ВызватьИсключение "Дата ожидаемая поставки не может быть меньше чем дата заказа!";	
			КонецЕсли;
			ВыгрузитьСегментDTM(XML,Узел,ДатаПоставкиОжидаемая,"17");
		КонецЕсли;
		
		ДатаОтправки=ПолучитьДанные("ДатаОтправки");
		Если ЗначениеЗаполнено(ДатаОтправки) тогда
			ВыгрузитьСегментDTM(XML,Узел,ДатаОтправки,"11");		
		КонецЕсли;
	Исключение
		ВызватьИсключение "Не удалось собрать сегементыы DTM "+ОписаниеОшибки(); 
	КонецПопытки;
	Возврат 0;
КонецФункции

Функция ВыгурзитьСегментRFF(XML,Узел,Значение,Модификатор)
	Попытка	
		RFF= ДобавитьЭлемент_DOM(XML,Узел,"RFF");
		C506= ДобавитьЭлемент_DOM(XML,RFF,"C506");
		ДобавитьЭлемент_DOM(XML,C506,"E1153",Модификатор);  
		ДобавитьЭлемент_DOM(XML,C506,"E1154",Значение);
		УвеличитьСчетчикСегментов();
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;
КонецФункции

Функция ЗаписатьSG1(XML,Узел)
	Попытка
		НомерСоглашения=ПолучитьДанные("НомерСоглашения");
		Если ЗначениеЗаполнено(НомерСоглашения) тогда
			SG1=ДобавитьЭлемент_DOM(XML,Узел,"SG1"); 		
			ВыгурзитьСегментRFF(XML,SG1,НомерСоглашения,"CT");
		КонецЕсли;
		
		НомерЗаказаПокупателя=ПолучитьДанные("НомерЗаказаПокупателя");
		ДатаЗаказаПокупателя=получитьДанные("ДатаЗаказаПокупателя");
		Если ЗначениеЗаполнено(НомерЗаказаПокупателя) тогда
			SG1=ДобавитьЭлемент_DOM(XML,Узел,"SG1"); 		
			ВыгурзитьСегментRFF(XML,SG1,НомерЗаказаПокупателя,"ON");
			Если не ЗначениеЗаполнено(ДатаЗаказаПокупателя) тогда
				ВызватьИсключение "Не указана дата заказа покупателя!";	
			КонецЕсли;			
			ВыгрузитьСегментDTM(XML,SG1,ДатаЗаказаПокупателя,"171","102");
		КонецЕсли;
		
		НомерДокументаПокупателя=ПолучитьДанные("НомерДокументаПокупателя");
		Если ЗначениеЗаполнено(НомерДокументаПокупателя) тогда
			SG1=ДобавитьЭлемент_DOM(XML,Узел,"SG1"); 		
			ВыгурзитьСегментRFF(XML,SG1,НомерДокументаПокупателя,"DM");	
		КонецЕсли;
		
	Исключение
		ВызватьИсключение "Не удалось собрать теги SG1 "+ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;
КонецФункции

Функция ВыгрузитьСегментNAD(XML,Узел,Значение,Модификатор)
	Попытка
		NAD = ДобавитьЭлемент_DOM(XML,Узел,"NAD"); 	
		ДобавитьЭлемент_DOM(XML,NAD,"E3035",Модификатор);
		C082=ДобавитьЭлемент_DOM(XML,NAD,"C082");
		ДобавитьЭлемент_DOM(XML,C082,"E3039",Значение);
		ДобавитьЭлемент_DOM(XML,C082,"E3055","9");
		УвеличитьСчетчикСегментов();
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
КонецФункции

Функция ЗаписатьSG2(XML,Узел)
	GLNПоставщика = ПолучитьДанные("GLNПоставщика");
	GLNПокупателя = ПолучитьДанные("GLNПокупателя");
	GLNГрузоотправителя = ПолучитьДанные("GLNГрузоотправителя");
	GLNМестаДоставки = ПолучитьДанные("GLNМестаДоставки");
	GLNКомуВыставленСчет = ПолучитьДанные("GLNКомуВыставленСчет");
	ДопИдПоставщика = ПолучитьДанные("ДопИДПоставщика");
	ДопИДПокупателя = ПолучитьДанные("ДопИДПокупателя");
	ДопИДМестаДоставки =  ПолучитьДанные("ДопИДМестаДоставки");
	ДопИДКомуВыставленСчет = ПолучитьДанные("ДопИДКомуВыставленСчет");
	ДопИДГрузоотправителя = ПолучитьДанные("ДопИДГрузоотправителя");
	
	Если Не ЗначениеЗаполнено(GLNПоставщика) тогда
		Возврат "Не определен GLN поставщика!";	
	КонецЕсли;
	SG2=ДобавитьЭлемент_DOM(XML,Узел,"SG2");
	ВыгрузитьСегментNAD(XMl,SG2,GLNПоставщика,"SU");
	Если ЗначениеЗаполнено(ДопИдПоставщика) тогда
		SG3=ДобавитьЭлемент_DOM(XML,SG2,"SG3");
		ВыгурзитьСегментRFF(XML,SG3,ДопИдПоставщика,"YC1");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(GLNПокупателя) тогда
		Возврат "Не определен GLN покупателя!";	
	КонецЕсли;
	SG2= ДобавитьЭлемент_DOM(XML,Узел,"SG2");
	ВыгрузитьСегментNAD(XMl,SG2,GLNПокупателя,"BY");
	Если ЗначениеЗаполнено(ДопИДПокупателя) тогда
		SG3=ДобавитьЭлемент_DOM(XML,SG2,"SG3");
		ВыгурзитьСегментRFF(XML,SG3,ДопИДПокупателя,"YC1");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(GLNМестаДоставки) тогда
		SG2= ДобавитьЭлемент_DOM(XML,Узел,"SG2");
		ВыгрузитьСегментNAD(XMl,SG2,GLNМестаДоставки,"DP");
		Если ЗначениеЗаполнено(ДопИДМестаДоставки) тогда
			SG3=ДобавитьЭлемент_DOM(XML,SG2,"SG3");
			ВыгурзитьСегментRFF(XML,SG3,ДопИДМестаДоставки,"YC1");
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(GLNГрузоотправителя) тогда
		SG2=ДобавитьЭлемент_DOM(XML,Узел,"SG2");
		ВыгрузитьСегментNAD(XMl,SG2,GLNГрузоотправителя,"SF");
		Если ЗначениеЗаполнено(ДопИДГрузоотправителя) тогда
			SG3=ДобавитьЭлемент_DOM(XML,SG2,"SG3");
			ВыгурзитьСегментRFF(XML,SG3,ДопИДГрузоотправителя,"YC1");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(GLNКомуВыставленСчет) тогда
		SG2= ДобавитьЭлемент_DOM(XML,Узел,"SG2");
		ВыгрузитьСегментNAD(XMl,SG2,GLNКомуВыставленСчет,"IV");
		Если ЗначениеЗаполнено(ДопИДКомуВыставленСчет) тогда
			SG3=ДобавитьЭлемент_DOM(XML,SG2,"SG3");
			ВыгурзитьСегментRFF(XML,SG3,ДопИДКомуВыставленСчет,"YC1");
		КонецЕсли;	
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция ЗаписатьSG17(XML,Узел_,Строка)
	Узел = ДобавитьЭлемент_DOM(XML,Узел_,"SG17"); 
	LIN= ДобавитьЭлемент_DOM(XML,Узел,"LIN");
	НомерСтроки=ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"ПорядковыйНомер");
	ДобавитьЭлемент_DOM(XML,LIN,"E1082",Строка(НомерСтроки));
	C212=ДобавитьЭлемент_DOM(XML,LIN,"C212");
	GTIN=ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"GTIN");
	ДобавитьЭлемент_DOM(XML,C212,"E7140",GTIN);
	ДобавитьЭлемент_DOM(XML,C212,"E7143","SRV");
	УвеличитьСчетчикСегментов();
	
	КодПокупателя = ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"КодПокупателя");
	Если ЗначениеЗаполнено(КодПокупателя) тогда
		PIA=ДобавитьЭлемент_DOM(XML,Узел,"PIA");
		ДобавитьЭлемент_DOM(XML,PIA,"E4347","1");
		C212=ДобавитьЭлемент_DOM(XML,PIA,"C212");
		ДобавитьЭлемент_DOM(XML,C212,"E7140",КодПокупателя);
		ДобавитьЭлемент_DOM(XML,C212,"E7143","IN");
		УвеличитьСчетчикСегментов();
	КонецЕсли;
	
	КодПоставщика = ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"КодПоставщика");
	Если ЗначениеЗаполнено(КодПоставщика) тогда
		PIA=ДобавитьЭлемент_DOM(XML,Узел,"PIA");
		ДобавитьЭлемент_DOM(XML,PIA,"E4347","1");
		C212=ДобавитьЭлемент_DOM(XML,PIA,"C212");
		ДобавитьЭлемент_DOM(XML,C212,"E7140",КодПоставщика);
		ДобавитьЭлемент_DOM(XML,C212,"E7143","SA");
		УвеличитьСчетчикСегментов();
	КонецЕсли;
	
	Наименование = ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"НаименованиеТовара");
	IMD=ДобавитьЭлемент_DOM(XML,Узел,"IMD");
	ДобавитьЭлемент_DOM(XML,IMD,"E7077","F");
	C273=ДобавитьЭлемент_DOM(XML,IMD,"C273");
	ДобавитьЭлемент_DOM(XML,C273,"E7008",Наименование);
	УвеличитьСчетчикСегментов();
	
	Количество = ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"ЗаказанноеКоличество");
	Если ЗначениеЗаполнено(Количество) тогда
		QTY=ДобавитьЭлемент_DOM(XML,Узел,"QTY");
		C186=ДобавитьЭлемент_DOM(XML,QTY,"C186");
		ДобавитьЭлемент_DOM(XML,C186,"E6063","21"); // Заказываемое количество.
		ДобавитьЭлемент_DOM(XML,C186,"E6060",Формат(Количество,"ЧГ="));
		ЕдИзм=?(ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"ЕдиницаИзмерения")="кг","KGM","PCE");
		ДобавитьЭлемент_DOM(XML,C186,"E6411",ЕдИзм);
		УвеличитьСчетчикСегментов();
	КонецЕсли;
	
	Количество= ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"Количество");
	Если ЗначениеЗаполнено(Количество) тогда
		QTY=ДобавитьЭлемент_DOM(XML,Узел,"QTY");
		C186=ДобавитьЭлемент_DOM(XML,QTY,"C186");
		ДобавитьЭлемент_DOM(XML,C186,"E6063","12"); // Поставленное количество.
		ДобавитьЭлемент_DOM(XML,C186,"E6060",Формат(Количество,"ЧГ="));
		ЕдИзм=?(ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"ЕдиницаИзмерения")="кг","KGM","PCE");
		ДобавитьЭлемент_DOM(XML,C186,"E6411",ЕдИзм);
		УвеличитьСчетчикСегментов();
	КонецЕсли;
	
	СтранаПроисхождения=ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"СтранаПроисхождения");
	Если ЗначениеЗаполнено(СтранаПроисхождения) тогда
		ALI=ДобавитьЭлемент_DOM(XML,Узел,"ALI");
		E3239=ДобавитьЭлемент_DOM(XML,ALI,"E3239",СтранаПроисхождения);
		УвеличитьСчетчикСегментов();
	КонецЕсли;
	
	СрокГодности=ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"СрокГодности");
	Если ЗначениеЗаполнено(СрокГодности) тогда
		ВыгрузитьСегментDTM(XML,Узел,СрокГодности,"36","102");
	КонецЕсли;
	
	СтавкаНДС=ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"СтавкаНДС");
	Если ЗначениеЗаполнено(СтавкаНДС) тогда
		FTX=ДобавитьЭлемент_DOM(XML,Узел,"FTX");	
		E4451=ДобавитьЭлемент_DOM(XML,FTX,"E4451","ZZZ");
		C108=ДобавитьЭлемент_DOM(XML,FTX,"C108");	
		E4440=ДобавитьЭлемент_DOM(XML,C108,"E4440",Формат(СтавкаНДС,"ЧГ="));
		УвеличитьСчетчикСегментов();
	Иначе
		ВызватьИсключение "У товара не указана ставка НДС!";
	КонецЕсли;
	
	НомерГТД = ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"НомерГТД");
	Если ЗначениеЗаполнено(НомерГТД) тогда
		SG18=ДобавитьЭлемент_DOM(XML,Узел,"SG18");
		ВыгурзитьСегментRFF(XML,SG18,НомерГТД,"ABT");	
	КонецЕсли;
	
	СуммаСНДС=ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"СуммаСНдс");
	СуммаБезНДС=ПолучитьЗначениеСтроки(ТабличнаяЧасть,Строка,"СуммаБезНДС"); 
	Если ЗначениеЗаполнено(СуммаСНДС) или ЗначениеЗаполнено(СуммаБезНДС)  тогда
		MOA = ДобавитьЭлемент_DOM(XML,Узел,"MOA"); 
		C516= ДобавитьЭлемент_DOM(XML,MOA,"C516");
		
		Если ЗначениеЗаполнено(СуммаСНДС) тогда
			ДобавитьЭлемент_DOM(XML,C516,"E5025","79");
			ДобавитьЭлемент_DOM(XML,C516,"E5004",Формат(СуммаСНДС,"ЧГ="));
		Иначе
			ДобавитьЭлемент_DOM(XML,C516,"E5025","203");
			ДобавитьЭлемент_DOM(XML,C516,"E5004",Формат(СуммаБезНДС,"ЧГ="));
		КонецЕсли;
		ДобавитьЭлемент_DOM(XML,C516,"E6345",ПолучитьДанные("Валюта"));	
		УвеличитьСчетчикСегментов();
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция ЗаписатьSG10(XML,Узел)
	Попытка
		ТабличнаяЧасть =  ПолучитьДанные("ТабличнаяЧасть");
		Если ТипЗнч (ТабличнаяЧасть)<> Тип("ТаблицаЗначений") тогда
			ВызватьИсключение "Табличная часть документа не определена!";	
		КонецЕсли;
		SG10=ДобавитьЭлемент_DOM(XML,Узел,"SG10");
		
		НСтр=0;
		Для каждого Строка из ТабличнаяЧасть цикл
			Попытка
				ЗаписатьSG17(XML,SG10,Строка);
			Исключение
				ВызватьИсключение "Ошибка обработки строки "+Строка(НСтр)+" табличной части "+ОписаниеОшибки();
			КонецПопытки;
			НСтр=НСтр+1;
		КонецЦикла;		
	Исключение
		ВызватьИсключение "Не удалось собрать сегмент SG10 " + ОписаниеОшибки();
	КонецПопытки;
КонецФункции

Функция ЗаписатьUNT(XML,Узел)
	UNT=ДобавитьЭлемент_DOM(XML,Узел,"UNT");
	ДобавитьЭлемент_DOM(XML,UNT,"E0074",Формат(УвеличитьСчетчикСегментов(),"ЧГ="));
	ДобавитьЭлемент_DOM(XML,UNT,"E0062",ПолучитьДанные("НомерСообщения"));
КонецФункции

Функция Загрузить(ИмяФайла,Лог=Неопределено)  Экспорт
	Попытка
		Результат=Новый Соответствие();
		результат["СуммаДокумента"]=0;
		
		//{ СИТЕК БрыляковЕЮ 2014-12-24  Совершенно мне не уперлось соответствие, на него не работает ЗаполнитьЗначениеСвойств()
		Результат = Новый Структура("НомерДокумента, ДатаДокумента, НомерЗаказа, ДатаЗаказа, GLNПокупателя, GLNПоставщика, GLNМестаДоставки");
		Результат.Вставить("СуммаДокумента", 0);
		// СИТЕК БрыляковЕЮ 2014-12-24 }
		
		Тз=ИнициализацияТЗ();	
		Если Не ЗначениеЗаполнено(ИмяФайла) тогда
			Сообщить("Не определно имя файла!");
			Возврат Неопределено;
		КонецЕсли;
		xml=НовыйXMLДокумент_DOM();
		ЗагрузитьXML_DOM(xml,ИмяФайла);
		Корешок=xml.DocumentElement;
		СписокЭлементов = ПолучСписокПотомковЭлемента_DOM(Корешок);
		Для к=0 по ДлинаСписка_DOM(СписокЭлементов)-1 цикл
			ПодЭлемент=ЭлементСписка_DOM(СписокЭлементов,к);
			Если ПолучТипЭлемента_DOM(ПодЭлемент)<>1 тогда
				Продолжить;
			КонецЕсли;  
			ИмяУзла = СокрЛП(ВРЕГ(ПолучИмяЭлемента_DOM(ПодЭлемент)));     
			рез=0;
			Если ИмяУзла="UNH" тогда    
				рез=ОбработкаUNH(ПодЭлемент); 
			ИначеЕсли ИмяУзла="BGM" тогда
				рез=ОбработкаBGM(ПодЭлемент); 
			ИначеЕсли ИмяУзла="DTM" тогда
				рез=ОбработкаDTMГлав(ПодЭлемент);   
			ИначеЕсли ИмяУзла="SG1" тогда
				рез=ОбработкаSG1(ПодЭлемент);	
			ИначеЕсли ИмяУзла="SG2" тогда
				Рез=ОбработкаSG2(ПодЭлемент); 
			ИначеЕсли ИмяУзла="SG10" тогда
				Рез=ОбработкаSG10(ПодЭлемент,Тз);
			ИначеЕсли ИмяУзла="SG" тогда
				//Рез=ОбработкаSG28(ПодЭлемент,Тз);
			ИначеЕсли ИмяУзла="MOA" тогда
				Модификатор="";
				Сум=ОбработкаMOA(ПодЭлемент,Модификатор);
				если Модификатор="86" тогда
					ОбщаяСуммаДокумента=Сум;
					Результат.Вставить("СуммаДокумента",ОбщаяСуммаДокумента);
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;	
		Возврат Результат;
		//ПроверкаРазбора();
	Исключение
		Сообщить(ОписаниеОшибки());
		Если Лог<>Неопределено Тогда
			Лог.ДобавитьСтроку(ОписаниеОшибки());
		КонецЕсли;
		Возврат Неопределено;
	КонецПопытки;
	
	
	
	
	//ПодготовленныеДанные=Данные;
	////ТабличнаяЧасть = Данные.Получить("ТабличнаяЧасть");
	//СчетчикСегментов=0;
	//Попытка
	//	СчетчикСегментов=0;
	//	ИмяФайла=ПолучитьДанные("ИмяФайла");
	//	Если Не ЗначениеЗаполнено(ИмяФайла) тогда
	//		ВызватьИсключение "Не определено имя файла!";	
	//	КонецЕсли;		
	//	xml=НовыйXMLДокумент_DOM();
	//	ДобавитьОбъявлениеXML(xml);
	//	DESADV=ДобавитьЭлемент_DOM(XML,XML,"DESADV");
	//	рез=ЗаписатьUNH(xml,DESADV);
	//	рез=ЗаписатьBGM(xml,DESADV);
	//	рез=ЗаписатьDTM(xml,DESADV);
	//	рез=ЗаписатьSG1(xml,DESADV);
	//	рез=ЗаписатьSG2(xml,DESADV);		
	//	рез=ЗаписатьSG10(xml,DESADV);
	//	рез=ЗаписатьUNT(xml,DESADV);			
	//	СохранитьXMLВФайл(XML,ИмяФайла);
	//	Файл = Новый Файл(ИмяФайла);
	//	Если Не Файл.Существует() тогда
	//		ВызватьИсключение("Не удалось найти файл после выгрузки электронной накладной!");	
	//	КонецЕсли;
	//Исключение
	//	Сообщить("Не удалось выгрзить документ "+ОписаниеОшибки());
	//	Возврат ОписаниеОшибки();
	//КонецПопытки;
	Возврат Истина;
КонецФункции

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	СчетчикСегментов=0;
КонецПроцедуры



// Создает и возвращает узел нового xml-документа
//
// Параметры:
//  Нет.
//  
// Возвращаемое значение:
//  Узел нового xml-документа
//
Функция НовыйXMLДокумент_DOM() Экспорт
	
	Попытка
		XML = Новый COMОбъект("Msxml2.DOMDocument.4.0");
	Исключение
		Попытка
			XML = Новый COMОбъект("Msxml2.DOMDocument.3.0");
		Исключение
			//ЗаписатьВПротоколВыполнения(4);
			ФлагОшибки = Истина;
			Возврат Неопределено;
		КонецПопытки;
	КонецПопытки;
	
	Возврат XML;
КонецФункции // DOM_НовыйXMLДокумент()

Функция ЗагрузитьXML_DOM(Док,ИмяФайла) Экспорт
	Док.Load(ИмяФайла);
	Док.SetProperty("SelectionLanguage","XPath");
КонецФункции

Функция ДобавитьОбъявлениеXML(Док,ОбъявлениеXML="") Экспорт
	Header = Док.createProcessingInstruction("xml", ?(ОбъявлениеXML="","version=""1.0"" encoding=""UTF-8""",ОбъявлениеXML) );  
	Док.appendChild(Header);
	Возврат  Header;
КонецФункции

Функция СохранитьXMLВФайл(Док,ИмяФайла) Экспорт
	Док.Save(ИмяФайла);	
КонецФункции

// Создает новый xml-узел
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел_DOM(Док, Имя)  Экспорт
	
	Возврат Док.createElement(Имя);
	
КонецФункции // DOM_СоздатьУзел()

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция ДобавитьУзел_DOM(Док, УзелРодитель, Имя) Экспорт
	
	XMLDOMNode = Док.createElement(Имя);
	УзелРодитель.appendChild(XMLDOMNode);
	Возврат XMLDOMNode;
	
КонецФункции // DOM_ДобавитьУзел()

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция КопироватьУзел_DOM(Узел)  Экспорт
	
	Возврат Узел.cloneNode(Истина);
	
КонецФункции // DOM_Копироватьузел() 

// Добавляет новый xml-узел к указанному узлу-родителю, устанавливает значение
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//  Значение       - значение добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция ДобавитьЭлемент_DOM(Док, УзелРодитель, Имя, Значение="") Экспорт
	
	XMLDOMElement = Док.createElement(Имя);
	XMLDOMElement.text = Значение;
	УзелРодитель.appendChild(XMLDOMElement);
	Возврат XMLDOMElement;
	
КонецФункции // DOM_ДобавитьЭлемент()

// Подчиняет xml-узел указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный_DOM(УзелРодитель, Узел)  Экспорт
	
	УзелРодитель.appendChild(Узел);
	
КонецПроцедуры // DOM_ДобавитьПодчиненный() 

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут_DOM(Узел, Имя, Значение) Экспорт
	
	Узел.setAttribute(Имя, XMLСтрока(Значение));
	
КонецПроцедуры // DOM_УстановитьАтрибут()

Функция ПолучСписокЭлементовДокумента_DOM(Док, Имя) Экспорт
	Возврат Док.getElementsByTagName(Имя);
КонецФункции

Функция ЭлементСписка_DOM(Список, Индекс)  Экспорт
	Возврат Список.item(Индекс);
КонецФункции

Функция ДлинаСписка_DOM(Список) Экспорт
	Возврат Список.length;
КонецФункции

Функция ПолучЭлементДокумента_DOM(Док, Имя, Индекс=0)  Экспорт
	Список = Док.getElementsByTagName(Имя);
	Возврат Список.item(Индекс);
КонецФункции

Функция ПолучУзелАтрибута_DOM(Элемент, ИмяНомер)  Экспорт
	Возврат  Элемент.getAttributeNode(ИмяНомер);
КонецФункции

Функция ПолучАтрибут_DOM(Элемент, Имя) Экспорт
	Возврат  Элемент.getAttribute(Имя);
КонецФункции

Функция ПолучИмяЭлемента_DOM(Элемент) Экспорт
	Возврат  Элемент.tagName;
КонецФункции

Функция ПолучСписокПотомковЭлементаПоИмени_DOM(Элемент, Имя) Экспорт
	Возврат Элемент.getElementsByTagName(Имя);
КонецФункции

Функция ПолучОтдельныйУзел_DOM(Элемент, Имя) Экспорт
	Возврат Элемент.selectSingleNode(Имя);
КонецФункции

Функция ПолучУзлы_DOM(Элемент, Имя)  Экспорт
	Возврат Элемент.selectNodes(Имя);
КонецФункции

Функция ПолучСписокПотомковЭлемента_DOM(Элемент)  Экспорт
	Возврат Элемент.childNodes;
КонецФункции

Функция ПолучСписокАтрибутов_DOM(Элемент) Экспорт
	Возврат Элемент.attributes;
КонецФункции

Функция ПолучПотомкаЭлемента_DOM(Элемент, Имя, Индекс=0) Экспорт
	Список = Элемент.getElementsByTagName(Имя);
	Возврат Список.item(Индекс);
КонецФункции

//Возвращает тип элемента
//1-Элемент
//2-Атрибут
//3-Текст
//4-Секция данных
//5-Ссылка на компонент
//6-Компонент6
//7-Инструкция обработки
//8-Комментарий
//9-Документ
//10-Определение типа документа (DTD)
//11-Фрагмент документа
//12-Описание
Функция ПолучТипЭлемента_DOM(Элемент) Экспорт
	Возврат Элемент.nodeType;
КонецФункции

Функция ПолучИмяАтрибута_DOM(Элемент)  Экспорт
	Возврат Элемент.name;
КонецФункции

Функция ПолучЗначениеАтрибута_DOM(Элемент) Экспорт
	Возврат Элемент.value;
КонецФункции

Функция ПолучЗначениеУзла_DOM(Элемент) Экспорт
	Возврат Элемент.nodeValue;
КонецФункции

Функция ПолучРодителяУзла_DOM(Элемент)  Экспорт
	Возврат Элемент.parentNode;
КонецФункции

Функция ИмеетВложенныеУзлы(Элемент)  Экспорт
	Возврат Элемент.hasChildNodes();
КонецФункции

Функция ТекстУзла(Элемент) Экспорт
	Возврат Элемент.text;	
КонецФункции

Функция ОпределитьВидФайла(ИмяФайла) Экспорт
	xml=НовыйXMLДокумент_DOM();
	ЗагрузитьXML_DOM(xml,ИмяФайла);
	Корень=xml.DocumentElement;
	
	Возврат ПолучИмяЭлемента_DOM(Корень); 
	
КонецФункции



Функция ОбработкаUNH(Узел)  
	Попытка
		E0062=ПолучитьПодчиненныйУзелПоИмени(Узел,"E0062");
		НомерСообщения=ТекстУзла(E0062);
		Результат.Вставить("НомерСообщения",НомерСообщения);
	Исключение
		ВызватьИсключение "Не удалось разобрать сегмент UNH "+ОписаниеОшибки();	
	КонецПопытки;
КонецФункции   

Функция ОбработкаBGM(Узел)
	НомерДокумента="";
	ФункцияСообщения="";
	Попытка
		УзелС106=ПолучитьПодчиненныйУзелПоИмени(Узел,"C106");
		Если Не ПустойУзел(УзелС106) тогда
			E1004=ПолучитьПодчиненныйУзелПоИмени(УзелС106,"E1004");
			E1225=ПолучитьПодчиненныйУзелПоИмени(Узел,"E1225");
			НомерДокумента = ТекстУзла(E1004);
			ФункцияСообщения = ТекстУзла(E1225);
		КонецЕсли;
	Исключение
		ВызватьИсключение "Не удалось разобрать сегмент BGM "+ОписаниеОшибки();
	КонецПопытки;
	Результат.ВСтавить("НомерДокумента",НомерДокумента); 
	Результат.ВСтавить("ФункцияСообщения",ФункцияСообщения);
	Возврат 0;
КонецФункции  

Функция ОбработкаDTM(Узел,Модификатор)
	Попытка
		С507=ПолучитьПодчиненныйУзелПоИмени(Узел,"C507");          
		Дата_=Неопределено;
		Если Не ПустойУзел(С507) тогда 
			E2005=ПолучитьПодчиненныйУзелПоИмени(С507,"E2005");  
			Модификатор = ТекстУзла(E2005);
			E2380=ПолучитьПодчиненныйУзелПоИмени(С507,"E2380"); 
			//{ СИТЕК БрыляковЕЮ 2014-12-25  
			// Исходный текст -->
			//Дата_=ПреобразоватьДату(ТекстУзла(E2380),Модификатор);
			// <-- Исходный текст 
			Дата_= Дата(ТекстУзла(E2380));
			// СИТЕК БрыляковЕЮ 2014-12-25 }
		КонецЕсли;  
		Возврат Дата_;
	Исключение
		ВызватьИсключение "Не удалось преобразовать сегмент DTM" + ОписаниеОшибки();
	КонецПопытки;	
КонецФункции	

Функция ОбработкаDTMГлав(Узел)
	Попытка
		Модификатор="";  
		Дата_=ОбработкаDTM(Узел,Модификатор);
		НазначениеДаты = ЗначениеМодиифкатораДаты(Модификатор);
		Если НазначениеДаты<>"" тогда
			Результат.Вставить(НазначениеДаты,Дата_);
		КонецЕсли;
	Исключение
		ВызватьИсключение "Не удалось разобрать сегмент DTM "+ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;
КонецФункции        

Функция ОбработкаRFF(Узел,Модификатор)
	C506=ПолучитьПодчиненныйУзелПоИмени(Узел,"C506");  
	E1153=ПолучитьПодчиненныйУзелПоИмени(C506,"E1153");  
	Модификатор = ТекстУзла(E1153);
	E1154=ПолучитьПодчиненныйУзелПоИмени(C506,"E1154");  
	Возврат ТекстУзла(E1154);
КонецФункции

Функция ОбработкаSG1(Узел)
	Ссылка="";
	Дата_="";              
	МодификаторССылки="";
	МодификаторДаты="";
	Попытка
		RFF=ПолучитьПодчиненныйУзелПоИмени(Узел,"RFF");
		Ссылка=ОбработкаRFF(RFF,МодификаторСсылки);
		//ON = Номер заказа
		//PD   = Номер промо-акции 
		//CD = Номер контракта
		//YC=Внутренний код поставщика (Internal supplier number)
		МодификаторСсылки=СокрЛП(ВРЕГ(МодификаторСсылки));
		Если Ссылка<>"" тогда
			Если МодификаторСсылки="PD" тогда       
				Результат.Вставить("НомерПромоАкции",ССылка);
				Дата_=ОбработкаDTMГлав(Узел);
				НазначениеДаты = ЗначениеМодиифкатораДаты(МодификаторДаты);
				Если НазначениеДаты<>"" тогда
					Результат.Вставить(НазначениеДаты,Дата_);
				КонецЕсли;
			ИначеЕсли МодификаторСсылки="CD" тогда  
				Результат.Вставить("НомерСоглашения",ССылка);
				Дата_=ОбработкаDTMГлав(Узел);
				НазначениеДаты = ЗначениеМодиифкатораДаты(МодификаторДаты);
			ИначеЕсли МодификаторСсылки="YC" тогда  
				Результат.Вставить("ВнутреннийКодПоставщика",ССылка);
				Дата_=ОбработкаDTMГлав(Узел);
				НазначениеДаты = ЗначениеМодиифкатораДаты(МодификаторДаты);
				Если НазначениеДаты<>"" тогда
					Результат.Вставить(НазначениеДаты,Дата_);
				КонецЕсли;
			ИначеЕсли МодификаторСсылки="ON" тогда  
				Результат.Вставить("НомерЗаказа",ССылка);
				Дата_=ОбработкаDTMГлав(Узел);
				НазначениеДаты = ЗначениеМодиифкатораДаты(МодификаторДаты);
				Если НазначениеДаты<>"" тогда
					Результат.Вставить(НазначениеДаты,Дата_);
				КонецЕсли;
			КонецЕсли;                                             
		КонецЕсли;
		
	Исключение
		ВызватьИсключение "Не получилось разобрать сегмент SG1 "+ОписаниеОшибки();	
	КонецПопытки;
	Возврат 0;	
КонецФункции  

Функция ОбработкаSG2(Узел)
	Попытка
		NAD=ПолучитьПодчиненныйУзелПоИмени(Узел,"NAD");  
		E3035=ПолучитьПодчиненныйУзелПоИмени(NAD,"E3035");	
		МодификаторСтороны=ВРЕГ(Сокрлп(ТекстУзла(E3035)));
		C082=ПолучитьПодчиненныйУзелПоИмени(NAD,"C082");
		E3039=ПолучитьПодчиненныйУзелПоИмени(C082,"E3039");
		GLNСтороны=ТекстУзла(E3039);
		
		СписокSG3= ПолучСписокПотомковЭлементаПоИмени_DOM(Узел,"SG3");
		ДопполнительныйИдентификатор="";
		Для к=0 по ДлинаСписка_DOM(СписокSG3)-1 Цикл
			SG3=ЭлементСписка_DOM(СписокSG3,к);
			МодификаторSG3="";
			ЗначSG3=ОбработкаRFF(SG3,МодификаторSG3);
			Если Врег(СокрЛП(МодификаторSG3))="YC1" тогда
				ДопполнительныйИдентификатор=ЗначSG3;
				Прервать;
			Конецесли;		
		КонецЦикла;			
		Если МодификаторСтороны="BY" тогда
			Результат.Вставить("GLNПокупателя",GLNСтороны);
			Если ДопполнительныйИдентификатор<>"" тогда
				Результат.Вставить("ДопИДПокупателя",ДопполнительныйИдентификатор);
			КонецЕсли;
		ИначеЕсли МодификаторСтороны="DP" тогда
			Результат.Вставить("GLNМестаДоставки",GLNСтороны);
			Если ДопполнительныйИдентификатор<>"" тогда
				Результат.Вставить("ДопИДМестаДоставки",ДопполнительныйИдентификатор);
			КонецЕсли;
		ИначеЕсли МодификаторСтороны="IV" тогда
			Результат.Вставить("GLNКомуВыставленСчет",GLNСтороны);
			Если ДопполнительныйИдентификатор<>"" тогда
				Результат.Вставить("ДопИДКомувыставленСчет",ДопполнительныйИдентификатор);
			КонецЕсли;
		ИначеЕсли МодификаторСтороны="PE" тогда
			Результат.Вставить("GLNПлательщика",GLNСтороны);
			Если ДопполнительныйИдентификатор<>"" тогда
				Результат.Вставить("ДопИДПлательщика",ДопполнительныйИдентификатор);
			КонецЕсли;
		ИначеЕсли МодификаторСтороны="SU" тогда
			Результат.Вставить("GLNПоставщика",GLNСтороны);	
			Если ДопполнительныйИдентификатор<>"" тогда
				Результат.Вставить("ДопИДПоставщика",ДопполнительныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ВызватьИсключение "Не удалось разобрать сегмент SG2";
	КонецПопытки;
	Возврат 0;
КонецФункции

Функция ОбработкаLIN(Узел,НомерПозиции=0)
	Попытка
		E1082=ПолучитьПодчиненныйУзелПоИмени(Узел,"E1082");
		НомерПозиции=Число(ТекстУзла(E1082));
		C212=ПолучитьПодчиненныйУзелПоИмени(Узел,"C212");
		E7140=ПолучитьПодчиненныйУзелПоИмени(C212,"E7140");
		GTIN=ТекстУзла(E7140);
		Возврат GTIN; 
	Исключение
		ВызватьИсключение "Не удалось разобрать сегмент LIN "+ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;
КонецФункции

Функция ОбработкаPIA(Узел,МодификаторСтороны)
	Попытка
		C212=ПолучитьПодчиненныйУзелПоИмени(Узел,"C212");
		E7140=ПолучитьПодчиненныйУзелПоИмени(C212,"E7140");
		Идентификатор=ТекстУзла(E7140);
		E7143=ПолучитьПодчиненныйУзелПоИмени(C212,"E7143");
		МодификаторСтороны=ТекстУзла(E7143);
		Возврат Идентификатор; 
	Исключение
		ВызватьИсключение "Не удалось разобрать сегент PIA "+ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;
КонецФункции

Функция ОбработкаIMD(Узел)
	Попытка
		C273=ПолучитьПодчиненныйУзелПоИмени(Узел,"C273");
		E7008=ПолучитьПодчиненныйУзелПоИмени(C273,"E7008");
		Идентификатор=ТекстУзла(E7008);
		Возврат Идентификатор; 
	Исключение
		ВызватьИсключение "Не удалось разобрать сегент PIA "+ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;
КонецФУнкции

Функция ОбработкаQTY(Узел,Модификатор,ЕдиницаИзмерения="")
	Попытка
		C186=ПолучитьПодчиненныйУзелПоИмени(Узел,"C186");
		E6063=ПолучитьПодчиненныйУзелПоИмени(C186,"E6063");
		Модификатор=СокрЛП(ТекстУзла(E6063));
		E6060=ПолучитьПодчиненныйУзелПоИмени(C186,"E6060");
		Количество=Число(СтрЗаменить(СокрЛП(ТекстУзла(E6060)),",","."));
		E6411=ПолучитьПодчиненныйУзелПоИмени(C186,"E6411");
		Если Не ПустойУзел(E6411) тогда
			ЕдиницаИзмерения = ТекстУзла(E6411);	
		КонецЕсли;		
		Возврат Количество; 
	Исключение
		ВызватьИсключение "Не удалось разобрать сегент QTY "+ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;
	
КонецФункции

Функция ОбработкаMOA(Узел,Модификатор)
	Попытка
		C516=ПолучитьПодчиненныйУзелПоИмени(Узел,"C516");
		E5025=ПолучитьПодчиненныйУзелПоИмени(C516,"E5025");
		Модификатор=СокрЛП(ТекстУзла(E5025));
		E5004=ПолучитьПодчиненныйУзелПоИмени(C516,"E5004");
		Сумма=Число(СтрЗаменить(СокрЛП(ТекстУзла(E5004)),",","."));
		Возврат Сумма; 
	Исключение
		ВызватьИсключение "Не удалось разобрать сегент MOA "+ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;	
КонецФункции  

Функция ОбработкаSG32(Узел,Модификатор)
	Попытка
		PRI=ПолучитьПодчиненныйУзелПоИмени(Узел,"PRI"); 
		C509=ПолучитьПодчиненныйУзелПоИмени(Узел,"C509");
		E5125=ПолучитьПодчиненныйУзелПоИмени(Узел,"E5125");
		Модификатор=Врег(СокрЛП(ТекстУзла(E5125)));
		E5118=ПолучитьПодчиненныйУзелПоИмени(Узел,"E5118");
		Цена=Число(ТекстУзла(E5118));
		возврат Цена;
		
	Исключение
		ВызватьИсключение "Не удалось разобрать сегмет SG32 " + ОписаниеОшибки();
	КонецПопытки;
	Возврат 0;
КонецФункции

Функция ОбработкаSG17(Узел,ТЗ)
	Попытка 
		GTIN="";
		НомерПозиции=0;
		КодПокупателя="";
		КодПоставщика="";
		НаименованиеТовара="";
		Количество=0;
		ЦенаБезНДС=0;
		ЦенаСНДС=0;
		СуммаНДС=0;
		СуммаБезНДС=0;
		Цена=0;
		Сумма=0;
		ЕдиницаИзмерения="";
		Строка=Неопределено;
		СписокЭлементов = ПолучСписокПотомковЭлемента_DOM(Узел);
		Для к=0 по ДлинаСписка_DOM(СписокЭлементов)-1 цикл
			ПодЭлемент=ЭлементСписка_DOM(СписокЭлементов,к);
			Если ПолучТипЭлемента_DOM(ПодЭлемент)<>1 тогда
				Продолжить;
			КонецЕсли;  
			ИмяУзла = СокрЛП(ВРЕГ(ПолучИмяЭлемента_DOM(ПодЭлемент)));     
			рез=0;
			Если ИмяУзла="LIN" тогда    
				НомерПозиции=0;
				GTIN=ОбработкаLIN(ПодЭлемент,НомерПозиции);
				Строка = Тз.Добавить();
			ИначеЕсли ИмяУзла="PIA" тогда
				Модификатор="";
				Идентификатор=ОбработкаPIA(ПодЭлемент,Модификатор);
				Модификатор=СокрЛП(ВРЕГ(Модификатор));
				Если Модификатор="IN" тогда
					КодПокупателя=Идентификатор;
				ИначеЕсли Модификатор="SA" тогда
					КодПоставщика=Идентификатор;
				Иначе
					ВызватьИсключение "Неизвестный модификатор доп.идентификации товара "+Модификатор;
				КонецЕсли;
			ИначеЕсли ИмяУзла="IMD" тогда
				НаименованиеТовара=ОбработкаIMD(ПодЭлемент);
			ИначеЕсли ИмяУзла="QTY" тогда
				Модификатор="";
				ЕдиницаИзмерения="";
				Кол=ОбработкаQTY(ПодЭлемент,Модификатор,ЕдиницаИзмерения);
				Если Модификатор="21" тогда
					ЗаказКоличество=Кол;
					
				ИначеЕсли  Модификатор="12" тогда
					ПоставлКоличество=Кол;
					
					//ВызватьИсключение "Неизвестный модификатор количества "+Модификатор;
				КонецЕсли;
			ИначеЕсли ИмяУзла="ALI" тогда
				Попытка
					E3239=ПолучитьПодчиненныйУзелПоИмени(Узел,"E3239"); 
					СтранаПроисхождения=Врег(СокрЛП(ТекстУзла(E3239)));
					
				Исключение
					ВызватьИсключение "Не удалось разобрать сегмет E3239 " + ОписаниеОшибки();
				КонецПопытки;
				
			ИначеЕсли ИмяУзла="FTX" тогда
				СтавкаНДС=ОБработкаFTX(Узел);	 
			ИначеЕсли ИмяУзла="MOA" тогда
				Модификатор="";
				Значение = ОбработкаMOA(ПодЭлемент,Модификатор);
				Если Модификатор="79" тогда
					СуммаНДС = Значение;
				ИначеЕсли Модификатор="146" тогда
					ЦенаБезНДС=Значение;
				ИначеЕсли Модификатор="203" тогда
					СуммаБезНДС=Значение;
				КонецЕсли;
			ИначеЕсли ИмяУзла="SG32" тогда
				Модификатор="";
				Цена=ОбработкаSG32(ПодЭлемент,Модификатор);
				Если Модификатор="AAA" тогда
					ЦенаБезНДС=Цена;
				ИначеЕсли Модификатор="AAE" тогда
					ЦенаСНДС=Цена;
				Иначе
					ВызватьИсключение "Неизвестный модификатор цены "+Модификатор;
				КонецЕсли;
			КонецЕсли;                   
		КонецЦикла;
		Если Строка<>Неопределено тогда
			Если СуммаНДС>0 Тогда
				Сумма=СуммаНДС;
				Цена = ?(ПоставлКоличество=0,0,Сумма/ПоставлКоличество);
			ИначеЕсли СуммаБезНДС>0 Тогда
				Сумма=СуммаБезНДС+СуммаБезНДС*СтавкаНДС/100;	            
				Цена = ?(ПоставлКоличество=0,0,Сумма/ПоставлКоличество);
			ИначеЕсли ЦенаБезНДС>0 ТОгда
				СуммаБезНДС=ЦенаБезНДС*ПоставлКоличество;
				Сумма=СуммаБезНДС+СуммаБезНДС*СтавкаНДС/100;	
				Цена = ?(ПоставлКоличество=0,0,Сумма/ПоставлКоличество);
			Иначе
				// Определим цену.
				Цена = 0;
				Сумма = 0;
			КонецЕсли;
			Строка.GTIN=GTIN;
			Строка.ПорядковыйНомер = НомерПозиции;
			Строка.КодПокупателя = КодПокупателя;
			Строка.КодПоставщика = КодПоставщика;
			Строка.НаименованиеТовара =  НаименованиеТовара;
			Строка.ЗаказКоличество = ЗаказКоличество;
			Строка.ПоставлКоличество = ПоставлКоличество;
			Строка.Цена = Цена;                                  
			Строка.Сумма = Сумма;
			Строка.СтавкаНДС = СтавкаНДС;
			Строка.ЕдиницаИзмерения = ЕдиницаИзмерения;
		КонецЕсли;
	Исключение
		ВызватьИсключение "Не удалось разобрать сегмент sg28 "+ОписаниеОшибки();	
	Конецпопытки;
	Результат.Вставить("ТабличнаяЧасть",ТЗ);
	Возврат 0;
КонецФункции

Функция ОбработкаSG10(Узел,ТЗ)
	Попытка
		СписокЭлементов = ПолучСписокПотомковЭлемента_DOM(Узел);
		Для к=0 по ДлинаСписка_DOM(СписокЭлементов)-1 цикл
			ПодЭлемент=ЭлементСписка_DOM(СписокЭлементов,к);
			Если ПолучТипЭлемента_DOM(ПодЭлемент)<>1 тогда
				Продолжить;
			КонецЕсли;  
			ИмяУзла = СокрЛП(ВРЕГ(ПолучИмяЭлемента_DOM(ПодЭлемент)));     
			рез=0;
			Если ИмяУзла="SG17" тогда 
				Попытка
					ОбработкаSG17(ПодЭлемент,ТЗ);
				Исключение
					ВызватьИсключение "Ошибка обработки табличной части "+ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;		
	Исключение
		ВызватьИсключение "Не удалось собрать сегмент SG10 " + ОписаниеОшибки();
	КонецПопытки;
КонецФункции

Функция ОБработкаFTX(Узел)  
	C108 = ПолучитьПодчиненныйУзелПоИмени(Узел,"C108");
	Если ПустойУзел(C108)=0 тогда
		E4440=ПолучитьПодчиненныйУзелПоИмени(C108,"E4440");
		//Котлячкова++ 5,04,15 Наряд 000146776 от 02.04.2015 16:22:32
		Возврат Число(СтрЗаменить(СтрЗаменить(ТекстУзла(E4440),",","."),"%",""));
		//Котлячкова-- 5,04,15 Наряд 000146776 от 02.04.2015 16:22:32
	КонецЕсли;
	
	Возврат 0;
КонецФункции  

Функция ПроверкаРазбора()
	Для Каждого Элемент из Результат цикл
		Если ТипЗнч(Элемент.Значение)<> Тип("ТаблицаЗначений") тогда
			Сообщить(Элемент.Ключ+"="+Элемент.Значение);	
		КонецЕсли;		
	КонецЦикла;
	
	Элемент=Результат.ПолучитЬ("ТабличнаяЧасть");
	Элемент.ВыбратьСтроку();
	
КонецФункции

Функция ИнициализацияТЗ()
	Тз = Новый ТаблицаЗначений();
	Тз.Колонки.Добавить("ПорядковыйНомер",Новый ОписаниеТипов("Число")); 
	Тз.Колонки.Добавить("GTIN",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("КодПокупателя",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("КодПоставщика",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("НаименованиеТовара",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("ЗаказКоличество",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("ПоставлКоличество",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число")); 
	Тз.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число")); 
	Тз.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("Строка")); 
	
	Тз.Очистить();
	Возврат ТЗ;
КонецФункции


Функция ПолучитьЗначениеСтроки(ТЗ,Строка,ИмяКолонки)
	Колонка=ТЗ.Колонки.Найти(ИмяКолонки);
	Если Колонка=Неопределено тогда
		Возврат "";
	Иначе
		Индекс=ТЗ.Колонки.Индекс(Колонка);
		Возврат Строка[Индекс];
	КонецЕсли;
	Возврат "";
КонецФункции


Функция ПолучитьДанные(Данные)
	Возврат ПодготовленныеДанные.Получить(Данные);
КонецФункции

Функция ОбработатьСлужебноеСообщение(ИмяФайла) Экспорт
	Попытка
		Результат=Новый Соответствие();	
		Если Не ЗначениеЗаполнено(ИмяФайла) тогда
			Сообщить("Не определно имя файла!");
			Возврат Неопределено;
		КонецЕсли;
		xml=НовыйXMLДокумент_DOM();
		ЗагрузитьXML_DOM(xml,ИмяФайла);
		Корешок=xml.DocumentElement;
		ТипСообщения = СокрЛП(ВРЕГ(ПолучИмяЭлемента_DOM(Корешок))); 
		Результат.Вставить("СлужебныйТип",ТипСообщения);
		СписокЭлементов = ПолучСписокПотомковЭлемента_DOM(Корешок);
		Для к=0 по ДлинаСписка_DOM(СписокЭлементов)-1 цикл
			ПодЭлемент=ЭлементСписка_DOM(СписокЭлементов,к);
			Если ПолучТипЭлемента_DOM(ПодЭлемент)<>1 тогда
				Продолжить;
			КонецЕсли;  
			ИмяУзла = СокрЛП(ПолучИмяЭлемента_DOM(ПодЭлемент));     
			Результат.Вставить(ИмяУзла,ТекстУзла(ПодЭлемент));
			рез=0;
		КонецЦикла;	
		Возврат Результат;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции	
