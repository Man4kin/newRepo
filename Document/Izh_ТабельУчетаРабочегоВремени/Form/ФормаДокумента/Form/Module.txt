////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаСервере
//  Соответствие символа обозначения времени и ссылки на классификатор
//  использования рабочего времени
Перем мБуквенныеОбозначения;

&НаСервере
// Массив строк "Первый", "Второй", "Третий" - приставки элементов табличной части документа
Перем МассивПриставок;

&НаКлиенте
// Массив строк "Первый", "Второй", "Третий" - приставки элементов табличной части документа
Перем МассивПриставок;




//////////////////////////////////////////////////////////////////////////////////
//		ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ

&НаКлиенте
Функция ПолучитьВремяВМиллисекундах()
	
	Scr = Новый COMОбъект("MSScriptControl.ScriptControl");
	Scr.Language = "javascript";
	Возврат Scr.Eval("new Date().getTime()");
	
КонецФункции

&НаСервере
Функция НормироватьТекст(Текст, Результат, НеполныйФормат = Истина) Экспорт
	
	Результат = "";
	Если ПустаяСтрока(Текст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	мБуквенныеОбозначения = ПолучитьБуквенныеОбозначения();
	
	Разделители = Новый Массив;
	Разделители.Добавить(Символы.ПС);
	Разделители.Добавить(" ");
	Разделители.Добавить("-");
	Разделители.Добавить(";");
	Разделители.Добавить("/");
	Разделители.Добавить(",");
	Разделители.Добавить(":");
		
	РазделительВГруппе = " ";
	РазделительГрупп = Символы.ПС;
	
	Для Каждого Разделитель из Разделители Цикл
		ПодСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Разделитель);
		Если ПодСтроки.Количество() > 1 Тогда
			БылКод = Ложь;
			БылСимволСВозможностьюВводаБезВремени = Ложь;
			Для Каждого ПодСтрока Из Подстроки Цикл
				Код = мБуквенныеОбозначения[СокрЛП(ВРег(ПодСтрока))];
				АнализируемаяСтрока = СпецСокрЛП(ПодСтрока, Разделители);
				Если Код <> НеОпределено Тогда
					Если БылКод Тогда
						Возврат Ложь;
					КонецЕсли;
					
					Если Код = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
						Результат = Результат + ВРег(ПодСтрока) + РазделительГрупп;
						БылКод = Ложь;
						БылСимволСВозможностьюВводаБезВремени = Истина;
					Иначе
						Результат = Результат + ВРег(ПодСтрока);
						БылКод = Истина;	
						БылСимволСВозможностьюВводаБезВремени = Ложь;
					КонецЕсли;
					
				ИначеЕсли ЭтоЧисло(АнализируемаяСтрока) И (БылКод ИЛИ БылСимволСВозможностьюВводаБезВремени) Тогда
					
					Результат = Результат + РазделительВГруппе + АнализируемаяСтрока + РазделительГрупп;
					БылКод = Ложь;
					БылСимволСВозможностьюВводаБезВремени = Ложь;
				Иначе
					ПодРезультат = "";
					Если НормироватьТекст(ПодСтрока, ПодРезультат, Ложь) Тогда
						Результат = Результат + ПодРезультат;
					Иначе
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПустаяСтрока(Результат) Тогда
		Если НеполныйФормат Тогда
			Код = мБуквенныеОбозначения[СокрЛП(ВРег(Текст))];
			Если Код = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
				Результат = СокрЛП(ВРег(Текст)) + РазделительГрупп;
				НормаЧасов = 0;
				Возврат Истина;
			ИначеЕсли Код <> НеОпределено Тогда
				Результат = СокрЛП(ВРег(Текст)) + РазделительВГруппе + Строка(НормаЧасов) + РазделительГрупп;
				Возврат Истина;
			ИначеЕсли ЭтоЧисло(СпецСокрЛП(Текст, Разделители)) Тогда
				Результат = "Я" + РазделительВГруппе + СпецСокрЛП(Текст, Разделители) + РазделительГрупп;
				
				Возврат Истина;
			ИначеЕсли СокрЛП(Текст) = "0" Тогда
				
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция СпецСокрЛП(Строка, Разделители)
	НоваяСтрока = Строка;
	// удалим лишние символы слева
	Пока Истина Цикл
		Символ = Лев(НоваяСтрока, 1);
		ЭтоРазделитель = Ложь;
		Для Каждого Разделитель Из Разделители Цикл
			Если Символ = Разделитель Тогда
				ЭтоРазделитель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоРазделитель Тогда
			НоваяСтрока = Сред(НоваяСтрока, 2);
			Если ПустаяСтрока(НоваяСтрока) Тогда
				Прервать;
			КонецЕсли;    
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;        
	// удалим лишние символы справа
	Пока Истина Цикл
		Символ = Прав(НоваяСтрока, 1);
		ЭтоРазделитель = Ложь;
		Для Каждого Разделитель Из Разделители Цикл
			Если Символ = Разделитель Тогда
				ЭтоРазделитель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоРазделитель Тогда
			НоваяСтрока = Лев(НоваяСтрока, СтрДлина(НоваяСтрока) - 1);
			Если ПустаяСтрока(НоваяСтрока) Тогда
				Прервать;
			КонецЕсли;    
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НоваяСтрока;
КонецФункции

&НаСервере
Функция ЭтоЧисло(Строка)
	Попытка
		Число = Число(Строка);
		Если Число = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьБуквенныеОбозначения()
	
	БуквенныеОбозначения = Новый Соответствие;
	Запрос = Новый Запрос("Выбрать Ссылка, БуквенныйКод Из Справочник.Izh_КлассификаторИспользованияРабочегоВремени");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		БуквенныеОбозначения[ВРег(Выборка.БуквенныйКод)] = Выборка.Ссылка;
	КонецЦикла;
	Возврат БуквенныеОбозначения;
	
КонецФункции

&НаСервере
Функция ПолучитьБуквенныеОбозначенияМассивом()
	
	БуквенныеОбозначения = Новый Массив;
	Запрос = Новый Запрос("Выбрать Ссылка, БуквенныйКод Из Справочник.Izh_КлассификаторИспользованияРабочегоВремени");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.БуквенныйКод) Тогда
			БуквенныеОбозначения.Добавить(ВРег(Выборка.БуквенныйКод));		
		КонецЕсли;
	КонецЦикла;
	Возврат БуквенныеОбозначения;
	
КонецФункции

&НаСервере
Функция ПолучитьБуквенноеОбозначениеВидаВремени(ВидВремени)
	
	БуквенноеОбозначение = "";
	
	Запрос = Новый Запрос("Выбрать Классификатор.Ссылка, Классификатор.БуквенныйКод Из Справочник.Izh_КлассификаторИспользованияРабочегоВремени КАК Классификатор ГДЕ Классификатор.Ссылка = &Ссылка");	
	Запрос.УстановитьПараметр("Ссылка", ВидВремени);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		БуквенноеОбозначение = Выборка.БуквенныйКод;
	КонецЕсли;
	
	Возврат БуквенноеОбозначение;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивПриставок()
	
	МассивПриставок = Новый Массив(4);
	МассивПриставок[0] = "Первый";
	МассивПриставок[1] = "Второй";
	МассивПриставок[2] = "Третий";
	МассивПриставок[3] = "Четвертый";
	
	Возврат МассивПриставок;
	
КонецФункции

&НаСервере
// По тексту из ячейки (текст) возвращает соответствие: ВидВремени (классификатор) - Количество часов
//
Функция ПолучитьВидВремениИКоличествоЧасов(Текст , Результат) Экспорт
	
	Результат = Новый Соответствие;
	Если ПустаяСтрока(Текст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	мБуквенныеОбозначения = ПолучитьБуквенныеОбозначения();
	
	РазделительВГруппе = " ";
	РазделительГрупп = Символы.ПС;
	
	ПодСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, РазделительГрупп);
	Для ИндексМассива = 0 По ПодСтроки.Количество() - 1 Цикл
		ВидВремениИКоличество = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПодСтроки[ИндексМассива], РазделительВГруппе);
		Если ВидВремениИКоличество.Количество() = 2 Тогда
			Код = мБуквенныеОбозначения[ВидВремениИКоличество[0]];
			Количество = Число(ВидВремениИКоличество[1]);
			Результат.Вставить(Код, Количество);
		ИначеЕсли ВидВремениИКоличество.Количество() = 1  Тогда
			Если мБуквенныеОбозначения[ВидВремениИКоличество[0]] = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.ВыходныеДни 
				ИЛИ НЕ мБуквенныеОбозначения[ВидВремениИКоличество[0]].РабочееВремя Тогда
				Код = мБуквенныеОбозначения[ВидВремениИКоличество[0]];
				Количество = 0;
				Результат.Вставить(Код, Количество);			
			Иначе
				Код = мБуквенныеОбозначения[ВидВремениИКоличество[0]];
				Количество = 8;
				Результат.Вставить(Код, Количество);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецФункции 

//////////////////////////////////////////////////////////////////////////////////
//		ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	СоответствиеРасчетаИтоговДней = Новый Соответствие;
	СоответствиеРасчетаИтоговЧасов = Новый Соответствие;	

	мПустаяСсылкаКлассификатора = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();

	СоответствиеДляПоискаСотрудника = Новый Структура;

	СписокИменЯчеекДляОпределенияСтроки = Новый СписокЗначений;
	СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени1");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени2");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени3");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени4");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени5");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени6");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней1");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней2");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней3");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней4");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней5");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней6");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов1");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов2");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов3");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов4");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов5");
	СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов6");

	// Заполнение соответствия номер дня недели и названия дня недели.
	СоответствиеСотрудникГрафик = Новый Соответствие;
	СоответствиеГрафикНорма = Новый Соответствие;

	КлассификаторРабота = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.Работа;
	КлассификаторРаботаВечерниеЧасы = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
	КлассификаторРаботаНочныеЧасы = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
	КлассификаторВыходныеДни = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.ВыходныеДни;
	
	МассивОбозначений = ПолучитьБуквенныеОбозначенияМассивом();
	Для Инд = 1 По 31 Цикл
		Элементы["ОтработанноеВремяДень" + СокрЛП(Инд)].СписокВыбора.ЗагрузитьЗначения(МассивОбозначений);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Период.ДатаНачала	= Объект.ДатаНачалаПериода;
	Период.ДатаОкончания= Объект.ДатаОкончанияПериода;
	
	УстановитьВидимостьКолонокОтработанногоВремени(Объект.ДатаНачалаПериода, Объект.ДатаОкончанияПериода);
	ОбновитьОбщиеИтоги();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//		ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Функция ПолучитьИтоговыеЗначенияПоСтроке(ТекСтрокаОтработанноеВремя)
	
	Результат = "";
	СоответствиеВремени = Новый Соответствие;		
	
	МассивПриставок = ПолучитьМассивПриставок();	
	
	НачДень = День(Объект.ДатаНачалаПериода);
	КонДень = День(Объект.ДатаОкончанияПериода);
	
	Для НомерДня = НачДень По КонДень Цикл						
		Для ИндексМассиваПриставок = 0 По 3 Цикл
			
			ВидВремени = ТекСтрокаОтработанноеВремя[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня];
			
			Если НЕ ЗначениеЗаполнено(ВидВремени) Тогда
				Продолжить;
			КонецЕсли;
			
			КодВидаВремени	= ПолучитьБуквенноеОбозначениеВидаВремени(ВидВремени);
			КолЧасов		= ТекСтрокаОтработанноеВремя[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня];			
			
			//Для видов времени без часов (напр. выходные) нет смысла считать итоги
			Если КолЧасов = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекЭлементСоответствия = СоответствиеВремени.Получить(КодВидаВремени);
			Если ТекЭлементСоответствия = Неопределено Тогда
				СоответствиеВремени.Вставить(КодВидаВремени, КолЧасов);
			Иначе
				СоответствиеВремени[КодВидаВремени] = СоответствиеВремени[КодВидаВремени] + КолЧасов;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Элемент Из СоответствиеВремени Цикл
		Результат = Результат + Элемент.Ключ+ " " + Элемент.Значение + Символы.ПС;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоРабочийВидВремени(Знач Текст)
	
	Результат = Ложь;	
	ТекстВидаВремени = ВРег(СокрЛП(Текст));
	
	Запрос = Новый Запрос("Выбрать Классификатор.Ссылка, Классификатор.Ссылка.РабочееВремя КАК РабочееВремя Из Справочник.Izh_КлассификаторИспользованияРабочегоВремени КАК Классификатор ГДЕ Классификатор.БуквенныйКод = &БуквенныйКод");
	Запрос.УстановитьПараметр("БуквенныйКод", ТекстВидаВремени);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.РабочееВремя;
	КонецЕсли;		
	
	Возврат Результат;	
	
КонецФункции
	
&НаСервере
Функция ОбработкаВводаДанныхВЯчейкуНаСервере(НомерСтроки, Текст, СтандартнаяОбработка, НомерДня)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Результат = "";		
	ТекущаяСтрока = ДокОбъект.ОтработанноеВремя[НомерСтроки];
	
	Если НормироватьТекст(Текст, Результат,) Тогда		
		ТекущаяСтрока["День" + СокрЛП(НомерДня)] = Результат;
		Текст = Результат;
	Иначе
		Значение = Новый СписокЗначений;
		СтандартнаяОбработка = Ложь;
		Текст = "";
		ТекущаяСтрока["День" + СокрЛП(НомерДня)] = "";
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексМассиваПриставок = 0 По 3 Цикл
		ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();		
		ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = 0;
	КонецЦикла;
	
	СписокВремени = "";
	ИндексМассиваПриставок = 0;
	ПередаваемоеЗначениеЯчейки = Результат;
	ПередаваемоеЗначениеЯчейки = Лев(ПередаваемоеЗначениеЯчейки, СтрДлина(ПередаваемоеЗначениеЯчейки)-1);
	ПолучитьВидВремениИКоличествоЧасов(ПередаваемоеЗначениеЯчейки, СписокВремени);
	Для Каждого ЭлементСписка Из СписокВремени Цикл
		Если ИндексМассиваПриставок > 3 Тогда
			Сообщить("В ячейку можно записать не больше чем 4 вида времени");
			Прервать;
		Иначе
			ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = ЭлементСписка.Ключ;
			ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = Число(ЭлементСписка.Значение);
			ИндексМассиваПриставок = ИндексМассиваПриставок + 1;			
		КонецЕсли;
	КонецЦикла;
	
	//ТекущаяСтрока.Итого = ПолучитьИтоговыеЗначенияПоСтроке(ТекущаяСтрока);	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОбщиеИтоги()
	
	//Элементы.ОтработанноеВремяИтого.ТекстПодвала = ОбновитьОбщиеИтогиНаСервере(Объект.ДатаНачалаПериода, Объект.ДатаОкончанияПериода);	
	Элементы.ОтработанноеВремяИтого.ТекстПодвала = ОбновитьОбщиеИтогиНаКлиенте(Объект.ДатаНачалаПериода, Объект.ДатаОкончанияПериода);	
	
КонецПроцедуры

&НаСервере
Функция ОбновитьОбщиеИтогиНаСервере(НачДеньДата, КонДеньДата)
	
	Результат = "";	
	ИтоговоеСоответствие = Новый Соответствие;
	
	НачДень = День(НачДеньДата);
	КонДень = День(КонДеньДата);
		
	Для Каждого СтрокаТабЧасти Из Объект.ОтработанноеВремя Цикл		
		Для ИндДня = НачДень По КонДень Цикл													
			Для ИндексМассиваПриставок = 0 По 3 Цикл
				ВидВремени = СтрокаТабЧасти[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+ИндДня];
			
				Если НЕ ЗначениеЗаполнено(ВидВремени) Тогда
					Продолжить;
				КонецЕсли;
				
				КодВидаВремени	= ПолучитьБуквенноеОбозначениеВидаВремени(ВидВремени);
				КолЧасов		= СтрокаТабЧасти[МассивПриставок[ИндексМассиваПриставок]+"Часов"+ИндДня];			
				
				//Для видов времени без часов (напр. выходные) нет смысла считать итоги
				Если КолЧасов = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ИтоговоеСоответствие.Получить(КодВидаВремени) = Неопределено Тогда
					ИтоговоеСоответствие.Вставить(КодВидаВремени, КолЧасов);
				Иначе
					ИтоговоеСоответствие[КодВидаВремени] = ИтоговоеСоответствие[КодВидаВремени] + КолЧасов;
				КонецЕсли;
			КонецЦикла;										
		КонецЦикла;				
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ИтоговоеСоответствие Цикл
		Результат = Результат + КлючЗначение.Ключ + " " + КлючЗначение.Значение + Символы.ПС;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбновитьОбщиеИтогиНаКлиенте(НачДеньДата, КонДеньДата)
		
	Результат = "";	
	//ДокОбъект = Документы.Izh_ТабельУчетаРабочегоВремени.НайтиПоНомеру().ПолучитьОбъект();	
	ИтоговоеСоответствие = Новый Соответствие;
	
	НачДень = День(НачДеньДата);
	КонДень = День(КонДеньДата);
	
	Для ИндДня = НачДень По КонДень Цикл
		
		СоотвДня = Новый Соответствие;		
		Для Каждого СтрокаТабЧасти Из Объект.ОтработанноеВремя Цикл		
		
			Для ИндексМассиваПриставок = 0 По 3 Цикл
				ВидВремени = СтрокаТабЧасти[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+ИндДня];
			
				Если НЕ ЗначениеЗаполнено(ВидВремени) Тогда
					Продолжить;
				КонецЕсли;
				
				КодВидаВремени	= ПолучитьБуквенноеОбозначениеВидаВремени(ВидВремени);
				КолЧасов		= СтрокаТабЧасти[МассивПриставок[ИндексМассиваПриставок]+"Часов"+ИндДня];			
				
				//Для видов времени без часов (напр. выходные) нет смысла считать итоги
				Если КолЧасов = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ИтоговоеСоответствие.Получить(КодВидаВремени) = Неопределено Тогда
					ИтоговоеСоответствие.Вставить(КодВидаВремени, КолЧасов);					
				Иначе
					ИтоговоеСоответствие[КодВидаВремени] = ИтоговоеСоответствие[КодВидаВремени] + КолЧасов;					
				КонецЕсли;
				
				Если СоотвДня.Получить(КодВидаВремени) = Неопределено Тогда
					СоотвДня.Вставить(КодВидаВремени, КолЧасов);
				Иначе
					СоотвДня[КодВидаВремени] = СоотвДня[КодВидаВремени] + КолЧасов;
				КонецЕсли;				
			КонецЦикла;			
		КонецЦикла;				
		
		РезультатДня = "";
		Для Каждого КлючЗначение Из СоотвДня Цикл
			РезультатДня = РезультатДня + КлючЗначение.Ключ + " " + КлючЗначение.Значение + Символы.ПС;	
		КонецЦикла;
		Элементы["ОтработанноеВремяДень" + СокрЛП(ИндДня)].ТекстПодвала = РезультатДня;
		
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ИтоговоеСоответствие Цикл
		Результат = Результат + КлючЗначение.Ключ + " " + КлючЗначение.Значение + Символы.ПС;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбработкаВводаДанныхВЯчейку(СтрокаТабЧасти, Текст, СтандартнаяОбработка=Истина, НомерДня, ВыбраноИзСписка = Ложь)
			
	Результат = "";			
		
	Если ВыбраноИзСписка И ЭтоРабочийВидВремени(Текст) Тогда
		Текст = СокрЛП(Текст) + " 8"; //+ норма времени
	КонецЕсли;
	
	МассивПриставок = ПолучитьМассивПриставок();	
	
	Если НормироватьТекст(Текст, Результат,) Тогда		
		СтрокаТабЧасти["День" + СокрЛП(НомерДня)] = Результат;
		Текст = Результат;
	Иначе
		Значение = Новый СписокЗначений;
		СтандартнаяОбработка = Ложь;
		Текст = "";
		СтрокаТабЧасти["День" + СокрЛП(НомерДня)] = "";
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексМассиваПриставок = 0 По 3 Цикл
		СтрокаТабЧасти[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = ПредопределенноеЗначение("Справочник.Izh_КлассификаторИспользованияРабочегоВремени.ПустаяСсылка");
		СтрокаТабЧасти[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = 0;
	КонецЦикла;
	
	СписокВремени = "";
	ИндексМассиваПриставок = 0;
	ПередаваемоеЗначениеЯчейки = Результат;
	ПередаваемоеЗначениеЯчейки = Лев(ПередаваемоеЗначениеЯчейки, СтрДлина(ПередаваемоеЗначениеЯчейки)-1);
	ПолучитьВидВремениИКоличествоЧасов(ПередаваемоеЗначениеЯчейки, СписокВремени);
	Для Каждого ЭлементСписка Из СписокВремени Цикл
		Если ИндексМассиваПриставок > 3 Тогда
			Сообщить("В ячейку можно записать не больше чем 4 вида времени");
			Прервать;
		Иначе
			СтрокаТабЧасти[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = ЭлементСписка.Ключ;
			СтрокаТабЧасти[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = Число(ЭлементСписка.Значение);
			ИндексМассиваПриставок = ИндексМассиваПриставок + 1;			
		КонецЕсли;
	КонецЦикла;

	//Отключить для ускорения ввода
	//СтрокаТабЧасти.Итого = ПолучитьИтоговыеЗначенияПоСтроке(СтрокаТабЧасти);			
	//ОбновитьОбщиеИтоги();	
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОтработанноеВремяДеньОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ИмяЯчейки	= Лев(Элемент.Имя, 21);
	НомерДня	= Сред(Элемент.Имя, 22);
	ТекстЯчейки	= Текст;
	
	ДатаПриема		= Элементы.ОтработанноеВремя.ТекущиеДанные.ДатаПриема;
	ДатаУвольнения	= Элементы.ОтработанноеВремя.ТекущиеДанные.ДатаУвольнения;
	РедДата			= НачалоМесяца(Объект.ДатаНачалаПериода) + (Число(НомерДня-1)*86400);
		
	Если (ЗначениеЗаполнено(ДатаПриема) 
			И РедДата < ДатаПриема)
		ИЛИ (ЗначениеЗаполнено(ДатаУвольнения) 
			И РедДата > ДатаУвольнения) Тогда
			
		Сообщить("Редактируемый день выходит за границы периода работы сотрудника.");
		Элементы.ОтработанноеВремя.ЗакончитьРедактированиеСтроки(Истина);
	Иначе
		//ОбработкаВводаДанныхВЯчейкуНаСервере(Элементы.ОтработанноеВремя.ТекущаяСтрока, ТекстЯчейки, СтандартнаяОбработка, НомерДня);	
		ОбработкаВводаДанныхВЯчейку(Элементы.ОтработанноеВремя.ТекущиеДанные, ТекстЯчейки, СтандартнаяОбработка, НомерДня);
		Элементы.ОтработанноеВремя.ЗакончитьРедактированиеСтроки(Ложь);				
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяДеньПриИзменении(Элемент)
	
	ИмяЯчейки	= Лев(Элемент.Имя, 21);
	НомерДня	= Сред(Элемент.Имя, 22);
	ТекстЯчейки	= Элемент.ТекстРедактирования;
	
	ДатаПриема		= Элементы.ОтработанноеВремя.ТекущиеДанные.ДатаПриема;
	ДатаУвольнения	= Элементы.ОтработанноеВремя.ТекущиеДанные.ДатаУвольнения;
	РедДата			= НачалоМесяца(Объект.ДатаНачалаПериода) + (Число(НомерДня-1)*86400);
		
	Если (ЗначениеЗаполнено(ДатаПриема) 
			И РедДата < ДатаПриема)
		ИЛИ (ЗначениеЗаполнено(ДатаУвольнения) 
			И РедДата > ДатаУвольнения) Тогда
			
		Сообщить("Редактируемый день выходит за границы периода работы сотрудника.");
		Элементы.ОтработанноеВремя.ТекущиеДанные["День" + СокрЛП(НомерДня)] = "";
		Элементы.ОтработанноеВремя.ЗакончитьРедактированиеСтроки(Истина);
	Иначе
		//ОбработкаВводаДанныхВЯчейкуНаСервере(Элементы.ОтработанноеВремя.ТекущаяСтрока, ТекстЯчейки, СтандартнаяОбработка, НомерДня);		
		ОбработкаВводаДанныхВЯчейку(Элементы.ОтработанноеВремя.ТекущиеДанные, ТекстЯчейки, Истина, НомерДня, Истина);
		Элементы.ОтработанноеВремя.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;	    	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяВидЗанятостиПриИзменении(Элемент)
	
	ДлинаИмени	= СтрДлина("ОтработанноеВремяВидЗанятостиДень");
	ИмяЯчейки	= Лев(Элемент.Имя, ДлинаИмени);
	НомерДня	= Сред(Элемент.Имя, ДлинаИмени + 1);
		
	ТекСтрока = Элементы.ОтработанноеВремя.ТекущиеДанные;
	Если ТекСтрока["ВидЗанятостиДень" + НомерДня] = ПредопределенноеЗначение("Перечисление.Izh_ВидыЗанятостиНаТекущемМестеРаботы.ОсновноеМестоРаботы") 
		ИЛИ ТекСтрока["ВидЗанятостиДень" + НомерДня] = ПредопределенноеЗначение("Перечисление.Izh_ВидыЗанятостиНаТекущемМестеРаботы.БольничныйОтпуск") Тогда		
		
		ТекСтрока["ДолжностьДень" + НомерДня] = Неопределено;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяДолжностьПриИзменении(Элемент)
	
	ДлинаИмени	= СтрДлина("ОтработанноеВремяДолжностьДень");
	ИмяЯчейки	= Лев(Элемент.Имя, ДлинаИмени);
	НомерДня	= Сред(Элемент.Имя, ДлинаИмени + 1);
	
	ТекСтрока = Элементы.ОтработанноеВремя.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока["ДолжностьДень" + НомерДня]) Тогда
		ТекСтрока["ВидЗанятостиДень" + НомерДня] = ПредопределенноеЗначение("Перечисление.Izh_ВидыЗанятостиНаТекущемМестеРаботы.ИсполняющийОбязанности");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКолонокОтработанногоВремени(НачальнаяДата, КонечнаяДата)
	
	НачДень = День(НачальнаяДата);
	КонДень = День(КонечнаяДата);
	
	Для ИндДня = 1 По 31 Цикл
		ВидимостьКолонки = ИндДня >= НачДень И ИндДня <= КонДень;
		
		Элементы.Найти("ОтработанноеВремяДень" 				+  СокрЛП(ИндДня)).Видимость = ВидимостьКолонки;
		Элементы.Найти("ОтработанноеВремяВидЗанятостиДень"	+  СокрЛП(ИндДня)).Видимость = ВидимостьКолонки;
		Элементы.Найти("ОтработанноеВремяДолжностьДень"		+  СокрЛП(ИндДня)).Видимость = ВидимостьКолонки;
	КонецЦикла;
		 	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПериодаНаКлиенте(НачальнаяДата, КонечнаяДата)
	
	НачДень = День(НачальнаяДата);
	КонДень = День(КонечнаяДата);
	
	МассивПриставок = ПолучитьМассивПриставок();	
	
	Для Каждого СтрокаТабЧасти Из Объект.ОтработанноеВремя Цикл
		Для ИндДня = 1 По 31 Цикл						
			Если ИндДня < НачДень ИЛИ ИндДня > КонДень Тогда					
				Для ИндексМассиваПриставок = 0 По 3 Цикл
					СтрокаТабЧасти[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+ИндДня] = ПредопределенноеЗначение("Справочник.Izh_КлассификаторИспользованияРабочегоВремени.ПустаяСсылка");
					СтрокаТабЧасти[МассивПриставок[ИндексМассиваПриставок]+"Часов"+ИндДня] = 0;
					СтрокаТабЧасти["День"+ИндДня] = "";
				КонецЦикла;
			КонецЕсли;		
		КонецЦикла;
		
		СтрокаТабЧасти.Итого = ПолучитьИтоговыеЗначенияПоСтроке(СтрокаТабЧасти);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСотрудниковПодразделенияНаСервере(НомерМагазина)
	
	XMLСтрокаРезультата	= "";
	СообщениеОшибки		= "";
	
	Определение = Новый WSОпределения("http://test-1c/zup_test1/ws/ExchangeRSStore?wsdl", "ws");	
	Прокси = Новый WSПрокси(Определение, "http://www.1c.ru/SSL/Exchange", "ExchangeRSStore", "ExchangeRSStoreSoap");
	
	//Прокси = WSСсылки.WSСсылкаОбменЗУП.СоздатьWSПрокси("http://www.1c.ru/SSL/Exchange", "ExchangeRSStore", "ExchangeRSStoreSoap");
	Прокси.Пользователь = "ws";
	
	Попытка
		Отказ = Прокси.GetEmployes(ТекущаяДата(), НомерМагазина, XMLСтрокаРезультата, СообщениеОшибки);		
	Исключение
		СообщениеОшибки = ОписаниеОшибки();
		Сообщить(СообщениеОшибки);
		Возврат;
	КонецПопытки;
		
	Если НЕ Отказ  Тогда			
		ХТЗ = XMLЗначение(Тип("ХранилищеЗначения"), XMLСтрокаРезультата);	
		ТаблицаСотрудников = ХТЗ.Получить();
		
		Если ТипЗнч(ТаблицаСотрудников) = Тип("ТаблицаЗначений") Тогда		
			Для Каждого СтрокаТаб Из ТаблицаСотрудников Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("КодСотрудника", СтрокаТаб.КодСотрудника);
				
				Если Объект.ОтработанноеВремя.НайтиСтроки(Отбор).Количество() = 0 Тогда
					НоваяСтрока = Объект.ОтработанноеВремя.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаб);
															
					Для ИндДня = 1 По 31 Цикл
						НоваяСтрока["ВидЗанятостиДень" + СокрЛП(ИндДня)] = Перечисления.Izh_ВидыЗанятостиНаТекущемМестеРаботы.ОсновноеМестоРаботы;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;		
		КонецЕсли;
	Иначе
		Сообщить(СообщениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСотрудниковИзХранилищаНаСервере(АдресХранилища)
	
	ТаблицаСотрудников = ПолучитьИзВременногоХранилища(АдресХранилища);	
		
	Если ТипЗнч(ТаблицаСотрудников) = Тип("ТаблицаЗначений") Тогда		
		Для Каждого СтрокаТаб Из ТаблицаСотрудников Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("КодСотрудника", СтрокаТаб.КодСотрудника);
			
			Если Объект.ОтработанноеВремя.НайтиСтроки(Отбор).Количество() = 0 Тогда
				НоваяСтрока = Объект.ОтработанноеВремя.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаб);
														
				Для ИндДня = 1 По 31 Цикл
					НоваяСтрока["ВидЗанятостиДень" + СокрЛП(ИндДня)] = Перечисления.Izh_ВидыЗанятостиНаТекущемМестеРаботы.ОсновноеМестоРаботы;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудниковПодразделения(Команда)
			
	//НомерМагазина = ОткрытьФормуМодально("Документ.Izh_ТабельУчетаРабочегоВремени.Форма.ФормаВыбораМагазина");
	//Если ЗначениеЗаполнено(НомерМагазина) Тогда
	//	ДобавитьСотрудниковПодразделенияНаСервере(НомерМагазина);
	//КонецЕсли;	
	АдресХранилища = ОткрытьФормуМодально("Документ.Izh_ТабельУчетаРабочегоВремени.Форма.ФормаВыбораМагазина", Новый Структура("Объект, НачалоПериода, КонецПериода", Объект, Объект.ДатаНачалаПериода, Объект.ДатаОкончанияПериода));	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ДобавитьСотрудниковИзХранилищаНаСервере(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуТабличнойЧасти(Команда)
	
	Если ЗначениеЗаполнено(Элементы.ОтработанноеВремя.ВыделенныеСтроки) Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.ОтработанноеВремя.ВыделенныеСтроки Цикл			
			Объект.ОтработанноеВремя.Удалить(Объект.ОтработанноеВремя.Индекс(Объект.ОтработанноеВремя.НайтиПоИдентификатору(ВыделеннаяСтрока)));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Отказ = Ложь;
	
	Объект.ДатаНачалаПериода	= Период.ДатаНачала;
	Объект.ДатаОкончанияПериода	= Период.ДатаОкончания;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаПериода) 
		И ЗначениеЗаполнено(Объект.ДатаОкончанияПериода)
			И НачалоМесяца(Объект.ДатаНачалаПериода) <> НачалоМесяца(Объект.ДатаОкончанияПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Начало и конец периода должны находиться в пределах одного месяца.",Объект.Ссылка,"ДатаОкончанияПериода","Объект");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Объект.ДатаНачалаПериода	= Неопределено;
		Объект.ДатаОкончанияПериода	= Неопределено;
		Период						= Неопределено;
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьКолонокОтработанногоВремени(Объект.ДатаНачалаПериода, Объект.ДатаОкончанияПериода);
	ОбработатьИзменениеПериодаНаКлиенте(Объект.ДатаНачалаПериода, Объект.ДатаОкончанияПериода);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокуНаСервере(ИндексСтрокиТЧ)
	
	МассивПриставок = Новый Массив(4);
	МассивПриставок[0] = "Первый";
	МассивПриставок[1] = "Второй";
	МассивПриставок[2] = "Третий";
	МассивПриставок[3] = "Четвертый";
	
	ДокОбъект	= РеквизитФормыВЗначение("Объект");		
	ДанныеСтроки = ДокОбъект.ОтработанноеВремя.Получить(ИндексСтрокиТЧ);
	
	Если ЗначениеЗаполнено(ДанныеСтроки) Тогда				
		//НоваяСтрока	= ДокОбъект.ОтработанноеВремя.Добавить();		
		НоваяСтрока = ДокОбъект.ОтработанноеВремя.Вставить(ИндексСтрокиТЧ + 1);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,,"НомерСтроки");
		
		Для День = 1 По 31 Цикл 
			Для Каждого Приставка Из МассивПриставок Цикл			
				НоваяСтрока[Приставка + "ВидВремени" + СокрЛП(День)]	= Справочники.Izh_КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
				НоваяСтрока[Приставка + "Часов" + СокрЛП(День)]			= 0;
			КонецЦикла;
			НоваяСтрока["ВидЗанятостиДень" + СокрЛП(День)]	= Перечисления.Izh_ВидыЗанятостиНаТекущемМестеРаботы.ПустаяСсылка();
			НоваяСтрока["ДолжностьДень" + СокрЛП(День)]		= Справочники.Izh_Должности.ПустаяСсылка();
			НоваяСтрока["День" + СокрЛП(День)]				= "";
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроку(Команда)	
	
	СкопироватьСтрокуНаСервере(Элементы.ОтработанноеВремя.ТекущаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПриИзменении(Элемент)
	
	Элементы.ОтработанноеВремя.ТекущаяСтрока = Элементы.ОтработанноеВремя.ТекущиеДанные.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоги(Команда)
	
	Для Каждого СтрокаТабЧасти Из Объект.ОтработанноеВремя Цикл		
		СтрокаТабЧасти.Итого = ПолучитьИтоговыеЗначенияПоСтроке(СтрокаТабЧасти);
	КонецЦикла;
	ОбновитьОбщиеИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбновитьИтоги(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНестандартнуюВОтработанноеВремяНаСервере(ВидЗанятости, Должность)
	
	НовыйВидЗанятости = Перечисления.Izh_ВидыЗанятостиНаТекущемМестеРаботы[ВидЗанятости];	
	
	ДокОбъект	= РеквизитФормыВЗначение("Объект");		
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидЗанятостиСтроки", НовыйВидЗанятости);
	Отбор.Вставить("Должность", Должность.Наименование);
	
	МассивСтрок = ДокОбъект.Отработанноевремя.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		Сообщить("Уже существует строка для " + Должность.Наименование + " с типом """ + ВидЗанятости + """");		
	Иначе
		//ДеньНач	= День(ДокОбъект.ДатаНачалаПериода);
		//ДеньКон	= День(ДокОбъект.ДатаОкончанияПериода);
		
		НоваяСтрока = ДокОбъект.ОтработанноеВремя.Добавить();
		НоваяСтрока.ФИОСотрудника	= ВидЗанятости;
		НоваяСтрока.Должность		= Должность.Наименование;
		НоваяСтрока.Подразделение	= ДокОбъект.СтруктурнаяЕдиница.Наименование;
		НоваяСтрока.ВидЗанятостиСтроки	= НовыйВидЗанятости;
		НоваяСтрока.КодПодразделения	= ДокОбъект.СтруктурнаяЕдиница.Наименование3;		
		                                       
		Для День = 1 По 31 Цикл 				
			НоваяСтрока["ВидЗанятостиДень" + СокрЛП(День)]	= НовыйВидЗанятости;
			НоваяСтрока["ДолжностьДень" + СокрЛП(День)]	= Должность;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКадровоеАгентство(Команда)
	
	ВыбДолжность = ОткрытьФормуМодально("Документ.Izh_ТабельУчетаРабочегоВремени.Форма.ФормаВыбораДолжности");
	Если ЗначениеЗаполнено(ВыбДолжность) Тогда		
		ДобавитьСтрокуНестандартнуюВОтработанноеВремяНаСервере("КадровоеАгентство", ВыбДолжность);	
		Элементы.ОтработанноеВремя.ТекущаяСтрока = Объект.ОтработанноеВремя.Количество() - 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатаНаличными(Команда)
	
	ВыбДолжность = ОткрытьФормуМодально("Документ.Izh_ТабельУчетаРабочегоВремени.Форма.ФормаВыбораДолжности");
	Если ЗначениеЗаполнено(ВыбДолжность) Тогда		
		ДобавитьСтрокуНестандартнуюВОтработанноеВремяНаСервере("ОплатаНаличными", ВыбДолжность);
		Элементы.ОтработанноеВремя.ТекущаяСтрока = Объект.ОтработанноеВремя.Количество() - 1;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьДолжностьСтрокиНаСервере(ИндексСтрокиТЧ, НоваяДолжность)
	
	ДокОбъект	= РеквизитФормыВЗначение("Объект");		
	ДанныеСтроки = ДокОбъект.ОтработанноеВремя.Получить(ИндексСтрокиТЧ);
	
	Если ЗначениеЗаполнено(ДанныеСтроки) Тогда										
		
		//ДеньНач	= День(ДокОбъект.ДатаНачалаПериода);
		//ДеньКон	= День(ДокОбъект.ДатаОкончанияПериода);
		
		Для День = 1 По 31 Цикл 						
			ДанныеСтроки["ДолжностьДень" + СокрЛП(День)] = НоваяДолжность;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяДолжностьСтрокиПриИзменении(Элемент)
	
	ТекДанные = Элементы.ОтработанноеВремя.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные) Тогда
		ИзменитьДолжностьСтрокиНаСервере(Элементы.ОтработанноеВремя.ТекущаяСтрока, ТекДанные.НоваяДолжность);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяДолжностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбДолжность = ОткрытьФормуМодально("Справочник.Izh_Должности.ФормаВыбора");
	Если ЗначениеЗаполнено(ВыбДолжность) Тогда
		
	КонецЕсли;
	
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

МассивПриставок = Новый Массив(4);
МассивПриставок[0] = "Первый";
МассивПриставок[1] = "Второй";
МассивПриставок[2] = "Третий";
МассивПриставок[3] = "Четвертый";
