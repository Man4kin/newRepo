
Процедура СформироватьСписокРегистровДляКонтроля()
	
	РегистрыДляКонтроля = Новый Массив();
	Если НЕ СозданАвтоматически И НЕ Поступление Тогда
		РегистрыДляКонтроля.Добавить(Движения.УчетАлкоголяПоПроизводителям);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РегистрыДляКонтроля", РегистрыДляКонтроля);
	
КонецПроцедуры

Процедура ДобавитьДвиженияПоУчетуАлкоголя()
	
	НаборДвижений = Движения.УчетАлкоголяПоПроизводителям;
	
	ОбщиеРеквизиты = Новый Структура(
		"Период, ВидДвижения, Партия, Фирма, СтруктурнаяЕдиница, КодОперации",
		Дата
	);
	ЗаполнитьЗначенияСвойств(ОбщиеРеквизиты, ЭтотОбъект);
	
	ор = ОбщиеРеквизиты;
	Если Поступление Тогда
		ор.ВидДвижения = ВидДвиженияНакопления.Приход;
		ор.Партия = Ссылка;
	Иначе
		ор.ВидДвижения = ВидДвиженияНакопления.Расход;
		ор.Партия = Неопределено;
	КонецЕсли;
	
	ТЗДвижения = Состав.Выгрузить();
	
	Для каждого СтрокаТЧ Из ТЗДвижения Цикл
		СтрокаТЧ.Количество = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
	КонецЦикла;
	Izh_ОбработкаКоллекций.ДобавитьИЗаполнитьКолонки(ТЗДвижения, ОбщиеРеквизиты);
	
	ОбщиеРеквизиты.Удалить("ВидДвижения");
	Если Поступление Тогда
		ОбщиеРеквизиты.Удалить("КодОперации");
	КонецЕсли;
	
	ОстаткиПартий = ОстаткиПартийАлкоголя(Поступление);
	
	Если Поступление Тогда
		НаборДвижений.Загрузить(ТЗДвижения);
		РаспределенныеПартии = РаспределитьПоПартиям(ОстаткиПартий, ТЗДвижения,,, "КодОперации");
	Иначе
		РаспределенныеПартии = РаспределитьПоПартиям(
			ТЗДвижения, 
			ОстаткиПартий,
			,
			?(СозданАвтоматически, "ВидАлкогольнойПродукции, Производитель", ""), 
			"КодОперации"
		);
		НаборДвижений.Загрузить(ТЗДвижения);
	КонецЕсли;
	
	ПоляПартии = "Партия, ВидАлкогольнойПродукции, Производитель";
	ПоляПартии = Новый Структура(ПоляПартии);
	
	Для каждого Партия Из РаспределенныеПартии Цикл
			
		Движение = НаборДвижений.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, ОбщиеРеквизиты);
		ЗаполнитьЗначенияСвойств(Движение, Партия);
		
		Если Поступление Тогда
			
			Сторно = НаборДвижений.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Сторно, Движение);
			ЗаполнитьЗначенияСвойств(Сторно, ПоляПартии); // очистка полей партии
			Сторно.Количество = -Сторно.Количество;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Литраж = Неопределено;
	Для каждого Движение Из НаборДвижений Цикл
		Движение.КоличествоДекалитров = Движение.Количество * КоэффициентОбъемаАлкоголя(Движение.Номенклатура, Литраж) / 10;
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	УчетАлкоголя = УчетАлкогольнойПродукции.ВестиУчетАлкоголя();
	
	Если НЕ УчетАлкоголя Тогда
		ТекстСообщения = НСтр("ru='Для данной структурной единицы не настроено ведение учета алкоголя по производителям. Ввод документа невозможен.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Проведен Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Документ %1 не проведен.  Ввод на основании невозможен.'"),
		ДанныеЗаполнения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
	Иначе
		
		ЗаполнитьПоДокументу(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент();
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//{БредовЮГ 2015-10-07 Исправление критичных ошибок. Формирование приложений на документ "Передача товаров между фирмами"
	Если ЗначениеЗаполнено(ДокОснование) и  ТипЗнч(ДокОснование)<>Тип("ДокументСсылка.ПередачаТоваровМеждуФирмами") И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтруктураПодчиненности.Ссылка
		|ИЗ
		|	КритерийОтбора.СтруктураПодчиненности(&ДокОснование) КАК СтруктураПодчиненности
		|ГДЕ
		|	СтруктураПодчиненности.Ссылка ССЫЛКА Документ.ПриложениеПоАлкоголю
		|	И ВЫРАЗИТЬ(СтруктураПодчиненности.Ссылка КАК Документ.ПриложениеПоАлкоголю).Проведен
		|	И СтруктураПодчиненности.Ссылка <> &Ссылка");
		Запрос.УстановитьПараметр("ДокОснование",ДокОснование);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для документа "+СокрЛП(ДокОснование)+" уже существует приложение по алкоголю!",Выборка.Приложение,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	//БредовЮГ  2015-10-07 Исправление критичных ошибок. Формирование приложений на документ "Передача товаров между фирмами" } 
	Izh_Проведение.ИнициализироватьДополнительныеСвойстваПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НеПроверяемыеРеквизиты = Новый Массив();
	
	ПроверяемыеОснования = Новый Массив();
	ПроверяемыеОснования.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
	
	Если НЕ Поступление И ПроверяемыеОснования.Найти(ТипЗнч(ДокОснование)) = Неопределено Тогда
		НеПроверяемыеРеквизиты.Добавить("Состав.ВидАлкогольнойПродукции");
		НеПроверяемыеРеквизиты.Добавить("Состав.Производитель");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НеПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ПараметрыСеанса.ЭтоЦентр Тогда
		Возврат;
	КонецЕсли;
	
	Izh_Проведение.ИнициализироватьДополнительныеСвойства(ЭтотОбъект, РежимПроведения);
	
	ДобавитьДвиженияПоУчетуАлкоголя();
	
	СформироватьСписокРегистровДляКонтроля();
	Izh_Проведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	Izh_Проведение.ВыполнитьКонтрольОстатков(ЭтотОбъект, Отказ);
	
	Izh_Проведение.ОчиститьДополнительныеСвойства(ЭтотОбъект);
	
	//dps+ 15,11,03 144209 При ЛЮБОМ проведении Приложения алко переформировывать приложения у подчиненных передач товаров между фирмами
	Если ЗначениеЗаполнено(ЭтотОбъект.ДокОснование) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СтруктураПодчиненности.Ссылка КАК Ссылка
		|ИЗ
		|	КритерийОтбора.СтруктураПодчиненности(&Основание) КАК СтруктураПодчиненности
		|ГДЕ
		|	СтруктураПодчиненности.Ссылка ССЫЛКА Документ.ПередачаТоваровМеждуФирмами";
		Запрос.УстановитьПараметр("Основание", ЭтотОбъект.ДокОснование);
		рез = Запрос.Выполнить().Выбрать();
		Пока рез.Следующий() Цикл
			Izh_УчетАлкогольнойПродукции.Izh_АвтоСозданиеПриложенияПоАлкоголюОбработкаПроведения(рез.Ссылка.ПолучитьОбъект(), Ложь, РежимПроведенияДокумента.Неоперативный);
		КонецЦикла;
	КонецЕсли;
	//dps- 15,11,03 144209 При ЛЮБОМ проведении Приложения алко переформировывать приложения у подчиненных передач товаров между фирмами
КонецПроцедуры


Процедура ИнициализироватьДокумент()Экспорт
	
	Автор = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры


Процедура ЗаполнитьПоДокументу(Источник)
	
	// !!!! efim
	#Если _ Тогда
		Источник = Документы.КорректировкаРеализации.ПустаяСсылка();
		//Источник = Документы.ВводОстатков.ПустаяСсылка();
	#КонецЕсли
	// !!!!
		
	ОбщиеРеквизиты = Новый Структура("Фирма, СтруктурнаяЕдиница, Контрагент, Грузоотправитель, НомерДокумента, ДатаДокумента");
	ЗаполнитьЗначенияСвойств(ОбщиеРеквизиты, Источник);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбщиеРеквизиты);
	
	//+ВетровИА Обращение №0000143811 03.10.2015
	ЭтотОбъект.СтатусЕГАИС = Перечисления.СтатусыЕГАИС.НеЗагруженИзЕГАИС;
	//-ВетровИА Обращение №0000143811 03.10.2015 
	
	ДокОснование = Источник;
	Состав.Очистить();
	
	КорректирующиеДокументы = "КорректировкаПоступления, КорректировкаРеализации";
	КорректирующиеДокументы = Izh_СтроковыеФункцииКлиентСервер.МассивТипов(КорректирующиеДокументы, "ДокументСсылка");
	
	ЭтоКоррДокумент = КорректирующиеДокументы.Найти(ТипЗнч(Источник)) <> Неопределено;
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ВводОстатков") Тогда
		
		то = Перечисления.ТипыОстатков;
		
		ТЧВводаОстатков = Новый Соответствие();
		ТЧВводаОстатков.Вставить(то.КупленныеТовары, Источник.КупленныеТовары);
		ТЧВводаОстатков.Вставить(то.КомиссионныеТовары, Источник.КомиссионныеТовары);
		ТЧВводаОстатков.Вставить(то.ХранимыеТовары, Источник.ХранимыеТовары);
		
		ТЧСостав = ТЧВводаОстатков[Источник.ТипОстатков];
		
	Иначе
		
		ТЧСостав = Источник.Состав;
		
	КонецЕсли;
	
	ТЧСостав = ТЧСостав.Выгрузить();
	// !!!! efim
	#Если _ Тогда
		ТЧСостав = Состав;
	#КонецЕсли
	// !!!!
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ПриложениеПоАлкоголю") Тогда
		Состав.Загрузить(ТЧСостав);
		Возврат;
	КонецЕсли;
	
	Алкоголь = ТолькоАлкоголь(ТЧСостав.ВыгрузитьКолонку("Номенклатура"));
	Если Алкоголь.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сч = ТЧСостав.Количество();
	Пока Сч > 0 Цикл
		
		Сч = Сч - 1;
		СтрокаТЧ = ТЧСостав[Сч];
		
		Если Алкоголь.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
			ТЧСостав.Удалить(СтрокаТЧ);
			Продолжить;
		КонецЕсли;
		
		Если ЭтоКоррДокумент Тогда
			СтрокаТЧ.Количество = СтрокаТЧ.Количество - СтрокаТЧ.КоличествоДоИзменения;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ДокументОперации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументРеализации, Истина);
		Контрагент = ДокументОперации.Контрагент;
	Иначе
		ДокументОперации = Источник;
	КонецЕсли;
	
	УстановитьКодОперации(ДокументОперации);
	
	Состав.Загрузить(ТЧСостав);
	
	Если Поступление Тогда
		ЗаполнитьАлкогольнуюАналитикуПоУмолчанию();
	ИначеЕсли НЕ СозданАвтоматически Тогда
		ЗаполнитьПоОстаткам();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАлкогольнуюАналитикуПоУмолчанию()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Состав.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр(
		"ВидАлко",
		ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.Реквизит("ВидАлкогольнойПродукции")
	);
	Запрос.УстановитьПараметр(
		"Производитель",
		ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.Реквизит("Производитель")
	);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураДРВидАлко.Ссылка КАК Номенклатура,
		|	НоменклатураДРВидАлко.Значение КАК ВидАлкогольнойПродукции,
		|	НоменклатураДРПроизводитель.Значение КАК Производитель
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДРВидАлко
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДРПроизводитель
		|		ПО НоменклатураДРВидАлко.Ссылка = НоменклатураДРПроизводитель.Ссылка
		|			И (НоменклатураДРПроизводитель.Свойство = &Производитель)
		|ГДЕ
		|	НоменклатураДРВидАлко.Свойство = &ВидАлко
		|	И НоменклатураДРВидАлко.Ссылка В(&Номенклатура)";
	АлкоИнформация = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ Из Состав Цикл
		
		Алкоголь = АлкоИнформация.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		Если Алкоголь <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Алкоголь);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоОстаткам()
	
	ОстаткиПартий = ОстаткиПартийАлкоголя(Ложь);
	
	РаспределенныеПартии = РаспределитьПоПартиям(Состав, ОстаткиПартий);
	Для каждого Партия Из РаспределенныеПартии Цикл
		ЗаполнитьЗначенияСвойств(Состав.Добавить(), Партия);
	КонецЦикла;
	
КонецПроцедуры


Функция ТолькоАлкоголь(Знач Номенклатура)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр(
		"ВидАлко", 
		ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.Реквизит("ВидАлкогольнойПродукции")
	);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)
		|	И НоменклатураДополнительныеРеквизиты.Свойство = &ВидАлко";
	Алкоголь = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Алкоголь;
	
КонецФункции

Функция ОстаткиПартийАлкоголя(Знач ПустыеПартии, Знач БлокироватьОстатки = Истина)
	
	ОбщиеПараметры = Новый Структура("Фирма, СтруктурнаяЕдиница");
	ЗаполнитьЗначенияСвойств(ОбщиеПараметры, ЭтотОбъект);
	
	Если БлокироватьОстатки Тогда
		
		Блокировка = Новый БлокировкаДанных();
		БлокАлкоголь = Блокировка.Добавить("РегистрНакопления.УчетАлкоголяПоПроизводителям");
		
		Для каждого Параметр Из ОбщиеПараметры Цикл
			БлокАлкоголь.УстановитьЗначение(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
		
		БлокАлкоголь.ИсточникДанных = Состав;
		БлокАлкоголь.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		
		Блокировка.Заблокировать();
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Для каждого Параметр Из ОбщиеПараметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Номенклатура", Состав.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ДатаСреза", МоментВремени());
	Запрос.УстановитьПараметр("ПустыеПартии", ПустыеПартии);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УчетАлкоголяПоПроизводителямОстатки.Партия,
		|	УчетАлкоголяПоПроизводителямОстатки.Номенклатура,
		|	УчетАлкоголяПоПроизводителямОстатки.Производитель,
		|	УчетАлкоголяПоПроизводителямОстатки.ВидАлкогольнойПродукции,
		|	УчетАлкоголяПоПроизводителямОстатки.КоличествоОстаток КАК Количество,
		|	ВЫБОР
		|		КОГДА УчетАлкоголяПоПроизводителямОстатки.Партия.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПустаяПартия
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрНакопления.УчетАлкоголяПоПроизводителям.Остатки(
		|			&ДатаСреза,
		|			Фирма = &Фирма
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|				И Номенклатура В (&Номенклатура)) КАК УчетАлкоголяПоПроизводителямОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Остатки.Партия,
		|	ВТ_Остатки.Номенклатура,
		|	ВТ_Остатки.Производитель,
		|	ВТ_Остатки.ВидАлкогольнойПродукции,
		|	УчетАлкоголяПоПроизводителям.КодОперации,
		|	СУММА(УчетАлкоголяПоПроизводителям.Количество) КАК Количество
		|ИЗ
		|	ВТ_Остатки КАК ВТ_Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетАлкоголяПоПроизводителям КАК УчетАлкоголяПоПроизводителям
		|		ПО ВТ_Остатки.Партия = УчетАлкоголяПоПроизводителям.Партия
		|			И ВТ_Остатки.Номенклатура = УчетАлкоголяПоПроизводителям.Номенклатура
		|ГДЕ
		|	&ПустыеПартии
		|	И ВТ_Остатки.ПустаяПартия
		|	И ВТ_Остатки.Количество < 0
		|	И УчетАлкоголяПоПроизводителям.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Остатки.Партия,
		|	ВТ_Остатки.Номенклатура,
		|	ВТ_Остатки.Производитель,
		|	ВТ_Остатки.ВидАлкогольнойПродукции,
		|	УчетАлкоголяПоПроизводителям.КодОперации
		|
		|ИМЕЮЩИЕ
		|	СУММА(УчетАлкоголяПоПроизводителям.Количество) > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Остатки.Партия,
		|	ВТ_Остатки.Номенклатура,
		|	ВТ_Остатки.Производитель,
		|	ВТ_Остатки.ВидАлкогольнойПродукции,
		|	NULL,
		|	ВТ_Остатки.Количество
		|ИЗ
		|	ВТ_Остатки КАК ВТ_Остатки
		|ГДЕ
		|	НЕ &ПустыеПартии
		|	И НЕ ВТ_Остатки.ПустаяПартия
		|	И ВТ_Остатки.Количество > 0";
	ОстаткиПартий = Запрос.Выполнить().Выгрузить();
	
	Возврат ОстаткиПартий;
	
КонецФункции

Функция КоэффициентОбъемаАлкоголя(Знач Номенклатура, Литраж)
	
	Если Литраж = Неопределено Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Номенклатура", Состав.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр(
			"ОбъемТары", 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.Реквизит("Литраж")
		);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
			|	ЕСТЬNULL(НоменклатураДополнительныеРеквизиты.Значение.Наименование, НоменклатураДополнительныеРеквизиты.Значение) КАК Значение
			|ИЗ
			|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			|ГДЕ
			|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)
			|	И НоменклатураДополнительныеРеквизиты.Свойство = &ОбъемТары";
		Объемы = Запрос.Выполнить().Выгрузить();
		
		Литраж = Новый Соответствие();
		Для каждого Объем Из Объемы Цикл
			Литраж.Вставить(Объем.Номенклатура, Объем.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Объем = Литраж[Номенклатура];
	Попытка
		Объем = ?(Объем = Неопределено, 0, Число(Объем));
	Исключение
		Объем = 0;
	КонецПопытки;
	
	Возврат Объем;
	
КонецФункции


Функция ОпределитьКодОперации(Знач Документ)
	
	// !!!! efim
	#Если _ Тогда
		Документ = Документы.РасходнаяНакладная.ПустаяСсылка();
		Документ = Документы.ПередачаТоваровМеждуФирмами.ПустаяСсылка();
	#КонецЕсли
	// !!!!
	
	ко = Перечисления.КодыОпераций;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.КоррекцияЗапасов") Тогда
		
		Результат = ?(
			Документ.Оприходование, 
			ко.ОприходованиеИзлишков, 
			ко.Списание
		);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			Перемещение = НЕ ЗначениеЗаполнено(Контрагент.Организация) 
							ИЛИ Контрагент.Организация = Фирма;
			Перепродажа = НЕ Перемещение;
		Иначе
			Перемещение = Ложь;
			Перепродажа = Ложь;
		КонецЕсли;
		
		Если Перемещение Тогда
			Результат = ко.ПеремещениеРасход;
		Иначе
			Если Документ.Возврат Тогда
				Результат = ко.ВозвратПоставщику;
			Иначе
				Результат = ?(
					Перепродажа, 
					"Перепродажа", ""
				) + ?(
					Документ.ТипДоговора = Перечисления.ТипыДоговоров.Комиссия, 
					"ПередачаНаРеализацию", 
					"ПродажаОпт"
				);
				Результат = ко[Результат];
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаТоваровМеждуФирмами") Тогда
		
		Если Документ.Возврат Тогда
			Результат = ?(Поступление, ко.ВозвратОтПокупателя, ко.ВозвратПоставщику);
		Иначе
			Результат = ?(Поступление, ко.ПоступлениеТоваров, ко.ПродажаОпт);
		КонецЕсли;
		
	Иначе
	
		КодыОпераций = Новый Соответствие();
		КодыОпераций.Вставить(Тип("ДокументСсылка.ПриходнаяНакладная"), ко.ПоступлениеТоваров);
		КодыОпераций.Вставить(Тип("ДокументСсылка.КорректировкаПоступления"), ко.КорректировкаПоступления);
		КодыОпераций.Вставить(Тип("ДокументСсылка.ВозвратнаяНакладнаяОтПокупателя"), ко.ВозвратОтПокупателя);
		КодыОпераций.Вставить(Тип("ДокументСсылка.ВводОстатков"), ко.ВводОстатков);
		
		КодыОпераций.Вставить(Тип("ДокументСсылка.Zотчет"), ко.ПродажаРозница);
		КодыОпераций.Вставить(Тип("ДокументСсылка.ГотоваяПродукция"), ко.ПередачаВПроизводство);
		
		Результат = КодыОпераций[ТипЗнч(Документ)];
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьНаправлениеДвижения(Знач КодОперации)
	
	ко = Перечисления.КодыОпераций;
	
	Приход = Новый Массив();
	п = Приход;
	п.Добавить(ко.ОприходованиеИзлишков);
	п.Добавить(ко.ПоступлениеТоваров);
	п.Добавить(ко.КорректировкаПоступления);
	п.Добавить(ко.ВозвратОтПокупателя);
	п.Добавить(ко.ВводОстатков);
	
	Возврат (Приход.Найти(КодОперации) <> Неопределено);
	
КонецФункции

Процедура УстановитьКодОперации(Знач ДокументОперации = Неопределено, Знач КодОперации = Неопределено, Знач Приход = Неопределено) Экспорт 
	
	Если ДокументОперации = Неопределено Тогда
		ДокументОперации = ДокОснование;
	КонецЕсли;
	
	Если КодОперации = Неопределено Тогда
		Если Приход <> Неопределено Тогда
			ЭтотОбъект.Поступление = Приход;
		КонецЕсли;
		КодОперации = ОпределитьКодОперации(ДокументОперации);
	КонецЕсли;
	
	Если Приход = Неопределено Тогда
		Приход = ОпределитьНаправлениеДвижения(КодОперации);
	КонецЕсли;
	
	ЭтотОбъект.КодОперации = КодОперации;
	ЭтотОбъект.Поступление = Приход;
	
КонецПроцедуры


Функция РаспределитьПоПартиям(Товары, Знач Партии, Знач Соединение = "Номенклатура", Знач ДопСоединение = "", Знач БратьИзТоваров = "")
	
	// !!!! efim
	#Если _ Тогда
		Товары = Новый ТаблицаЗначений();
		Партии = Документы.ПриложениеПоАлкоголю.СоздатьДокумент().Состав;
		Товары = Партии;
	#КонецЕсли
	// !!!!
	
	Результат = ?(
		ТипЗнч(Товары) = Тип("ТаблицаЗначений"), 
		Товары.СкопироватьКолонки(), 
		Товары.ВыгрузитьКолонки()
	);
	// !!!! efim
	#Если _ Тогда
		Результат = Новый ТаблицаЗначений();
	#КонецЕсли
	// !!!!
	
	Сч = Товары.Количество();
	Пока Сч > 0 Цикл
		
		Сч = Сч - 1;
		Товар = Товары[Сч];
		
		ОсталосьРаспределить = Товар.Количество;
		
		Отбор = Новый Структура(Соединение);
		
		Если НЕ ПустаяСтрока(ДопСоединение) Тогда
			
			ДопОтбор = Новый Структура(ДопСоединение);
			ЗаполнитьЗначенияСвойств(ДопОтбор, Товар);
			
			Для каждого ЭлементОтбора Из ДопОтбор Цикл
				Если ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
					Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Товар);
		
		Для каждого Партия Из Партии.НайтиСтроки(Отбор) Цикл
			
			// !!!! efim
			#Если _ Тогда
				Партия = Партии[0];
			#КонецЕсли
			// !!!!
			
			Если ОсталосьРаспределить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Количество = Партия.Количество;
			Количество = Мин(ОсталосьРаспределить, Партия.Количество);
			Если Количество > 0 Тогда
				
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Партия,, БратьИзТоваров);
				НоваяСтрока.Количество = Количество;
				
				Количество = НоваяСтрока.Количество;
				
				ОсталосьРаспределить = ОсталосьРаспределить - Количество;
				Партия.Количество = Партия.Количество - Количество;
				
			КонецЕсли;
			
			Если Партия.Количество = 0 Тогда
				Партии.Удалить(Партия);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОсталосьРаспределить <= 0 Тогда
			Товары.Удалить(Товар);
		Иначе
			Товар.Количество = ОсталосьРаспределить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


