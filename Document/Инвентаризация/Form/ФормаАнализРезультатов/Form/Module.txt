&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Ссылка = Параметры.Ключ;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьСостав();
КонецПроцедуры

&НаКлиенте
Процедура НайтиТоварВСписке(Команда)
	
	ФормаПоискТовара = ПолучитьФорму("ОбщаяФорма.ФормаПоискТовара",,ЭтаФорма);
	Результат = ФормаПоискТовара.ОткрытьМодально();
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Действие = "ОтменитьПоиск" Тогда
			//ОтменитьПоискТовараВСписке(Неопределено);
		ИначеЕсли Результат.Действие = "Найти" Тогда
			ИдентификаторСтроки = 0;
			ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура", ИдентификаторСтроки, дзСостав.ПолучитьЭлементы(), Результат.Номенклатура, Ложь);
			Элементы.дзСостав.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	Иначе//Если Результат = Неопределено Тогда	//форма закрыта
		//ничего не делаем
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
// Получает идентификатор (метод ПолучитьИдентификатор()) строки дерева значений для заданного значения поля строки дерева.
// Используется для позиционирования курсора в иерархических списках.
// 
Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск) Экспорт
	
	Для Каждого СтрокаДерева ИЗ КоллекцияЭлементовДерева Цикл
		Если ПрекратитьПоиск Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаДерева[ИмяПоля] = КлючСтроки Тогда
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			ПрекратитьПоиск = Истина;
			Возврат;
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, ПрекратитьПоиск);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
    ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки, Инвентаризация", Истина, Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Ссылка);
    ОткрытьФорму("Отчет.АнализРезультатовИнвентаризации.Форма", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьСостав();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостав()
	
	СхемаОтбора = Отчеты.АнализРезультатовИнвентаризации.ПолучитьМакет("АнализРезультатов");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОтбора));
	КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	НастройкиСКД = КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", Ссылка);
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Период", Новый Граница(Ссылка.МоментВремени(),ВидГраницы.Исключая));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаОтбора, НастройкиСКД,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ДеревоОбъект = Новый ДеревоЗначений;
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений =
		Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ДеревоОбъект);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	СоздатьКолокиТаблицыФормы(ДеревоОбъект);
	ЗначениеВРеквизитФормы(ДеревоОбъект,"дзСостав");
	
КонецПроцедуры // ЗаполнитьСостав()

&НаСервере
Процедура СоздатьКолокиТаблицыФормы(ДеревоОбъект)

	МассивУдаляемыхРеквизитов = Новый Массив;
    
	дзСоставКолонки = РеквизитФормыВЗначение("дзСостав").Колонки;
	Для каждого Колонка из дзСоставКолонки Цикл
        МассивУдаляемыхРеквизитов.Добавить("дзСостав" + "." + Колонка.Имя);
		УдаляемыйЭлементФормы = Элементы.Найти("дзСостав" + Колонка.Имя);
		Если Не УдаляемыйЭлементФормы = Неопределено Тогда
			Элементы.Удалить(УдаляемыйЭлементФормы);
		КонецЕсли;
    КонецЦикла;
    
    МассивДобавляемыхРеквизитов = Новый Массив;

	Для Каждого Колонка Из ДеревоОбъект.Колонки Цикл
		Если Не Колонка.Имя = "" Тогда	//как-то умудрились так сделать
			РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "дзСостав", Колонка.Имя); 
			МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы); 
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов,МассивУдаляемыхРеквизитов);
	
	Для Каждого Колонка Из ДеревоОбъект.Колонки Цикл     //В цикле добавим элементы в таблицу 
        Элемент = Элементы.Добавить("дзСостав" + Колонка.Имя, Тип("ПолеФормы"), Элементы.дзСостав); //Добавление элемента
        Элемент.Вид = ВидПоляФормы.ПолеВвода;
        Элемент.ПутьКДанным = "дзСостав" + "." + Колонка.Имя;  //Назначим путь к данным, только после этого таблица появится на форме
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Видимость = Истина;
	КонецЦикла;
	
	//popn+
	//добавим условное оформление
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветОтрицательногоЧисла);
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзСостав.НеполныеДанныеПоФирмам");
	Отбор.ПравоеЗначение = Истина;
	Поля = Элемент.Поля.Элементы.Добавить();
	Поля.Использование = Истина;
	Поля.Поле = Новый ПолеКомпоновкиДанных("дзСостав");	
	//popn-
	
КонецПроцедуры
