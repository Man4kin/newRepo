//BIT_Izhevsk ALProzorov 30/07/2015 -->>
Функция ПечатьСЧетФактура(МассивОбъектов,ОбъектыПечати) Экспорт
	Для каждого Объект Из МассивОбъектов Цикл
		
		//{Ситек ДойниковПВ 2015-10-19
		//Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Если Объект.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		//}Ситек ДойниковПВ 2015-10-19
		
			 ТабДок = УчетНДС.ПечатьСчетовФактур1137(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПечатьСчетовФактур());
		Иначе
			 ТабДок = УчетНДС.ПечатьКорректировочныхСчетовФактур1137(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПечатьКорректировочныхСчетовФактур());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабДок; //Ситек ДойниковПВ 2015-10-26
	
КонецФункции	
//BIT_Izhevsk ALProzorov 30/07/2015 <<--

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
	//	"СчетФактура", "Счет-фактура", ПечатьСчетФактура(массивОбъектов,ОбъектыПечати));
	//КонецЕсли;
	
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	МассивСчетовФактур2012					= Новый Массив;
	МассивКорректировочныхСчетовФактур2012	= Новый Массив;
	
	Для каждого Объект Из МассивОбъектов Цикл
		
		//++Минин 0000143963 2015-10-30
		Если не Объект.ДокОснование.Проведен Тогда 
			СообщениеОбОшибке = "Необходимо провести документ основание: "+Строка(Объект.ДокОснование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			Возврат;
		КонецЕсли;
		//--Минин 0000143963 2015-10-30
		Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			МассивКорректировочныхСчетовФактур2012.Добавить(Объект);
		Иначе	
			МассивСчетовФактур2012.Добавить(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСчетовФактур2012.Количество() = 0 Тогда
		УдалитьМакетИзКоллекции(КоллекцияПечатныхФорм, "СчетФактура1137");
	КонецЕсли;
	
	Если МассивКорректировочныхСчетовФактур2012.Количество() = 0 Тогда
		УдалитьМакетИзКоллекции(КоллекцияПечатныхФорм, "КорректировочныйСчетФактура1137");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура1137") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"СчетФактура1137", "Счет-фактура", 
			УчетНДС.ПечатьСчетовФактур1137(МассивСчетовФактур2012, ОбъектыПечати, ТекстЗапросаПечатьСчетовФактур()));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КорректировочныйСчетФактура1137") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"КорректировочныйСчетФактура1137", "Корректировочный счет-фактура", 
			УчетНДС.ПечатьКорректировочныхСчетовФактур1137(МассивКорректировочныхСчетовФактур2012, ОбъектыПечати, ТекстЗапросаПечатьКорректировочныхСчетовФактур()));
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьМакетИзКоллекции(КоллекцияПечатныхФорм, ИмяМакета)

	Стр = КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ");
	
	Если Стр <> Неопределено Тогда
		
		КоллекцияПечатныхФорм.Удалить(Стр);
		
	КонецЕсли;
	
КонецПроцедуры


Функция ТекстЗапросаПечатьСчетовФактур()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СчетФактура.Ссылка КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА СчетФактура.Исправление
	|			ТОГДА СчетФактура.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактура.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР
	|		КОГДА СчетФактура.Исправление
	|			ТОГДА СчетФактура.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактура.Номер
	|	КОНЕЦ КАК Номер,
	|	СчетФактура.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетФактура.СчетФактураБезНДС КАК СчетФактураБезНДС,
	|	СчетФактура.Исправление КАК Исправление,
	|	СчетФактура.НомерИсправления КАК НомерИсправления,
	|	СчетФактура.Дата КАК ДатаИсправления,
	|	НЕ СчетФактура.Исправление КАК УдалитьПрефиксыИзНомера,
	|	ИСТИНА КАК ЭтоСчетФактураВыданный,
	|	ИСТИНА КАК ВыводитьСуммуБезНДС,
	|	СчетФактура.ДокОснование КАК ДокументОснование,
	|	СчетФактура.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента,
	|	СчетФактура.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента,
	|	СчетФактура.СтруктурнаяЕдиница.Валюта КАК Валюта
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка,
	|	ВЫБОР
	|		КОГДА СчетФактура.Исправление
	|			ТОГДА СчетФактура.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетФактура.Исправление
	|			ТОГДА СчетФактура.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактура.Номер
	|	КОНЕЦ,
	|	СчетФактура.ВидСчетаФактуры,
	|	ЛОЖЬ,
	|	СчетФактура.Исправление,
	|	СчетФактура.НомерИсправления,
	|	СчетФактура.Дата,
	|	НЕ СчетФактура.Исправление,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	СчетФактура.Ссылка,
	|	СчетФактура.НомерПлатежноРасчетногоДокумента,
	|	СчетФактура.ДатаПлатежноРасчетногоДокумента,
	|	СчетФактура.СтруктурнаяЕдиница.Валюта
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И СчетФактура.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитента))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка,
	|	СчетФактура.Дата,
	|	СчетФактура.Номер,
	|	СчетФактура.ВидСчетаФактуры,
	|	ЛОЖЬ,
	|	СчетФактура.Исправление,
	|	СчетФактура.НомерИсправления,
	|	СчетФактура.Дата,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	СчетФактура.Ссылка,
	|	СчетФактура.НомерПлатежноРасчетногоДокумента,
	|	СчетФактура.ДатаПлатежноРасчетногоДокумента,
	|	СчетФактура.СтруктурнаяЕдиница.Валюта
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка,
	|	ВЫБОР
	|		КОГДА СчетФактура.Исправление
	|			ТОГДА СчетФактура.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетФактура.Исправление
	|			ТОГДА СчетФактура.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактура.Номер
	|	КОНЕЦ,
	|	СчетФактура.ВидСчетаФактуры,
	|	СчетФактура.СчетФактураБезНДС,
	|	СчетФактура.Исправление,
	|	СчетФактура.НомерИсправления,
	|	СчетФактура.Дата,
	|	НЕ СчетФактура.Исправление,
	|	ИСТИНА,
	|	ИСТИНА,
	|	СчетФактура.Ссылка,
	|	СчетФактура.НомерПлатежноРасчетногоДокумента,
	|	СчетФактура.ДатаПлатежноРасчетногоДокумента,
	|	СчетФактура.СтруктурнаяЕдиница.Валюта
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	СчетФактура";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияПереопределяемый.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПечатьКорректировочныхСчетовФактур()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СчетФактура.Ссылка КАК СчетФактура,
	|	СчетФактура.Дата КАК Дата,
	|	СчетФактура.Номер КАК Номер,
	|	СчетФактура.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетФактура.Исправление КАК Исправление,
	|	СчетФактура.НомерИсправления КАК НомерИсправления,
	|	СчетФактура.Дата КАК ДатаИсправления,
	|	СчетФактура.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактура.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактура.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактура.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактура.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактура.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактура.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	СчетФактура.СчетФактураБезНДС КАК СчетФактураБезНДС,
	|	ИСТИНА КАК УдалитьПрефиксыИзНомера,
	|	ИСТИНА КАК ЭтоСчетФактураВыданный,
	|	СчетФактура.ДокОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	СчетФактура";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияПереопределяемый.ТекстРазделителяЗапросовПакета();
	
КонецФункции 




Функция ПодготовитьПараметрыЗаполненияКорректировочный(ДокументОснование, Отказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	НомераТаблиц	= Новый Структура;
	Запрос.Текст	= 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка КАК ДокОснование,
	|	КорректировкаРеализации.Дата,
	|	КорректировкаРеализации.Фирма,
	|	КорректировкаРеализации.Контрагент,
	|	КорректировкаРеализации.РежимКорректировки,
	|	КорректировкаРеализации.ДокументРеализации,
	|	КорректировкаРеализации.СтруктурнаяЕдиница,
	|	КорректировкаРеализации.ИсправляемыйДокумент,
	|	КорректировкаРеализации.ИсправляемыйДокумент.РежимКорректировки КАК ИсправляемыйДокументРеализацииВидОперации
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование";
	
	Результат	= Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru='Нет данных для корректировочного счета-фактуры.'");
		Отказ = Истина;
		Возврат ТекстСообщения;
	КонецЕсли;
	
	РеквизитыОснования	= Результат.Выбрать();
	РеквизитыОснования.Следующий();
	
	Если ЗначениеЗаполнено(РеквизитыОснования.ИсправляемыйДокумент)
		И (ТипЗнч(РеквизитыОснования.ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации")) 
		И РеквизитыОснования.ИсправляемыйДокументРеализацииВидОперации = Перечисления.РежимыКорректировок.СогласованноеИзменение 
		И РеквизитыОснования.РежимКорректировки = Перечисления.РежимыКорректировок.ИсправлениеОшибки Тогда
		
		УточнениеСообщения = НСтр("ru='корректировочных'"); 
	Иначе
		УточнениеСообщения = НСтр("ru='исправленных'");
	КонецЕсли;
	
	ОснованиеДляВидаОперации		= УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументОснование);
	Если НЕ ЗначениеЗаполнено(ОснованиеДляВидаОперации) Тогда
		ВызватьИсключение НСтр("ru = 'Не определен исправляемый документ'");
	КонецЕсли;
	
	
	Реквизиты = Новый Структура("Дата, ДокОснование, Фирма, Контрагент, СтруктурнаяЕдиница,
		|ВидСчетаФактуры, Исправление, ИсправляемыйСчетФактура, НомерИсправления, КодВидаОперацииОснования, 
		|УчитыватьИсправлениеИсходногоДокумента, НомерИсходногоДокумента, ДатаИсходногоДокумента,
		|НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента,
		|НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента");
		
	ЗаполнитьЗначенияСвойств(Реквизиты, РеквизитыОснования, "Дата, ДокОснование, Фирма, Контрагент, СтруктурнаяЕдиница");
	
	Реквизиты.ИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(РеквизитыОснования.ИсправляемыйДокумент);
	
	ДокументыОснования	= Новый ТаблицаЗначений;
	ДокументыОснования.Колонки.Добавить("ДокументОснование", Документы.ТипВсеСсылки());
	НоваяСтрока	= ДокументыОснования.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыОснования);
	
	// ВидСчетаФактуры, Исправление
	
	Если ЗначениеЗаполнено(РеквизитыОснования.ИсправляемыйДокумент)
		И (ТипЗнч(РеквизитыОснования.ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации")) 
		И РеквизитыОснования.ИсправляемыйДокументРеализацииВидОперации = Перечисления.РежимыКорректировок.СогласованноеИзменение 
		И РеквизитыОснования.РежимКорректировки = Перечисления.РежимыКорректировок.ИсправлениеОшибки Тогда
		
		// Исправление корректировочного счета-фактуры
		Реквизиты.ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		Реквизиты.Исправление		= Истина;
		
	ИначеЕсли РеквизитыОснования.РежимКорректировки = Перечисления.РежимыКорректировок.СогласованноеИзменение Тогда
		
		// Корректировочный счет-фактура
		Реквизиты.ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		Реквизиты.Исправление		= Ложь;
		
	Иначе
		
		СписокТиповНаАванс			=
			УчетНДС.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
			
		СписокТиповНалоговыйАгент	=
			УчетНДС.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
			
		СписокТиповКорректировочный	=
			УчетНДС.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		
		Если СписокТиповНалоговыйАгент.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			// Исправление счета-фактуры налогового агента
			Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
			
		ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			
			//Если ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			//	ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			//	// Исправление счета-фактуры на реализацию
			//	Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			//Иначе
			//	// Исправление счета-фактуры на аванс
			//	Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
			//КонецЕсли;
			
		ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			// Исправление корректировочного счета-фактуры
			Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;	
			
		Иначе
			// По умолчанию: исправление счета-фактуры на реализацию
			Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;	
			
		КонецЕсли;
		
		Реквизиты.Исправление		= Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыОснования.ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		// Основание корректировки - другая корректировка
		ИсправляемыйДокумент	= УчетНДС.ПолучитьИсправляемыйДокументРеализации(РеквизитыОснования.ДокументРеализации);
		Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.СчетФактура") Тогда
			ИсходныйСчетФактура			= ИсправляемыйДокумент;
			ИсходныйДокумент	= Неопределено;
		Иначе
			ИсходныйСчетФактура			= Неопределено;
			ИсходныйДокумент	= ИсправляемыйДокумент;
		КонецЕсли;
		
	Иначе
		
		ИсходныйСчетФактура			= Неопределено;
		ИсходныйДокументРеализации	= УчетНДС.ПолучитьИсправляемыйДокументРеализации(РеквизитыОснования.ДокументРеализации);
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныйСчетФактура",			ИсходныйСчетФактура);
	Запрос.УстановитьПараметр("ИсходныйДокументРеализации",		ИсходныйДокументРеализации);
	Запрос.УстановитьПараметр("КорректировочныйСчетФактура",	Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	Запрос.УстановитьПараметр("ДокументРеализации",				РеквизитыОснования.ДокументРеализации);
	
	Если НЕ ЗначениеЗаполнено(ИсходныйСчетФактура) Тогда
		// Реквизиты из счета фактуры, введенного на основании исходного документа
		Запрос.Текст = ТекстЗапросаРеквизитыСчетаФактурыИсходногоДокумента(НомераТаблиц);
		
	Иначе
		// Реквизиты из исходного счета фактуры
		Запрос.Текст = ТекстЗапросаРеквизитыИсходногоСчетаФактуры(НомераТаблиц);
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаНомерИсправления(НомераТаблиц);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КодВидаОперацииИсходногоДокумента	= "";
	НомерИсправленияИсходногоДокумента	= 0;
	
	Если НЕ МассивРезультатов[0].Пустой() Тогда
		
		РеквизитыИсходногоСчетаФактуры	= МассивРезультатов[0].Выбрать();
		Если РеквизитыИсходногоСчетаФактуры.Следующий() Тогда
			
			Если ИсходныйСчетФактура= Неопределено И РеквизитыИсходногоСчетаФактуры.КорректировочныйСчетФактура Тогда
				Реквизиты.ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			КонецЕсли;
			
			КодВидаОперацииИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.КодВидаОперации;
			НомерИсправленияИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.НомерИсправления;
			
			// НомерИсходногоДокумента, ДатаИсходногоДокумента
			
			Если РеквизитыИсходногоСчетаФактуры.КорректировочныйСчетФактура ИЛИ РеквизитыИсходногоСчетаФактуры.Исправление Тогда
				
				Реквизиты.НомерИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.НомерИсходногоДокумента;
				Реквизиты.ДатаИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.ДатаИсходногоДокумента;
				
			Иначе
				
				Реквизиты.НомерИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.Номер;
				Реквизиты.ДатаИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.Дата;
				
			КонецЕсли;
			
			// НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента
				
			Если РеквизитыИсходногоСчетаФактуры.КорректировочныйСчетФактура Тогда
				
				Реквизиты.УчитыватьИсправлениеИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента;
				
				Если Реквизиты.УчитыватьИсправлениеИсходногоДокумента Тогда
					Реквизиты.НомерИсправленияИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.НомерИсправленияИсходногоДокумента;
					Реквизиты.ДатаИсправленияИсходногоДокумента		= РеквизитыИсходногоСчетаФактуры.ДатаИсправленияИсходногоДокумента;
				КонецЕсли;
				
			ИначеЕсли РеквизитыИсходногоСчетаФактуры.Исправление Тогда
					
				Реквизиты.УчитыватьИсправлениеИсходногоДокумента	= Истина;
				
				Реквизиты.НомерИсправленияИсходногоДокумента		= РеквизитыИсходногоСчетаФактуры.НомерИсправления;
				Реквизиты.ДатаИсправленияИсходногоДокумента			= РеквизитыИсходногоСчетаФактуры.Дата;
					
			КонецЕсли;
			
			// НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента
			
			Если РеквизитыИсходногоСчетаФактуры.КорректировочныйСчетФактура Тогда	
				
				Если РеквизитыИсходногоСчетаФактуры.Исправление Тогда
					Реквизиты.НомерИсправляемогоКорректировочногоДокумента	= РеквизитыИсходногоСчетаФактуры.НомерИсправляемогоКорректировочногоДокумента;
					Реквизиты.ДатаИсправляемогоКорректировочногоДокумента	= РеквизитыИсходногоСчетаФактуры.ДатаИсправляемогоКорректировочногоДокумента;
				ИначеЕсли Реквизиты.Исправление Тогда
					Реквизиты.НомерИсправляемогоКорректировочногоДокумента	= РеквизитыИсходногоСчетаФактуры.Номер;
					Реквизиты.ДатаИсправляемогоКорректировочногоДокумента	= РеквизитыИсходногоСчетаФактуры.Дата;
				КонецЕсли;
				
			КонецЕсли;
			
				
		КонецЕсли;
		
	КонецЕсли;
	
	// УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента
	
	Если НЕ МассивРезультатов[НомераТаблиц.НомерИсправления].Пустой() Тогда
		
		ВыборкаНомерИсправления	= МассивРезультатов[НомераТаблиц.НомерИсправления].Выбрать();
		Если ВыборкаНомерИсправления.Следующий() Тогда
		
			НомерИсправленияИсходногоДокумента	= Макс(НомерИсправленияИсходногоДокумента, ВыборкаНомерИсправления.НомерИсправленияИсходногоДокумента);
		
			Если Реквизиты.УчитыватьИсправлениеИсходногоДокумента = Неопределено
				И Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
				И ЗначениеЗаполнено(ВыборкаНомерИсправления.НомерИсправленияИсходногоДокумента) Тогда
				
				ЗаполнитьЗначенияСвойств(Реквизиты, ВыборкаНомерИсправления);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Реквизиты.КодВидаОперацииОснования	= КодВидаОперацииИсходногоДокумента;
	Если Реквизиты.Исправление Тогда
		Реквизиты.НомерИсправления = НомерИсправленияИсходногоДокумента + 1;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Реквизиты",			Реквизиты);
	ПараметрыЗаполнения.Вставить("ДокументыОснования",	ДокументыОснования);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции


Функция ПолучитьКодВидаОперации(СтруктураПараметров, КодВидаОперацииОснования = Неопределено) Экспорт
	Перем КодВидаОперации;
	
	Дата						= СтруктураПараметров.Дата;
	ВидСчетаФактуры				= СтруктураПараметров.ВидСчетаФактуры;
	Исправление					= СтруктураПараметров.Исправление;
	Контрагент					= СтруктураПараметров.Контрагент;
	СчетФактураНеВыставляется	= СтруктураПараметров.СчетФактураНеВыставляется;
	СчетФактураБезНДС			= СтруктураПараметров.СчетФактураБезНДС;
	ДокОснование                = СтруктураПараметров.ДокОснование;
	
	Если Исправление ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда		
		Если НЕ КодВидаОперацииОснования = Неопределено Тогда
			КодВидаОперации = КодВидаОперацииОснования;
			Возврат(КодВидаОперации);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		
		КодВидаОперации = "02";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		КодВидаОперации = "05";	
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
			КодВидаОперации = "06";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда		
		
		КодВидаОперации = "09";
				
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
		
			КодВидаОперации = "";
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РасходнаяНакладная") И ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокОснование, "Возврат")	Тогда
				КодВидаОперации = "03";
			ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ОтчетРеализатора") И ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокОснование, "ТипОтчета") = Перечисления.ТипыОтчетаРеализатора.ОтКомиссионера Тогда
				КодВидаОперации = "04";
			ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ОтчетРеализатора") И ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокОснование, "ТипОтчета") = Перечисления.ТипыОтчетаРеализатора.Комитенту Тогда	
					КодВидаОперации = "04";
			ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
				//определим какие товары продали собственные или комиссионные
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ДвиженияТМЦ.Статус
				|ИЗ
				|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
				|ГДЕ
				|	ДвиженияТМЦ.Регистратор = &Регистратор
				|
				|СГРУППИРОВАТЬ ПО
				|	ДвиженияТМЦ.Статус");
				Запрос.УстановитьПараметр("Регистратор",ДокОснование);
				Выборка = Запрос.Выполнить().Выбрать();
				стрКоды = "";
				Пока Выборка.Следующий() Цикл
					Если Выборка.Статус = Перечисления.ТипыДоговоров.Комиссия Тогда
						стрКод = "04";
					Иначе
						стрКод = "01";
					КонецЕсли;	
					Если ЗначениеЗаполнено(стрКоды) Тогда
						стрКоды = стрКоды + "; "+стрКод;
					Иначе
						стрКоды = стрКод;
					КонецЕсли;	
				КонецЦикла;	
				
				КодВидаОперации = стрКоды;
			Иначе
				КодВидаОперации = "01";
			КонецЕсли;
		
		Если КодВидаОперации = "" Тогда
			КодВидаОперации = "01";
		КонецЕсли;

	Иначе
		
		КодВидаОперации = "01";
		
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции


Функция ТекстЗапросаНомерИсправления(НомераТаблиц)

	НомераТаблиц.Вставить("НомерИсправления", НомераТаблиц.Количество());
	
	ТекстЗапроса	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактура.НомерИсправления КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактура.Дата КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.ДокОснование = &ДокументРеализации
	|	И СчетФактура.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактура.Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияПереопределяемый.ТекстРазделителяЗапросовПакета();
	
КонецФункции


Функция ТекстЗапросаРеквизитыИсходногоСчетаФактуры(НомераТаблиц)

	НомераТаблиц.Вставить("РеквизитыИсходногоСчетаФактуры", НомераТаблиц.Количество());
	
	ТекстЗапроса	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Номер,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = &КорректировочныйСчетФактура
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорректировочныйСчетФактура,
	|	СчетФактураВыданный.Исправление,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсправления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИсправления,
	|	СчетФактураВыданный.НомерИсходногоДокумента,
	|	СчетФактураВыданный.ДатаИсходногоДокумента,
	|	СчетФактураВыданный.УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураВыданный.НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданный.ДатаИсправленияИсходногоДокумента,
	|	СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.КодВидаОперации
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &ИсходныйСчетФактура";	

	Возврат ТекстЗапроса + ОбщегоНазначенияПереопределяемый.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРеквизитыСчетаФактурыИсходногоДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("РеквизитыСчетаФактурыИсходногоДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактура.Дата КАК Дата,
	|	СчетФактура.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетФактура.ВидСчетаФактуры = &КорректировочныйСчетФактура
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорректировочныйСчетФактура,
	|	ЛОЖЬ КАК Исправление,
	|	0 КАК НомерИсправления,
	|	СчетФактура.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактура.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактура.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактура.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактура.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактура.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактура.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	СчетФактура.КодВидаОперации КАК КодВидаОперации
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.ДокОснование = &ИсходныйДокументРеализации
	|	И НЕ СчетФактура.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактура.Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияПереопределяемый.ТекстРазделителяЗапросовПакета();
	
КонецФункции

