Функция ПровестиРасходнуюНакладную(Объект,Режим)
	
	//popn+
	//перепродажей считается операция, когда фирма в шапке документа не совпадает с фирмой
	//в структурной единице, которая выбрана в реквизите Контрагент, если же фирма в СЕ не заполнена -
	//то считаем это перемещением
	//флПеремещения = ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Контрагенты");
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда 
		Если ЗначениеЗаполнено(Объект.Контрагент.Организация) Тогда
			Если Объект.Контрагент.Организация = Объект.Фирма Тогда
				флПеремещения = ИСТИНА;
				флПерепродажи = ЛОЖЬ;
			Иначе
				флПеремещения = ЛОЖЬ;
				флПерепродажи = ИСТИНА;
			КонецЕсли;
		Иначе
			флПеремещения = ИСТИНА;
			флПерепродажи = ЛОЖЬ;
		КонецЕсли;
	Иначе
		флПеремещения = ЛОЖЬ;
		флПерепродажи = ЛОЖЬ;
	КонецЕсли;
	//popn-
	
	//popn+
	тзОстаткиНоменклатурыИсходная = ПроведениеДокументов.ПолучитьДвиженияДокументаПоРегистру(Объект,"ОстаткиНоменклатуры");
	Для Каждого РегистрДвижений Из Объект.Движения Цикл
		РегистрДвижений.Очистить();
	КонецЦикла;
	//popn-
	
	//serg  25.12.2013
	//Для Каждого Стр Из ЭтотОбъект.Состав Цикл
	//	Если  Не ЗначениеЗаполнено(Стр.Цена)Тогда
	//		Сообщить ("Не заполнена цена в строке:" + " " + Стр.НомерСтроки);
	//		Возврат Истина;
	//	КонецЕсли;
	//КонецЦикла;	
	//serg	25.12.2013 
	
	прчКупляПродажа   = Перечисления.ТипыДоговоров.КупляПродажа;
	прчКомиссия       = Перечисления.ТипыДоговоров.Комиссия;
	флПродажа = Ложь;
	Если флПеремещения Тогда
		КодОперации = Перечисления.КодыОпераций.ПеремещениеРасход;
	Иначе
		Если Объект.Возврат Тогда
			КодОперации = Перечисления.КодыОпераций.ВозвратПоставщику;
		Иначе
			Если Объект.ТипДоговора = прчКомиссия Тогда
				//popn+
				//КодОперации = Перечисления.КодыОпераций.ПередачаНаРеализацию;
				КодОперации = ?(флПерепродажи,Перечисления.КодыОпераций.ПерепродажаПередачаНаРеализацию,Перечисления.КодыОпераций.ПередачаНаРеализацию);
				//popn-
				флПродажа = Истина;
			Иначе
				//popn+
				//КодОперации = Перечисления.КодыОпераций.ПродажаОпт;
				КодОперации = ?(флПерепродажи,Перечисления.КодыОпераций.ПерепродажаПродажаОпт,Перечисления.КодыОпераций.ПродажаОпт);
				//popn-
				флПродажа = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	тзОстаткиНоменклатуры = Объект.Движения.ОстаткиНоменклатуры.Выгрузить();
	тзОстаткиНоменклатуры.Колонки.Добавить("СуммаПродажи");
	тзОстаткиНоменклатуры.Колонки.Добавить("СуммаНДСПродажи");
	тзОстаткиНоменклатуры.Колонки.Добавить("СтавкаНДС");
	
	Если КодОперации = Перечисления.КодыОпераций.ПродажаОпт Тогда
		тзРеализация = Объект.Движения.Реализация.Выгрузить();
	Иначе	
		тзРеализация = Неопределено;
	КонецЕсли;	
	
	// Установка исключительной блокировки контролируемых остатков 
	Запрос=Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	тзНаборы=ПроведениеДокументов.ПреобразоватьНаборы(Новый Структура("Ссылка,Дата",Объект.Ссылка,Объект.Дата));
	Запрос.УстановитьПараметр("Наборы",тзНаборы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	н.Количество,
	|	н.Номенклатура,	
	|	н.СтавкаНДС,
	|	н.Сумма,
	|	н.СуммаНДС,
	|	н.Склад,
	|	н.Статус
	|ПОМЕСТИТЬ врНаборы
	|ИЗ
	|	&Наборы КАК н";
	Запрос.Выполнить();
	Запрос.Текст=
	"ВЫБРАТЬ
	|	т.Номенклатура,
	|	т.СтавкаНДС КАК СтавкаНДС,
	|	т.МестоХранения КАК МестоХранения,
	|	&Фирма КАК Фирма,
	|	т.Статус КАК Статус,
	|	СУММА(т.Количество) КАК Количество,
	|	СУММА(т.Сумма) КАК Сумма,
	|	СУММА(т.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ врСостав
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходнаяНакладнаяСостав.Номенклатура КАК Номенклатура,
	|		РасходнаяНакладнаяСостав.СтавкаНДС КАК СтавкаНДС,
	|		РасходнаяНакладнаяСостав.Ссылка.Склад КАК МестоХранения,
	|		РасходнаяНакладнаяСостав.ТипРеализацииТовара КАК Статус,
	|		СУММА(ВЫРАЗИТЬ(РасходнаяНакладнаяСостав.Количество * РасходнаяНакладнаяСостав.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
	//popn+
	|	"+?(флПродажа,"СУММА(РасходнаяНакладнаяСостав.Сумма)","СУММА(0)")+" КАК Сумма,
	|		СУММА(РасходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДС
	//popn-
	|	ИЗ
	|		Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
	|	ГДЕ
	|		РасходнаяНакладнаяСостав.Ссылка = &Ссылка
	|		И РасходнаяНакладнаяСостав.Номенклатура.ВидТовара <> Значение(Перечисление.ВидыТоваров.Набор)
	|		И РасходнаяНакладнаяСостав.Номенклатура.ВидТовара <> Значение(Перечисление.ВидыТоваров.Услуга)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасходнаяНакладнаяСостав.Номенклатура,
	|		РасходнаяНакладнаяСостав.Ссылка.Склад,
	|		РасходнаяНакладнаяСостав.Ссылка.Фирма,
	|		РасходнаяНакладнаяСостав.СтавкаНДС,
	|		РасходнаяНакладнаяСостав.ТипРеализацииТовара
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		н.Номенклатура,
	|		н.СтавкаНДС,
	|		н.Склад,
	|		н.Статус,
	|		н.Количество,
	|		н.Сумма,
	|		н.СуммаНДС
	|	ИЗ
	|		врНаборы КАК н) КАК т
	|
	|СГРУППИРОВАТЬ ПО
	|	т.Номенклатура,
	|	т.МестоХранения,
	|	т.СтавкаНДС,
	|	т.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врСостав.Номенклатура,
	|	врСостав.МестоХранения,
	|	врСостав.Фирма
	|ИЗ
	|	врСостав КАК врСостав";
	Запрос.УстановитьПараметр("Фирма",Объект.Фирма);
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	тз=Запрос.Выполнить().Выгрузить();
	тз.Свернуть("Номенклатура,МестоХранения,Фирма");
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОстаткиНоменклатуры");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = тз;
	Для каждого к из тз.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(к.Имя, к.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Запрос",Запрос);
	Параметры.Вставить("Объект",Объект);
	Параметры.Вставить("КодОперации",КодОперации);
	Параметры.Вставить("тзОстаткиНоменклатуры",тзОстаткиНоменклатуры);
	Параметры.Вставить("тзРеализация",тзРеализация);
	Параметры.Вставить("РежимПроведения",Режим);
	Параметры.Вставить("ТипДоговора",Объект.ТипДоговора);	
	//++БИТ БВО Комитента берем из документа основания
	//Параметры.Вставить("Комитент", Объект.Контрагент);
	Параметры.Вставить("Комитент", ?(ЭтотОбъект.Возврат И ЗначениеЗаполнено(ДокОснование), ДокОснование.Контрагент, Неопределено));	
	//--БИТ БВО
	Параметры.Вставить("Фирма",Объект.Фирма);
	фл = ПроведениеДокументов.ПровестиСписаниеПоПартиям(Параметры);
	тзОстаткиНоменклатуры.Свернуть("Регистратор,Активность,Период,ВидДвижения,Фирма,МестоХранения,Номенклатура,Статус,Комитент,КодОперации,СтавкаНДС","Количество,Сумма,СуммаНДС,СуммаУпр,СуммаНДСУпр,СуммаПродажи,СуммаНДСПродажи");
	тзОстаткиНоменклатуры.Колонки.Добавить("Контрагент");
	тзОстаткиНоменклатуры.ЗаполнитьЗначения(Объект.Контрагент,"Контрагент");
	Объект.Движения.ОстаткиНоменклатуры.Загрузить(тзОстаткиНоменклатуры);
	
	//popn+
	УчетАлкоголя = УчетАлкогольнойПродукции.ВестиУчетАлкоголя();
	РучнойРасходАлкогольнойПродукции = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.РучнойРасходАлкогольнойПродукции,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Если УчетАлкоголя И НЕ РучнойРасходАлкогольнойПродукции Тогда
		УчетАлкогольнойПродукции.СформироватьРасходПоУчетуАлкоголя(Объект,КодОперации);
	Иначе
		УчетАлкогольнойПродукции.ОчиститьДвиженияПоУчетуАлкоголя(Объект);
	КонецЕсли;
	
	тзОстаткиНоменклатурыКопия = тзОстаткиНоменклатуры.Скопировать();
	ПроведениеДокументов.ПодготовитьТаблицыДляСравнения(Объект.Метаданные().Имя, тзОстаткиНоменклатурыКопия, тзОстаткиНоменклатурыИсходная);
	НеБылоИзменений = ПроведениеДокументов.ТаблицыНаборовЗаписейОдинаковые(тзОстаткиНоменклатурыКопия, тзОстаткиНоменклатурыИсходная);
	Объект.Движения.ОстаткиНоменклатуры.Записывать = НЕ НеБылоИзменений;
	//popn-
	
	//popn+
	//движения по услугам
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяСостав.Ссылка.Дата КАК Период,
	|	РасходнаяНакладнаяСостав.Ссылка.Ссылка КАК Регистратор,
	|	ИСТИНА КАК Активность,
	|	РасходнаяНакладнаяСостав.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяСостав.Ссылка.Фирма КАК Фирма,
	|	&КодОперации КАК КодОперации,
	|	&СтатусПартии КАК Статус,
	|	МАКСИМУМ(РасходнаяНакладнаяСостав.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(ВЫРАЗИТЬ(РасходнаяНакладнаяСостав.Количество * РасходнаяНакладнаяСостав.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(РасходнаяНакладнаяСостав.Сумма) КАК СуммаПродажи,
	|	СУММА(РасходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДСПродажи
	|ИЗ
	|	Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
	|ГДЕ
	|	РасходнаяНакладнаяСостав.Ссылка = &Ссылка
	|	И РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяСостав.Номенклатура,
	|	РасходнаяНакладнаяСостав.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КодОперации", КодОперации);
	Запрос.УстановитьПараметр("СтатусПартии", прчКупляПродажа);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаУслуги = тзОстаткиНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуги,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	//popn-
	
	Объект.Движения.ДвиженияТМЦ.Загрузить(тзОстаткиНоменклатуры);
	Если тзРеализация <> Неопределено Тогда
		Объект.Движения.Реализация.Загрузить(тзРеализация);
	КонецЕсли;
	Если КодОперации = Перечисления.КодыОпераций.ПередачаНаРеализацию Тогда
		тзОстаткиНоменклатуры.Колонки.Добавить("Комиссионер");
		тзОстаткиНоменклатуры.ЗаполнитьЗначения(Объект.Контрагент,"Комиссионер");
		тзОстаткиНоменклатуры.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
		Объект.Движения.ТоварыПереданныеНаКомиссию.Загрузить(тзОстаткиНоменклатуры);
		Объект.Движения.ТоварыПереданныеНаКомиссию.Записывать=Истина;
	КонецЕсли;	
	
	Объект.Движения.ДвиженияТМЦ.Записывать=Истина;
	Объект.Движения.Реализация.Записывать=Истина;
	Возврат фл;
КонецФункции

Процедура СформироватьСчетФактуру(Объект)
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда 
		Если ЗначениеЗаполнено(Объект.Контрагент.Организация) Тогда
			Если Объект.Контрагент.Организация = Объект.Фирма Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастройкаУчетнойПолитики = ОбщегоНазначенияСервер.ПолучитьУчетнуюПолитикуФирмы(Объект.Фирма,Объект.Дата).АвтоматическоеФормированиеСчетаФактуры;
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		НастройкаКонтрагента = НЕ Объект.Контрагент.НеФормироватьСчетаФактурыАвтоматически;
	Иначе
		НастройкаКонтрагента = ИСТИНА;
	КонецЕсли;
	
	Если НастройкаУчетнойПолитики И НастройкаКонтрагента Тогда
		
		СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Объект.Ссылка, Ложь);
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.ПометкаУдаления = Ложь;
			СчетФактураОбъект.Заполнить(Объект.Ссылка);
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Переоформлен документ: "+СчетФактураОбъект);
		Иначе
			СчетФактураОбъект = Документы.СчетФактура.СоздатьДокумент();
			СчетФактураОбъект.Заполнить(Объект.Ссылка);
			СчетФактураОбъект.Дата = Объект.Дата;
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Создан документ: "+СчетФактураОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	//++Минин 30.09.13 ищем подчиненную счет-фактуру
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактура.Ссылка
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.ДокОснование = &ДокОснование";
	
	Запрос.УстановитьПараметр("ДокОснование", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СчФ = Выборка.Ссылка;
		
		Если СчФ.ПометкаУдаления Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(СчФ) + " помечена на удаление!");
		ИначеЕсли СчФ.Проведен Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(СчФ) + " уже проведена!");
		Иначе 	
			Док = счф.получитьОбъект();
			Док.Дата = Объект.Дата;
			Док.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;
	//--Минин
КонецПроцедуры

Процедура УдалитьПроведениеСчетФактуры(Объект)
	
	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуруВыданный(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		СчетФактураОбъект.ПометкаУдаления = Объект.ПометкаУдаления;
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбработкаПроведения(Отказ, Режим)
	//БредовЮГ+ 2013-07-09 Проверка на проведения текущим днем
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Если НачалоДня(ЭтотОбъект.Дата) <> НачалоДня(ТекущаяДата()) Тогда
			ВызватьИсключение "Провести документ можно только текущим днем";
		КонецЕсли;
	КонецЕсли;
	//БредовЮГ- 2013-07-09 Проверка на проведения текущим днем
	Если Не Загружен Тогда
		ОформитьПерепродажу();
	КонецЕсли;
	СформироватьДокументыГотоваяПродукция(ЭтотОбъект,Режим,Отказ);
	Отказ = ПровестиРасходнуюНакладную(ЭтотОбъект,Режим);	
	Если Не Отказ Тогда
		СформироватьСчетФактуру(ЭтотОбъект);
	КонецЕсли; 
	Если НЕ Отказ И ТипЗнч(ЭтотОбъект.ДокОснование) = Тип("ДокументСсылка.ЗаказВнешний") Тогда	
		Если НЕ (ДополнительныеСвойства.Свойство("БылПроведен") И ДополнительныеСвойства.БылПроведен) Тогда
			Узел = ОбменДаннымиEDIСервер.ПолучитьУзелРегистрацииEDIПоставщик(ЭтотОбъект.ДокОснование.EDIПровайдер);
			Если Узел <> Неопределено Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(Узел,ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратнаяНакладнаяОтПокупателя") Тогда
		АдресДоставки = ДанныеЗаполнения.АдресДоставки;
		Грузоотправитель = ДанныеЗаполнения.Грузоотправитель;
		Грузополучатель = ДанныеЗаполнения.Грузополучатель;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Склад = ДанныеЗаполнения.Склад;
		Фирма = ДанныеЗаполнения.Фирма;
		ДокОснование = ДанныеЗаполнения.Ссылка;
		СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
		Для Каждого ТекСтрокаСостав Из ДанныеЗаполнения.Состав Цикл
			НоваяСтрока = Состав.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаСостав.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаСостав.Количество;
			НоваяСтрока.Коэффициент = ТекСтрокаСостав.Коэффициент;
			НоваяСтрока.Номенклатура = ТекСтрокаСостав.Номенклатура;
			НоваяСтрока.СтавкаНДС = ТекСтрокаСостав.СтавкаНДС;
			НоваяСтрока.Сумма = ТекСтрокаСостав.Сумма;
			НоваяСтрока.СуммаНДС = ТекСтрокаСостав.СуммаНДС;
			НоваяСтрока.Цена = ТекСтрокаСостав.Цена;
		КонецЦикла;
		ЗаполнитьТару();
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Склад = ДанныеЗаполнения.Склад;
		ДокОснование = ДанныеЗаполнения;
		ЭтотОбъект.Возврат = истина;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Фирма = ДанныеЗаполнения.Фирма;
		ТипДоговора = ДанныеЗаполнения.ТипДоговора;
		Валюта =  ДанныеЗаполнения.Валюта;
		СтруктураКурса = РаботаСКурсамиВалютКлиентСервер.ПолучитьКурсВалютыНаДату(Валюта);
		Курс = СтруктураКурса.Курс;
		Кратность = СтруктураКурса.Кратность;
		//++Минин
		Основание = "№ "+ДанныеЗаполнения.НомерДокумента + " от " + Формат(ДанныеЗаполнения.ДатаДокумента,"ДФ=dd.MM.yyyy");
		Грузоотправитель = ДанныеЗаполнения.Фирма;
		//--Минин
		
		//++БИТ БВО
		//Запрос = Новый Запрос("ВЫБРАТЬ
		//|	СУчетомРаннихРаходныхНакладных.Номенклатура, 
		//|	СУММА(СУчетомРаннихРаходныхНакладных.Количество)
		//|ПОМЕСТИТЬ СУчетомРаннихРаходныхНакладных		 
		//|ИЗ ( 
		//|	ВЫБРАТЬ
		//|		ПриходнаяНакладнаяСостав.Номенклатура КАК Номенклатура,
		//|		ПриходнаяНакладнаяСостав.Количество КАК Количество
		//|	ИЗ
		//|		Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
		//|	ГДЕ
		//|		ПриходнаяНакладнаяСостав.Ссылка = &Ссылка
		//|		И ПриходнаяНакладнаяСостав.Номенклатура.ВидТовара <> ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
		//|		
		//|	ОБЪЕДИНИТЬ
		//|
		//|	ВЫБРАТЬ
		//|		РасходнаяНакладнаяСостав.Номенклатура,
		//|		РасходнаяНакладнаяСостав.Количество * (-1)
		//|	ИЗ
		//|			Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
		//|		ГДЕ
		//|			РасходнаяНакладнаяСостав.Ссылка В
		//|					(ВЫБРАТЬ
		//|						СтруктураПодчиненности.Ссылка
		//|					ИЗ
		//|						КритерийОтбора.СтруктураПодчиненности(&Ссылка) КАК СтруктураПодчиненности)	
		////++БИТ БВО - Необходимо учитывать и обратные передачи
		//|			И РасходнаяНакладнаяСостав.Ссылка.Проведен = ИСТИНА
		//|
		//|	ОБЪЕДИНИТЬ
		//|
		//|	ВЫБРАТЬ
		//|		ПередачаТоваровМеждуФирмамиСостав.Номенклатура,
		//|		ПередачаТоваровМеждуФирмамиСостав.Количество * (-1)
		//|	ИЗ
		//|			Документ.ПередачаТоваровМеждуФирмами.Состав КАК ПередачаТоваровМеждуФирмамиСостав
		//|		ГДЕ
		//|			ПередачаТоваровМеждуФирмамиСостав.Ссылка В
		//|					(ВЫБРАТЬ
		//|						СтруктураПодчиненности.Ссылка
		//|					ИЗ
		//|						КритерийОтбора.СтруктураПодчиненности(&Ссылка) КАК СтруктураПодчиненности)
		//|			И ПередачаТоваровМеждуФирмамиСостав.Ссылка.Проведен = ИСТИНА
		//|			И ПередачаТоваровМеждуФирмамиСостав.Ссылка.ФирмаПолучатель = &ФирмаПолучатель
		////--БИТ БВО
		//|) КАК СУчетомРаннихРаходныхНакладных 
		//|	СГРУППИРОВАТЬ ПО СУчетомРаннихРаходныхНакладных.Номенклатура;
		//|////////////////////////////////////////////////////////
		//|	ВЫБРАТЬ
		//|		ПриходнаяНакладнаяСостав.Номенклатура,
		//|		ПриходнаяНакладнаяСостав.ЕдиницаИзмерения,
		//|		СУчетомРаннихРаходныхНакладных.Количество,
		//|		ПриходнаяНакладнаяСостав.Коэффициент,
		//|		ПриходнаяНакладнаяСостав.Цена,
		//|		ПриходнаяНакладнаяСостав.ЦенаБезНДС,
		//|		ПриходнаяНакладнаяСостав.СуммаНДС,
		//|		ПриходнаяНакладнаяСостав.Сумма,
		//|		ПриходнаяНакладнаяСостав.СуммаБезНДС,
		//|		ПриходнаяНакладнаяСостав.СтавкаНДС
		//|	ИЗ
		//|		Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СУчетомРаннихРаходныхНакладных 
		//|			ПО ПриходнаяНакладнаяСостав.Номенклатура = СУчетомРаннихРаходныхНакладных.Номенклатура
		//|	ГДЕ
		//|		ПриходнаяНакладнаяСостав.Ссылка = &Ссылка
		//|		И ПриходнаяНакладнаяСостав.Номенклатура.ВидТовара <> ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
		//|		И СУчетомРаннихРаходныхНакладных.Количество > 0	");		
		//Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения);
		////++БИТ БВО
		//Запрос.УстановитьПараметр("ФирмаПолучатель" , ДанныеЗаполнения.Фирма);
		////--БИТ БВО
		ТаблицаДокументов = Новый ТаблицаЗначений;	
		ТаблицаДокументов.Колонки.Добавить("Ссылка"					, Новый ОписаниеТипов("ДокументСсылка.РасходнаяНакладная, ДокументСсылка.ПриходнаяНакладная, ДокументСсылка.КорректировкаРеализации, ДокументСсылка.КорректировкаПоступления, ДокументСсылка.ПередачаТоваровМеждуФирмами, ДокументСсылка.КоррекцияЗапасов"));
		ТаблицаДокументов.Колонки.Добавить("ТипДокумента"			, Новый ОписаниеТипов("Тип"));	
		ТаблицаДокументов.Колонки.Добавить("ДокОснование"			, Новый ОписаниеТипов("ДокументСсылка.РасходнаяНакладная, ДокументСсылка.ПриходнаяНакладная, ДокументСсылка.КорректировкаРеализации, ДокументСсылка.КорректировкаПоступления, ДокументСсылка.ПередачаТоваровМеждуФирмами, ДокументСсылка.КоррекцияЗапасов"));
		ТаблицаДокументов.Колонки.Добавить("ПоследнийДокВЦепочке"	, Новый ОписаниеТипов("Булево"));
		
		//Первоначальный документ прихода нужен на случай, если не будет корректировок поступления
		НоваяСтрока = ТаблицаДокументов.Добавить();		
		НоваяСтрока.Ссылка			= ДанныеЗаполнения;
		НоваяСтрока.ТипДокумента	= ТипЗнч(ДанныеЗаполнения);
		НоваяСтрока.ДокОснование	= Неопределено;
		НоваяСтрока.ПоследнийДокВЦепочке = Ложь;
		
		ЕстьПодчиненныеДокументы = Izh_ОбщегоНазначенияСервер.ПолучитьПодчиненныеДокументы(ДанныеЗаполнения, ТаблицаДокументов, ДанныеЗаполнения);
		Если ТаблицаДокументов.Количество() > 0 Тогда
			
			ТЗ = Izh_ОбщегоНазначенияСервер.ПолучитьТаблицуСИтоговымЗначениями(ТаблицаДокументов);
			
			Состав.Загрузить(ТЗ);
			ЗаполнитьТару();
		КонецЕсли;				 
		//--БИТ БВО
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Счет") Тогда
		Контрагент = ДанныеЗаполнения.Контрагент;
		Склад = ДанныеЗаполнения.Склад;
		Фирма = ДанныеЗаполнения.Фирма;
		ДокОснование = ДанныеЗаполнения.Ссылка;
		Для Каждого ТекСтрокаСостав Из ДанныеЗаполнения.Состав Цикл
			НоваяСтрока = Состав.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаСостав.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаСостав.Количество;
			НоваяСтрока.Коэффициент = ТекСтрокаСостав.Коэффициент;
			НоваяСтрока.Номенклатура = ТекСтрокаСостав.Номенклатура;
			НоваяСтрока.СтавкаНДС = ТекСтрокаСостав.СтавкаНДС;
			НоваяСтрока.Сумма = ТекСтрокаСостав.Сумма;
			НоваяСтрока.СуммаНДС = ТекСтрокаСостав.СуммаНДС;
			НоваяСтрока.Цена = ТекСтрокаСостав.Цена;
		КонецЦикла;
		ЗаполнитьТару();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РаспоряжениеНаОтгрузку") Тогда	
		Контрагент = ДанныеЗаполнения.Получатель;
		СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
		Фирма = СтруктурнаяЕдиница.Организация;
		ДокОснование = ДанныеЗаполнения;
		НомерRMS = ДанныеЗаполнения.Номер;
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЭтотОбъект.Возврат = Истина;
		КонецЕсли;
		Состав.Загрузить(ДанныеЗаполнения.Состав.Выгрузить());
		ЗаполнитьТару();
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказВнешний") Тогда	
		//++Минин
		Если ЭтотОбъект.ЭтоНовый() Тогда
			СуществующийДокумент = НайтиПодчиненныйДокумент(ДанныеЗаполнения);
			Если ЗначениеЗаполнено(СуществующийДокумент) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='На основании документа %1 уже был введен %2'"),
				ДанныеЗаполнения,
				СуществующийДокумент);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
		//++Минин
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		Фирма = ДанныеЗаполнения.Фирма;
		ДокОснование = ДанныеЗаполнения;
		//++БИТ БВО
		Дата = ТекущаяДата();
		Склад = ДанныеЗаполнения.Склад;
		//--БИТ БВО
		//++Минин
		//Состав.Загрузить(ДанныеЗаполнения.Состав.Выгрузить());
		НПП=0;
		Для Каждого эл из ДанныеЗаполнения.Состав Цикл
			Стр = Состав.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,эл);
			НПП = НПП+1;
			Стр.НПП = НПП;
		КонецЦикла;
		//--Минин
		ЗаполнитьТару();
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Источник = "ДанныеТСД" Тогда
			//Номер = ДанныеЗаполнения.Номер;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокОснование)
				И (ТипЗнч(ДанныеЗаполнения.ДокОснование) = Тип("ДокументСсылка.РаспоряжениеНаОтгрузку")
				Или ТипЗнч(ДанныеЗаполнения.ДокОснование) = Тип("ДокументСсылка.ЗаказВнешний")) Тогда
				Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РаспоряжениеНаОтгрузку") Тогда
					Контрагент = ДанныеЗаполнения.ДокОснование.Получатель;
					ДокОснование = ДанныеЗаполнения.ДокОснование;
					НомерRMS = ДанныеЗаполнения.ДокОснование.Номер;
					Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
						ЭтотОбъект.Возврат = Истина;
					КонецЕсли;
				ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказВнешний") Тогда
					Контрагент = ДанныеЗаполнения.ДокОснование.Контрагент;
					Фирма = ДанныеЗаполнения.ДокОснование.Фирма;
					ДокОснование = ДанныеЗаполнения.ДокОснование;
				КонецЕсли;
				
				Состав.Загрузить(ДанныеЗаполнения.ДокОснование.Состав.Выгрузить());
				Для каждого сСостава Из Состав Цикл
					сСостава.Количество = 0;
				КонецЦикла;
			Иначе
				Если ДанныеЗаполнения.Свойство("Возврат") Тогда
					ЭтотОбъект.Возврат = ДанныеЗаполнения.Возврат;
				КонецЕсли;
				Если Контрагент = Тип("СправочникСсылка.Контрагенты") Тогда	//пока только они
					Контрагент = ДанныеЗаполнения.Контрагент;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокОснование) Тогда
					ДокОснование = ДанныеЗаполнения.ДокОснование;
				КонецЕсли;
			КонецЕсли;
			Для каждого эл Из ДанныеЗаполнения.Состав Цикл	//массив структур
				НайденныеСтроки = Состав.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", эл.Номенклатура, эл.ЕдиницаИзмерения));
				Если НайденныеСтроки.Количество() = 0 Тогда
					сСостава = ЭтотОбъект.Состав.Добавить();
					ЗаполнитьЗначенияСвойств(сСостава, эл);//ключи Эл - "Номенклатура, ЕдиницаИзмерения, Количество, Коэффициент, Цена, Сумма"
					сСостава.СтавкаНДС = сСостава.Номенклатура.СтавкаНДС;
				Иначе
					сСостава = НайденныеСтроки[0];
					сСостава.Количество = эл.Количество;
					сСостава.Сумма = 0;	//чтобы пересчиталось
				КонецЕсли;
				Если сСостава.Сумма = 0 Тогда
					сСостава.Сумма = Окр(сСостава.Количество * сСостава.Цена, 2);
				КонецЕсли;
				СтавкаНДССтавка = ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(сСостава.СтавкаНДС);
				сСостава.СуммаНДС = СтавкаНДССтавка * сСостава.Сумма / (100 + СтавкаНДССтавка);
			КонецЦикла;
			ЗаполнитьТару();
		КонецЕсли;
		//++Минин
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Перемещение") Тогда 
		Склад = ДанныеЗаполнения.СкладПолучатель;
		Фирма = ДанныеЗаполнения.Фирма;
		ДокОснование = ДанныеЗаполнения;
		Состав.Загрузить(ДанныеЗаполнения.Состав.Выгрузить());
		Для каждого Элем Из Состав Цикл
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	НоменклатураКонтрагента.Цена
			|ПОМЕСТИТЬ ВТЦена
			|ИЗ
			|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
			|ГДЕ
			|	НоменклатураКонтрагента.Номенклатура = &Номенклатура
			|	И НоменклатураКонтрагента.ОсновнойПоставщик = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТЦена.Цена,
			|	МассогабаритныеХарактеристики.ЕдиницаВеса,
			|	МассогабаритныеХарактеристики.Брутто
			|ИЗ
			|	ВТЦена КАК ВТЦена,
			|	РегистрСведений.МассогабаритныеХарактеристики КАК МассогабаритныеХарактеристики
			|ГДЕ
			|	МассогабаритныеХарактеристики.Номенклатура = &Номенклатура
			|	И МассогабаритныеХарактеристики.ЕдиницаИзмерения = &ЕдиницаИзмерения";
			Если Элем.Номенклатура.БазоваяЕдиницаИзмерения <> Элем.ЕдиницаИзмерения.ЕдиницаПоКлассификатору Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И МассогабаритныеХарактеристики.Контрагент = &Контрагент";
				Запрос.УстановитьПараметр("Контрагент", Элем.ЕдиницаИзмерения.Контрагент);
			КонецЕсли;
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", Элем.ЕдиницаИзмерения.ЕдиницаПоКлассификатору);
			Запрос.УстановитьПараметр("Номенклатура",Элем.Номенклатура);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Возврат;
			КонецЕсли;				
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Элем.Цена = Выборка.Цена;
			Элем.Сумма = Элем.Количество*Элем.Цена;
			Элем.СтавкаНДС = Элем.Номенклатура.СтавкаНДС;
			СтавкаНДССтавка = ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(Элем.СтавкаНДС);
			Элем.СуммаНДС = СтавкаНДССтавка * Элем.Сумма / (100 + СтавкаНДССтавка);
			Элем.ЕдиницаВеса = Выборка.ЕдиницаВеса;
			Элем.Вес = Выборка.Брутто*Элем.Количество;
		КонецЦикла;
		ЭтотОбъект.Возврат = Истина;
		ЗаполнитьТару();
		//--Минин
	КонецЕсли;
	
	//++БИТ БВО Перераспределение номенклатура по остаткам при вводе на основании		
	ПерераспределитьСоставПоОстаткам();	
	//--БИТ БВО
	
	ИнициализироватьДокумент();
КонецПроцедуры

Процедура ИнициализироватьДокумент()Экспорт
	Автор = ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Если ЗначениеЗаполнено(Склад) Тогда
			СтруктурнаяЕдиница = Склад.Владелец;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Если ТипЗнч(Контрагент) = ТипЗнч("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Контрагент.Валюта) Тогда
			Валюта = Контрагент.Валюта;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
				Валюта = СтруктурныеЕдиницы.ПолучитьВалютуТекущейСЕ();
			Иначе	
				Валюта = СтруктурнаяЕдиница.Валюта;
			КонецЕсли;	
		КонецЕсли;
		
		СтруктураКурса = РаботаСКурсамиВалют.ЗаполнитьДанныеКурсаДляВалюты(Валюта);
		Курс = СтруктураКурса.Курс;
		Кратность = СтруктураКурса.Кратность;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе	
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		Иначе
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы;
		КонецЕсли;	
		АдресДоставки = УправлениеКонтактнойИнформациейСервер.ПолучитьКонтактнуюИнформацияОбъекта(Контрагент,ВидКонтактнойИнформации);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТипДоговора) Тогда
		ТипДоговора = Перечисления.ТипыДоговоров.КупляПродажа;
	КонецЕсли;
	
	// BiT ALProzorov 24/08/2015 -->>
	Если ЭтотОбъект.Возврат Тогда
		Грузополучатель = Контрагент;
	КонецЕсли;
	// BiT ALProzorov 24/08/2015 <<--
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
	//	Отказ = РаботаСФормамиСервер.ЗапрещеноРедактировать(ЭтотОбъект.Ссылка);
	//	Если Отказ Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//	//КонецЕсли;	
	СуммаИтого = Состав.Итог("Сумма");
	СуммаНДСИтого = Состав.Итог("СуммаНДС");
	СтруктурнаяЕдиница = Склад.Владелец;
	
	Если Не ЭтотОбъект.Возврат
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И НЕ Контрагент.Покупатель Тогда
		Сообщить(НСтр("ru = 'Контрагент не является покупателем. Продажи запрещены!'"));
		Отказ = Истина;
	КонецЕсли;
	
	//++Минин
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасходнаяНакладнаяСостав.НомерСтроки,
	|	РасходнаяНакладнаяСостав.Номенклатура
	|ПОМЕСТИТЬ ВТСостав
	|ИЗ
	|	&тзСостав КАК РасходнаяНакладнаяСостав
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РасходнаяНакладнаяСостав.НомерСтроки) КАК НомерСтроки,
	|	РасходнаяНакладнаяСостав.Номенклатура
	|ИЗ
	|	ВТСостав КАК РасходнаяНакладнаяСостав
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяСостав.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РасходнаяНакладнаяСостав.НомерСтроки) > 1";
	
	//++БИТ БВО Теперь строки с разными ставками НДС и типом реализации не являются дублями
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасходнаяНакладнаяСостав.НомерСтроки,
	|	РасходнаяНакладнаяСостав.СтавкаНДС,
	|	РасходнаяНакладнаяСостав.ТипРеализацииТовара,
	|	РасходнаяНакладнаяСостав.Номенклатура
	|ПОМЕСТИТЬ ВТСостав
	|ИЗ
	|	&тзСостав КАК РасходнаяНакладнаяСостав
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РасходнаяНакладнаяСостав.НомерСтроки) КАК НомерСтроки,
	|	РасходнаяНакладнаяСостав.СтавкаНДС,
	|	РасходнаяНакладнаяСостав.ТипРеализацииТовара,
	|	РасходнаяНакладнаяСостав.Номенклатура
	|ИЗ
	|	ВТСостав КАК РасходнаяНакладнаяСостав
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяСостав.Номенклатура,
	|	РасходнаяНакладнаяСостав.СтавкаНДС,
	|	РасходнаяНакладнаяСостав.ТипРеализацииТовара
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РасходнаяНакладнаяСостав.НомерСтроки) > 1";
	//--БИТ БВО
	
	Запрос.УстановитьПараметр("тзСостав",ЭтотОбъект.Состав);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Отказ = Истина;
		Выборка = Результат.Выбрать();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дублирование номенклатуры!");
		Пока Выборка.Следующий() Цикл
			Отбор = Новый Структура("Номенклатура",Выборка.Номенклатура);
			Массив = ЭтотОбъект.Состав.НайтиСтроки(Отбор);
			Для Стр=0 по Массив.ВГраница() Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(Массив[Стр].Номенклатура)+" Строка: "+Массив[Стр].НомерСтроки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	//--Минин
	
	//{ ВетровИА 26.03.2015 Наряд №000145347
	Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда 
		Отказ = Izh_ОбработкаТабличныхЧастейКлиентСервер.ПроверитьНаПравилоПерепродажи(ЭтотОбъект);
	КонецЕсли;	
	// ВетровИА 26.03.2015 Наряд №000145347}
	
	//{ВетровИА 23.06.2015 Наряд №000154451
	Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы")  Тогда 
		Отказ = Izh_ОбработкаТабличныхЧастейКлиентСервер.ПроверитьНаОграниченияПоВозвратамИСписаниям(ЭтотОбъект);
	ИначеЕсли ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда  	
		//++Минин 0000131875 2015-06-26 добавил проверку на возврат.
		Если ЭтотОбъект.Возврат Тогда 
			Если НЕ ЭтотОбъект.Контрагент.ВозвратыРазрешены Тогда
				Сообщить("По указанному контрагенту возвраты запрещены.");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	// ВетровИА 23.06.2015 Наряд №000154451 }
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокОснование = Неопределено;
	НомерRMS = 0;
КонецПроцедуры

Функция ПолучитьСтрокуПробелов(ч)
	
	стр="";
	
	Для сч=1 по ч Цикл
		
		стр=стр+" ";
		
	КонецЦикла;
	
	Возврат стр;	
КонецФункции	

Функция ОформитьПерепродажу()
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Состав.Номенклатура,
	|	Состав.ЕдиницаИзмерения,
	|	Состав.Количество,
	|	Состав.Коэффициент,
	|	Состав.Цена,
	|	Состав.СуммаНДС,
	|	Состав.Сумма,
	|	Состав.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА (НЕ Перепродажа1.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа1.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа2.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа2.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа3.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа3.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа4.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа4.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа5.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа5.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа6.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа6.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа7.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа7.ФирмаПродажи
	|	КОНЕЦ КАК ФирмаПерепродажи,
	|	ВЫБОР
	|		КОГДА (НЕ Перепродажа1.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа1.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа2.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа2.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа3.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа3.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа4.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа4.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа5.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа5.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа6.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа6.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа7.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа7.ПроцентПрибыли
	|	КОНЕЦ КАК ПроцентПрибыли,
	|	ВЫБОР
	|		КОГДА (НЕ Перепродажа1.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа1.ТипДоговора
	|		КОГДА (НЕ Перепродажа2.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа2.ТипДоговора
	|		КОГДА (НЕ Перепродажа3.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа3.ТипДоговора
	|		КОГДА (НЕ Перепродажа4.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа4.ТипДоговора
	|		КОГДА (НЕ Перепродажа5.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа5.ТипДоговора
	|		КОГДА (НЕ Перепродажа6.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа6.ТипДоговора
	|		КОГДА (НЕ Перепродажа7.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа7.ТипДоговора
	|	КОНЕЦ КАК ТипДоговора
	|ИЗ
	|	Документ.РасходнаяНакладная.Состав КАК Состав
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Перепродажа.СрезПоследних(
	|				&Дата,
	|				ФирмаПокупки = &Фирма
	|					И СтруктурнаяЕдиница = &СЕ) КАК Перепродажа1
	|		ПО Состав.Номенклатура.Код = Перепродажа1.ГруппаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Перепродажа.СрезПоследних(
	|				&Дата,
	|				ФирмаПокупки = &Фирма
	|					И СтруктурнаяЕдиница = &СЕ) КАК Перепродажа2
	|		ПО Состав.Номенклатура.Родитель.Код = Перепродажа2.ГруппаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Перепродажа.СрезПоследних(
	|				&Дата,
	|				ФирмаПокупки = &Фирма
	|					И СтруктурнаяЕдиница = &СЕ) КАК Перепродажа3
	|		ПО Состав.Номенклатура.Родитель.Родитель.Код = Перепродажа3.ГруппаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Перепродажа.СрезПоследних(
	|				&Дата,
	|				ФирмаПокупки = &Фирма
	|					И СтруктурнаяЕдиница = &СЕ) КАК Перепродажа4
	|		ПО Состав.Номенклатура.Родитель.Родитель.Родитель.Код = Перепродажа4.ГруппаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Перепродажа.СрезПоследних(
	|				&Дата,
	|				ФирмаПокупки = &Фирма
	|					И СтруктурнаяЕдиница = &СЕ) КАК Перепродажа5
	|		ПО Состав.Номенклатура.Родитель.Родитель.Родитель.Родитель.Код = Перепродажа5.ГруппаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Перепродажа.СрезПоследних(
	|				&Дата,
	|				ФирмаПокупки = &Фирма
	|					И СтруктурнаяЕдиница = &СЕ) КАК Перепродажа6
	|		ПО Состав.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Код = Перепродажа6.ГруппаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Перепродажа.СрезПоследних(
	|				&Дата,
	|				ФирмаПокупки = &Фирма
	|					И СтруктурнаяЕдиница = &СЕ) КАК Перепродажа7
	|		ПО (Перепродажа7.ГруппаНоменклатуры = &ПустаяСтрока)
	|ГДЕ
	|	Состав.Ссылка = &Ссылка
	|	И (НЕ ВЫБОР
	|				КОГДА (НЕ Перепродажа1.ФирмаПродажи ЕСТЬ NULL )
	|					ТОГДА Перепродажа1.ФирмаПродажи
	|				КОГДА (НЕ Перепродажа2.ФирмаПродажи ЕСТЬ NULL )
	|					ТОГДА Перепродажа2.ФирмаПродажи
	|				КОГДА (НЕ Перепродажа3.ФирмаПродажи ЕСТЬ NULL )
	|					ТОГДА Перепродажа3.ФирмаПродажи
	|				КОГДА (НЕ Перепродажа4.ФирмаПродажи ЕСТЬ NULL )
	|					ТОГДА Перепродажа4.ФирмаПродажи
	|				КОГДА (НЕ Перепродажа5.ФирмаПродажи ЕСТЬ NULL )
	|					ТОГДА Перепродажа5.ФирмаПродажи
	|				КОГДА (НЕ Перепродажа6.ФирмаПродажи ЕСТЬ NULL )
	|					ТОГДА Перепродажа6.ФирмаПродажи
	|				КОГДА (НЕ Перепродажа7.ФирмаПродажи ЕСТЬ NULL )
	|					ТОГДА Перепродажа7.ФирмаПродажи
	|			КОНЕЦ ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	Состав.Номенклатура,
	|	Состав.ЕдиницаИзмерения,
	|	Состав.Количество,
	|	Состав.Коэффициент,
	|	Состав.Цена,
	|	Состав.СуммаНДС,
	|	Состав.Сумма,
	|	Состав.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА (НЕ Перепродажа1.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа1.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа2.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа2.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа3.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа3.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа4.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа4.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа5.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа5.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа6.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа6.ФирмаПродажи
	|		КОГДА (НЕ Перепродажа7.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа7.ФирмаПродажи
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Перепродажа1.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа1.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа2.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа2.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа3.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа3.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа4.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа4.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа5.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа5.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа6.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа6.ПроцентПрибыли
	|		КОГДА (НЕ Перепродажа7.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа7.ПроцентПрибыли
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Перепродажа1.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа1.ТипДоговора
	|		КОГДА (НЕ Перепродажа2.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа2.ТипДоговора
	|		КОГДА (НЕ Перепродажа3.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа3.ТипДоговора
	|		КОГДА (НЕ Перепродажа4.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа4.ТипДоговора
	|		КОГДА (НЕ Перепродажа5.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа5.ТипДоговора
	|		КОГДА (НЕ Перепродажа6.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа6.ТипДоговора
	|		КОГДА (НЕ Перепродажа7.ФирмаПродажи ЕСТЬ NULL )
	|			ТОГДА Перепродажа7.ТипДоговора
	|	КОНЕЦ
	|ИТОГИ ПО
	|	ФирмаПерепродажи,
	|	ТипДоговора");
	Запрос.УстановитьПараметр("ПустаяСтрока",ПолучитьСтрокуПробелов(Метаданные.Справочники.Номенклатура.ДлинаКода)); 
	Запрос.УстановитьПараметр("Дата",ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("Фирма",ЭтотОбъект.Фирма);
	Запрос.УстановитьПараметр("СЕ",ЭтотОбъект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	
	//{ СИТЕК БрыляковЕЮ 2014-10-23  
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Состав.Номенклатура КАК Номенклатура,
		|	Состав.ЕдиницаИзмерения,
		|	Состав.Количество,
		|	Состав.Коэффициент,
		|	Состав.Цена,
		|	Состав.СуммаНДС,
		|	Состав.Сумма,
		|	Состав.СтавкаНДС
		|ПОМЕСТИТЬ ВТ_Состав
		|ИЗ
		|	Документ.РасходнаяНакладная.Состав КАК Состав
		|ГДЕ
		|	Состав.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура";
	Запрос.Выполнить();
	ПравилаПерепродажи = РегистрыСведений.Перепродажа.ПравилаДляОформленияПерепродажиВДокументах(Запрос.МенеджерВременныхТаблиц, СтруктурнаяЕдиница, Фирма, Дата);
	// СИТЕК БрыляковЕЮ 2014-10-23 }
	
	//найдем уже созданные документ перепродажи
	тз = ПолучитьДокументыПерепродажи();
	
	//{ СИТЕК БрыляковЕЮ 2014-10-23  
	// Исходный текст --> 
	//ВыборкаФирмы=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	// <-- Исходный текст 
	ВыборкаФирмы = ПравилаПерепродажи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	// СИТЕК БрыляковЕЮ 2014-10-23 }
	Пока ВыборкаФирмы.Следующий() Цикл
		ВыборкаТипДоговора=ВыборкаФирмы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТипДоговора.Следующий() Цикл
			
			//{Ситек ДойниковПВ 2015-10-19 Если фирма покупки совпадает с фирмой продажи, ПередачаТоваровМеждуФирмами не формируем.} 
			Если ЭтотОбъект.Фирма = ВыборкаТипДоговора.ФирмаПерепродажи Тогда
				Продолжить;
			КонецЕсли;	
			//}Ситек ДойниковПВ 2015-10-19

			//определим ссылку на уже существующий документ перепродажи
			мсв = тз.НайтиСтроки(Новый Структура("Фирма,ФирмаПолучатель,ТипДоговора",ВыборкаТипДоговора.ФирмаПерепродажи,ЭтотОбъект.Фирма,ВыборкаТипДоговора.ТипДоговора));
			Если мсв.Количество() > 0 Тогда
				ДокОбъект = мсв[0].Ссылка.ПолучитьОбъект();
				//удалим ссылку из таблицы
				тз.Удалить(мсв[0]);
			Иначе
				ДокОбъект = Документы.ПередачаТоваровМеждуФирмами.СоздатьДокумент();
			КонецЕсли;	
			
			ДокОбъект.Валюта = ЭтотОбъект.СтруктурнаяЕдиница.Валюта;
			ДокОбъект.Дата   = ЭтотОбъект.Дата;
			ДокОбъект.ДокОснование = ЭтотОбъект.Ссылка;
			ДокОбъект.ПометкаУдаления=Ложь;
			ДокОбъект.Возврат = Истина;
			ДокОбъект.Кратность = 1;
			ДокОбъект.Курс = 1;
			ДокОбъект.Склад = ЭтотОбъект.Склад;
			ДокОбъект.СтруктурнаяЕдиница = ЭтотОбъект.СтруктурнаяЕдиница;
			ДокОбъект.ТипДоговора = ВыборкаТипДоговора.ТипДоговора;
			ДокОбъект.Фирма = ВыборкаТипДоговора.ФирмаПерепродажи;
			ДокОбъект.ФирмаПолучатель = ЭтотОбъект.Фирма;
			
			ДокОбъект.Состав.Очистить();
			ВыборкаСостав = ВыборкаТипДоговора.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСостав.Следующий() Цикл
				НоваяСтрока = ДокОбъект.Состав.Добавить();
				НоваяСтрока.ЕдиницаИзмерения = ВыборкаСостав.ЕдиницаИзмерения;
				НоваяСтрока.Количество = ВыборкаСостав.Количество;
				НоваяСтрока.Коэффициент  = ВыборкаСостав.Коэффициент;
				НоваяСтрока.Номенклатура = ВыборкаСостав.Номенклатура;
				НоваяСтрока.СтавкаНДС    = ВыборкаСостав.СтавкаНДС;
				чЦена = ВыборкаСостав.Цена + Окр(ВыборкаСостав.Цена * ВыборкаСостав.ПроцентПрибыли / 100,2);
				НоваяСтрока.Цена     = чЦена;
				НоваяСтрока.Сумма    = Окр(ВыборкаСостав.Количество * чЦена, 2); 
				НоваяСтрока.СуммаНДС    = Окр(НоваяСтрока.Сумма * НоваяСтрока.СтавкаНДС.Ставка /(100 + НоваяСтрока.СтавкаНДС.Ставка),2);				
			КонецЦикла;
			//++БИТ БВО Необходимо проставить статусы
			ДокОбъект.ПерераспределитьСоставПоОстаткам();
			//--БИТ БВО
			
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого с из тз цикл
		
		ДокОбъект = с.Ссылка.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;	
	
КонецФункции	

Функция ПолучитьДокументыПерепродажи()
	ЗапросДокументы = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктураПодчиненности.Ссылка,
	|	СтруктураПодчиненности.Ссылка.Фирма КАК Фирма,
	|	СтруктураПодчиненности.Ссылка.ФирмаПолучатель КАК ФирмаПолучатель,
	|	СтруктураПодчиненности.Ссылка.ТипДоговора КАК ТипДоговора
	|ИЗ
	|	КритерийОтбора.СтруктураПодчиненности(&ДокументОснование) КАК СтруктураПодчиненности
	|ГДЕ
	|	СтруктураПодчиненности.Ссылка ССЫЛКА Документ.ПередачаТоваровМеждуФирмами");
	ЗапросДокументы.УстановитьПараметр("ДокументОснование",ЭтотОбъект.Ссылка);
	тз = ЗапросДокументы.Выполнить().Выгрузить();
	Возврат тз;
КонецФункции

Функция УдалитьДокументыПерепродажи()
	тз = ПолучитьДокументыПерепродажи();
	Для каждого с из тз Цикл
		Попытка 
			ДокОбъект = с.Ссылка.ПолучитьОбъект();
			ДокОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Истина;
		КонецПопытки;	
	КонецЦикла;	 
	Возврат Ложь;
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если Не Загружен Тогда
		Отказ = УдалитьДокументыПерепродажи();
	КонецЕсли;
	//УдалитьПроведениеСчетФактуры(ЭтотОбъект);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если Не Проведен Тогда
		УдалитьПроведениеСчетФактуры(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

//алгоритм формирования следуюущий:
//1. определяем по регистру ПродукцияПоЦехам какие склады производства определены для номенклатура
//2. для складов производства с включенным флагом Автопроизводство если товара нет на складе (торговом зале), то создается документ ГотоваяПродукция 
Процедура СформироватьДокументыГотоваяПродукция(Объект,Режим,Отказ)
	
	флВыпускПродукцииПоПлановымЦенам = ОбщегоНазначенияСервер.ПолучитьУчетнуюПолитикуФирмы(Фирма,Дата).ВыпускПродукцииПоПлановымЦенам;
	Момент = ПроведениеДокументов.ПолучитьМоментВремени(Объект.Ссылка,Объект.Дата,Режим);
	
	
	//получим список уже созданных документов ГотоваяПродукция
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГотоваяПродукция.Ссылка
	|ИЗ
	|	Документ.ГотоваяПродукция КАК ГотоваяПродукция
	|ГДЕ
	|	ГотоваяПродукция.ДокОснование = &ДокОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ГотоваяПродукция.Ссылка");
	Запрос.УстановитьПараметр("ДокОснование",Объект.Ссылка);
	тзГотоваяПродукция = Запрос.Выполнить().Выгрузить();
	
	//Для каждого СтрокаТзГотоваяПродукция из тзГотоваяПродукция Цикл
	//	ДокументОбъект = СтрокаТзГотоваяПродукция.Ссылка.ПолучитьОбъект();
	//	Попытка
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//		Отказ = Истина;
	//		Возврат;
	//	КонецПопытки;	
	//КонецЦикла;	
	
	//popn+	
	Если тзГотоваяПродукция.Количество() > 0 Тогда
		ТолькоПросмотрДокумента = РаботаСФормамиСервер.ЗапрещеноРедактировать(тзГотоваяПродукция[0].Ссылка);
		Если ТолькоПросмотрДокумента Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТзГотоваяПродукция из тзГотоваяПродукция Цикл
		ТолькоПросмотрДокумента = РаботаСФормамиСервер.ЗапрещеноРедактировать(СтрокаТзГотоваяПродукция.Ссылка);
		ДокументОбъект = СтрокаТзГотоваяПродукция.Ссылка.ПолучитьОбъект();
		Если ТолькоПросмотрДокумента Тогда
			СпособЗаписиДокумента = РежимЗаписиДокумента.Проведение;
		Иначе 
			СпособЗаписиДокумента = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		ДокументОбъект.Записать(СпособЗаписиДокумента);
	КонецЦикла;	
	//popn-	
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПродукцияПоЦехам.Склад) КАК Склад,
	|	ПродукцияПоЦехам.Продукция
	|ПОМЕСТИТЬ ПродукцияПоЦехам
	|ИЗ
	|	РегистрСведений.ПродукцияПоЦехам КАК ПродукцияПоЦехам
	|ГДЕ
	|	ПродукцияПоЦехам.Склад.Автопроизводство = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродукцияПоЦехам.Продукция
	|;";
	
	Если флВыпускПродукцииПоПлановымЦенам Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ПлановаяСебестоимостьПродукции.Продукция КАК Номенклатура,
		|	ПлановаяСебестоимостьПродукции.Себестоимость КАК Цена
		|ПОМЕСТИТЬ ПлановыеЦены
		|ИЗ
		|	РегистрСведений.ПлановаяСебестоимостьПродукции.СрезПоследних(&МоментВремени, ) КАК ПлановаяСебестоимостьПродукции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПродукцияПоЦехам КАК ПродукцияПоЦехам
		|		ПО ПлановаяСебестоимостьПродукции.Продукция = ПродукцияПоЦехам.Продукция
		|;";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяСостав.Номенклатура,
	|	ПродукцияПоЦехам.Склад КАК СкладПроизводства,
	|	РасходнаяНакладнаяСостав.Ссылка.Склад КАК Склад,
	|	РасходнаяНакладнаяСостав.Количество * РасходнаяНакладнаяСостав.Коэффициент КАК Количество,
	|	ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	"+?(флВыпускПродукцииПоПлановымЦенам," ЕСТЬNULL(ПлановыеЦены.Цена,0) "," 0 ")+" КАК ПлановаяЦена
	|ИЗ
	|	Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПродукцияПоЦехам КАК ПродукцияПоЦехам
	|		ПО РасходнаяНакладнаяСостав.Номенклатура = ПродукцияПоЦехам.Продукция
	|	"+?(флВыпускПродукцииПоПлановымЦенам," ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеЦены КАК ПлановыеЦены
	|		ПО РасходнаяНакладнаяСостав.Номенклатура = ПлановыеЦены.Номенклатура ","")+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|				&МоментВремени,
	|				МестоХранения В
	|						(ВЫБРАТЬ
	|							РасходнаяНакладнаяСостав.Ссылка.Склад
	|						ИЗ
	|							Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
	|						ГДЕ
	|							РасходнаяНакладнаяСостав.Ссылка = &Ссылка
	|						СГРУППИРОВАТЬ ПО
	|										РасходнаяНакладнаяСостав.Ссылка.Склад)
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ПродукцияПоЦехам1.Продукция
	|						ИЗ
	|							ПродукцияПоЦехам КАК ПродукцияПоЦехам1)
	|					И Фирма = &Фирма) КАК ОстаткиНоменклатурыОстатки
	|		ПО РасходнаяНакладнаяСостав.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
	|ГДЕ
	|	РасходнаяНакладнаяСостав.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	СкладПроизводства,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПродукцияПоЦехам
	|;";
	Если флВыпускПродукцииПоПлановымЦенам Тогда
		ТекстЗапроса = ТекстЗапроса + " УНИЧТОЖИТЬ ПлановыеЦены ";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("Фирма",Объект.Фирма);
	Запрос.УстановитьПараметр("МоментВремени",Момент);
	ВыборкаСкладПроизводства = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСкладПроизводства.Следующий() Цикл
		ВыборкаСклад = 	ВыборкаСкладПроизводства.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСклад.Следующий() Цикл
			
			//получим документ ГотоваяПродукция из таблицы уже ранее введенных
			Если тзГотоваяПродукция.Количество()>0 Тогда
				ДокументОбъект = тзГотоваяПродукция[0].Ссылка.ПолучитьОбъект();
			Иначе	
				ДокументОбъект = Документы.ГотоваяПродукция.СоздатьДокумент();
			КонецЕсли;
			ДокументОбъект.Фирма              = Объект.Фирма;
			ДокументОбъект.Дата               = Объект.Дата;
			ДокументОбъект.ВидПроизводства    = Перечисления.ВидыПроизводства.Приготовление;
			ДокументОбъект.ДокОснование       = Объект.Ссылка;
			ДокументОбъект.Склад              = ВыборкаСклад.Склад;
			ДокументОбъект.СкладПроизводства  = ВыборкаСклад.СкладПроизводства;
			ДокументОбъект.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
			ДокументОбъект.ПометкаУдаления    = Ложь;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеМенятьВремя", ИСТИНА);
			
			ДокументОбъект.Продукция.Очистить();
			ДокументОбъект.Состав.Очистить();
			
			Выборка = ВыборкаСклад.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				чКолАвтопроизводства = Выборка.Количество - Выборка.КоличествоОстаток;
				Если чКолАвтопроизводства > 0 Тогда
					НоваяСтрокаПродукция = ДокументОбъект.Продукция.Добавить();
					НоваяСтрокаПродукция.Номенклатура      = Выборка.Номенклатура;
					НоваяСтрокаПродукция.ЕдиницаИзмерения  = РаботаСФормамиСервер.ПолучитьБазовуюЕдиницуИзмерения(Выборка.Номенклатура);
					НоваяСтрокаПродукция.Коэффициент       = 1;
					НоваяСтрокаПродукция.Ключ              = Строка(Новый УникальныйИдентификатор());
					НоваяСтрокаПродукция.Количество        = чКолАвтопроизводства;
					НоваяСтрокаПродукция.ПоТехКарте        = истина;
					Если флВыпускПродукцииПоПлановымЦенам Тогда
						НоваяСтрокаПродукция.ПлановаяСтоимость = Выборка.ПлановаяЦена;
						НоваяСтрокаПродукция.СуммаПлановая     = Окр(Выборка.ПлановаяЦена * чКолАвтопроизводства,2);
					КонецЕсли;
					ДокументОбъект.ЗаполнитьСостав(НоваяСтрокаПродукция.Номенклатура,НоваяСтрокаПродукция.Количество,НоваяСтрокаПродукция.Коэффициент,НоваяСтрокаПродукция.ТехнологическаяКарта,НоваяСтрокаПродукция.ПоТехКарте,НоваяСтрокаПродукция.Ключ,флВыпускПродукцииПоПлановымЦенам);
				КонецЕсли;
			КонецЦикла;
			
			Если ДокументОбъект.Продукция.Количество() > 0 Тогда
				
				Если ДокументОбъект.Состав.Количество() = 0 Тогда
					Сообщить( "При автопроизводстве номенклатуры """ + Строка(НоваяСтрокаПродукция.Номенклатура) + """ не удалось определить состав ингридиентов.");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				Исключение
					Сообщить(ОписаниеОшибки());
					Отказ = Истина;
					Возврат;
				КонецПопытки;
				Если тзГотоваяПродукция.Количество() > 0 Тогда
					//удаляем в таблице строку с документом, чтобы в таблице остались только не используемые документы, которые потом пометим на удаление
					тзГотоваяПродукция.Удалить(тзГотоваяПродукция[0]);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаТзГотоваяПродукция Из тзГотоваяПродукция Цикл
		ДокументОбъект = СтрокаТзГотоваяПродукция.Ссылка.ПолучитьОбъект();
		Попытка 
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;	
	КонецЦикла;
	
	Отказ = Ложь;
КонецПроцедуры	

//{БредовЮГ 27-03-2013
Процедура ЗаполнитьТару()  Экспорт
	Для Каждого СтрокаТЧ из Состав Цикл
		МассивТары = Разработка_Ижтрейдинг_Сервер.ЗаполнитьСтрокуТЧТарой(СтрокаТЧ.Номенклатура);
		Если МассивТары.Количество()>0 Тогда 
			НомерТары = 0;
			Для Каждого СтрокаМассива из МассивТары Цикл
				СтрокаТЧ["Тара"+?(НомерТары=0,"",НомерТары)] = СтрокаМассива;	
				НомерТары = НомерТары + 1;
			КонецЦикла;
			//++Минин
			Если Склад.ТипСклада = Перечисления.ТипыСкладов.Фруктовый и СтрокаТЧ.Тара.Актуальный Тогда
				РезультатЧисла = СтрокаТЧ.Количество/СтрокаТЧ.Тара.Коэффициент;
				//++Минин 0000135604 2015-08-19
				//СтрокаТЧ.КолТара = ?((РезультатЧисла -Цел(РезультатЧисла))>0,Цел(РезультатЧисла)+1,РезультатЧисла) ;
				СтрокаТЧ.КолТара = Формат(РезультатЧисла,"ЧДЦ=");
				//--Минин 0000135604 2015-08-19
				//Если СтрокаТЧ.КолТара = 0 Тогда 
				//	СтрокаТЧ.КолТара = 1; 
				//КонецЕсли;
			КонецЕсли;
			//--Минин
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//++Минин
Функция НайтиПодчиненныйДокумент(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РасходнаяНакладная.Ссылка
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.ДокОснование = &ДокОснование";
	
	Запрос.УстановитьПараметр("ДокОснование", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции
//--Минин

Функция ПолучитьВерхнегоРодителя(Ссылка)
  Если не ЗначениеЗаполнено(Ссылка.Родитель) Тогда
     Возврат Ссылка
  Иначе
     Возврат ПолучитьВерхнегоРодителя(Ссылка.Родитель)
  КонецЕсли;
КонецФункции

//++БИТ БВО
Процедура ПерераспределитьСоставПоОстаткам() Экспорт
		
	Izh_ОбщегоНазначенияСервер.ПерераспределитьСоставПоОстаткам(ЭтотОбъект);
	
КонецПроцедуры
//--БИТ БВО

//{ ВетровИА 11.03.2015 Наряд 000144405}  
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Для Каждого Номенклатура Из ЭтотОбъект.Состав Цикл
		ВерхнийРодитель = ПолучитьВерхнегоРодителя(Номенклатура.Номенклатура);
 		Если НЕ Номенклатура.Номенклатура.Продаваемый И ВерхнийРодитель = Справочники.Номенклатура.НайтиПоНаименованию("НОРМИРУЕМЫЕ МАТЕРИАЛЫ") Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Состав.Цена"));
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Состав.Сумма"));
			Возврат;
		КонецЕсли	
	КонецЦикла	
КонецПроцедуры
//{ ВетровИА 11.03.2015 Наряд 000144405}  
