
&НаКлиенте
Процедура ОтложитьВыполнить()
	ВыполнитьКомандуОтложить(Элементы.СписокЗадач.ТекущаяСтрока,СписокОтложено);
	Элементы.СписокЗадач.Обновить();
	ЭтаФорма.ОбновитьОтображениеДанных();
	Если Элементы.СписокЗадач.ТекущаяСтрока = Неопределено Тогда
		Закрыть();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуОтложить(ЗадачаСсылка,ЗначениеОтложенногоВремени)
	Если ЗадачаСсылка<>Неопределено тогда
	Задача = ЗадачаСсылка.ПолучитьОбъект();
	Задача.Дата = НачалоМинуты(ТекущаяДата() + ЗначениеОтложенногоВремени);
	Задача.Записать();
	Конецесли;
	//ОповеститьОбИзменении(ЗадачаСсылка); 
КонецПроцедуры	


&НаКлиенте
Процедура ОткрытьВыполнить()
	ТекущаяЗадача = Элементы.СписокЗадач.ТекущаяСтрока;
	СтруктураПараметров = Новый Структура("Ключ", ТекущаяЗадача);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", СтруктураПараметров,,);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыполнить()
	Если Элементы.СписокЗадач.ТекущаяСтрока = Неопределено Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	Задача = Элементы.СписокЗадач.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ОбщегоНазначенияСервер.ПолучитьСвойствоПоСсылке(Задача,"БизнесПроцесс")) Тогда	
		УправлениеБизнесПроцессамиКлиент.ОткрытьФормуВыполненияЗадачи(Задача);
	Иначе
		УправлениеБизнесПроцессамиСервер.ВыполнитьЗадачу(Задача);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Задача выполнена'"),
			ПолучитьНавигационнуюСсылку(Задача),
			Строка(Задача));
		Оповестить("ЗадачаВыполнена");
	КонецЕсли;		
	Элементы.СписокЗадач.Обновить();
	Если Элементы.СписокЗадач.ТекущаяСтрока = Неопределено Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    СписокИнтервалов = Элементы.СписокОтложено.СписокВыбора;
	СписокИнтервалов.Добавить(5*60,"5 мин.");
	СписокИнтервалов.Добавить(10*60,"10 мин.");
	СписокИнтервалов.Добавить(15*60,"15 мин.");
	СписокИнтервалов.Добавить(30*60,"30 мин.");
	СписокИнтервалов.Добавить(1*60*60,"1 час");
	СписокИнтервалов.Добавить(2*60*60,"2 часа");
	СписокИнтервалов.Добавить(4*60*60,"4 часа");
	СписокИнтервалов.Добавить(8*60*60,"8 часов");
	СписокИнтервалов.Добавить(1*24*60*60,"1 день");
	СписокИнтервалов.Добавить(2*24*60*60,"2 дня");
	СписокИнтервалов.Добавить(3*24*60*60,"3 дня");
	СписокИнтервалов.Добавить(4*24*60*60,"4 дня");
	СписокИнтервалов.Добавить(1*7*24*60*60,"1 неделя");
	СписокОтложено = 5*60;
	//Отбор = СписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.Использование = Истина;
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
	//Отбор.ПравоеЗначение = ПараметрыСеанса.ТекущийПользователь;
	Отбор = СписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	Отбор.ПравоеЗначение = ТекущаяДата();
	//Отбор = СписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.Использование = Истина;
	//Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиница");
	//Отбор.ПравоеЗначение = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	Отбор = СписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Напоминать");
	Отбор.ПравоеЗначение = истина;
	Отбор = СписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	Отбор.ПравоеЗначение = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокОтложеноОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокОтложено = ВыбранноеЗначение;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадач() Экспорт
	Отбор = НайтиЭлементОтбора(СписокЗадач,"Дата");
	Отбор.ПравоеЗначение = ТекущаяДата();
КонецПроцедуры

&НаСервере
Функция НайтиЭлементОтбора(Настройки,ИМя) экспорт
	Элемент = неопределено;
	для каждого ЭлементОтбора из Настройки.Отбор.Элементы цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя) тогда
			Элемент = ЭлементОтбора;
			прервать;
		конецесли;
	кОнеццикла;
	возврат Элемент;
КонецФункции


&НаКлиенте
Процедура ПриПовторномОткрытии()
	ОбновитьСписокЗадач();
	Элементы.СписокЗадач.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗадачаВыполнена" ИЛИ ИмяСобытия = "ЗадачаИзменена" Тогда
		ПриПовторномОткрытии();
	КонецЕсли;
КонецПроцедуры


