Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	если Не ЗначениеЗаполнено(ИмяМакета) тогда
		ИмяМакета = "Items";
	конецесли;
	
	СхемаКомпоновкиДанных = ПолучитьМакет(ИмяМакета);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	//создаем НастройкиКомпоновкиДанных, чтобы не потерять установленные интерактивно параметры и отборы
	//Настройки = КомпоновщикНастроек.ПолучитьНастройки();	//можно было бы копированием, но при этом у элементов свойство Использование всегда устанавливается в Истина
	Настройки = Новый НастройкиКомпоновкиДанных;
	СкопироватьЭлементыОтбораНастроек(Настройки.Отбор.Элементы, КомпоновщикНастроек.Настройки.Отбор.Элементы);	//добавляем элементы отбора
	СкопироватьПараметрыНастроек(Настройки.ПараметрыДанных.Элементы, КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы);	//добавляем элементы параметры
	
	//загрузка Настройки приведет к ошибке выполнения компоновщика
	//без настроек поумолчанию не работает, при этом сбрасываются установленные параметры и отборы
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	//добавляем установленные отборы
	СкопироватьЭлементыОтбораНастроек(КомпоновщикНастроек.Настройки.Отбор.Элементы, Настройки.Отбор.Элементы);
	
	//восстанавливаем установленные параметры
	Для каждого ЭлементПараметрыДанных Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Элемент = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ЭлементПараметрыДанных.Параметр); 
		Если Элемент = Неопределено Тогда	//не должно такого быть
			//ЭлементПараметрыДанных.Использование = Ложь;	//снимать Использование нельзя
		ИначеЕсли Элемент.Использование Тогда
			ЗаполнитьЗначенияСвойств(ЭлементПараметрыДанных, Элемент);
		Иначе
			//снимать Использование нельзя, оставляем значение по умолчанию
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроек.Восстановить();	//убираем не нужные настройки параметры и отборы, которых нет в данной схеме, которые могли остаться от предыдущих схем
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	ПолучательДанных = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ПолучательДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ПолучательДанных.Свернуть("Код");
	Массив = ПолучательДанных.ВыгрузитьКолонку("Код");
	СписокКодов.Очистить();
	СписокКодов.ЗагрузитьЗначения(Массив);
	
	// Программный вывод
	//СтандартнаяОбработка = Ложь;
	//
	////Макет компоновки      
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	//
	////Компоновка данных      
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки,Истина);
	//
	//
	////Вывод результата      
	//ДокументРезультат.Очистить();
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);	
	
	
КонецПроцедуры

Процедура СкопироватьЭлементыОтбораНастроек(ЭлементыПриемник, ЭлементыИсточник)

	Для каждого ЭлементОтбор Из ЭлементыИсточник Цикл
		Элемент = ЭлементыПриемник.Добавить(ТипЗнч(ЭлементОтбор));
		ЗаполнитьЗначенияСвойств(Элемент, ЭлементОтбор);
		Если ТипЗнч(ЭлементОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда	//могут быть вложенные элементы
			СкопироватьЭлементыОтбораНастроек(Элемент.Элементы, ЭлементОтбор.Элементы)
		КонецЕсли;
	КонецЦикла;
	

КонецПроцедуры

Процедура СкопироватьПараметрыНастроек(ЭлементыПриемник, ЭлементыИсточник)

	Для каждого ЭлементПараметрыДанных Из ЭлементыИсточник Цикл
		Элемент = ЭлементыПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(Элемент, ЭлементПараметрыДанных);
	КонецЦикла;
	
КонецПроцедуры
