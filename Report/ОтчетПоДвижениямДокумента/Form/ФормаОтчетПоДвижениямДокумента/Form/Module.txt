
&НаСервере
Функция ОпределитьВидРегистра(МетаданныеРегистра)
	
	Результат = "";
	Если Метаданные.РегистрыНакопления.Индекс(МетаданныеРегистра) >= 0 Тогда
		Результат = "Накопления";
	ИначеЕсли Метаданные.РегистрыСведений.Индекс(МетаданныеРегистра) >= 0 Тогда
		Результат = "Сведений";
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Индекс(МетаданныеРегистра) >= 0 Тогда
		Результат = "Бухгалтерии";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьСписокПолей(МетаданныеРесурса, ТаблицаПолей, СписокПолей)
	
	Для Каждого Ресурс Из МетаданныеРесурса Цикл
		
		СписокПолей = СписокПолей + ?(ПустаяСтрока(СписокПолей), "", ", ") + Ресурс.Имя;
		ТаблицаПолей.Колонки.Добавить(Ресурс.Имя, , Ресурс.Синоним);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПериодВСписокПолей(ТаблицаПолей, СписокПолей)
	
	СписокПолей = СписокПолей + ?(ПустаяСтрока(СписокПолей), "", ", ") + " Период";
	ТаблицаПолей.Колонки.Добавить("Период", , "Период");
	
КонецПроцедуры

&НаСервере
Процедура ПрисоединитьОбласть(ТабличныйДокумент, ОбластьМакета, Таблица)
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		ОбластьМакета.Параметры.ЗаголовокКолонки = Колонка.Заголовок;
		ТабличныйДокумент.Присоединить(ОбластьМакета);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрисоединитьОбластьПоСтроке(ТабличныйДокумент, Область, СтрокаТаблицы)
	
	Для Каждого Колонка Из СтрокаТаблицы.Владелец().Колонки Цикл
		Область.Параметры.Значение = СтрокаТаблицы[Колонка.Имя];
		ТабличныйДокумент.Присоединить(Область);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПоРегистру(СписокПолей, ТаблицаРесурсов, ТаблицаИзмерений, ТаблицаРеквизитов, ТаблицаВидДвижений = Неопределено, ИмяРегистра, СинонимРегистра)
	
	ТекстЗапроса=	"ВЫБРАТЬ Разрешенные " + СписокПолей + "
	|	ИЗ " + ИмяРегистра + " КАК Рег
	|ГДЕ
	|	Регистратор = &Документ
	|";
	скд = новый схемакомпоновкиданных;
	ид = скд.ИсточникиДанных.Добавить();
	ид.Имя = "ИсточникДанных";
	ид.ТипИсточникаДанных  = "local";
	Наборданных = скд.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	наборданных.Имя = "НаборДанных1";
	НаборДанных.Запрос = текстзапроса;
	наборданных.ИсточникДанных="источникданных";
	сзначполей = новый списокзначений;
	Нстроки = Найти(СписокПолей,",");
	пока Нстроки>0 	цикл
		сзначПолей.Добавить(СокрЛП(Сред(СписокПолей,0,Нстроки-1)));
		списокполей=сокрлп(Списокполей);
		СписокПолей= Сред(СписокПолей,НСтроки+1,СтрДлина(СписокПолей)-1);
		Нстроки = Найти(СписокПолей,",");
		
	конеццикла;
	если СтрДлина(СокрЛП(СписокПолей))>0 тогда
		сзначПолей.Добавить(СокрЛП(списокПолей));
	конецесли;
	
	для каждого полеизСписка из сзначполей цикл
		поле = наборданных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		поле.Поле=полеизсписка.значение;
		поле.ПутьКДанным = полеизсписка.значение;
		поле.Заголовок = полеизсписка.представление;
	конеццикла;
	
	ГКД=СКД.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГКД.Использование=истина;
	для каждого полеизсписка из сзначполей цикл
		выбор=СКД.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("Выбранноеполекомпоновкиданных"));
		выбор.использование=истина;
		выбор.поле = новый полекомпоновкиданных(полеизсписка.значение);
	конеццикла;
	поле=ГКД.Выбор.Элементы.Добавить(Тип("Автовыбранноеполекомпоновкиданных"));
	поле.Использование=Истина;
	отчет.КомпоновщикНастроек.Инициализировать(Новый источникдоступныхнастроеккомпоновкиданных(СКД));
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	Отчет.КомпоновщикНастроек.Восстановить();
	параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый параметркомпоновкиданных("Документ"));
	параметр.Использование = истина;
	параметр.Значение = Отчет.Документ;
	компоновщикМакета=  новый компоновщикМакетаКомпоновкиДанных;
	макетКомпоновкиДанных=компоновщикМакета.Выполнить(Скд,отчет.КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхдляколлекциизначений"));
	процессоркомпоновкиДанных=новый процессоркомпоновкиданных;
	процессоркомпоновкиданных.Инициализировать(макеткомпоновкиданных);
	процессорвывода=новый процессорвыводарезультатакомпоновкиданныхвколлекциюзначений;
	тзрезультат=новый таблицазначений;
	процессорвывода.УстановитьОбъект(тзрезультат);
	процессорвывода.Вывести(процессоркомпоновкиданных);
	для каждого выборка из ТЗрезультат цикл
		Если ТаблицаВидДвижений <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаВидДвижений.Добавить(), Выборка);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаРесурсов.Добавить(),   Выборка);
		ЗаполнитьЗначенияСвойств(ТаблицаИзмерений.Добавить(),  Выборка);
		ЗаполнитьЗначенияСвойств(ТаблицаРеквизитов.Добавить(), Выборка);
		
	КонецЦикла;
	
	Макет = Отчеты.ОтчетПоДвижениямДокумента.ПолучитьМакет("Макет");
	КоличествоСтрокРезультата = тзрезультат.Количество();
   если КоличествоСтрокРезультата>0 тогда
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	ОбластьЗаголовок.Параметры.СинонимРегистра = Строка(СинонимРегистра);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	ТабличныйДокумент.НачатьГруппуСтрок();
	
	
	Если СпособВыводаОтчета = Перечисления.СпособВыводаОтчета.ПоГоризонтали Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокЯчейки");
		ОбластьЯчейка    = Макет.ПолучитьОбласть("Ячейка");
		ОбластьОтступ    = Макет.ПолучитьОбласть("Отступ1");
		
		ТабличныйДокумент.Вывести(ОбластьОтступ);
		
		Если ТаблицаВидДвижений <> Неопределено Тогда
			ОбластьЗаголовок.Параметры.ЗаголовокКолонки = "Вид движения";
			ТабличныйДокумент.Присоединить(ОбластьЗаголовок);
		КонецЕсли;
		
		ПрисоединитьОбласть(ТабличныйДокумент, ОбластьЗаголовок, ТаблицаИзмерений);
		ПрисоединитьОбласть(ТабличныйДокумент, ОбластьЗаголовок, ТаблицаРесурсов);
		ПрисоединитьОбласть(ТабличныйДокумент, ОбластьЗаголовок, ТаблицаРеквизитов);
		
		Для НомерСтроки = 1 По КоличествоСтрокРезультата Цикл
			
			ТабличныйДокумент.Вывести(ОбластьОтступ);
			Если ТаблицаВидДвижений <> Неопределено Тогда
				
				ОбластьЯчейка.Параметры.Значение = ТаблицаВидДвижений[НомерСтроки-1].ВидДвижения;
				ТабличныйДокумент.Присоединить(ОбластьЯчейка);
				
				Если ТаблицаВидДвижений[НомерСтроки-1].ВидДвижения = ВидДвиженияНакопления.Расход Тогда
					Область = ТабличныйДокумент.Область("Ячейка");
					Область.ЦветТекста = Новый Цвет(255, 0, 0);
				Иначе
					Область = ТабличныйДокумент.Область("Ячейка");
					Область.ЦветТекста = Новый Цвет(0, 0, 255);
				КонецЕсли;
				
			КонецЕсли;
			
			ПрисоединитьОбластьПоСтроке(ТабличныйДокумент, ОбластьЯчейка, ТаблицаИзмерений[НомерСтроки-1]);
			ПрисоединитьОбластьПоСтроке(ТабличныйДокумент, ОбластьЯчейка, ТаблицаРесурсов[НомерСтроки-1]);
			ПрисоединитьОбластьПоСтроке(ТабличныйДокумент, ОбластьЯчейка, ТаблицаРеквизитов[НомерСтроки-1]);
			
		КонецЦикла;
	Иначе
		// Вывод таблицы
		
		Если ТаблицаВидДвижений <> Неопределено Тогда
			
			ОбластьШапки 					= Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьДеталиШапки 				= Макет.ПолучитьОбласть("ДеталиШапки");
			ОбластьДетали 					= Макет.ПолучитьОбласть("Детали");
			ОбластьШапкиВидДвижения 		= Макет.ПолучитьОбласть("ШапкаТаблицыВидДвижения");
			ОбластьДеталиШапкиВидДвижения 	= Макет.ПолучитьОбласть("ДеталиШапкиВидДвижения");
			ОбластьДеталиВидДвижения 		= Макет.ПолучитьОбласть("ДеталиВидДвижения");
			ОбластьОтступ 					= Макет.ПолучитьОбласть("Отступ");
			
		Иначе
			
			ОбластьШапки 					= Макет.ПолучитьОбласть("ШапкаТаблицы1");
			ОбластьДеталиШапки 				= Макет.ПолучитьОбласть("ДеталиШапки1");
			ОбластьДетали 					= Макет.ПолучитьОбласть("Детали1");
			ОбластьОтступ 					= Макет.ПолучитьОбласть("Отступ2");
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьОтступ);
		
		Если ТаблицаВидДвижений <> Неопределено Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкиВидДвижения);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапки);
		
		КоличествоСтрокШапки = Макс(ТаблицаРесурсов.Колонки.Количество(), ТаблицаИзмерений.Колонки.Количество(), ТаблицаРеквизитов.Колонки.Количество());
		ТолстаяЛиния         = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
		ТонкаяЛиния          = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		
		Для НомерСтроки = 1 По КоличествоСтрокШапки Цикл
			
			ОбластьДеталиШапки.Параметры.Ресурсы   = "";
			ОбластьДеталиШапки.Параметры.Измерения = "";
			ОбластьДеталиШапки.Параметры.Реквизиты = "";
			
			Если ТаблицаРесурсов.Колонки.Количество() >= НомерСтроки Тогда
				ОбластьДеталиШапки.Параметры.Ресурсы = ТаблицаРесурсов.Колонки[НомерСтроки-1].Заголовок;
			КонецЕсли;
			
			Если ТаблицаИзмерений.Колонки.Количество() >= НомерСтроки Тогда
				ОбластьДеталиШапки.Параметры.Измерения = ТаблицаИзмерений.Колонки[НомерСтроки-1].Заголовок;
			КонецЕсли;
			
			Если ТаблицаРеквизитов.Колонки.Количество() >= НомерСтроки Тогда
				ОбластьДеталиШапки.Параметры.Реквизиты = ТаблицаРеквизитов.Колонки[НомерСтроки-1].Заголовок;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьОтступ);
			Если ТаблицаВидДвижений <> Неопределено Тогда
				ТабличныйДокумент.Присоединить(ОбластьДеталиШапкиВидДвижения);	
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДеталиШапки);	
			
			Если НомерСтроки = КоличествоСтрокШапки Тогда
				Если ТаблицаВидДвижений <> Неопределено Тогда
					
					ТабличныйДокумент.Область("ДеталиШапкиВидДвижения").Обвести(ТолстаяЛиния,
					, ТолстаяЛиния, ТолстаяЛиния);
					ТабличныйДокумент.Область("ДеталиШапки").Обвести(ТолстаяЛиния,
					, ТолстаяЛиния, ТолстаяЛиния);
				Иначе
					
					ТабличныйДокумент.Область("ДеталиШапки1").Обвести(ТолстаяЛиния,
					, ТолстаяЛиния, ТолстаяЛиния);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для НомерСтроки = 1 По КоличествоСтрокРезультата Цикл
			
			ФлагВыведенВидДвижения = Ложь;
			
			Для НомерКолонки = 1 По КоличествоСтрокШапки Цикл
				
				ОбластьДетали.Параметры.Ресурсы   = "";
				ОбластьДетали.Параметры.Измерения = "";
				ОбластьДетали.Параметры.Реквизиты = "";
				
				Если ТаблицаРесурсов.Колонки.Количество() >= НомерКолонки Тогда
					ИмяКолонки = ТаблицаРесурсов.Колонки[НомерКолонки-1].Имя;
					ОбластьДетали.Параметры.Ресурсы = ТаблицаРесурсов[НомерСтроки-1][ИмяКолонки];
				КонецЕсли;
				
				Если ТаблицаИзмерений.Колонки.Количество() >= НомерКолонки Тогда
					ИмяКолонки = ТаблицаИзмерений.Колонки[НомерКолонки-1].Имя;
					ОбластьДетали.Параметры.Измерения = ТаблицаИзмерений[НомерСтроки-1][ИмяКолонки];
				КонецЕсли;
				
				Если ТаблицаРеквизитов.Колонки.Количество() >= НомерКолонки Тогда
					ИмяКолонки = ТаблицаРеквизитов.Колонки[НомерКолонки-1].Имя;
					ОбластьДетали.Параметры.Реквизиты = ТаблицаРеквизитов[НомерСтроки-1][ИмяКолонки];
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьОтступ);
				
				Если ТаблицаВидДвижений <> Неопределено Тогда
					
					Если ФлагВыведенВидДвижения Тогда
						ЗначениеПараметра = "";
					Иначе
						ЗначениеПараметра      = ТаблицаВидДвижений[НомерСтроки-1]["ВидДвижения"];
						ФлагВыведенВидДвижения = Истина;
					КонецЕсли;
					
					ОбластьДеталиВидДвижения.Параметры.ВидДвижения = ЗначениеПараметра;
					ТабличныйДокумент.Присоединить(ОбластьДеталиВидДвижения);
					
					Если ЗначениеПараметра = ВидДвиженияНакопления.Расход Тогда
						ТабличныйДокумент.Область("ДеталиВидДвижения").ЦветТекста = Новый Цвет(255, 0, 0);
					ИначеЕсли ЗначениеПараметра = ВидДвиженияНакопления.Приход Тогда
						ТабличныйДокумент.Область("ДеталиВидДвижения").ЦветТекста = Новый Цвет(0, 0, 255);
					КонецЕсли;
					
				КонецЕсли;
				
				ТабличныйДокумент.Присоединить(ОбластьДетали);
				
				Если НомерКолонки = КоличествоСтрокШапки Тогда
					
					Если ТаблицаВидДвижений <> Неопределено Тогда
						ТабличныйДокумент.Область("ДеталиВидДвижения").Обвести(ТонкаяЛиния,
						, ТонкаяЛиния, ТонкаяЛиния);
						ТабличныйДокумент.Область("Детали").Обвести(ТонкаяЛиния,
						, ТонкаяЛиния, ТонкаяЛиния);
					Иначе
						ТабличныйДокумент.Область("Детали1").Обвести(ТонкаяЛиния,
						, ТонкаяЛиния, ТонкаяЛиния)
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	конецесли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчет()
	
	Если Не ЗначениеЗаполнено(Отчет.Документ) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран документ!'"), Отчет);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособВыводаОтчета) Тогда
		СпособВыводаОтчета = Перечисления.СпособВыводаОтчета.ПоВертикали;
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	Макет = Отчеты.ОтчетПоДвижениямДокумента.ПолучитьМакет("Макет");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ГлавныйЗаголовок");
	ОбластьЗаголовок.Параметры.Документ = Строка(Отчет.Документ);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	МетаданныеДокумента = Отчет.Документ.Метаданные();
	МассивРегистров     = общегоназначениясервер.ПолучитьМассивИспользуемыхРегистров(Отчет.Документ, МетаданныеДокумента.Движения);
	
	Для Каждого СвойстваОбъекта Из МетаданныеДокумента.Движения Цикл
		
		Если МассивРегистров.Найти(СвойстваОбъекта.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВидРегистра     = ОпределитьВидРегистра(СвойстваОбъекта);
		ИмяРегистра     = СвойстваОбъекта.ПолноеИмя();
		СинонимРегистра = "Регистр " + НРег(ВидРегистра) + " """ + СвойстваОбъекта.Синоним + """";
		
		Если ВидРегистра = "Сведений" Или ВидРегистра = "Накопления" Тогда
			
			СписокПолей       = "";
			ТаблицаРесурсов   = Новый ТаблицаЗначений;
			ТаблицаИзмерений  = Новый ТаблицаЗначений;
			ТаблицаРеквизитов = Новый ТаблицаЗначений;
			
			Если Не (ВидРегистра = "Сведений"
				И СвойстваОбъекта.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) Тогда
				
				ДобавитьПериодВСписокПолей(ТаблицаИзмерений, СписокПолей);
			КонецЕсли;
			
			СформироватьСписокПолей(СвойстваОбъекта.Ресурсы,   ТаблицаРесурсов,   СписокПолей);
			СформироватьСписокПолей(СвойстваОбъекта.Измерения, ТаблицаИзмерений,  СписокПолей);
			СформироватьСписокПолей(СвойстваОбъекта.Реквизиты, ТаблицаРеквизитов, СписокПолей);
			
			Если ВидРегистра = "Накопления"
				И СвойстваОбъекта.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				
				СписокПолей = СписокПолей + ", ВидДвижения";
				ТаблицаВидДвижений = Новый ТаблицаЗначений;
				ТаблицаВидДвижений.Колонки.Добавить("ВидДвижения", , "Вид движения");
				
				ВывестиДанныеПоРегистру(СписокПолей, ТаблицаРесурсов, ТаблицаИзмерений,
				ТаблицаРеквизитов, ТаблицаВидДвижений, ИмяРегистра, СинонимРегистра);
				
			Иначе
				
				ВывестиДанныеПоРегистру(СписокПолей, ТаблицаРесурсов, ТаблицаИзмерений,
				ТаблицаРеквизитов, , ИмяРегистра, СинонимРегистра);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Документ", Отчет.Документ);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("СпособВыводаОтчета", СпособВыводаОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Значение = Настройки.Получить("СпособВыводаОтчета");
	Если Значение <> Неопределено Тогда
		СпособВыводаОтчета = Значение;
	КонецЕсли;
	
	СформироватьОтчет();
	
	ОтчетСформирован = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьВыполнить()
	
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ОтчетСформирован Тогда
		
		СформироватьОтчет();
		ОтчетСформирован = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

