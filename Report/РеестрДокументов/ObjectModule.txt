Перем видыдокументов;

&НаСервере
функция сформироватьскд() экспорт
	Схемакомпоновкиданных = отчеты.РеестрДокументов.ПолучитьМакет("ОсновнаяСхемаКомпоновкиданных");
	ЗаполнитьСКД(СхемаКомпоновкиданных);
	ПерваяГруппировка =схемаКомпоновкиДанных.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПерваяГруппировка.Использование = Истина;
	ВыбранныеПоляДляЭлементаСтруктуры = ПерваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВЫбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДляЭлементаСтруктуры.Использование = истина;
	для каждого поле из видыдокументов.колонки цикл
		если поле.имя<>"ВидДок" тогда
			НовоеПоле= Схемакомпоновкиданных.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Использование=истина;
			новоеПоле.Поле=новый полекомпоновкиданных(Поле.Имя);
		конецесли;
	конеццикла;
	возврат Схемакомпоновкиданных;	
Конецфункции	
//&НаСервере
Процедура ЗаполнитьСКД(схемакомпоновкиданных)
	НаборДанных1 = схемаКомпоновкиДанных.НаборыДанных.Найти("НаборДанных1");
	если НаборДанных1<>Неопределено тогда
		схемаКомпоновкиДанных.НаборыДанных.Удалить(НаборДанных1);
	конецесли;
	ИсточникДанных1 = схемаКомпоновкиДанных.ИсточникиДанных.Найти("ОсновнойИсточникДанных");
	если ИсточникДанных1<>Неопределено тогда
		схемаКомпоновкиДанных.ИсточникиДанных.Удалить(ИсточникДанных1);
	конецесли;
	схемаКомпоновкиДанных.ПоляИтога.Очистить();
	ИД = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИД.Имя="ОсновнойИсточникДанных";
	ИД.ТипИсточникаДанных="local";
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = СформироватьТекстЗапроса(схемакомпоновкиданных);
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных="ОсновнойИсточникДанных";
	ПолеРесурса = схемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеРесурса.ПутьКДанным = "Сумма";
	ПолеРесурса.Выражение = "Сумма(Сумма)";
	НаборДанных1 = СхемаКомпоновкиДанных.НаборыДанных.Найти("НаборДанных1");
	для каждого колонка из ВидыДокументов.Колонки цикл
		ПолеНабораДанныхСЦенами = НаборДанных1.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанныхСЦенами.Заголовок = Колонка.Заголовок;
		ПолеНабораДанныхСЦенами.Поле = Колонка.Имя;
		ПОлеНабораДанныхСЦенами.ПутьКданным = Колонка.Имя;
	конеццикла;
	ПолеВидДок = НаборДанных1.поля.Найти("ВидДок");
	МассивВидыДокументов =ВидыДокументовИполяДляЗапроса(неопределено).выгрузитьколонку("ВидДок");
	списокДоступныхЗначений = новый СписокЗначений;
	списокДоступныхЗначений.ЗагрузитьЗначения(МассивВидыДокументов);
	ПолеВидДок.установитьДоступныезначения(СписокДоступныхЗначений);
	ПолеСтруктурнаяЕдиница = НаборДанных1.поля.Найти("СтруктурнаяЕдиница");
	МассивТипСЕ = Новый Массив;
	МассивТипСЕ.Добавить(Тип("СправочникСсылка.СтруктурныеЕдиницы"));
	ПолеСтруктурнаяЕдиница.ТипЗначения = Новый ОписаниеТипов(МассивТипСЕ);
	ПолеВидДок = НаборДанных.Поля.Найти("ВидДок");
	ПолеВиддок.ОграничениеИспользования.Условие = Ложь;
	ПолеВидДок.ОграничениеИспользованияРеквизитов.Условие = Ложь;
конецпроцедуры

&НаСервере

Функция СформироватьТекстЗапроса(схемакомпоновкиданных,СписокДокументов=Неопределено) Экспорт
	ПустоеПоле=""""""; 
	
	СЗСписокДокументов = схемаКомпоновкиДанных.Параметры.Найти("СЗСписокДокументов");
	ХранилищеЗначений = СЗСписокДокументов.Значение.Получить();
	Если ТипЗНч(ХранилищеЗначений) = Тип("СписокЗначений") тогда
		СписокДокументов = ХранилищеЗначений;
	Иначе
		СписокДокументов = СписВсеВидыДокументов();
	конецесли; 	
	СЗДокСостав = ПолучитьСЗДокСостав();
	
	тзВидыДокументов=ВидыДокументовИполяДляЗапроса(СписокДокументов);
	КоличествоДокументов=тзВидыДокументов.Количество();
	КоличествоКолонок=тзВидыДокументов.Колонки.Количество();
	ТекстЗапроса="";
	
	Если ТипЗНЧ(СписокДокументов) = Тип("СписокЗначений") Тогда
		//сначала исключим из результиру
		ИсключаемыеВидыДок = Новый Структура;
		Для каждого Элемент Из СписокДокументов Цикл
			Если НЕ Элемент.Пометка Тогда
				ИсключаемыеВидыДок.Вставить(Элемент.Значение);
			КонецЕсли; 
		КонецЦикла; 
		Для чСч=0 По КоличествоДокументов-1 Цикл
			Строка = тзВидыДокументов[КоличествоДокументов-1-чСч];
			Если ИсключаемыеВидыДок.Свойство(Строка.ВидДок) Тогда
				тзВидыДокументов.Удалить(Строка);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	КоличествоДокументов=тзВидыДокументов.Количество();
	
	//Создадим поля "внешнего" запроса
	ТекстЗапроса="ВЫБРАТЬ РАЗЛИЧНЫЕ";
	
	УжеЕстьПоля = Ложь;
	Для  НомерПоля=0 По КоличествоКолонок-1 Цикл
		Если тзВидыДокументов.Колонки[НомерПоля].Имя = "Ссылка" Тогда
			//Продолжить;
		КонецЕсли; 
		Если тзВидыДокументов.Колонки[НомерПоля].Имя = "Характеристика" Тогда
			ТекстЗапроса=ТекстЗапроса+?(УжеЕстьПоля,",","")+"
			|Выбор когда ВложенныйЗапрос."+тзВидыДокументов.Колонки[НомерПоля].Имя+" ссылка справочник.ХарактеристикиНоменклатуры тогда ВложенныйЗапрос."+тзВидыДокументов.Колонки[НомерПоля].Имя+" иначе Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) конец как Характеристика ";
		ИначеЕсли тзВидыДокументов.Колонки[НомерПоля].Имя = "Сумма" Тогда
			ТекстЗапроса=ТекстЗапроса+?(УжеЕстьПоля,",","")+"
			|Сумма(ВложенныйЗапрос.Сумма) как Сумма ";
		иначе					
			//Продолжить;
			ТекстЗапроса=ТекстЗапроса+?(УжеЕстьПоля,",","")+"
			|ВложенныйЗапрос."+тзВидыДокументов.Колонки[НомерПоля].Имя;
		Конецесли;
		УжеЕстьПоля = Истина;
		
	КонецЦикла; 
	ТекстЗапроса=ТекстЗапроса+"
	|ИЗ 
	|(";
	
	Если КоличествоДокументов > 0 Тогда
		//Первая таблица объединения
		ПервыйДок=тзВидыДокументов[0];	
		СТабЧастьюСостав =?(СЗДокСостав.НайтиПОЗначению(ПервыйДок.ВидДок)=неопределено,Ложь,Истина);
		ТекстЗапроса=ТекстЗапроса+"
		|ВЫБРАТЬ";
		Для чКолонка=1 По (КоличествоКолонок-1) Цикл
			Если НЕ ПервыйДок[чКолонка] = Неопределено Тогда
				Если ПервыйДок[чКолонка] = "Характеристика" или ПервыйДок[чКолонка]="ХарактеристикаПартия" тогда
					ТекстЗапроса=ТекстЗапроса+"
					//|	"+ПервыйДок.ВидДок+"."+тзВидыДокументов.Колонки[чКолонка].Имя+" КАК "+тзВидыДокументов.Колонки[чКолонка].Имя+",";
					|	"+"Выбор когда Реестр"+ПервыйДок.ВидДок+"."+ПервыйДок[чКолонка]+" ссылка справочник.Характеристикиноменклатуры тогда Реестр"+ПервыйДок.ВидДок+"."+ПервыйДок[чКолонка]+" иначе """" конец каК "+тзВидыДокументов.Колонки[чКолонка].Имя+",";
				ИначеЕсли ПервыйДок.ВидДок = "Инвентаризация" и ПервыйДок[чКолонка]="Количество" тогда
					ТекстЗапроса=ТекстЗапроса+"
					//|	"+ПервыйДок.ВидДок+"."+тзВидыДокументов.Колонки[чКолонка].Имя+" КАК "+тзВидыДокументов.Колонки[чКолонка].Имя+",";
					|	"+"Реестр"+ПервыйДок.ВидДок+".Количество-Реестр"+ПервыйДок.ВидДок+".КоличествоУчет"+" КАК "+тзВидыДокументов.Колонки[чКолонка].Имя+",";
					
				Иначе
					
					ТекстЗапроса=ТекстЗапроса+"
					//|	"+ПервыйДок.ВидДок+"."+тзВидыДокументов.Колонки[чКолонка].Имя+" КАК "+тзВидыДокументов.Колонки[чКолонка].Имя+",";
					|	"+"Реестр"+ПервыйДок.ВидДок+"."+ПервыйДок[чКолонка]+" КАК "+тзВидыДокументов.Колонки[чКолонка].Имя+",";
				конецесли;	
			ИначеЕсли тзВидыДокументов.Колонки[чКолонка].Имя="Характеристика" тогда
				ТекстЗапроса=ТекстЗапроса+"
				|	Значение(справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК "+тзВидыДокументов.Колонки[чКолонка].Имя+",";
			Иначе
				ТекстЗапроса=ТекстЗапроса+"
				|	"+?(тзВидыДокументов.Колонки[чКолонка].Имя="Сумма",0,ПустоеПоле)+" КАК "+тзВидыДокументов.Колонки[чКолонка].Имя+",";
			КонецЕсли; 
		КонецЦикла; 
		
		ТекстЗапроса=ТекстЗапроса+"
		|	"""+ПервыйДок.ВидДок+""" КАК ВидДок";
		ТекстЗапроса = ТекстЗапроса+"
		|ИЗ Документ."+ПервыйДок.ВидДок+?(СТабЧастьюСостав,".Состав","")+" КАК "+"Реестр"+ПервыйДок.ВидДок;
		ТекстЗапроса = ТекстЗапроса + " Где  Реестр"+ПервыйДок.ВидДок +"."+ПервыйДок.Дата+" >= &НачалоПериода и Реестр"+ПервыйДок.ВидДок +"."+ПервыйДок.Дата+"<=&КонецПериода ";
		//Если ЗначениеЗаполнено(ПервыйДок.Характеристика) тогда
		//	ТекстЗапроса = ТекстЗапроса + " и выбор когда Реестр"+первыйдок.ВидДок+"."+ПервыйДок.Характеристика+" ссылка справочник.ХарактеристикиНоменклатуры тогда Истина иначе Ложь конец ";
		//конецесли;
		//остальные таблицы таблицы соединения
		Для чСтрока=1 По (КоличествоДокументов-1) Цикл
			ТекстЗапроса = ТекстЗапроса+"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			СледДок=тзВидыДокументов[чСтрока];	
			СТабЧастьюСостав =?(СЗДокСостав.НайтиПОЗначению(СледДок.ВидДок)=неопределено,Ложь,Истина);
			ТекстЗапроса=ТекстЗапроса+"
			|ВЫБРАТЬ";
			Для чКолонка=1 По (КоличествоКолонок-1) Цикл
				Если НЕ СледДок[чКолонка] = НЕопределено Тогда
					Если СледДок[чКолонка] = "Характеристика" или СледДок[чКолонка] = "ХарактеристикаПартия" тогда
						ТекстЗапроса=ТекстЗапроса+"
						//|	"+СледДок.ВидДок+"."+тзВидыДокументов.Колонки[чКолонка].Имя+",";
						|	"+"Выбор когда Реестр"+СледДок.ВидДок+"."+СледДок[чКолонка]+" ссылка справочник.ХарактеристикиНоменклатуры тогда Реестр"+СледДок.ВидДок+"."+СледДок[чКолонка]+ " иначе """" конец ,";
					ИначеЕсли СледДок.ВидДок = "Инвентаризация" и СледДок[чКолонка] = "Количество" тогда
						ТекстЗапроса=ТекстЗапроса+"
						//|	"+СледДок.ВидДок+"."+тзВидыДокументов.Колонки[чКолонка].Имя+",";
						|	"+"Реестр"+СледДок.ВидДок+".Количество-Реестр"+СледДок.ВидДок+".КоличествоУчет как Количество,";
						
					Иначе
						ТекстЗапроса=ТекстЗапроса+"
						//|	"+СледДок.ВидДок+"."+тзВидыДокументов.Колонки[чКолонка].Имя+",";
						|	"+"Реестр"+СледДок.ВидДок+"."+СледДок[чКолонка]+",";
					Конецесли;
				ИначеЕсли тзВидыДокументов.Колонки[чКолонка].Имя="Характеристика" тогда
					ТекстЗапроса=ТекстЗапроса+"
					|	Значение(справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК "+тзВидыДокументов.Колонки[чКолонка].Имя+",";
					
				Иначе
					ТекстЗапроса=ТекстЗапроса+"
					|	"+?(тзВидыДокументов.Колонки[чКолонка].Имя="Сумма",0,ПустоеПоле)+" КАК "+тзВидыДокументов.Колонки[чКолонка].Имя+",";
				КонецЕсли; 
			КонецЦикла; 
			ТекстЗапроса=ТекстЗапроса+"
			|	"""+СледДок.ВидДок+"""";
			ТекстЗапроса = ТекстЗапроса+"
			|ИЗ Документ."+СледДок.ВидДок+?(СТабЧастьюСостав,".Состав","")+" КАК "+"Реестр"+СледДок.ВидДок;
			ТекстЗапроса = ТекстЗапроса + " Где  Реестр"+СледДок.ВидДок +"."+СледДок.Дата+" >= &НачалоПериода и Реестр"+СледДок.ВидДок +"."+СледДок.Дата+"<=&КонецПериода ";
			//Если ЗначениеЗаполнено(СледДок.Характеристика) тогда
			//	ТекстЗапроса = ТекстЗапроса + " и выбор когда Реестр"+СледДок.ВидДок+"."+СледДок.Характеристика +" ссылка справочник.ХарактеристикиНоменклатуры тогда Истина иначе Ложь конец ";
			//конецесли;
		КонецЦикла; 
	КонецЕсли; 
	
	ТекстЗапроса=ТекстЗапроса +"
	|) КАК ВложенныйЗапрос";
	УжеЕстьПоля = Ложь;
	Для  НомерПоля=0 По КоличествоКолонок-1 Цикл
		Если тзВидыДокументов.Колонки[НомерПоля].Имя = "Сумма" Тогда
			Продолжить;
		КонецЕсли; 
			Если тзВидыДокументов.Колонки[НомерПоля].Имя = "Сумма" Тогда
				продолжить;
			Иначе
				ТекстЗапроса=ТекстЗапроса+?(УжеЕстьПоля,","," Сгруппировать по ")+"
				|ВложенныйЗапрос."+тзВидыДокументов.Колонки[НомерПоля].Имя;
				
			КонецЕсли;
		УжеЕстьПоля = Истина;
	КонецЦикла; 

	
	
	Возврат ТекстЗапроса;
КонецФункции
&НаСервере	
Функция СписВсеВидыДокументов() Экспорт
	СписокВидовДокументов = Новый СписокЗначений;
	Для каждого ВидДок Из Метаданные.Документы Цикл
		Если ПравоДоступа("Чтение", ВидДок) Тогда
			СписокВидовДокументов.Добавить(ВидДок.Имя,ВидДок.Синоним,Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВидовДокументов;
КонецФункции // ВсеВидыДокументов()



&НаСервере
Функция ПолучитьСЗДокСостав() Экспорт
	СзДоксостав = Новый СписокЗначений;
	Для каждого ВидДок Из Метаданные.Документы Цикл
		Если ПравоДоступа("Чтение", ВидДок) Тогда
			Если ВидДок.ТабличныеЧасти.Найти("Состав")<>Неопределено тогда
				СзДОкСостав.Добавить(ВидДок.Имя,ВидДок.Синоним,Истина);
			конецесли;
		КонецЕсли;
	КонецЦикла;
	Возврат СзДокСостав;
КонецФункции // ВсеВидыДокументов()


&НаСервере
// формирует тз с выбранными видами документов и колонками отчета для генерации запроса
//
// Параметры
//  <СписокДокументов>  – <СписокЗначений> – Список видов документов для реестра
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   – в строках - виды документов, а в колонках см. ДоступныеКолонкиОтчета()
//						на 
//
Функция ВидыДокументовИполяДляЗапроса(СписокДокументов) Экспорт
	струкПодстановкаИменРеквизитов = СтруктураЗаменыИменРеквизитов();
	ВидыДокументов=Новый ТаблицаЗначений;
	ВидыДокументов.Колонки.Добавить("ВидДок",,"Вид документа");
	стКолонкиОтчета = ДоступныеКолонкиОтчета();
	Для каждого Колонка Из стКолонкиОтчета Цикл
		ВидыДокументов.Колонки.Добавить(Колонка.Ключ,,Колонка.Значение);
	КонецЦикла; 
	Для каждого ВидДок Из Метаданные.Документы Цикл
		Строка=ВидыДокументов.Добавить();
		Строка.ВидДок = ВидДок.Имя;
		Строка.Ссылка = "Ссылка";
		Для каждого Реквизит Из ВидДок.Реквизиты Цикл
			Если стКолонкиОтчета.Свойство(Реквизит.Имя) Тогда
				Строка[Реквизит.Имя] = "Ссылка."+Реквизит.Имя;
			Иначе
				струкПодменаРеквизитов = Неопределено;
				Если струкПодстановкаИменРеквизитов.Свойство(ВидДок.Имя,струкПодменаРеквизитов) Тогда
					Для каждого Элемент Из струкПодменаРеквизитов Цикл
						Если Реквизит.Имя = Элемент.Значение Тогда
							Строка[Элемент.Ключ] = "Ссылка."+Реквизит.Имя;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
		ТабЧастьСостав = ВидДок.ТабличныеЧасти.Найти("Состав");
		Если ТабЧастьСостав<>Неопределено тогда
			КолонкаСУмма = ТабЧАстьСостав.Реквизиты.Найти("Сумма");
			Если КолонкаСумма<>Неопределено тогда
				Строка.СУмма = "Сумма";
			конецесли;
			Строка.Дата = "ссылка.Дата";
			Строка.Проведен = "ссылка.Проведен";
			Строка.ПометкаУдаления="Ссылка.ПометкаУдаления";
			Строка.Номер = ?(ВидДок.ДлинаНомера>0,"ссылка.Номер",Неопределено);
		Иначе
			Строка.Дата = "Дата";
			Строка.Проведен = "Проведен";
			Строка.ПометкаУдаления="ПометкаУдаления";
			Строка.Номер = ?(ВидДок.ДлинаНомера>0,"Номер",Неопределено);
			
		конецесли;
	КонецЦикла;
	Возврат ВидыДокументов;
КонецФункции // ВидыДокументовИполяДляЗапроса()

Функция СтруктураЗаменыИменРеквизитов()
	ВидыДокументов = новый Структура;
	
	ВидыДокументов.Вставить("АвансовыйОтчет", Новый Структура);
	ВидыДокументов.АвансовыйОтчет.Вставить("Сумма","ИтогоСумма");
	
	ВидыДокументов.Вставить("ЗаказТранспорта", Новый Структура);
	ВидыДокументов.ЗаказТранспорта.Вставить("Сумма","СуммаОплаты");
	
	ВидыДокументов.Вставить("ЗаписьВКнигуПокупок", Новый Структура);
	ВидыДокументов.ЗаписьВКнигуПокупок.Вставить("Сумма","ВсегоСНДС");
	
	ВидыДокументов.Вставить("СчетФактураНаАванс", Новый Структура);
	ВидыДокументов.СчетФактураНаАванс.Вставить("Сумма","Всего");
	
	Возврат ВидыДокументов;
КонецФункции // СтруктураЗаменыИменРеквизитов()


// Описание всех возможных колонок реестра документов ( с представлениями) 
// они же доступные поля построителя отчета
//
// Возвращаемое значение:
//   <Структура>   – Где Ключ - это имя колонки, а Значение - представление
//
Функция ДоступныеКолонкиОтчета() Экспорт
	КолонкиОтчета = Новый Структура;
	КолонкиОтчета.Вставить("Ссылка","Документ");
	КолонкиОтчета.Вставить("СтруктурнаяЕдиница","Структурная единица");
	КолонкиОтчета.Вставить("Фирма","Фирма");
	КолонкиОтчета.Вставить("Контрагент","Контрагент");
	КолонкиОтчета.Вставить("Дата","Дата");
	КолонкиОтчета.Вставить("Номер","Номер");
	КолонкиОтчета.Вставить("Валюта","Валюта");
	КолонкиОтчета.Вставить("Проведен","Проведен");
	
	КолонкиОтчета.вставить("ПометкаУдаления","Пометка удаления");
	КолонкиОтчета.Вставить("Сумма","Сумма"); 	//изменению не подлежит, используется в коде совместно с 
	КолонкиОтчета.Вставить("Автор","Автор");
	Возврат КолонкиОтчета;
КонецФункции // ДоступныеКолонкиОтчета()


сформироватьскд();