
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьЗадачи(Исполнитель = Неопределено, ТочкаМаршрута, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НоваяЗадача = УправлениеБизнесПроцессамиСервер.СоздатьЗадачу(ЭтотОбъект, ТочкаМаршрута, Исполнитель, ОписаниеЗадачи(ТочкаМаршрута));
	// !!!! efim
	#Если _ Тогда
		НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	#КонецЕсли
	// !!!!
	Если НоваяЗадача <> Неопределено Тогда
		НоваяЗадача.Напоминать = Ложь;
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеЗадачи(ТочкаМаршрута)
	
	ШаблонАктПриемки = НСтр("ru = '№ %1 от %2; Контрагент: %3'");
	
	ОписаниеЗаполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонАктПриемки,
		СокрЛП(НомерВходящейНакладной),
		Формат(ДатаВходящейНакладной, "ДФ=дд.ММ.гггг"),
		СформироватьСсылкуHTML(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Контрагент")
		)
	);
	
	Описания = Новый Структура(
		"ЗаполнениеАкта, ЗаполнениеАктаИзРЦ",
		ОписаниеЗаполнения, ОписаниеЗаполнения
	);
	
	Если Корректировка Тогда
		Описания.ЗаполнениеАкта = Описания.ЗаполнениеАкта + "; " + НСтр("ru = 'Корректировка'");
	КонецЕсли;
	
	Результат = Новый Соответствие();
	Для каждого Описание Из Описания Цикл
		Результат.Вставить(БизнесПроцессы.иж_ПриемкаТоваров.ТочкиМаршрута[Описание.Ключ], Описание.Значение);
	КонецЦикла;
	
	Возврат Результат[ТочкаМаршрута];
	
КонецФункции

Функция СформироватьСсылкуHTML(Ссылка)
	
	ШаблонСсылка = "<a id='%1' href='about:blank'>%2</a>";
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСсылка, ПолучитьНавигационнуюСсылку(Ссылка), Строка(Ссылка));
	
КонецФункции


Процедура СнятьСвязанныеДокументыСОбмена()
	
	// Убрать автоматическую регистрацию со всех узлов слишком геморно, 
	// посему создан сей костыль для удаления регистрации
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриходнаяНакладнаяИзменения.Узел,
		|	ПриходнаяНакладнаяИзменения.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходнаяНакладная.Изменения КАК ПриходнаяНакладнаяИзменения
		|ГДЕ
		|	ПриходнаяНакладнаяИзменения.Ссылка = &Основание
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Подчиненные.Узел,
		|	Подчиненные.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПередачаТоваровМеждуФирмамиИзменения.Узел КАК Узел,
		|		ПередачаТоваровМеждуФирмамиИзменения.Ссылка КАК Ссылка,
		|		ПередачаТоваровМеждуФирмамиИзменения.Ссылка.ДокОснование КАК ДокОснование
		|	ИЗ
		|		Документ.ПередачаТоваровМеждуФирмами.Изменения КАК ПередачаТоваровМеждуФирмамиИзменения
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КоррекцияЗапасовИзменения.Узел,
		|		КоррекцияЗапасовИзменения.Ссылка,
		|		КоррекцияЗапасовИзменения.Ссылка.ДокОснование
		|	ИЗ
		|		Документ.КоррекцияЗапасов.Изменения КАК КоррекцияЗапасовИзменения) КАК Подчиненные
		|ГДЕ
		|	Подчиненные.ДокОснование = &Основание
		|ИТОГИ ПО
		|	Ссылка";
		
	Изменения = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для каждого Документ Из Изменения.Строки Цикл
		СписокУзлов = Документ.Строки.ВыгрузитьКолонку("Узел");
		ПланыОбмена.УдалитьРегистрациюИзменений(СписокУзлов, Документ.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция СвязанныеДокументы()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокОснование", Основание);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подчиненные.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПередачаТоваровМеждуФирмами.Ссылка КАК Ссылка,
		|		ПередачаТоваровМеждуФирмами.ДокОснование КАК ДокОснование,
		|		ПередачаТоваровМеждуФирмами.ПометкаУдаления КАК ПометкаУдаления
		|	ИЗ
		|		Документ.ПередачаТоваровМеждуФирмами КАК ПередачаТоваровМеждуФирмами
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КоррекцияЗапасов.Ссылка,
		|		КоррекцияЗапасов.ДокОснование,
		|		КоррекцияЗапасов.ПометкаУдаления
		|	ИЗ
		|		Документ.КоррекцияЗапасов КАК КоррекцияЗапасов) КАК Подчиненные
		|ГДЕ
		|	Подчиненные.ДокОснование = &ДокОснование
		|	И НЕ Подчиненные.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	
	СписокДокументов = ?(Результат.Пустой(), 
		Новый Массив(), 
		Результат.Выгрузить().ВыгрузитьКолонку("Ссылка")
	);
	
	Возврат СписокДокументов;
	
КонецФункции


Функция ПоставкаИзРЦ()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//++БИТ БВО 2015-06-16
	//ВоткинскоеШоссе = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.СтруктурнаяЕдиницаРЦ);
	ВоткинскоеШоссе = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.СтруктурнаяЕдиницаРЦ));
	//--БИТ БВО 2015-06-16
	Результат = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Грузоотправитель") = ВоткинскоеШоссе);
	
	Возврат Результат;
	
КонецФункции


Функция ИсполнительПриемки()
	
	Возврат ?(Корректировка, ИсполнительКорректировки, Неопределено);
	
КонецФункции

Функция ПроверитьЗаполнениеАкта(ТочкаМаршрута) Экспорт 
	
	ДополнительныеСвойства.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// {ВетровИА 2015-07-31 Обращение №0000134411 
Функция ПроверитьРазрешеноПриходоватьБрак( Контрагент ) Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Izh_ЗначенияСвойствОбъектов.Объект,
	               |	Izh_ЗначенияСвойствОбъектов.Свойство,
	               |	Izh_ЗначенияСвойствОбъектов.Значение
	               |ИЗ
	               |	РегистрСведений.Izh_ЗначенияСвойствОбъектов КАК Izh_ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	Izh_ЗначенияСвойствОбъектов.Объект = &Объект
	               |	И Izh_ЗначенияСвойствОбъектов.Свойство = &Свойство";
				   
	Запрос.УстановитьПараметр("Объект", Контрагент);	
	Запрос.УстановитьПараметр("Свойство", 
		ПланыВидовХарактеристик.ДополнительныеРеквизитыКонтрагентов.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаРазрешеноПриходоватьБрак)));
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Значение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
// {ВетровИА 2015-07-31 Обращение №0000134411 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБЪЕКТА

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Состав Цикл
		СтрокаТЧ.Расхождение = СтрокаТЧ.Количество - СтрокаТЧ.КоличествоПоДокументу;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПутьКДанным = "Объект.";
	ТочкаМаршрута = Неопределено;
	
	Если ДополнительныеСвойства.Свойство("ТочкаМаршрута", ТочкаМаршрута) Тогда
		ПутьКДанным = "БизнесПроцесс.";
		Отказ = НЕ Izh_ОбщегоНазначения.ПроверитьЗаполнениеОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты, "БизнесПроцесс");
		ДополнительныеСвойства.Удалить("ТочкаМаршрута");
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	ТекстОшибки = НСтр("ru = 'Не заполнена дата производства в строке %1'");
	ПолеОшибки = ПутьКДанным + "Состав[%1].ДатаПроизводства";
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Состав.ВыгрузитьКолонку("Номенклатура"), "ТипТовара");
	Для каждого СтрокаТЧ Из Состав Цикл
		Если ЗначенияРеквизитов[СтрокаТЧ.Номенклатура].ТипТовара = Перечисления.ТипыТоваров.Весовой И НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаПроизводства) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолеОшибки, XMLСтрока(СтрокаТЧ.НомерСтроки - 1)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТЧ.НомерСтроки)
			);
		КонецЕсли;
	КонецЦикла;
	
	Если ТочкаМаршрута <> Неопределено Тогда
		
		// {ВетровИА 2015-07-31 Обращение №0000134411 
		ИзРЦ = (ТочкаМаршрута = БизнесПроцессы.иж_ПриемкаТоваров.ТочкиМаршрута.ЗаполнениеАктаИзРЦ) ИЛИ (ПроверитьРазрешеноПриходоватьБрак(Основание.Контрагент));
		РазрешеноПриходоватьБрак = ПроверитьРазрешеноПриходоватьБрак(Основание.Контрагент);
		// ВетровИА 2015-07-31 Обращение №0000134411} 
		
		ПолеОшибки = ПутьКДанным + "Состав[%1].ПричиныРасхождений";
		
		ТекстОшибкиНеРавно = НСтр("ru = 'Расхождение в строке %1 не равно расхождению по причинам'");
		ТекстОшибкиПревышениеБрак = НСтр("ru = 'Расхождение по браку в строке %1 превышает допустимый максимум'");
		ТекстОшибкиНеОписано = НСтр("ru = 'Расхождение в строке %1 не соответствует описанным причинам'");
		
		Если ИзРЦ Тогда
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Причины", ПричиныРасхождений.Выгрузить());
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Причины.КлючСтроки,
				|	Причины.Причина,
				|	Причины.Количество
				|ПОМЕСТИТЬ ВТ_Причины
				|ИЗ
				|	&Причины КАК Причины
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Причины.КлючСтроки,
				|	СУММА(ВЫБОР
				|			КОГДА Izh_ПричиныРасхожденийПриПриемке.ПризнакПриемки <> Значение(Перечисление.РезультатПриемки.Брак) 
				|					И Izh_ПричиныРасхожденийПриПриемке.ПризнакПриемки <> Значение(Перечисление.РезультатПриемки.Недогруз)
				|				ТОГДА ВТ_Причины.Количество
				|			ИНАЧЕ 0
				|		КОНЕЦ) КАК Количество,
				|	СУММА(ВЫБОР
				|			КОГДА Izh_ПричиныРасхожденийПриПриемке.ПризнакПриемки = Значение(Перечисление.РезультатПриемки.Брак)
				|				ТОГДА ВТ_Причины.Количество
				|			ИНАЧЕ 0
				|		КОНЕЦ) КАК КоличествоБрак,
				|	СУММА(ВЫБОР
				|			КОГДА Izh_ПричиныРасхожденийПриПриемке.ПризнакПриемки = Значение(Перечисление.РезультатПриемки.Недогруз)
				|				ТОГДА ВТ_Причины.Количество
				|			ИНАЧЕ 0
				|		КОНЕЦ) КАК КоличествоНедогруз
				|ИЗ
				|	ВТ_Причины КАК ВТ_Причины
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Izh_ПричиныРасхожденийПриПриемке КАК Izh_ПричиныРасхожденийПриПриемке
				|		ПО ВТ_Причины.Причина = Izh_ПричиныРасхожденийПриПриемке.Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ_Причины.КлючСтроки";
			Причины = Запрос.Выполнить().Выгрузить();
		Иначе
			Причины = ПричиныРасхождений.Выгрузить();
		КонецЕсли;
		
		
		Для каждого СтрокаСостав Из Состав Цикл
			
			Расхождения = Причины.Скопировать(Новый Структура("КлючСтроки", СтрокаСостав.КлючСтроки));
			РасхождениеПоПричинам = Расхождения.Итог("Количество");
			// {ВетровИА Обращение №0000136071
			Если ИзРЦ И НЕ РазрешеноПриходоватьБрак Тогда
				РасхождениеПоПричинам = РасхождениеПоПричинам + Расхождения.Итог("КоличествоНедогруз"); 		
			КонецЕсли;
			// ВетровИА Обращение №0000136071}
			
			ТекстОшибки = "";
				
			Если РасхождениеПоПричинам <> Izh_ОбщегоНазначенияКлиентСервер.ПоМодулю(СтрокаСостав.Расхождение) Тогда
				Если ИзРЦ Тогда
					ТекстОшибки = ТекстОшибкиНеОписано;
				Иначе
					ТекстОшибки = ТекстОшибкиНеРавно;
				КонецЕсли;
			ИначеЕсли ИзРЦ Тогда
				
				РасхождениеПоБраку = Расхождения.Итог("КоличествоБрак");
				Если РасхождениеПоБраку > СтрокаСостав.Количество Тогда
					ТекстОшибки = ТекстОшибкиПревышениеБрак;
				КонецЕсли;				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолеОшибки, XMLСтрока(СтрокаСостав.НомерСтроки - 1)),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаСостав.НомерСтроки)
				);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТОЧЕК МАРШРУТА

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	Отказ = НЕ УправлениеБизнесПроцессамиСервер.БизнесПроцессРазрешен(Ссылка);
	
	Отказ = Отказ 
		ИЛИ НЕ ЗначениеЗаполнено(Основание) 
		ИЛИ НЕ ЗначениеЗаполнено(Основание.Состав);
	
КонецПроцедуры

Процедура СозданиеАктаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяНакладная.НомерДокумента КАК НомерВходящейНакладной,
		|	ПриходнаяНакладная.ДатаДокумента КАК ДатаВходящейНакладной
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|ГДЕ
		|	ПриходнаяНакладная.Ссылка = &Основание";
	НоваяШапка = Запрос.Выполнить().Выбрать();
	НоваяШапка.Следующий();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриходнаяНакладнаяСостав.Номенклатура,
		|	ПриходнаяНакладнаяСостав.ЕдиницаИзмерения,
		|	ПриходнаяНакладнаяСостав.Количество,
		|	ПриходнаяНакладнаяСостав.КоличествоПоДокументу,
		|	ПриходнаяНакладнаяСостав.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
		|	ПриходнаяНакладнаяСостав.НомерСтроки КАК КлючСтроки,
		|	ПриходнаяНакладнаяСостав.НомерСтроки КАК ИсходнаяПозиция,
		|	ПриходнаяНакладнаяСостав.Вес,
		|	ПриходнаяНакладнаяСостав.ЕдиницаВеса,
		|	ПриходнаяНакладнаяСостав.Количество - ПриходнаяНакладнаяСостав.КоличествоПоДокументу КАК Расхождение
		|ИЗ
		|	Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
		|ГДЕ
		|	ПриходнаяНакладнаяСостав.Ссылка = &Основание";
	НовыйСостав = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НоваяШапка);
	Состав.Загрузить(НовыйСостав);
	
	// Автоматическое заполнение причин расхождений
	НесанкционированнаяПоставка = Справочники.Номенклатура.НайтиПоКоду(
		ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодНесанкционированнаяПоставка)
	);
	
	//++ БИТ БВО 2015-06-16
	//ПричинаНеПоставка = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ПричинаНесанкционированнаяПоставка);
	ПричинаНеПоставка = Справочники.Izh_ПричиныРасхожденийПриПриемке.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ПричинаНесанкционированнаяПоставка));
	//--БИТ БВО 2015-06-16
	
	Для каждого СтрокаТЧ Из Состав Цикл
		Если СтрокаТЧ.Номенклатура = НесанкционированнаяПоставка Тогда
			ЗаполнитьЗначенияСвойств(ПричиныРасхождений.Добавить(), Новый Структура(
				"КлючСтроки, Причина, Количество",
				СтрокаТЧ.КлючСтроки,
				ПричинаНеПоставка,
				СтрокаТЧ.Количество
			));
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Записать();
	
КонецПроцедуры


Процедура ПоставкаИзРЦВыборЗадачиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПоставкаИзРЦ();
	
КонецПроцедуры

Процедура ЗаполнениеАктаИзРЦПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СформироватьЗадачи(ИсполнительПриемки(), ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЗаполнениеАктаИзРЦОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = ПроверитьЗаполнениеАкта(ТочкаМаршрутаБизнесПроцесса);
	
КонецПроцедуры

Процедура ЗаполнениеАктаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СформироватьЗадачи(ИсполнительПриемки(), ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЗаполнениеАктаОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = ПроверитьЗаполнениеАкта(ТочкаМаршрутаБизнесПроцесса);
	
КонецПроцедуры

Процедура ЗавершитьПриемкуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗавершитьПроцесс;
	
КонецПроцедуры


Процедура ПерезаполнениеОснованияОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОснованиеОбъект = Основание.ПолучитьОбъект();
	ОснованиеОбъект.Дата = ТекущаяДата();
	ЗаполнитьЗначенияСвойств(ОснованиеОбъект, Новый Структура(
		"НомерДокумента, ДатаДокумента",
		НомерВходящейНакладной, ДатаВходящейНакладной
	));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза", ОснованиеОбъект.Дата);
	Запрос.УстановитьПараметр("Контрагент", ОснованиеОбъект.Контрагент);
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	иж_ПриемкаТоваровСостав.Номенклатура,
		|	иж_ПриемкаТоваровСостав.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена
		|ИЗ
		|	БизнесПроцесс.иж_ПриемкаТоваров.Состав КАК иж_ПриемкаТоваровСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НоменклатураКонтрагента.Контрагент КАК Контрагент,
		|			НоменклатураКонтрагента.Номенклатура КАК Номенклатура,
		|			НоменклатураКонтрагента.Цена КАК Цена
		|		ИЗ
		|			РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЦеныНоменклатурыЗакупочныеСрезПоследних.СтруктурнаяЕдиница,
		|			ЦеныНоменклатурыЗакупочныеСрезПоследних.Номенклатура,
		|			ЦеныНоменклатурыЗакупочныеСрезПоследних.Цена
		|		ИЗ
		|			РегистрСведений.ЦеныНоменклатурыЗакупочные.СрезПоследних(&ДатаСреза, ) КАК ЦеныНоменклатурыЗакупочныеСрезПоследних) КАК ЦеныНоменклатуры
		|		ПО иж_ПриемкаТоваровСостав.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И (ЦеныНоменклатуры.Контрагент = &Контрагент)
		|ГДЕ
		|	иж_ПриемкаТоваровСостав.Ссылка = &Ссылка
		|	И иж_ПриемкаТоваровСостав.ИсходнаяПозиция = 0";
	ЦеныНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	НовыеКолонки = "ЦенаБезНДС,ЦенаДоговора";
	Izh_ОбработкаКоллекций.ДобавитьКолонки(ЦеныНоменклатуры, НовыеКолонки);
	
	Цены = ЦеныНоменклатуры.ВыгрузитьКолонку("Цена");
	Для каждого Колонка Из Izh_СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НовыеКолонки,,, Истина) Цикл
		ЦеныНоменклатуры.ЗагрузитьКолонку(Цены, Колонка);
	КонецЦикла;
	
	// Перезаполнение тч Состав документа основания
	Для каждого СтрокаТЧ Из Состав Цикл
		
		// новая строка или уже существующая
		Если СтрокаТЧ.ИсходнаяПозиция = 0 Тогда
			
			СтрокаОснование = ОснованиеОбъект.Состав.Добавить();
			ЗаполнитьЗначенияСвойств(
				СтрокаОснование,
				ЦеныНоменклатуры.Найти(СтрокаТЧ.Номенклатура, "Номенклатура")
			);
			
			// запись информации о новой созданной строке в БП
			СтрокаТЧ.ИсходнаяПозиция = СтрокаОснование.НомерСтроки;
			
		ИначеЕсли СтрокаТЧ.ИсходнаяПозиция = -1 Тогда
			
			Продолжить;
			
		Иначе
			
			СтрокаОснование = ОснованиеОбъект.Состав[СтрокаТЧ.ИсходнаяПозиция - 1];
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаОснование, СтрокаТЧ);
		Izh_ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаОснование);
		
		СтрокаОснование.Izh_КоличествоБрак = 0;
		
	КонецЦикла;
	
	// Чистка ПН от нес.поставок
	НесанкционированнаяПоставка = Izh_ОбменEDI.НесанкционированнаяПоставка();
	
	Сч = 0;
	ИсходныйНомер = 0;
	Пока Сч < ОснованиеОбъект.Состав.Количество() Цикл
		
		СтрокаОснование = ОснованиеОбъект.Состав[Сч];
		
		ИсходныйНомер = ИсходныйНомер + 1;
		СтрокаСостав = Состав.Найти(ИсходныйНомер, "ИсходнаяПозиция");
		Если СтрокаСостав = Неопределено Тогда
			Сч = Сч + 1;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОснование.Номенклатура = НесанкционированнаяПоставка Тогда
			ОснованиеОбъект.Состав.Удалить(СтрокаОснование);
			СтрокаСостав.ИсходнаяПозиция = -1;
		Иначе
			Сч = Сч + 1;
			СтрокаСостав.ИсходнаяПозиция = СтрокаОснование.НомерСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	иж_ПриемкаТоваровСостав.Номенклатура,
		|	иж_ПриемкаТоваровПричиныРасхождений.Причина,
		|	СУММА(иж_ПриемкаТоваровПричиныРасхождений.Количество) КАК Количество
		|ИЗ
		|	БизнесПроцесс.иж_ПриемкаТоваров.Состав КАК иж_ПриемкаТоваровСостав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.иж_ПриемкаТоваров.ПричиныРасхождений КАК иж_ПриемкаТоваровПричиныРасхождений
		|		ПО иж_ПриемкаТоваровСостав.Ссылка = иж_ПриемкаТоваровПричиныРасхождений.Ссылка
		|			И иж_ПриемкаТоваровСостав.КлючСтроки = иж_ПриемкаТоваровПричиныРасхождений.КлючСтроки
		|ГДЕ
		|	иж_ПриемкаТоваровСостав.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	иж_ПриемкаТоваровСостав.Номенклатура,
		|	иж_ПриемкаТоваровПричиныРасхождений.Причина";
	ПричиныРасхожденийДляОснования = Запрос.Выполнить().Выгрузить();
	ОснованиеОбъект.Izh_ПричиныРасхождений.Загрузить(ПричиныРасхожденийДляОснования);
	
	// Этот список заполняется в последующих точках, при корректировке его надо очищать
	СписокДокументовДляПроведения.Очистить();
	
	// Документы, подчиненные основанию
	ПодчиненныеДокументы = СвязанныеДокументы();
	
	Если ЗначениеЗаполнено(ПодчиненныеДокументы) Тогда
		Для каждого Документ Из ПодчиненныеДокументы Цикл
			ДокОбъект = Документ.ПолучитьОбъект();
			ДокОбъект.ДополнительныеСвойства.Вставить("ОтправкаRMS", Истина); // костыль для Юриной доработки
			ДокОбъект.ДополнительныеСвойства.Вставить("РазрешеноРедактировать", Истина); // костыль для Юриной доработки
			ДокОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	КонецЕсли;
	
	ОснованиеОбъект.ПометкаУдаления = Ложь;
	ОснованиеОбъект.ДополнительныеСвойства.Вставить("ОтправкаRMS", Истина); // костыль для Юриной доработки
	ОснованиеОбъект.Записать(
		?(ОснованиеОбъект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)
	);
	
	ЭтотОбъект.Записать();
	
КонецПроцедуры

Процедура ЗаполнениеРегистровОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	иж_ПриемкаТоваровСостав.Номенклатура,
		|	МАКСИМУМ(иж_ПриемкаТоваровСостав.ДатаПроизводства) КАК ДатаПроизводства,
		|	иж_ПриемкаТоваровСостав.Ссылка.Основание КАК Документ,
		|	иж_ПриемкаТоваровСостав.Ссылка.Основание.Дата КАК Период
		|ИЗ
		|	БизнесПроцесс.иж_ПриемкаТоваров.Состав КАК иж_ПриемкаТоваровСостав
		|ГДЕ
		|	иж_ПриемкаТоваровСостав.Ссылка = &Ссылка
		|	И иж_ПриемкаТоваровСостав.ДатаПроизводства <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	иж_ПриемкаТоваровСостав.Номенклатура,
		|	иж_ПриемкаТоваровСостав.Ссылка.Основание,
		|	иж_ПриемкаТоваровСостав.Ссылка.Основание.Дата";
	ДатаПроизводства = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.Izh_ДатаПроизводстваТовара.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Основание);
	НаборЗаписей.Загрузить(ДатаПроизводства);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры


Процедура ПоставкаИзРЦПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПоставкаИзРЦ();
	
КонецПроцедуры

// ВетровИА 2015-07-29 Обращение №0000134411} 
Процедура РазрешеноПриходоватьБракПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПроверитьРазрешеноПриходоватьБрак(Основание.Контрагент);
	
КонецПроцедуры
// ВетровИА 2015-07-29 Обращение №0000134411} 

Процедура ПроверкаИСписаниеНедостачиОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Основание", Основание);
	// {ВетровИА 2015-08-06 Обращение 0000135383
	Запрос.Текст =
		"ВЫБРАТЬ
		|	иж_ПриемкаТоваровСостав.Номенклатура,
		|	иж_ПриемкаТоваровСостав.ЕдиницаИзмерения,
		|	иж_ПриемкаТоваровСостав.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
		|	Ключи.Брак,
		|	Ключи.Недогруз,
		|	ВЫБОР 
		|		КОГДА Ключи.Брак <> 0 
		|       	ТОГДА ИСТИНА
		|       ИНАЧЕ ЛОЖЬ
		|   КОНЕЦ КАК ЭтоБрак,
		|	иж_ПриемкаТоваровСостав.Количество * иж_ПриемкаТоваровСостав.Номенклатура.НормаУбыли / 100 КАК ДопустимаяНормаСписания,
		|	ПриходнаяНакладнаяСостав.Цена,
		|	ПриходнаяНакладнаяСостав.СтавкаНДС,
		|	иж_ПриемкаТоваровСостав.ИсходнаяПозиция
		|ИЗ
		|	БизнесПроцесс.иж_ПриемкаТоваров.Состав КАК иж_ПриемкаТоваровСостав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			иж_ПриемкаТоваровПричиныРасхождений.КлючСтроки КАК КлючСтроки,
		|			СУММА(ВЫБОР
		|				КОГДА иж_ПриемкаТоваровПричиныРасхождений.Причина.ПризнакПриемки = Значение(Перечисление.РезультатПриемки.Брак)
		|					ТОГДА иж_ПриемкаТоваровПричиныРасхождений.Количество
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК Брак,
		|			СУММА(ВЫБОР
		|				КОГДА иж_ПриемкаТоваровПричиныРасхождений.Причина.ПризнакПриемки = Значение(Перечисление.РезультатПриемки.Недогруз)
		|					ТОГДА иж_ПриемкаТоваровПричиныРасхождений.Количество
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК Недогруз
		|			ИЗ
		|				БизнесПроцесс.иж_ПриемкаТоваров.ПричиныРасхождений КАК иж_ПриемкаТоваровПричиныРасхождений
		|			ГДЕ
		|				иж_ПриемкаТоваровПричиныРасхождений.Ссылка = &Ссылка
		|				И (иж_ПриемкаТоваровПричиныРасхождений.Причина.ПризнакПриемки = Значение(Перечисление.РезультатПриемки.Брак)
		|					ИЛИ иж_ПриемкаТоваровПричиныРасхождений.Причина.ПризнакПриемки = Значение(Перечисление.РезультатПриемки.Недогруз))
		|			СГРУППИРОВАТЬ ПО
		|				иж_ПриемкаТоваровПричиныРасхождений.КлючСтроки) КАК Ключи
		|		ПО иж_ПриемкаТоваровСостав.КлючСтроки = Ключи.КлючСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
		|		ПО иж_ПриемкаТоваровСостав.ИсходнаяПозиция = ПриходнаяНакладнаяСостав.НомерСтроки
		|ГДЕ
		|	иж_ПриемкаТоваровСостав.Ссылка = &Ссылка
		|	И ПриходнаяНакладнаяСостав.Ссылка = &Основание";
	// ВетровИА 2015-08-06 Обращение 0000135383}	
	ДляСписания = Запрос.Выполнить().Выгрузить();
	// !!!! efim
	#Если _ Тогда
		ДляСписания = Состав;
	#КонецЕсли
	// !!!!
	
	//++БИТ БВО 2015-06-16
	//ПриПриемке = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ВидСписанияПриПриемке);
	//ПриХранении = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ВидСписанияПриРеализации);
	ПриПриемке	= Справочники.ВидыСписания.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ВидСписанияПриПриемке));
	ПриХранении	= Справочники.ВидыСписания.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ВидСписанияПриРеализации));
	//--БИТ БВО 2015-06-16
	
	// {ВетровИА 2015-07-29 Обращение №0000134411   
	ЗаСчетПоставщика = Справочники.ВидыСписания.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ВидСписанияЗаСчетПоставщика)); 
	// ВетровИА 2015-07-29 Обращение №0000134411}    
	
	КоррекцияСостав = Документы.КоррекцияЗапасов.СоздатьДокумент().Состав.ВыгрузитьКолонки();
	КоррекцияСостав.Колонки.Удалить("НомерСтроки");
	Izh_ОбработкаКоллекций.ДобавитьКолонки(КоррекцияСостав, "ВидСписания");
	// !!!! efim
	#Если _ Тогда
		КоррекцияСостав = Документы.КоррекцияЗапасов.СоздатьДокумент().Состав;
	#КонецЕсли
	// !!!!
	
	ОснованиеОбъект = Основание.ПолучитьОбъект();
	
	// {ВетровИА Обращение №0000136071
	Если ПоставкаИзРЦ() Тогда
		ДляСписания = ДляСписания.Скопировать(Новый Структура("ЭтоБрак", ИСТИНА)); 	
	КонецЕсли;
	// ВетровИА Обращение №0000136071}
	
	Для каждого СтрокаТЗ Из ДляСписания Цикл
		
		ДопустимаяНормаСписания = СтрокаТЗ.ДопустимаяНормаСписания;
		Брак = СтрокаТЗ.Брак;
		Недогруз = СтрокаТЗ.Недогруз; 
		
		// Нужно заполнить количество брака и добавить его к количеству основания, чтобы потом списать его коррекцией
		СтрокаОснование = ОснованиеОбъект.Состав[СтрокаТЗ.ИсходнаяПозиция - 1];
		ЗаполнитьЗначенияСвойств(СтрокаОснование, Новый Структура(
			"Izh_КоличествоБрак",
			Брак,
		));
		//Izh_ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаОснование);
		
		НоваяСтрока = КоррекцияСостав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КолонкиДляЗаполнения = "ВидСписания, Количество";
		
		Если ПоставкаИзРЦ() Тогда 
			
			Если Брак < ДопустимаяНормаСписания Тогда
				
				// при приемке
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Новый Структура(КолонкиДляЗаполнения,
					ПриПриемке,
					Брак
				));
				
			Иначе // брака больше нормы
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Новый Структура(КолонкиДляЗаполнения,
					ПриХранении,
					Брак
				));
				
			КонецЕсли;
			
		// {ВетровИА 2015-08-06 Обращение 0000135383	
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Новый Структура(КолонкиДляЗаполнения,
				ЗаСчетПоставщика,
				Брак + Недогруз
			));
		КонецЕсли;
		// ВетровИА 2015-08-06 Обращение 0000135383} 
	КонецЦикла;
	
	ВидыСписания = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСписания, КоррекцияСостав.ВыгрузитьКолонку("ВидСписания"), Истина);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КоррекцияЗапасов.Ссылка
		|ИЗ
		|	Документ.КоррекцияЗапасов КАК КоррекцияЗапасов
		|ГДЕ
		|	КоррекцияЗапасов.ДокОснование = &Основание";
	СтараяКоррекция = Запрос.Выполнить().Выбрать();
	
	Для каждого ВидСписания Из ВидыСписания Цикл
			
		Если СтараяКоррекция.Следующий() Тогда
			ДокКоррекция = СтараяКоррекция.Ссылка.ПолучитьОбъект();
			ДокКоррекция.ПометкаУдаления = Ложь;
		Иначе
			ДокКоррекция = Документы.КоррекцияЗапасов.СоздатьДокумент();
		КонецЕсли;
		
		Отбор = Новый Структура("ВидСписания", ВидСписания);
		
		ДокКоррекция.Заполнить(Основание);
		ДокКоррекция.Дата = ОснованиеОбъект.Дата + 1;
		
		ЗаполнитьЗначенияСвойств(ДокКоррекция, Отбор);
		ДокКоррекция.Состав.Загрузить(
			КоррекцияСостав.Скопировать(Отбор)
		);
		
		Для каждого СтрокаТЧ Из ДокКоррекция.Состав Цикл
			Izh_ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ);
		КонецЦикла;
		
		ДокКоррекция.ДополнительныеСвойства.Вставить("ОтправкаRMS", Истина); // костыль для Юриной доработки
		ДокКоррекция.Записать(РежимЗаписиДокумента.Запись);
		
		СписокДокументовДляПроведения.Добавить().Документ = ДокКоррекция.Ссылка;
			
	КонецЦикла;
	
	ОснованиеОбъект.ДополнительныеСвойства.Вставить("ОтправкаRMS", Истина); // костыль для Юриной доработки
	ОснованиеОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ЭтотОбъект.Записать();
	
КонецПроцедуры


Процедура ПерепроведениеОснованияОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// костыль для заполнения тч приходной накладной
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Услуга", Перечисления.ВидыТоваров.Услуга);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриходнаяНакладнаяСостав.Номенклатура,
		|	СУММА(ПриходнаяНакладнаяСостав.Количество * ПриходнаяНакладнаяСостав.Коэффициент) КАК Количество,
		|	СУММА(ПриходнаяНакладнаяСостав.Сумма) КАК Сумма,
		|	СУММА(ПриходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ПриходнаяНакладнаяСостав.Сумма) КАК СуммаУпр,
		|	СУММА(ПриходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДСУпр
		|ИЗ
		|	Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
		|ГДЕ
		|	ПриходнаяНакладнаяСостав.Ссылка = &Основание
		|	И ПриходнаяНакладнаяСостав.Номенклатура.ВидТовара <> &Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриходнаяНакладнаяСостав.Номенклатура";
	ТЗОстаткиНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	СписокДокументов = Новый Массив();
	СписокДокументов.Добавить(Основание);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДокументов, СписокДокументовДляПроведения.Выгрузить().ВыгрузитьКолонку("Документ"));
	
	Для каждого Документ Из СписокДокументов Цикл
		
		// !!!! efim
		#Если _ Тогда
			Документ = Документы.ПриходнаяНакладная.ПустаяСсылка();
		#КонецЕсли
		// !!!!
		ДокОбъект = Документ.ПолучитьОбъект();
		ДокОбъект.ПометкаУдаления = Ложь;
		
		Если Документ = Основание Тогда
			ДокОбъект.ОстаткиНоменклатуры.Загрузить(ТЗОстаткиНоменклатуры);
		КонецЕсли;
		
		ДокОбъект.ДополнительныеСвойства.Вставить("НеМенятьВремя", Истина);
		ДокОбъект.ДополнительныеСвойства.Вставить("ОтправкаRMS", Истина); // костыль для Юриной доработки
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СнятьОснованиеСОбменаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СнятьСвязанныеДокументыСОбмена();
	
КонецПроцедуры


Процедура ПоставкаИзРЦИнтерактивПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПоставкаИзРЦ();
	
КонецПроцедуры

Процедура ДопСоглашениеПоАПППроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = (ТипЗнч(Основание.Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Основание.Контрагент.ДатаДопСоглашенияАПП));
	
КонецПроцедуры


Процедура КорректировкаАктаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	//++БИТ БВО 2015-06-16
	//Исполнитель = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.СлужебныйПользователь);
	Исполнитель = Справочники.Пользователи.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.СлужебныйПользователь));
	//--БИТ БВО 2015-06-16
	
	СформироватьЗадачи(Исполнитель, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КорректировкаАктаПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	Если Корректировка Тогда
		ИсполнительКорректировки = Задача.ЗадачуВыполнил;
	КонецЕсли;
	
КонецПроцедуры

Процедура КорректировкаАктаОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ТребуетсяКорректировкаАктаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = Корректировка И НЕ ЗавершитьПроцесс;
	
КонецПроцедуры


Процедура ЗарегистрироватьОснованиеНаОбменОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДокументов = Новый Массив();
	СписокДокументов.Добавить(Основание);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДокументов, СвязанныеДокументы());
	
	// Да, именно так, автоматическая регистрация сделает все за меня
	Для каждого Документ Из СписокДокументов Цикл
		ДокОбъект = Документ.ПолучитьОбъект();
		ДокОбъект.ПометкаУдаления = Ложь;
		ДокОбъект.ДополнительныеСвойства.Вставить("ОтправкаRMS", Истина); // костыль для Юриной доработки
			
		Если ДокОбъект.Проведен Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Иначе
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры



