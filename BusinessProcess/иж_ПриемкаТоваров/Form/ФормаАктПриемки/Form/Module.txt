
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРасхождениеПоМодулю(СтрокаСостав)
	
	СтрокаСостав.РасхождениеПоМодулю = Izh_ОбщегоНазначенияКлиентСервер.ПоМодулю(СтрокаСостав.Расхождение);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРасхождениеВСтрокеТабЧасти(Знач ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.БизнесПроцессСостав.ТекущиеДанные;
	КонецЕсли;
	
	Расхождение = ТекущаяСтрока.Количество - ТекущаяСтрока.КоличествоПоДокументу;
	
	ТекущаяСтрока.Расхождение = Расхождение;
	ЗаполнитьРасхождениеПоМодулю(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПричинуРасхождения(Форма, Знач СтрокаСостав)
	
	// !!!! efim
	#Если _ Тогда
		Форма = ЭтаФорма;
	#КонецЕсли
	// !!!!
	
	БизнесПроцесс = Форма.БизнесПроцесс;
	
	Если ТипЗнч(СтрокаСостав) = Тип("Число") Тогда
		СтрокаСостав = БизнесПроцесс.Состав.НайтиПоИдентификатору(СтрокаСостав);
	КонецЕсли;
	
	ПричиныРасхождений = БизнесПроцесс.ПричиныРасхождений.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСостав.КлючСтроки));
	
	СписокПричи = Новый Массив();
	Расхождение = 0;
	РасхождениеБрак = 0;
	РасхождениеПрочее = 0;
	Для каждого СтрокаТЧ Из ПричиныРасхождений Цикл
		СписокПричи.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2",
			СтрокаТЧ.Причина,
			XMLСтрока(СтрокаТЧ.Количество)
		));
		Расхождение = Расхождение + СтрокаТЧ.Количество;
		Если СтрокаТЧ.ПризнакПриемки = ПредопределенноеЗначение("Перечисление.РезультатПриемки.Брак") Тогда
			РасхождениеБрак = РасхождениеБрак + СтрокаТЧ.Количество;
		Иначе
			РасхождениеПрочее = РасхождениеПрочее + СтрокаТЧ.Количество;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтрокаСостав, Новый Структура(
		"ПричиныРасхождений, РасхождениеПоПричинам, РасхождениеПоБраку, РасхождениеПрочее",
		СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(СписокПричи, "; "),
		Расхождение,
		РасхождениеБрак,
		РасхождениеПрочее
	));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПричиныРасхождений()
	
	Для каждого СтрокаТЧ Из БизнесПроцесс.ПричиныРасхождений Цикл
		СтрокаТЧ.ПризнакПриемки = СтрокаТЧ.Причина.ПризнакПриемки;
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из БизнесПроцесс.Состав Цикл
		ЗаполнитьПричинуРасхождения(ЭтаФорма, СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСвязанныеСтроки(Форма, СтрокаСостав)
	
	СвязанныеСтроки = Форма.БизнесПроцесс.ПричиныРасхождений.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСостав.КлючСтроки));
	Для каждого СтрокаТЧ Из СвязанныеСтроки Цикл
		Форма.БизнесПроцесс.ПричиныРасхождений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДопРеквизитыНоменклатуры(Знач ТекущаяСтрока = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодСрокГодности = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаСрокХранения);
	Если НЕ ЗначениеЗаполнено(КодСрокГодности) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено И ТипЗнч(ТекущаяСтрока) = Тип("Число") Тогда
		ТекущаяСтрока = БизнесПроцесс.Состав.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	// Можно вызывать как для одной строки, так и для всей ТЧ
	СписокНоменклатуры = ?(ТекущаяСтрока = Неопределено, 
		БизнесПроцесс.Состав.Выгрузить().ВыгрузитьКолонку("Номенклатура"), 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяСтрока.Номенклатура)
	);
	
	// Первичное получение срока годности, 
	// его нужно преобразовать в число, чтобы сравнивать интервалами сроков реализации
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодСвойства", КодСрокГодности);
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Ссылка,
		|	МАКСИМУМ(НоменклатураДополнительныеРеквизиты.Значение) КАК СрокГодностиСтрока
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)
		|	И НоменклатураДополнительныеРеквизиты.Свойство.Код = &КодСвойства
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураДополнительныеРеквизиты.Ссылка";
	ЗначенияДопРеквизитов = Запрос.Выполнить().Выгрузить();
	
	Izh_ОбработкаКоллекций.ДобавитьКолонки(ЗначенияДопРеквизитов, Новый Структура("СрокГодности", "Число,15,5"));
	Для каждого Номенклатура Из ЗначенияДопРеквизитов Цикл
		Если ЗначениеЗаполнено(Номенклатура.СрокГодностиСтрока) Тогда
			
			СрокГодности = СокрЛП(Номенклатура.СрокГодностиСтрока);
			СрокГодности = СтрЗаменить(СрокГодности, " ", "");
			Попытка
				СрокГодности = Число(СрокГодности);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Номенклатура.СрокГодности = СрокГодности;
			
		КонецЕсли;
	КонецЦикла;
	
	// Поиск подходящего процента допустимого срока реализации по вхождению срока годности в его интервал
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", ЗначенияДопРеквизитов);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.СрокГодности
		|ПОМЕСТИТЬ ВТ_Номенклатура
		|ИЗ
		|	&Номенклатура КАК Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Номенклатура.Ссылка,
		|	ВТ_Номенклатура.СрокГодности,
		|	МАКСИМУМ(ДопустимыйСрокРеализации.ПроцентДопустимогоСрока) КАК ПроцентДопустимогоСрока
		|ИЗ
		|	ВТ_Номенклатура КАК ВТ_Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДопустимыйСрокРеализации КАК ДопустимыйСрокРеализации
		|		ПО (ВТ_Номенклатура.СрокГодности МЕЖДУ ДопустимыйСрокРеализации.НижнийПорог И ДопустимыйСрокРеализации.ВерхнийПорог)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Номенклатура.Ссылка,
		|	ВТ_Номенклатура.СрокГодности";
	ЗначенияДопРеквизитов = Запрос.Выполнить().Выгрузить();
	
	Для каждого Номенклатура Из ЗначенияДопРеквизитов Цикл
		ДатаПроизводства = ТекущаяДата() - Номенклатура.СрокГодности * 3600 * 24 * Номенклатура.ПроцентДопустимогоСрока / 100;
		Отбор = Новый Структура("Номенклатура", Номенклатура.Ссылка);
		Для каждого СтрокаСостав Из БизнесПроцесс.Состав.НайтиСтроки(Отбор) Цикл
			СтрокаСостав.ДопустимаяДатаПроизводства = ДатаПроизводства;
		КонецЦикла;
	КонецЦикла;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНоменклатуры, "ТипТовара");
	Для каждого Номенклатура Из ЗначенияРеквизитов Цикл
		Отбор = Новый Структура("Номенклатура", Номенклатура.Ключ);
		Для каждого СтрокаСостав Из БизнесПроцесс.Состав.НайтиСтроки(Отбор) Цикл
			ЗаполнитьЗначенияСвойств(СтрокаСостав, Номенклатура.Значение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьБизнесПроцесс(БПЗначение = Неопределено)
	
	Если БПЗначение = Неопределено Тогда
		БПЗначение = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
	КонецЕсли;
	ЗначениеВРеквизитФормы(БПЗначение, "БизнесПроцесс");
	
	ОбновитьПричиныРасхождений();
	ОбновитьДопРеквизитыНоменклатуры();
	
	Для каждого СтрокаТЧ Из БизнесПроцесс.Состав Цикл
		ЗаполнитьРасхождениеПоМодулю(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ПоставкаИзРЦ = (ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.иж_ПриемкаТоваров.ТочкиМаршрута.ЗаполнениеАктаИзРЦ);
	
	БПЗначение = РеквизитФормыВЗначение("БизнесПроцесс");
	РазрешеноПриходоватьБрак = БПЗначение.ПроверитьРазрешеноПриходоватьБрак( БизнесПроцесс.Основание.Контрагент ); 
	
	НесанкционированнаяПоставка = Справочники.Номенклатура.НайтиПоКоду(
		ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодНесанкционированнаяПоставка)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьБизнесПроцесс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ВыполнитьЗадачу = Ложь;
	ПараметрыЗаписи.Свойство("ВыполнитьЗадачу", ВыполнитьЗадачу);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	БПЗначение = РеквизитФормыВЗначение("БизнесПроцесс");
	БПЗначение.Записать();
	ПрочитатьБизнесПроцесс(БПЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьБизнесПроцесс();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ВыполнитьЗадачу Тогда
		БПЗначение = РеквизитФормыВЗначение("БизнесПроцесс");
		Отказ = НЕ БПЗначение.ПроверитьЗаполнениеАкта(ЗадачаОбъект.ТочкаМаршрута);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Ключи и новые позиции

// {ВетровИА 2015-06-5 Наряд 000152249  
Функция ИзменитьТекстЗапросаПодбораСтороннийПоставщик()
	Возврат "ВЫБРАТЬ
	        |	СписокНоменклатуры.Код,
	        |	СписокНоменклатуры.Наименование,
	        |	СУММА(ОстаткиНоменклатуры.КоличествоОстаток) КАК КоличествоОстаток,
	        |	СписокНоменклатуры.Группа,
	        |	ВЫБОР
	        |		КОГДА СписокНоменклатуры.ПометкаУдаления
	        |			ТОГДА ВЫБОР
	        |					КОГДА СписокНоменклатуры.Группа = 0
	        |						ТОГДА 2
	        |					ИНАЧЕ 3
	        |				КОНЕЦ
	        |		ИНАЧЕ ВЫБОР
	        |				КОГДА СписокНоменклатуры.Группа = 0
	        |					ТОГДА 0
	        |				ИНАЧЕ 1
	        |			КОНЕЦ
	        |	КОНЕЦ КАК Картинка,
	        |	СписокНоменклатуры.Ссылка КАК Номенклатура,
	        |	СписокНоменклатуры.Ссылка КАК Ссылка,
	        |	ЦеныНоменклатуры.Цена
	        |ИЗ
	        |	Справочник.Номенклатура КАК СписокНоменклатуры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	        |				,
	        |				МестоХранения = &МестоХранения
	        |					И Фирма = &Фирма) КАК ОстаткиНоменклатуры
	        |		ПО СписокНоменклатуры.Ссылка = ОстаткиНоменклатуры.Номенклатура
	        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			НоменклатураКонтрагента.Контрагент КАК Контрагент,
	        |			НоменклатураКонтрагента.Номенклатура КАК Номенклатура,
	        |			НоменклатураКонтрагента.Цена КАК Цена
	        |		ИЗ
	        |			РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	        |		ГДЕ
	        |			НоменклатураКонтрагента.Контрагент = &Контрагент) КАК ЦеныНоменклатуры
	        |		ПО (ЦеныНоменклатуры.Номенклатура = СписокНоменклатуры.Ссылка)
	        |ГДЕ
	        |	ВЫБОР
	        |			КОГДА СписокНоменклатуры.Группа = 0
	        |				ТОГДА СписокНоменклатуры.Ссылка В
	        |						(ВЫБРАТЬ
	        |							НоменклатураКонтрагента.Номенклатура
	        |						ИЗ
	        |							РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	        |						ГДЕ
	        |							НоменклатураКонтрагента.Контрагент = &Контрагент)
	        |			ИНАЧЕ ИСТИНА
	        |		КОНЕЦ
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	СписокНоменклатуры.Группа,
	        |	СписокНоменклатуры.Наименование,
	        |	СписокНоменклатуры.Код,
	        |	СписокНоменклатуры.ПометкаУдаления,
	        |	СписокНоменклатуры.Ссылка,
	        |	ЦеныНоменклатуры.Цена,
	        |	СписокНоменклатуры.Ссылка";
	
КонецФункции

Функция ИзменитьТекстЗапросаПодбораРЦ()
	Возврат "ВЫБРАТЬ
	        |	СписокНоменклатуры.Код,
	        |	СписокНоменклатуры.Наименование,
	        |	СУММА(ОстаткиНоменклатуры.КоличествоОстаток) КАК КоличествоОстаток,
	        |	СписокНоменклатуры.Группа,
	        |	ВЫБОР
	        |		КОГДА СписокНоменклатуры.ПометкаУдаления
	        |			ТОГДА ВЫБОР
	        |					КОГДА СписокНоменклатуры.Группа = 0
	        |						ТОГДА 2
	        |					ИНАЧЕ 3
	        |				КОНЕЦ
	        |		ИНАЧЕ ВЫБОР
	        |				КОГДА СписокНоменклатуры.Группа = 0
	        |					ТОГДА 0
	        |				ИНАЧЕ 1
	        |			КОНЕЦ
	        |	КОНЕЦ КАК Картинка,
	        |	СписокНоменклатуры.Ссылка КАК Номенклатура,
	        |	СписокНоменклатуры.Ссылка КАК Ссылка        
			|ИЗ
	        |	Справочник.Номенклатура КАК СписокНоменклатуры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	        |				,
	        |				МестоХранения = &МестоХранения
	        |					И Фирма = &Фирма) КАК ОстаткиНоменклатуры
	        |		ПО СписокНоменклатуры.Ссылка = ОстаткиНоменклатуры.Номенклатура
	        |ГДЕ
	        |	ВЫБОР
	        |			КОГДА СписокНоменклатуры.Группа = 0
	        |				ТОГДА СписокНоменклатуры.Ссылка В
	        |						(ВЫБРАТЬ
	        |							СтатусыНоменклатуры.Номенклатура
	        |						ИЗ
	        |							РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	        |						ГДЕ
	        |							СтатусыНоменклатуры.СтруктурнаяЕдиница В (&ТекущаяСтруктурнаяЕдиница)
			|						И СтатусыНоменклатуры.Статус = Значение(Перечисление.СтатусыТоваров.Активный))
	        |			ИНАЧЕ ИСТИНА
	        |		КОНЕЦ
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	СписокНоменклатуры.Группа,
	        |	СписокНоменклатуры.Наименование,
	        |	СписокНоменклатуры.Код,
	        |	СписокНоменклатуры.ПометкаУдаления,
	        |	СписокНоменклатуры.Ссылка,
	        |	СписокНоменклатуры.Ссылка";
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыДляПодбора()
	СтруктураПараметровПодбора = Новый Структура("ТекстЗапроса, Параметры, АдресВременногоХранилища",);
	СтруктураПараметровПодбора.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	СтруктураПараметрыЗапроса = Новый Структура();

	Если ТипЗнч(БизнесПроцесс.Основание.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтруктураПараметровПодбора.ТекстЗапроса = ИзменитьТекстЗапросаПодбораСтороннийПоставщик();
		СтруктураПараметрыЗапроса.Вставить("Контрагент", БизнесПроцесс.Основание.Контрагент);
	Иначе
		СтруктураПараметровПодбора.ТекстЗапроса = ИзменитьТекстЗапросаПодбораРЦ();
		ТекСЕ = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
		МассивСЕ = Новый Массив;
		Если ТекСЕ.ЭтоГруппа Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|		СтруктурныеЕдиницы.Ссылка КАК Ссылка
			|	ИЗ
			|		Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
			|	ГДЕ
			|		СтруктурныеЕдиницы.Родитель = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", ТекСЕ);
			тзРезультат = Запрос.Выполнить().Выгрузить();
			Для Каждого СтрокаТЗ из тзРезультат Цикл
				МассивСЕ.Добавить(СтрокаТЗ.Ссылка);		
			КонецЦикла	
		Иначе
			МассивСЕ.Добавить(ТекСЕ);	
		КонецЕсли;
		СтруктураПараметрыЗапроса.Вставить("ТекущаяСтруктурнаяЕдиница", МассивСЕ);
	КонецЕсли;
	СтруктураПараметрыЗапроса.Вставить("МестоХранения", БизнесПроцесс.Основание.Склад);
	СтруктураПараметрыЗапроса.Вставить("Фирма", БизнесПроцесс.Основание.Фирма);

	СтруктураПараметровПодбора.Параметры = СтруктураПараметрыЗапроса;
	
	Возврат СтруктураПараметровПодбора;	
КонецФункции

&НаСервере
Процедура ОбработатьПодборНаСервере(АдресХранилища)
	тзЗначений = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЗначениеВРеквизитФормы(тзЗначений, "ВыбраннаяНоменклатура");
КонецПроцедуры


&НаКлиенте
Процедура БизнесПроцессСоставПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	//	Если Копирование Тогда
	//		ТекущаяСтрока = Элементы.БизнесПроцессСостав.ТекущиеДанные;
	//		Если ТекущаяСтрока.ИсходнаяПозиция > 0 Тогда
	//			Отказ = Истина;
	//		КонецЕсли;
	//	КонецЕсли;

	Отказ = Истина;
	ПараметрыФормы = ПодготовитьПараметрыДляПодбора();
	Если ОткрытьФормуМодально("ОбщаяФорма.ПодборНоменклатуры",Новый Структура("СтруктураПараметров",ПараметрыФормы),ЭтаФорма) <> "ОК" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОбработатьПодборНаСервере(ПараметрыФормы.АдресВременногоХранилища);

	Для Каждого СтрокаКоллекции из ВыбраннаяНоменклатура Цикл
		ОбработкаТабличныхЧастейКлиент.ЗаполнитьИзПодбора(ЭтаФорма,БизнесПроцесс,СтрокаКоллекции,Элементы.БизнесПроцессСостав,СтандартнаяОбработка,СтрокаКоллекции.Количество);	
	КонецЦикла;	
КонецПроцедуры
// ВетровИА 2015-06-5 Наряд 000152249} 

&НаКлиенте
Процедура БизнесПроцессСоставПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока = Элементы.БизнесПроцессСостав.ТекущиеДанные;
		
		Если МаксКлюч = 0 Тогда
			Для каждого СтрокаТЧ Из БизнесПроцесс.Состав Цикл
				МаксКлюч = Макс(МаксКлюч, СтрокаТЧ.КлючСтроки);
			КонецЦикла;
		КонецЕсли;
		
		МаксКлюч = МаксКлюч + 1;
		ТекущаяСтрока.КлючСтроки = МаксКлюч;
		
		ЗаполнитьПричинуРасхождения(ЭтаФорма, ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесПроцессСоставПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.БизнесПроцессСостав.ТекущиеДанные;
	
	Если ТекущаяСтрока.ИсходнаяПозиция > 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УдалитьСвязанныеСтроки(ЭтаФорма, ТекущаяСтрока);
	
	Если ТекущаяСтрока.КлючСтроки = МаксКлюч Тогда
		МаксКлюч = МаксКлюч - 1;
	КонецЕсли;
	
КонецПроцедуры

// Номенклатура

&НаКлиенте
Процедура БизнесПроцессСоставНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.БизнесПроцессСостав.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиент.ЗаполнитьСтрокуТабличнойЧастиПоУмолчанию(ТекущаяСтрока, Элементы.БизнесПроцессСостав, БизнесПроцесс, "БизнесПроцессСостав");
	
	ОбновитьДопРеквизитыНоменклатуры(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

// Заполнение ТЧ ПричиныРасхождений

&НаКлиенте
Процедура БизнесПроцессСоставПричиныРасхожденийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.БизнесПроцессСостав.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура(
		"ТекущаяСтрока, Причины, Расхождение, Количество, ПоставкаИзРЦ, РазрешеноПриходоватьБрак",
		ТекущаяСтрока.ПолучитьИдентификатор(),
		БизнесПроцессСоставПричиныРасхожденийНачалоВыбораСервер(ТекущаяСтрока.КлючСтроки),
		ТекущаяСтрока.Расхождение,
		ТекущаяСтрока.Количество,
		ПоставкаИзРЦ,
		РазрешеноПриходоватьБрак
	);
	
	ОткрытьФорму("БизнесПроцесс.иж_ПриемкаТоваров.Форма.ФормаВыбораПричин", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаСервере
Функция БизнесПроцессСоставПричиныРасхожденийНачалоВыбораСервер(Знач КлючСтроки)
	
	СписокПричин = БизнесПроцесс.ПричиныРасхождений.Выгрузить(Новый Структура("КлючСтроки", КлючСтроки));
	Возврат ПоместитьВоВременноеХранилище(СписокПричин);
	
КонецФункции

&НаКлиенте
Процедура БизнесПроцессСоставПричиныРасхожденийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	БизнесПроцессСоставПричиныРасхожденийОбработкаВыбораСервер(ВыбранноеЗначение);
 	
	ЗаполнитьПричинуРасхождения(ЭтаФорма, ВыбранноеЗначение.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура БизнесПроцессСоставПричиныРасхожденийОбработкаВыбораСервер(Знач Результат)
	
	ТекущаяСтрока = БизнесПроцесс.Состав.НайтиПоИдентификатору(Результат.ТекущаяСтрока);
	
	УдалитьСвязанныеСтроки(ЭтаФорма, ТекущаяСтрока);
	
	СписокПричин = ПолучитьИзВременногоХранилища(Результат.Причины);
	Izh_ОбработкаКоллекций.ДобавитьИЗаполнитьКолонки(СписокПричин, Новый Структура("КлючСтроки", ТекущаяСтрока.КлючСтроки));
	Для каждого СтрокаПричина Из СписокПричин Цикл
		ЗаполнитьЗначенияСвойств(БизнесПроцесс.ПричиныРасхождений.Добавить(), СтрокаПричина);
	КонецЦикла;
	
КонецПроцедуры

// Пересчет расхождения

&НаКлиенте
Процедура БизнесПроцессСоставКоличествоПоДокументуПриИзменении(Элемент)
	
	РассчитатьРасхождениеВСтрокеТабЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесПроцессСоставКоличествоПриИзменении(Элемент)
	
	РассчитатьРасхождениеВСтрокеТабЧасти();
	
КонецПроцедуры

// !!!! efim

&НаКлиенте
Процедура БизнесПроцессСоставВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.БизнесПроцессСоставНоменклатура Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаТЧ = БизнесПроцесс.Состав.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ОткрытьЗначение(СтрокаТЧ.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

// !!!!

//dps
&НаКлиенте
Процедура ЗагрузитьИзТСД(Команда)
	Контрагент = ПолучитьКонтрагента(БизнесПроцесс.Основание);
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо сначало заполнить контрагента");
		Возврат;	
	КонецЕсли;
	АдресХранилища = ПоместитьВоВременноеХранилищеНаСервере();
	СтруктураПараметровформы = Новый Структура("АдресХранилища,ВнешнийВызов,ВидДействия,СтруктураПараметров");
	СтруктураПараметровформы.АдресХранилища = АдресХранилища;
	СтруктураПараметровформы.ВнешнийВызов = Истина;
	СтруктураПараметровформы.ВидДействия = "Приемка";
	// BIT_Izhevsk ALProzorov 14/07/2015 -->>
	//СтруктураПараметровформы.СтруктураПараметров = Новый Структура("ОтборКонтрагент",Контрагент);
	СтруктураПараметровформы.СтруктураПараметров = Новый Структура("ОтборКонтрагент, Основание",Контрагент,БизнесПроцесс.Основание);
	//ФормаОбработки = ПолучитьФорму("Обработка.Izh_ТСД.Форма.ФормаОбработки",СтруктураПараметровформы,ЭтаФорма.УникальныйИдентификатор);
	ФормаОбработки = ПолучитьФорму("Обработка.Izh_ТСД_Магазин.Форма.ФормаОбработки",СтруктураПараметровформы,ЭтаФорма.УникальныйИдентификатор);
	// BIT_Izhevsk ALProzorov 14/07/2015 <<--
	Если ФормаОбработки.ОткрытьМодально()=КодВозвратаДиалога.ОК Тогда
		ОбработатьРезультатТСДНаСервере(АдресХранилища);
		РассчитатьРасхождениеВСтрокеТабЧасти(); //ОбновитьТекстРасхожденияСуммы();   
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтрагента(Ссылка)
	Возврат Ссылка.Контрагент;
КонецФункции

&НаСервере
Функция ПоместитьВовременноеХранилищеНаСервере()
	тзШаблон = Новый ТаблицаЗначений;
	тзШаблон.Колонки.Добавить("Контрагент");
	тзШаблон.Колонки.Добавить("Номенклатура");
	тзШаблон.Колонки.Добавить("Количество");
	Возврат ПоместитьВоВременноеХранилище(тзШаблон,ЭтаФорма.УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОбработатьРезультатТСДНаСервере(АдресХранилища)
	тзВременная = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	текБизнесПроцесс = РеквизитФормыВЗначение("БизнесПроцесс");
	Для Каждого СтрокаТЧ из текБизнесПроцесс.Состав Цикл
		МассивСтрок = тзВременная.НайтиСтроки(Новый Структура("Номенклатура",СтрокаТЧ.Номенклатура));
		Если МассивСтрок.Количество()=0 Тогда
			СтрокаТЧ.Количество = 0;
		ИначеЕсли МассивСтрок.Количество()>0 Тогда // всегда добавляем в первую строку
			//++БИТ БВО - 2015-10-08 Из ТСД выгружается отрицательное количество
			//СтрокаТЧ.Количество = МассивСтрок[0].Количество;
			СтрокаТЧ.Количество = ?(МассивСтрок[0].Количество < 0, -МассивСтрок[0].Количество, МассивСтрок[0].Количество);
			//--БИТ БВО - 2015-10-08
		КонецЕсли;
		
		// BIT_Izhevsk ALProzorov 23/08/2015 -->>
		СтрокаТЧ.Расхождение = СтрокаТЧ.Количество - СтрокаТЧ.КоличествоПоДокументу;
		// BIT_Izhevsk ALProzorov 23/08/2015 <<--
		
		Для Каждого СтрокаМассива из МассивСтрок Цикл
			тзВременная.Удалить(СтрокаМассива);
		КонецЦикла;
		МассивСтрок = БизнесПроцесс.ПричиныРасхождений.НайтиСтроки(Новый Структура("КлючСтроки",СтрокаТЧ.КлючСтроки));
		Для Каждого СтрокаМассива из МассивСтрок Цикл
			текБизнесПроцесс.ПричиныРасхождений.Удалить(СтрокаМассива);
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаТЗ из тзВременная Цикл
		НоваяСтрока = текБизнесПроцесс.Состав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
		СтруктураДанных = Новый Структура;    	
		СтруктураДанных.Вставить("Номенклатура",	 НоваяСтрока.Номенклатура);
		СтруктураДанных.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
		СтруктураДанных.Вставить("Коэффициент",НоваяСтрока.Коэффициент);
		СтруктураДанных.Вставить("СтавкаНДС", НоваяСтрока.Номенклатура);
		ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураДанных);
		НоваяСтрока.КлючСтроки = Новый УникальныйИдентификатор;
		НоваяСтрока.КоличествоПоДокументу = 0;
		НоваяСтрока.Расхождение = НоваяСтрока.Количество - НоваяСтрока.КоличествоПоДокументу;
	КонецЦикла;
	ЗначениеВРеквизитФормы(текБизнесПроцесс,"БизнесПроцесс");
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	Если ЗадачаОбъект.Выполнена Тогда 
		Параметр = Новый Структура("Ключ", БизнесПроцесс.Основание); 
		Форма = ПолучитьФорму("Документ.ПриходнаяНакладная.Форма.ФормаДокумента",Параметр);
 		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

