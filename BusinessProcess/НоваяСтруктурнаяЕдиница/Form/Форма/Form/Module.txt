//////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Перем ЗакрытьФормуБезусловно;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗадачаСсылка = Параметры.Ключ;
	СтруктурнаяЕдиница = Параметры.Ключ.БизнесПроцесс.Основание;
	ТЗСтруктурныеЕдиницы.Загрузить(Параметры.Ключ.БизнесПроцесс.СтруктурныеЕдиницы.Выгрузить());
	Если СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	Если СтруктурнаяЕдиница.ЭтоГруппа Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Фильтр = "Магазин";
	ЭтаФорма.Заголовок = "Мастер создания новой структурной единицы";
	Для каждого БП Из Метаданные.БизнесПроцессы Цикл
		Если Найти(БП.Пояснение,Фильтр) > 0 Тогда
			НастройкаБП.Добавить(БП.Имя,БП.Синоним);
		КонецЕсли;	
	КонецЦикла;	 
	 
	Дерево = УправлениеПараметрамиСЕСервер.ЗаполнитьДеревоПараметров(СтруктурнаяЕдиница);
	ЗначениеВДанныеФормы(Дерево,ДеревоПараметров);
	ВерсияОбмена = Константы.ВерсияОбменаФинансы.Получить();
	Если ЗначениеЗаполнено(ВерсияОбмена) Тогда
		Нашли = Ложь;
		СвойствоВерсияОбмена = ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВерсияОбменаФинансы;
		ПервыйУровень = ДеревоПараметров.ПолучитьЭлементы();
		Для Каждого ПервыйУровень Из ДеревоПараметров.ПолучитьЭлементы() Цикл
			Для Каждого ВторойУровень Из ПервыйУровень.ПолучитьЭлементы() Цикл
				Для Каждого ТретийУровень Из ВторойУровень.ПолучитьЭлементы() Цикл
					Если ТретийУровень.Свойство = СвойствоВерсияОбмена Тогда
						Если НЕ ЗначениеЗаполнено(ТретийУровень.Значение) Тогда
							ТретийУровень.Значение = ВерсияОбмена;
							ТретийУровень.Представление = ТретийУровень.Значение;
						КонецЕсли;	
						Нашли = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				Если Нашли = Истина Тогда
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			Если Нашли = Истина Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	// убираем видимость закладок групп формы
	//ОбщегоНазначения.УстановитьОтображениеСтраницГруппФормы(Элементы, "СтраницыМастера, КнопкиМастера");
	
	
	
	//МетаданныеПланаОбмена = Метаданные.ПланыОбмена[Объект.ИмяПланаОбмена];
	
	
	//УстановитьВидимостьНаСервере();
	
	ВидБазы = 0;
	ТипСУБД = "";
	Узел = ПланыОбмена.ОбменРБД.НайтиПоКоду(СтруктурнаяЕдиница.Код);
	МожноСоздатьФайловуюБазу = Истина;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		МожноСоздатьФайловуюБазу = Ложь;
	КонецЕсли;
	
	КодыЛокализации = ПолучитьДопустимыеКодыЛокализации();
	ЯзыкФайловойБазы = Элементы.Найти("ЯзыкФайловойБазы");
	ЯзыкБазыСервера = Элементы.Найти("ЯзыкБазыСервера");
	Для Каждого Код Из КодыЛокализации Цикл
		Представление = ПредставлениеКодаЛокализации(Код);
		ЯзыкФайловойБазы.СписокВыбора.Добавить(Код, Представление);
		ЯзыкБазыСервера.СписокВыбора.Добавить(Код, Представление);
	КонецЦикла;
	Язык = КодЛокализацииИнформационнойБазы();
	
	ТипПлатформыСервера = РаботаСФайламиПовтИсп.ТипПлатформыСервера();
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		Элементы.ПолноеИмяФайловойБазы.АвтоОтметкаНезаполненного = Истина;
		Элементы.ПутьКАрхивуСФайламиТомов.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ПолноеИмяФайловойБазыLinux.АвтоОтметкаНезаполненного = Истина;
		Элементы.ПутьКАрхивуСФайламиТомовLinux.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;	
	
	ЗаполнитьСклады(СтруктурнаяЕдиница);
	//Элементы.Склады.Доступность = Не ТаблицаСкладов.Количество()=0;
	ЗаполнитьПользователи(СтруктурнаяЕдиница);
	Сотрудники.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	ЗаполнитьККМ(СтруктурнаяЕдиница);	

КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// проверка для работы мастера в Веб-клиенте
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		
		НСтрока = НСтр("ru = 'Для работы мастера необходимо установить расширение работы с файлами!'");
		
		Предупреждение(НСтрока);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// проверка для работы COM
	СтрокаОшибки = "";
	Если Не ПроверкаCOMConnector(СтрокаОшибки) Тогда
		Предупреждение(СтрокаОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Устанавливаем текущую таблицу переходов
	ТаблицаПереходовПоСценарию1();
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ЗапроситьПодтверждениеЗакрытияФормы(Отказ, , ЗакрытьФормуБезусловно, НСтр("ru = 'Закрыть мастер?'")); 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	
	Отказ = Ложь;
	
	ВыполнитьПроверкиПриНажатииГотово(Отказ);
	
	Если Не Отказ Тогда

		
		Если ТЗСтруктурныеЕдиницы.Количество()>0 И ВидБазы = 1 Тогда
			ЭтаФорма.Заголовок = "Мастер создания новой структурной единицы: "+СтруктурнаяЕдиница;

			ВыполнитьДействияПриНажатииГотово(Отказ,Ложь);
			I=0;
			Для Каждого Строка Из ТЗСтруктурныеЕдиницы Цикл
				I=I+1;
				СтруктурнаяЕдиница = Строка.СтруктурнаяЕдиница;
				ИмяБазы = "Store"+ОбщегоНазначенияСервер.ПолучитьСвойствоПоСсылке(СтруктурнаяЕдиница,"Код");
				ИмяБазыДанных = ИмяБазы;
				ИсправитьПутьПубликацииВебСервисов(ИмяБазы);
				ЭтаФорма.Заголовок = "Мастер создания новой структурной единицы: "+СтруктурнаяЕдиница;
				ВыполнитьДействияПриНажатииГотово(Отказ,?(I=ТЗСтруктурныеЕдиницы.Количество(),Истина,Ложь));
			КонецЦикла;
		Иначе	
			ВыполнитьДействияПриНажатииГотово(Отказ,Истина);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьПутьПубликацииВебСервисов(ИмяБазы)
	Нашли = Ложь;
	ПутьПубликацииВебСервисов = ВернутьПутьПубликацииВебСервисов(); 
	ПервыйУровень = ДеревоПараметров.ПолучитьЭлементы();
	Для Каждого ПервыйУровень Из ДеревоПараметров.ПолучитьЭлементы() Цикл
		Для Каждого ВторойУровень Из ПервыйУровень.ПолучитьЭлементы() Цикл
			Для Каждого ТретийУровень Из ВторойУровень.ПолучитьЭлементы() Цикл
				Если ТретийУровень.Свойство = ПутьПубликацииВебСервисов Тогда
					Если ЗначениеЗаполнено(ТретийУровень.Значение) Тогда
						IP = СтрЗаменить(ТретийУровень.Значение,"http://","");
						IP = Сред(IP,0,Найти(IP,"/")-1);
						//Папка = СтрЗаменить(Папка,"/","");
						ТретийУровень.Значение = "http://"+IP+"/"+ИмяБазы;//+"/";
						ТретийУровень.Представление = ТретийУровень.Значение;
					КонецЕсли;	
					Нашли = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			Если Нашли = Истина Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если Нашли = Истина Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		
		Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
		
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) – Число. Порядковый номер перехода, который соответствует текущему шагу перехода
//  ИмяОсновнойСтраницы (обязательный) – Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//  ИмяСтраницыНавигации (обязательный) – Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//  ИмяСтраницыДекорации (необязательный) – Строка. Имя страницы панели "ПанельДекорации", которая соответствует текущему номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) – Строка. Имя функции-обработчика события открытия текущей страницы помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) – Строка. Имя функции-обработчика события перехода на следующую страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) – Строка. Имя функции-обработчика события перехода на предыдущую страницу помощника
//  ДлительнаяОперация (необязательный) - Булево. Признак отображения страницы длительной операции.
//  Истина - отображается страница длительной операции; Ложь - отображается обычная страница. Значение по умолчанию - Ложь.
// 
&НаКлиенте
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = ""
	)
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "Страница3"
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_Страница3_ПриПереходеДалее(Отказ)
	ПроверитьПользователей(Отказ);
КонецФункции



&НаКлиенте
Процедура ВидБазыПриИзменении(Элемент)
	// переключить страницу параметров
	Страницы = Элементы.Найти("Страницы");
	Страницы.ТекущаяСтраница = Страницы.ПодчиненныеЭлементы[ВидБазы];
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаОснованияПриИзменении(Элемент)
	Заполнено = ЗначениеЗаполнено(СтруктурнаяЕдиницаОснования);
	Склады = Заполнено;
	Элементы.Склады.Доступность = Заполнено;
	Элементы.Пользователи.Доступность = Заполнено;
	Элементы.НастройкиБизнесПроцессов.Доступность = Заполнено;
	Элементы.НастройкиОбменов.Доступность = Заполнено;
	Элементы.IPСтруктурнойЕдиницы.Доступность = Заполнено;
	ФлагПользователи = Заполнено;
	НастройкиБизнесПроцессов = Заполнено;
	НастройкиОбменов = Заполнено;
	КоличествоККМ = ПолучитьКоличествоККМ();
	СкладыПриИзменении(Элемент);
	ПользователиПриИзменении(Элемент);
	НастройкиБизнесПроцессовПриИзменении(Элемент);
	НастройкиОбменовПриИзменении(Элемент);
	КоличествоККМПриИзменении(Элемент);
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоККМ()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ККМ.Ссылка) КАК Ссылка
		|ИЗ
		|	Справочник.ККМ КАК ККМ
		|ГДЕ
		|	ККМ.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", СтруктурнаяЕдиницаОснования);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции


&НаКлиенте
Процедура СкладыПриИзменении(Элемент)
	Если Склады Тогда
		ЗаполнитьСклады(СтруктурнаяЕдиницаОснования);
	Иначе
		Если Элементы.Склады.Доступность Тогда
			ТаблицаСкладов.Очистить();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСклады(СЕ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Наименование,
		|	Склады.ВидСклада,
		|	Склады.ВидЗапасов,
		|	Склады.ОтрицательныеОстатки,
		|	Склады.Код
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", СЕ);

	Результат = Запрос.Выполнить();

	ТаблицаСкладов.Загрузить(Результат.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриИзменении(Элемент)
	Если ФлагПользователи Тогда
		ЗаполнитьПользователи(СтруктурнаяЕдиницаОснования);
	Иначе
		ЗаполнитьПользователи(СтруктурнаяЕдиница);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователи(СЕ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиСтруктурныхЕдиниц.Пользователь КАК Значение,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК Пометка
		|ИЗ
		|	РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
		|
		|СГРУППИРОВАТЬ ПО
		|	ПользователиСтруктурныхЕдиниц.Пользователь";

	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СЕ);
    СписокПользователей.Очистить();
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(); 
    Пока Выборка.Следующий() Цикл
		СписокПользователей.Добавить(Выборка.Значение,Выборка.Значение,Выборка.Пометка);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиБизнесПроцессовПриИзменении(Элемент)
	Если НастройкиБизнесПроцессов Тогда
		ЗаполнитьНастройкиБизнесПроцессов();
	Иначе
		Для Каждого Строка Из НастройкаБП Цикл
			Строка.Пометка = Ложь;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиБизнесПроцессов()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаБизнесПроцессов.Наименование,
		|	НастройкаБизнесПроцессов.Использование
		|ИЗ
		|	Справочник.НастройкаБизнесПроцессов КАК НастройкаБизнесПроцессов
		|ГДЕ
		|	НастройкаБизнесПроцессов.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", СтруктурнаяЕдиницаОснования);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(); 
    Пока Выборка.Следующий() Цикл
		Элемент = НастройкаБП.НайтиПоЗначению(Выборка.Наименование);
		Если Элемент <> Неопределено И Выборка.Использование Тогда
			Элемент.Пометка = Истина;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменовПриИзменении(Элемент)
	Если НастройкиОбменов Тогда
		ЗаполнитьНастройкиОбменов();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОбменов()
	Дерево = УправлениеПараметрамиСЕСервер.ЗаполнитьДеревоПараметров(СтруктурнаяЕдиницаОснования);
	ЗначениеВДанныеФормы(Дерево,ДеревоПараметров);
	ВерсияОбмена = Константы.ВерсияОбменаФинансы.Получить();
	Если ЗначениеЗаполнено(ВерсияОбмена) Тогда
		Нашли = Ложь;
		СвойствоВерсияОбмена = ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВерсияОбменаФинансы;
		ПервыйУровень = ДеревоПараметров.ПолучитьЭлементы();
		Для Каждого ПервыйУровень Из ДеревоПараметров.ПолучитьЭлементы() Цикл
			Для Каждого ВторойУровень Из ПервыйУровень.ПолучитьЭлементы() Цикл
				Для Каждого ТретийУровень Из ВторойУровень.ПолучитьЭлементы() Цикл
					Если ТретийУровень.Свойство = СвойствоВерсияОбмена Тогда
						Если НЕ ЗначениеЗаполнено(ТретийУровень.Значение) Тогда
							ТретийУровень.Значение = ВерсияОбмена;
							ТретийУровень.Представление = ТретийУровень.Значение;
						КонецЕсли;	
						Нашли = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				Если Нашли = Истина Тогда
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			Если Нашли = Истина Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьККМ(СЕ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ККМ.Наименование,
		|	ККМ.Код,
		|	ККМ.Фирма,
		|	ККМ.ТипККМ
		|ИЗ
		|	Справочник.ККМ КАК ККМ
		|ГДЕ
		|	ККМ.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", СЕ);

	Результат = Запрос.Выполнить();

	ТаблицаККМ.Загрузить(Результат.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура КоличествоККМПриИзменении(Элемент)
	ТаблицаККМ.Очистить();
	ТипККМ = ВернутьТипККМ();
	Для I=1 по КоличествоККМ Цикл
		Строка = ТаблицаККМ.Добавить();
		Строка.Код = I;
		Строка.Наименование = "ККМ №"+I;
		Строка.ТипККМ = ТипККМ;
		Строка.Фирма = Фирма;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ВернутьТипККМ()
	Возврат Перечисления.ТипыККМ.Автоматизированная;
КонецФункции


&НаКлиенте
Процедура ДеревоПараметровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Элемент.ПодчиненныеЭлементы.ДеревоПараметровПредставление.ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначенияСвойства;
КонецПроцедуры


&НаКлиенте
Процедура ДеревоПараметровПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Картинка = 1 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Найти(Элемент.ТекущиеДанные.Свойство,"Расписание")<>0 Тогда
		Отказ = Истина;
		Расписание = ?(ПустаяСтрока(Элемент.ТекущиеДанные.Значение),Новый РасписаниеРегламентногоЗадания,РегламентныеЗаданияСервер.ПолучитьЗначениеИзСтроки(Элемент.ТекущиеДанные.Значение));
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
		Если Диалог.ОткрытьМодально() Тогда
			Расписание = Диалог.Расписание;
			Элемент.ТекущиеДанные.Значение = РегламентныеЗаданияСервер.ЗаписатьЗначениеВСтроку(Расписание);
			Элемент.ТекущиеДанные.Представление = Строка(Диалог.Расписание);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДеревоПараметровПредставлениеПриИзменении(Элемент)
	Если Найти(Элементы.ДеревоПараметров.ТекущиеДанные.Свойство,"Расписание") = 0 Тогда
		Элементы.ДеревоПараметров.ТекущиеДанные.Значение = Элементы.ДеревоПараметров.ТекущиеДанные.Представление;
	КонецЕсли;
	Если Найти(Элементы.ДеревоПараметров.ТекущиеДанные.Свойство,"Пароль")<>0 Тогда
		Если ЗначениеЗаполнено(Элементы.ДеревоПараметров.ТекущиеДанные.Значение) Тогда
			Элементы.ДеревоПараметров.ТекущиеДанные.Представление = "**********";
		КонецЕсли	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПроверкиПриНажатииГотово(Отказ)
	Если ВидБазы = 0 Тогда
		//ТипПлатформыСервера = РаботаСФайламиПовтИсп.ТипПлатформыСервера();
		//Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		//	Если Не ПустаяСтрока(ПолноеИмяФайловойБазыWindows) И (Лев(ПолноеИмяФайловойБазыWindows, 2) <> "\\" ИЛИ Найти(ПолноеИмяФайловойБазыWindows, ":") <> 0) Тогда
		//		ТекстОшибки = НСтр("ru = 'Путь к архиву с файлами томов должен быть в формате UNC (\\servername\resource) '");
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПолноеИмяФайловойБазыWindows",, Отказ);
		//	КонецЕсли;	
		//	
		//Иначе	
		//	ТекстОшибки = НСтр("ru = 'Создание начального образа файловой информационной базы на данной платформе не поддерживается.'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		//КонецЕсли;
		
		Если ПустаяСтрока(ПолноеИмяФайловойБазыWindows) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите каталог файловой базы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПолноеИмяФайловойБазы",, Отказ);
		КонецЕсли;	
		ФайлБазы = Новый Файл(ПолноеИмяФайловойБазыWindows);
		Если ФайлБазы.Существует() Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Каталог ""%1"" уже существует. Введите другое имя каталога.'"), ПолноеИмяФайловойБазыWindows);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПолноеИмяФайловойБазы",, Отказ);
		КонецЕсли;	
	Иначе
		Если ПустаяСтрока(Сервер) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите кластер серверов 1С:Предприятия'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Сервер",, Отказ);
		КонецЕсли;	
		Если ПустаяСтрока(ИмяБазы) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите имя информационной базы в кластере'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ИмяБазы",, Отказ);
		КонецЕсли;	
		Если ПустаяСтрока(ТипСУБД) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите тип СУБД'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ТипСУБД",, Отказ);
		КонецЕсли;	
		Если ПустаяСтрока(СерверБазыДанных) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите сервер базы данных'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "СерверБазыДанных",, Отказ);
		КонецЕсли;	
		Если ПустаяСтрока(ИмяБазыДанных) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите имя базы данных'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ИмяБазыДанных",, Отказ);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПриНажатииГотово(Отказ,Закрывать)
	Ошибка = "";
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),0, НСтр("ru = 'Выполняется создание складов...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	ВыполнитьСозданиеСкладов(Отказ,Ошибка);
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),5, НСтр("ru = 'Выполняется создание пользователей...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	ВыполнитьСозданиеПользователей(Отказ,Ошибка);
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),10, НСтр("ru = 'Выполняется создание ККМ...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	ВыполнитьСозданиеККМ(Отказ,Ошибка);
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),15, НСтр("ru = 'Выполняется настройка БП...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	ВыполнитьСозданиеНастроекБП(Отказ,Ошибка);
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),20, НСтр("ru = 'Записываются параметры СЕ...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	ВыполнитьСохранениеПараметровСЕ(Отказ,Ошибка);
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),25, НСтр("ru = 'Отправляются параметры СЕ в шину...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	ВыполнитьОтправкуПараметровСЕ(Отказ,Ошибка);
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),30, НСтр("ru = 'Создается начальный образ...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	СоздатьНачальныйОбраз(Отказ,Ошибка);
	
	Если ВидБазы = 1 И НеВыгружатьТовары = Ложь Тогда
		Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),90, НСтр("ru = 'Помечаются к выгрузке товары...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
		ОбменДаннымиРБДСервер.ЗарегистрироватьИзмененияДляНовогоУзла(Узел);
	КонецЕсли;	
	Если ВидБазы = 1 ИЛИ ВыгружатьБД = Ложь Тогда
		Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),95, НСтр("ru = 'Выполняется первоначальный запуск...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
		ВыполнитьПервоначальныйЗапуск(Отказ,Ошибка);
	КонецЕсли;
	
	УстановитьРежимРаботыСЕ(Отказ,Ошибка);	

	Если Отказ Тогда
		Сообщить(Ошибка);
	Иначе
		Если Закрывать Тогда
			ЗакрытьФормуБезусловно = Истина;
			Если ЗначениеЗаполнено(ЗадачаСсылка) Тогда
				УправлениеБизнесПроцессамиСервер.ВыполнитьЗадачу(ЗадачаСсылка);
				Оповестить("ЗадачаВыполнена");
			КонецЕсли;	
			Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),100, НСтр("ru = 'Работа мастера успешно завершена!'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
			Закрыть();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры   



&НаСервере
Процедура ВыполнитьСозданиеСкладов(Отказ,Ошибка)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Строка Из ТаблицаСкладов Цикл
		НайденныйСклад = Справочники.Склады.НайтиПоКоду(Строка.Код,,,СтруктурнаяЕдиница);
		Если НЕ ЗначениеЗаполнено(НайденныйСклад) Тогда
			НовыйСклад = Справочники.Склады.СоздатьЭлемент();
		Иначе
			НовыйСклад = НайденныйСклад.ПолучитьОбъект();
		КонецЕсли;	
		НовыйСклад.Владелец = СтруктурнаяЕдиница;
		ЗаполнитьЗначенияСвойств(НовыйСклад,Строка);
		Попытка
			НовыйСклад.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		    Отказ = Истина;
			Возврат;
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСозданиеПользователей(Отказ,Ошибка)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Набор = РегистрыСведений.ПользователиСтруктурныхЕдиниц.СоздатьНаборЗаписей();
	Набор.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница);
	Набор.Прочитать();
	Набор.Очистить();
	Для Каждого Строка Из СписокПользователей Цикл
		Если Строка.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;
		ЗаписьКопирования = Пользователи.НайтиПользователяПериферийнойБызы(Строка.Значение.Наименование);
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,ЗаписьКопирования);
		Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		Запись.Пользователь = Строка.Значение;
	КонецЦикла;	
	Попытка
		Набор.Записать();
	Исключение
		Ошибка = ОписаниеОшибки();
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСозданиеККМ(Отказ,Ошибка)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Строка Из ТаблицаККМ Цикл
		НайденныйККМ = Справочники.ККМ.НайтиПоКоду(Строка.Код,,,СтруктурнаяЕдиница);
		Если НЕ ЗначениеЗаполнено(НайденныйККМ) Тогда
			НовыйККМ = Справочники.ККМ.СоздатьЭлемент();
		Иначе
			НовыйККМ = НайденныйККМ.ПолучитьОбъект();
		КонецЕсли;	
		НовыйККМ.Владелец = СтруктурнаяЕдиница;
		ЗаполнитьЗначенияСвойств(НовыйККМ,Строка);
		Попытка
			НовыйККМ.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		    Отказ = Истина;
			Возврат;
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСозданиеНастроекБП(Отказ,Ошибка)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Строка Из НастройкаБП Цикл
		Если НЕ Строка.Пометка Тогда
			НайденныйБП = Справочники.НастройкаБизнесПроцессов.НайтиПоКоду(Строка.Значение,,,СтруктурнаяЕдиница);
			Если ЗначениеЗаполнено(НайденныйБП) Тогда
				СтарыйБП = НайденныйБП.ПолучитьОбъект();
				СтарыйБП.Использование = Ложь;
				СтарыйБП.Записать();
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		НайденныйБП = Справочники.НастройкаБизнесПроцессов.НайтиПоКоду(Строка.Значение,,,СтруктурнаяЕдиница);
		Если НЕ ЗначениеЗаполнено(НайденныйБП) Тогда
			НовыйБП = Справочники.НастройкаБизнесПроцессов.СоздатьЭлемент();
			НовыйБП.Владелец = СтруктурнаяЕдиница;
			НовыйБП.Код = Строка.Значение;
			НовыйБП.Наименование = Строка.Представление;
		Иначе
			НовыйБП = НайденныйБП.ПолучитьОбъект();
		КонецЕсли;	
		НовыйБП.Использование = Истина;
		
		НайденныйБПОснования = Справочники.НастройкаБизнесПроцессов.НайтиПоКоду(Строка.Значение,,,СтруктурнаяЕдиницаОснования);
		Если ЗначениеЗаполнено(НайденныйБПОснования) Тогда
			Если НайденныйБПОснования.НастройкиТочекМаршрута.Количество()>0 Тогда
				НовыйБП.НастройкиТочекМаршрута.Загрузить(НайденныйБПОснования.НастройкиТочекМаршрута.Выгрузить(,"ТочкаМаршрута,Групповая,РольИсполнителя,Выполнять,ОповещатьПоEmail,ОповещатьПоSMS"));
			КонецЕсли;
		Иначе	
			
		КонецЕсли;	
		
		Попытка
			НовыйБП.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		    Отказ = Истина;
			Возврат;
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСохранениеПараметровСЕ(Отказ,Ошибка)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Попытка
		УправлениеПараметрамиСЕСервер.ПеренестиЗначенияСвойств(СтруктурнаяЕдиница, РеквизитФормыВЗначение("ДеревоПараметров"));
	Исключение
		Ошибка = ОписаниеОшибки();
	    Отказ = Истина;
	КонецПопытки;	
КонецПроцедуры


&НаСервере
Процедура ВыполнитьОтправкуПараметровСЕ(Отказ,Ошибка)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УзелRIB = ПланыОбмена.ОбменRIB.НайтиПоКоду(1);
	Если НЕ УзелRIB.Пустая() Тогда
		Попытка
			ОбменДаннымиRIBСервер.ОбменДанными(УзелRIB);
		Исключение
			Ошибка = ОписаниеОшибки();
			//Отказ = Истина;
		КонецПопытки;
	Иначе
		Ошибка = "Не найден узел плана обмена ""ОбменRIB"".";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Код) Тогда
		Отказ = Истина;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Наименование) Тогда
		Отказ = Истина;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидСклада) Тогда
		Отказ = Истина;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидЗапасов) Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаККМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Код) Тогда
		Отказ = Истина;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Наименование) Тогда
		Отказ = Истина;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТипККМ) Тогда
		Отказ = Истина;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Фирма) Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура IPСтруктурнойЕдиницыПриИзменении(Элемент)
	Нашли = Ложь;
	ПутьПубликацииВебСервисов = ВернутьПутьПубликацииВебСервисов(); 
	ПервыйУровень = ДеревоПараметров.ПолучитьЭлементы();
	Для Каждого ПервыйУровень Из ДеревоПараметров.ПолучитьЭлементы() Цикл
		Для Каждого ВторойУровень Из ПервыйУровень.ПолучитьЭлементы() Цикл
			Для Каждого ТретийУровень Из ВторойУровень.ПолучитьЭлементы() Цикл
				Если ТретийУровень.Свойство = ПутьПубликацииВебСервисов Тогда
					Если ЗначениеЗаполнено(ТретийУровень.Значение) Тогда
						Папка = СтрЗаменить(ТретийУровень.Значение,"http://","");
						Папка = Сред(Папка,Найти(Папка,"/")+1);
						//Папка = СтрЗаменить(Папка,"/","");
						ТретийУровень.Значение = "http://"+СокрЛП(IPСтруктурнойЕдиницы)+"/"+Папка;//+"/";
						ТретийУровень.Представление = ТретийУровень.Значение;
					КонецЕсли;	
					Нашли = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			Если Нашли = Истина Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если Нашли = Истина Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ВернутьПутьПубликацииВебСервисов()
	Возврат ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПутьПубликацииВебСервисов;
КонецФункции

&НаСервере
Функция СоздатьУзел()
	Узел = ПланыОбмена.ОбменРБД.НайтиПоКоду(СтруктурнаяЕдиница.Код);
	Если Узел.Пустая() Тогда
		НовыйУзел = ПланыОбмена.ОбменРБД.СоздатьУзел();
		НовыйУзел.Код = СтруктурнаяЕдиница.Код;
		НовыйУзел.Наименование = СтруктурнаяЕдиница.Наименование;
		НовыйУзел.СтруктурнаяЕдиница = СтруктурнаяЕдиница.Ссылка;
		НовыйУзел.Записать();
		Узел = НовыйУзел.Ссылка;
	КонецЕсли;	
	Возврат Узел;
КонецФункции

&НаКлиенте
Процедура СоздатьНачальныйОбраз(Отказ,Ошибка)
	Узел = СоздатьУзел();
	
	
	ВременнаяСсылка = Неопределено;
	Если ВидБазы = 0 Тогда
		
		Если МожноСоздатьФайловуюБазу = Ложь Тогда
			Отказ = Истина;
			Ошибка = "Создание начального образа файловой информационной базы на данной платформе не поддерживается.";
			Возврат;
		КонецЕсли;
		
		Отказ = НЕ СоздатьПервичныйОбраз(Отказ,Узел,ПолноеИмяФайловойБазыWindows,АдминистраторСЕ,АдминистраторСЕПароль,ВыгружатьБД,АдминистраторУзлаИмя,АдминистраторУзлаПароль);
		//ОбменФайлами.СоздатьФайловыйНачальныйОбразНаСервере(Узел, УникальныйИдентификатор, Язык, ПолноеИмяФайловойБазыWindows,Ошибка);
		
	Иначе
		СтрокаСоединения = "Srvr=""" + Сервер + """;" 
						 + "Ref=""" + ИмяБазы + """;"
						 + "DBMS=""" + ТипСУБД + """;"
						 + "DBSrvr=""" + СерверБазыДанных + """;"
						 + "DB=""" + ИмяБазыДанных + """;"
						 + "DBUID=""" + ПользовательБазыДанных + """;"
						 + "DBPwd=""" + ПарольПользователя + """;"
						 + "SQLYOffs=""" + СтрЗаменить(Строка(СмещениеДат),Символы.НПП,"") + """;"
						 + "Locale=""" + Язык + """;";
		Отказ = НЕ ОбменФайлами.СоздатьСерверныйНачальныйОбразНаСервере(Узел, СтрокаСоединения, Ошибка);
		
	КонецЕсли;
КонецПроцедуры

//&НаСервере
//Процедура ПометитьКВыгрузкеСправочники(Отказ,Ошибка)
//	
//	  ОбменДаннымиРБДСервер.ЗарегистрироватьИзмененияДляНовогоУзла(Узел);
//	
//	
//КонецПроцедуры	

&НаКлиенте
Процедура ФирмаПриИзменении(Элемент)
	Для Каждого Строка Из ТаблицаККМ Цикл
		Строка.Фирма = Фирма;
	КонецЦикла;	
КонецПроцедуры

//&НаКлиенте
//Процедура ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ)
//	ОчиститьСообщения();
//	Если    мТекущийНомерСтраницы = 4 Тогда
//		ПроверитьПользователей(Отказ);
//	КонецЕсли;
//КонецПроцедуры

&НаСервере
Процедура ПроверитьПользователей(Отказ)
	Нашли = Ложь;
	НашлиАдминистратора = Ложь;
	Для Каждого Строка Из СписокПользователей Цикл
		Если Строка.Пометка Тогда
			Нашли = Истина;
		Иначе	
			Продолжить;
		КонецЕсли;
		Результат = Пользователи.НайтиПользователяПериферийнойБызы(Строка.Значение.Наименование);
		Если Результат <> Неопределено Тогда
			Если Результат.АутентификацияОС = Ложь Тогда
				СписокРолей = Результат.Роли.Получить();
				Если СписокРолей = Неопределено Тогда
					Пользователи.ПрочитатьПользователяИБ(Строка.Представление,,СписокРолей);
				КонецЕсли;	
				Для каждого Роль Из СписокРолей Цикл
					Если (ВРег(Роль) = ВРег("ПолныеПрава") ИЛИ ВРег(Роль) = ВРег("АдминистрированиеБД")) И (Результат.АутентификацияСтандартная ИЛИ Результат.АутентификацияОС)Тогда
						АдминистраторУзлаИмя=Результат.Имя;
						АдминистраторУзлаПароль=Результат.Пароль;
						Администратор = Строка.Представление;
						НашлиАдминистратора = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;	
		Если НашлиАдминистратора = Истина Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	Если Нашли = Ложь Тогда
		НСтрока = НСтр("ru = 'Не выбраны пользователи структурной единицы!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "СписокПользователей",, Отказ);
	КонецЕсли;
	Если НашлиАдминистратора = Ложь Тогда
		НСтрока = НСтр("ru = 'Не выбран пользователь с административными правами и аутентификацией 1С:Предприятия!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "СписокПользователей",, Отказ);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте 
Процедура ВыполнитьПервоначальныйЗапуск(Отказ,Ошибка)
	#Если не ВебКлиент тогда
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ИмяПрограммыЗапуска = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогПрограммы(), "1cv8c.exe");
		Если ВидБазы = 0 Тогда
			ПутьКБД = ПолноеИмяФайловойБазыWindows;
			ЗапуститьПриложение(ИмяПрограммыЗапуска+" ENTERPRISE /F"""+ПутьКБД+""" /DisableStartupMessages /N"+АдминистраторУзлаИмя+" /P"""+АдминистраторУзлаПароль+"""");
		Иначе
			ПутьКБД = """" + СокрЛП(Сервер) + "/" + СокрЛП(ИмяБазы) + """";
			ЗапуститьПриложение(ИмяПрограммыЗапуска+" ENTERPRISE /S"+ПутьКБД+" /DisableStartupMessages");
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры


&НаСервере
Функция НормализоватьПуть(стрПуть, флЛокальный = Истина) Экспорт
	стрРезультат = СокрЛП(стрПуть);
	сПервый = Лев(стрРезультат, 1);
	сПоследний = Прав(стрРезультат, 1);
	Если флЛокальный Тогда
		// локальный путь или локальная сеть
		стрРезультат = стрРезультат+?(сПоследний = "/" или сПоследний = "\", "", "\"); // слэш в конце
		стрРезультат = стрЗаменить(стрРезультат, "/", "\");
	Иначе
		// путь на ftp-сервере
		стрРезультат = ?(сПервый = "/" или сПервый = "\", "", "/")+стрРезультат; // слэш в начале (от корня)
		стрРезультат = стрРезультат+?(сПоследний = "/" или сПоследний = "\", "", "\"); // слэш в конце
		стрРезультат = стрЗаменить(стрРезультат, "\", "/");
	КонецЕсли;
	Возврат стрРезультат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуСоединенияСиБ() Экспорт
	стрСтрока = СтрокаСоединенияИнформационнойБазы();
	Если Лев(стрСтрока, 6) = "File=""" Тогда
		// файловая база
		стрСтрока = "/F"+Сред(стрСтрока, 6, стрДлина(стрСтрока)-6);
	Иначе
		// серверная база
		чДлина = стрДлина(стрСтрока);
		стрКоннект = стрЗаменить(стрСтрока, "Srvr=", "");
		стрКоннект = стрЗаменить(стрКоннект, """;Ref=""", "\");
		стрКоннект = стрЗаменить(стрКоннект, """;", """");
		стрСтрока = "/S"+стрКоннект;
	КонецЕсли;
	Возврат стрСтрока;
КонецФункции 

&НаКлиенте
Функция СоздатьПустуюБазу(стрКаталогОбраза,Пользователь,ПарольПользователя) 
	
	//Сообщить(КаталогПрограммы());
	//Возврат Ложь;
	
	ИмяФайлаКонфигурации = "Конфигурация";
	стрПоложениеЛога = """"+НормализоватьПуть(КаталогВременныхФайлов())+"1Cv8_xchg"+СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекущаяДата(),":","_"),".","_")," ", "_")+".log"""; // здесь будут логи жить
	стрПоложениеЛогаБезКавычек = НормализоватьПуть(КаталогВременныхФайлов())+"1Cv8_xchg"+СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекущаяДата(),":","_"),".","_")," ", "_")+".log"; // здесь будут логи жить
	стрПользователь = СокрЛП(Пользователь);
	стрПарольПользователя = СокрЛП(ПарольПользователя);
	
	// Сохранение конфигурации базы данных в файл+++
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),30, НСтр("ru = 'Сохранение конфигурации базы данных в файл...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	
	//Файл = Новый Файл(стрКаталогОбраза+ИмяФайлаКонфигурации+".Cf");
	//Если Файл.Существует() Тогда
	//	УдалитьФайлы(стрКаталогОбраза, Файл.Имя);
	//КонецЕсли; 
	
	КомандаСистемы("start """" /wait """+КаталогПрограммы()+"1Cv8.exe"" CONFIG "+ПолучитьСтрокуСоединенияСиБ()+" /DumpDBCfg"""+стрКаталогОбраза+ИмяФайлаКонфигурации+".Cf"" /Out"+стрПоложениеЛога+" /DisableStartupMessages /N"+стрПользователь+?(ЗначениеЗаполнено(стрПарольПользователя)," /P"+стрПарольПользователя,""), стрКаталогОбраза);	
	Файл = Новый Файл(стрКаталогОбраза+ИмяФайлаКонфигурации+".Cf");
	Если НЕ Файл.Существует() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка в процессе формирования файла конфигурации.", , "ПолноеИмяФайловойБазы");
		СделатьЗаписьЖурналаРегистрации("2Ошибка в процессе формирования файла конфигурации."); //dps ЗаписьЖурнала
		Возврат ложь;
	КонецЕсли; 
	
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),40, НСтр("ru = 'Конфигурация базы данных в файл сохранена.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	// Сохранение конфигурации базы данных в файл---
	
	// Создание пустой ИБ+++
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),40, НСтр("ru = 'Создается пустая ИБ...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	КомандаСистемы("start """" /wait """+КаталогПрограммы()+"1Cv8.exe"" CREATEINFOBASE ""File="""""+стрКаталогОбраза+""""""" /Out"+стрПоложениеЛога, стрКаталогОбраза);
	// Создание пустой ИБ---
	
	// Загрузка конфигурации в базу+++
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),40, НСтр("ru = 'Во вновь созданную базу загружается конфигурация...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	КомандаСистемы("start """" /wait """+КаталогПрограммы()+"1Cv8.exe"" CONFIG /F"""+стрКаталогОбраза+""" /LoadCfg"""+стрКаталогОбраза+ИмяФайлаКонфигурации+".Cf"" /Out"+стрПоложениеЛога+" /DisableStartupMessages ", стрКаталогОбраза);	
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),50, НСтр("ru = 'Конфигурация загружена.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	// Загрузка конфигурации в базу---
	// Обновление конфигурации ИБ+++
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),50, НСтр("ru = 'Выполняется обновление конфигурации ИБ...'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	КомандаСистемы("start """" /wait """+КаталогПрограммы()+"1Cv8.exe"" CONFIG /F"""+стрКаталогОбраза+""" /UpdateDBCfg /Out"+стрПоложениеЛога+"/DisableStartupMessages ", стрКаталогОбраза);	
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),60, НСтр("ru = 'Обновление конфигурации ИБ завершено.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	// Обновление конфигурации ИБ---
	Возврат Истина;
КонецФункции

&НаСервере
Функция НастроитьУзлыОбмена(стрКаталогОбраза,Узел)
	Попытка
		
		СисИнф = Новый СистемнаяИнформация;
		Версия = Лев(СисИнф.ВерсияПриложения,3);
		//{БредовЮГ 2015-08-29 Исправление версии ком коннектора
		ИмяКомКоннектора = ОбщегоНазначения.ИмяCOMСоединителя();
		обСоединение = Новый COMОбъект(ИмяКомКоннектора);
		//обСоединение = Новый COMОбъект("v82.ComConnector");
		//БредовЮГ  2015-08-29 Исправление версии ком коннектора } 
		
		 
		обОбъект = обСоединение.Connect("File="""+стрКаталогОбраза+""";");

		
		СЕЦентра = обОбъект.Справочники.СтруктурныеЕдиницы.Центр;
		
		ТекСЕУзла = Узел.СтруктурнаяЕдиница;
		УИДУзла = ТекСЕУзла.УникальныйИдентификатор();
		СтрокаУИД = XMLСтрока(УИДУзла);
		
		СЕ = обОбъект.Справочники.СтруктурныеЕдиницы.СоздатьЭлемент();
		СЕ.Код=ТекСЕУзла.Код;
		СЕ.Наименование=ТекСЕУзла.Наименование;
		СЕ.УстановитьСсылкуНового(обОбъект.Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(обОбъект.NewObject("УникальныйИдентификатор", СтрокаУИД)));
		СЕ.Записать();		
		
		УзелБазы = обОбъект.ПланыОбмена.ОбменРБД.ЭтотУзел().ПолучитьОбъект();
		УзелБазы.Код = ТекСЕУзла.Код;
		УзелБазы.Наименование = ТекСЕУзла.Наименование;
		УзелБазы.СтруктурнаяЕдиница = СЕ.Ссылка;
		УзелБазы.Записать();
		
		УзелЦентра = обОбъект.ПланыОбмена.ОбменРБД.СоздатьУзел();
		УзелЦентра.Код = ПланыОбмена.ОбменРБД.ЭтотУзел().Код;
		УзелЦентра.Наименование = ПланыОбмена.ОбменРБД.ЭтотУзел().Наименование;
		УзелЦентра.СтруктурнаяЕдиница = СЕЦентра.Ссылка;
		
		УзелЦентра.Записать();
		
		//обОбъект.ОмПривилегированный.СоздатьПользователяАдминистратор();
		обОбъект.ПланыОбмена.УстановитьГлавныйУзел(УзелЦентра.Ссылка);
		обОбъект = Неопределено; обСоединение = Неопределено;
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), , "ПолноеИмяФайловойБазы");
		СделатьЗаписьЖурналаРегистрации("1НастроитьУзлы Исключение " + ОписаниеОшибки()); //dps ЗаписьЖурнала
	КонецПопытки;
	
	обОбъект = Неопределено; обСоединение = Неопределено;

	Возврат Ложь;
КонецФункции 

&НаКлиенте
Функция ПроверкаCOMConnector(СтрокаОшибки)
	Попытка
		//{БредовЮГ 2015-08-29 Исправление версии ком коннектора
		ИмяКомКоннектора = ОбщегоНазначения.ИмяCOMСоединителя();
		обСоединение = Новый COMОбъект(ИмяКомКоннектора);
		//обСоединение = Новый COMОбъект("v82.ComConnector");
		//БредовЮГ  2015-08-29 Исправление версии ком коннектора} 
		Результат = Истина;
	Исключение
		СтрокаОшибки =ОписаниеОшибки();
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ЗапущенКонФигуратор() 
	мсвСоединений = ПолучитьСоединенияИнформационнойБазы();
	ЕстьКонфигуратор = Ложь;
	Для каждого соединение Из мсвСоединений Цикл
		//Если соединение.ИмяПриложения = "Config" Тогда
		  Если соединение.ИмяПриложения = "Designer" Тогда
			ЕстьКонфигуратор = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Возврат ЕстьКонфигуратор;
КонецФункции // ()

&НаСервере
Функция ПроверкаВозможностиВыполнения(стрКаталогОбраза,Узел)
	
	Если ЗапущенКонФигуратор() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Информационная база открыта конфигуратором.", , "ПолноеИмяФайловойБазы");
		Возврат ложь;
	КонецЕсли; 
	
	Файл = Новый Файл(стрКаталогОбраза);
	Если НЕ Файл.Существует() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка в процессе формирования файла конфигурации: неверно указан каталог сохранения.", , "ПолноеИмяФайловойБазы");
		Возврат ложь;
	КонецЕсли; 
	
	Если не ЗначениеЗаполнено(Узел) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо выбрать узел плана обмена для формирования первичного образа.", , "ПолноеИмяФайловойБазы");
		Возврат ложь;
	КонецЕсли; 
	
	Если (Узел. НомерОтправленного <> 0) ИЛИ (Узел.НомерПринятого <> 0) Тогда
		обУзел = Узел.ПолучитьОбъект();
		обУзел.НомерПринятого = 0;
		обУзел.Записать();
		//Сообщить("У выбранного узла сброшен счетчик принятых пакетов обмена.", СтатусСообщения.Внимание);
	КонецЕсли; 
	
	поЭтот = ПланыОбмена.ОбменРБД.ЭтотУзел();
	поГлавный = ПланыОбмена.ГлавныйУзел();
	Если поГлавный <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Первичный образ создается только в центральной ИБ.", , "ПолноеИмяФайловойБазы");
		Возврат ложь;
	КонецЕсли; 
	Если Узел = поЭтот Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранный узел плана обмена является текущим.", , "ПолноеИмяФайловойБазы");
		Возврат ложь;
	КонецЕсли; 

	маФайлы = НайтиФайлы(стрКаталогОбраза,"1Cv8.1CD");
	Если маФайлы.Количество() > 0 Тогда
		Попытка
			УдалитьФайлы(стрКаталогОбраза, маФайлы[0].Имя);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), , "ПолноеИмяФайловойБазы");
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция СписокМетаданныхДляВыгрузки(ПорогВыгрузки)
	// константы
	СписокИсключений = Новый СписокЗначений;
	СписокИсключений.Добавить(Метаданные.Справочники.КредитныеКарты); // Справочник :виды оплат
	СписокИсключений.Добавить(Метаданные.Справочники.ГруппыДоступа); // Справочник: Группы доступа
	СписокИсключений.Добавить(Метаданные.Справочники.КассыФирмы); // Справочник: Кассы фирмы
	СписокИсключений.Добавить(Метаданные.Справочники.ОрганыСертификации); // Справочник: Органы сертификации
	СписокИсключений.Добавить(Метаданные.Справочники.ПерсоналККМ); // Справочник: Персонал ККМ
	СписокИсключений.Добавить(Метаданные.Справочники.Пользователи); // Справочник: Пользователи
	СписокИсключений.Добавить(Метаданные.Справочники.ПрофилиГруппДоступа); // Справочник: профили групп доступа
	СписокИсключений.Добавить(Метаданные.Справочники.ПрофилиПользователейККМ); // Справочник: Профили пользователей ККМ
	СписокИсключений.Добавить(Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты); // Справочник: Учетные записи электронной почты
	СписокИсключений.Добавить(Метаданные.Справочники.ФорматыPLU); // Справочник: Форматы PLU
	СписокИсключений.Добавить(Метаданные.Справочники.ФорматыСтруктурныхЕдиниц); // Справочник: Форматы структурных единиц
	СписокИсключений.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры); // Справочник: Характеристики номенклатуры
	СписокИсключений.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры); // Справочник: Характеристики номенклатуры
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.Адресация); // Регистр сведений: Адресация
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ЗначенияФункциональныхОпций); // Регистр сведений: Значения функциональных опций
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.НазначениеДополнительныхОбработок); // Регистр сведений: Назначение дополнительных обработок
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ОсновныеПечатныеФормыДокументов); // Регистр сведений: Основные печатные формы документов
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ПользователиГруппыДоступа); // Регистр сведений: Пользователи группы доступа
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ПользовательскиеМакетыПечати); // Регистр сведений: Пользовательские макеты печати
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам); // Регистр сведений: Пользовательские настройки доступа к обработкам
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.СоставГруппПользователей); // Регистр сведений: Состав групп пользователей
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.СостояниеОбменовДанными); // Регистр сведений: Состояние обменов данными
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.СтатусыНоменклатуры); // Регистр сведений: Статусы номенклатуры
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ЦеныНоменклатуры); // Регистр сведений: Цены номенклатуры
	
	//добавляем еще позиции, которые будут регистрироваться с отбором
	СписокИсключений.Добавить(Метаданные.Справочники.ККМ); // Справочник: ККМ
	СписокИсключений.Добавить(Метаданные.Справочники.НастройкаБизнесПроцессов); // Справочник: Настройка бизнес процессов
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.EDIПровайдерыПоставщиков); // Регистр сведений: EDI провайдеры поставщиков
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.КодыОперацийАвтозаказа); // Регистр сведений: Коды операций автозаказа
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.Перепродажа); // Регистр сведений: Перепродажа
	
	
	ТекстЗапроса = "";
	
	СписокМетаданных = Новый СписокЗначений;
	//СписокМетаданных.Добавить("Константы","Константа"); константы выгрузить отдельно
	СписокМетаданных.Добавить("Справочники","Справочник");
	СписокМетаданных.Добавить("Документы","Документ");
	СписокМетаданных.Добавить("ПланыВидовХарактеристик","ПланВидовХарактеристик");
	//СписокМетаданных.Добавить("РегистрыСведений","РегистрСведений");
	
	Для Каждого ЭлементСписка из СписокМетаданных Цикл
		Для Каждого мдДанные из Метаданные[ЭлементСписка.Значение] Цикл
			Если НЕ РегистрируетИзменения(мдДанные) ИЛИ СписокИсключений.НайтиПоЗначению(мдДанные)<>Неопределено Тогда 
				Продолжить; 
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса),"",Символы.ПС+" ОБЪЕДИНИТЬ")+"
			|ВЫБРАТЬ
			|	ИсточникДанных.Ссылка КАК Элемент
			|ИЗ
			|	"+ЭлементСписка.Представление+"."+мдДанные.Имя+" КАК ИсточникДанных";
		КонецЦикла;
	КонецЦикла;
	// тут дописать запросы с отборами
	ТекстЗапроса = ТекстЗапроса +"
	|ОБЪЕДИНИТЬ
	|
	|Выбрать 
	|	ИсточникДанных.Ссылка КАК Элемент
	|ИЗ
	|	Справочник.ККМ КАК ИсточникДанных
	|ГДЕ 
	|	ИсточникДанных.Владелец = &СтруктурнаяЕдиница	
	|
	|ОБЪЕДИНИТЬ
	|
	|Выбрать 
	|	ИсточникДанных.Ссылка КАК Элемент
	|ИЗ
	|	Справочник.НастройкаБизнесПроцессов КАК ИсточникДанных
	|ГДЕ 
	|	ИсточникДанных.Владелец = &СтруктурнаяЕдиница ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Узел.СтруктурнаяЕдиница);
	РезультатЗапроса = Запрос.Выполнить();
	СписокПакетов = Новый СписокЗначений;
	МассивЭлементов = Новый Массив;
	КоличествоЭлементов = 0;
	НомерПакета = 1;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если КоличествоЭлементов>ПорогВыгрузки Тогда
			АдресИдентификатора = Новый УникальныйИдентификатор;
			АдресТекст = ПоместитьВоВременноеХранилище(МассивЭлементов,АдресИдентификатора);
			СписокПакетов.Добавить(АдресТекст,"Пакет №"+НомерПакета);	
			НомерПакета = НомерПакета +1;
			КоличествоЭлементов = 0;
			МассивЭлементов = Новый Массив;
		КонецЕсли;
		КоличествоЭлементов = КоличествоЭлементов + 1;
		МассивЭлементов.Добавить(Выборка.Элемент);
	КонецЦикла;
	Если МассивЭлементов.Количество()>0 Тогда
		АдресИдентификатора = Новый УникальныйИдентификатор;
		АдресТекст = ПоместитьВоВременноеХранилище(МассивЭлементов,АдресИдентификатора);
		СписокПакетов.Добавить(АдресТекст,"Пакет №"+НомерПакета);	
		НомерПакета = НомерПакета +1;
	КонецЕсли;
	МассивЭлементов = Новый Массив;
	Для Каждого мдКонстанты из Метаданные.Константы Цикл
		Если НЕ РегистрируетИзменения(мдКонстанты) ИЛИ СписокИсключений.НайтиПоЗначению(мдКонстанты)<>Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		МассивЭлементов.Добавить(мдКонстанты);	
	КонецЦикла;
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.EDIПровайдерыПоставщиков);
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.КурсыВалют);
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.Izh_ОграниченияПоВозвратамИСписаниям);
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.ПараметрыСтруктурныхЕдиниц);
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.Перепродажа);
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.Izh_ПравилаВыбораШаблонаЦенника);
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.СвязьФирмИКонтрагентов);
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.СлужебныеЗначения);
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаНалоговыйУчет);
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.КодыОперацийАвтозаказа);
	АдресИдентификатора = Новый УникальныйИдентификатор;
	АдресТекст = ПоместитьВоВременноеХранилище(МассивЭлементов,АдресИдентификатора);
	СписокПакетов.Добавить(АдресТекст,"Пакет №"+НомерПакета);	
	НомерПакета = НомерПакета +1;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Метаданные.РегистрыСведений.НоменклатураКонтрагента); // в отдельный пакет помещаем
	АдресИдентификатора = Новый УникальныйИдентификатор;
	АдресТекст = ПоместитьВоВременноеХранилище(МассивЭлементов,АдресИдентификатора);
	СписокПакетов.Добавить(АдресТекст,"Пакет №"+НомерПакета);	
	
	Возврат СписокПакетов;
КонецФункции

&НаСервере
Процедура ПометитьНаВыгрузкуРБД(Узел,АдресХранилища)
	МассивЭлементов = ПолучитьИзВременногоХранилища(АдресХранилища);
	Для Каждого ЭлементМассива из МассивЭлементов Цикл
		Если ЗначениеЗаполнено(ЭлементМассива) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел,ЭлементМассива);		
		КонецЕсли;
	КонецЦикла;
	УдалитьИзВременногоХранилища(АдресХранилища);
КонецПроцедуры

&НаКлиенте
Функция СоздатьПервичныйОбраз(Отказ,Узел,КаталогОбраза,ПользовательБазы,ПарольПользователяБазы,СоздатьВыгрузку,ПользовательУзла,ПарольПользователяУзла) 
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;                                                         
	
	ВремяНачало = ТекущаяДата();	
	СделатьЗаписьЖурналаРегистрации("3Запуск генерации начального образа для узла: "+Строка(Узел)+" "+Строка(ТекущаяДата())); //dps
	стрКаталогОбраза = НормализоватьПуть(КаталогОбраза);	
	
	//Попытка
	//	УдалитьФайлы(стрКаталогОбраза);  
	//Исключение
	//КонецПопытки;
	                      
	Попытка
		
		СоздатьКаталогНаСервере(стрКаталогОбраза);
		
		Если НЕ ПроверкаВозможностиВыполнения(стрКаталогОбраза,Узел) Тогда
			УдалитьФайлы(стрКаталогОбраза);
			Возврат Ложь;
		КонецЕсли;                 
		
		Если НЕ СоздатьПустуюБазу(стрКаталогОбраза,ПользовательБазы,ПарольПользователяБазы) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Если НЕ НастроитьУзлыОбмена(стрКаталогОбраза,Узел) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		
		
		Если НЕ ПОметитьКВыгрузке(Узел,Истина) Тогда
			Возврат Ложь;
		КонецЕсли; 
		СделатьЗаписьЖурналаРегистрации("3После первой пометки к выгрузке "+КоличествоИзмененийВУзле(Узел)); //dps
		ПутьФайла="";
		флРезультат=ОбменДаннымиРБДСервер.ВыгрузкаДанныхФайл(Узел,ПутьФайла);
		СделатьЗаписьЖурналаРегистрации("3После первой пометки к выгрузке после выгрузки "+КоличествоИзмененийВУзле(Узел)); //dps
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПутьФайла="+ПутьФайла);
		Если НЕ флРезультат Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при формировании пакета выгрузки", , "ПолноеИмяФайловойБазы");
			Возврат Ложь;
		Иначе
			Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),70, НСтр("ru = 'Cформирован пакет выгрузки 1.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
		КонецЕсли;
		
		//{БредовЮГ 2015-08-29 Исправление версии ком коннектора
		ИмяКомКоннектора = ОбщегоНазначения.ИмяCOMСоединителя();
		обСоединение = Новый COMОбъект(ИмяКомКоннектора);
		//обСоединение = Новый COMОбъект("v82.COMConnector");
		//БредовЮГ  2015-08-29 Исправление версии ком коннектора} 
		
		обОбъект = обСоединение.Connect("File="""+стрКаталогОбраза+""";");
		
		ПутьФайлаВыгрузка="";
		
		флРезультат=обОбъект.БизнесПроцессы.НоваяСтруктурнаяЕдиница.СоздатьБизнесПроцесс().ЗагрузкаДанныхФайл(ПутьФайла,ПутьФайлаВыгрузка);
		
		
		Если флРезультат=Ложь Тогда                          
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при загрузке пакета 1 в периферийную базу", , "ПолноеИмяФайловойБазы");
			обОбъект = Неопределено; обСоединение = Неопределено;	
			Возврат Ложь;
		Иначе
			Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),75, НСтр("ru = 'Пакет выгрузки 1 загружен успешно.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПутьФайлаВыгрузка="+ПутьФайлаВыгрузка);
		
		Если ЗначениеЗаполнено(ПутьФайлаВыгрузка) Тогда
			флРезультат=ОбменДаннымиРБДСервер.ЗагрузкаДанныхФайл(ПутьФайлаВыгрузка);
			
			Если флРезультат=Ложь Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при загрузке пакета подтверждения 1", , "ПолноеИмяФайловойБазы");
				обОбъект = Неопределено; обСоединение = Неопределено;	
				Возврат Ложь;
			Иначе
				Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),75, НСтр("ru = 'Пакет подтверждения 1 загружен успешно.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
			КонецЕсли;
			
		КонецЕсли;
		
		обОбъект = Неопределено; обСоединение = Неопределено;	
		
		
		
		//{БредовЮГ 2015-08-29 Исправление версии ком коннектора и разбиение выгрузки по пакетам
		ИмяКомКоннектора = ОбщегоНазначения.ИмяCOMСоединителя();
		обСоединение = Новый COMОбъект(ИмяКомКоннектора);
		//обСоединение = Новый COMОбъект("v82.COMConnector");
		обОбъект = обСоединение.Connect("File="""+стрКаталогОбраза+""";USR="""+ПользовательУзла+""";"+?(НЕ ЗначениеЗаполнено(ПарольПользователяУзла),"","PWD="""+ПарольПользователяУзла+""""));
		ЭлементовВПакете = 150000;
		сзПакеты = СписокМетаданныхДляВыгрузки(ЭлементовВПакете);	
		СделатьЗаписьЖурналаРегистрации("3Перед поэлементной регистрацией Количество: "+КоличествоИзмененийВУзле(Узел)); //dps
		Для Каждого ЭлементСписка из сзПакеты Цикл
			СделатьЗаписьЖурналаРегистрации("3В начале Поэлементная регистрация " +ЭлементСписка.Представление+" Количество всего:"+КоличествоИзмененийВУзле(Узел)); //dps
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Регистрация "+ЭлементСписка.Представление);
			СделатьЗаписьЖурналаРегистрации("1Регистрация "+ЭлементСписка.Представление); //dps ЗаписьЖурнала
			ПометитьНаВыгрузкуРБД(Узел,ЭлементСписка.Значение);
			ПутьФайла="";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгрузка "+ЭлементСписка.Представление);
			СделатьЗаписьЖурналаРегистрации("1Выгрузка "+ЭлементСписка.Представление); //dps ЗаписьЖурнала
			флРезультат=ОбменДаннымиРБДСервер.ВыгрузкаДанныхФайл(Узел,ПутьФайла);
			ПутьФайлаВыгрузка="";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загрузка "+ЭлементСписка.Представление);
			СделатьЗаписьЖурналаРегистрации("1Загрузка "+ЭлементСписка.Представление); //dps ЗаписьЖурнала
			флРезультат=обОбъект.БизнесПроцессы.НоваяСтруктурнаяЕдиница.СоздатьБизнесПроцесс().ЗагрузкаДанныхФайл(ПутьФайла,ПутьФайлаВыгрузка);
			
			Если флРезультат=Ложь Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при загрузке "+ЭлементСписка.Представление+" в периферийную базу", , "ПолноеИмяФайловойБазы");
				СделатьЗаписьЖурналаРегистрации("1Ошибка при загрузке "+ЭлементСписка.Представление+" в периферийную базу"); //dps ЗаписьЖурнала
				обОбъект = Неопределено; обСоединение = Неопределено;	
				Возврат Ложь;
			Иначе
				Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),85, НСтр("ru = '"+ЭлементСписка.Представление+" загружен успешно.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПутьФайлаВыгрузка) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загрузка ответа "+ЭлементСписка.Представление);
				СделатьЗаписьЖурналаРегистрации("1Загрузка ответа "+ЭлементСписка.Представление); //dps ЗаписьЖурнала
				флРезультат=ОбменДаннымиРБДСервер.ЗагрузкаДанныхФайл(ПутьФайлаВыгрузка);
				
				Если флРезультат=Ложь Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при загрузке "+ЭлементСписка.Представление+" подтверждения ", , "ПолноеИмяФайловойБазы");
					СделатьЗаписьЖурналаРегистрации("1Ошибка при загрузке "+ЭлементСписка.Представление+" подтверждения "); //dps ЗаписьЖурнала
					обОбъект = Неопределено; обСоединение = Неопределено;	
					Возврат Ложь;
				Иначе
					Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),85, НСтр("ru = '"+ЭлементСписка.Представление+" подтверждения загружен успешно.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
				КонецЕсли;
			КонецЕсли;
			СделатьЗаписьЖурналаРегистрации("3В конце Поэлементная регистрация " +ЭлементСписка.Представление+" Количество всего:"+КоличествоИзмененийВУзле(Узел)); //dps
		КонецЦикла;
		
		//БредовЮГ 2015-08-29 Исправление версии ком коннектора и разбиение выгрузки по пакетам}
		
		//Если НЕ ПОметитьКВыгрузке(Узел,Ложь) Тогда
		//	Возврат Ложь;
		//КонецЕсли; 
		//
		//
		//Если НЕ флРезультат Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при формировании пакета выгрузки 2", , "ПолноеИмяФайловойБазы");
		//	Возврат Ложь;
		//Иначе
		//	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),80, НСтр("ru = 'Cформирован пакет выгрузки 2.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
		//КонецЕсли;
		//
		//
		//
		////
		//
		//ПутьФайлаВыгрузка="";
		//флРезультат=обОбъект.БизнесПроцессы.НоваяСтруктурнаяЕдиница.СоздатьБизнесПроцесс().ЗагрузкаДанныхФайл(ПутьФайла,ПутьФайлаВыгрузка);
		//
		//Если флРезультат=Ложь Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при загрузке пакета 2 в периферийную базу", , "ПолноеИмяФайловойБазы");
		//	обОбъект = Неопределено; обСоединение = Неопределено;	
		//	Возврат Ложь;
		//Иначе
		//	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),85, НСтр("ru = 'Пакет выгрузки 2 загружен успешно.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(ПутьФайлаВыгрузка) Тогда
		//	флРезультат=ОбменДаннымиРБДСервер.ЗагрузкаДанныхФайл(ПутьФайлаВыгрузка);
		//	
		//	Если флРезультат=Ложь Тогда
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при загрузке пакета подтверждения 2", , "ПолноеИмяФайловойБазы");
		//		обОбъект = Неопределено; обСоединение = Неопределено;	
		//		Возврат Ложь;
		//	Иначе
		//		Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),85, НСтр("ru = 'Пакет подтверждения 2 загружен успешно.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		обОбъект = Неопределено; обСоединение = Неопределено;	
		
		Попытка
			УдалитьФайлы(стрКаталогОбраза+"Конфигурация.cf");
		Исключение
		КонецПопытки;
		
		СделатьЗаписьЖурналаРегистрации("3После всего Количество всего:"+КоличествоИзмененийВУзле(Узел)); //dps
		Если СоздатьВыгрузку Тогда
			стрПоложениеЛога = """"+НормализоватьПуть(КаталогВременныхФайлов())+"1Cv8_xchg"+СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекущаяДата(),":","_"),".","_")," ", "_")+".log"""; // здесь будут логи жить
			КомандаСистемы("start """" /wait """+КаталогПрограммы()+"1Cv8.exe"" CONFIG /F"""+стрКаталогОбраза+""" /DumpIB"""+стрКаталогОбраза+Строка(Узел)+".dt"" /Out"+стрПоложениеЛога+" /DisableStartupMessages /N"+АдминистраторУзлаИмя+?(ЗначениеЗаполнено(АдминистраторУзлаПароль)," /P"+АдминистраторУзлаПароль,""), стрКаталогОбраза);
			Файл = Новый Файл(стрКаталогОбраза+Строка(Узел)+".dt");
			Если не Файл.Существует() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибки при формировании файла выгрузки", , "ПолноеИмяФайловойБазы");
				СделатьЗаписьЖурналаРегистрации("1Ошибки при формировании файла выгрузки"); //dps ЗаписьЖурнала
				Возврат Ложь;
			Иначе
				УдалитьФайлы(стрПоложениеЛога);
				УдалитьФайлы(стрКаталогОбраза+"1Cv8.1CD");
				УдалитьФайлы(стрКаталогОбраза+"1Cv8.log");
				УдалитьФайлы(стрКаталогОбраза+"1Cv8.pfl");
			КонецЕсли;
		КонецЕсли; 
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), , "ПолноеИмяФайловойБазы");
		СделатьЗаписьЖурналаРегистрации("1Исключение "+ОписаниеОшибки()); //dps ЗаписьЖурнала
		Возврат Ложь;
	КонецПопытки;
    СделатьЗаписьЖурналаРегистрации("3Еще один якорь Количество всего:"+КоличествоИзмененийВУзле(Узел)); //dps
	Состояние(НСтр("ru = 'Мастер создания структурных единиц'", "ru"),90, НСтр("ru = 'Генерация начального образа завершилась успешно.'", "ru"),БиблиотекаКартинок.ПодсистемаОбменДанными);
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьКаталогНаСервере(стрКаталогОбраза)
	СоздатьКаталог(стрКаталогОбраза);
КонецПроцедуры	

&НаСервере
Функция РегистрируетИзменения(МетаОбъект)
	Возврат Метаданные.ПланыОбмена.ОбменРБД.Состав.Содержит(МетаОбъект);
КонецФункции // РегистрируетИзменения()

&НаСервере
Процедура ЗаполнитьСтроку(Строка, Имя, Данные = "", Синоним = "", ДопМД = "")
	стрПолноеИмя = ?(ПустаяСтрока(ДопМД), Имя, ДопМД+"."+Имя);
	Строка.Наименование = ?(ПустаяСтрока(Синоним), Имя, Синоним);
	Строка.НаименованиеМД = Имя;
	Строка.ПутьМД = ?(Строка.Родитель = Неопределено, стрПолноеИмя, Строка.Родитель.ПутьМД+"."+стрПолноеИмя);
	Строка.ПутьДанных = Данные;
	Попытка
		мд = Неопределено; Выполнить("мд = Метаданные."+Строка.ПутьМД);
		стрПолноеИмя = мд.ПолноеИмя();
		Строка.ПолноеИмя = мд.ПолноеИмя();
	Исключение
		Строка.ПолноеИмя = "";
	КонецПопытки;
	//Строка.ТипЭлемента = Перечисления.ТипыЭлементов.Обычный;
	//Строка.Приоритет = 50;
КонецПроцедуры // ЗаполнитьСтроку()

&НаСервере
Функция СформироватьДеревоМетаданных(фрмИндикатор = Неопределено) 
	ДеревоМД = Новый ДеревоЗначений;
	ДеревоМД.Колонки.Добавить("Наименование");
	ДеревоМД.Колонки.Добавить("НаименованиеМД");
	ДеревоМД.Колонки.Добавить("ПутьМД");
	ДеревоМД.Колонки.Добавить("ПутьДанных");
	ДеревоМД.Колонки.Добавить("ПолноеИмя");
	ДеревоМД.Колонки.Добавить("ТипЭлемента");
	ДеревоМД.Колонки.Добавить("Приоритет");
	
	Если Метаданные.Константы.Количество() <> 0 Тогда
		Строка = ДеревоМД.Строки.Добавить();
		ЗаполнитьСтроку(Строка, "Константы", ,"Константы");
		Строка.Приоритет = 10;
		Для каждого Константа из Метаданные.Константы Цикл
			Если не РегистрируетИзменения(Константа) Тогда
				Продолжить;
			КонецЕсли;
			
			Стр = Строка.Строки.Добавить();
			ЗаполнитьСтроку(Стр, Константа.Имя, Строка.НаименованиеМД+"."+Константа.Имя+".Получить()", Константа.Представление());
		КонецЦикла;
	КонецЕсли;
	
	Если Метаданные.Справочники.Количество() <> 0 Тогда
		Строка = ДеревоМД.Строки.Добавить();
		ЗаполнитьСтроку(Строка, "Справочники");
		Строка.Приоритет = 20;
		Для каждого Справочник из Метаданные.Справочники Цикл
			Если не РегистрируетИзменения(Справочник) Тогда
				Продолжить;
			КонецЕсли;
			// добавим собственно справочник
			Справ = Строка.Строки.Добавить();
			ЗаполнитьСтроку(Справ, Справочник.Имя, ,Справочник.Представление());
			// добавим реквизиты
		КонецЦикла;
	КонецЕсли;
	
	Если Метаданные.Документы.Количество() <> 0 Тогда
		Строка = ДеревоМД.Строки.Добавить();
		ЗаполнитьСтроку(Строка, "Документы");
		Строка.Приоритет = 30;
		Для каждого Документ из Метаданные.Документы Цикл
			// проверим, для данного объекта разрешена регистрация в плане обмена
			Если не РегистрируетИзменения(Документ) Тогда
				Продолжить;
			КонецЕсли;
			// добавим собственно документ
			Док = Строка.Строки.Добавить();
			ЗаполнитьСтроку(Док, Документ.Имя,,Документ.Представление());
			// добавим группу реквизитов шапки
		КонецЦикла;
	КонецЕсли;
	
	Если Метаданные.ПланыСчетов.Количество() <> 0 Тогда
		Строка = ДеревоМД.Строки.Добавить();
		ЗаполнитьСтроку(Строка, "ПланыСчетов",,"Планы счетов");
		Строка.Приоритет = 50;
		Для каждого ПланСчетов из Метаданные.ПланыСчетов Цикл
			// проверим, для данного объекта разрешена регистрация в плане обмена
			Если не РегистрируетИзменения(ПланСчетов) Тогда
				Продолжить;
			КонецЕсли;
			// добавим собственно план счетов
			План = Строка.Строки.Добавить();
			ЗаполнитьСтроку(План, ПланСчетов.Имя, ,ПланСчетов.Представление());
		КонецЦикла;
	КонецЕсли;
	
	// добавим планы видов характеристик
	Если Метаданные.ПланыВидовХарактеристик.Количество() <> 0 Тогда
		Строка = ДеревоМД.Строки.Добавить();
		ЗаполнитьСтроку(Строка, "ПланыВидовХарактеристик",, "Планы видов характеристики");
		Строка.Приоритет = 40;
		Для каждого ПВХ из Метаданные.ПланыВидовХарактеристик Цикл
			// проверим, для данного объекта разрешена регистрация в плане обмена
			Если не РегистрируетИзменения(ПВХ) Тогда
				Продолжить;
			КонецЕсли;
			// добавим собственно ПВХ
			План = Строка.Строки.Добавить();
			ЗаполнитьСтроку(План, ПВХ.Имя, ,ПВХ.Представление());
		КонецЦикла;
	КонецЕсли;
	
	// добавим планы видов расчетов
	Если Метаданные.ПланыВидовРасчета.Количество() <> 0 Тогда
		Строка = ДеревоМД.Строки.Добавить();
		ЗаполнитьСтроку(Строка, "ПланыВидовРасчетов",, "Планы видов расчета");
		Строка.Приоритет = 60;
		Для каждого ПВР из Метаданные.ПланыВидовРасчета Цикл
			// проверим, для данного объекта разрешена регистрация в плане обмена
			Если не РегистрируетИзменения(ПВР) Тогда
				Продолжить;
			КонецЕсли;
			// добавим собственно ПВР
			План = Строка.Строки.Добавить();
			ЗаполнитьСтроку(План, ПВР.Имя, , ПВР.Представление());
		КонецЦикла;
	КонецЕсли;
	
	// добавим наборы записей регистра сведений
	Если Метаданные.РегистрыСведений.Количество() <> 0 Тогда
		Строка = ДеревоМД.Строки.Добавить();
		ЗаполнитьСтроку(Строка, "РегистрыСведений",,"Регистры сведений");
		Строка.Приоритет = 70;
		Для каждого Регистр из Метаданные.РегистрыСведений Цикл
			// проверим, для данного объекта разрешена регистрация в плане обмена
			Если не РегистрируетИзменения(Регистр) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Регистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				стРегистр = Строка.Строки.Добавить();
				ЗаполнитьСтроку(стРегистр, Регистр.Имя, ,Регистр.Представление());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДеревоМД;
КонецФункции // СформироватьДеревоМетаданных()

&НаСервере
Функция ПОметитьКВыгрузке(Узел,ПерваяВыгрузка)
	дзПравила = СформироватьДеревоМетаданных();
	
	Для каждого элметаданных Из дзПравила.Строки Цикл
		Для каждого эл Из элметаданных.Строки Цикл
			Если (СокрЛП(элметаданных.НаименованиеМД) = "Документы") Тогда
			Иначе
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.НайтиПоПолномуИмени(эл.ПолноеИмя));
				Если ПерваяВыгрузка Тогда
					Если (СокрЛП(элметаданных.НаименованиеМД) = "Справочники") И СокрЛП(эл.ПолноеИмя)="Справочник.Пользователи" Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.НайтиПоПолномуИмени(эл.ПолноеИмя));
					КонецЕсли;
					
					Если (СокрЛП(элметаданных.НаименованиеМД) = "РегистрыСведений") И СокрЛП(эл.ПолноеИмя)="РегистрСведений.ПользователиСтруктурныхЕдиниц" Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.НайтиПоПолномуИмени(эл.ПолноеИмя));
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			
				Если СокрЛП(эл.ПолноеИмя)="РегистрСведений.ЦеныНоменклатуры" ИЛИ СокрЛП(эл.ПолноеИмя)="РегистрСведений.НоменклатураКонтрагента" ИЛИ
					СокрЛП(эл.ПолноеИмя)="Справочник.ЗначенияСвойствОбъектов" ИЛИ СокрЛП(эл.ПолноеИмя)="РегистрСведений.ПродукцияПоЦехам" ИЛИ
					СокрЛП(эл.ПолноеИмя)="Справочник.ЕдиницыИзмерения" ИЛИ СокрЛП(эл.ПолноеИмя)="РегистрСведений.СтатусыНоменклатуры" Тогда
					Продолжить;
				ИначеЕсли СокрЛП(эл.ПолноеИмя)="Справочник.Номенклатура" Тогда
					Запрос=Новый Запрос;
					Запрос.Текст="ВЫБРАТЬ
					             |	Номенклатура.Ссылка КАК Ссылка
					             |ИЗ
					             |	Справочник.Номенклатура КАК Номенклатура
					             |ГДЕ
					             |	Номенклатура.Группа = 1";
								 
					Рез=Запрос.Выполнить().Выбрать();
					Пока Рез.Следующий() Цикл
						ПланыОбмена.ЗарегистрироватьИзменения(Узел, Рез.Ссылка);
					КонецЦикла;
				Иначе
					ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.НайтиПоПолномуИмени(эл.ПолноеИмя));
				КонецЕсли;
					
				//Сообщить("Помечены к выгрузке: "+СокрЛП(эл.ПолноеИмя));
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	Если НЕ ПерваяВыгрузка И НеВыгружатьТовары = Ложь Тогда
		ОбменДаннымиРБДСервер.ЗарегистрироватьИзмененияДляНовогоУзла(Узел);
	КонецЕсли;	
	Возврат Истина;
КонецФункции 

&НаСервере
Функция ПолучитьИмяФайла(ИмяКаталога, ИмяФайла) 

	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Слэш = "";
		Если (Прав(ИмяКаталога, 1) <> "\") И (Прав(ИмяКаталога, 1) <> "/") Тогда
			Слэш = ?(Найти(ИмяКаталога, "\") = 0, "/", "\");
		КонецЕсли;
		
		Возврат ИмяКаталога + Слэш + ИмяФайла;	
	Иначе
		Возврат ИмяКаталога;
	КонецЕсли;

КонецФункции // ПолучитьИмяФайла()

&НаСервере
Процедура УстановитьРежимРаботыСЕ(Отказ,Ошибка)
	Если СтруктурнаяЕдиница.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает Тогда
		Попытка
			ОбъектСтруктурнаяЕдиница = СтруктурнаяЕдиница.ПолучитьОбъект();
			ОбъектСтруктурнаяЕдиница.РежимРаботы = Перечисления.РежимРаботыСЕ.Транслятор;
			ОбъектСтруктурнаяЕдиница.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
			Отказ = Истина;
		КонецПопытки;	
	КонецЕсли;
КонецПроцедуры	



////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника

// Процедура определяет таблицу переходов по сценарию №1.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока()
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию1()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "Страница1",        "СтраницаНавигацииНачало", "СтраницаДекорацииНачало");
	ТаблицаПереходовНоваяСтрока(2, "Страница2",        "СтраницаНавигацииПродолжение", "СтраницаДекорацииПродолжение", "", "", "");
	ТаблицаПереходовНоваяСтрока(3, "Страница3",        "СтраницаНавигацииПродолжение", "СтраницаДекорацииПродолжение",,"Страница3_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(4, "Страница4",        "СтраницаНавигацииПродолжение", "СтраницаДекорацииПродолжение");
	ТаблицаПереходовНоваяСтрока(5, "Страница5",        "СтраницаНавигацииПродолжение", "СтраницаДекорацииПродолжение");
	ТаблицаПереходовНоваяСтрока(6, "Страница6",        "СтраницаНавигацииПродолжение", "СтраницаДекорацииПродолжение");
	ТаблицаПереходовНоваяСтрока(7, "Страница7",        "СтраницаНавигацииОкончание", "СтраницаДекорацииОкончание");
	ТаблицаПереходовНоваяСтрока(8, "СтраницаОжидания", "СтраницаНавигацииОкончание", "СтраницаДекорацииОкончание",,,, Истина, "СтраницаОжидания_ОбработкаДлительнойОперации");
	
КонецПроцедуры

//dps+ ЗаписьЖурнала 
&НаСервереБезКонтекста
Процедура СделатьЗаписьЖурналаРегистрации(Текст)
	ЗаписьЖурналаРегистрации("МастерСозданияСЕ",,,,Текст,); 
КонецПроцедуры

Функция КоличествоИзмененийВУзле(Узел)
	СписокМетаданных = Новый СписокЗначений;
	СписокМетаданных.Добавить("Константы","Константа"); 
	СписокМетаданных.Добавить("Справочники","Справочник");
	СписокМетаданных.Добавить("Документы","Документ");
	СписокМетаданных.Добавить("ПланыВидовХарактеристик","ПланВидовХарактеристик");
	СписокМетаданных.Добавить("РегистрыСведений","РегистрСведений");
	
	Текст = "";
	Для Каждого ЭлементСписка из СписокМетаданных Цикл
		Для Каждого мдДанные из Метаданные[ЭлементСписка.Значение] Цикл
			Если НЕ РегистрируетИзменения(мдДанные) Тогда 
				Продолжить; 
			КонецЕсли;
			Элемент = ЭлементСписка.Представление+"."+мдДанные.Имя;
			Текст = Текст + ?(Текст="", "", "ОБЪЕДИНИТЬ ВСЕ") + " 
			|ВЫБРАТЬ 
			|	КОЛИЧЕСТВО(*)              КАК КоличествоИзменений
			|ИЗ
			|	" + Элемент + ".Изменения
			|ГДЕ
			|	Узел = &Узел
			|СГРУППИРОВАТЬ ПО
			|	Узел
			|";
		КонецЦикла;
	КонецЦикла;
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("Узел", Узел);
	Выборка = Запрос.Выполнить().Выбрать();
	Количество = 0;
	Пока Выборка.Следующий() Цикл
		Количество = Количество + Выборка.КоличествоИзменений;
	КонецЦикла;
	Возврат Формат(Количество,"ЧН=0");
КонецФункции
//dps- ЗаписьЖурнала 