
Функция ФормаВыполненияЗадачи(Знач Задача, Знач ТочкаМаршрута) Экспорт 
	
	СписокВариантов = Неопределено;
	ДобавитьВариантОткрытияФормы(СписокВариантов, ТочкиМаршрута.ВозвратБрака, "БизнесПроцесс.иж_ОбработкаБрака.Форма.Оповещение", Задача);
	ДобавитьВариантОткрытияФормы(СписокВариантов, ТочкиМаршрута.УтилизацияБрака, "БизнесПроцесс.иж_ОбработкаБрака.Форма.Оповещение", Задача);
	
	Результат = СписокВариантов[ТочкаМаршрута];
	Если Результат = Неопределено Тогда
		Результат = Новый Структура();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВариантОткрытияФормы(СписокВариантов, Знач ТочкаМаршрута, Знач ИмяФормы, Знач ПараметрыФормы)
	
	Если СписокВариантов = Неопределено Тогда
		СписокВариантов = Новый Соответствие();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыФормы) <> Тип("Структура") Тогда
		ПараметрыФормы = Новый Структура("Ключ", ПараметрыФормы);
	КонецЕсли;
	
	СписокВариантов.Вставить(ТочкаМаршрута, Новый Структура(
		"ИмяФормы, ПараметрыФормы",
		ИмяФормы, ПараметрыФормы
	));
	
КонецПроцедуры


Процедура ЗапуститьПроцессыПоРасписанию() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Вчера", НачалоДня(ТекущаяДата()) - 1);
	Запрос.УстановитьПараметр("Приемка", Перечисления.КодыОпераций.ПоступлениеТоваров);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Izh_БракПриПриемкеОстаткиИОбороты.ПоДокументу КАК Основание
		|ИЗ
		|	РегистрНакопления.Izh_БракПриПриемке.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&Вчера, ДЕНЬ), КОНЕЦПЕРИОДА(&Вчера, ДЕНЬ), , , КодОперации = &Приемка) КАК Izh_БракПриПриемкеОстаткиИОбороты
		|ГДЕ
		|	Izh_БракПриПриемкеОстаткиИОбороты.КоличествоПриход > 0
		|	И Izh_БракПриПриемкеОстаткиИОбороты.КоличествоКонечныйОстаток = 0";
	СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Основание");
	
	Параметры = Новый Структура(
		"БизнесПроцесс, Искать, Удалять, Основание",
		БизнесПроцессы.иж_ОбработкаБрака,
		Истина,
		Ложь
	);
	
	Для каждого Документ Из СписокДокументов Цикл
		Параметры.Вставить("Основание", Документ);
		УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(Параметры);
	КонецЦикла;
	
КонецПроцедуры


Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ16") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ16", "ТОРГ-16", ПечатьТОРГ16(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТОРГ16(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//++БИТ БВО 2015-06-16	
	//ПриПриемке = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ВидСписанияПриПриемке);
	ПриПриемке = Справочники.ВидыСписания.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ВидСписанияПриПриемке));
	//--БИТ БВО 2015-06-16
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("Приемка", Перечисления.КодыОпераций.ПоступлениеТоваров);
	Запрос.УстановитьПараметр("ПриПриемке", ПриПриемке);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	иж_ОбработкаБрака.Основание КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Основания
		|ИЗ
		|	БизнесПроцесс.иж_ОбработкаБрака КАК иж_ОбработкаБрака
		|ГДЕ
		|	иж_ОбработкаБрака.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Izh_БракПриПриемкеОбороты.ПоДокументу КАК ПоДокументу,
		|	ВЫРАЗИТЬ(Izh_БракПриПриемкеОбороты.Регистратор КАК Документ.КоррекцияЗапасов).ВидСписания КАК ВидСписания,
		|	Izh_БракПриПриемкеОбороты.Номенклатура КАК Номенклатура,
		|	СУММА(Izh_БракПриПриемкеОбороты.КоличествоРасход) КАК Количество
		|ПОМЕСТИТЬ ВТ_Коррекции
		|ИЗ
		|	РегистрНакопления.Izh_БракПриПриемке.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			КодОперации = &Приемка
		|				И ПоДокументу В
		|					(ВЫБРАТЬ
		|						ВТ_Основания.Ссылка
		|					ИЗ
		|						ВТ_Основания КАК ВТ_Основания)) КАК Izh_БракПриПриемкеОбороты
		|ГДЕ
		|	Izh_БракПриПриемкеОбороты.КоличествоРасход > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Izh_БракПриПриемкеОбороты.Номенклатура,
		|	Izh_БракПриПриемкеОбороты.ПоДокументу,
		|	ВЫРАЗИТЬ(Izh_БракПриПриемкеОбороты.Регистратор КАК Документ.КоррекцияЗапасов).ВидСписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Коррекции.ПоДокументу КАК Основание,
		|	иж_ОбработкаБракаНаУтилизацию.Номенклатура КАК Номенклатура,
		|	иж_ОбработкаБракаНаУтилизацию.Количество КАК Количество,
		|	иж_ОбработкаБракаНаУтилизацию.Сумма КАК Сумма,
		|	ЕСТЬNULL(Основание.СтавкаНДС.Ставка, 0) КАК СтавкаНДС,
		|	ВТ_Коррекции.ВидСписания,
		|	ВТ_Коррекции.Количество КАК КоличествоВид,
		|	иж_ОбработкаБракаНаУтилизацию.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	иж_ОбработкаБракаНаУтилизацию.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	иж_ОбработкаБракаНаУтилизацию.Номенклатура.Наименование КАК ТоварНаименование,
		|	иж_ОбработкаБракаНаУтилизацию.Номенклатура.Код КАК ТоварКод,
		|	ВЫБОР
		|		КОГДА ВТ_Коррекции.ВидСписания = &ПриПриемке
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	БизнесПроцесс.иж_ОбработкаБрака.НаУтилизацию КАК иж_ОбработкаБракаНаУтилизацию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Коррекции КАК ВТ_Коррекции
		|		ПО иж_ОбработкаБракаНаУтилизацию.Ссылка.Основание = ВТ_Коррекции.ПоДокументу
		|			И иж_ОбработкаБракаНаУтилизацию.Номенклатура = ВТ_Коррекции.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПриходнаяНакладнаяСостав.Ссылка КАК Ссылка,
		|			ПриходнаяНакладнаяСостав.Номенклатура КАК Номенклатура,
		|			МАКСИМУМ(ПриходнаяНакладнаяСостав.СтавкаНДС) КАК СтавкаНДС
		|		ИЗ
		|			Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПриходнаяНакладнаяСостав.Ссылка,
		|			ПриходнаяНакладнаяСостав.Номенклатура) КАК Основание
		|		ПО иж_ОбработкаБракаНаУтилизацию.Ссылка.Основание = Основание.Ссылка
		|			И иж_ОбработкаБракаНаУтилизацию.Номенклатура = Основание.Номенклатура
		|ГДЕ
		|	иж_ОбработкаБракаНаУтилизацию.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|ИТОГИ
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(СтавкаНДС)
		|ПО
		|	Основание,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Коррекции.ПоДокументу КАК Основание,
		|	ВТ_Коррекции.ВидСписания,
		|	Коррекции.Ссылка.Номер КАК НомерДокумента,
		|	Коррекции.Ссылка.Дата КАК ДатаДокумента,
		|	ВТ_Коррекции.ПоДокументу.Дата КАК ДатаПоступленияТовара,
		|	ВТ_Коррекции.ПоДокументу.Номер КАК ТоварнаяНакладнаяНомер,
		|	ВТ_Коррекции.ПоДокументу.Дата КАК ТоварнаяНакладнаяДата,
		|	Коррекции.Ссылка.Дата КАК ДатаСписанияТовара,
		|	ВТ_Коррекции.ВидСписания.Наименование КАК ПризнакиПониженияКачестваНаименование,
		|	Коррекции.Ссылка.СтруктурнаяЕдиница.Наименование + "", "" + Коррекции.Ссылка.Склад.Наименование КАК ПредставлениеПодразделения,
		|	Коррекции.Ссылка.Фирма КАК Организация,
		|	Коррекции.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	Коррекции.Ссылка.СтруктурнаяЕдиница.Валюта КАК Валюта,
		|	Коррекции.Ссылка,
		|	Коррекции.Ссылка.Дата КАК Дата
		|ИЗ
		|	ВТ_Коррекции КАК ВТ_Коррекции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КоррекцияЗапасов.ДокОснование КАК ДокОснование,
		|			КоррекцияЗапасов.ВидСписания КАК ВидСписания,
		|			МАКСИМУМ(КоррекцияЗапасов.Ссылка) КАК Ссылка
		|		ИЗ
		|			Документ.КоррекцияЗапасов КАК КоррекцияЗапасов
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КоррекцияЗапасов.ДокОснование,
		|			КоррекцияЗапасов.ВидСписания) КАК Коррекции
		|		ПО ВТ_Коррекции.ПоДокументу = Коррекции.ДокОснование
		|			И ВТ_Коррекции.ВидСписания = Коррекции.ВидСписания";
	Результат = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НаборШапок = Результат[Результат.Количество() - 1].Выгрузить();
	ВыборкаПоОснованию = Результат[Результат.Количество() - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	// !!!! efim
	#Если _ Тогда
		Шапка = Новый ТаблицаЗначений;
		ВыборкаПоОснованию = Запрос.Выполнить().Выбрать();
	#КонецЕсли
	// !!!!
	
	СоставДляВывода = Новый ТаблицаЗначений();
	Для каждого Колонка Из Результат[Результат.Количество() - 2].Колонки Цикл
		СоставДляВывода.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	Izh_ОбработкаКоллекций.ДобавитьКолонки(СоставДляВывода, "Цена, Стоимость, КоличествоМест");
	
	Пока ВыборкаПоОснованию.Следующий() Цикл
		Состав = ВыборкаПоОснованию.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Состав.Следующий() Цикл
			
			Количество = Состав.Количество;
			СуммаБезНДС = Состав.Сумма - Izh_ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДС(Состав.Сумма, Истина, Состав.СтавкаНДС);
			Цена = ?(Количество = 0, СуммаБезНДС, СуммаБезНДС / Количество);
			
			Списание = Состав.Выбрать();
			Пока Списание.Следующий() Цикл
				НоваяСтрока = СоставДляВывода.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Списание);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Новый Структура(
					"Цена, Количество",
					Цена,
					Списание.КоличествоВид
				));
				
				Количество = Количество - Списание.КоличествоВид;
				Если Количество <= 0 Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + Количество;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаСостав Из СоставДляВывода Цикл
		ЗаполнитьЗначенияСвойств(СтрокаСостав, Новый Структура(
			"Стоимость, КоличествоМест",
			СтрокаСостав.Цена * СтрокаСостав.Количество,
			СтрокаСостав.Количество
		));
	КонецЦикла;
	
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОбработкаБрака_ТОРГ16";
	
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = УправлениеПечатью.ПолучитьМакет("БизнесПроцесс.иж_ОбработкаБрака.ПФ_MXL_ТОРГ16");
	// !!!! efim
	#Если _ Тогда
		Макет = ПолучитьМакет("ПФ_MXL_ТОРГ16");
	#КонецЕсли
	// !!!!
			
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовок1 = Макет.ПолучитьОбласть("ЗаголовокТаблицыПервогоЛиста");
	ОбластьСтрока1 = Макет.ПолучитьОбласть("СтрокаПервогоЛиста");
	ОбластьЗаголовок2 = Макет.ПолучитьОбласть("ЗаголовокТаблицыВторогоЛиста");
	ОбластьСтрока2 = Макет.ПолучитьОбласть("СтрокаВторогоЛиста");
	ОбластьИтого2 = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Основания = Новый Массив();
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(Основания, СоставДляВывода.ВыгрузитьКолонку("Основание"));
	ВидыСписания = Новый Массив();
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(ВидыСписания, СоставДляВывода.ВыгрузитьКолонку("ВидСписания"));
	
	ПервыйДокумент = Истина;
	
	Для каждого Основание Из Основания Цикл
		Для каждого ВидСписания Из ВидыСписания Цикл
			
			Отбор = Новый Структура("Основание, ВидСписания", Основание, ВидСписания);
			
			Состав = СоставДляВывода.Скопировать(Отбор);
			Если Состав.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
			
			Шапка = НаборШапок.НайтиСтроки(Отбор)[0];
			
			ОписаниеОрганизации = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, Шапка.СтруктурнаяЕдиница);
			Руководители = ОбработкаПечатиСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.Дата, Шапка.СтруктурнаяЕдиница);
			
			Параметры = Новый Структура(
				"ПредставлениеОрганизации",
				ОбработкаПечатиСервер.ОписаниеОрганизации(ОписаниеОрганизации)
			);
			
			// вывод шапки
			ОбластьШапка.Параметры.Заполнить(Шапка);
			ОбластьШапка.Параметры.Заполнить(ОписаниеОрганизации);
			ОбластьШапка.Параметры.Заполнить(Руководители);
			ОбластьШапка.Параметры.Заполнить(Параметры);
			
			ТабДокумент.Вывести(ОбластьШапка);
			
			// вывод первого листа
			ТабДокумент.Вывести(ОбластьЗаголовок1);
			
			ОбластьСтрока1.Параметры.Заполнить(Шапка);
			ТабДокумент.Вывести(ОбластьСтрока1);
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// вывод второго листа
			НомерСтраницы = 2;
			
			ОбластьЗаголовок2.Параметры.НомерСтраницы = НомерСтраницы;
			ТабДокумент.Вывести(ОбластьЗаголовок2);
			
			ДляПроверкиВывода = Новый Массив();
			ДляПроверкиВывода.Добавить(ОбластьСтрока2);
			ДляПроверкиВывода.Добавить(ОбластьИтого2);
			
			Для каждого СтрокаСостав Из Состав Цикл
				
				Если НЕ ТабДокумент.ПроверитьВывод(ДляПроверкиВывода) Тогда
					НомерСтраницы = НомерСтраницы + 1;
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовок2.Параметры.НомерСтраницы = НомерСтраницы;
					ТабДокумент.Вывести(ОбластьЗаголовок2);
				КонецЕсли;
				
				ОбластьСтрока2.Параметры.Заполнить(СтрокаСостав);
				
				ТабДокумент.Вывести(ОбластьСтрока2);
				
			КонецЦикла;
			
			ИтогоСтоимость = Состав.Итог("Стоимость");
			
			// вывод итого
			ОбластьИтого2.Параметры.Итого = ИтогоСтоимость;
			ТабДокумент.Вывести(ОбластьИтого2);
			
			// вывод подвала
			ОбластьПодвал.Параметры.СуммаСписанияПрописью = ОбработкаПечатиСервер.СформироватьСуммуПрописью(ИтогоСтоимость, Шапка.Валюта);
			ТабДокумент.Вывести(ОбластьПодвал);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции
