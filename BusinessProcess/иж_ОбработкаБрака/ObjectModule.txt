
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьЗадачи(Исполнитель = Неопределено, ТочкаМаршрута, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НоваяЗадача = УправлениеБизнесПроцессамиСервер.СоздатьЗадачу(ЭтотОбъект, ТочкаМаршрута, Исполнитель, ОписаниеЗадачи(ТочкаМаршрута));
	// !!!! efim
	#Если _ Тогда
		НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	#КонецЕсли
	// !!!!
	Если НоваяЗадача <> Неопределено Тогда
		НоваяЗадача.Напоминать = Ложь;
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеЗадачи(ТочкаМаршрута)
	
	Описания = Новый Структура();
	
	Результат = Новый Соответствие();
	Для каждого Описание Из Описания Цикл
		Результат.Вставить(БизнесПроцессы.иж_ПриемкаТоваров.ТочкиМаршрута[Описание.Ключ], Описание.Значение);
	КонецЦикла;
	
	Возврат Результат[ТочкаМаршрута];
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБЪЕКТА

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТОЧЕК МАРШРУТА

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	Отказ = НЕ УправлениеБизнесПроцессамиСервер.БизнесПроцессРазрешен(Ссылка);
	
КонецПроцедуры

Процедура ПоискБракаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Приемка", Перечисления.КодыОпераций.ПоступлениеТоваров);
	Запрос.УстановитьПараметр("Возврат", Перечисления.КодыОпераций.ВозвратПоставщику);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Izh_БракПриПриемкеОбороты.Номенклатура,
		|	ЕСТЬNULL(Izh_БракПриПриемкеОстатки.КоличествоОстаток, 0) КАК КоличествоВозврат,
		|	ЕСТЬNULL(Izh_БракПриПриемкеОстатки.СуммаОстаток, 0) КАК СуммаВозврат,
		|	Izh_БракПриПриемкеОбороты.КоличествоПриход - ЕСТЬNULL(Izh_БракПриПриемкеОстатки.КоличествоОстаток, 0) КАК КоличествоУтиль,
		|	Izh_БракПриПриемкеОбороты.СуммаПриход - ЕСТЬNULL(Izh_БракПриПриемкеОстатки.СуммаОстаток, 0) КАК СуммаУтиль
		|ПОМЕСТИТЬ ВТ_Результат
		|ИЗ
		|	РегистрНакопления.Izh_БракПриПриемке.Обороты(
		|			,
		|			,
		|			,
		|			ПоДокументу = &Основание
		|				И КодОперации = &Приемка) КАК Izh_БракПриПриемкеОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Izh_БракПриПриемке.Остатки(
		|				,
		|				ПоДокументу = &Основание
		|					И КодОперации = &Возврат) КАК Izh_БракПриПриемкеОстатки
		|		ПО Izh_БракПриПриемкеОбороты.Номенклатура = Izh_БракПриПриемкеОстатки.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Результат.Номенклатура,
		|	ВТ_Результат.КоличествоВозврат КАК Количество,
		|	ВТ_Результат.СуммаВозврат КАК Сумма,
		|	""Возврат"" КАК Операция
		|ИЗ
		|	ВТ_Результат КАК ВТ_Результат
		|ГДЕ
		|	ВТ_Результат.КоличествоВозврат > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Результат.Номенклатура,
		|	ВТ_Результат.КоличествоУтиль,
		|	ВТ_Результат.СуммаУтиль,
		|	""Утиль""
		|ИЗ
		|	ВТ_Результат КАК ВТ_Результат
		|ГДЕ
		|	ВТ_Результат.КоличествоУтиль > 0";
	Брак = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НаВозврат.Загрузить(
		Брак.Скопировать(Новый Структура("Операция", "Возврат"))
	);
	НаУтилизацию.Загрузить(
		Брак.Скопировать(Новый Структура("Операция", "Утиль"))
	);
	
	Записать();
	
КонецПроцедуры


Процедура ЕстьБракНаВозвратПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = (НаВозврат.Количество() > 0);
	
КонецПроцедуры

Процедура ВозвратБракаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СформироватьЗадачи(, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВозвратБракаОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура СозданиеРасходнойНакладнойОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасходнаяНакладная = Документы.РасходнаяНакладная.СоздатьДокумент();
	РасходнаяНакладная.Заполнить(Основание);
	
	РасходнаяНакладная.Дата = ТекущаяДата();
	РасходнаяНакладная.Возврат = Истина;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	иж_ОбработкаБракаНаВозврат.Номенклатура,
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
		|	ЕдиницыИзмерения.Ссылка.Коэффициент КАК Коэффициент,
		|	иж_ОбработкаБракаНаВозврат.Количество,
		|	иж_ОбработкаБракаНаВозврат.Сумма / иж_ОбработкаБракаНаВозврат.Количество КАК Цена,
		|	иж_ОбработкаБракаНаВозврат.Сумма,
		|	Основание.СтавкаНДС
		|ИЗ
		|	БизнесПроцесс.иж_ОбработкаБрака.НаВозврат КАК иж_ОбработкаБракаНаВозврат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПриходнаяНакладнаяСостав.Номенклатура КАК Номенклатура,
		|			МАКСИМУМ(ПриходнаяНакладнаяСостав.СтавкаНДС) КАК СтавкаНДС
		|		ИЗ
		|			Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
		|		ГДЕ
		|			ПриходнаяНакладнаяСостав.Ссылка = &Основание
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПриходнаяНакладнаяСостав.Номенклатура) КАК Основание
		|		ПО иж_ОбработкаБракаНаВозврат.Номенклатура = Основание.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ЕдиницыИзмерения.Ссылка) КАК Ссылка,
		|			ЕдиницыИзмерения.Владелец КАК Владелец,
		|			ЕдиницыИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору
		|		ИЗ
		|			Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЕдиницыИзмерения.Владелец,
		|			ЕдиницыИзмерения.ЕдиницаПоКлассификатору) КАК ЕдиницыИзмерения
		|		ПО иж_ОбработкаБракаНаВозврат.Номенклатура = ЕдиницыИзмерения.Владелец
		|			И иж_ОбработкаБракаНаВозврат.Номенклатура.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
		|ГДЕ
		|	иж_ОбработкаБракаНаВозврат.Ссылка = &Ссылка";
	Состав = Запрос.Выполнить().Выгрузить();
	
	РасходнаяНакладная.Состав.Загрузить(Состав);
	Для каждого СтрокаТЧ Из РасходнаяНакладная.Состав Цикл
		Izh_ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ);
	КонецЦикла;
	
	РасходнаяНакладная.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры


Процедура ЕстьБракНаУтилизациюПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = (НаУтилизацию.Количество() > 0);
	
КонецПроцедуры

Процедура УтилизацияБракаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СформироватьЗадачи(, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УтилизацияБракаОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры
