/////////////////////////////////////////////////////////////////////////////////////////////
//                                СОБЫТИЯ ФОРМЫ                                            //
/////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗадачаСсылка = Параметры.Ключ;
	ЗначениеВДанныеФормы(ЗадачаСсылка.ПолучитьОбъект(),ЗадачаОбъект);
	БизнесПроцесс = ЗадачаСсылка.БизнесПроцесс;
	ЗначениеВДанныеФормы(БизнесПроцесс.ПолучитьОбъект(),Объект);
	//Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
	//	Элементы.ОбъектСоставПолный.ПодчиненныеЭлементы.ОбъектСоставЦена.Видимость = Ложь;
	//	Элементы.ОбъектСоставПолный.ПодчиненныеЭлементы.ОбъектСоставСумма.Видимость = Ложь;
	//	Элементы.ОбъектФирма.Видимость = Ложь;
	//КонецЕсли;	
	//{БредовЮГ 2014-11-19 Наряд №000134078
	ЭтоЦентр = ПараметрыСеанса.ЭтоЦентр;	
	Элементы.ОбъектСоставПолныйОбнулитьКоличество.Видимость = НЕ ЭтоЦентр;	
	//++БИТ БВО
	Объект.НачалоПериодаРасчета	= НачалоДня(ЗадачаОбъект.Дата) - 14 * 3600 * 24;
	Объект.КонецПериодаРасчета	= КонецДня(ЗадачаОбъект.Дата);			
	//--БИТ БВО	
	
	//БредовЮГ 2014-11-19 Наряд №000134078}
	ФормулаСтрокой = "ПОТРЕБНОСТЬ = ((ТЕМП ПРОДАЖ * ПЕРИОД БУДУЩИХ ПРОДАЖ + СТРАХОВОЙ ЗАПАС) * КОЭФФИЦИЕНТ ЗАКАЗА) – ОСТАТОК НА ДЕНЬ ПОСТАВКИ  – ЗАКАЗЫ В ПУТИ";
	
	//{ СИТЕК БрыляковЕЮ 2015-04-13  
	УстановитьОтборФирмы();
	// СИТЕК БрыляковЕЮ 2015-04-13 }
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
		НайденныеСтроки = Объект.СоставПолный.НайтиСтроки(Новый Структура("Утвержден,Цена",Истина,0));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Сообщить("Не заполнена цена по товарам:
			|");
		КонецЕсли;	
		Для Каждого Строка из НайденныеСтроки Цикл
			Сообщить(Строка.Номенклатура);
		КонецЦикла;	
		Если НайденныеСтроки.Количество() > 0 Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	//{БредовЮГ 2014-12-07 Наряд№000136209
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите склад";
		Сообщение.Поле = "Объект.Склад";
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	//БредовЮГ 2014-12-07 Наряд№000136209}                                   
	Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.Контрагенты") И НЕ ЗначениеЗаполнено(Объект.Фирма) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите фирму";
		Сообщение.Поле = "Объект.Фирма";
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	БизнесПроцессОбъект = ДанныеФормыВЗначение(Объект,Тип("БизнесПроцессОбъект.АвтоЗаказ"));
	БизнесПроцессОбъект.Записать();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//dps+ 18.07.14 наряд000121311 
	Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы") И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Поставщик,"ТипСтруктурнойЕдиницы") = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад") Тогда 
		Элементы.ОбъектСоставПолныйПолучитьОстаткиРЦ.Доступность = Истина;
	КонецЕсли;
	//dps-
	//dps+ 24.06.2014   Наряд №000119283
	Элементы.ОбъектСоставПолный.ТекущаяСтрока = 0;
	Если Элементы.ОбъектСоставПолный.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	Элементы.ОбъектСоставПолныйПоказатьДиаграмму.Пометка = Истина;	
	
	//БредовЮГ 2015-02-05 Пока временно сказали убрать видимость этой части, что не временно, то постоянно}
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиница,"ТипСтруктурнойЕдиницы") = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Магазин") Тогда 
		Элементы.ОбъектСоставПолныйЦена.Видимость = Ложь;
		Элементы.ОбъектСоставПолныйЦенаРозн.Видимость = Истина;
	Иначе
		Элементы.ОбъектСоставПолныйЦена.Видимость = Истина;
		Элементы.ОбъектСоставПолныйЦенаРозн.Видимость = Ложь;
	КонецЕсли;	
	УстановитьОформление();	
	//++БИТ БВО
	//Объект.СоставПолный.Сортировать("Акция Убыв, Номенклатура Возр");	
	Объект.СоставПолный.Сортировать("Акция Убыв, ПолныйКод Возр");	
	//--БИТ БВО
	
	////++БИТ БВО
	//Для Каждого ЭлементФормы Из Элементы Цикл
	//	Если ЭлементФормы.Родитель = Элементы.ОбъектСоставПолный Тогда
	//		ЭлементФормы.ТолькоПросмотр = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//Элементы.ОбъектСоставПолныйКоличество.ТолькоПросмотр = Ложь;	
	////--БИТ БВО
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////
//                            СОБЫТИЯ ЭЛЕМЕНТОВ ФОРМЫ                                      //
/////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбъектСоставПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ОбъектСоставПолный.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		//Если Элементы.ОбъектСоставПоказыватьРасшифровку.Пометка Тогда
		//	Элементы.ОбъектДвиженияТоваров.ОтборСтрок= Новый ФиксированнаяСтруктура("Номенклатура",ТекДанные.Номенклатура);
		//КонецЕсли;	
		Если Элементы.ОбъектСоставПолныйПоказатьДиаграмму.Пометка Тогда
			ПодключитьОбработчикОжидания("ОбновитьДанныеНаКлиенте",0.1,Истина);
			//ОбновитьДанныеНаКлиенте(ТекДанные.Номенклатура);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоставщикПриИзменении(Элемент)
	//dps+ 18.07.14 наряд000121311 
	Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы") И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Поставщик,"ТипСтруктурнойЕдиницы") = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад") Тогда  
		Элементы.ОбъектСоставПолныйПолучитьОстаткиРЦ.Доступность = Истина;
	Иначе 
		Элементы.ОбъектСоставПолныйПолучитьОстаткиРЦ.Доступность = ЛОЖЬ;
	КонецЕсли;
	Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Элементы.ОбъектФирма.Видимость = Истина;
	КонецЕсли;
	
	//dps-
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСоставПолныйКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ОбъектСоставПолный.ТекущиеДанные;
	//Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда 
	//{ СИТЕК БрыляковЕЮ 2015-04-14  
	// Исходный текст -->
	//ТекДанные.Количество = ?(ТекДанные.Количество=0, 0, ПроверитьНаКратностьКвантуОтгрузки(ТекДанные.Номенклатура, ТекДанные.Количество, ТекДанные.ОстатокРЦ+ТекДанные.ВПутиРЦ)); 
	// <-- Исходный текст 
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	ТекДанные.Количество = ПривестиКоличествоККвантуОтгрузки(ТекДанные.Номенклатура,Объект.Поставщик,ТекДанные.Количество,ТекДанные.ВПутиРЦ,ТекДанные.ОстатокРЦ);
	// СИТЕК БрыляковЕЮ 2015-04-14 }
	//КонецЕсли;	
	//++БИТ БВО
	//ОбработкаТабличныхЧастейКлиент.ПриИзмененииКоличестваВТабличнойЧасти(ТекДанные);
	ПересчитатьСуммуПоСтроке(ТекДанные);
	//--БИТ БВО
	ТекДанные.Утвержден				= ТекДанные.Количество > 0;
	ТекДанные.КоличествоБольшеНуля	= ТекДанные.Количество > 0; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбъектСоставПолныйЦенаПриИзменении(Элемент)
	
	//++БИТ БВО
	//ОбработкаТабличныхЧастейКлиент.РасчитатьСуммуВСтрокеТабличнойЧасти(Элементы.ОбъектСоставПолный.ТекущиеДанные);
	ПересчитатьСуммуПоСтроке(Элементы.ОбъектСоставПолный.ТекущиеДанные);
	//--БИТ БВО
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСоставПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элементы.ОбъектСоставПолный.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) И ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекДанные.Номенклатура,"ТипТовара") = ПредопределенноеЗначение("Перечисление.ТипыТоваров.Весовой") Тогда
		Элементы.ОбъектСоставПолный.ПодчиненныеЭлементы.ОбъектСоставКоличество.ФорматРедактирования = "ЧЦ=15; ЧДЦ=3";
	Иначе	
		Элементы.ОбъектСоставПолный.ПодчиненныеЭлементы.ОбъектСоставКоличество.ФорматРедактирования = "ЧЦ=15; ЧДЦ=0";
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////
//                            ОСТАЛЬНЫЕ МЕТОДЫ )))                                         //
/////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для Каждого Строка из Объект.СоставПолный Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		Строка.Утвержден = Истина;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	Для Каждого Строка из Объект.СоставПолный Цикл
		Строка.Утвержден = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере(Номенклатура)
	Если НЕ Элементы.ОбъектСоставПоказатьДиаграмму.Пометка Тогда
		Возврат;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ДвиженияТМЦОбороты.Период КАК Период,
		//|	ДвиженияТМЦОбороты.КоличествоОборот КАК Продажа,
		//|	0 КАК Остаток
		//|ИЗ
		//|	РегистрНакопления.ДвиженияТМЦ.Обороты(
		//|			&ДатаНачала,
		//|			&ДатаКонца,
		//|			День,
		//|			КодОперации = &КодОперации
		//|				И Номенклатура = &Номенклатура) КАК ДвиженияТМЦОбороты
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		"ВЫБРАТЬ
		|	ОстаткиНоменклатурыОстаткиИОбороты.Период КАК Период,
		|	ОстаткиНоменклатурыОстаткиИОбороты.КоличествоНачальныйОстаток КАК Остаток,
		|	ОстаткиНоменклатурыОстаткиИОбороты.КоличествоПриход КАК Приход,
		|	ОстаткиНоменклатурыОстаткиИОбороты.КоличествоРасход КАК Расход
		|ИЗ
		|	РегистрНакопления.ОстаткиНоменклатуры.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, День, Движения, Номенклатура = &Номенклатура) КАК ОстаткиНоменклатурыОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Остаток)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, , )";

	//++БИТ БВО
	//Запрос.УстановитьПараметр("ДатаКонца", НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата()-Объект.ПериодРасчета*3600*24));	
	Запрос.УстановитьПараметр("ДатаКонца"	, КонецДня(Объект.КонецПериодаРасчета));
	Запрос.УстановитьПараметр("ДатаНачала"	, НачалоДня(Объект.НачалоПериодаРасчета));
	//--БИТ БВО
	
	//Запрос.УстановитьПараметр("КодОперации", Перечисления.КодыОпераций.ПродажаРозница);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Результат = Запрос.Выполнить();
    Диаграмма.ТипДиаграммы = ТипДиаграммы.ГрафикСОбластями;
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Нет;
	Диаграмма.АвтоТранспонирование = Ложь;
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период","Все");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Точка = Диаграмма.УстановитьТочку(Формат(ВыборкаДетальныеЗаписи.Период,"ДФ=d.M"));
        Серия = Диаграмма.УстановитьСерию("Остаток");
        Диаграмма.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.Остаток);
		//Диаграмма.УстановитьЗначение(Точка, Серия, ?(ВыборкаДетальныеЗаписи.Остаток<0,0,ВыборкаДетальныеЗаписи.Остаток));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвиженияТМЦОбороты.Период КАК Период,
		|	ДвиженияТМЦОбороты.КоличествоОборот КАК Продажа
		|ИЗ
		|	РегистрНакопления.ДвиженияТМЦ.Обороты(
		|			&ДатаНачала,
		|			&ДатаКонца,
		|			День,
		|			КодОперации = &КодОперации
		|				И Номенклатура = &Номенклатура) КАК ДвиженияТМЦОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Продажа)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, , )";
	//++БИТ БВО	
	//Запрос.УстановитьПараметр("ДатаКонца", НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата()-Объект.ПериодРасчета*3600*24));
	Запрос.УстановитьПараметр("ДатаКонца"	, КонецДня(Объект.КонецПериодаРасчета));
	Запрос.УстановитьПараметр("ДатаНачала"	, НачалоДня(Объект.НачалоПериодаРасчета));
	//--БИТ БВО
	Запрос.УстановитьПараметр("КодОперации", Перечисления.КодыОпераций.ПродажаРозница);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период","Все");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Серия = Диаграмма.УстановитьСерию("Продажа");
        Точка = Диаграмма.УстановитьТочку(Формат(ВыборкаДетальныеЗаписи.Период,"ДФ=d.M"));
		Диаграмма.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.Продажа);
	КонецЦикла;
	
	//Диаграмма.ИсточникДанных = Результат.Выгрузить();
	Диаграмма.АвтоТранспонирование = Истина;
	Диаграмма.Обновление = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет()
	СформироватьОтчетНаСервере(Элементы.ОбъектСоставПолный.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьДанныеНаКлиенте()
	ТекСтрока = Элементы.ОбъектСоставПолный.ТекущаяСтрока;
	ТекДанные = Элементы.ОбъектСоставПолный.ТекущиеДанные;
	Если СоставТекущаяСтрока <> ТекСтрока Тогда
        СоставТекущаяСтрока = ТекСтрока;	
		Izh_ТЗДвижений.Очистить();
		СоответствиеСтрок = ПолучитьДанныеПоТЗ(ТекДанные.Номенклатура);
		Для Каждого КлючИЗначение из СоответствиеСтрок Цикл
			НоваяСтрока = Izh_ТЗДвижений.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока,КлючИЗначение.Значение);
		КонецЦикла;
		Элементы.Izh_ТЗДвиженийЗакуп.ТекстПодвала = Izh_ТЗДвижений.Итог("Закуп");
		Элементы.Izh_ТЗДвиженийПродажи.ТекстПодвала = Izh_ТЗДвижений.Итог("Продажи");
		Элементы.Izh_ТЗДвиженийСписание.ТекстПодвала = Izh_ТЗДвижений.Итог("Списание");
		Элементы.Izh_ТЗДвиженийВозврат.ТекстПодвала = Izh_ТЗДвижений.Итог("Возврат");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьДанныеПоТЗ(ВходящийПараметр)
	СоответствиеСтрок = Новый Соответствие;
	СтруктураДанныеСтроки = Новый Структура("НачальныйОстаток,Закуп,Продажи,Списание,Возврат,КонечныйОстаток");
	Запрос = Новый Запрос(ПолучитьТекстЗапросаОборотов());	
	Запрос.УстановитьПараметр("МассивНоменклатуры",ВходящийПараметр);
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(ТекущаяДата()-60*60*24*14)); 
	Запрос.УстановитьПараметр("ДатаКонца",КонецДня(ТекущаяДата()));
	тзРезультат = Запрос.Выполнить().Выгрузить();
	НомерСтроки = 0;
	Для Каждого СтрокаТЗ из тзРезультат Цикл
		СтруктураДанныеСтроки = Новый Структура("Дата,НачальныйОстаток,Закуп,Продажи,Списание,Возврат,КонечныйОстаток");
		ЗаполнитьЗначенияСвойств(СтруктураДанныеСтроки,СтрокаТЗ);
		СоответствиеСтрок.Вставить(НомерСтроки,СтруктураДанныеСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	Возврат СоответствиеСтрок;
КонецФункции

&НаКлиенте
Процедура ПоказатьДиаграмму(Команда)
	//{БредовЮГ 2015-02-04 убрал вывод диаграммы, заменил на расчетные данные
	Если Элементы.ОбъектСоставПолный.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Элементы.ОбъектСоставПолныйПоказатьДиаграмму.Пометка = НЕ Элементы.ОбъектСоставПолныйПоказатьДиаграмму.Пометка;
	УстановитьВидимость_Izh_ТЗДвижений();
	//БредовЮГ 2015-02-04 убрал вывод диаграммы, заменил на расчетные данные}
	//СформироватьОтчетНаСервере(Элементы.ОбъектСоставПолный.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьВидимость_Izh_ТЗДвижений()
	Элементы.Izh_ТЗДвижений.Видимость = Элементы.ОбъектСоставПолныйПоказатьДиаграмму.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКоличеству(Команда)
	Элементы.ОбъектСоставПолныйОтборПоКоличеству.Пометка = НЕ Элементы.ОбъектСоставПолныйОтборПоКоличеству.Пометка;
	Если Элементы.ОбъектСоставПолныйОтборПоКоличеству.Пометка Тогда
		Элементы.ОбъектСоставПолный.ОтборСтрок = Новый ФиксированнаяСтруктура("КоличествоБольшеНуля", Элементы.ОбъектСоставПолныйОтборПоКоличеству.Пометка);
	Иначе
		Элементы.ОбъектСоставПолный.ОтборСтрок = Неопределено;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьРасшифровку(Команда)
	//Если Элементы.ОбъектСоставПолный.ТекущиеДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;	
	//Элементы.ОбъектСоставПоказыватьРасшифровку.Пометка = НЕ Элементы.ОбъектСоставПоказыватьРасшифровку.Пометка;
	//Элементы.ГруппаРасшифровки.Видимость = Элементы.ОбъектСоставПоказыватьРасшифровку.Пометка;
	//Элементы.ОбъектДвиженияТоваров.ОтборСтрок= Новый ФиксированнаяСтруктура("Номенклатура",Элементы.ОбъектСоставПолный.ТекущиеДанные.Номенклатура);
КонецПроцедуры

//dps+ 07.07.2014 Наряд №000120535
&НаСервере
Функция ЗаполнитьАкцииТовара()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПромоАкции.Название,
	               |	ПромоАкции.IDПромо,
	               |	ПромоАкции.IDКомпоненты,
	               |	ПромоАкции.IDГруппы,
	               |	ПромоАкции.IDДеталей,
	               |	ПромоАкции.СтруктурнаяЕдиница,
	               |	ПромоАкции.ДатаНачала,
	               |	ПромоАкции.ДатаОкончания
	               |ПОМЕСТИТЬ втпромоакции
	               |ИЗ
	               |	РегистрСведений.ПромоАкции КАК ПромоАкции
	               |ГДЕ
	               |	&ДатаАкции МЕЖДУ ПромоАкции.ДатаНачала И ПромоАкции.ДатаОкончания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПромоАкцииНоменклатура.Номенклатура,
	               |	втпромоакции.Название,
	               |	втпромоакции.ДатаНачала,
	               |	втпромоакции.ДатаОкончания
	               |ИЗ
	               |	втпромоакции КАК втпромоакции
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	               |		ПО втпромоакции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	               |			И втпромоакции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	               |			И втпромоакции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	               |			И втпромоакции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	               |			И (ПромоАкцииНоменклатура.Номенклатура В (&СписокНоменклатуры))";
	 Запрос.УстановитьПараметр("ДатаАкции",ЗадачаОбъект.Дата);                                    
	 Запрос.УстановитьПараметр("СписокНоменклатуры",Объект.СоставПолный.Выгрузить(,"Номенклатура"));
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выгрузить();
	 Для Каждого Строка Из Объект.СоставПолный Цикл
		 Отбор = Новый Структура();
		 Отбор.Вставить("Номенклатура",Строка.Номенклатура);
         НайденаяСтрока = Выборка.НайтиСтроки(Отбор);
		 Если ЗначениеЗаполнено(НайденаяСтрока) Тогда 
			 //++БИТ БВО - Теперь перенос строки не нужен
			 //Строка.Акция = "Акция: "+Строка(НайденаяСтрока[0].Название)+Символы.ПС+"Действует с "+Строка(Формат(НайденаяСтрока[0].ДатаНачала,"ДФ=dd.MM.yyyy"))+" по "+Строка(Формат(НайденаяСтрока[0].ДатаОкончания,"ДФ=dd.MM.yyyy"))+".";
			 Строка.Акция = "Акция: "+Строка(НайденаяСтрока[0].Название)+". Действует с "+Строка(Формат(НайденаяСтрока[0].ДатаНачала,"ДФ=dd.MM.yyyy"))+" по "+Строка(Формат(НайденаяСтрока[0].ДатаОкончания,"ДФ=dd.MM.yyyy"))+".";
			 //--БИТ БВО
		 КонецЕсли;
	КонецЦикла;
КонецФункции
//dps-

//dps+ 14.07.08 наряд000120537
&НаСервере
Функция НовыйТовар()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыНоменклатуры.Номенклатура,
	|	СтатусыНоменклатуры.ДатаДобавления
	|ИЗ
	|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|ГДЕ
	|	СтатусыНоменклатуры.Номенклатура В(&Номенклатура)";
	Запрос.УстановитьПараметр("Номенклатура",Объект.СоставПолный.Выгрузить(,"Номенклатура"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	Для Каждого Строка Из Объект.СоставПолный Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",Строка.Номенклатура);
		НайденныеСтроки = Выборка.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
			Если (НачалоДня(ТекущаяДата())-НачалоДня(НайденнаяСтрока.ДатаДобавления))/(60*60*24)<=14 Тогда  
				//++БИТ БВО
				//Строка.Акция = ?(ЗначениеЗаполнено(Строка.Акция),Строка.Акция+Символы.ПС+"Новая номенклатура.","Новая номенклатура.");
				Строка.Акция = ?(ЗначениеЗаполнено(Строка.Акция),Строка.Акция+". Новая номенклатура.","Новая номенклатура.");
				//--БИТ БВО
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецФункции
//dps-

//dps+ 15.04.30 наряд000149313
&НаСервере
Функция ПризнакМатрицы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	               |	МАКСИМУМ(НоменклатураДополнительныеРеквизиты.Значение.Наименование) КАК Значение
	               |ИЗ
	               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	               |ГДЕ
	               |	НоменклатураДополнительныеРеквизиты.Свойство = &ПризнакМатрицы
	               |	И НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НоменклатураДополнительныеРеквизиты.Ссылка";
	Запрос.УстановитьПараметр("Номенклатура",Объект.СоставПолный.Выгрузить(,"Номенклатура"));
	Запрос.УстановитьПараметр("Признакматрицы",ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаПризнакМатрицы)));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		 Отбор = Новый Структура();
		 Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
         НайденныеСтроки = Объект.СоставПолный.НайтиСтроки(Отбор);
		 Для Каждого Строка Из НайденныеСтроки Цикл 
			 Строка.Акция = Выборка.Значение;
		 КонецЦикла;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура УстановитьОформление()
	Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин Тогда 
		ЗаполнитьАкцииТовара();
		НовыйТовар();
		ЗаполнитьБудущуюАкциюТовара();
	ИначеЕсли ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда 
		ПризнакМатрицы();
	КонецЕсли;
	
	УсловноеОформление.Элементы.Очистить();
	Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин Тогда 
		//ЭтаФорма.Элементы.Акция.Видимость = Истина;
		НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Настройка НоваяНоменклатура";
		НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
		НовыйЭлементУсловногоОформления.Использование = Истина;
		ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СоставПолный.Акция");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбора.ПравоеЗначение = "Новая номенклатура.";
		НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОбъектСоставПолный");
		НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);	
		
		НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Настройка Акция";
		НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
		НовыйЭлементУсловногоОформления.Использование = Истина;
		ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СоставПолный.Акция");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбора.ПравоеЗначение = "Акция";
		НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОбъектСоставПолный");
		НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лосось);	
		
		НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Настройка Будущая акция.";
		НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
		НовыйЭлементУсловногоОформления.Использование = Истина;
		ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СоставПолный.Акция");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбора.ПравоеЗначение = "Будущая акция.";
		НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОбъектСоставПолный");
		НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Желтый);
		
	ИначеЕсли ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда 
		//ЭтаФорма.Элементы.Акция.Видимость = Ложь;
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Izh_АвтоЗаказНастройкаПризнакаМатрицы.Свойство.Наименование КАК Свойство,
		                      |	Izh_АвтоЗаказНастройкаПризнакаМатрицы.Цвет
		                      |ИЗ
		                      |	РегистрСведений.Izh_АвтоЗаказНастройкаПризнакаМатрицы КАК Izh_АвтоЗаказНастройкаПризнакаМатрицы");
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		НомерНастройки = 1;
		Пока Выборка.Следующий() Цикл
			НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Настройка №"+НомерНастройки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СоставПолный.Акция");
			ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Выборка.Свойство;
						
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОбъектСоставПолный");
			
			Цвет = Выборка.Цвет.Получить();
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет);	
			НомерНастройки = НомерНастройки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//dps-

//dps+ 24.06.2014   Наряд №000119284
&НаКлиенте
Процедура ПолучитьОстаткиРЦ(Команда)	
	
	Элементы.ОбъектСоставПолныйОстатокРЦ.Видимость	= Истина;
	Элементы.ОбъектСоставПолныйВПутиРЦ.Видимость	= Истина;
	
	Остатки();
	УстановитьОформление();
	
	//++БИТ БВО
	//Объект.СоставПолный.Сортировать("Акция Убыв, Номенклатура Возр");	
	Объект.СоставПолный.Сортировать("Акция Убыв, ПолныйКод Возр");	
	//--БИТ БВО
	
	//ОтключитьОбработчикОжидания("ПодключитьОбработчикОжидания");
	
КонецПроцедуры
	
&НаСервере
Процедура  Остатки()
	Дата = Объект.ДатаПоставкиОт;
	тзТовары = Объект.СоставПолный.Выгрузить(,"Номенклатура");
	Товары=Izh_ОбменДаннымиRests.Оправка(тзТовары,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.РЦПоУмолчанию, Дата);
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тзТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ тзНоменклатура
	|ИЗ
	|	&тзТовары КАК тзТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Код КАК КодНоменклатуры,
	|	Товары.КодСклада КАК КодСклада,
	|	Товары.Количество КАК Количество,
	|	Товары.ВПутиРЦ КАК ВПутиРЦ
	|ПОМЕСТИТЬ тзСостав
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.КодСклада = &КодСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тзНоменклатура.Номенклатура КАК Номенклатура,
	|	тзСостав.Количество КАК ОстатокРЦ,
	|	тзСостав.ВПутиРЦ КАК ВПутиРЦ,
	|	тзСостав.КодНоменклатуры КАК Код,
	|	тзСостав.КодСклада КАК КодСклада,
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	тзСостав КАК тзСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ тзНоменклатура КАК тзНоменклатура
	|		ПО тзСостав.КодНоменклатуры = тзНоменклатура.Номенклатура.Код
	|		Левое СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО тзСостав.КодСклада = Склады.Код И Склады.Владелец=&Владелец";
	Запрос.УстановитьПараметр("тзТовары",тзТовары);
	Запрос.УстановитьПараметр("Товары",Товары);
	Запрос.УстановитьПараметр("КодСклада",Объект.СкладПроизводства.Код);
	Запрос.УстановитьПараметр("Владелец",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.РЦПоУмолчанию);
 	Результат = Запрос.Выполнить().Выгрузить();
	ОбъектСоставПолный = Объект.СоставПолный;
	ъ = ОбъектСоставПолный.Количество();
	Пока ъ > 0 Цикл
		ъ = ъ - 1;
		Строка = ОбъектСоставПолный[ъ];
		НайденыеСтроки = Результат.НайтиСтроки(Новый Структура("Номенклатура",Строка.Номенклатура));
		Если НайденыеСтроки.Количество()=0 Тогда 
			ОбъектСоставПолный.Удалить(Строка);
		Иначе 
			Строка.ОстатокРЦ = НайденыеСтроки[0].ОстатокРЦ;
			Строка.ВПутиРЦ = НайденыеСтроки[0].ВПутиРЦ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере                                              
Функция ПолучитьТЧВХранилище()
	ОбъектДок = РеквизитФормыВЗначение("Объект");
	Возврат ПоместитьВоВременноеХранилище(ОбъектДок.СоставПолный.Выгрузить(,"Номенклатура"),ЭтаФорма.УникальныйИдентификатор);
КонецФункции
//dps- 24.06.2014

//dps+ 24.06.2014   Наряд №000119285    и 06.08.14 наряд №000121312
&НаСервере
Функция ПроверитьНаКратностьКвантуОтгрузки(Номенклатура, Знач Количество, Остаток)
	//Количество = ?(Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный, Окр(Количество,0,1),Количество);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатураКонтрагента.МинимальныйЗаказ Как МинимальныйЗаказ
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ГДЕ
	|	"+?(ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.Контрагенты"),"НоменклатураКонтрагента.Контрагент = &Контрагент","НоменклатураКонтрагента.ОсновнойПоставщик")+"
	|	И НоменклатураКонтрагента.Номенклатура = &Номенклатура";
	Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Запрос.УстановитьПараметр("Контрагент",Объект.Поставщик);
	КонецЕсли;
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);      
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Если Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный И Количество<Выборка.МинимальныйЗаказ И Остаток < Выборка.МинимальныйЗаказ И ЗначениеЗаполнено(Остаток) Тогда 
			Возврат Остаток;
		КонецЕсли;
		Если Выборка.МинимальныйЗаказ = 0 Тогда
			Возврат ?(ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы"),?(Количество<=Остаток,Количество,Остаток),Количество);
		Иначе 
			Коэф = Цел(Количество/Выборка.МинимальныйЗаказ);  //кратность кванту отгрузки
			Если Коэф = 0 Тогда 
				КолвоКратное = ?((Количество/Выборка.МинимальныйЗаказ)>=0.5,Выборка.МинимальныйЗаказ,0);
			Иначе 
				КолвоКратное = ?((Количество - Коэф*Выборка.МинимальныйЗаказ)/Выборка.МинимальныйЗаказ >= 0.5, (Коэф + 1)* Выборка.МинимальныйЗаказ, (Коэф)* Выборка.МинимальныйЗаказ);
			КонецЕсли;
			Возврат ?(ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы"),?(КолвоКратное<=Остаток, КолвоКратное, Цел(Остаток/Выборка.МинимальныйЗаказ)*Выборка.МинимальныйЗаказ),КолвоКратное);
		КонецЕсли;
	Иначе 
		Возврат Количество;
	КонецЕсли;
	
КонецФункции
//dps- 24.06.2014

//{БредовЮГ 2014-11-19 Наряд №000134078
&НаКлиенте
Процедура ОбнулитьКоличество(Команда)
	Если Вопрос("Очистить поле <Количество> ?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Для Каждого СтрокаТЧ из Объект.СоставПолный Цикл			
			СтрокаТЧ.Количество = 0;
			//++БИТ БВО
			//ОбработкаТабличныхЧастейКлиент.ПриИзмененииКоличестваВТабличнойЧасти(СтрокаТЧ);
			ПересчитатьСуммуПоСтроке(СтрокаТЧ);
			//--БИТ БВО
			СтрокаТЧ.Утвержден = СтрокаТЧ.Количество > 0;
			СтрокаТЧ.КоличествоБольшеНуля = СтрокаТЧ.Количество > 0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//БредовЮГ 2014-11-19 Наряд №000134078}

&НаСервере 
Процедура РАсчетПотребностейНаСервере()
	ОбъектАвтоЗаказ = РеквизитФормыВЗначение("Объект");
	ОбъектАвтоЗаказ.РасчетПотребностиОбработка("");
	ЗначениеВРеквизитФормы(ОбъектАвтоЗаказ,"Объект");
	ЭтаФорма.Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЗадачу(Команда)
	РАсчетПотребностейНаСервере();
	УстановитьОформление();
	//++БИТ БВО
	//Объект.СоставПолный.Сортировать("Акция Убыв, Номенклатура Возр");	
	Объект.СоставПолный.Сортировать("Акция Убыв, ПолныйКод Возр");	
	//--БИТ БВО
КонецПроцедуры

//{БредовЮГ 2015-02-05
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаОборотов() 
	Возврат "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОстаткиНоменклатурыОстаткиИОбороты.Период, ДЕНЬ) КАК Дата,
	|	ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ОстаткиНоменклатурыОстаткиИОбороты.КоличествоНачальныйОстаток КАК НачальныйОстаток,
	|	ОстаткиНоменклатурыОстаткиИОбороты.КоличествоКонечныйОстаток КАК КонечныйОстаток,
	|	ЕСТЬNULL(ВложенныйЗапрос.Возврат, 0) КАК Возврат,
	|	ЕСТЬNULL(ВложенныйЗапрос.Закуп, 0) КАК Закуп,
	|	ЕСТЬNULL(ВложенныйЗапрос.Продажи, 0) КАК Продажи,
	|	ЕСТЬNULL(ВложенныйЗапрос.Списание, 0) КАК Списание
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ), КОНЕЦПЕРИОДА(&ДатаКонца, ДЕНЬ), День,ДвиженияИГраницыПериода , Номенклатура В (&МассивНоменклатуры)) КАК ОстаткиНоменклатурыОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (Значение(Перечисление.КодыОпераций.ПеремещениеРасход),
	|															 Значение(Перечисление.КодыОпераций.ВозвратПоставщику),
	|															 Значение(Перечисление.КодыОпераций.ПерепродажаВозвратПоставщику),
	|															 Значение(Перечисление.КодыОпераций.ПерепродажаПродажаОпт),
	|															 Значение(Перечисление.КодыОпераций.ПерепродажаВозвратРеализация))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Возврат,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (Значение(Перечисление.КодыОпераций.ПерепродажаПоступлениеТоваров),
	|															 Значение(Перечисление.КодыОпераций.ПередачаНаРеализацию),
	|															 Значение(Перечисление.КодыОпераций.ОприходованиеИзлишков),
	|															 Значение(Перечисление.КодыОпераций.ПоступлениеТоваров),
	|															 Значение(Перечисление.КодыОпераций.ВозвратОтПокупателя),
	|															 Значение(Перечисление.КодыОпераций.КорректировкаПоступления),
	|															 Значение(Перечисление.КодыОпераций.КорректировкаПоступления),
	|															 Значение(Перечисление.КодыОпераций.ВводОстатков))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Закуп,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (Значение(Перечисление.КодыОпераций.ПродажаРозница),
	|															 Значение(Перечисление.КодыОпераций.ПродажаОпт),
	|															 Значение(Перечисление.КодыОпераций.КорректировкаРеализации))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Продажи,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (Значение(Перечисление.КодыОпераций.Списание))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Списание,
	|			СУММА(ОстаткиНоменклатуры.Количество) КАК Количество,
	|			НАЧАЛОПЕРИОДА(ОстаткиНоменклатуры.Период, ДЕНЬ) КАК Период
	|		ИЗ
	|			РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ГДЕ
	|			ОстаткиНоменклатуры.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаКонца, ДЕНЬ)
	|			И НЕ ОстаткиНоменклатуры.Регистратор ССЫЛКА Документ.Перемещение
	|			И НЕ ОстаткиНоменклатуры.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуФирмами
	|			И ОстаткиНоменклатуры.Номенклатура В (&МассивНоменклатуры)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОстаткиНоменклатуры.Номенклатура,
	|			НАЧАЛОПЕРИОДА(ОстаткиНоменклатуры.Период, ДЕНЬ)) КАК ВложенныйЗапрос
	|		ПО ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И (ОстаткиНоменклатурыОстаткиИОбороты.Период = НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ))";
КонецФункции
//БредовЮГ 2015-02-05}

//{ СИТЕК БрыляковЕЮ 2015-04-13  
&НаСервере
Процедура УстановитьОтборФирмы()
	
	Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Контрагент", Объект.Поставщик);
		Запрос.УстановитьПараметр("Служебная", "999");
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СвязьФирмИКонтрагентов.Фирма
			|ИЗ
			|	РегистрСведений.СвязьФирмИКонтрагентов КАК СвязьФирмИКонтрагентов
			|ГДЕ
			|	СвязьФирмИКонтрагентов.Контрагент = &Контрагент
			|	И СвязьФирмИКонтрагентов.Фирма.Код <> &Служебная";
		СписокФирм = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Фирма");
		
		Izh_ДоступныеФирмы.ЗагрузитьЗначения(СписокФирм);
	//{ВетровИА 23.04.2015 Наряд №000148674	
	ИначеЕсли ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПерепродажаСрезПоследних.ФирмаПродажи
		               |ИЗ
		               |	РегистрСведений.Перепродажа.СрезПоследних(&Дата, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ПерепродажаСрезПоследних";
					   
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
		СписокФирм = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФирмаПродажи");
		
		Izh_ДоступныеФирмы.ЗагрузитьЗначения(СписокФирм);
	//ВетровИА 23.04.2015 Наряд №000148674}
	Иначе	
		
		Элементы.ОбъектФирма.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив());
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПривестиКоличествоККвантуОтгрузки(Номенклатура,Поставщик,Количество,ВПутиРЦ,ОстатокРЦ)
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаказНаРЦ = ТипЗнч(Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы");
	
	Построитель = Новый ПостроительЗапроса();
	Построитель.Текст =
	"ВЫБРАТЬ
	|	НоменклатураКонтрагента.Контрагент,
	|	НоменклатураКонтрагента.Номенклатура,
	|	НоменклатураКонтрагента.МинимальныйЗаказ,
	|	НоменклатураКонтрагента.ОсновнойПоставщик КАК ОсновнойПоставщик
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ГДЕ
	|	НоменклатураКонтрагента.Номенклатура В(&Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнойПоставщик УБЫВ";
	Построитель.ЗаполнитьНастройки();
	
	Отбор = Новый Структура();
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
		Отбор.Вставить("Контрагент", Поставщик);
	КонецЕсли;
	
	Izh_ОбщегоНазначения.УстановитьОтборПостроителя(Построитель, Отбор);
	
	Запрос = Построитель.ПолучитьЗапрос();
	// !!!! efim
	#Если _ Тогда
		Запрос = Новый Запрос;
	#КонецЕсли
	// !!!!
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	ДанныеПоЗаказу = Запрос.Выполнить().Выгрузить();
	
	Если ЗаказНаРЦ Тогда
		//++БИТ БВО 2015-06-16
		//НеТрогатьЭтуГруппу = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(
		//ПланыВидовХарактеристик.СлужебныеЗначения.НеСписыватьЕдиничныеОстаткиПоГруппе
		//);
		НеТрогатьЭтуГруппу = Справочники.Номенклатура.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьЗначениеСвойстваСлужебногоЗначения(
		ПланыВидовХарактеристик.СлужебныеЗначения.НеСписыватьЕдиничныеОстаткиПоГруппе
		));
		//--БИТ БВО 2015-06-16		
	КонецЕсли;
	
	Если Количество = 0 Тогда
		Возврат 0 ;
	КонецЕсли;
	
	Если ЗаказНаРЦ Тогда
		Остаток = ОстатокРЦ + ВПутиРЦ;
	КонецЕсли;
	
	Отбор = Новый Структура("Номенклатура",Номенклатура);
	Для Каждого Квант Из ДанныеПоЗаказу.НайтиСтроки(Отбор) Цикл		
		Если Квант.МинимальныйЗаказ <> 0 Тогда
			
			Если ЗаказНаРЦ 
				И ЗначениеЗаполнено(Остаток) И Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный 
				И Количество < Квант.МинимальныйЗаказ И Остаток < Квант.МинимальныйЗаказ Тогда 
				Количество = Остаток;
				Прервать; 
			КонецЕсли;
			
			Коэффициент = Окр(Количество / Квант.МинимальныйЗаказ);
			Если Коэффициент = 0 Тогда
				Коэффициент = 1;
			КонецЕсли;
			Если ЗаказНаРЦ Тогда
				Коэффициент = Мин(Коэффициент, Цел(Остаток / Квант.МинимальныйЗаказ));
			КонецЕсли;
			
			Количество = Коэффициент * Квант.МинимальныйЗаказ;
			
			Если ЗаказНаРЦ Тогда
				Если (Остаток - Количество) = 1 
					И Номенклатура.ТипТовара <> Перечисления.ТипыТоваров.Весовой
					И НЕ Номенклатура.ПринадлежитЭлементу(НеТрогатьЭтуГруппу) Тогда
					Количество = Количество + 1;
				КонецЕсли;
			КонецЕсли;
			
			Прервать;			
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

// СИТЕК БрыляковЕЮ 2015-04-13 }

//{++ ВетровИА 14.04.2015 Наряд №000147025}
&НаСервере 
Процедура ЗаполнитьБудущуюАкциюТовара()
	
	УстановитьПривилегированныйРежим(Истина);
	УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(Объект.РегламентноеЗадание);
	ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
	ДатаВыполнения = КонецДня(ТекущаяДата());
	Пока 1 = 1 Цикл
		ДатаВыполнения = ДатаВыполнения + 86400;
		Результат = ТекущееРегламентноеЗадание.Расписание.ТребуетсяВыполнение(ДатаВыполнения);
		Если Результат Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	ДатаПоставкиДоБудущее = НачалоДня(ДатаВыполнения) + Объект.СрокПоставки * 3600 * 24;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПромоАкции.Название,
	               |	ПромоАкции.IDПромо,
	               |	ПромоАкции.IDКомпоненты,
	               |	ПромоАкции.IDГруппы,
	               |	ПромоАкции.IDДеталей,
	               |	ПромоАкции.СтруктурнаяЕдиница,
	               |	ПромоАкции.ДатаНачала,
	               |	ПромоАкции.ДатаОкончания
	               |ПОМЕСТИТЬ втпромоакции
	               |ИЗ
	               |	РегистрСведений.ПромоАкции КАК ПромоАкции
	               |ГДЕ
	               |	(&ДатаПоставкиДо <= ПромоАкции.ДатаНачала И &ДатаПоставкиДоБудущее > ПромоАкции.ДатаНачала)
                   |     ИЛИ (&ДатаПоставкиДо <= ПромоАкции.ДатаОкончания И &ДатаПоставкиДоБудущее > ПромоАкции.ДатаОкончания)    
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПромоАкцииНоменклатура.Номенклатура,
	               |	втпромоакции.Название,
	               |	втпромоакции.ДатаНачала,
	               |	втпромоакции.ДатаОкончания
	               |ИЗ
	               |	втпромоакции КАК втпромоакции
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	               |		ПО втпромоакции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	               |			И втпромоакции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	               |			И втпромоакции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	               |			И втпромоакции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	               |			И (ПромоАкцииНоменклатура.Номенклатура В (&СписокНоменклатуры))";
	 Запрос.УстановитьПараметр("ДатаПоставкиДо", Объект.ДатаПоставкиДо);
	 Запрос.УстановитьПараметр("ДатаПоставкиДоБудущее", ДатаПоставкиДоБудущее);
	 Запрос.УстановитьПараметр("СписокНоменклатуры",Объект.СоставПолный.Выгрузить(,"Номенклатура"));
	 Результат = Запрос.Выполнить();
	 тзРезультат = Результат.Выгрузить();
	 Для Каждого Строка Из Объект.СоставПолный Цикл
		 Отбор = Новый Структура();
		 Отбор.Вставить("Номенклатура",Строка.Номенклатура);
         НайденаяСтрока = тзРезультат.НайтиСтроки(Отбор);
		 Если ЗначениеЗаполнено(НайденаяСтрока) И Найти(Строка.Акция, "Акция") = 0 
			 И Найти(Строка.Акция, "Новая номенклатура.") = 0 Тогда 
			 Строка.Акция = "Будущая акция. " + Строка(НайденаяСтрока[0].Название) + 
			 	Символы.ПС + "Действует с " + Строка(Формат(НайденаяСтрока[0].ДатаНачала, "ДФ=dd.MM.yyyy")) + 
				" по " + Строка(Формат(НайденаяСтрока[0].ДатаОкончания, "ДФ=dd.MM.yyyy"))+".";
		 КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
//{-- ВетровИА 14.04.2015 Наряд №000147025}

//++БИТ БВО
&НаСервере
Процедура ОбновитьОборотыЗаПериодНаСервере()
	
	ВремяНачала = ТекущаяДата();
	
	//++БИТ БВО - Обнуление текущих значений
	Для Каждого СтрокаСостава Из Объект.СоставПолный Цикл
		СтрокаСостава.НачальныйОстаток	= 0;
		СтрокаСостава.Закуп				= 0;
		СтрокаСостава.Продажи			= 0;
		СтрокаСостава.Возврат			= 0;
		СтрокаСостава.Списание			= 0;
		СтрокаСостава.КонечныйОстаток	= 0;		
	КонецЦикла;
	//--БИТ БВО
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ.Номенклатура
	|ПОМЕСТИТЬ ВТСостав
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	СУММА(ОстаткиНоменклатурыОстаткиИОбороты.КоличествоНачальныйОстаток) КАК НачальныйОстаток,
	|	СУММА(ОстаткиНоменклатурыОстаткиИОбороты.КоличествоПриход) КАК Приход,
	|	СУММА(ОстаткиНоменклатурыОстаткиИОбороты.КоличествоРасход) КАК Расход,
	|	СУММА(ОстаткиНоменклатурыОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КонечныйОстаток,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Возврат, 0)) КАК Возврат,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Закуп, 0)) КАК Закуп,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Продажи, 0)) КАК Продажи,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Списание, 0)) КАК Списание
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.ОстаткиИОбороты(
	|			НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ),
	|			КОНЕЦПЕРИОДА(&ДатаКонца, ДЕНЬ),
	|			,
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТСостав.Номенклатура
	|				ИЗ
	|					ВТСостав КАК ВТСостав)) КАК ОстаткиНоменклатурыОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПеремещениеРасход), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ВозвратПоставщику), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПерепродажаВозвратПоставщику), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПерепродажаПродажаОпт), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПерепродажаВозвратРеализация))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Возврат,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПерепродажаПоступлениеТоваров), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПередачаНаРеализацию), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ОприходованиеИзлишков), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПоступлениеТоваров), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ВозвратОтПокупателя), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.КорректировкаПоступления), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.КорректировкаПоступления), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ВводОстатков))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Закуп,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПродажаРозница), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПродажаОпт), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.КорректировкаРеализации))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Продажи,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (ЗНАЧЕНИЕ(Перечисление.КодыОпераций.Списание))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Списание,
	|			СУММА(ОстаткиНоменклатуры.Количество) КАК Количество
	|		ИЗ
	|			РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ГДЕ
	|			ОстаткиНоменклатуры.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаКонца, ДЕНЬ)
	|			И НЕ ОстаткиНоменклатуры.Регистратор ССЫЛКА Документ.Перемещение
	|			И НЕ ОстаткиНоменклатуры.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуФирмами
	|			И ОстаткиНоменклатуры.Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТСостав.Номенклатура
	|					ИЗ
	|						ВТСостав КАК ВТСостав)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОстаткиНоменклатуры.Номенклатура) КАК ВложенныйЗапрос
	|		ПО ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура = ВложенныйЗапрос.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура";	
	Запрос.УстановитьПараметр("ДатаНачала"	, Объект.НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("ДатаКонца"	, Объект.КонецПериодаРасчета);
	Запрос.УстановитьПараметр("ТЗ"			, Объект.СоставПолный.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл		
		Строки = Объект.СоставПолный.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для Каждого Строка Из Строки Цикл
			ЗаполнитьЗначенияСвойств(Строка, Выборка, "НачальныйОстаток, Закуп, Продажи, Возврат, Списание, КонечныйОстаток");			
		КонецЦикла;			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОборотыЗаПериод(Команда)
	
	ОбновитьОборотыЗаПериодНаСервере();		
	ЗаполнитьАкцииТовара();
	
	//++БИТ БВО
	//Объект.СоставПолный.Сортировать("Акция Убыв, Номенклатура Возр");	
	Объект.СоставПолный.Сортировать("Акция Убыв, ПолныйКод Возр");	
	//--БИТ БВО
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПоСтроке(Строка)
	
	Строка.Сумма = Строка.Количество * Строка.Цена;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьКарточкуНоменклатуры(Команда)
	
	Попытка
		НоменклатураСсылка = Элементы.ОбъектСоставПолный.ТекущиеДанные.Номенклатура;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", НоменклатураСсылка);
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыОткрытия);
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//--БИТ БВО
