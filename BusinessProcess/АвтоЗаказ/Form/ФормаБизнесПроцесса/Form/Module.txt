//Процедуры и функции для организации подбора
&НаКлиенте
Процедура ПодборНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Для Каждого Строка Из Элемент.ВыделенныеСтроки Цикл
		ОбработкаТабличныхЧастейКлиент.ЗаполнитьИзПодбора(ЭтаФорма,Объект,Элемент.ДанныеСтроки(Строка),Элементы.ФильтрНоменклатуры,СтандартнаяОбработка,,Истина,"ФильтрНоменклатуры");	
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура ПодборОткрыть(Команда)
	Если НЕ Элементы.ГруппаПодбор.Видимость Тогда
		Установитьпараметры();
	Иначе 
		СохранитьпараметрыПОдбора();
	КонецЕсли;
	Элементы.ГруппаПодбор.Видимость = НЕ Элементы.ГруппаПодбор.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура СоставПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПодборОткрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГруппыВПодборе(Команда)
	элементы.кнГруппы.пометка = не элементы.кнГруппы.пометка;
	флаг = Элементы.кнГруппы.пометка;
	ВЫполнить("ОбработкаТабличныхЧастейКлиент.ОтображениеГрупп(ПодборНоменклатуры,флаг)");
КонецПроцедуры

&НаСервере
Процедура Сохранитьпараметрыподбора()
	ПОдборНоменклатурыСервер.СохранитьПараметрыПодбора(Объект.Ссылка.Метаданные().имя,ЭтаФорма.ИмяФормы,ЭтаФорма.Элементы);
конецпроцедуры

&НаСервере
Функция получитьНастройкуПодбора()
	возврат подборНоменклатурыСервер.ПолучитьНастройкуподбора(Объект.Ссылка.Метаданные().Имя,ЭтаФорма.ИмяФормы);	
конецфункции

&НаКлиенте
процедура ЗагрузитьНастройкиПодбора()
	Настройки = ПолучитьНастройкуПодбора();
	ОбработкаТабличныхЧастейКлиент.загрузитьнастройкиподбора(ЭтаФорма,Настройки);
конецпроцедуры

&НаКлиенте
Процедура ПодборЗакрыть(Команда)
	Элементы.ГруппаПодбор.Видимость  = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры


&НаСервере
процедура Установитьпараметры()
	Если ТипЗнч(Объект.Поставщик) <> Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Если Не ПодборНоменклатуры.Параметры.ДоступныеПараметры.Элементы.Найти("СтруктурнаяЕдиница") = Неопределено Тогда
			ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("структурнаяединица",Объект.СтруктурнаяЕдиница);
		КонецЕсли;
		Если Не ПодборНоменклатуры.Параметры.ДоступныеПараметры.Элементы.Найти("Контрагент") = Неопределено Тогда
			ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("контрагент", Объект.Поставщик);
		КонецЕсли;
		Если Не ПодборНоменклатуры.Параметры.ДоступныеПараметры.Элементы.Найти("ДатаДокумента") = Неопределено Тогда
			ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("датадокумента", Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("СписокТоваров", СписокНомеклатуры);
конецпроцедуры

&НаКлиенте
Процедура Дерево(Команда)
	обработкатабличныхчастейклиент.ОтображениеДинамическогоСпискаДерево(ЭтаФорма);	
КонецПроцедуры


&НаКлиенте
Процедура Иерархия(Команда)
	обработкатабличныхчастейклиент.отображениединамическогоспискаиерархия(этаформа);	
КонецПроцедуры


&НаКлиенте
Процедура Список(Команда)
	обработкатабличныхчастейклиент.ОтображениеДинамическогоСпискаСписок(этаформа);	
КонецПроцедуры

//Конец Процедуры и функции для организации подбора

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если Объект.Стартован Тогда
	//	Элементы.СоставЕдиницаИзмерения.Видимость = Истина;
	//	Элементы.СоставКоэффициент.Видимость = Истина;
	//	Элементы.СоставЦена.Видимость = Истина;
	//	Элементы.СоставСумма.Видимость = Истина;
	//	Элементы.СоставУтвержден.Видимость = Истина;
	//	Элементы.СоставОстаток.Видимость = Истина;
	//	Элементы.СоставКоличество.Видимость = Истина;
	//КонецЕсли;
	Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Если Объект.Поставщик <> Справочники.СтруктурныеЕдиницы.Центр Тогда
			Элементы.СкладПроизводства.Видимость = Истина;
			ПодборНоменклатуры.ПроизвольныйЗапрос = Истина;
			ПодборНоменклатуры.ТекстЗапроса = "ВЫБРАТЬ
			                                  |	СписокНоменклатуры.Код,
			                                  |	СписокНоменклатуры.Наименование,
			                                  |	СписокНоменклатуры.Группа,
			                                  |	ВЫБОР
			                                  |		КОГДА СписокНоменклатуры.ПометкаУдаления
			                                  |			ТОГДА ВЫБОР
			                                  |					КОГДА СписокНоменклатуры.Группа = 0
			                                  |						ТОГДА 2
			                                  |					ИНАЧЕ 3
			                                  |				КОНЕЦ
			                                  |		ИНАЧЕ ВЫБОР
			                                  |				КОГДА СписокНоменклатуры.Группа = 0
			                                  |					ТОГДА 0
			                                  |				ИНАЧЕ 1
			                                  |			КОНЕЦ
			                                  |	КОНЕЦ КАК Картинка,
			                                  |	СписокНоменклатуры.Ссылка КАК Номенклатура
			                                  |ИЗ
			                                  |	Справочник.Номенклатура КАК СписокНоменклатуры
			                                  |ГДЕ
			                                  |	ВЫБОР
			                                  |			КОГДА СписокНоменклатуры.Группа = 0
			                                  |				ТОГДА
											  //|					СписокНоменклатуры.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция) И
			                                  |						ВЫБОР
			                                  |							КОГДА &СписокТоваров = ЗНАЧЕНИЕ(Справочник.СпискиНоменклатуры.ПустаяСсылка)
			                                  |								ТОГДА ИСТИНА
			                                  |							ИНАЧЕ СписокНоменклатуры.Ссылка В
			                                  |									(ВЫБРАТЬ
			                                  |										СпискиНоменклатурыСостав.Номенклатура
			                                  |									ИЗ
			                                  |										Справочник.СпискиНоменклатуры.Состав КАК СпискиНоменклатурыСостав
			                                  |									ГДЕ
			                                  |										СпискиНоменклатурыСостав.Ссылка = &СписокТоваров)
			                                  |						КОНЕЦ
			                                  |			ИНАЧЕ ИСТИНА
			                                  |		КОНЕЦ";
			
			ПодборНоменклатуры.Параметры.УстановитьЗначениеПараметра("СписокТоваров", СписокНомеклатуры);
		КонецЕсли;
	КонецЕсли;	
	Если Объект.Завершен ИЛИ Объект.Централизованный Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	//Если Параметры.Свойство("ЗначениеКопирования") Тогда
	//	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
	//		РасписаниеНаФорме = Параметры.ЗначениеКопирования.Расписание.Получить();
	//	КонецЕсли;
	//КонецЕсли;
	//popn+
	Если Объект.Ссылка.Пустая() Тогда
		СформироватьТаблицуСкладовПоУмолчанию();
	Иначе
		СформироватьТаблицуСкладов();
	КонецЕсли;
	//popn-
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	загрузитьНастройкиПодбора();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	СохранитьПараметрыПодбора();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПриИзменении(Элемент)
	Установитьпараметры();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзмененоРасписаниеАвтоЗаказа" И Источник = Объект.Ссылка Тогда
		Объект.ПредставлениеРасписания = Строка(Параметр);
		РасписаниеНаФорме = Параметр;
		ЭтаФорма.Модифицированность = Истина;
		ЭтаФорма.ОбновитьОтображениеДанных();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписания(Команда)
	Если РасписаниеНаФорме = Неопределено Тогда
		Расписание = ПолучитьРасписание();
		Если Расписание = Неопределено Тогда
			Расписание = Новый РасписаниеРегламентногоЗадания;
		КонецЕсли;	
	Иначе
		Расписание = РасписаниеНаФорме;
	КонецЕсли;	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Если Диалог.ОткрытьМодально() Тогда
		Оповестить("ИзмененоРасписаниеАвтоЗаказа",Диалог.Расписание,Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРасписание()
	УстановитьПривилегированныйРежим(ИСТИНА);
	Значение = ДанныеФормыВЗначение(Объект,Тип("БизнесПроцессОбъект.АвтоЗаказ"));
	Если ПустаяСтрока(Значение.РегламентноеЗадание) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(Значение.РегламентноеЗадание);
	ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
	Если ТекущееРегламентноеЗадание = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	Расписание = ТекущееРегламентноеЗадание.Расписание;
	Возврат Расписание;
КонецФункции


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если РасписаниеНаФорме <> Неопределено Тогда
		ТекущийОбъект.ПредставлениеРасписания = Строка(РасписаниеНаФорме);
		Если ПустаяСтрока(ТекущийОбъект.РегламентноеЗадание) Тогда
			УстановитьПривилегированныйРежим(ИСТИНА);
			ТекущееРегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание("АвтоЗаказ");
			ТекущееРегламентноеЗадание.Использование = Истина;
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ТекущийОбъект.Ссылка);
			ТекущееРегламентноеЗадание.Параметры = МассивПараметров;
			ТекущееРегламентноеЗадание.Наименование = "Авто заказ "+ТекущийОбъект.Поставщик;
			ТекущееРегламентноеЗадание.Записать();
			ТекущийОбъект.РегламентноеЗадание = Строка(ТекущееРегламентноеЗадание.УникальныйИдентификатор);
			ТекущийОбъект.Записать();
		КонецЕсли;
		РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(ТекущийОбъект.РегламентноеЗадание, РасписаниеНаФорме);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура СписокНомеклатурыПриИзменении(Элемент)
	УстановитьПараметры();
КонецПроцедуры

//popn+
&НаСервере
Процедура СформироватьТаблицуСкладовПоУмолчанию() 	
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Склады.Ссылка.Наименование КАК НаименованиеСклада,
	|	Склады.Владелец КАК СтруктурнаяЕдиница,
	|   Склады.ВидСклада КАК ВидСклада,
	|	Склады.Ссылка КАК Склад,
	|	ВЫБОР
	|		КОГДА Склады.Ссылка = СкладыАвтозаказа.Склад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Флаг
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкладыАвтозаказа КАК СкладыАвтозаказа
	|		ПО (СкладыАвтозаказа.Склад = Склады.Ссылка)
	|       И (СкладыАвтозаказа.СтруктурнаяЕдиница = Склады.Владелец)
	|	ГДЕ Склады.Владелец = &Владелец
	|УПОРЯДОЧИТЬ ПО
	|   НаименованиеСклада";
	
	Запрос.УстановитьПараметр("Владелец", Объект.СтруктурнаяЕдиница);
	Запрос.Текст = ТекстЗапроса;		
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрокаСклад = ТаблицаСкладов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСклад, ВыборкаДетальныеЗаписи);
		НоваяСтрокаСклад.Представление = Строка(ВыборкаДетальныеЗаписи.Склад)+" ("+Строка(ВыборкаДетальныеЗаписи.ВидСклада)+")";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуСкладов() 	
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	врСклады.*
	|ПОМЕСТИТЬ врСклады
	|ИЗ
	|	&врСклады КАК врСклады
    |;
	|ВЫБРАТЬ
	|	Склады.Ссылка.Наименование КАК НаименованиеСклада,
	|	Склады.Владелец КАК СтруктурнаяЕдиница,
	|   Склады.ВидСклада КАК ВидСклада,
	|	Склады.Ссылка КАК Склад,
	|	ВЫБОР
	|		КОГДА Склады.Ссылка = СкладыБП.Склад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Флаг
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСклады КАК СкладыБП
	|		ПО (СкладыБП.Склад = Склады.Ссылка)
	|	ГДЕ Склады.Владелец = &Владелец
	|УПОРЯДОЧИТЬ ПО
	|   НаименованиеСклада";
	
	Запрос.УстановитьПараметр("Владелец", Объект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("врСклады", Объект.Склады.Выгрузить());
	
	Запрос.Текст = ТекстЗапроса;		
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрокаСклад = ТаблицаСкладов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСклад, ВыборкаДетальныеЗаписи);
		НоваяСтрокаСклад.Представление = Строка(ВыборкаДетальныеЗаписи.Склад)+" ("+Строка(ВыборкаДетальныеЗаписи.ВидСклада)+")";
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого Строка Из ТаблицаСкладов Цикл
		Строка.Флаг = ЛОЖЬ;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого Строка Из ТаблицаСкладов Цикл
		Строка.Флаг = ИСТИНА;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Склады.Очистить();
	Для Каждого Строка Из ТаблицаСкладов Цикл
		Если НЕ Строка.Флаг Тогда
			Продолжить;
		КонецЕсли;	
		НоваяСтрока = ТекущийОбъект.Склады.Добавить();
		НоваяСтрока.Склад = Строка.Склад;
	КонецЦикла; 
	
КонецПроцедуры
//popn-

