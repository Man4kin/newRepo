Перем СпрПараметрыБП;

Процедура ПередЗаписью(Отказ)
	Если Дата = '00010101' Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
КонецПроцедуры

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	//dps+ 15/05/18 наряд 149977
	Если Izh_ВариантРасчета = 1 И ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда 
		Отказ = Истина;
		ВызватьИсключение("Запрещено использование Бизнес-процеса по данным BI в магазине!");
	КонецЕсли;
	//dps- 15/05/18 наряд 149977
	
	Если не спрПараметрыБП.Использование Тогда
		Отказ = Истина;
		ВызватьИсключение("Запрещено использование Бизнес-процеса!");
	КонецЕсли;
	
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") И Поставщик.Статус = Ложь Тогда
		Отказ = Истина;
		//{БредовЮГ 2015-08-05 Пользователю сообщалось, что не может стартануть ,а по какой причине не указано
		ВызватьИсключение("У поставщика "+Поставщик+" статус протокола 'Неактивен' , обратитесь к категорийному менеджеру");
		//БредовЮГ  2015-08-05 Пользователю сообщалось, что не может стартануть ,а по какой причине не указано } 
	КонецЕсли;	
КонецПроцедуры

Процедура РасчетПотребностиОбработка(ТочкаМаршрутаБизнесПроцесса) Экспорт
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	//popn+
	НуженОтборПоСпискуСкладов = Склады.Количество() > 0;
	//popn-
	
	УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(РегламентноеЗадание);
	ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
	ТекДата = КонецДня(ТекущаяДата());
	ПериодЗаказа = 0;
	Пока 1 = 1 Цикл
		ТекДата = ТекДата + 86400;
		ПериодЗаказа = ПериодЗаказа + 1;
		Результат = ТекущееРегламентноеЗадание.Расписание.ТребуетсяВыполнение(ТекДата,ТекущаяДата());
		//	Результат = ТекущееРегламентноеЗадание.Расписание.ТребуетсяВыполнение(ТекДата,НачалоДня(ТекущаяДата()));
		Если Результат Тогда
			Прервать;
		КонецЕсли;	
		Если ПериодЗаказа = 365 Тогда
			ПериодЗаказа = 0;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	ДатаНачалаПродаж = НачалоДня(ТекущаяДата()+СрокПоставки*3600*24);
	ДатаКонцаПродаж = НачалоДня(ДатаНачалаПродаж+ПериодЗаказа*3600*24);
	
	//++БИТ БВО теперь период расчета указывается конкретными датами
	//ДатаКонца = КонецДня(ТекущаяДата()-3600*24);
	//ДатаНачала = НачалоДня(ДатаКонца-ПериодРасчета*3600*24);
	ДатаРасчетаОснование	= ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	НачалоПериодаРасчета	= НачалоДня(ТекущаяДата()) - 14 * 3600 * 24;
	КонецПериодаРасчета		= КонецДня(ТекущаяДата());
	ДатаНачала				= НачалоПериодаРасчета;
	ДатаКонца				= КонецПериодаРасчета;
	//--БИТ БВО
	
	ДатаПоставкиОт = НачалоДня(ТекущаяДата())+СрокПоставки*3600*24;
	ДатаПоставкиДо = НачалоДня(ТекущаяДата())+СрокПоставки*3600*24;
			
	ДниНедели = Новый СписокЗначений;
	Если ПериодЗаказа < 7 Тогда
		ПромДатаНачала = ДатаНачалаПродаж;
		Пока ПромДатаНачала < ДатаКонцаПродаж Цикл
			ДниНедели.Добавить(ДеньНедели(ПромДатаНачала));
			ПромДатаНачала = ПромДатаНачала + 86400;
		КонецЦикла;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
		//++БИТ БВО - Задача "Основной поставщик для структурной единицы"		
		//Запрос.Текст = "ВЫБРАТЬ
		//|	ВложенныйЗапрос.Номенклатура
		//|ПОМЕСТИТЬ Состав
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		НоменклатураКонтрагента.Номенклатура КАК Номенклатура
		//|	ИЗ
		//|		РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
		//|	ГДЕ
		//|       НоменклатураКонтрагента.Контрагент = &Контрагент
		////{БредовЮГ 2015-03-20 Наряд 000145565 от 20.03.2015 13:04:45
		//|		"+?(ПоПротоколу,"И НоменклатураКонтрагента.ОсновнойПоставщик ","И  НоменклатураКонтрагента.Номенклатура В ИЕРАРХИИ(&СоставНоменклатуры)")+"
		////БредовЮГ 2015-03-20 Наряд 000145565 от 20.03.2015 13:04:45}
		//|		И НоменклатураКонтрагента.Номенклатура.Транзакционный
		////{БредовЮГ 2014-02-12 Заполнение по активным позициям протокола
		//|		И (НоменклатураКонтрагента.ДатаПрекращенияПоставок > &ТекущаяДата ИЛИ НоменклатураКонтрагента.ДатаПрекращенияПоставок = ДАТАВРЕМЯ(01,01,01,00,00,00))
		////БредовЮГ 2014-02-12 Заполнение по активным позициям протокола}
		//|		И НоменклатураКонтрагента.Номенклатура.Заказываемый) КАК ВложенныйЗапрос
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
		//|		ПО ВложенныйЗапрос.Номенклатура = СтатусыНоменклатуры.Номенклатура
		//|			И (СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
		//|ГДЕ
		//|	СтатусыНоменклатуры.Статус = ЗНАЧЕНИЕ(перечисление.статусытоваров.активный)		
		//|СГРУППИРОВАТЬ ПО
		//|	ВложенныйЗапрос.Номенклатура";		
		Запрос.Текст = "ВЫБРАТЬ
		|	НоменклатураКонтрагента.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТНоменклатураОсновногоПоставщика
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
		|		ПО НоменклатураКонтрагента.Номенклатура = СтатусыНоменклатуры.Номенклатура
		|			И (НоменклатураКонтрагента.Контрагент = СтатусыНоменклатуры.ОсновнойПоставщик)
		|			И (СтатусыНоменклатуры.ОсновнойПоставщик = &Контрагент)
		|			И (НоменклатураКонтрагента.Номенклатура.Транзакционный)
		|			И (СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
		|			И (СтатусыНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТоваров.Активный))
		|			И (НоменклатураКонтрагента.ДатаПрекращенияПоставок > &ТекущаяДата
		|				ИЛИ НоменклатураКонтрагента.ДатаПрекращенияПоставок = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураКонтрагента.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураКонтрагента.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТНоменклатураПоставщиков
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
		|		ПО НоменклатураКонтрагента.Номенклатура = СтатусыНоменклатуры.Номенклатура
		|			И НоменклатураКонтрагента.Контрагент = СтатусыНоменклатуры.ОсновнойПоставщик
		|			И (СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
		|			И (СтатусыНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТоваров.Активный))
		|			
		|ГДЕ
		|	НоменклатураКонтрагента.Контрагент = &Контрагент
		|	И НоменклатураКонтрагента.Номенклатура В ИЕРАРХИИ (&СоставНоменклатуры)
		|	И (НоменклатураКонтрагента.ДатаПрекращенияПоставок > &ТекущаяДата
		|				ИЛИ НоменклатураКонтрагента.ДатаПрекращенияПоставок = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураКонтрагента.Номенклатура
		|;
		|		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНоменклатура.Номенклатура
		|ПОМЕСТИТЬ Состав
		|ИЗ		
		|	" + ?(ПоПротоколу,"ВТНоменклатураОсновногоПоставщика", "ВТНоменклатураПоставщиков") + " КАК ВТНоменклатура";	
		СоставНоменклатуры = ФильтрНоменклатуры.Выгрузить().ВыгрузитьКолонку("Номенклатура");
		Запрос.УстановитьПараметр("СоставНоменклатуры", СоставНоменклатуры);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		//--БИТ БВО - Задача "Основной поставщик для структурной единицы"
		Запрос.УстановитьПараметр("Контрагент",Поставщик);
		//{БредовЮГ 2014-02-12 Заполнение по активным позициям протокола
		Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
		//БредовЮГ 2014-02-12 Заполнение по активным позициям протокола}
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура
		|ПОМЕСТИТЬ Состав
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК Номенклатура
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура
		|	ГДЕ
		|		Номенклатура.Транзакционный
		|		И Номенклатура.Группа = 0
		|		И Номенклатура.Заказываемый
		|		И Номенклатура.Ссылка В ИЕРАРХИИ(&СоставНоменклатуры)) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
		|		ПО ВложенныйЗапрос.Номенклатура = СтатусыНоменклатуры.Номенклатура
		|			И (СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
		|ГДЕ
		|	СтатусыНоменклатуры.Статус = ЗНАЧЕНИЕ(перечисление.статусытоваров.активный)
		//++БИТ БВО - получалось по несколько одинаковых позиций
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура";
		//--БИТ БВО
	КонецЕсли;	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	СоставНоменклатуры = ФильтрНоменклатуры.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	Запрос.УстановитьПараметр("СоставНоменклатуры",СоставНоменклатуры);
	Запрос.Выполнить();
	
	//++БИТ БВО
	Запрос.Текст = "ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	СУММА(ОстаткиНоменклатурыОстаткиИОбороты.КоличествоНачальныйОстаток) КАК НачальныйОстаток,
	|	СУММА(ОстаткиНоменклатурыОстаткиИОбороты.КоличествоПриход) КАК Приход,
	|	СУММА(ОстаткиНоменклатурыОстаткиИОбороты.КоличествоРасход) КАК Расход,
	|	СУММА(ОстаткиНоменклатурыОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КонечныйОстаток,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Возврат, 0)) КАК Возврат,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Закуп, 0)) КАК Закуп,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Продажи, 0)) КАК Продажи,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Списание, 0)) КАК Списание
	|ПОМЕСТИТЬ ВТДвиженияНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.ОстаткиИОбороты(
	|			НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ),
	|			КОНЕЦПЕРИОДА(&ДатаКонца, ДЕНЬ),
	|			,
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					Состав.Номенклатура
	|				ИЗ
	|					Состав КАК Состав)) КАК ОстаткиНоменклатурыОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПеремещениеРасход), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ВозвратПоставщику), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПерепродажаВозвратПоставщику), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПерепродажаПродажаОпт), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПерепродажаВозвратРеализация))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Возврат,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПерепродажаПоступлениеТоваров), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПередачаНаРеализацию), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ОприходованиеИзлишков), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПоступлениеТоваров), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ВозвратОтПокупателя), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.КорректировкаПоступления), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.КорректировкаПоступления), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ВводОстатков))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Закуп,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПродажаРозница), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПродажаОпт), ЗНАЧЕНИЕ(Перечисление.КодыОпераций.КорректировкаРеализации))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Продажи,
	|			СУММА(ВЫБОР
	|					КОГДА ОстаткиНоменклатуры.КодОперации В (ЗНАЧЕНИЕ(Перечисление.КодыОпераций.Списание))
	|						ТОГДА ОстаткиНоменклатуры.Количество
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Списание,
	|			СУММА(ОстаткиНоменклатуры.Количество) КАК Количество
	|		ИЗ
	|			РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ГДЕ
	|			ОстаткиНоменклатуры.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаКонца, ДЕНЬ)
	|			И НЕ ОстаткиНоменклатуры.Регистратор ССЫЛКА Документ.Перемещение
	|			И НЕ ОстаткиНоменклатуры.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуФирмами
	|			И ОстаткиНоменклатуры.Номенклатура В
	|					(ВЫБРАТЬ
	|						Состав.Номенклатура
	|					ИЗ
	|						Состав КАК Состав)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОстаткиНоменклатуры.Номенклатура) КАК ВложенныйЗапрос
	|		ПО ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура = ВложенныйЗапрос.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура";
	Запрос.УстановитьПараметр("ДатаНачала"	, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца"	, ДатаКонца);	
	Запрос.Выполнить();
	//--БИТ БВО
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СпрНоменклатура.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов1.СтраховойЗапас, 0) > 0
	|			ТОГДА ПараметрыЗаказов1.СтраховойЗапас
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов2.СтраховойЗапас, 0) > 0
	|			ТОГДА ПараметрыЗаказов2.СтраховойЗапас
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов3.СтраховойЗапас, 0) > 0
	|			ТОГДА ПараметрыЗаказов3.СтраховойЗапас
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов4.СтраховойЗапас, 0) > 0
	|			ТОГДА ПараметрыЗаказов4.СтраховойЗапас
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов5.СтраховойЗапас, 0) > 0
	|			ТОГДА ПараметрыЗаказов5.СтраховойЗапас
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов6.СтраховойЗапас, 0) > 0
	|			ТОГДА ПараметрыЗаказов6.СтраховойЗапас
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов7.СтраховойЗапас, 0) > 0
	|			ТОГДА ПараметрыЗаказов7.СтраховойЗапас
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов8.СтраховойЗапас, 0) > 0
	|			ТОГДА ПараметрыЗаказов8.СтраховойЗапас
	|	КОНЕЦ КАК СтраховойЗапас,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов1.МаксимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов1.МаксимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов2.МаксимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов2.МаксимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов3.МаксимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов3.МаксимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов4.МаксимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов4.МаксимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов5.МаксимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов5.МаксимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов6.МаксимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов6.МаксимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов7.МаксимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов7.МаксимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов8.МаксимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов8.МаксимальноеОтклонение
	|	КОНЕЦ КАК МаксимальноеОтклонение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов1.МинимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов1.МинимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов2.МинимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов2.МинимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов3.МинимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов3.МинимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов4.МинимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов4.МинимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов5.МинимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов5.МинимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов6.МинимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов6.МинимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов7.МинимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов7.МинимальноеОтклонение
	|		КОГДА ЕСТЬNULL(ПараметрыЗаказов8.МинимальноеОтклонение, 0) > 0
	|			ТОГДА ПараметрыЗаказов8.МинимальноеОтклонение
	|	КОНЕЦ КАК МинимальноеОтклонение
	|ПОМЕСТИТЬ ПараметрыЗаказов
	|ИЗ
	|	Состав КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗаказов КАК ПараметрыЗаказов1
	|		ПО (ПараметрыЗаказов1.Номенклатура = СпрНоменклатура.Номенклатура.Ссылка)
	|			И (ПараметрыЗаказов1.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗаказов КАК ПараметрыЗаказов2
	|		ПО (ПараметрыЗаказов2.Номенклатура = СпрНоменклатура.Номенклатура.Родитель)
	|			И (ПараметрыЗаказов2.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗаказов КАК ПараметрыЗаказов3
	|		ПО (ПараметрыЗаказов3.Номенклатура = СпрНоменклатура.Номенклатура.Родитель.Родитель)
	|			И (ПараметрыЗаказов3.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗаказов КАК ПараметрыЗаказов4
	|		ПО (ПараметрыЗаказов4.Номенклатура = СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель)
	|			И (ПараметрыЗаказов4.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗаказов КАК ПараметрыЗаказов5
	|		ПО (ПараметрыЗаказов5.Номенклатура = СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель)
	|			И (ПараметрыЗаказов5.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗаказов КАК ПараметрыЗаказов6
	|		ПО (ПараметрыЗаказов6.Номенклатура = СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель)
	|			И (ПараметрыЗаказов6.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗаказов КАК ПараметрыЗаказов7
	|		ПО (ПараметрыЗаказов7.Номенклатура = СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель)
	|			И (ПараметрыЗаказов7.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗаказов КАК ПараметрыЗаказов8
	|		ПО (ПараметрыЗаказов8.Номенклатура = СпрНоменклатура.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель)
	|			И (ПараметрыЗаказов8.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.Выполнить();
	
	//{{ШиловМВ 14.10.14 №000130240
	Запрос.Текст = "ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстаткиИОбороты.Период КАК Период,
	|	ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ОстаткиНоменклатурыОстаткиИОбороты.КоличествоНачальныйОстаток, 0) КАК КоличествоНачальныйОстаток,
	|	ЕСТЬNULL(ОстаткиНоменклатурыПриход.Количество, 0) КАК КоличествоПриход,
	|	ЕСТЬNULL(ОстаткиНоменклатурыРасход.Количество, 0) КАК КоличествоРасход,
	|	ЕСТЬNULL(ПараметрыЗаказов.МаксимальноеОтклонение, 0) КАК МаксимальноеОтклонение,
	|	ЕСТЬNULL(ПараметрыЗаказов.МинимальноеОтклонение, 0) КАК МинимальноеОтклонение
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.ОстаткиИОбороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			День,
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						Состав.Номенклатура
	|					ИЗ
	|						Состав КАК Состав)"+
	?(НуженОтборПоСпискуСкладов," И МестоХранения В (&СписокСкладов)","")+
	") КАК ОстаткиНоменклатурыОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыЗаказов КАК ПараметрыЗаказов
	|		ПО ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура = ПараметрыЗаказов.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
	|			ОстаткиНоменклатуры.МестоХранения КАК МестоХранения,
	|			ОстаткиНоменклатуры.Фирма КАК Фирма,
	|			ОстаткиНоменклатуры.Комитент КАК Комитент,
	|			ОстаткиНоменклатуры.Статус КАК Статус,
	|			НАЧАЛОПЕРИОДА(ОстаткиНоменклатуры.Период, ДЕНЬ) КАК Период,
	|			СУММА(ОстаткиНоменклатуры.Количество) КАК Количество
	|		ИЗ
	|			РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	//{БредовЮГ 2014-12-07 Наряд№000136210
	|		ГДЕ 
	|		    НЕ ОстаткиНоменклатуры.Регистратор Ссылка Документ.Перемещение
	//{БредовЮГ 2014-02-05 Наряд№000144192
	|			И НЕ ОстаткиНоменклатуры.Регистратор Ссылка Документ.ПередачаТоваровМеждуФирмами
	//БредовЮГ 2014-02-05 Наряд№000144192}
	//БредовЮГ 2014-12-07 Наряд№000136210}
	//dps+   2015-03-05
	|			И ОстаткиНоменклатуры.КодОперации В (&КодОперацииРасход)
	//dps-
	|		СГРУППИРОВАТЬ ПО
	|			ОстаткиНоменклатуры.Номенклатура,
	|			ОстаткиНоменклатуры.МестоХранения,
	|			ОстаткиНоменклатуры.Фирма,
	|			ОстаткиНоменклатуры.Комитент,
	|			ОстаткиНоменклатуры.Статус,
	|			НАЧАЛОПЕРИОДА(ОстаткиНоменклатуры.Период, ДЕНЬ)) КАК ОстаткиНоменклатурыРасход
	|		ПО ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура = ОстаткиНоменклатурыРасход.Номенклатура
	|			И ОстаткиНоменклатурыОстаткиИОбороты.МестоХранения = ОстаткиНоменклатурыРасход.МестоХранения
	|			И ОстаткиНоменклатурыОстаткиИОбороты.Фирма = ОстаткиНоменклатурыРасход.Фирма
	|			И ОстаткиНоменклатурыОстаткиИОбороты.Комитент = ОстаткиНоменклатурыРасход.Комитент
	|			И ОстаткиНоменклатурыОстаткиИОбороты.Статус = ОстаткиНоменклатурыРасход.Статус
	|			И (НАЧАЛОПЕРИОДА(ОстаткиНоменклатурыРасход.Период, ДЕНЬ) = ОстаткиНоменклатурыОстаткиИОбороты.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
	|			ОстаткиНоменклатуры.МестоХранения КАК МестоХранения,
	|			ОстаткиНоменклатуры.Фирма КАК Фирма,
	|			ОстаткиНоменклатуры.Комитент КАК Комитент,
	|			ОстаткиНоменклатуры.Статус КАК Статус,
	|			НАЧАЛОПЕРИОДА(ОстаткиНоменклатуры.Период, ДЕНЬ) КАК Период,
	|			СУММА(ОстаткиНоменклатуры.Количество) КАК Количество
	|		ИЗ
	|			РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	//{БредовЮГ 2014-12-07 Наряд№000136210
	|		ГДЕ 
	|		    НЕ ОстаткиНоменклатуры.Регистратор Ссылка Документ.Перемещение
	//{БредовЮГ 2014-02-05 Наряд№000144192
	|			И НЕ ОстаткиНоменклатуры.Регистратор Ссылка Документ.ПередачаТоваровМеждуФирмами
	//БредовЮГ 2014-02-05 Наряд№000144192}
	//БредовЮГ 2014-12-07 Наряд№000136210}
	//dps+ 2015-03-05
	|			И ОстаткиНоменклатуры.КодОперации В (&КодОперацииПриход)
	//dps- 2015-03-05
	|		СГРУППИРОВАТЬ ПО
	|			ОстаткиНоменклатуры.Номенклатура,
	|			ОстаткиНоменклатуры.МестоХранения,
	|			ОстаткиНоменклатуры.Фирма,
	|			ОстаткиНоменклатуры.Комитент,
	|			ОстаткиНоменклатуры.Статус,
	|			НАЧАЛОПЕРИОДА(ОстаткиНоменклатуры.Период, ДЕНЬ)) КАК ОстаткиНоменклатурыПриход
	|		ПО ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура = ОстаткиНоменклатурыПриход.Номенклатура
	|			И ОстаткиНоменклатурыОстаткиИОбороты.МестоХранения = ОстаткиНоменклатурыПриход.МестоХранения
	|			И ОстаткиНоменклатурыОстаткиИОбороты.Фирма = ОстаткиНоменклатурыПриход.Фирма
	|			И ОстаткиНоменклатурыОстаткиИОбороты.Комитент = ОстаткиНоменклатурыПриход.Комитент
	|			И ОстаткиНоменклатурыОстаткиИОбороты.Статус = ОстаткиНоменклатурыПриход.Статус
	|			И (НАЧАЛОПЕРИОДА(ОстаткиНоменклатурыПриход.Период, ДЕНЬ) = ОстаткиНоменклатурыОстаткиИОбороты.Период)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ОстаткиНоменклатурыОстаткиИОбороты.Период
	|ИТОГИ
	|	СУММА(КоличествоНачальныйОстаток),
	|	СУММА(КоличествоПриход),
	|	СУММА(КоличествоРасход),
	|	МАКСИМУМ(МаксимальноеОтклонение),
	|	МАКСИМУМ(МинимальноеОтклонение)
	|ПО
	|	Номенклатура,
	|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаКонца)" ;
	Запрос.УстановитьПараметр("ДатаНачала"			, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца"			, ДатаКонца);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, СтруктурнаяЕдиница);
	
	//popn+
	СписокКодовРасход = ПолучитьСписокКодовОпераций(СтруктурнаяЕдиница, Перечисления.ВидыДвижений.Расход);
	Если СписокКодовРасход.Количество() = 0 Тогда
		СписокКодовРасход = Новый Массив;
		СписокКодовРасход.Добавить(Перечисления.КодыОпераций.ПродажаРозница);
		СписокКодовРасход.Добавить(Перечисления.КодыОпераций.ПродажаОпт);
		СписокКодовРасход.Добавить(Перечисления.КодыОпераций.ПередачаВПроизводство);
	КонецЕсли;
	Запрос.УстановитьПараметр("КодОперацииРасход", СписокКодовРасход);
	
	СписокКодовПриход = ПолучитьСписокКодовОпераций(СтруктурнаяЕдиница, Перечисления.ВидыДвижений.Приход);
	Если СписокКодовПриход.Количество() = 0 Тогда
		СписокКодовПриход = Новый Массив;
		СписокКодовПриход.Добавить(Перечисления.КодыОпераций.ПоступлениеТоваров);
	КонецЕсли;
	Запрос.УстановитьПараметр("КодОперацииПриход", СписокКодовПриход);
	
	Если НуженОтборПоСпискуСкладов Тогда
		СписокСкладов = Склады.ВыгрузитьКолонку("Склад");
		Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	КонецЕсли;
	//popn-
	//ШиловМВ 14.10.14 №000130240}}
	
	ТаблицаПродаж = Новый ТаблицаЗначений;
	ТаблицаПродаж.Колонки.Добавить("Номенклатура");
	ТаблицаПродаж.Колонки.Добавить("СредниеПродажи",Новый ОписаниеТипов("Число"));
	ТаблицаПродаж.Колонки.Добавить("МаксимальноеОтклонение",Новый ОписаниеТипов("Число"));
	ТаблицаПродаж.Колонки.Добавить("МинимальноеОтклонение",Новый ОписаниеТипов("Число"));
	
	Результат = Запрос.Выполнить();
	ВыборкаНоменклатуры = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		Строка = ТаблицаПродаж.Добавить();
		Строка.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
		МаксимальноеОтклонение = ВыборкаНоменклатуры.МаксимальноеОтклонение;
		МинимальноеОтклонение = ВыборкаНоменклатуры.МинимальноеОтклонение;
		Строка.МаксимальноеОтклонение = МаксимальноеОтклонение;
		Строка.МинимальноеОтклонение = МинимальноеОтклонение;
		Количество = 0;
		Продажи = 0;
		ВыборкаПериода = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период","Все");
		Пока ВыборкаПериода.Следующий() Цикл
			Если ПериодЗаказа < 7 Тогда
				Если ДниНедели.НайтиПоЗначению(ДеньНедели(ВыборкаПериода.Период)) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			Приход = ВыборкаПериода.КоличествоПриход;
			Расход = ВыборкаПериода.КоличествоРасход;
			НачальныйОстаток = ВыборкаПериода.КоличествоНачальныйОстаток;
			СтрокаДвижений = ДвиженияТоваров.Добавить();
			СтрокаДвижений.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
			СтрокаДвижений.Дата = ВыборкаПериода.Период;
			СтрокаДвижений.Остаток = НачальныйОстаток;
			СтрокаДвижений.Приход = Приход;
			СтрокаДвижений.Расход = Расход;
			
			Если Приход = NULL Тогда
				Приход = 0;
			КонецЕсли; 
			Если Расход = NULL Тогда
				Расход = 0;
			КонецЕсли; 
			Если НачальныйОстаток = NULL Тогда
				НачальныйОстаток = 0;
			КонецЕсли; 
			Если НачальныйОстаток < 0 Тогда
				НачальныйОстаток = 0;
			КонецЕсли; 
			Продажи = Продажи + Расход;
			Если НачальныйОстаток = 0 И Приход = 0 И Расход = 0 Тогда
				Продолжить;
			КонецЕсли;	
			Количество = Количество + 1;
		КонецЦикла;	
		Если Количество <> 0 Тогда
			Строка.СредниеПродажи = Продажи/Количество;
		КонецЕсли;	
		Количество = 0;
		Продажи = 0;
		ВыборкаПериода = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период","Все");
		Пока ВыборкаПериода.Следующий() Цикл
			Если ПериодЗаказа < 7 Тогда
				Если ДниНедели.НайтиПоЗначению(ДеньНедели(ВыборкаПериода.Период)) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			Приход = ВыборкаПериода.КоличествоПриход;
			Расход = ВыборкаПериода.КоличествоРасход;
			НачальныйОстаток = ВыборкаПериода.КоличествоНачальныйОстаток;
			Если Приход = NULL Тогда
				Приход = 0;
			КонецЕсли; 
			Если Расход = NULL Тогда
				Расход = 0;
			КонецЕсли; 
			Если НачальныйОстаток = NULL Тогда
				НачальныйОстаток = 0;
			КонецЕсли;
			Если НачальныйОстаток < 0 Тогда
				НачальныйОстаток = 0;
			КонецЕсли; 
			Если МаксимальноеОтклонение = NULL Тогда
				МаксимальноеОтклонение = 0;
			КонецЕсли;
			Если МинимальноеОтклонение = NULL Тогда
				МинимальноеОтклонение = 0;
			КонецЕсли;
			Если Строка.СредниеПродажи*(100 + МаксимальноеОтклонение)/100 < Расход Тогда
				Продолжить;
			КонецЕсли;	
			Если Строка.СредниеПродажи*(100 - МинимальноеОтклонение)/100 > Расход Тогда
				Продолжить;
			КонецЕсли;	
			Продажи = Продажи + Расход;
			Если НачальныйОстаток = 0 И Приход = 0 И Расход = 0 Тогда
				Продолжить;
			КонецЕсли;	
			Количество = Количество + 1;
		КонецЦикла;	
		Если Количество <> 0 Тогда
			Строка.СредниеПродажи = Продажи/Количество;
		КонецЕсли;	
	КонецЦикла;	
	
	//ЗапросПраздников = Новый Запрос;
	//ЗапросПраздников.Текст = 
	//	"ВЫБРАТЬ
	//	|	КОЛИЧЕСТВО(КалендарьПраздников.ДатаКалендаря) КАК Количество
	//	|ИЗ
	//	|	РегистрСведений.КалендарьПраздников КАК КалендарьПраздников
	//	|ГДЕ
	//	|	КалендарьПраздников.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаКонца";
	
	//ЗапросПраздников.УстановитьПараметр("ДатаНачала", ДатаНачала);
	//ЗапросПраздников.УстановитьПараметр("ДатаКонца", ДатаКонца);
	
	//РезультатПоПраздникам = ЗапросПраздников.Выполнить();
	//Если РезультатПоПраздникам.Пустой() Тогда
	//	КоличествоПраздниковВПрошлыйПериод = 0;
	//Иначе
	//	ВыборкаДетальныеЗаписи = РезультатПоПраздникам.Выбрать();
	//	ВыборкаДетальныеЗаписи.Следующий();
	//	КоличествоПраздниковВПрошлыйПериод = ВыборкаДетальныеЗаписи.Количество;
	//КонецЕсли;	
	
	//
	//ЗапросПраздников.УстановитьПараметр("ДатаНачала", ДатаНачалаПродаж);
	//ЗапросПраздников.УстановитьПараметр("ДатаКонца", ДатаКонцаПродаж);
	
	//РезультатПоПраздникам = ЗапросПраздников.Выполнить();
	//Если РезультатПоПраздникам.Пустой() Тогда
	//	КоличествоПраздниковВБудущийПериод = 0;
	//Иначе
	//	ВыборкаДетальныеЗаписи = РезультатПоПраздникам.Выбрать();
	//	ВыборкаДетальныеЗаписи.Следующий();
	//	КоличествоПраздниковВБудущийПериод = ВыборкаДетальныеЗаписи.Количество;
	//КонецЕсли;	
	
	//Если СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин Тогда 
	//	Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	Состав.Номенклатура,
	//	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
	//	|	ЕдиницыИзмерения.Коэффициент,
	//	|	ЕСТЬNULL(РознЦена.Цена, 0) КАК Цена,
	//	|	ЕСТЬNULL(НоменклатураКонтрагента.МинимальныйЗаказ, 0) КАК МинимальныйЗаказ,
	//	|	ЕСТЬNULL(НоменклатураКонтрагента.МаксимальныйЗаказ, 0) КАК МаксимальныйЗаказ,
	//	|	ЕСТЬNULL(НоменклатураКонтрагента.КоэффициентЯщика, 0) КАК КоэффициентЯщика,
	//	|	ЕСТЬNULL(НоменклатураКонтрагента.КоэффициентПалетыСлой, 0) КАК КоэффициентПалетыСлой,
	//	|	ЕСТЬNULL(НоменклатураКонтрагента.КоэффициентПалетыВысота, 0) КАК КоэффициентПалетыВысота,
	//	|	НоменклатураКонтрагента.ВариантОкругления КАК ВариантОкругления,
	//	|	ЕСТЬNULL(ПараметрыЗаказов.СтраховойЗапас, 0) КАК СтраховойЗапас,
	//	|	НоменклатураКонтрагента.Артикул,
	//	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатурыОстатки.КоличествоОстаток), 0) КАК Остаток,
	//	|	ЕСТЬNULL(СУММА(ЗаказыИсходящиеОстатки.КоличествоОстаток), 0) КАК ВПути
	//	|ИЗ
	//	|	Состав КАК Состав
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	//	|		ПО Состав.Номенклатура.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	//	|			И Состав.Номенклатура = ЕдиницыИзмерения.Владелец
	//	|			И (ЕдиницыИзмерения.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	//	|			И (НЕ ЕдиницыИзмерения.ПометкаУдаления)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	//	|		ПО Состав.Номенклатура = НоменклатураКонтрагента.Номенклатура
	//	|			И (НоменклатураКонтрагента.Контрагент = &Контрагент)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыИсходящие.Остатки(&ДатаОстатков, ) КАК ЗаказыИсходящиеОстатки
	//	|		ПО Состав.Номенклатура = ЗаказыИсходящиеОстатки.Номенклатура
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(&ДатаОстатков, ) КАК ОстаткиНоменклатурыОстатки
	//	|		ПО Состав.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыЗаказов КАК ПараметрыЗаказов
	//	|		ПО Состав.Номенклатура = ПараметрыЗаказов.Номенклатура
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	//	|			ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//	|			ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	//	|		ИЗ
	//	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОстатков, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	//	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|					ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	//	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	//	|					МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.ID) КАК ID
	//	|				ИЗ
	//	|					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОстатков, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	//	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|							ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	//	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	//	|							МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	//	|						ИЗ
	//	|							РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОстатков, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	//	|						ГДЕ
	//	|							ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
	//	|						
	//	|						СГРУППИРОВАТЬ ПО
	//	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	//	|							ЦеныНоменклатурыСрезПоследних.Номенклатура,
	//	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	//	|						ПО ЦеныНоменклатурыСрезПоследних.Период = ВложенныйЗапрос.Период
	//	|							И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	//	|							И ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	//	|							И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	//	|				ГДЕ
	//	|					ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
	//	|				
	//	|				СГРУППИРОВАТЬ ПО
	//	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	//	|					ЦеныНоменклатурыСрезПоследних.Номенклатура,
	//	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	//	|				ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	//	|					И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	//	|					И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	//	|					И ЦеныНоменклатурыСрезПоследних.ID = ВложенныйЗапрос.ID) КАК РознЦена
	//	|		ПО Состав.Номенклатура = РознЦена.Номенклатура
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Состав.Номенклатура,
	//	|	ЕдиницыИзмерения.Ссылка,
	//	|	ЕдиницыИзмерения.Коэффициент,
	//	|	НоменклатураКонтрагента.Цена,
	//	|	НоменклатураКонтрагента.МинимальныйЗаказ,
	//	|	НоменклатураКонтрагента.МаксимальныйЗаказ,
	//	|	НоменклатураКонтрагента.КоэффициентЯщика,
	//	|	НоменклатураКонтрагента.КоэффициентПалетыСлой,
	//	|	НоменклатураКонтрагента.КоэффициентПалетыВысота,
	//	|	НоменклатураКонтрагента.ВариантОкругления,
	//	|	ПараметрыЗаказов.СтраховойЗапас,
	//	|	НоменклатураКонтрагента.Артикул,
	//	|	ЕСТЬNULL(РознЦена.Цена, 0)";
	//	//dps+ розничная цена
	//Иначе 
	Запрос.Текст ="ВЫБРАТЬ
	|	Состав.Номенклатура,
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмерения.Коэффициент,
	|	ЕСТЬNULL(НоменклатураКонтрагента.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(НоменклатураКонтрагента.МинимальныйЗаказ, 0) КАК МинимальныйЗаказ,
	|	ЕСТЬNULL(НоменклатураКонтрагента.МаксимальныйЗаказ, 0) КАК МаксимальныйЗаказ,
	|	ЕСТЬNULL(НоменклатураКонтрагента.КоэффициентЯщика, 0) КАК КоэффициентЯщика,
	|	ЕСТЬNULL(НоменклатураКонтрагента.КоэффициентПалетыСлой, 0) КАК КоэффициентПалетыСлой,
	|	ЕСТЬNULL(НоменклатураКонтрагента.КоэффициентПалетыВысота, 0) КАК КоэффициентПалетыВысота,
	|	НоменклатураКонтрагента.ВариантОкругления КАК ВариантОкругления,
	|	ЕСТЬNULL(ПараметрыЗаказов.СтраховойЗапас, 0) КАК СтраховойЗапас,
	|	НоменклатураКонтрагента.Артикул,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатурыОстатки.КоличествоОстаток), 0) КАК Остаток,
	|	ЕСТЬNULL(СУММА(ЗаказыИсходящиеОстатки.КоличествоОстаток), 0) КАК ВПути,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(АкцЦена.ЦенаПоАкции, 0) = 0
	|			ТОГДА ЕСТЬNULL(РознЦена.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(АкцЦена.ЦенаПоАкции, 0)
	|	КОНЕЦ КАК ЦенаРозн,	
	|	СУММА(ВТДвиженияНоменклатуры.НачальныйОстаток) КАК НачальныйОстаток,
	|	СУММА(ВТДвиженияНоменклатуры.КонечныйОстаток) КАК КонечныйОстаток,
	|	СУММА(ВТДвиженияНоменклатуры.Возврат) КАК Возврат,
	|	СУММА(ВТДвиженияНоменклатуры.Закуп) КАК Закуп,
	|	СУММА(ВТДвиженияНоменклатуры.Продажи) КАК Продажи,
	|	СУММА(ВТДвиженияНоменклатуры.Списание) КАК Списание
	|ИЗ
	|	Состав КАК Состав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияНоменклатуры КАК ВТДвиженияНоменклатуры
	|		ПО Состав.Номенклатура = ВТДвиженияНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО Состав.Номенклатура.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	|			И Состав.Номенклатура = ЕдиницыИзмерения.Владелец
	|			И (ЕдиницыИзмерения.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|			И (НЕ ЕдиницыИзмерения.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|		ПО Состав.Номенклатура = НоменклатураКонтрагента.Номенклатура
	|			И (НоменклатураКонтрагента.Контрагент = &Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыИсходящие.Остатки(&ДатаОстатков, ) КАК ЗаказыИсходящиеОстатки
	|		ПО Состав.Номенклатура = ЗаказыИсходящиеОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(&ДатаОстатков, ) КАК ОстаткиНоменклатурыОстатки
	|		ПО Состав.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыЗаказов КАК ПараметрыЗаказов
	|		ПО Состав.Номенклатура = ПараметрыЗаказов.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОстатков, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|					МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.ID) КАК ID
	|				ИЗ
	|					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОстатков, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|							МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	|						ИЗ
	|							РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОстатков, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|						ГДЕ
	|							ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
	|						
	|						СГРУППИРОВАТЬ ПО
	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|							ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|						ПО ЦеныНоменклатурыСрезПоследних.Период = ВложенныйЗапрос.Период
	|							И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|							И ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|							И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|				ГДЕ
	|					ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|				ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|					И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|					И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|					И ЦеныНоменклатурыСрезПоследних.ID = ВложенныйЗапрос.ID) КАК РознЦена
	|		ПО Состав.Номенклатура = РознЦена.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗАпрос2.Номенклатура КАК Номенклатура,
	|			ВложенныйЗАпрос2.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ВложенныйЗАпрос2.Цена КАК ЦенаПоАкции,
	|			ВложенныйЗАпрос2.ДатаНачала КАК ДатаНачалаАкции,
	|			ВложенныйЗАпрос2.ДатаОкончания КАК ДатаОкончанияАкции,
	|			ВложенныйЗАпрос2.Название КАК НазваниеАкции
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПромоАкцииНоменклатура.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура,
	|				МИНИМУМ(ПромоАкцииНоменклатура.Цена) КАК Цена
	|			ИЗ
	|				РегистрСведений.ПромоАкции КАК ПромоАкции
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|					ПО ПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
	|						И ПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	|						И ПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	|						И ПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	|						И ПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	|						И (НАЧАЛОПЕРИОДА(ПромоАкции.ДатаНачала, ДЕНЬ) <= &ДатаАкции)
	|						И (КОНЕЦПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) >= &ДатаАкции)
	|						И (ПромоАкции.ФлагОкончания = ЛОЖЬ)
	|						И (ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|			ГДЕ
	|				ПромоАкцииНоменклатура.Цена <> 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПромоАкцииНоменклатура.СтруктурнаяЕдиница,
	|				ПромоАкцииНоменклатура.Номенклатура) КАК ВложенныйЗАпрос
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ПромоАкции.ДатаНачала КАК ДатаНачала,
	|					ПромоАкции.ДатаОкончания КАК ДатаОкончания,
	|					ПромоАкции.Название КАК Название,
	|					ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура,
	|					ПромоАкцииНоменклатура.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|					ПромоАкцииНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|					ПромоАкцииНоменклатура.Цена КАК Цена
	|				ИЗ
	|					РегистрСведений.ПромоАкции КАК ПромоАкции
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|						ПО ПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
	|							И ПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	|							И ПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	|							И ПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	|							И ПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	|							И (НАЧАЛОПЕРИОДА(ПромоАкции.ДатаНачала, ДЕНЬ) <= &ДатаАкции)
	|							И (КОНЕЦПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) >= &ДатаАкции)
	|							И (ПромоАкции.ФлагОкончания = ЛОЖЬ)
	|							И (ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|				ГДЕ
	|					ПромоАкцииНоменклатура.Цена <> 0) КАК ВложенныйЗАпрос2
	|				ПО ВложенныйЗАпрос.Номенклатура = ВложенныйЗАпрос2.Номенклатура
	|					И ВложенныйЗАпрос.СтруктурнаяЕдиница = ВложенныйЗАпрос2.СтруктурнаяЕдиница
	|					И ВложенныйЗАпрос.Цена = ВложенныйЗАпрос2.Цена) КАК АкцЦена
	|		ПО Состав.Номенклатура = АкцЦена.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Состав.Номенклатура,
	|	ЕдиницыИзмерения.Ссылка,
	|	ЕдиницыИзмерения.Коэффициент,
	|	НоменклатураКонтрагента.Цена,
	|	НоменклатураКонтрагента.МинимальныйЗаказ,
	|	НоменклатураКонтрагента.МаксимальныйЗаказ,
	|	НоменклатураКонтрагента.КоэффициентЯщика,
	|	НоменклатураКонтрагента.КоэффициентПалетыСлой,
	|	НоменклатураКонтрагента.КоэффициентПалетыВысота,
	|	НоменклатураКонтрагента.ВариантОкругления,
	|	ПараметрыЗаказов.СтраховойЗапас,
	|	НоменклатураКонтрагента.Артикул,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(АкцЦена.ЦенаПоАкции, 0) = 0
	|			ТОГДА ЕСТЬNULL(РознЦена.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(АкцЦена.ЦенаПоАкции, 0)
	|	КОНЕЦ";
	//КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатков"		, ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаАкции"			, ЭтотОбъект.ДатаПоставкиОт);
	Запрос.УстановитьПараметр("Контрагент"			, Поставщик);
	Запрос.УстановитьПараметр("ДатаНачала"			, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца"			, ДатаКонца);
	Запрос.УстановитьПараметр("ДатаНачалаПродаж"	, ДатаНачалаПродаж);
	Запрос.УстановитьПараметр("ДатаКонцаПродаж"		, ДатаКонцаПродаж);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница"	, СтруктурнаяЕдиница);  //dps+ розничная цена
	
	Состав.Очистить();
	СоставПолный.Очистить();
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//++БИТ БВО - Этот кусок уже не нужен
		//НоваяСтрока = Состав.Добавить();
		//ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		////{БредовЮГ 2014-03-20 Наряд 000145572 от 20.03.2015 13:30:49
		//НоваяСтрока.ПолныйКод = Выборка.Номенклатура.ПолныйКод();
		////БредовЮГ 2014-03-20 Наряд 000145572 от 20.03.2015 13:30:49}
		//СтрокаПродаж = ТаблицаПродаж.Найти(Выборка.Номенклатура,"Номенклатура");
		//Если СтрокаПродаж = Неопределено Тогда 
		//	СредниеПродажи = 0;
		//Иначе
		//	СредниеПродажи = СтрокаПродаж.СредниеПродажи;
		//КонецЕсли;	
		////ПериодПрошлыхПродаж = ?(Выборка.КоэффициентПраздниковВПрошлыйПериод = 0,ПериодЗаказа,(ПериодЗаказа - КоличествоПраздниковВПрошлыйПериод + Выборка.КоэффициентПраздниковВПрошлыйПериод));
		////ПериодБудущихПродаж = ?(Выборка.КоэффициентПраздниковВБудущийПериод = 0,ПериодЗаказа,(ПериодЗаказа - КоличествоПраздниковВБудущийПериод + Выборка.КоэффициентПраздниковВБудущийПериод));
		//Количество = ПериодЗаказа*(СредниеПродажи) + Выборка.СтраховойЗапас;
		//Количество = Окр(Количество,0,1);
		//Количество = Количество*КоэффициентЗаказа;
		//Остаток = Выборка.Остаток;
		//ОстатокНаДеньПоставки = Выборка.Остаток-(СредниеПродажи*СрокПоставки);
		//ОстатокНаДеньПоставки = ?(ОстатокНаДеньПоставки<0,0,ОстатокНаДеньПоставки);
		//ВПути = ?(Выборка.ВПути<0,0,Выборка.ВПути);
		//
		//НоваяСтрока.СредниеПродажи = СредниеПродажи;
		//НоваяСтрока.Остаток = Остаток;
		//НоваяСтрока.ОстатокНаДеньПоставки = ОстатокНаДеньПоставки;
		//НоваяСтрока.ВПути = ВПути;
		//НоваяСтрока.ВариантОкругления = Выборка.ВариантОкругления;
		//НоваяСтрока.ЦенаРозн = Выборка.ЦенаРозн;
		//НоваяСтрока.МинимальныйЗаказ = Выборка.МинимальныйЗаказ;
		//НоваяСтрока.МаксимальныйЗаказ = Выборка.МаксимальныйЗаказ;
		//НоваяСтрока.СтраховойЗапас = Выборка.СтраховойЗапас;
		//Если СтрокаПродаж = Неопределено Тогда 
		//	НоваяСтрока.МаксимальноеОтклонение = 0;
		//	НоваяСтрока.МинимальноеОтклонение = 0;
		//Иначе
		//	НоваяСтрока.МаксимальноеОтклонение = СтрокаПродаж.МаксимальноеОтклонение;
		//	НоваяСтрока.МинимальноеОтклонение = СтрокаПродаж.МинимальноеОтклонение;
		//КонецЕсли;	
		//
		//Количество = ?(Количество<ОстатокНаДеньПоставки+ВПути,0,Количество-ОстатокНаДеньПоставки-ВПути);
		//
		//НоваяСтрока.Формула = ""+Окр(Количество,3,1)+" = (("+Окр(СредниеПродажи,3,1)+" * "+ПериодЗаказа+" + "+Выборка.СтраховойЗапас+") * "+КоэффициентЗаказа+") – "+Окр(ОстатокНаДеньПоставки,3,1)+"  – "+Окр(ВПути,3,1);
		//
		//
		////Количество = ?(Количество<Выборка.МинимальныйЗаказ И Количество > 0,Выборка.МинимальныйЗаказ,Количество);
		//Количество = ?(Выборка.МаксимальныйЗаказ=0,Количество,?(Количество>Выборка.МаксимальныйЗаказ,Выборка.МаксимальныйЗаказ,Количество));
		//Если Количество > 0 Тогда
		//	//{ СИТЕК БрыляковЕЮ 2015-04-15  
		//	// Исходный текст --> 
		//	//dps+ 24.04.2014   Наряд №000114323                                                                      
		//	//Если Выборка.МинимальныйЗаказ > 0 Тогда
		//	//	Количество = ?(Количество<Выборка.МинимальныйЗаказ, ?(Количество/Выборка.МинимальныйЗаказ>=0.5,Выборка.МинимальныйЗаказ,0),?((Количество - Цел(Количество/Выборка.МинимальныйЗаказ)*Выборка.МинимальныйЗаказ)/Выборка.МинимальныйЗаказ >= 0.5, (Цел(Количество/Выборка.МинимальныйЗаказ) + 1)* Выборка.МинимальныйЗаказ, (Цел(Количество/Выборка.МинимальныйЗаказ))* Выборка.МинимальныйЗаказ));
		//	//КонецЕсли;
		//	//dps- 24.04.2014 
		//	// <-- Исходный текст 
		//	// СИТЕК БрыляковЕЮ 2015-04-15 }
		//	НоваяСтрока.Количество = ?(Выборка.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный,Окр(Количество,0,1),Количество);
		//КонецЕсли;	
		//НоваяСтрока.КоличествоРасчетное = НоваяСтрока.Количество;
		//НоваяСтрока.Сумма = НоваяСтрока.Количество*НоваяСтрока.Цена;
		//НоваяСтрока.КоличествоБольшеНуля = НоваяСтрока.Количество > 0;
		//НоваяСтрока.Утвержден = ?(НоваяСтрока.Количество = 0, Ложь, Истина);
		//--БИТ БВО
		
		//++БИТ БВО
		СтрокаНовогоСостава = СоставПолный.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоСостава, Выборка);
		
		СтрокаПродаж	= ТаблицаПродаж.Найти(Выборка.Номенклатура,"Номенклатура");		
		СредниеПродажи	= ?(СтрокаПродаж = Неопределено, 0, СтрокаПродаж.СредниеПродажи);
		
		Количество	= ПериодЗаказа*(СредниеПродажи) + Выборка.СтраховойЗапас;
		Количество	= Окр(Количество,0,1);
		Количество	= Количество*КоэффициентЗаказа;
		Остаток		= Выборка.Остаток;
		ОстатокНаДеньПоставки = Выборка.Остаток-(СредниеПродажи*СрокПоставки);
		ОстатокНаДеньПоставки = ?(ОстатокНаДеньПоставки<0,0,ОстатокНаДеньПоставки);
		ВПути = ?(Выборка.ВПути < 0, 0, Выборка.ВПути);
		Количество = ?(Количество<ОстатокНаДеньПоставки+ВПути,0,Количество-ОстатокНаДеньПоставки-ВПути);		
		
		СтрокаНовогоСостава.ПолныйКод				= Выборка.Номенклатура.ПолныйКод();
		СтрокаНовогоСостава.СредниеПродажи			= СредниеПродажи;
		СтрокаНовогоСостава.Остаток					= Остаток;
		СтрокаНовогоСостава.ОстатокНаДеньПоставки	= ОстатокНаДеньПоставки;
		СтрокаНовогоСостава.ВПути					= ВПути;
		СтрокаНовогоСостава.ВариантОкругления		= Выборка.ВариантОкругления;
		СтрокаНовогоСостава.ЦенаРозн				= Выборка.ЦенаРозн;
		СтрокаНовогоСостава.МинимальныйЗаказ		= Выборка.МинимальныйЗаказ;
		СтрокаНовогоСостава.МаксимальныйЗаказ		= Выборка.МаксимальныйЗаказ;
		СтрокаНовогоСостава.СтраховойЗапас			= Выборка.СтраховойЗапас;
		Если СтрокаПродаж = Неопределено Тогда 
			СтрокаНовогоСостава.МаксимальноеОтклонение = 0;
			СтрокаНовогоСостава.МинимальноеОтклонение = 0;
		Иначе
			СтрокаНовогоСостава.МаксимальноеОтклонение = СтрокаПродаж.МаксимальноеОтклонение;
			СтрокаНовогоСостава.МинимальноеОтклонение = СтрокаПродаж.МинимальноеОтклонение;
		КонецЕсли;					
		СтрокаНовогоСостава.Формула = ""+Окр(Количество,3,1)+" = (("+Окр(СредниеПродажи,3,1)+" * "+ПериодЗаказа+" + "+Выборка.СтраховойЗапас+") * "+КоэффициентЗаказа+") – "+Окр(ОстатокНаДеньПоставки,3,1)+"  – "+Окр(ВПути,3,1);		
		Количество = ?(Выборка.МаксимальныйЗаказ=0,Количество,?(Количество>Выборка.МаксимальныйЗаказ,Выборка.МаксимальныйЗаказ,Количество));
		Если Количество > 0 Тогда			
			СтрокаНовогоСостава.Количество = ?(Выборка.Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный,Окр(Количество,0,1),Количество);
		КонецЕсли;	
		СтрокаНовогоСостава.КоличествоРасчетное	= СтрокаНовогоСостава.Количество;
		СтрокаНовогоСостава.Сумма				= СтрокаНовогоСостава.Количество * СтрокаНовогоСостава.Цена;
		СтрокаНовогоСостава.КоличествоБольшеНуля= СтрокаНовогоСостава.Количество > 0;
		СтрокаНовогоСостава.Утвержден			= СтрокаНовогоСостава.Количество > 0;
		//--БИТ БВО	
	КонецЦикла;	
	Состав.Сортировать("ПолныйКод Возр");
	СоставПолный.Сортировать("ПолныйКод Возр");
	
	//{ СИТЕК БрыляковЕЮ 2015-04-14  
	ПривестиКоличествоККвантуОтгрузки();
	// СИТЕК БрыляковЕЮ 2015-04-14 }
	
	Записать();
КонецПроцедуры

//{{ШиловМВ 14.10.14 №000130240
//popn+
Функция ПолучитьСписокКодовОпераций(СтруктурнаяЕдиница, ВидДвижения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыОперацийАвтозаказа.КодОперации
	|ИЗ
	|	РегистрСведений.КодыОперацийАвтозаказа КАК КодыОперацийАвтозаказа
	|ГДЕ
	|	КодыОперацийАвтозаказа.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И КодыОперацийАвтозаказа.ВидДвижения = &ВидДвижения
	|	И КодыОперацийАвтозаказа.Использовать
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыОперацийАвтозаказа.КодОперации";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвижения);
	
	Результат = Запрос.Выполнить();
	СписокКодов = Результат.Выгрузить().ВыгрузитьКолонку("КодОперации");
	
	Возврат СписокКодов;
	
КонецФункции
//popn-
//ШиловМВ 14.10.14 №000130240}}

Процедура УтверждениеПотребностиПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НеСоздаватьЗадачу = Ложь;
	//++БИТ БВО
	//Сообщить("Количество " + Состав.Количество());
	Сообщить("Количество " + СоставПолный.Количество());
	//--БИТ БВО
	// {ВетровИА 2015-06-16 Наряд 000153588  
	Если (ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") И Поставщик.Статус = Ложь) 
		//++БИТ БВО
		//ИЛИ (Состав.Количество() = 0)  Тогда
		ИЛИ (СоставПолный.Количество() = 0)  Тогда
		//--БИТ БВО
	// ВетровИА 2015-06-16 Наряд 000153588}  
		НеСоздаватьЗадачу = Истина;
	КонецЕсли;	
	Если НеСоздаватьЗадачу = Истина Тогда
		Возврат;
	КонецЕсли;	
	здчЗадача = УправлениеБизнесПроцессамиСервер.СоздатьЗадачу(Ссылка, ТочкаМаршрутаБизнесПроцесса,,Наименование);
	Если здчЗадача = Неопределено Тогда
		Для Каждого Строка Из Состав Цикл
			Если Строка.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			Строка.Утвержден = Истина;
		КонецЦикла;
		//++БИТ БВО
		Для Каждого Строка Из СоставПолный Цикл
			Если Строка.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			Строка.Утвержден = Истина;
		КонецЦикла;
		//--БИТ БВО
		Записать();
		Возврат;
	КонецЕсли;	
	//здчЗадача.ДатаНапоминания = НачалоДня(ДАта);
	здчЗадача.РазрешитьИнтерактивноеВыполнение = Ложь;
	ФормируемыеЗадачи.Добавить(здчЗадача);
КонецПроцедуры

Процедура УтверждениеПотребностиОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	Результат = Истина;
КонецПроцедуры

Процедура ФормированиеЗаказовОбработка(ТочкаМаршрутаБизнесПроцесса)
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		НовыйДок = Документы.ЗапросНаПополнение.СоздатьДокумент();
		Если Поставщик <> Справочники.СтруктурныеЕдиницы.Центр Тогда
			НовыйДок.СкладПроизводства = СкладПроизводства;
		КонецЕсли;
		НужныЦены = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланируемаяПоставка.Ссылка
		|ИЗ
		|	Документ.ПланируемаяПоставка КАК ПланируемаяПоставка
		|ГДЕ
		|	ПланируемаяПоставка.Контрагент = &Контрагент
		|	И ПланируемаяПоставка.ДатаПоставкиОт = &ДатаПоставкиОт
		|	И ПланируемаяПоставка.ДатаПоставкиДо = &ДатаПоставкиДо
		|	И РАЗНОСТЬДАТ(ПланируемаяПоставка.Дата, &Дата, ДЕНЬ) = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПланируемаяПоставка.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());                  
		Запрос.УстановитьПараметр("ДатаПоставкиДо", ДатаПоставкиДо);
		Запрос.УстановитьПараметр("ДатаПоставкиОт", ДатаПоставкиОт);
		Запрос.УстановитьПараметр("Контрагент", Поставщик);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			НовыйДок = Документы.ПланируемаяПоставка.СоздатьДокумент();
		Иначе
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			НовыйДокСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			Отправлен = ОбменДаннымиRIBСервер.ОбъектОтправлен(НовыйДокСсылка);
			Если Отправлен Тогда
				НовыйДок = Документы.ПланируемаяПоставка.СоздатьДокумент();
			Иначе
				НовыйДок = НовыйДокСсылка.ПолучитьОбъект();
				Если НовыйДок.Заблокирован() Тогда
					НовыйДок = Документы.ПланируемаяПоставка.СоздатьДокумент();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НовыйДок.Контрагент = Поставщик;
		//{БредовЮГ 2014-12-07 Наряд№000136209
		НовыйДок.Склад = Склад;
		//БредовЮГ 2014-12-07 Наряд№000136209}
		НовыйДок.ДатаПоставкиОт = ДатаПоставкиОт;
		НовыйДок.ДатаПоставкиДо = ДатаПоставкиДо;
		НовыйДок.ВремяПоставки = ВремяПоставки;
		НужныЦены = Истина;
		НовыйДок.Фирма = Фирма;
		//НовыйДок.Фирма = СтруктурнаяЕдиница.Организация;
	КонецЕсли;
	НовыйДок.Дата = ТекущаяДата();
	НовыйДок.ДатаПоставкиОт = ДатаПоставкиОт;
	НовыйДок.ДатаПоставкиДо = ДатаПоставкиДо;
	НовыйДок.ВремяПоставки = ВремяПоставки;
	НовыйДок.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	//{ ВетровИА 23.04.2015 Наряд №000148674
	НовыйДок.Фирма = Фирма;
	// ВетровИА 23.04.2015 Наряд №000148674}
	НовыйДок.ИнициализироватьДокумент();
	//НовыйДок.Комментарий = Ссылка;
	КоличествоСтрокНаборногоЛиста = Константы.КоличествоСтрокНаборногоЛиста.Получить();
	текКоличествоСтрок = 0;
	Для Каждого Строка Из СоставПолный Цикл
		Если текКоличествоСтрок = КоличествоСтрокНаборногоЛиста И ТипЗнч(Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда 
			Если НовыйДок.Состав.Количество()>0 Тогда
				НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
				РезультирующийДокумент = НовыйДок.Ссылка;
				//Записать();
			КонецЕсли;
			НовыйДок = Документы.ЗапросНаПополнение.СоздатьДокумент();
			Если Поставщик <> Справочники.СтруктурныеЕдиницы.Центр Тогда
				НовыйДок.СкладПроизводства = СкладПроизводства;
			КонецЕсли;
			НовыйДок.Дата = ТекущаяДата();
			НовыйДок.ДатаПоставкиОт = ДатаПоставкиОт;
			НовыйДок.ДатаПоставкиДо = ДатаПоставкиДо;
			НовыйДок.ВремяПоставки = ВремяПоставки;
			НовыйДок.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			//{ ВетровИА 23.04.2015 Наряд №000148674
			НовыйДок.Фирма = Фирма;
			// ВетровИА 23.04.2015 Наряд №000148674}
			НовыйДок.ИнициализироватьДокумент();
			текКоличествоСтрок = 0;
		КонецЕсли;
		Если НЕ Строка.Утвержден Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НовыйДок.Состав.Найти(Строка.Номенклатура,"Номенклатура");
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = НовыйДок.Состав.Добавить();
		КонецЕсли;
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда 
			НоваяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
		Иначе 
			НоваяСтрока.ЕдиницаИзмерения = Строка.Номенклатура.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		НоваяСтрока.Коэффициент = Строка.Коэффициент;
		НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
		Если НужныЦены = Ложь Тогда
			НоваяСтрока.ДатаПоставки = НачалоДня(НовыйДок.Дата)+86400;
		Иначе
			НоваяСтрока.Артикул = АвтоЗаказ.ПолучитьАртикул(НовыйДок.Контрагент,НоваяСтрока.Номенклатура);
			// {ВетровИА 2015-05-18 Наряд №000146945
			Если Поставщик.НеПлательщикНДС Тогда
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			Иначе	
				НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(Строка.Номенклатура.СтавкаНДС),Строка.Номенклатура.СтавкаНДС,Справочники.СтавкиНДС.БезНДС);
			КонецЕсли;	
			// ВетровИА 2015-05-18 Наряд №000146945}
			СтавкаНДС = ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС);
			бЦенаСНДС = ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ВключатьНДСВЦеныКонтрагентов");
			Если бЦенаСНДС Тогда
				НоваяСтрока.Цена = Строка.Цена;
				НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * НоваяСтрока.Цена,2);
				НоваяСтрока.СуммаНДС = Окр(СтавкаНДС * НоваяСтрока.Сумма / (100 + СтавкаНДС),2);
				НоваяСтрока.СуммаБезНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС;
				НоваяСтрока.ЦенаБезНДС = Окр(НоваяСтрока.СуммаБезНДС / НоваяСтрока.Количество,2);
			Иначе
				НоваяСтрока.Цена = Строка.Цена;
				НоваяСтрока.СуммаБезНДС = Окр(НоваяСтрока.Количество * НоваяСтрока.ЦенаБезНДС,2);
				НоваяСтрока.СуммаНДС = ?(СтавкаНДС = 0, 0, Окр(НоваяСтрока.СуммаБезНДС / СтавкаНДС,2));
				НоваяСтрока.Сумма = НоваяСтрока.СуммаБезНДС + НоваяСтрока.СуммаНДС;
				НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество,2);
			КонецЕсли;
		КонецЕсли;
		текКоличествоСтрок = текКоличествоСтрок + 1;	
	КонецЦикла;	
	
	Если НовыйДок.Состав.Количество()>0 Тогда	
		НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
		РезультирующийДокумент = НовыйДок.Ссылка;
		Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ОтправкаПоПочтеОбработка(ТочкаМаршрутаБизнесПроцесса)
	//{КотлячковаЕВ 2014-05-27 07:58:31 Наряд № 000115425
	Если НЕ ЗначениеЗаполнено(ЭлектроннаяПочта.ПолучитьСистемнуюУчетнуюЗапись()) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи. Автозаказ'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при отправке заказа: %1'"), 
		"Не задана системная учетная запись"));
		Возврат; 
	КонецЕсли;
	//КотлячковаЕВ 2014-05-27 07:58:31 }
	
	Если РезультирующийДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат;
	Иначе
		ПочтовыйАдресПолучателя = УправлениеКонтактнойИнформациейСервер.ПолучитьКонтактнуюИнформацияОбъекта(Поставщик,Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	КонецЕсли;	
	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи. Автозаказ'"), 
		УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Заказ не отправлен, так как не указан почтовый адрес у поставщика %1.'"), Строка(Поставщик)));
		Возврат;
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема",
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Заказ № %1'"), РезультирующийДокумент.Номер));
	
	ТекстПисьма = "";
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(РезультирующийДокумент);
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(РезультирующийДокумент,"Документ_1");
	ТабДок = Документы.ПланируемаяПоставка.ПечатьНакладная(МассивОбъектов,ОбъектыПечати);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабДок.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.HTML);
	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	//ПараметрыПисьма.Вставить("ТипТекста", ТипТекстаПочтовогоСообщения.HTML);
	
	Вложения = Новый Соответствие;
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	Вложения.Вставить("Заказ № "+СокрЛП(РезультирующийДокумент.Номер)+".html", ДвоичныеДанные);
	
	ПараметрыПисьма.Вставить("Вложения", Вложения);
	ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
	
	Попытка 
		ЭлектроннаяПочта.ОтправитьСообщение(
		ЭлектроннаяПочта.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи. Автозаказ'"), 
		УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Заказ успешно отправлен на адрес %1.'"), ПочтовыйАдресПолучателя));
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи. Автозаказ'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при отправке заказа: %1'"), 
		ОписаниеОшибки));
		ВызватьИсключение(ОписаниеОшибки);	   
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	УстановитьПривилегированныйРежим(ИСТИНА);
	НеСоздаватьБП = Ложь;
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") И Поставщик.Статус = Ложь Тогда
		НеСоздаватьБП = Истина;
	КонецЕсли;	
	Если ПустаяСтрока(РегламентноеЗадание) Тогда
		НеСоздаватьБП = Истина;
	Иначе
		УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(РегламентноеЗадание);
		ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
		Если ТекущееРегламентноеЗадание = Неопределено Тогда
			НеСоздаватьБП = Истина;
		КонецЕсли;	
	КонецЕсли;	
	Если НеСоздаватьБП = Ложь Тогда
		НовыйБП = ЭтотОбъект.Скопировать();
		НовыйБП.РегламентноеЗадание = РегламентноеЗадание;
		НовыйБП.ПредставлениеРасписания = ПредставлениеРасписания;
		//{БредовЮГ 2015-01-26 Почему то не было привязки к правилу автозаказа в последующих б/п
		НовыйБП.ИдентификаторПравила = ИдентификаторПравила;
		//БредовЮГ 2015-01-26 Почему то не было привязки к правилу автозаказа в последующих б/п}
		НовыйБП.РезультирующийДокумент = Неопределено;
		НовыйБП.ДатаЗавершения = '00010101000000';		
		НовыйБП.Состав.Очистить();
		//++БИТ БВО
		НовыйБП.СоставПолный.Очистить();
		//--БИТ БВО
		НовыйБП.ДвиженияТоваров.Очистить();
		НовыйБП.Записать();             
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(НовыйБП.Ссылка);
		ТекущееРегламентноеЗадание.Параметры = МассивПараметров;
		ТекущееРегламентноеЗадание.Расписание.ДатаНачала = КонецДня(ТекущаяДата())+1;
		ТекущееРегламентноеЗадание.Записать();
	КонецЕсли;
	ПредставлениеРасписания = "";
	ДатаЗавершения = УправлениеБизнесПроцессамиСервер.ДатаЗавершенияБизнесПроцесса(Ссылка);
	Записать();
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	РегламентноеЗадание = "";
	ПредставлениеРасписания = "";
	РезультирующийДокумент = Неопределено;
	ДатаЗавершения = '00010101000000';
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если НЕ ПустаяСтрока(РегламентноеЗадание) Тогда
		УстановитьПривилегированныйРежим(ИСТИНА);
		УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(РегламентноеЗадание);
		ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
		Если ТекущееРегламентноеЗадание <> Неопределено Тогда
			ТекущееРегламентноеЗадание.Удалить();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) И НЕ ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ЭтоГруппа Тогда
		СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ПометкаУдаления Тогда
		Если НЕ ПустаяСтрока(РегламентноеЗадание) Тогда
			УстановитьПривилегированныйРежим(ИСТИНА);
			УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(РегламентноеЗадание);
			ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
			Если ТекущееРегламентноеЗадание <> Неопределено Тогда
				ТекущееРегламентноеЗадание.Удалить();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//{ СИТЕК БрыляковЕЮ 2015-04-14  
Процедура ПривестиКоличествоККвантуОтгрузки(ТекущаяСтрока = Неопределено, ВБольшуюСторону = Ложь, Полуквант = Ложь) Экспорт 
	
	Если ТекущаяСтрока = Неопределено Тогда
		//++БИТ БВО
		//Товары = Состав;
		Товары = СоставПолный;
		//--БИТ БВО
	Иначе
		Товары = Новый Массив();
		Товары.Добавить(ТекущаяСтрока);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаказНаРЦ = ТипЗнч(Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы");
	ЭтоМагазин = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин;
	
	Построитель = Новый ПостроительЗапроса();
	Построитель.Текст =
	"ВЫБРАТЬ
	|	НоменклатураКонтрагента.Контрагент,
	|	НоменклатураКонтрагента.Номенклатура,
	|	НоменклатураКонтрагента.МинимальныйЗаказ,	
	//++БИТ БВО - Задача "Основной поставщик для структурной единицы"		
	|"+ ?(ЭтоМагазин," СтатусыНоменклатуры.ОсновнойПоставщик КАК ОсновнойПоставщикСсылка,","")+" 
	//--БИТ БВО  - Задача "Основной поставщик для структурной единицы"
	|	НоменклатураКонтрагента.ОсновнойПоставщик КАК ОсновнойПоставщик
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	//++БИТ БВО - Задача "Основной поставщик для структурной единицы"
	|"+ ?(ЭтоМагазин," ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|		ПО НоменклатураКонтрагента.Номенклатура = СтатусыНоменклатуры.Номенклатура
	|			И НоменклатураКонтрагента.Контрагент = СтатусыНоменклатуры.ОсновнойПоставщик
	|			И (СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)","") + "
	//--БИТ БВО  - Задача "Основной поставщик для структурной единицы"
	|ГДЕ
	|	НоменклатураКонтрагента.Номенклатура В(&Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнойПоставщик УБЫВ";
	Построитель.ЗаполнитьНастройки();
	
	Отбор = Новый Структура();
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
		//++БИТ БВО - Задача "Основной поставщик для структурной единицы"		
		Если ЭтоМагазин Тогда 
			Отбор.Вставить("ОсновнойПоставщикСсылка", Поставщик);
		Иначе 
			Отбор.Вставить("Контрагент", Поставщик);
		КонецЕсли;
		//--БИТ БВО - Задача "Основной поставщик для структурной единицы"
	КонецЕсли;
	
	Izh_ОбщегоНазначения.УстановитьОтборПостроителя(Построитель, Отбор);
	
	Запрос = Построитель.ПолучитьЗапрос();
	// !!!! efim
	#Если _ Тогда
		Запрос = Новый Запрос;
	#КонецЕсли
	// !!!!
	//++БИТ БВО
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	//--БИТ БВО
	Запрос.УстановитьПараметр("Номенклатура",
		?(ТекущаяСтрока = Неопределено, 
			//++БИТ БВО
			//Состав.ВыгрузитьКолонку("Номенклатура"), 
			СоставПолный.ВыгрузитьКолонку("Номенклатура"), 
			//--БИТ БВО
			ТекущаяСтрока.Номенклатура
		)
	);
	ДанныеПоЗаказу = Запрос.Выполнить().Выгрузить();
	
	Если ЗаказНаРЦ Тогда
		
		ОстаткиРЦ = Izh_ОбменДаннымиRests.Оправка(Товары, СтруктурнаяЕдиница.РЦПоУмолчанию, ДатаПоставкиОт);
	
		Запрос.УстановитьПараметр("ОстаткиРЦ", ОстаткиРЦ);
		Запрос.УстановитьПараметр("КодСклада", СкладПроизводства.Код);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОстаткиРЦ.Код,
			|	ОстаткиРЦ.КодСклада,
			|	ОстаткиРЦ.Количество,
			|	ОстаткиРЦ.ВПутиРЦ
			|ПОМЕСТИТЬ ВТ_ТаблицаОстаткиРЦ
			|ИЗ
			|	&ОстаткиРЦ КАК ОстаткиРЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура,
			|	СУММА(ВТ_ТаблицаОстаткиРЦ.Количество + ВТ_ТаблицаОстаткиРЦ.ВПутиРЦ) КАК Количество
			|ИЗ
			|	ВТ_ТаблицаОстаткиРЦ КАК ВТ_ТаблицаОстаткиРЦ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО ВТ_ТаблицаОстаткиРЦ.Код = Номенклатура.Код
			|ГДЕ
			|	ВТ_ТаблицаОстаткиРЦ.КодСклада = &КодСклада
			|	И Номенклатура.Ссылка В(&Номенклатура)
			|
			|СГРУППИРОВАТЬ ПО
			|	Номенклатура.Ссылка";
		ОстаткиРЦ = Запрос.Выполнить().Выгрузить();
		
		//++БИТ БВО 2015-06-16
		//НеТрогатьЭтуГруппу = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(
		//ПланыВидовХарактеристик.СлужебныеЗначения.НеСписыватьЕдиничныеОстаткиПоГруппе
		//);
		НеТрогатьЭтуГруппу = Справочники.Номенклатура.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьЗначениеСвойстваСлужебногоЗначения(
		ПланыВидовХарактеристик.СлужебныеЗначения.НеСписыватьЕдиничныеОстаткиПоГруппе
		));
		//--БИТ БВО 2015-06-16
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Товары Цикл
		
		Количество = СтрокаТЧ.Количество;
		
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Номенклатура");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
		
		Если ЗаказНаРЦ Тогда
			Остаток = ОстаткиРЦ.НайтиСтроки(Отбор);
			Если Остаток.Количество() = 0 Тогда
				Остаток = 0;
			Иначе
				Остаток = Остаток[0].Количество;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Квант Из ДанныеПоЗаказу.НайтиСтроки(Отбор) Цикл
			
			Номенклатура = СтрокаТЧ.Номенклатура;
			
			Если Квант.МинимальныйЗаказ <> 0 Тогда
				
				//dps+ 15,08,24 135700 Округлять до ПОЛУКВАНТА, КАРЛ!!!
				Если Полуквант Тогда
					текКвант = Окр(Квант.МинимальныйЗаказ/2);
				Иначе
					текКвант = Квант.МинимальныйЗаказ;
				КонецЕсли;
				//dps- 15,08,24 135700 Округлять до ПОЛУКВАНТА, КАРЛ!!!
				Если ЗаказНаРЦ 
					И ЗначениеЗаполнено(Остаток) И Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный 
					И Количество < текКвант И Остаток < текКвант Тогда 
					Количество = Остаток;
					Прервать;
				КонецЕсли;
				
				Если ВБольшуюСторону Тогда 
					Коэффициент = Окр(Количество / текКвант + 0.5,0,0);
				Иначе 
					Коэффициент = Окр(Количество / текКвант);
				КонецЕсли;
											
				Если Коэффициент = 0 Тогда
					Коэффициент = 1;
				КонецЕсли;
				Если ЗаказНаРЦ Тогда
					Коэффициент = Мин(Коэффициент, Цел(Остаток / текКвант));
				КонецЕсли;
				
				Количество = Коэффициент * текКвант;
				
				Если ЗаказНаРЦ Тогда
					Если (Остаток - Количество) = 1 
						И Номенклатура.ТипТовара <> Перечисления.ТипыТоваров.Весовой
						И НЕ Номенклатура.ПринадлежитЭлементу(НеТрогатьЭтуГруппу) Тогда
						Количество = Количество + 1;
					КонецЕсли;
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаТЧ.Количество = Количество;
		
	КонецЦикла;
	
КонецПроцедуры
// СИТЕК БрыляковЕЮ 2015-04-14 }

//dps+ 15/05/18 наряд 149977
#Область УтверждениеПотребностиBI
Процедура РасчетПотребностиBIОбработка(ТочкаМаршрутаБизнесПроцесса)
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПоставкиОт = НачалоДня(ТекущаяДата())+СрокПоставки*3600*24;
	ДатаПоставкиДо = НачалоДня(ТекущаяДата())+СрокПоставки*3600*24;
	
	Состав.Очистить();
	СоставПоСЕ.Очистить();
	Попытка
		OraSession = Новый COMObject("OracleInProcServer.XOraSession");
		OraDatabase = OraSession.OpenDatabase("ORDM_PROD","WH/WH_pass10", 0);
		Connect ="ОК";
	Исключение
		Connect = ОписаниеОшибки();   
	КонецПопытки;
	
	Если Connect<>"ОК"	Тогда
		ЗаписьЖурналаРегистрации("РасчетПотребностиBI",,,,"Нет соединения с базой оракла " + Connect);
		Возврат;
	КонецЕсли;	
	
	OraDatabase.ExecuteSQL("ALTER SESSION SET NLS_NUMERIC_CHARACTERS = '.,'");	
	
	p_date1=Формат(ТекущаяДата()-(86400*ПериодРасчета),"ДФ=dd.MM.yyyy");
    p_date2=Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
    p_supplier =СокрЛП(Формат(Поставщик.Код,"ЧГ=0")); //Код протокола поставщика

    sql= "select item, store, rest, " +      ///*+ parallel (auto) */ dps 15/07/10
    " case when qty=0 then    0     when c_rest=0 and c_ch=0 then       0     when c_rest=0 and c_ch>0       then qty/c_ch "+
    " else  qty/c_rest  end AVG_QTY, qty " +
    " from (select m.item,store,nvl(r.rest, 0) rest,nvl(c.goodscount, 0) qty,c.check_date c_ch, nvl(rr.rest_date,0) c_rest "+    //dps+ 15.10.08 Исправление исключительной ситуации, когда тут возвращается NULL
    " from korepanovs.v_for_rest m "+
    " left join (select item_code, location, sum(goodscount) goodscount, count(distinct c.check_date) check_date " +
    " from korepanovs.cds c where  c.check_date between to_date ('"+p_date1 +"','dd.mm.yyyy') and to_date ('"+p_date2+ "','dd.mm.yyyy')  group by item_code, location)" +
    " c on (c.item_code=m.item  and c.location=m.store) left join "
    " (select r.item, r.location, sum(r.rest) rest from korepanovs.cds_rest r where r.rest_date=to_date ('" +p_date2+"','dd.mm.yyyy') group by r.item, r.location )r on (r.item=m.item and r.location=m.store) left join "+
    " (select distinct  rr.item, rr.location,  count(distinct rr.rest_date) rest_date from korepanovs.cds_rest rr where rr.rest_date between to_date ('"+p_date1+"','dd.mm.yyyy') and to_date ('"+p_date2+"','dd.mm.yyyy') group by rr.item, rr.location) rr "+
	" on (rr.item=m.item and rr.location=m.store) where m.supplier = "+ p_supplier + " order by m.item, m.store )";
	
	Попытка 
		ЗаписьЖурналаРегистрации("РасчетПотребностиBI",,,,"Старт запроса.");
		EmpDynaset = OraDatabase.CreateDynaset(sql, 4);
	исключение
		ЗаписьЖурналаРегистрации("РасчетПотребностиBI",,,,"Ошибка в запросе: "+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	RecCount = EmpDynaset.RecordCount;
	
	тз = Новый ТаблицаЗначений;
	ТипЧисло=Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(15,3));
	тз.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тз.Колонки.Добавить("СтруктурнаяЕдиница",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	тз.Колонки.Добавить("Остаток",ТипЧисло);
	тз.Колонки.Добавить("СредниеПродажи",ТипЧисло);
	тз.Колонки.Добавить("Количество",ТипЧисло);
	тз.Колонки.Добавить("ВПути",ТипЧисло);
	//++Минин 0000141428 2015-10-21
	тз.Колонки.Добавить("ОбщиеПродажи",ТипЧисло);
	//--Минин 0000141428 2015-10-21
	Для Сч_1=1 По RecCount Цикл
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Строка(EmpDynaset.Fields("item").value));
		СЕ = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка(EmpDynaset.Fields("store").value));		
		Если НЕ  ЗначениеЗаполнено(Номенклатура) ИЛИ НЕ ЗначениеЗаполнено(СЕ) Тогда 
			EmpDynaset.MoveNext();    
			Продолжить;
		КонецЕсли;
		НоваяСтрока = тз.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.СтруктурнаяЕдиница = СЕ;
		НоваяСтрока.Остаток = Число(EmpDynaset.Fields("rest").value);		
		НоваяСтрока.СредниеПродажи = Число(EmpDynaset.Fields("AVG_QTY").value);
		//++Минин 0000141428 2015-10-21
		НоваяСтрока.ОбщиеПродажи = Число(EmpDynaset.Fields("qty").value);
		//--Минин 0000141428 2015-10-21
		Количество = НоваяСтрока.СредниеПродажи * СрокПоставки - НоваяСтрока.Остаток;
		Если Количество < 0 Тогда 
			Количество = 0;
		КонецЕсли;
		Если Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный Тогда 
			Количество = Окр(Количество);
		КонецЕсли;
		НоваяСтрока.Количество = Количество;
		ПривестиКоличествоККвантуОтгрузки(НоваяСтрока);
		EmpDynaset.MoveNext();    
	КонецЦикла;   
		
	Если тз.Количество() = 0 Тогда                         //dps+ 15,09,22 исключение создания пустых УП
		ЗаписьЖурналаРегистрации("РасчетПотребностиBI",,,,"Запрос вернул 0 строк по поставщику " + p_supplier);
		Возврат;
	КонецЕсли;
	
	//dps+ 15/07/02 131619 Добавление данных по ВШ
	ЗапросВШ = Новый Запрос;
	ЗапросВШ.Текст = "ВЫБРАТЬ
	                 |	ВЫБОР
	                 |		КОГДА КорректировкаРеализации.Ссылка ЕСТЬ NULL 
	                 |			ТОГДА ВложенныйЗапрос.РН
	                 |		ИНАЧЕ КорректировкаРеализации.Ссылка
	                 |	КОНЕЦ КАК Ссылка
	                 |ПОМЕСТИТЬ ВТ
	                 |ИЗ
	                 |	(ВЫБРАТЬ
	                 |		РасходнаяНакладная.Ссылка КАК РН,
	                 |		МАКСИМУМ(КорректировкаРеализации.Дата) КАК Дата
	                 |	ИЗ
	                 |		Документ.РасходнаяНакладная КАК РасходнаяНакладная
	                 |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	                 |			ПО (КорректировкаРеализации.Проведен)
	                 |				И (РасходнаяНакладная.Ссылка = КорректировкаРеализации.ДокументРеализации
	                 |					ИЛИ РасходнаяНакладная.Ссылка = КорректировкаРеализации.ДокументРеализации.ДокументРеализации
	                 |					ИЛИ РасходнаяНакладная.Ссылка = КорректировкаРеализации.ДокументРеализации.ДокументРеализации.ДокументРеализации
	                 |					ИЛИ РасходнаяНакладная.Ссылка = КорректировкаРеализации.ДокументРеализации.ДокументРеализации.ДокументРеализации.ДокументРеализации)
	                 |	ГДЕ
	                 |		РасходнаяНакладная.Ссылка В
	                 |				(ВЫБРАТЬ
	                 |					РасходнаяНакладнаяСостав.Ссылка
	                 |				ИЗ
	                 |					Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
	                 |				ГДЕ
	                 |					РасходнаяНакладнаяСостав.Ссылка.Проведен
	                 |					И НЕ РасходнаяНакладнаяСостав.Ссылка.Возврат
	                 |					И РасходнаяНакладнаяСостав.Ссылка.Склад <> &Склад
	                 |					И РасходнаяНакладнаяСостав.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНач, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ)
	                 |					И РасходнаяНакладнаяСостав.Номенклатура В (&СписокНоменклатура)
	                 |				СГРУППИРОВАТЬ ПО
	                 |					РасходнаяНакладнаяСостав.Ссылка)
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		РасходнаяНакладная.Ссылка) КАК ВложенныйЗапрос
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	                 |		ПО (ВЫБОР
	                 |				КОГДА ВложенныйЗапрос.Дата ЕСТЬ NULL 
	                 |					ТОГДА ЛОЖЬ
	                 |				ИНАЧЕ ВложенныйЗапрос.Дата = КорректировкаРеализации.Дата
	                 |						И (ВложенныйЗапрос.РН = КорректировкаРеализации.ДокументРеализации
	                 |							ИЛИ ВложенныйЗапрос.РН = КорректировкаРеализации.ДокументРеализации.ДокументРеализации
	                 |							ИЛИ ВложенныйЗапрос.РН = КорректировкаРеализации.ДокументРеализации.ДокументРеализации.ДокументРеализации
	                 |							ИЛИ ВложенныйЗапрос.РН = КорректировкаРеализации.ДокументРеализации.ДокументРеализации.ДокументРеализации.ДокументРеализации)
	                 |			КОНЕЦ)
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	ОстаткиНоменклатуры.Номенклатура,
	                 |	СУММА(ОстаткиНоменклатуры.Количество) КАК Количество
	                 |ПОМЕСТИТЬ ВТ2
	                 |ИЗ
	                 |	ВТ КАК ВТ
	                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	                 |		ПО ВТ.Ссылка = ОстаткиНоменклатуры.Регистратор
	                 |			И (ОстаткиНоменклатуры.Номенклатура В (&СписокНоменклатура))
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ОстаткиНоменклатуры.Номенклатура
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	ВТ2.Количество,
	                 |	ОстаткиНоменклатурыОстатки.КоличествоОстаток КАК Остаток,
	                 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОстаткиНоменклатурыОстаткиИОбороты.КоличествоНачальныйОстаток) КАК КоличествоДней,
	                 |	Ном.Ссылка КАК Номенклатура
	                 |ИЗ
	                 |	Справочник.Номенклатура КАК Ном
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ), МестоХранения <> &Склад) КАК ОстаткиНоменклатурыОстатки
	                 |		ПО Ном.Ссылка = ОстаткиНоменклатурыОстатки.Номенклатура
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&ДатаНач, ДЕНЬ), КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ), День, , МестоХранения <> &Склад) КАК ОстаткиНоменклатурыОстаткиИОбороты
	                 |		ПО (ОстаткиНоменклатурыОстаткиИОбороты.КоличествоНачальныйОстаток > 0)
	                 |			И Ном.Ссылка = ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ2 КАК ВТ2
	                 |		ПО Ном.Ссылка = ВТ2.Номенклатура
	                 |ГДЕ
	                 |	Ном.Ссылка В(&СписокНоменклатура)
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ВТ2.Количество,
	                 |	ОстаткиНоменклатурыОстатки.КоличествоОстаток,
	                 |	Ном.Ссылка";
	тзНом = тз.Скопировать();				 
	тзНом.Свернуть("Номенклатура");
	мсвНоменклатура = тзНом.ВыгрузитьКолонку("Номенклатура");
	ЗапросВШ.УстановитьПараметр("СписокНоменклатура", мсвНоменклатура);				 
	ЗапросВШ.УстановитьПараметр("ДатаНач",ТекущаяДата()-(86400*ПериодРасчета));				 
	ЗапросВШ.УстановитьПараметр("ДатаКон",ТекущаяДата());				   
	ЗапросВШ.УстановитьПараметр("Склад",Разработка_Ижтрейдинг_Сервер.ПолучитьЗначениеКонстанты(,"СкладРезерва").Свойство("СкладРезерва"));				 
	тзВШ = ЗапросВШ.Выполнить().Выгрузить();
	
	Для Каждого Номенклатура Из мсвНоменклатура Цикл
		стрВШ = тзВШ.Найти(Номенклатура, "Номенклатура");
		НоваяСтрока = тз.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(1);
		НоваяСтрока.Остаток = стрВШ.Остаток;
		//++Минин 0000141428 2015-10-21
		НоваяСтрока.ОбщиеПродажи = стрВШ.Количество;
		//--Минин 0000141428 2015-10-21
		Если ЗначениеЗаполнено(стрВШ.Количество) И стрВШ.КоличествоДней<>0 Тогда 
			НоваяСтрока.СредниеПродажи = стрВШ.Количество/стрВШ.КоличествоДней;
		КонецЕсли;
		//Количество = НоваяСтрока.СредниеПродажи * СрокПоставки - НоваяСтрока.Остаток;   //dps+ 15.08.24 135700 не рассчитывать заказ по ВШ
		//Если Номенклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный Тогда 
		//	Количество = Окр(Количество);
		//КонецЕсли;
		//НоваяСтрока.Количество = Количество;
		//ПривестиКоличествоККвантуОтгрузки(НоваяСтрока);
	КонецЦикла;
	//dps- 15/07/02 131619 Добавление данных по ВШ
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	тз.Номенклатура КАК Номенклатура,
	               |	тз.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |	тз.Остаток КАК Остаток,
	               |	тз.СредниеПродажи КАК СредниеПродажи,
	               //++Минин 0000141428 2015-10-21
				   |	тз.ОбщиеПродажи КАК ОбщиеПродажи,
				   //--Минин 0000141428 2015-10-21
				   |	тз.Количество КАК Количество
	               |ПОМЕСТИТЬ тз
	               |ИЗ
	               |	&ТЗ КАК тз
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тз.Номенклатура КАК Номенклатура,
	               |	тз.Остаток КАК Остаток,
	               |	тз.Количество - ЕСТЬNULL(Izh_ИсторияРаспределения.Количество, 0) КАК Количество,
	               |	тз.СредниеПродажи,
	               //++Минин 0000141428 2015-10-21
				   |	тз.ОбщиеПродажи,
				   //--Минин 0000141428 2015-10-21
	               |	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	               |	Izh_ИсторияРаспределения.Количество КАК ВПути,
	               |	СтруктурныеЕдиницы.Код КАК Код
	               |ИЗ
	               |	тз КАК тз
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Izh_ИсторияРаспределения КАК Izh_ИсторияРаспределения
	               |		ПО тз.Номенклатура = Izh_ИсторияРаспределения.Номенклатура
	               |			И тз.СтруктурнаяЕдиница = Izh_ИсторияРаспределения.СтруктурнаяЕдиница
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |		ПО тз.СтруктурнаяЕдиница = СтруктурныеЕдиницы.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	Запрос.УстановитьПараметр("ТЗ",тз);
	СоставПоСЕ.Загрузить(Запрос.Выполнить().Выгрузить());
		
	тз2 = СоставПоСЕ.Выгрузить();
	тз2.Свернуть("Номенклатура","Остаток, Количество");
	ЗапросЦен = Новый Запрос;
	ЗапросЦен.Текст = "ВЫБРАТЬ
	                  |	тз.Номенклатура КАК Номенклатура,
	                  |	тз.Остаток КАК Остаток,
	                  |	тз.Количество КАК Количество
	                  |ПОМЕСТИТЬ тз
	                  |ИЗ
	                  |	&ТЗ КАК тз
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	НоменклатураКонтрагента.Цена * тз.Количество КАК Сумма,
	                  |	тз.Номенклатура КАК Номенклатура,
	                  |	тз.Остаток КАК Остаток,
	                  |	тз.Количество КАК Количество,
	                  |	НоменклатураКонтрагента.Цена КАК Цена,
	                  |	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	                  |ИЗ
	                  |	тз КАК тз
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	                  |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	                  |			ПО НоменклатураКонтрагента.Номенклатура.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	                  |				И НоменклатураКонтрагента.Номенклатура = ЕдиницыИзмерения.Владелец
	                  |				И (НЕ ЕдиницыИзмерения.ПометкаУдаления)
	                  |				И (НоменклатураКонтрагента.Контрагент = &Поставщик)   //dps+ 15/07/15 133624
	                  |		ПО тз.Номенклатура = НоменклатураКонтрагента.Номенклатура";
					  
	ЗапросЦен.УстановитьПараметр("ТЗ",тз2);
	ЗапросЦен.УстановитьПараметр("Поставщик",Поставщик); //dps+ 15/07/15 133624
	тзОсн = ЗапросЦен.Выполнить().Выгрузить();
	
	Состав.Загрузить(тзОсн);
	Для Каждого стр Из Состав Цикл  
		ПривестиКоличествоККвантуОтгрузки(стр, Истина);
	КонецЦикла;
	Записать(); 
КонецПроцедуры

Процедура УсловиеТипРасчетаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Если Izh_ВариантРасчета = 0 Тогда 
	Иначе
	КонецЕсли;
КонецПроцедуры

Процедура ТипРасчетаОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	Если Izh_ВариантРасчета = 0 Тогда 
		Результат = ТочкаВыбораВарианта.Варианты.ПоСтраховомуЗапасу;
	Иначе
		Результат = ТочкаВыбораВарианта.Варианты.ЗапросBI;
	КонецЕсли;
КонецПроцедуры

Процедура УтверждениеПотребностиBIПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НеСоздаватьЗадачу = Ложь;
	здчЗадача = УправлениеБизнесПроцессамиСервер.СоздатьЗадачу(Ссылка, ТочкаМаршрутаБизнесПроцесса,,Наименование);
	здчЗадача.РазрешитьИнтерактивноеВыполнение = Ложь;
	здчЗадача.Сумма = Ссылка.Состав.Итог("Сумма");
	ФормируемыеЗадачи.Добавить(здчЗадача);
КонецПроцедуры
 
Процедура УтверждениеПотребностиBIОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	Результат = Истина;
КонецПроцедуры

Процедура ФормированиеЗаказовBIОбработка(ТочкаМаршрутаБизнесПроцесса)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПланируемаяПоставка.Ссылка
	|ИЗ
	|	Документ.ПланируемаяПоставка КАК ПланируемаяПоставка
	|ГДЕ
	|	ПланируемаяПоставка.Контрагент = &Контрагент
	|	И ПланируемаяПоставка.ДатаПоставкиОт = &ДатаПоставкиОт
	|	И ПланируемаяПоставка.ДатаПоставкиДо = &ДатаПоставкиДо
	|	И РАЗНОСТЬДАТ(ПланируемаяПоставка.Дата, &Дата, ДЕНЬ) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланируемаяПоставка.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());                  
	Запрос.УстановитьПараметр("ДатаПоставкиДо", ДатаПоставкиДо);
	Запрос.УстановитьПараметр("ДатаПоставкиОт", ДатаПоставкиОт);
	Запрос.УстановитьПараметр("Контрагент", Поставщик);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовыйДок = Документы.ПланируемаяПоставка.СоздатьДокумент();
	Иначе
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		НовыйДокСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		Отправлен = ОбменДаннымиRIBСервер.ОбъектОтправлен(НовыйДокСсылка);
		Если Отправлен Тогда
			НовыйДок = Документы.ПланируемаяПоставка.СоздатьДокумент();
		Иначе
			НовыйДок = НовыйДокСсылка.ПолучитьОбъект();
			Если НовыйДок.Заблокирован() Тогда
				НовыйДок = Документы.ПланируемаяПоставка.СоздатьДокумент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НовыйДок.Контрагент = Поставщик;
	НовыйДок.Склад = Склад;
	НовыйДок.ДатаПоставкиОт = ДатаПоставкиОт;
	НовыйДок.ДатаПоставкиДо = ДатаПоставкиДо;
	НовыйДок.ВремяПоставки = ВремяПоставки;
	НовыйДок.Фирма = Фирма;
	НовыйДок.Дата = ТекущаяДата();
	//НовыйДок.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	НовыйДок.ИнициализироватьДокумент();
	КоличествоСтрокНаборногоЛиста = Константы.КоличествоСтрокНаборногоЛиста.Получить();
	Для Каждого Строка Из Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;		
		
		НоваяСтрока = НовыйДок.Состав.Найти(Строка.Номенклатура,"Номенклатура");		
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = НовыйДок.Состав.Добавить();
		КонецЕсли;
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		
		НоваяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = Строка.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
		НоваяСтрока.Артикул = АвтоЗаказ.ПолучитьАртикул(НовыйДок.Контрагент,НоваяСтрока.Номенклатура);
		Если Поставщик.НеПлательщикНДС Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		Иначе	
			НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(Строка.Номенклатура.СтавкаНДС),Строка.Номенклатура.СтавкаНДС,Справочники.СтавкиНДС.БезНДС);
		КонецЕсли;	
		СтавкаНДС = ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС);
		бЦенаСНДС = ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ВключатьНДСВЦеныКонтрагентов");
		
		Цена = Строка.Цена;
		Если бЦенаСНДС Тогда
			НоваяСтрока.Цена = Цена;
			НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * Цена,2);
			НоваяСтрока.СуммаНДС = Окр(СтавкаНДС * НоваяСтрока.Сумма / (100 + СтавкаНДС),2);
			НоваяСтрока.СуммаБезНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС;
			НоваяСтрока.ЦенаБезНДС = Окр(НоваяСтрока.СуммаБезНДС / НоваяСтрока.Количество,2);
		Иначе
			НоваяСтрока.ЦенаБезНДС = Цена;
			НоваяСтрока.СуммаБезНДС = Окр(НоваяСтрока.Количество * НоваяСтрока.ЦенаБезНДС,2);
			НоваяСтрока.СуммаНДС = ?(СтавкаНДС = 0, 0, Окр(НоваяСтрока.СуммаБезНДС / СтавкаНДС,2));
			НоваяСтрока.Сумма = НоваяСтрока.СуммаБезНДС + НоваяСтрока.СуммаНДС;
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество,2);
		КонецЕсли;
	КонецЦикла;
	Если НовыйДок.Состав.Количество()>0 Тогда
		НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
		РезультирующийДокумент = НовыйДок.Ссылка;
		Записать();
		////dps+ 15/07/13 132259      //dps+ 15.08.10 135634 отменяем))
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура
		//               |ИЗ
		//               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		//               |ГДЕ
		//               |	НоменклатураДополнительныеРеквизиты.Свойство = &ПризнакМатрицы
		//               |	И НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)
		//               |	И НоменклатураДополнительныеРеквизиты.Значение = &МягкаяМатрица
		//               |
		//               |СГРУППИРОВАТЬ ПО
		//               |	НоменклатураДополнительныеРеквизиты.Ссылка";
		//Запрос.УстановитьПараметр("Номенклатура",НовыйДок.Состав.Выгрузить(,"Номенклатура"));
		//стрМягкаяМатрица = Разработка_Ижтрейдинг_Сервер.ПолучитьЗначениеКонстанты(,"МягкаяМатрица");
		//Если НЕ стрМягкаяМатрица.Свойство("МягкаяМатрица") Тогда 
		//	Сообщить("Заполните Константу обработок ""МягкаяМатрица""");
		//	Возврат;
		//КонецЕсли;
		//Запрос.УстановитьПараметр("МягкаяМатрица",стрМягкаяМатрица.МягкаяМатрица);
		//Запрос.УстановитьПараметр("Признакматрицы",ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаПризнакМатрицы)));
		//Запрос.УстановитьПараметр("Значение",Справочники);
		//Рез = Запрос.Выполнить().Выгрузить();
		////dps- 15/07/13 132259  //dps- 15.08.10 135634 отменяем))
		
		Для Каждого Строка Из СоставПоСЕ Цикл
			Если Строка.Количество = 0 Тогда // ИЛИ Рез.Найти(Строка.Номенклатура, "Номенклатура") = Неопределено Тогда //dps+ 15.08.10 135634 отменяем))
				Продолжить;
			КонецЕсли;
			рсЗапись = РегистрыСведений.Izh_ИсторияРаспределения.СоздатьМенеджерЗаписи();
			рсЗапись.Документ = НовыйДок.Ссылка;
			рсЗапись.Номенклатура = Строка.Номенклатура;
			рсЗапись.СтруктурнаяЕдиница = Строка.СтруктурнаяЕдиница;
			рсЗапись.Количество = Строка.Количество;
			рсЗапись.Закупщик = Izh_Менеджер;
			рсЗапись.Записать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//Процедура УтверждениеПотребностиПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
//	//++Минин 2015-09-16 0000139456
//	Если СоставПолный.Количество()>0 Тогда 
//		Запрос=Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//		|	А.номенклатура
//		|ПОМЕСТИТЬ ВТСостав
//		|ИЗ
//		|	&состав КАК А
//		|ГДЕ
//		|	А.Количество <> 0
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	НоменклатураКонтрагента.Цена,
//		|	НоменклатураКонтрагента.Номенклатура
//		|ИЗ
//		|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
//		|ГДЕ
//		|	НоменклатураКонтрагента.Контрагент = &Контрагент
//		|	И НоменклатураКонтрагента.Номенклатура В
//		|			(ВЫБРАТЬ
//		|				а.номенклатура
//		|			ИЗ
//		|				ВТСостав КАК а)
//		|	И (НоменклатураКонтрагента.ДатаПрекращенияПоставок > &ДатаДокумента
//		|			ИЛИ НоменклатураКонтрагента.ДатаПрекращенияПоставок = ДАТАВРЕМЯ(1, 1, 1))";
//		Запрос.УстановитьПараметр("состав",СоставПолный);
//		Запрос.УстановитьПараметр("Контрагент",Поставщик);
//		Запрос.УстановитьПараметр("ДатаДокумента",Дата);
//		ТЗЦены=Новый ТаблицаЗначений;
//		ТЗЦены = Запрос.Выполнить().Выгрузить();
//		
//		Для Каждого Стр из СоставПолный Цикл 
//			Если Стр.Количество=0 Тогда Продолжить; КонецЕсли;
//			Данные = ТЗЦены.Найти(Стр.Номенклатура);
//			Если Данные=Неопределено Тогда
//				Отказ=Истина;
//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По номенклатуре в строке №"+Стр.НомерСтроки+" отсутствует цена протокола. Отмените заказ по этой позиции!",Задача,"ОбъектСоставПолный"+"["+(Стр.НомерСтроки-1)+"].Номенклатура",,Отказ);		
//				Возврат;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	//--Минин 2015-09-16 0000139456
//КонецПроцедуры
#КонецОбласти
//dps- 15/05/18 наряд 149977

спрПараметрыБП = Справочники.НастройкаБизнесПроцессов.НайтиПоКоду(Метаданные().Имя,,,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница)