////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокПлановОбмена = Новый СписокЗначений;
	СписокПлановОбмена.Добавить(Метаданные.ПланыОбмена.ОбменРБД.Имя, Метаданные.ПланыОбмена.ОбменРБД.Синоним);
	
	ОбновитьСписокСостоянияУзлов();
	
	ИдентификаторРегламентногоЗадания = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ПередачаДанныхРБД).УникальныйИдентификатор;
	
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		Элементы.ВыполнениеОбменаДанными.Доступность = Ложь;
		Элементы.ГруппаКнопокВыполненияОбменаДанными.Доступность = Ложь;
		Элементы.ГруппаКнопокНастройкиРасписания.Доступность = Ложь;
	КонецЕсли;	   
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если    ИмяСобытия = "ВыполненОбменДанными" Тогда
		
		// обновляем данные монитора
		ОбновитьМонитор();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВыполнитьОбменДанными(Команда)
	СписокУзлов  = Новый СписокЗначений;
	Для Каждого Строка Из Элементы.СписокСостоянияУзлов.ВыделенныеСтроки Цикл
		//ОбменДаннымиРБДСервер.ЗапускФоновогоЗаданияПоВыгрузке(Элементы.СписокСостоянияУзлов.ДанныеСтроки(Строка).УзелИнформационнойБазы);
		СписокУзлов.Добавить(Элементы.СписокСостоянияУзлов.ДанныеСтроки(Строка).УзелИнформационнойБазы);
	КонецЦикла;
	Для Каждого Строка Из СписокУзлов Цикл
		ОбменДаннымиРБДКлиент.ВыгрузитьДанныеСКлиента(Строка.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменДаннымиДляВсехУзлов(Команда)
	Для Каждого Строка Из СписокСостоянияУзлов Цикл
		ОбменДаннымиРБДСервер.ЗапускФоновогоЗаданияПоВыгрузке(Строка.УзелИнформационнойБазы);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура НастроитьРасписаниеВыполненияОбмена(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписание(ИдентификаторРегламентногоЗадания));
	Если Диалог.ОткрытьМодально() Тогда
		УстановитьРасписание(ИдентификаторРегламентногоЗадания, Диалог.Расписание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРасписание(Знач ИдентификаторРегламентногоЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегламентныеЗаданияСервер.ПолучитьРасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания);
	
КонецФункции
	
&НаСервереБезКонтекста
Процедура УстановитьРасписание(Знач ИдентификаторРегламентногоЗадания, Знач Расписание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания,
		Расписание);
	
КонецПроцедуры
	


&НаКлиенте
Процедура ОбновитьМонитор(Команда = Неопределено)
	
	ИндексСтрокиСписокСостоянияУзлов = ПолучитьТекущийИндексСтроки("СписокСостоянияУзлов");
	
	// выполняем обновление таблиц монитора на сервере
	ОбновитьСписокСостоянияУзлов();
	
	// выполняем позиционирование курсора
	ВыполнитьПозиционированиеКурсора("СписокСостоянияУзлов", ИндексСтрокиСписокСостоянияУзлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУзелИнформационнойБазы(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗначение(ТекущиеДанные.УзелИнформационнойБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСостоянияУзловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИзменитьУзелИнформационнойБазы(Неопределено);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьСписокСостоянияУзлов()
	
	ТекстЗапроса = "
	|
	|[ПланыОбменаКонфигурации]
	|
	|//////////////////////////////////////////////////////////////////////////////// {СостояниеОбменовДаннымиВыгрузка}
	|ВЫБРАТЬ
	|	СостояниеОбменовДанными.УзелИнформационнойБазы    КАК УзелИнформационнойБазы,
	|	СостояниеОбменовДанными.ДатаОкончания             КАК ДатаОкончания,
	|	СостояниеОбменовДанными.ОписаниеОшибки            КАК ОписаниеОшибки,
	|	ВЫБОР
	|	КОГДА СостояниеОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ОжиданиеОбновления)
	|	ТОГДА 3
	|	КОГДА СостояниеОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|	ТОГДА 2
	|	ИНАЧЕ 1
	|	КОНЕЦ                                             КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостояниеОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостояниеОбменовДанными КАК СостояниеОбменовДанными
	|ГДЕ
	|	СостояниеОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|	И СостояниеОбменовДанными.УзелИнформационнойБазы.СтруктурнаяЕдиница.Родитель = &ПустаяСЕ
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// {СостояниеОбменовДаннымиЗагрузка}
	|ВЫБРАТЬ
	|	СостояниеОбменовДанными.УзелИнформационнойБазы    КАК УзелИнформационнойБазы,
	|	СостояниеОбменовДанными.ДатаОкончания             КАК ДатаОкончания,
	|	СостояниеОбменовДанными.ОписаниеОшибки            КАК ОписаниеОшибки,
	|	ВЫБОР
	|	КОГДА СостояниеОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ОжиданиеОбновления)
	|	ТОГДА 3
	|	КОГДА СостояниеОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|	ТОГДА 2
	|	ИНАЧЕ 1
	|	КОНЕЦ                                             КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостояниеОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостояниеОбменовДанными КАК СостояниеОбменовДанными
	|ГДЕ
	|	СостояниеОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|	И СостояниеОбменовДанными.УзелИнформационнойБазы.СтруктурнаяЕдиница.Родитель = &ПустаяСЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыОбмена.ИмяПланаОбмена                                     КАК ИмяПланаОбмена,
	|	ПланыОбмена.Код                                                КАК КодУзла,
	|	ПланыОбмена.УзелИнформационнойБазы                             КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(СостояниеОбменовДаннымиВыгрузка.РезультатВыполненияОбмена, 0) КАК РезультатОбменаВыгрузка,
	|	ЕСТЬNULL(СостояниеОбменовДаннымиЗагрузка.РезультатВыполненияОбмена, 0) КАК РезультатОбменаЗагрузка,
	|	СостояниеОбменовДаннымиЗагрузка.ДатаОкончания                          КАК ДатаОбменаЗагрузка,
	|	СостояниеОбменовДаннымиВыгрузка.ДатаОкончания                          КАК ДатаОбменаВыгрузка,
	|	СостояниеОбменовДаннымиЗагрузка.ОписаниеОшибки                         КАК ОписаниеОшибкиЗагрузка,
	|	СостояниеОбменовДаннымиВыгрузка.ОписаниеОшибки                         КАК ОписаниеОшибкиВыгрузка
	|ИЗ
	|	ПланыОбменаКонфигурации КАК ПланыОбмена
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеОбменовДаннымиВыгрузка КАК СостояниеОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостояниеОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеОбменовДаннымиЗагрузка КАК СостояниеОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостояниеОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|
	//|ГДЕ
	//|	ПланыОбмена.УзелИнформационнойБазы.СтруктурнаяЕдиница.Родитель = &ПустаяСЕ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланыОбмена.ИмяПланаОбмена,
	|	ПланыОбмена.Наименование
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПланыОбменаКонфигурации]", ТекстЗапросаПоПланамОбменаКонфигурации());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустаяСЕ",Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	
	СписокПлановОбмена = Новый СписокЗначений;
	СписокПлановОбмена.Добавить(Метаданные.ПланыОбмена.ОбменРБД.Имя, Метаданные.ПланыОбмена.ОбменРБД.Синоним);

	
	Для Каждого Элемент ИЗ СписокПлановОбмена Цикл
		
		ИмяПараметра = СтрЗаменить("ЭтотУзел[ИмяПланаОбмена]", "[ИмяПланаОбмена]", Элемент.Значение);
		Запрос.УстановитьПараметр(ИмяПараметра, ПланыОбмена[Элемент.Значение].ЭтотУзел());
		
	КонецЦикла;
	
	// обновляем данные в списке состояния узлов
	СписокСостоянияУзлов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаПоПланамОбменаКонфигурации()
	
	ТекстЗапроса = "";
	
	СписокПлановОбмена = Новый СписокЗначений;
	СписокПлановОбмена.Добавить(Метаданные.ПланыОбмена.ОбменРБД.Имя, Метаданные.ПланыОбмена.ОбменРБД.Синоним);
	
	Если СписокПлановОбмена.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонЗапроса = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//////////////////////////////////////////////////////// {[ИмяПланаОбмена]}
	|ВЫБРАТЬ
	|	Ссылка                      КАК УзелИнформационнойБазы,
	|	Наименование                КАК Наименование,
	|	Код                         КАК Код,
	|	""[ИмяПланаОбменаСиноним]"" КАК ИмяПланаОбмена
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена]
	|ГДЕ
	|	     Ссылка <> &ЭтотУзел[ИмяПланаОбмена]
	|	И НЕ ПометкаУдаления
	|";
	
	Для Каждого Элемент ИЗ СписокПлановОбмена Цикл
		
		ТекстЗапросаДляПланаОбмена = СтрЗаменить(ШаблонЗапроса,              "[ИмяПланаОбмена]",        Элемент.Значение);
		ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "[ИмяПланаОбменаСиноним]", Элемент.Представление);
		
		// удаляем литерал объединения для первой таблицы
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "ОБЪЕДИНИТЬ ВСЕ", "");
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляПланаОбмена;
		
	КонецЦикла;
	
	// возвращаемое значение функции
	ТекстЗапросаРезультат = "
	|//////////////////////////////////////////////////////// {ПланыОбменаКонфигурации}
	|ВЫБРАТЬ
	|	УзелИнформационнойБазы,
	|	Наименование,
	|	Код,
	|	ИмяПланаОбмена
	|ПОМЕСТИТЬ ПланыОбменаКонфигурации
	|ИЗ
	|	(
	|	[ТекстЗапроса]
	|	) КАК ВложенныйЗапрос
	|;
	|";
	
	ТекстЗапросаРезультат = СтрЗаменить(ТекстЗапросаРезультат, "[ТекстЗапроса]", ТекстЗапроса);
	
	Возврат ТекстЗапросаРезультат;
КонецФункции

&НаСервере
Процедура ДобавитьКомандыСозданияНовогоОбмена()
	
	//СписокПлановОбмена = ОбменДаннымиПовтИсп.ПолучитьСписокПлановОбменаКонфигурации();
	//
	//Для Каждого Элемент ИЗ СписокПлановОбмена Цикл
	//	
	//	ИмяПланаОбмена = Элемент.Значение;
	//	
	//	МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена];
	//	
	//	Если МенеджерПланаОбмена.ИспользоватьПомощникСозданияОбменаДанными() Тогда
	//		
	//		Команды.Добавить(ИмяПланаОбмена);
	//		Команды[ИмяПланаОбмена].Заголовок = МенеджерПланаОбмена.ЗаголовокКомандыДляСозданияНовогоОбменаДанными();
	//		Команды[ИмяПланаОбмена].Действие  = "ОткрытьПомощникНастройкиОбменаДанными";
	//		
	//		Элементы.Добавить(ИмяПланаОбмена, Тип("КнопкаФормы"), Элементы.ПодменюСоздать);
	//		Элементы[ИмяПланаОбмена].ИмяКоманды = ИмяПланаОбмена;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийИндексСтроки(ИмяТаблицы)
	
	// возвращаемое значение функции
	ИндексСтроки = Неопределено;
	
	// при обновлении монитора выполняем позиционирование курсора
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИндексСтроки = ЭтаФорма[ИмяТаблицы].Индекс(ТекущиеДанные);
		
	КонецЕсли;
	
	Возврат ИндексСтроки;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПозиционированиеКурсора(ИмяТаблицы, ИндексСтроки)
	
	Если ИндексСтроки <> Неопределено Тогда
		
		// выполняем проверки позиционирования курсора после получения новых данных
		Если ЭтаФорма[ИмяТаблицы].Количество() <> 0 Тогда
			
			Если ИндексСтроки > ЭтаФорма[ИмяТаблицы].Количество() - 1 Тогда
				
				ИндексСтроки = ЭтаФорма[ИмяТаблицы].Количество() - 1;
				
			КонецЕсли;
			
			// позиционируем курсор
			Элементы[ИмяТаблицы].ТекущаяСтрока = ЭтаФорма[ИмяТаблицы][ИндексСтроки].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыАдминистрированияСервернойИБ(Команда)
	ОткрытьФорму("ОбщаяФорма.ПараметрыАдминистрированияСервернойИБ", , 
					ЭтаФорма,
					,
					);
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьМониторПоВремени",60);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМониторПоВремени()
	ОбновитьМонитор();
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьУправлениеРегистрацией(Команда)
	ОткрытьФорму("ОбщаяФорма.УправлениеРегистрацией",Новый Структура("ПланОбмена", "ОбменРБД"),ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура СписокСостоянияУзловПриАктивизацииПоля(Элемент)
	//Если Элемент.ТекущийЭлемент.Родитель.Имя = "ГруппаСостоянияВыгрузки" Тогда
		//ОписаниеОшибки = Элементы.СписокСостоянияУзлов.ТекущиеДанные.ОписаниеОшибкиВыгрузка;
	//ИначеЕсли Элемент.ТекущийЭлемент.Родитель.Имя = "ГруппаСостоянияЗагрузки" Тогда
	//	ОписаниеОшибки = Элементы.СписокСостоянияУзлов.ТекущиеДанные.ОписаниеОшибкиЗагрузка;
	//Иначе	
	//	ОписаниеОшибки = "";
	//КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура Фильтр1(Команда)
	Элементы.СписокСостоянияУзлов.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатОбменаВыгрузка", 1); 
КонецПроцедуры


&НаКлиенте
Процедура Фильтр2(Команда)
	Элементы.СписокСостоянияУзлов.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатОбменаВыгрузка", 2); 
КонецПроцедуры


&НаКлиенте
Процедура Фильтр3(Команда)
	Элементы.СписокСостоянияУзлов.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатОбменаВыгрузка", 3); 
КонецПроцедуры


&НаКлиенте
Процедура Фильтр0(Команда)
	Элементы.СписокСостоянияУзлов.ОтборСтрок = Новый ФиксированнаяСтруктура("РезультатОбменаВыгрузка", 0); 
КонецПроцедуры


&НаКлиенте
Процедура Фильтр4(Команда)
	Элементы.СписокСостоянияУзлов.ОтборСтрок = Неопределено; 
	ОбновитьСписокСостоянияУзлов();
КонецПроцедуры

