
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСписокПлановОбмена();
	ЗаполнитьКоллекциюМетаданных();
	Если Параметры.Свойство("ПланОбмена") Тогда
		ПланОбмена = Параметры.ПланОбмена;
		ЗаполнитьСписокУзлов(ПланОбмена);
		ЗаполнитьДеревоМетаданных(ПланОбмена);
		ПоказатьИзмененияНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПлановОбмена()
	Список = Элементы.ПланОбмена.СписокВыбора;
	Для каждого План из Метаданные.ПланыОбмена Цикл
		Список.Добавить(План.Имя,План.Синоним);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокУзлов(ПланОбмена)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Обмен.Ссылка КАК Значение
	|ИЗ
	|	ПланОбмена."+ПланОбмена+" КАК Обмен
	|ГДЕ
	|	Обмен.Ссылка <> &Ссылка
	|	И НЕ Обмен.ПометкаУдаления");
	Запрос.УстановитьПараметр("Ссылка",ПланыОбмена[ПланОбмена].ЭтотУзел());	
	СписокУзлов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение"));
КонецПроцедуры

&НаКлиенте
Процедура ПланОбменаПриИзменении(Элемент)
	ЗаполнитьСписокУзлов(ПланОбмена);
	ЗаполнитьДеревоМетаданных(ПланОбмена);
	ПоказатьИзмененияНаСервере();
	РазвернутьДерево();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМетаданных(ПланОбмена)
	ДеревоОбъектовМетаданных.ПолучитьЭлементы().Очистить();
	СписокМетаданныхВторогоУровня.Очистить();
	ТекущийПланОбмена = Метаданные.ПланыОбмена[ПланОбмена];
	Для Каждого Элемент Из ТекущийПланОбмена.Состав Цикл
		Родитель = ПолучитьРодителя(Элемент.Метаданные);
		ЭлементДерева = Родитель.ПолучитьЭлементы().Добавить();
		ЭлементДерева.Имя = Элемент.Метаданные.Имя;
		ЭлементДерева.Представление = Элемент.Метаданные.Синоним;
		ЭлементДерева.Пометка = Истина;
		ЭлементДерева.Картинка = Родитель.Картинка;
		ЭлементДерева.ПолноеИмя = Элемент.Метаданные.ПолноеИмя();
		ЭлементДерева.АвтоРегистрация = ?(Элемент.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить,Истина,Ложь);
		СписокМетаданныхВторогоУровня.Добавить(Элемент.Метаданные.ПолноеИмя(),,ЭлементДерева.АвтоРегистрация);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьРодителя(Элемент)
	Для Каждого ЭлементСписка Из СписокМетаданныхПервогоУровня Цикл
		ПервыйУровень = Метаданные[ЭлементСписка.Значение];
		Если ПервыйУровень.Содержит(Элемент) Тогда
			Для Каждого ЭлементДерева Из ДеревоОбъектовМетаданных.ПолучитьЭлементы() Цикл
				Если ЭлементДерева.Имя = ЭлементСписка.Значение Тогда
					Возврат ЭлементДерева;
				КонецЕсли;
			КонецЦикла;
			ЭлементДерева = ДеревоОбъектовМетаданных.ПолучитьЭлементы().Добавить();
			ЭлементДерева.Имя = ЭлементСписка.Значение;
			ЭлементДерева.Представление = ЭлементСписка.Представление;
			ЭлементДерева.Пометка = Истина;
			ЭлементДерева.Картинка = ЭлементСписка.Картинка;
			Возврат ЭлементДерева;
		КонецЕсли;
	КонецЦикла;	
КонецФункции

&НаСервере
Процедура ЗаполнитьКоллекциюМетаданных()
	СписокМетаданныхПервогоУровня.Добавить("Константы","Константы",,БиблиотекаКартинок.Константа);
	СписокМетаданныхПервогоУровня.Добавить("Справочники","Справочники",,БиблиотекаКартинок.Справочник);
	СписокМетаданныхПервогоУровня.Добавить("Документы","Документы",,БиблиотекаКартинок.Документ);
	СписокМетаданныхПервогоУровня.Добавить("ПланыВидовХарактеристик","Планы видов характеристик",,БиблиотекаКартинок.ПланВидовХарактеристик);
	СписокМетаданныхПервогоУровня.Добавить("ПланыСчетов","Планы счетов",,БиблиотекаКартинок.ПланСчетов);
	СписокМетаданныхПервогоУровня.Добавить("ПланыВидовРасчета","Планы видов расчета",,БиблиотекаКартинок.ПланВидовХарактеристик);
	СписокМетаданныхПервогоУровня.Добавить("РегистрыСведений","Регистры сведений",,БиблиотекаКартинок.РегистрСведений);
	СписокМетаданныхПервогоУровня.Добавить("РегистрыНакопления","Регистры накопления",,БиблиотекаКартинок.РегистрНакопления);
	СписокМетаданныхПервогоУровня.Добавить("РегистрыБухгалтерии","Регистры бухгалтерии",,БиблиотекаКартинок.РегистрБухгалтерии);
	//СписокМетаданныхПервогоУровня.Добавить("РегистрыРасчета","Регистры расчета",,БиблиотекаКартинок.РегистрРасчета);
	СписокМетаданныхПервогоУровня.Добавить("БизнесПроцессы","Бизнес процессы",,БиблиотекаКартинок.БизнесПроцесс);
	СписокМетаданныхПервогоУровня.Добавить("Задачи","Задачи",,БиблиотекаКартинок.Задача);
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьИзмененияНаСервере()
	Узлы = Новый Массив;
	Для каждого Стр ИЗ СписокУзлов Цикл
		Если Стр.Пометка Тогда
			Узлы.Добавить(Стр.Значение);
		КонецЕсли; 
	КонецЦикла;  
	Для каждого ПервыйУровень из ДеревоОбъектовМетаданных.ПолучитьЭлементы() Цикл
		Для каждого ВторойУровень из ПервыйУровень.ПолучитьЭлементы() Цикл
			Если ВторойУровень.Пометка Тогда
				Если ПараметрыСеанса.Отладка Тогда
					Если ПланОбмена = ПланыОбмена.ОбменRIB И НЕ ВторойУровень.АвтоРегистрация Тогда
						Продолжить;
					КонецЕсли;
					//Если НЕ ВторойУровень.АвтоРегистрация И ПервыйУровень.Имя <> "Документы" Тогда
					//	Продолжить;
					//КонецЕсли;
				Иначе	
					Если НЕ ВторойУровень.АвтоРегистрация Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ПервыйУровень.Имя = "Документы" И ЗначениеЗаполнено(Период.ДатаНачала) И ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	Док.Ссылка
						|ИЗ
						|	Документ."+ВторойУровень.Имя+" КАК Док
						|ГДЕ
						|	Док.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";

					Запрос.УстановитьПараметр("ДатаНачала",Период.ДатаНачала);
					Запрос.УстановитьПараметр("ДатаОкончания",Период.ДатаОкончания);

					Результат = Запрос.Выполнить();

					ВыборкаДетальныеЗаписи = Результат.Выбрать();

					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ПланыОбмена.ЗарегистрироватьИзменения(Узлы, ВыборкаДетальныеЗаписи.Ссылка);
					КонецЦикла;
				//ИначеЕсли ПервыйУровень.Имя = "Константы" Тогда
				//	СсылкаНаКонстанту = Константы[ВторойУровень.Имя].СоздатьМенеджерЗначения();
				//	ПланыОбмена.ЗарегистрироватьИзменения(Узлы, СсылкаНаКонстанту);
				Иначе
					ОбъектМетаданных = Метаданные[ПервыйУровень.Имя][ВторойУровень.Имя];
					ПланыОбмена.ЗарегистрироватьИзменения(Узлы, ОбъектМетаданных);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	ПоказатьИзмененияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтменитьРегистрациюНаСервере()
	Узлы = Новый Массив;
	Для каждого Стр ИЗ СписокУзлов Цикл
		Если Стр.Пометка Тогда
			Узлы.Добавить(Стр.Значение);
		КонецЕсли; 
	КонецЦикла;
	Для каждого ПервыйУровень из ДеревоОбъектовМетаданных.ПолучитьЭлементы() Цикл
		Для каждого ВторойУровень из ПервыйУровень.ПолучитьЭлементы() Цикл
			Если ВторойУровень.Пометка Тогда
				Если Не ПараметрыСеанса.Отладка Тогда
					Если НЕ ВторойУровень.АвтоРегистрация Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				ОбъектМетаданных = Метаданные[ПервыйУровень.Имя][ВторойУровень.Имя];
				ПланыОбмена.УдалитьРегистрациюИзменений(Узлы, ОбъектМетаданных);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	ПоказатьИзмененияНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПоказатьИзмененияНаСервере()
	СписокОтмеченныхУзлов = Новый СписокЗначений;
	Для Каждого Строка Из СписокУзлов Цикл
		Если Строка.Пометка Тогда
			СписокОтмеченныхУзлов.Добавить(Строка.Значение);
		КонецЕсли;	
	КонецЦикла;	
	ВсеОтмеченные = 0;
	Для Каждого ПервыйУровень Из ДеревоОбъектовМетаданных.ПолучитьЭлементы() Цикл
		Для Каждого ВторойУровень Из ПервыйУровень.ПолучитьЭлементы() Цикл
			Если ВторойУровень.Пометка = 1 Тогда
				ВсеОтмеченные = ВсеОтмеченные + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если СписокОтмеченныхУзлов.Количество() = 0 Тогда
		ДеревоОбъектов.ПолучитьЭлементы().Очистить();
		Возврат;
	КонецЕсли;	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	ВсеКлассы = 0;
	ВсеПодклассы = 0;
	ПервыйВход = Истина;
	ВсегоПервыйУровень = ДеревоОбъектовМетаданных.ПолучитьЭлементы().Количество();
	
	Для Каждого ПервыйУровень Из ДеревоОбъектовМетаданных.ПолучитьЭлементы() Цикл
		Класс = ПервыйУровень.Имя;
		Картинка = ПервыйУровень.Картинка;
		ВсеКлассы = ВсеКлассы + 1;
		ВсегоВторойУровень = ПервыйУровень.ПолучитьЭлементы().Количество();
		Для Каждого ВторойУровень Из ПервыйУровень.ПолучитьЭлементы() Цикл
			Если ВторойУровень.Пометка = Ложь Тогда
				Продолжить;
			КонецЕсли;	
			ВсеПодклассы = ВсеПодклассы + 1;
			ПодКласс = ВторойУровень.Имя;
			ИмяОбъекта = ВторойУровень.ПолноеИмя;
			Если Элементы.ДеревоОбъектовПодробно.Пометка Тогда
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	&Класс"+ВсеКлассы+" КАК Класс,
				|	&ПодКласс"+ВсеПодклассы+" КАК ПодКласс,
				|	1 КАК Итог,
				|	&Картинка"+ВсеКлассы+" КАК Картинка,";
				Если Класс = "Константы" Тогда
					Запрос.Текст = Запрос.Текст + "
					|	&ПодКласс"+ВсеПодклассы+" КАК Объект";
				ИначеЕсли Класс = "РегистрыСведений" ИЛИ Класс = "РегистрыНакопления" ИЛИ Класс = "РегистрыБухгалтерии" Тогда
					ПервыйВход = Истина;
					Для Каждого Измерение Из Метаданные[ПервыйУровень.Имя][ВторойУровень.Имя].Измерения Цикл
						//popn+
						//поместил этот код в попытку так как у регистра накопления нет свойства ОсновнойОтбор
						Попытка 
							Если НЕ Измерение.ОсновнойОтбор Тогда
								Продолжить;
							КонецЕсли;
						Исключение
							Продолжить;
						КонецПопытки;
						//popn-
						Если Строка(Измерение.Тип) = "Число" Тогда
							Продолжить;
						КонецЕсли;	
						Если НЕ ПервыйВход Тогда
							Запрос.Текст = Запрос.Текст + "+&Разделитель+";
						КонецЕсли;
						Если Строка(Измерение.Тип) = "Строка" Тогда
							Запрос.Текст = Запрос.Текст + "
							|	Изменения."+Измерение.Имя;
							//popn+
						ИначеЕсли Строка(Измерение.Имя) = "КодОперации" Тогда
							Запрос.Текст = Запрос.Текст + """Код операции""";
							//popn-
						Иначе
							Запрос.Текст = Запрос.Текст + "
							|	ПОДСТРОКА(Изменения."+Измерение.Имя+".Наименование, 1, 1000)";
						КонецЕсли;	
						ПервыйВход = Ложь;
					КонецЦикла;
					Если ПервыйВход Тогда
						Запрос.Текст = Запрос.Текст + "
						|	&ПодКласс"+ВсеПодклассы+" КАК Объект";
					Иначе	
						Запрос.Текст = Запрос.Текст + "
						|	КАК Объект";
					КонецЕсли;	
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|	Изменения.Ссылка КАК Объект";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ИЗ
				|	"+ИмяОбъекта+".Изменения КАК Изменения
				|ГДЕ
				|	Изменения.Узел В (&Узел)";
				Если НЕ (ВсеПодклассы = ВсеОтмеченные) Тогда
					Запрос.Текст = Запрос.Текст + " 
					|ОБЪЕДИНИТЬ ВСЕ";
				Иначе	
					Запрос.Текст = Запрос.Текст + "
					|ИТОГИ
					|	СУММА(Итог)
					|ПО
					|	Класс,
					|	ПодКласс";
				КонецЕсли;
			Иначе
				Если ПервыйВход = Истина Тогда
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ
					|	ВложенныйЗапрос.Класс КАК Класс,
					|	ВложенныйЗапрос.ПодКласс КАК ПодКласс,
					|	ВложенныйЗапрос.Картинка КАК Картинка,
					|	ВложенныйЗапрос.ПодКласс КАК Объект,
					|	ВложенныйЗапрос.Итог КАК Итог
					|ИЗ (";	
					ПервыйВход = Ложь;
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	&Класс"+ВсеКлассы+" КАК Класс,
				|	&ПодКласс"+ВсеПодклассы+" КАК ПодКласс,
				|	&Картинка"+ВсеКлассы+" КАК Картинка,
				|	&ПодКласс"+ВсеПодклассы+" КАК Объект,";
				Если Класс = "Константы" ИЛИ Класс = "РегистрыСведений" ИЛИ Класс = "РегистрыНакопления" ИЛИ Класс = "РегистрыБухгалтерии" Тогда
					Запрос.Текст = Запрос.Текст + "
					|	Количество(&ПодКласс"+ВсеПодклассы+") КАК Итог";
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|	Количество(Изменения.Ссылка) КАК Итог";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ИЗ
				|	"+ИмяОбъекта+".Изменения КАК Изменения
				|ГДЕ
				|	Изменения.Узел В (&Узел)";
				Если НЕ (ВсеПодклассы = ВсеОтмеченные) Тогда
					Запрос.Текст = Запрос.Текст + " 
					|ОБЪЕДИНИТЬ ВСЕ";
				Иначе	
					Запрос.Текст = Запрос.Текст + "
					|)КАК ВложенныйЗапрос
					|ГДЕ ВложенныйЗапрос.ИТОГ>0
					|ИТОГИ
					|	СУММА(Итог)
					|ПО
					|	Класс";
					//|	ПодКласс";
				КонецЕсли;
			КонецЕсли;   
			Запрос.УстановитьПараметр("ПодКласс"+ВсеПодклассы,ПодКласс);
			Запрос.УстановитьПараметр("Разделитель",", ");
		КонецЦикла;
		Запрос.УстановитьПараметр("Класс"+ВсеКлассы,Класс);
		Запрос.УстановитьПараметр("Картинка"+ВсеКлассы,"");
	КонецЦикла;
	Запрос.УстановитьПараметр("Узел",СписокОтмеченныхУзлов);
	ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	Если Запрос.Текст <> "" Тогда
		Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ЗначениеВДанныеФормы(Дерево,ДеревоОбъектов);
		Для Каждого ПервыйУровень Из ДеревоОбъектов.ПолучитьЭлементы() Цикл
			Картинка = СписокМетаданныхПервогоУровня.НайтиПоЗначению(ПервыйУровень.Класс).Картинка;
			ПервыйУровень.Картинка = Картинка;
			ПервыйУровень.Объект = ПервыйУровень.Класс;
			Для Каждого ВторойУровень Из ПервыйУровень.ПолучитьЭлементы() Цикл
				ВторойУровень.Картинка = Картинка;
				ВторойУровень.Объект = ВторойУровень.ПодКласс;
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИзменения(Команда)
	ПоказатьИзмененияНаСервере();
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПередНачаломИзменения(Элемент, Отказ)
	Если ТипЗнч(Элемент.ТекущиеДанные.Объект) = Тип("Строка") Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменения(Команда)
	ЗарегистрироватьИзмененияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРегистрацию(Команда)
	ОтменитьРегистрациюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для Каждого Строка из ДеревоОбъектовМетаданных.ПолучитьЭлементы() Цикл
		Строка.Пометка = 1;
		ПометитьВложенныеЭлементы(Строка);
	КонецЦикла;	
	ПоказатьИзмененияНаСервере();
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	Для Каждого Строка из ДеревоОбъектовМетаданных.ПолучитьЭлементы() Цикл
		Строка.Пометка = 0;
		ПометитьВложенныеЭлементы(Строка);
	КонецЦикла;
	ПоказатьИзмененияНаСервере();
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьДеревоМетаданных(Команда)
	Пометка = Элементы.ДеревоОбъектовМетаданныхРазвернутьСвернутьДеревоМетаданных.Пометка;
	Элементы.ДеревоОбъектовМетаданныхРазвернутьСвернутьДеревоМетаданных.Пометка = НЕ Пометка;
	Если Пометка Тогда
		Для Каждого Строка из ДеревоОбъектовМетаданных.ПолучитьЭлементы() Цикл
			Элементы.ДеревоОбъектовМетаданных.Развернуть(Строка.ПолучитьИдентификатор());
		КонецЦикла;	
	Иначе
		Для Каждого Строка из ДеревоОбъектовМетаданных.ПолучитьЭлементы() Цикл
			Элементы.ДеревоОбъектовМетаданных.Свернуть(Строка.ПолучитьИдентификатор());
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьЭлементыРодителей(Элемент)
	Родитель = Элемент.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = 2 Тогда
		Родитель.Пометка = 2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементов(ЭлементыРодителя);
	КонецЕсли;
	ПометитьЭлементыРодителей(Родитель);
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПометкиЭлементов(ЭлементыРодителя)
	ЕстьПомеченые    = Ложь;
	ЕстьНепомеченные = Ложь;
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченые И ЕстьНепомеченные) Тогда
			ЕстьПомеченые    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		Иначе
			ЕстьПомеченые    = ЕстьПомеченые    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		КонецЕсли;
	КонецЦикла;
	Возврат ?(ЕстьПомеченые И ЕстьНепомеченные, 2, ?(ЕстьПомеченые, 1, 0));
КонецФункции

&НаКлиенте
Процедура ПометитьВложенныеЭлементы(Элемент)
	ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
	Если ВложенныеЭлементы.Количество() <> 0 Тогда
		Для Каждого ВложенныйЭлемент ИЗ ВложенныеЭлементы Цикл
			ВложенныйЭлемент.Пометка = Элемент.Пометка;
			ПометитьВложенныеЭлементы(ВложенныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхПометкаПриИзменении(Элемент)
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	ПометитьВложенныеЭлементы(ТекущиеДанные);
	ПометитьЭлементыРодителей(ТекущиеДанные);
	ПоказатьИзмененияНаСервере();
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьДеревоОбъектов(Команда)
	Пометка = Элементы.ДеревоОбъектовРазвернутьСвернутьДеревоОбъектов.Пометка;
	Элементы.ДеревоОбъектовРазвернутьСвернутьДеревоОбъектов.Пометка = НЕ Пометка;
	Если Пометка Тогда
		Для Каждого Строка из ДеревоОбъектов.ПолучитьЭлементы() Цикл
			Элементы.ДеревоОбъектов.Развернуть(Строка.ПолучитьИдентификатор(),Истина);
		КонецЦикла;	
	Иначе
		Для Каждого Строка из ДеревоОбъектов.ПолучитьЭлементы() Цикл
			Элементы.ДеревоОбъектов.Свернуть(Строка.ПолучитьИдентификатор());
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СписокУзловПриИзменении(Элемент)
	ПоказатьИзмененияНаСервере();
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРегистрациюОбъектов(Команда)
	МассивОбъектов = Новый Массив;
	Для Каждого Строка Из Элементы.ДеревоОбъектов.ВыделенныеСтроки Цикл
		Объект = Элементы.ДеревоОбъектов.ДанныеСтроки(Строка).Объект;
		Если ТипЗнч(Объект) <> Тип("Строка") Тогда
			МассивОбъектов.Добавить(Объект);
		КонецЕсли;	
	КонецЦикла;	
	ОтменитьРегистрациюОбъектовНаСервере(МассивОбъектов);
	РазвернутьДерево();	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРегистрациюОбъектовНаСервере(МассивОбъектов)
	Узлы = Новый Массив;
	Для каждого Стр ИЗ СписокУзлов Цикл
		Если Стр.Пометка Тогда
			Узлы.Добавить(Стр.Значение);
		КонецЕсли; 
	КонецЦикла;
	ТекущийПланОбмена = Метаданные.ПланыОбмена[ПланОбмена];
	Состав = ТекущийПланОбмена.Состав;
	Для каждого Строка из МассивОбъектов Цикл
		Если Не ПараметрыСеанса.Отладка Тогда
			Если НЕ СписокМетаданныхВторогоУровня.НайтиПоЗначению(Строка.Метаданные().ПолноеИмя()).Пометка Тогда
				Продолжить;  
			КонецЕсли;
		КонецЕсли;	
		ПланыОбмена.УдалитьРегистрациюИзменений(Узлы, Строка);
	КонецЦикла;
	ПоказатьИзмененияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРегистрациюВсехОбъектов(Команда)
	ОтменитьРегистрациюВсехОбъектовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтменитьРегистрациюВсехОбъектовНаСервере()
	Для каждого Стр ИЗ СписокУзлов Цикл
		Если Стр.Пометка Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Стр.Значение);
		КонецЕсли; 
	КонецЦикла;
	ПоказатьИзмененияНаСервере();
КонецПроцедуры

//++БИТ БВО 2015-08-28 - Для принудительной отмены регистрации у объектов без авторегистрации
&НаСервере
Процедура ОтменитьРегистрациюТекущегоОбъектаНаСервере(СсылкаНаОбъект)	
	
	Если ТипЗнч(СсылкаНаОбъект) <> Тип("Строка") Тогда
		Узлы = Новый Массив;
		Для каждого Стр ИЗ СписокУзлов Цикл
			Если Стр.Пометка Тогда
				Узлы.Добавить(Стр.Значение);
			КонецЕсли; 
		КонецЦикла;	
		ПланыОбмена.УдалитьРегистрациюИзменений(Узлы, СсылкаНаОбъект);	
		ПоказатьИзмененияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРегистрациюТекущегоОбъекта(Команда)
	
	ТекСсылка = Элементы.ДеревоОбъектов.ТекущиеДанные.Объект;
	ОтменитьРегистрациюТекущегоОбъектаНаСервере(ТекСсылка);
	
КонецПроцедуры
//--БИТ БВО 2015-08-28

&НаКлиенте
Процедура Подробно(Команда)
	Элементы.ДеревоОбъектовПодробно.Пометка = НЕ Элементы.ДеревоОбъектовПодробно.Пометка;
	ПоказатьИзмененияНаСервере();
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	Для Каждого ПервыйУровень Из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОбъектов.Развернуть(ПервыйУровень.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Процедура ВыборПериода(Команда)
	ФормаПериода = Новый ДиалогРедактированияСтандартногоПериода(); 
	ФормаПериода.Период = Период;
	Если ФормаПериода.Редактировать() Тогда
		Период = ФормаПериода.Период;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Строка = Элементы.ДеревоОбъектовМетаданных.ДанныеСтроки(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(Строка.ПолноеИмя) Тогда
		Если МожноЗарегистрироватьОбъект(Строка.АвтоРегистрация) Тогда
			Попытка
				П = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе", Истина,Ложь);
				ФормаВыбора= ПолучитьФорму(Строка.ПолноеИмя+".ФормаВыбора",П,Элемент);
				ФормаВыбора.Открыть();
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Узлы = Новый Массив;
	Для каждого Стр ИЗ СписокУзлов Цикл
		Если Стр.Пометка Тогда
			Узлы.Добавить(Стр.Значение);
		КонецЕсли; 
	КонецЦикла;
	ЗарегистрироватьОбъект(Узлы, ВыбранноеЗначение);
	ПоказатьИзмененияНаСервере();
	РазвернутьДерево();
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОбъект(Узлы,ВыбранноеЗначение)
	ПланыОбмена.ЗарегистрироватьИзменения(Узлы, ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Функция МожноЗарегистрироватьОбъект(АвтоРегистрация)
	Если ПараметрыСеанса.Отладка Тогда
		Если ПланОбмена = ПланыОбмена.ОбменRIB И НЕ АвтоРегистрация Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе	
		Если НЕ АвтоРегистрация Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

