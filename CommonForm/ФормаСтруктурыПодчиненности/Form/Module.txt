&НаСервере
Перем мДерево, мУжеВСписке;

&НаСервере
Перем мКэшРеквизитовДокумента;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура вывода дерева структуры подчиненности документа.
//
Процедура ВывестиДеревоДокументов()
	
	Попытка
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		мДерево = ДеревоДокументов;	
		мУжеВСписке = Новый Соответствие;
		мКэшРеквизитовДокумента = Новый Соответствие;
		
		ВывестиРодительскиеДокументы(ДокументСсылка);	
		
		ВывестиПодчиненныеДокументы(мДерево);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура выполняет вывод родительских документов.
//
Процедура ВывестиРодительскиеДокументы(ДокументСсылка)
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	СписокРеквизитов = Новый СписокЗначений;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			
			Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
				И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Попытка
					ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая() И ТипЗнч(ЗначениеРеквизита) = ТекущийТип 
					И мУжеВСписке[ЗначениеРеквизита] = Неопределено И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено Тогда
					Попытка
						СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
					Исключение
						ОтладкаТекстОшибки = ОписаниеОшибки();
					КонецПопытки;	
				КонецЕсли;
			КонецЕсли;			
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		СтрРеквизитов = "";
		
		Попытка
			СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);				
				Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
				КонецЕсли;						
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл
				Попытка
					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Исключение
					Продолжить;
				КонецПопытки;
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения = Неопределено Тогда
					// базовый тип
					Продолжить;
				КонецЕсли;
				
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
					И Метаданные.Документы.Содержит(МетаданныеЗначения)
					И мУжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
					Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						Попытка
							СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
						Исключение
							ОтладкаТекстОшибки = ОписаниеОшибки();
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
	КонецЦикла;
	СписокРеквизитов.СортироватьПоПредставлению();
	мУжеВСписке.Вставить(ДокументСсылка, Истина);
	
	Если СписокРеквизитов.Количество() = 1 Тогда
		ВывестиРодительскиеДокументы(СписокРеквизитов[0].Значение);
	ИначеЕсли СписокРеквизитов.Количество() > 1 Тогда
		ВывестиБезРодителей(СписокРеквизитов);		
	КонецЕсли;
	
	
	СтрокаДерева = мДерево.ПолучитьЭлементы().Добавить();
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, Представление, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
	| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Выборка  = Запрос.Выполнить().Выбрать();
	ЕСли Выборка.Следующий() Тогда		
		СтрокаДерева.Ссылка= Выборка.Ссылка;
		СтрокаДерева.Проведен = Выборка.Проведен;
		СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
		СтрокаДерева.ДокументПредставление = Выборка.Представление;
		СтрокаДерева.ВидДокумента = Выборка.Метаданные;				
		СтрокаДерева.картинкаСтрок =?(выборка.пометкаУдаления,БиблиотекаКартинок.ПометкаУдаления,?(Выборка.проведен,библиотекакартинок.Проведен,библиотекаКартинок.Записан));
	Иначе
		СтрокаДерева.Ссылка= ДокументСсылка;
		СтрокаДерева.ДокументПредставление = Строка(ДокументСсылка);
		СтрокаДерева.картинкаСтрок =?(ДокументСсылка.пометкаУдаления,БиблиотекаКартинок.ПометкаУдаления,?(ДокументСсылка.проведен,библиотекакартинок.Проведен,библиотекаКартинок.Записан));
	КонецЕсли;
	
	мДерево = СтрокаДерева;
	
КонецПроцедуры

&НаСервере
// Процедура осуществляет вывод родительских документов с ограничением по уровню в дереве.
//
Процедура ВывестиБезРодителей(СписокДокументов)
	
	Для Каждого ЭлементСписка Из СписокДокументов Цикл
		
		МетаданныеДокумента = ЭлементСписка.Значение.Метаданные();
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, Представление, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
		| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ЭлементСписка.Значение);
		
		
		Выборка  = Запрос.Выполнить().Выбрать();
		ЕСли Выборка.Следующий() Тогда		
			Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
				СтрокаДерева = мДерево.ПолучитьЭлементы().Добавить();
				СтрокаДерева.Ссылка= Выборка.Ссылка;
				СтрокаДерева.Проведен = Выборка.Проведен;
				СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
				СтрокаДерева.ДокументПредставление = Выборка.Представление;
				СтрокаДерева.ВидДокумента = Выборка.Метаданные;			
				СтрокаДерева.ОграничениеПоРодителям = Истина;
				СтрокаДерева.картинкаСтрок =?(выборка.пометкаУдаления,БиблиотекаКартинок.ПометкаУдаления,?(Выборка.проведен,библиотекакартинок.Проведен,библиотекаКартинок.Записан));
				мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	мДерево = СтрокаДерева;
	
КонецПроцедуры

&НаСервере
// Процедура осуществляет вывод подчиненных документов.
//
Процедура ВывестиПодчиненныеДокументы(СтрокаДерева)
	
	ТекущийДокумент = СтрокаДерева.Ссылка;	
	Таблица = ПолучитьСписокПодчиненныхДокументов(ТекущийДокумент);	
	КэшПоТипамДокументов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;			
		ИмяДокумента = МетаданныеДокумента.Имя;
		СинонимДокумента = МетаданныеДокумента.Синоним;
		
		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента);
		
		СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
		Если СтруктураТипа = Неопределено Тогда
			СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
			КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
		КонецЕсли;
		СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);		
	КонецЦикла;
	
	ЕСли КэшПоТипамДокументов.Количество() = 0 ТОгда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";
	Запрос = Новый Запрос;
	Для Каждого КлючИЗначение ИЗ КэшПоТипамДокументов Цикл
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
		|ВЫБРАТЬ ", "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		//popn+
		//|Дата, Ссылка, Представление, Проведен, ПометкаУдаления,""" + МетаданныеДокумента.Имя + """ КАК Метаданные 
		|Дата, Ссылка, Представление, Проведен, ПометкаУдаления,""" + КлючИЗначение.Ключ + """ КАК Метаданные 
		//popn-
		|ИЗ Документ." + КлючИЗначение.Ключ + "
		|ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";
		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
			НоваяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			НоваяСтрока.ДокументПредставление = Выборка.Представление;
			НоваяСтрока.Проведен = Выборка.Проведен;
			НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;		
			НоваяСтрока.ВидДокумента = Выборка.Метаданные;				
			НоваяСтрока.картинкаСтрок =?(выборка.пометкаУдаления,БиблиотекаКартинок.ПометкаУдаления,?(Выборка.проведен,библиотекакартинок.Проведен,библиотекаКартинок.Записан));
			мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			ВывестиПодчиненныеДокументы(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте                                                                                       
// Процедура выполняет открытие формы текущего документа.
//                                                         
Процедура ОткрытьФормуДокумента()
	Попытка
		СтруктураПараметров = Новый Структура("Ключ", Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
		ОткрытьФорму("Документ."+Элементы.ДеревоДокументов.ТекущиеДанные.ВидДокумента + ".ФормаОбъекта", СтруктураПараметров,,Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры


&НаСервере                                                                                       
// Функция выполняет поиск подчиненных документов текущего документа.
//
Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора.СтруктураПодчиненности.Состав Цикл
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным);
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + СтруктураПутьКДанным.ВидОбъекта + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
		
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ОБЪЕДИНИТЬ
		|ВЫБРАТЬ") + "
		|" + СтруктураПутьКДанным.ВидОбъекта +".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + СтруктураПутьКДанным.ВидОбъекта + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|";
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
// Функция возвращает путь к объекту метаданных
// ТипОбъектаМетаданных.ИмяДокумента.ТабличнаяЧасть.ИмяТабличнойЧасти.Реквизит.ИмяРеквизита.
// ТипОбъектаМетаданных должен быть Справочник или Документ.
//
// Параметры:
//  ПутьКДанным - строка.
//
// Возвращаемое значение:
//  Структура - путь к объекту метаданных
//
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным) Экспорт
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 по 3 Цикл
		
		Точка = Найти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
		Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка+1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 по 5  Цикл 
			
			Точка = Найти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если Структура.ТипОбъекта = "Документ" Тогда
		Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
	Иначе
		Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // РазобратьПутьКОбъектуМетаданных()

&НаКлиенте                                                                                       
// Процедура закрывает форму с предупреждением.
//
Процедура ЗакрытьФормуСПредупреждением(ТекстПредупреждения)
	
	ЭтаФорма.Закрыть();
	Предупреждение(ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере                                                                                       
// Процедура дополняет кэш метаданных.
//
Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента)
	
	РеквизитыДокумента = мКэшРеквизитовДокумента[ИмяДокумента];
	Если РеквизитыДокумента = Неопределено Тогда
		РеквизитыДокумента = Новый Соответствие;		
		мКэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере                                                                                       
// Функция проверяет доступность изменяемого документа.
//
Функция ОсновнойДокументЕщеДоступен()
	
	ИмяТекущегоДокумента = ДокументСсылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Представление ИЗ Документ." + ИмяТекущегоДокумента + " ГДЕ Ссылка = &ТекущийДокумент";
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере                                                                                       
// Функция проверяет, разрешено или нет проведение документа.
//
Функция ПроведениеРазрешено(СсылкаНаДокумент)	
	
	Возврат СсылкаНаДокумент.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
КонецФункции

&НаКлиенте                                                                                       
// Процедура обновляет доступность кнопок Провести и Отменить проведение.
//
Процедура ОбновитьДоступностьКнопок()
	
	ПроведениеРазрешено = ПроведениеРазрешено(Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
	
	Элементы.КнопкаПровести.        Доступность = ПроведениеРазрешено;
	Элементы.КнопкаОтменаПроведения.Доступность = ПроведениеРазрешено;
	
КонецПроцедуры // () 

&НаСервере                                                                                       
// Функция осуществляет проведение выбранного документа.
//
Функция ПровестиСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Возврат Объект.Проведен;
	
КонецФункции

&НаСервере                                                                                       
// Функция осуществляет отмену проведения выбранного документа.
//
Функция ОтменаПроведенияСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Возврат Объект.Проведен;
	
КонецФункции

&НаСервере                                                                                       
// Функция устанавливает пометку на удаление выбранного документа.
//
Функция УстановитьПометкуУдаленияСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Объект.УстановитьПометкуУдаления(Не Объект.ПометкаУдаления);
	Возврат Объект.ПометкаУдаления;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере                                                                                       
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ДокументСсылка = Неопределено ИЛИ Параметры.ДокументСсылка.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = Параметры.ДокументСсылка; 
	
	ВывестиДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте                                                                                       
// Процедура - обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДеревоДокументов.ТекущаяСтрока = ДеревоДокументов.ПолучитьЭлементы()[0];
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события Перед началом изменения табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовПередНачаломИзменения(Элемент, Отказ)	
	ОткрытьФормуДокумента();
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте                                                                                        
// Процедура - обработчик действия Открыть.
//
Процедура ОткрытьФормуДействие(Кнопка)
	ОткрытьФормуДокумента();
КонецПроцедуры

&НаКлиенте                                                                                        
// Процедура - обработчик действия Провести.
//
Процедура ПровестиДействие(Кнопка)
	Попытка       
		Элементы.ДеревоДокументов.ТекущиеДанные.Проведен = ПровестиСервер(Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте                                                                                        
// Процедура - обработчик действия Отмена проведения.
//
Процедура ОтменаПроведенияДействие(Кнопка)
	Если НЕ Элементы.ДеревоДокументов.ТекущиеДанные.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Элементы.ДеревоДокументов.ТекущиеДанные.Проведен = ОтменаПроведенияСервер(Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте                                                                                        
// Процедура - обработчик действия Обновить.
//
Процедура ОбновитьДействие(Кнопка)
	
	Если ОсновнойДокументЕщеДоступен() Тогда
		ВывестиДеревоДокументов();
	Иначе
		ЗакрытьФормуСПредупреждением(НСтр("ru = 'Документ, для которого сформирован отчет о структуре
		|подчиненности был удален, или же стал недоступен.'"));
	КонецЕсли;		
	
	
КонецПроцедуры

&НаКлиенте                                                                                        
// Процедура - обработчик действия ВывестиДляТекущего.
//
Процедура ВывестиДляТекущегоДействие(Кнопка)
	ДокументСсылка = Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка;
	Если ОсновнойДокументЕщеДоступен() Тогда
		ДеревоДокументов.ПолучитьЭлементы().Очистить();	
		ВывестиДеревоДокументов();
	Иначе
		ЗакрытьФормуСПредупреждением(НСтр("ru = 'Документ, для которого сформирован отчет о структуре
		|подчиненности был удален, или же стал недоступен.'"));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте                                                                                        
// Процедура - обработчик события ПриАктивизацииСтроки реквизита ДеревоДокументов.
//
Процедура ДеревоДокументовПриАктивизацииСтроки(Элемент)
	ОбновитьДоступностьКнопок();	
КонецПроцедуры

&НаКлиенте                                                                                         
// Процедура - обработчик действия УстановитьПометкуУдаления.
//
Процедура УстановитьПометкуУдаления(Кнопка)
	
	Попытка
		ПометкаУдаления = УстановитьПометкуУдаленияСервер(Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
		Элементы.ДеревоДокументов.ТекущиеДанные.ПометкаУдаления = ПометкаУдаления;
		Элементы.ДеревоДокументов.ТекущиеДанные.Проведен = Ложь;
		ОбновитьДоступностьКнопок();
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте                                                                                        
// Процедура - обработчик действия НайтиВСписке.
//
Процедура НайтиВСписке(Кнопка)
	
	Попытка
		ФормаСписка = ПолучитьФорму("Документ."+Элементы.ДеревоДокументов.ТекущиеДанные.ВидДокумента + ".ФормаСписка");
		ФормаСписка.Элементы.Список.ТекущаяСтрока = Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка;
		ФормаСписка.Открыть();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры










