// СтандартныеПодсистемы
Перем глПодключаемоеОборудование Экспорт; // для кэширования на клиенте
// СтандартныеПодсистемы.БазоваяФункциональность

// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике.
Перем СообщенияДляЖурналаРегистрации Экспорт; 
// Признак того, что в данном сеансе не нужно повторно предлагать установку
Перем ПредлагатьУстановкуРасширенияРаботыСФайлами Экспорт;
// Признак того, что в данном сеансе не нужно запрашивать стандартное подтверждение при выходе
Перем ПропуститьПредупреждениеПередЗавершениемРаботыСистемы Экспорт;
// Структура параметров для клиентской логики по завершению работы в программе.
Перем ПараметрыРаботыКлиентаПриЗавершении Экспорт;
// Структура, содержащая в себе время начала и окончания обновления программы.
Перем ПараметрыРаботыКлиентаПриОбновлении Экспорт;

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
Перем РаботаПользователейЗавершается Экспорт;
// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей

// СтандартныеПодсистемы.ОбновлениеКонфигурации

// Информация о доступном обновлении конфигурации, обнаруженном в Интернете
// при запуске программы.
Перем ДоступноеОбновлениеКонфигурации Экспорт;
// Структура с параметрами помощника обновления конфигурации.
Перем НастройкиОбновленияКонфигурации Экспорт; 
// Признак необходимости обновления конфигурации информационной базы при завершении сеанса.
Перем ПредлагатьОбновлениеИнформационнойБазыПриЗавершенииСеанса Экспорт;
// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации

Перем КомпонентаTwain Экспорт;		
Перем КомпонентаСканераШК Экспорт;
Перем глВнешнееОборудование Экспорт; 
Перем ПринтерЭтикеток Экспорт;


Процедура ПередНачаломРаботыСистемы(Отказ) 
	// ОбновлениеВерсииИБ
	//Отказ = НЕ ОбновлениеИнформационнойБазыКлиент.ВозможноВыполнитьОбновлениеИнформационнойБазы();
	// Конец ОбновлениеВерсииИБ  
	
	
	СтандартныеПодсистемыКлиент.ДействияПередНачаломРаботыСистемы(Отказ);
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.ДействияПриНачалеРаботыСистемы();

	
	// СтандартныеПодсистемы
	ПроверитьФлагЗапретаТовародвижения();
	
	// ОбновлениеВерсииИБ
	//ОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
	// Конец ОбновлениеВерсииИБ

	
	// ЗавершениеРаботыПользователей
	//СоединенияИБКлиент.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	// Конец ЗавершениеРаботыПользователей
	
	// РаботаСФайлами
	//РаботаСФайламиКлиент.ПриНачалеРаботыСистемы();
	//// Конец РаботаСФайлами
	
	// РегламентныеЗадания
	// Прим.: подсистема КонтрольДинамическогоОбновленияКонфигурации
	//        должна настраиваться после подсистемы РегламентныеЗадания, т.к. в режиме запуска отдельного
	//        сеанса обработки регламентных заданий, управление не будет и не должно быть передано далее.
	//РегламентныеЗаданияКлиент.ПриНачалеРаботыСистемы();
	// Конец РегламентныеЗадания
	
	// КонтрольДинамическогоОбновленияКонфигурации
	//КонтрольДинамическогоОбновленияКонфигурацииКлиент.ПриНачалеРаботыСистемы();
	// Конец КонтрольДинамическогоОбновленияКонфигурации
	
	// Конец СтандартныеПодсистемы
	//РегламентныеЗаданияКлиент.ПриНачалеРаботыСистемы();

	Если УправлениеДоступом.ЕстьРоль("ЧтениеИВыполнениеЗаданий") Тогда
		//{БредовЮГ 2015-01-26 Убрали всех задолбавшую напоминалку о невыполненных задачах по итогам совещания по Карлутке от 26-01-2015
		//ПодключитьОбработчикОжидания("ПроверитьНапоминанияПользователя", 600);
		//БредовЮГ 2015-01-26 Убрали всех задолбавшую напоминалку о невыполненных задачах по итогам совещания по Карлутке от 26-01-2015}
	КонецЕсли;	
	
	ПодключитьОбработчикОжидания("ПроверитьФлагЗапретаТовародвижения", 60);
	
	//popn+
	ТекСтруктурнаяЕдиница = ОбщегоНазначенияСервер.ПолучитьТекущуюСтруктурнуюЕдиницу();
	УстановитьПараметрыФункциональныхОпцийИнтерфейса(Новый Структура("СтруктурнаяЕдиница",ТекСтруктурнаяЕдиница));
	//popn-
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//                              с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	Перем Результат;
	Результат = Ложь;
	
	// СтандартныеПодсистемы
	
	// Есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	
	// ЗавершениеРаботыПользователей
	Результат = СоединенияИБКлиент.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	// Конец ЗавершениеРаботыПользователей

	// Конец СтандартныеПодсистемы
	
	// Код конфигурации
	// ...
	// Конец кода конфигурации

	// СтандартныеПодсистемы
	Возврат Результат;
	// Конец СтандартныеПодсистемы

КонецФункции

Процедура ПередЗавершениемРаботыСистемы(Отказ)

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();
	// Конец ПодключаемоеОборудование

КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	// ПодключаемоеОборудование
	// Подготовить данные
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";

	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);

	// Передать на обработку данные
	Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='При обработке внешнего события от устройства произошла ошибка.'")
		                                                 + Символы.ПС + ОписаниеОшибки);
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры
