Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса)
	СтандартныеПодсистемыСервер.УстановкаПараметровСеанса(ИменаПараметровСеанса);
	Если ИменаПараметровСеанса = Неопределено Тогда
		// Раздел установки параметров сеанса при начале сеанса (ИменаПараметровСеанса = Неопределено)
		// Выполняется установка параметров сеанса, которые можно инициализировать 
		// при начале работы системы
		
		//popn+ было тут
		//Пользователи.ОпределитьТекущегоПользователя("ТекущийПользователь", Новый Массив);
		
		//ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = ПланыОбмена.ОбменРБД.ЭтотУзел().СтруктурнаяЕдиница;
		
		ПараметрыСеанса.Отладка = Константы.Отладка.Получить();
		
		ПараметрыСеанса.ЭтоЦентр = ?(ПланыОбмена.ГлавныйУзел() = Неопределено, Истина, Ложь);
		//++БИТ БВО (Для отладки)
		Скрипт = Новый COMОбъект("WScript.Network");
		ИмяПользователяWindows	= Скрипт.UserName;
		ИмяПользователя1С		= СокрЛП(ИмяПользователя());
		Если ИмяПользователяWindows = "БариновВО" ИЛИ ИмяПользователя1С = "БариновВО"
			ИЛИ ИмяПользователяWindows = "ПрозоровАЛ" ИЛИ ИмяПользователя1С = "ПрозоровАЛ" Тогда
			ПараметрыСеанса.ЭтоЦентр = Ложь;
		КонецЕсли;
		//--БИТ БВО
		
		//popn+ стало тут
		Пользователи.ОпределитьТекущегоПользователя("ТекущийПользователь", Новый Массив);
		
		ПараметрыСеанса.КоличествоДнейРедактированияДокументов = Константы.КоличествоДнейРедактированияДокументов.Получить();
		
		//Если Константы.ЭтоНЕЦентр.Получить() <> (НЕ(ПараметрыСеанса.ЭтоЦентр ИЛИ ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Производство)) Тогда
		//	Константы.ЭтоНЕЦентр.Установить(НЕ(ПараметрыСеанса.ЭтоЦентр ИЛИ ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Производство));
		//КонецЕсли;
		
		Если Константы.ЭтоНЕЦентр.Получить() <> (НЕ ПараметрыСеанса.ЭтоЦентр) Тогда
			Константы.ЭтоНЕЦентр.Установить(НЕ ПараметрыСеанса.ЭтоЦентр);
		КонецЕсли;
		
		//Если Константы.ЭтоМагазин.Получить() <> (НЕ ПараметрыСеанса.ЭтоЦентр И НЕ ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Производство) Тогда
		//	Константы.ЭтоМагазин.Установить(НЕ ПараметрыСеанса.ЭтоЦентр И НЕ ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Производство);
		//КонецЕсли;
		
		Если Константы.ЭтоМагазин.Получить() <> (НЕ ПараметрыСеанса.ЭтоЦентр) Тогда
			Константы.ЭтоМагазин.Установить(НЕ ПараметрыСеанса.ЭтоЦентр);
		КонецЕсли;
		
		//Если Константы.ЭтоЦентрПроизводства.Получить() <> (ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Производство) Тогда
		//	Константы.ЭтоЦентрПроизводства.Установить(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Производство);
		//КонецЕсли;
		
		Если Константы.ЭтоЦентрПроизводства.Получить() <> СтруктурныеЕдиницы.ЕстьВГруппеТипСЕ(Перечисления.ТипыСтруктурныхЕдиниц.Производство) Тогда
			Константы.ЭтоЦентрПроизводства.Установить(СтруктурныеЕдиницы.ЕстьВГруппеТипСЕ(Перечисления.ТипыСтруктурныхЕдиниц.Производство));
		КонецЕсли;
		
		Если Константы.ЭтоЦентр.Получить() <> ПараметрыСеанса.ЭтоЦентр Тогда
			Константы.ЭтоЦентр.Установить(ПараметрыСеанса.ЭтоЦентр);
		КонецЕсли;
		
		Если Константы.ВключатьНДСВЦеныКонтрагентов.Получить() = Константы.НеВключатьНДСВЦеныКонтрагентов.Получить() Тогда
			Константы.ВключатьНДСВЦеныКонтрагентов.Установить(Не Константы.НеВключатьНДСВЦеныКонтрагентов.Получить());
		КонецЕсли;
		
		Если ПараметрыСеанса.ЭтоЦентр Тогда
			ПараметрыСеанса.ИспользованиеЦВД = Истина;
		Иначе
			ПараметрыСеанса.ИспользованиеЦВД = ?(ЗначениеЗаполнено(УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.РасписаниеОбменаЦВД)),Истина,Ложь);
		КонецЕсли;
		
		ПараметрыСеанса.ИспользоватьПодразделенияПоставщиков = Константы.ИспользоватьПодразделенияПоставщиков.Получить();
		ПараметрыСеанса.НеИспользоватьТоварнуюМаршрутизацию = Константы.НеИспользоватьТоварнуюМаршрутизацию.Получить();
	Иначе
		// Установка параметров сеанса "по требованию"
		
		// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
		// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
		// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры
		УстановленныеПараметры = Новый Массив;
		Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
			УстановитьЗначениеПараметраСеанса(ИмяПараметра, УстановленныеПараметры);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Установить значения параметров сеанса и возвратить имена установленных параметров сеанса
// в параметре УстановленныеПараметры.
//
// Параметры
//  ИмяПараметра  - Строка - имя параметра сеанса, который требуется установить (проинициализировать).
//  УстановленныеПараметры  - Массив - массив, в который добавляются имена
//                                     установленных (проинициализированных) параметров.
//
Процедура УстановитьЗначениеПараметраСеанса(Знач ИмяПараметра, УстановленныеПараметры)
	
	// СтандартныеПодсистемы
	// Если в данном вызове УстановкаПараметровСеанса параметр ИмяПараметра уже 
	// установлен - возврат.
	Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// УправлениеДоступом
	УправлениеДоступом.УстановитьПараметрыСеансаОграниченияДоступа(ИмяПараметра, УстановленныеПараметры);
	// Конец УправлениеДоступом
	
	//{	БредовЮГ 2014-06-02 Код для работы с ТСД
	//ПодключаемоеОборудование
	МенеджерОборудованияВызовСервера.УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры);
	// Конец ПодключаемоеОборудование
	//	БредовЮГ 2014-06-02 Код для работы с ТСД}
	
	// Пользователи
	//Пользователи.ОпределитьТекущегоПользователя(ИмяПараметра, УстановленныеПараметры);
	// Конец Пользователи
	
	
	// Конец СтандартныеПодсистемы
	
	// Для установки параметров сеанса можно использовать шаблон:
	//Если ИмяПараметра = <ИмяПараметра> Тогда
	//   УстановленныеПараметры.Добавить(<ИмяПараметра>);
	//ИначеЕсли

КонецПроцедуры

