#Область РаботаСРегламентымиЗаданиями

Функция ПустаяТаблицаСвойств()
	
	НоваяТаблица = Новый ТаблицаЗначений;
	
	НоваяТаблица.Колонки.Добавить("РегламентноеЗаданиеНаименование",   Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("УникальныйИдентификаторРегламентногоЗадания",   Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Метаданные",			               Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Расписание",			               Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Использование",			           Новый ОписаниеТипов("Булево"));
	НоваяТаблица.Колонки.Добавить("НаСервере",                         Новый ОписаниеТипов("Булево"));
	НоваяТаблица.Колонки.Добавить("Идентификатор",                     Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Наименование",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Ключ",                              Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Начало",                            Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("Конец",                             Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("ИдентификаторРегламентногоЗадания", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Состояние",                         Новый ОписаниеТипов("СостояниеФоновогоЗадания"));
	НоваяТаблица.Колонки.Добавить("СостояниеСтрока",                   Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ИмяМетода",                         Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Расположение",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ОписаниеИнформацииОбОшибке",        Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ПопыткаЗапуска",                    Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("СообщенияПользователю",             Новый ОписаниеТипов("Массив"));
	НоваяТаблица.Колонки.Добавить("НомерСеанса",                       Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("НачалоСеанса",                      Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Индексы.Добавить("Идентификатор, Начало");
	
	Возврат НоваяТаблица;
	
КонецФункции


Функция ОбработкаЗапроса_ScheduledJobInfo() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	тзДанные = ПустаяТаблицаСвойств();
	МассивРегЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания();	
	Для Каждого РегламентноеЗадание из МассивРегЗаданий Цикл
		НоваяСтрока = тзДанные.Добавить();
		НоваяСтрока.РегламентноеЗаданиеНаименование = РегламентноеЗадание.Метаданные.Синоним;
		НоваяСтрока.Метаданные = РегламентноеЗадание.Метаданные.Имя;
		НоваяСтрока.Использование = РегламентноеЗадание.Использование;
		НоваяСтрока.Расписание = Строка(РегламентноеЗадание.Расписание);
		НоваяСтрока.УникальныйИдентификаторРегламентногоЗадания = Строка(РегламентноеЗадание.УникальныйИдентификатор);
		Результат = РегламентныеЗаданияСлужебный.ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(РегламентноеЗадание);		
		Если Результат<>Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
			НоваяСтрока.СостояниеСтрока = Строка(НоваяСтрока.Состояние)
		КонецЕсли;
	КонецЦикла;
	тзДанные.Колонки.Удалить("Состояние");
	Колонка = тзДанные.Колонки.Найти("СостояниеСтрока");
	Колонка.Имя = "Состояние";
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML,тзДанные);
	СтрокаXML = ЗаписьXML.Закрыть();
	Возврат СтрокаXML;
КонецФункции

// Процедура - Состояние регламентых заданий в магазине
// Получение данных о состоянии регламентных заданий в магазине.
// Параметры:
//  СтруктурнаяЕдиница	 - 	 СправочникСсылка.СтруктурныеЕдиницы - 
Процедура СостояниеРегламентыхЗаданийВУзле(СтруктурнаяЕдиница) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗаписи = ТекущаяДата();
	Попытка
		ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПутьПубликацииВебСервисов,СтруктурнаяЕдиница);
		ПользовательWEB = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПользовательВебСервисов,СтруктурнаяЕдиница);
		ПарольWEB = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПарольВебСервисов,СтруктурнаяЕдиница);
		URL = ВебСервис+"/ws/SystemInfo?wsdl";
		Определение = Новый WSОпределения(URL,ПользовательWEB,ПарольWEB);
		URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки,,20);
		Прокси.Пользователь = ПользовательWEB;
		Прокси.Пароль = ПарольWEB;
		
		СтрокаXML = Прокси.ScheduledJobInfo();
		
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		тзРезультат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		Если ТипЗнч(тзРезультат)<>Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "Результат ответа web-сервиса не соответствует ожидаемому!";
		КонецЕсли;
		Для Каждого СтрокаТЗ из тзРезультат Цикл
			ЗаписьРегистра = РегистрыСведений.Izh_СостояниеРегламентыхЗаданий.СоздатьМенеджерЗаписи();	
			ЗаписьРегистра.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			ЗаписьРегистра.Период = ДатаЗаписи;
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра,СтрокаТЗ);
			ЗаписьРегистра.Записать();
		КонецЦикла;
		ЗаписьРегистра = РегистрыСведений.Izh_СостояниеРегламентыхЗаданий.СоздатьМенеджерЗаписи();	
		ЗаписьРегистра.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		ЗаписьРегистра.Период = ДатаЗаписи; 
		ЗаписьРегистра.Метаданные = "Состояние обмена";
		ЗаписьРегистра.ОписаниеИнформацииОбОшибке = ОписаниеОшибки();
		ЗаписьРегистра.Состояние = "Завершено";
		ЗаписьРегистра.Записать();
	Исключение
		ЗаписьРегистра = РегистрыСведений.Izh_СостояниеРегламентыхЗаданий.СоздатьМенеджерЗаписи();	
		ЗаписьРегистра.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		ЗаписьРегистра.Период = ДатаЗаписи; 
		ЗаписьРегистра.Метаданные = "Состояние обмена";
		ЗаписьРегистра.ОписаниеИнформацииОбОшибке = ОписаниеОшибки();
		ЗаписьРегистра.Состояние = "Завершено аварийно";
		ЗаписьРегистра.Записать();
	КонецПопытки
КонецПроцедуры

// Процедура - Состояние регламентых заданий в узлах
// Запускает получение состояний рег. заданий у переданных магазинов
// Параметры:
//  МассивСтруктурныхЕдиниц	 - Массив из СправочникСсылка.СтруктурнаяЕдиница	 - 
Процедура СостояниеРегламентыхЗаданийВУзлах(МассивСтруктурныхЕдиниц) Экспорт
	Для Каждого СтрокаМассива из МассивСтруктурныхЕдиниц Цикл
		СостояниеРегламентыхЗаданийВУзлах(СтрокаМассива);	
	КонецЦикла;
КонецПроцедуры

Функция ПоделитьМассивНаЧасти(ВходящийМассив,КоличествоЧастей) Экспорт
	Возврат Новый Массив;
	//ИсходящийМассив= Новый Массив;
	//
	//КоличествоЭлементов = ВходящийМассив.Количество();
	//Если КоличествоЭлементов < КоличествоЧастей	Тогда
	//	ИсходящийМассив.Добавить(ВходящийМассив);
	//Иначе
	//	КоличествоЭлементовВОднойЧасти = Окр(КоличествоЭлементов/КоличествоЧастей,0,РежимОкругления.Окр15как10);
	//	
	//	Для Каждого СтрокаМассива из ВходящийМассив Цикл
	//		Если 	
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//Возврат ИсходящийМассив
КонецФункции

Процедура ЗапускПолученияРегламетныхЗаданий() Экспорт
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница
	//|ИЗ
	//|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	//|ГДЕ
	//|	СтруктурныеЕдиницы.РежимРаботы = ЗНАЧЕНИЕ(Перечисление.РежимРаботыСЕ.Продуктив)");
	//РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница");
	//
	//
	//
	//
	//МассивПараметров = Новый Массив;
	//МассивПараметров.Добавить(ДатаНачала);
	//МассивПараметров.Добавить(ДатаОкончания);
	//МассивПараметров.Добавить(Стр.Склад);
	//Задание = ФоновыеЗадания.Выполнить("ВыгрузкаДанныхНаСервере.ВыгрузитьДанныеПоПартиям", МассивПараметров);
	//МассивЗаданий.Добавить(Задание);
	//Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
	//	Попытка
	//		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	//	Исключение
	//	КонецПопытки;
	//	МассивЗаданий.Очистить();
	//КонецЕсли;
	//
	//
	//
КонецПроцедуры

#КонецОбласти