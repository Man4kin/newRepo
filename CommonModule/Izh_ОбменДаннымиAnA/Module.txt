
Функция СписокТиповADO()
	
	ТипыЗначений = Новый Структура();
	ТипыЗначений.Вставить("AdArray", 8192);
	ТипыЗначений.Вставить("adBigInt", 20);
	ТипыЗначений.Вставить("adBinary", 128);
	ТипыЗначений.Вставить("adBoolean", 11);
	ТипыЗначений.Вставить("adBSTR", 8);
	ТипыЗначений.Вставить("adChapter", 136);
	ТипыЗначений.Вставить("adChar", 129);
	ТипыЗначений.Вставить("adCurrency", 6);
	ТипыЗначений.Вставить("adDate", 7);
	ТипыЗначений.Вставить("adDBDate", 133);
	ТипыЗначений.Вставить("adDBTime", 134);
	ТипыЗначений.Вставить("adDBTimeStamp", 135);
	ТипыЗначений.Вставить("adDecimal", 14);
	ТипыЗначений.Вставить("adDouble", 5);
	ТипыЗначений.Вставить("adEmpty", 0);
	ТипыЗначений.Вставить("adError", 10);
	ТипыЗначений.Вставить("adFileTime", 64);
	ТипыЗначений.Вставить("adGUID", 72);
	ТипыЗначений.Вставить("adIDispatch", 9);
	ТипыЗначений.Вставить("adInteger", 3);
	ТипыЗначений.Вставить("adIUnknown", 13);
	ТипыЗначений.Вставить("adLongVarBinary", 205);
	ТипыЗначений.Вставить("adLongVarChar", 201);
	ТипыЗначений.Вставить("adLongVarWChar", 203);
	ТипыЗначений.Вставить("adNumeric", 131);
	ТипыЗначений.Вставить("adPropVariant", 138);
	ТипыЗначений.Вставить("adSingle", 4);
	ТипыЗначений.Вставить("adSmallInt", 2);
	ТипыЗначений.Вставить("adTinyInt", 16);
	ТипыЗначений.Вставить("adUnsignedBigInt", 21);
	ТипыЗначений.Вставить("adUnsignedInt", 19);
	ТипыЗначений.Вставить("adUnsignedSmallInt", 18);
	ТипыЗначений.Вставить("adUnsignedTinyInt", 17);
	ТипыЗначений.Вставить("adUserDefined", 132);
	ТипыЗначений.Вставить("adVarBinary", 204);
	ТипыЗначений.Вставить("adVarChar", 200);
	ТипыЗначений.Вставить("adVariant", 12);
	ТипыЗначений.Вставить("adVarNumeric", 139);
	ТипыЗначений.Вставить("adVarWChar", 202);
	ТипыЗначений.Вставить("adWChar", 130);
	
	Возврат ТипыЗначений;
	
КонецФункции

Функция ADOType(Знач ТипСтрокой)
	
	Возврат СписокТиповADO()[ТипСтрокой];
	
КонецФункции

Функция ADOTypeOf(Знач ТипЗначение) Экспорт 
	
	ТипыADO = СписокТиповADO();
	
	Для каждого Тип Из ТипыADO Цикл
		Если Тип.Значение = ТипЗначение Тогда
			Возврат Тип.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОписаниеТипаИзТипаADO(Знач Field)
	
	ВариантыТипов = Новый Структура(
		"Число, Строка, Булево, Дата",
		"adBigInt, adCurrency, adDecimal, adDouble, adInteger, adNumeric, adSingle, adSmallInt, adTinyInt, adUnsignedBigInt, adUnsignedInt, adUnsignedSmallInt, adUnsignedTinyInt, adVarNumeric",
		"adBSTR, adChar, adLongVarChar, adLongVarWChar, adVarChar, adVarWChar, adWChar",
		"adBoolean", 
		"adDate, adDBDate, adDBTime, adDBTimeStamp, adFileTime"
	);
	
	ТипСтрокой = ADOTypeOf(Field.Type);
	
	Тип = Неопределено;
	Для каждого Вариант Из ВариантыТипов Цикл
		Если Найти(Вариант.Значение, ТипСтрокой) > 0 Тогда
			Тип = Вариант.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Если Тип = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Тип = "Число" Тогда
		Тип = Тип + ",30,6";
	ИначеЕсли Тип = "Строка" Тогда
		Тип = Тип + "," + XMLСтрока(Field.DefinedSize);
	КонецЕсли;
	
	Результат = Izh_ОбщегоНазначенияКлиентСервер.ОписаниеТипаИзСтроки(Тип);
	Результат = Новый ОписаниеТипов(Результат, "Null");
	
	Возврат Результат;
	
КонецФункции

Функция НовоеПодключение()
	
	Connection = New COMОбъект("ADODB.Connection");
	Connection.Open("Driver={SQL Server}; Server=192.168.207.11\sqlexpress; Database=rs90view", "sa", "123qwe~");
	
	Возврат Connection;
	
КонецФункции

Функция ВыполнитьЗапрос(Соединение = Неопределено, Знач ТекстЗапроса, Знач Параметры = Неопределено, Знач Команда = Ложь) Экспорт 
	
	Если Соединение = Неопределено Тогда
		Соединение = НовоеПодключение();
	КонецЕсли;
	
	Если Параметры <> Неопределено Тогда
		
		Для каждого Параметр Из Параметры Цикл
			
			ИмяПараметра = "@" + Параметр.Ключ;
			МассивЗначений = Параметр.Значение;
			
			Если ТипЗнч(МассивЗначений) <> Тип("Массив") Тогда
				МассивЗначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивЗначений);
			КонецЕсли;
			
			Значение = Новый Массив();
			Для каждого Элемент Из МассивЗначений Цикл
				ТипЭлемента = ТипЗнч(Элемент);
				Если ТипЭлемента <> Тип("Строка") Тогда
					Элемент = XMLСтрока(Элемент);
				Иначе
					Элемент = СтрЗаменить(Элемент, "'", "''");
				КонецЕсли;
				Если ТипЭлемента = Тип("Строка") ИЛИ ТипЭлемента = Тип("Дата") Тогда
					Элемент = "'" + Элемент + "'";
				КонецЕсли;
				Значение.Добавить(Элемент);
			КонецЦикла;
			Значение = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Значение);
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПараметра, Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Connection = Соединение;
	Query = ТекстЗапроса;
	
	Если Команда Тогда
		
		Command = New COMОбъект("ADODB.Command");
		Command.CommandText = Query;
		Command.ActiveConnection = Connection;
		
		RowsAffected = 0;
		Command.Execute(RowsAffected, 1 + 128); // adCmdText || adExecuteNoRecords
		
		Возврат RowsAffected;
		
	Иначе
		
		Records = New COMОбъект("ADODB.Recordset");
		Records.Open(Query, Connection);
		
		Результат = Новый ТаблицаЗначений();
		
		Для i = 0 По Records.Fields.Count - 1 Цикл
			
			Field = Records.Fields(i);
			
			Результат.Колонки.Добавить(
				СтрЗаменить(Field.Name, " ", "_"),
				ОписаниеТипаИзТипаADO(Field),
				Field.Name
			);
				
		КонецЦикла;
		
		Пока НЕ Records.EOF() Цикл
			
			НоваяСтрока = Результат.Добавить();
			Для каждого Колонка Из Результат.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = Records.Fields(Колонка.Заголовок).Value;
			КонецЦикла;
			
			Records.MoveNext();
			
		КонецЦикла;
		
		Records.Close();
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции


Процедура ВыполнитьОбмен() Экспорт 
	
	ПолучитьПродажи();
	
КонецПроцедуры


Процедура ДобавитьОшибку(Ошибки, Знач ТекстОшибки, Знач Объект)
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Соответствие();
	КонецЕсли;
	
	Лог = Ошибки[Объект];
	Если Лог = Неопределено Тогда
		Лог = Новый Массив();
		Ошибки[Объект] = Лог;
	КонецЕсли;
	
	Лог.Добавить(ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьОшибки(Ошибки)
	
	Если Ошибки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого Ошибка Из Ошибки Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Ошибка.Значение, Символы.ПС + Символы.ПС);
		
		Запись = РегистрыСведений.Izh_ИсторияОбменаAnA.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Новый Структура(
			"Период, Объект, ОписаниеОшибки",
			ТекущаяДата(),
			Ошибка.Ключ.Ссылка,
			ТекстОшибки
		));
		Запись.Записать(Истина);
		
		Сообщить(ТекстОшибки);
	КонецЦикла;
	
	Ошибки = Неопределено;
	
КонецПроцедуры

Функция ЕстьОшибки(Знач Ошибки, Знач Объект)
	
	Результат = Ошибки <> Неопределено И Ошибки[Объект] <> Неопределено;
	
	Возврат Результат;
	
КонецФункции


Процедура УстановитьСоединение()
	
	Источник = ВнешниеИсточникиДанных.Izh_AnA;
	
	Если Источник.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Подключен Тогда
		Возврат;
	КонецЕсли;
	
	//Попытка
	//	Источник.УстановитьСоединение();
	//	Возврат;
	//Исключение
	//КонецПопытки;
	
	ПараметрыСоединения = Источник.ПолучитьОбщиеПараметрыСоединения();
	ПараметрыСоединения.СУБД = "MSSQLServer";
	ПараметрыСоединения.АутентификацияОС = Ложь;
	
	Параметры = Новый Структура(
		"СтрокаСоединения, ИмяПользователя, Пароль",
		ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.СтрокаПодключенияAnA,
		ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПользовательAnA,
		ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПарольAnA
	);
	
	Для каждого Параметр Из Параметры Цикл
		ЗначениеПараметра = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(Параметр.Значение);
		ПараметрыСоединения[Параметр.Ключ] = ?(ЗначениеЗаполнено(ЗначениеПараметра), ЗначениеПараметра, Неопределено);
	КонецЦикла;
	
	Источник.УстановитьОбщиеПараметрыСоединения(ПараметрыСоединения);
	
	Попытка
		Источник.УстановитьСоединение();
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьПродажиКлуба(Смена)
	
	УстановитьСоединение();
	
	// Виды оплаты:
	// 1 = Наличка
	// 3 = Оплата картой
	// 7 = Оплата депозитом
	// Виды операций:
	// 1 = Внесение депозита
	// 7 = Оплата контракта
	// 8 = Возврат контракта
	// Типы номенклатуры:
	// -1 = Товар
	// 0 = Услуга
	
	ВидыОплаты = Новый Массив();
	ВидыОплаты.Добавить(1);
	ВидыОплаты.Добавить(3);
	
	ВидыОпераций = Новый Массив();
	ВидыОпераций.Добавить(1);
	ВидыОпераций.Добавить(7);
	ВидыОпераций.Добавить(8);
	
	ВидыОперацийМинус = Новый Массив();
	ВидыОперацийМинус.Добавить(8);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСмены", Смена);
	Запрос.УстановитьПараметр("ВидыОплаты", ВидыОплаты);
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	Запрос.УстановитьПараметр("Минус", ВидыОперацийМинус);
	Запрос.УстановитьПараметр("Депозит", 7);
	//Котлячкова ++ 18,03,15   Исправила косяк Ефима с возвратами
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Оплаты.ВидОплаты,
		|	Оплаты.Фирма,
		|	Оплаты.РабочееМесто,
		|	СУММА(Оплаты.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОплатаЧеков.Дата КАК Дата,
		|		ОплатаЧеков.ВидОплаты КАК ВидОплаты,
		|		ОплатаЧеков.Фирма КАК Фирма,
		|		ОплатаЧеков.РабочееМесто КАК РабочееМесто,
		|		ОплатаЧеков.Сумма КАК Сумма
		|	ИЗ
		|		ВнешнийИсточникДанных.Izh_AnA.Таблица.ОплатаЧеков КАК ОплатаЧеков
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Ордеры.Дата,
		|		Ордеры.ВидОплаты,
		|		Ордеры.Фирма,
		|		Ордеры.РабочееМесто,
		|		ВЫБОР
		|			КОГДА Ордеры.ВидОперации В (&Минус)
		|				ТОГДА -Ордеры.Сумма
		|			ИНАЧЕ Ордеры.Сумма
		|		КОНЕЦ
		|	ИЗ
		|		ВнешнийИсточникДанных.Izh_AnA.Таблица.Ордеры КАК Ордеры
		|	ГДЕ
		|		НЕ Ордеры.Аннулирован
		|		И Ордеры.ВидОперации В(&ВидыОпераций)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Ордеры.ДатаАннуляции,
		|		Ордеры.ВидОплаты,
		|		Ордеры.Фирма,
		|		Ордеры.РабочееМесто,
		|		-Ордеры.Сумма
		|	ИЗ
		|		ВнешнийИсточникДанных.Izh_AnA.Таблица.Ордеры КАК Ордеры
		|	ГДЕ
		|		Ордеры.Аннулирован
		|		И Ордеры.ВидОперации В(&ВидыОпераций)) КАК Оплаты
		|ГДЕ
		|	Оплаты.Дата = &ДатаСмены
		|	И Оплаты.ВидОплаты В(&ВидыОплаты)
		|
		|СГРУППИРОВАТЬ ПО
		|	Оплаты.ВидОплаты,
		|	Оплаты.Фирма,
		|	Оплаты.РабочееМесто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Состав.ВидОплаты,
		|	Состав.Фирма,
		|	Состав.РабочееМесто,
		|	Состав.КодНоменклатуры,
		|	Состав.ТипНоменклатуры,
		|	СУММА(Состав.Количество) КАК Количество,
		|	СУММА(Состав.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоставЧеков.Дата КАК Дата,
		|		СоставЧеков.ВидОплаты КАК ВидОплаты,
		|		СоставЧеков.Фирма КАК Фирма,
		|		СоставЧеков.РабочееМесто КАК РабочееМесто,
		|		СоставЧеков.КодНоменклатуры КАК КодНоменклатуры,
		|		СоставЧеков.ТипНоменклатуры КАК ТипНоменклатуры,
		|		СоставЧеков.Количество КАК Количество,
		|		СоставЧеков.Цена * СоставЧеков.Количество * ВЫБОР
		|			КОГДА СоставЧеков.Цена < 0
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК Сумма
		|	ИЗ
		|		ВнешнийИсточникДанных.Izh_AnA.Таблица.СоставЧеков КАК СоставЧеков
		|	ГДЕ
		|		СоставЧеков.ТипНоменклатуры В (-1, 0)
		|		И СоставЧеков.ВидОплаты В(&ВидыОплаты)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СоставЧеков.Дата,
		|		СоставЧеков.ВидОплаты,
		|		СоставЧеков.Фирма,
		|		СоставЧеков.РабочееМесто,
		|		СоставЧеков.КодНоменклатуры,
		|		СоставЧеков.ТипНоменклатуры,
		|		СоставЧеков.Количество,
		|		СоставЧеков.Цена * СоставЧеков.Количество
		|	ИЗ
		|		ВнешнийИсточникДанных.Izh_AnA.Таблица.СоставЧеков КАК СоставЧеков
		|	ГДЕ
		|		СоставЧеков.ТипНоменклатуры = -1
		|		И СоставЧеков.ВидОплаты = &Депозит
		|		И СоставЧеков.Количество > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Ордеры.Дата,
		|		Ордеры.ВидОплаты,
		|		Ордеры.Фирма,
		|		Ордеры.РабочееМесто,
		|		NULL,
		|		0,
		|		0,
		|		ВЫБОР
		|			КОГДА Ордеры.ВидОперации В (&Минус)
		|				ТОГДА -Ордеры.Сумма
		|			ИНАЧЕ Ордеры.Сумма
		|		КОНЕЦ
		|	ИЗ
		|		ВнешнийИсточникДанных.Izh_AnA.Таблица.Ордеры КАК Ордеры
		|	ГДЕ
		|		НЕ Ордеры.Аннулирован
		|		И Ордеры.ВидОплаты В(&ВидыОплаты)
		|		И Ордеры.ВидОперации В(&ВидыОпераций)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Ордеры.ДатаАннуляции,
		|		Ордеры.ВидОплаты,
		|		Ордеры.Фирма,
		|		Ордеры.РабочееМесто,
		|		NULL,
		|		0,
		|		0,
		|		ВЫБОР
		|			КОГДА Ордеры.ВидОперации В (&Минус)
		|				ТОГДА -Ордеры.Сумма
		|			ИНАЧЕ Ордеры.Сумма
		|		КОНЕЦ
		|	ИЗ
		|		ВнешнийИсточникДанных.Izh_AnA.Таблица.Ордеры КАК Ордеры
		|	ГДЕ
		|		Ордеры.Аннулирован
		|		И Ордеры.ВидОплаты В(&ВидыОплаты)
		|		И Ордеры.ВидОперации В(&ВидыОпераций)) КАК Состав
		|ГДЕ
		|	Состав.Дата = &ДатаСмены
		|
		|СГРУППИРОВАТЬ ПО
		|	Состав.ВидОплаты,
		|	Состав.Фирма,
		|	Состав.КодНоменклатуры,
		|	Состав.ТипНоменклатуры,
		|	Состав.РабочееМесто";
		//Котлячкова -- 18,03,15
	Результат = Запрос.ВыполнитьПакет();
	
	Оплаты = Результат[Результат.Количество() - 2].Выгрузить();
	Номенклатура = Результат[Результат.Количество() - 1].Выгрузить();
	
	Результат = Новый Структура(
		"Оплаты, Номенклатура",
		Оплаты, Номенклатура
	);
	
	Возврат Результат;
	
КонецФункции


Процедура УстановитьПараметрыЗапросаИзТаблицы(Знач Запрос, Знач Таблица)
	
	Для каждого Колонка Из Таблица.Колонки Цикл
		Значение = Таблица.ВыгрузитьКолонку(Колонка.Имя);
		ТипКолонки = ?(Колонка.ТипЗначения.СодержитТип(Тип("Null")), 
			Новый ОписаниеТипов(Колонка.ТипЗначения,, "Null"),
			Колонка.ТипЗначения
		);
		Значение.Добавить(ТипКолонки.ПривестиЗначение());
		Запрос.УстановитьПараметр(Колонка.Имя, Значение);
	КонецЦикла;
	
КонецПроцедуры


Процедура ПровестиДокумент(Документ, Ошибки)
		
	Документ.Записать(РежимЗаписиДокумента.Запись);
	
	Если НЕ ЕстьОшибки(Ошибки, Документ) Тогда
		
		ПолучитьСообщенияПользователю(Истина);
		
		Провелся = Ложь;
		Если Документ.ПроверитьЗаполнение() Тогда
			Попытка
				Документ.Записать(РежимЗаписиДокумента.Проведение);
				Провелся = Истина;
			Исключение
				ДобавитьОшибку(Ошибки, ОписаниеОшибки(), Документ);
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ Провелся Тогда
			Сообщения = ПолучитьСообщенияПользователю(Истина);
			Для каждого Сообщение Из Сообщения Цикл
				ДобавитьОшибку(Ошибки, Сообщение.Текст, Документ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобитьСтарыеДокументы(Знач СтарыеДокументы)
	
	Пока СтарыеДокументы.Следующий() Цикл
		Если НЕ СтарыеДокументы.ПометкаУдаления Тогда
			СтарыеДокументы.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНоменклатуру(Ошибки, Знач СписокНоменклатуры, Знач Объект)
	
	ТекстОшибкиНоменклатура = НСтр("ru = 'Не подобрана номенклатура для следующих кодов номенклатуры из A&A:
                                    |%1'");
	
	СписокКодов = Новый Массив();
	Для каждого Номенклатура Из СписокНоменклатуры Цикл
		Если ТипЗнч(Номенклатура) = Тип("Строка") Тогда
			СписокКодов.Добавить(Символы.Таб + Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокКодов.Количество() > 0 Тогда
		ДобавитьОшибку(
			Ошибки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибкиНоменклатура,
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(СписокКодов, "," + Символы.ПС),
			),
			Объект
		);
	КонецЕсли;

КонецПроцедуры

//{ВетровИА 15.04.2015 Наряд №000147946
Процедура ПолучитьПродажи_РегЗадание() Экспорт
	Смена = НачалоДня(ТекущаяДата() - 86400);
	ПолучитьПродажи(Смена);		
КонецПроцедуры
//ВетровИА 15.04.2015 Наряд №000147946}

Процедура ПолучитьПродажи(Знач Смена = Неопределено) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Смена) Тогда
		Смена = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	ТекстОшибкиФирма = НСтр("ru = 'Не удалось подобрать фирму по идентификатору %1.'");
	ТекстОшибкиККМ = НСтр("ru = 'Не удалось подобрать ни одного ККМ для отражения выручки.'");
	
	// Получение продаж на заданную дату из внешнего источника
	УстановитьПривилегированныйРежим(Истина);
	Продажи = ПолучитьПродажиКлуба(Смена);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Обработка полученной информации и попытка определить, что за номенклатуру и в какой организации мы продали
	Оплаты = СформироватьОплатыДляZОтчета(Продажи.Оплаты);
	Состав = СформироватьПродажиНоменклатурыДляZОтчета(Продажи.Номенклатура, Смена);
	
	// Для каждой группы будет создан 1 документ
	Группировка = "СтруктурнаяЕдиница, Фирма";
	
	Группы = Оплаты.Выручка.Скопировать();
	Группы.Свернуть(Группировка);
	
	// Ранее созданные документы будут помечены на удаление или использованы для новых данных
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСмены", Смена);
	УстановитьПараметрыЗапросаИзТаблицы(Запрос, Группы);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ZотчетВыручка.Ссылка,
		|	ZотчетВыручка.Ссылка.ПометкаУдаления
		|ИЗ
		|	Документ.Zотчет.Выручка КАК ZотчетВыручка
		|ГДЕ
		|	ZотчетВыручка.ДатаСмены = &ДатаСмены
		|	И ZотчетВыручка.Ссылка.СтруктурнаяЕдиница В(&СтруктурнаяЕдиница)
		|	И ZотчетВыручка.Ссылка.Фирма В(&Фирма)";
	СтарыеДокументы = Запрос.Выполнить().Выбрать();
	
	Izh_ОбработкаКоллекций.ДобавитьИЗаполнитьКолонки(
		Оплаты.Выручка,
		Новый Структура("ДатаСмены", Смена)
	);
	
	// Для обхода по этим тч
	ТЧДокумента = Новый Структура(
		"Выручка, Карты, Состав",
		Оплаты.Выручка, 
		Оплаты.Карты, 
		Состав.Состав
	);
	
	Для каждого Группа Из Группы Цикл
		
		Если СтарыеДокументы.Следующий() Тогда
			ДокZОтчет = СтарыеДокументы.Ссылка.ПолучитьОбъект();
			//Котлячкова ++ 23,03,15
			Если ДокZОтчет.Проведен Тогда
				ДобавитьОшибку(Ошибки, "Документ проведен ранее!", ДокZОтчет);
			КонецЕсли;
			//Котлячкова -- 23,03,15
		Иначе
			ДокZОтчет = Документы.Zотчет.СоздатьДокумент();
		КонецЕсли;
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ДокZОтчет, Группа);
		//Котлячкова++ Наряд 000150913 от 19.05.2015 17:07:19
		//ЗаполнитьЗначенияСвойств(ДокZОтчет, Новый Структура(
		//	"Дата",
		//	ТекущаяДата()
		//));
		
		ЗаполнитьЗначенияСвойств(ДокZОтчет, Новый Структура(
			"Дата",
			Смена
		));
		//Котлячкова Наряд 000150913 от 19.05.2015 17:07:19
		
		// Заполнение тч
		Отбор = Новый Структура(Группировка);
		ЗаполнитьЗначенияСвойств(Отбор, Группа);
		
		СписокНоменклатуры = Новый Массив();
		
		Для каждого Таблица Из ТЧДокумента Цикл
			
			ДляЗаполнения = Таблица.Значение.Скопировать(Отбор);
			ДокZОтчет[Таблица.Ключ].Загрузить(ДляЗаполнения);
			
			Если Таблица.Ключ = "Состав" Тогда
				СписокНоменклатуры = ДляЗаполнения.ВыгрузитьКолонку("Номенклатура");
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ДокZОтчет.Фирма) Тогда
			ДобавитьОшибку(
				Ошибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиФирма, Группа.Фирма),
				ДокZОтчет
			);
		КонецЕсли;
		
		Если ДокZОтчет.Выручка.Количество() = 0 Тогда
			ДобавитьОшибку(Ошибки, ТекстОшибкиККМ, ДокZОтчет);
		КонецЕсли;
		
		ПроверитьНоменклатуру(Ошибки, СписокНоменклатуры, ДокZОтчет);
		//++БИТ БВО 2015-09-07
		ДокZОтчет.ПерераспределитьСоставПоОстаткам();
		//--БИТ БВО 2015-09-07
		ДокZОтчет.ПометкаУдаления = Ложь;
		ПровестиДокумент(ДокZОтчет, Ошибки);
		
		Если НЕ ЕстьОшибки(Ошибки, ДокZОтчет) Тогда
			струкПараметры = Новый Структура;
			струкПараметры.Вставить("БизнесПроцесс", БизнесПроцессы.ОформлениеСнятияВыручки);
			струкПараметры.Вставить("Основание", ДокZОтчет.Ссылка);
			струкПараметры.Вставить("Удалять", Истина); 
			струкПараметры.Вставить("Искать", Истина);
			УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобитьСтарыеДокументы(СтарыеДокументы);
	
	
	// Формирование коррекций по депозиту
	
	Группировка = Группировка + ", Склад";
	
	Группы = Состав.Депозит.Скопировать();
	Группы.Свернуть(Группировка);
	
	//++БИТ БВО 2015-06-16
	//ВидСписания = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ВидСписанияПоДепозиту);
	ВидСписания = Справочники.ВидыСписания.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьСлужебноеЗначение(ПланыВидовХарактеристик.СлужебныеЗначения.ВидСписанияПоДепозиту));
	//--БИТ БВО 2015-06-16
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСмены", Смена);
	Запрос.УстановитьПараметр("ВидСписания", ВидСписания);
	УстановитьПараметрыЗапросаИзТаблицы(Запрос, Группы);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КоррекцияЗапасов.Ссылка,
		|	КоррекцияЗапасов.ПометкаУдаления
		|ИЗ
		|	Документ.КоррекцияЗапасов КАК КоррекцияЗапасов
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(КоррекцияЗапасов.Дата, ДЕНЬ) = &ДатаСмены
		|	И НЕ КоррекцияЗапасов.Проведен
		|	И КоррекцияЗапасов.ВидСписания = &ВидСписания
		|	И КоррекцияЗапасов.СтруктурнаяЕдиница В(&СтруктурнаяЕдиница)
		|	И КоррекцияЗапасов.Фирма В(&Фирма)
		|	И КоррекцияЗапасов.Склад В(&Склад)
		|	И НЕ КоррекцияЗапасов.Оприходование";
	СтарыеДокументы = Запрос.Выполнить().Выбрать();
	
	Для каждого Группа Из Группы Цикл
		
		Если СтарыеДокументы.Следующий() Тогда
			Коррекция = СтарыеДокументы.Ссылка.ПолучитьОбъект();
		Иначе
			Коррекция = Документы.КоррекцияЗапасов.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Коррекция, Группа);
		ЗаполнитьЗначенияСвойств(Коррекция, Новый Структура(
			"Дата, ВидСписания",
			КонецДня(Смена),
			ВидСписания
		));
		
		Отбор = Новый Структура(Группировка);
		ЗаполнитьЗначенияСвойств(Отбор, Группа);
		
		ДляЗаполнения = Состав.Депозит.Скопировать(Отбор);
		Коррекция.Состав.Загрузить(ДляЗаполнения);
		
		СписокНоменклатуры = ДляЗаполнения.ВыгрузитьКолонку("Номенклатура");
		
		Если НЕ ЗначениеЗаполнено(Коррекция.Фирма) Тогда
			ДобавитьОшибку(
				Ошибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиФирма, Группа.Фирма),
				Коррекция
			);
		КонецЕсли;
		
		ПроверитьНоменклатуру(Ошибки, СписокНоменклатуры, Коррекция);
		
		Коррекция.ПометкаУдаления = Ложь;
		Коррекция.ДополнительныеСвойства.Вставить("НеМенятьВремя", Истина);		
		//++БИТ БВО 2015-09-07
		Коррекция.ПерераспределитьСоставПоОстаткам();
		//--БИТ БВО 2015-09-07		
		ПровестиДокумент(Коррекция, Ошибки);
		
	КонецЦикла;
	
	ДобитьСтарыеДокументы(СтарыеДокументы);
	
	ЗаписатьОшибки(Ошибки);
	
КонецПроцедуры

Функция СформироватьОплатыДляZОтчета(Знач Оплаты)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Оплаты", Оплаты);
	Запрос.УстановитьПараметр("Наличка", 1);
	Запрос.УстановитьПараметр("Карта", 3);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Оплаты.ВидОплаты,
		|	Оплаты.Фирма,
		|	Оплаты.РабочееМесто,
		|	Оплаты.Сумма
		|ПОМЕСТИТЬ ВТ_Оплаты
		|ИЗ
		|	&Оплаты КАК Оплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Izh_ЮрЛицаAnA.Фирма, Оплаты.Фирма) КАК Фирма,
		|	Izh_ЮрЛицаAnA.Терминал,
		|	Izh_ККМвAnA.ККМ КАК ККМ,
		|	Izh_ККМвAnA.ККМ.Владелец КАК СтруктурнаяЕдиница,
		|	Оплаты.СуммаНал,
		|	Оплаты.СуммаКК,
		|	Оплаты.Сумма
		|ПОМЕСТИТЬ ВТ_ОплатыСФирмой
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Оплаты.Фирма КАК Фирма,
		|		ВТ_Оплаты.РабочееМесто КАК РабочееМесто,
		|		ВТ_Оплаты.Сумма КАК СуммаНал,
		|		0 КАК СуммаКК,
		|		0 КАК Сумма
		|	ИЗ
		|		ВТ_Оплаты КАК ВТ_Оплаты
		|	ГДЕ
		|		ВТ_Оплаты.ВидОплаты = &Наличка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Оплаты.Фирма,
		|		ВТ_Оплаты.РабочееМесто,
		|		0,
		|		ВТ_Оплаты.Сумма,
		|		0
		|	ИЗ
		|		ВТ_Оплаты КАК ВТ_Оплаты
		|	ГДЕ
		|		ВТ_Оплаты.ВидОплаты = &Карта
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Оплаты.Фирма,
		|		ВТ_Оплаты.РабочееМесто,
		|		0,
		|		0,
		|		ВТ_Оплаты.Сумма
		|	ИЗ
		|		ВТ_Оплаты КАК ВТ_Оплаты) КАК Оплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Izh_ЮрЛицаAnA КАК Izh_ЮрЛицаAnA
		|		ПО Оплаты.Фирма = Izh_ЮрЛицаAnA.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Izh_ККМвAnA КАК Izh_ККМвAnA
		|		ПО Оплаты.РабочееМесто = Izh_ККМвAnA.РабочееМесто
		|			И (Izh_ЮрЛицаAnA.Фирма = Izh_ККМвAnA.Фирма)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Izh_ЮрЛицаAnA.Фирма ЕСТЬ NULL 
		|				ТОГДА Оплаты.РабочееМесто В
		|						(ВЫБРАТЬ
		|							Izh_ККМвAnA.РабочееМесто
		|						ИЗ
		|							РегистрСведений.Izh_ККМвAnA КАК Izh_ККМвAnA)
		|			ИНАЧЕ Izh_ККМвAnA.ККМ ЕСТЬ НЕ NULL 
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОплатыСФирмой.СтруктурнаяЕдиница,
		|	ВТ_ОплатыСФирмой.Фирма,
		|	ВТ_ОплатыСФирмой.Терминал КАК ТипКарты,
		|	СУММА(ВТ_ОплатыСФирмой.СуммаКК) КАК Сумма
		|ИЗ
		|	ВТ_ОплатыСФирмой КАК ВТ_ОплатыСФирмой
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОплатыСФирмой.Фирма,
		|	ВТ_ОплатыСФирмой.Терминал,
		|	ВТ_ОплатыСФирмой.СтруктурнаяЕдиница
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВТ_ОплатыСФирмой.СуммаКК) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОплатыСФирмой.СтруктурнаяЕдиница,
		|	ВТ_ОплатыСФирмой.Фирма,
		|	ВТ_ОплатыСФирмой.ККМ КАК ПОС,
		|	СУММА(ВТ_ОплатыСФирмой.Сумма) КАК Сумма,
		|	СУММА(ВТ_ОплатыСФирмой.СуммаНал) КАК СуммаНал
		|ИЗ
		|	ВТ_ОплатыСФирмой КАК ВТ_ОплатыСФирмой
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОплатыСФирмой.Фирма,
		|	ВТ_ОплатыСФирмой.СтруктурнаяЕдиница,
		|	ВТ_ОплатыСФирмой.ККМ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВТ_ОплатыСФирмой.Сумма) <> 0";
	Результат = Запрос.ВыполнитьПакет();
	
	Выручка = Результат[Результат.Количество() - 1].Выгрузить();
	ОплатаКартами = Результат[Результат.Количество() - 2].Выгрузить();
	
	Результат = Новый Структура(
		"Выручка, Карты",
		Выручка, ОплатаКартами
	);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьПродажиНоменклатурыДляZОтчета(Знач Номенклатура, Знач Смена)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Депозит", 7);
	Запрос.УстановитьПараметр("Товар", -1);
	//++БИТ БВО 2015-06-16
	//Запрос.УстановитьПараметр("Услуга", ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.Услуги));
	Запрос.УстановитьПараметр("Услуга", Справочники.Номенклатура.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьСлужебноеЗначение(ПланыВидовХарактеристик.СлужебныеЗначения.Услуги)));
	//--БИТ БВО 2015-06-16
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(Смена));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.ВидОплаты,
		|	Номенклатура.Фирма,
		|	Номенклатура.РабочееМесто,
		|	Номенклатура.КодНоменклатуры,
		|	Номенклатура.ТипНоменклатуры,
		|	Номенклатура.Количество,
		|	Номенклатура.Сумма
		|ПОМЕСТИТЬ ВТ_Номенклатура
		|ИЗ
		|	&Номенклатура КАК Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Состав.Депозит,
		|	Состав.Фирма,
		|	Izh_ККМвAnA.ККМ.Владелец КАК СтруктурнаяЕдиница,
		|	Состав.Номенклатура,
		|	ВЫБОР
		|		КОГДА Состав.Услуга
		|			ТОГДА 1
		|		ИНАЧЕ СУММА(Состав.Количество)
		|	КОНЕЦ КАК Количество,
		|	СУММА(Состав.Сумма) КАК Сумма,
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
		|	ЕдиницыИзмерения.Ссылка.Коэффициент КАК Коэффициент,
		|	Izh_ККМвAnA.ККМ.Владелец.СкладТорговогоЗала КАК Склад
		|ПОМЕСТИТЬ ВТ_Состав
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР ВТ_Номенклатура.ВидОплаты
		|			КОГДА &Депозит
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК Депозит,
		|		Izh_ЮрЛицаAnA.Фирма КАК Фирма,
		|		ВТ_Номенклатура.РабочееМесто КАК РабочееМесто,
		|		ВЫБОР ВТ_Номенклатура.ТипНоменклатуры
		|			КОГДА &Товар
		|				ТОГДА ЕСТЬNULL(Izh_НоменклатураAnA.Номенклатура, ВТ_Номенклатура.КодНоменклатуры)
		|			ИНАЧЕ &Услуга
		|		КОНЕЦ КАК Номенклатура,
		|		ВЫБОР ВТ_Номенклатура.ТипНоменклатуры
		|			КОГДА &Товар
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК Услуга,
		|		ВТ_Номенклатура.Количество КАК Количество,
		|		ВТ_Номенклатура.Сумма КАК Сумма
		|	ИЗ
		|		ВТ_Номенклатура КАК ВТ_Номенклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Izh_НоменклатураAnA КАК Izh_НоменклатураAnA
		|			ПО ВТ_Номенклатура.КодНоменклатуры = Izh_НоменклатураAnA.Код
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Izh_ЮрЛицаAnA КАК Izh_ЮрЛицаAnA
		|			ПО ВТ_Номенклатура.Фирма = Izh_ЮрЛицаAnA.Идентификатор) КАК Состав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Izh_ККМвAnA КАК Izh_ККМвAnA
		|		ПО Состав.Фирма = Izh_ККМвAnA.Фирма
		|			И Состав.РабочееМесто = Izh_ККМвAnA.РабочееМесто
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ЕдиницыИзмерения.Ссылка) КАК Ссылка,
		|			ЕдиницыИзмерения.Владелец КАК Владелец
		|		ИЗ
		|			Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|				ПО ЕдиницыИзмерения.Владелец = Номенклатура.Ссылка
		|					И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЕдиницыИзмерения.Владелец) КАК ЕдиницыИзмерения
		|		ПО Состав.Номенклатура = ЕдиницыИзмерения.Владелец
		|ГДЕ
		|	Состав.Сумма <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Состав.Фирма,
		|	Состав.Номенклатура,
		|	Izh_ККМвAnA.ККМ.Владелец,
		|	Состав.Депозит,
		|	Состав.Услуга,
		|	ЕдиницыИзмерения.Ссылка,
		|	ЕдиницыИзмерения.Ссылка.Коэффициент,
		|	Izh_ККМвAnA.ККМ.Владелец.СкладТорговогоЗала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Состав.Фирма,
		|	ВТ_Состав.СтруктурнаяЕдиница,
		|	ВТ_Состав.Номенклатура,
		|	ВТ_Состав.Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ОстаткиНоменклатурыОстатки.СуммаОстаток * ВТ_Состав.Количество / ОстаткиНоменклатурыОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Сумма,
		|	ВТ_Состав.ЕдиницаИзмерения,
		|	ВТ_Состав.Коэффициент,
		|	ВТ_Состав.Склад,
		|	ВТ_Состав.Депозит
		|ИЗ
		|	ВТ_Состав КАК ВТ_Состав
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(&ДатаСреза, ) КАК ОстаткиНоменклатурыОстатки
		|		ПО ВТ_Состав.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
		|			И ВТ_Состав.Фирма = ОстаткиНоменклатурыОстатки.Фирма
		|ГДЕ
		|	ВТ_Состав.Депозит
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Состав.Фирма,
		|	ВТ_Состав.СтруктурнаяЕдиница,
		|	ВТ_Состав.Номенклатура,
		|	ВТ_Состав.Количество,
		|	ВТ_Состав.Сумма,
		|	ВТ_Состав.ЕдиницаИзмерения,
		|	ВТ_Состав.Коэффициент,
		|	ВТ_Состав.Склад,
		|	ВТ_Состав.Депозит
		|ИЗ
		|	ВТ_Состав КАК ВТ_Состав
		|ГДЕ
		|	НЕ ВТ_Состав.Депозит";
	Состав = Запрос.Выполнить().Выгрузить();
	Izh_ОбработкаКоллекций.ДобавитьИЗаполнитьКолонки(
		Состав,
		Новый Структура(
			"СтавкаНДС", 
			Справочники.СтавкиНДС.БезНДС
		)
	);
	
	ДепозитСтроки = Состав.НайтиСтроки(Новый Структура("Депозит", Истина));
	Депозит = Состав.Скопировать(ДепозитСтроки);
	
	Izh_ОбработкаКоллекций.УдалитьСтрокиТаблицы(Состав, ДепозитСтроки);
	
	Результат = Новый Структура(
		"Состав, Депозит",
		Состав, Депозит
	);
		
	Возврат Результат;
	
КонецФункции
