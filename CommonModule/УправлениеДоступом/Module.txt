
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: программный интерфейс прикладного разработчика.

// Функция ЕстьРоль проверяет, что у текущего пользователя есть роль в
// в одном из профилей тех групп доступа в которые он входит,
// например, роль ПросмотрЖурналаРегистрации, роль ПечатьНепроведенныхДокументов, ...
//
// Параметры:
//  Роль         - Строка - имя роли.
//  НаборыЗначенийДоступа - ТаблицаЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа),
//                 пустую подготовленную таблицу можно получить с помощью функции
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//  Пользователь - СправочникСсылка.Пользователи, Неопределено.
//                 Если не заполнено, тогда право проверяется для текущего пользователя.
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьРоль(Знач Роль, Знач НаборыЗначенийДоступа = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РольДоступна(Роль) Тогда
		Возврат Истина;
	КонецЕсли;

	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",           Пользователь);
	Запрос.УстановитьПараметр("Роль",                   Роль);
	Запрос.УстановитьПараметр("ВидДоступаПользователи", ПланыВидовХарактеристик.ВидыДоступа.Пользователи);
	
	// Проверка, что роль назначается пользователю через группу доступа по профилю.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ПользователиГруппыДоступа КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|		ПО (ПользователиИГруппыПользователей.ВидДоступа = &ВидДоступаПользователи)
	|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь)
	|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|			И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ГруппыДоступаПользователи.ГруппаДоступа.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|			И (ПрофилиГруппДоступаРоли.Роль = &Роль)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция ЕстьПравоПоЗначениюДоступа проверяет, что у пользователя есть право,
// устанавливаемое по значению доступа, например, по папке файлов могут устанавливаться
// права "УправлениеПравами", "ЧтениеПапокФайлов", "ЧтениеФайлов", которые являются
// как правами для папки файлов, так и правами для файлов или для двух элементов данных
// сразу - "ЧтениеПапокИФайлов".
//
// Параметры:
//  Право        - Строка.
//  ЗначениеДоступа - СправочникСсылка, ПланВидовХарактеристикСсылка, Неопределено - значение,
//                 для которого нужно проверить разрешенность права, например, ссылка на папку файлов.
//  Пользователь - СправочникСсылка.Пользователи, Неопределено. Если не заполнено,
//                 тогда право проверяется для текущего пользователя.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьПравоПоЗначениюДоступа(Знач Право, Знач ЗначениеДоступа, Знач Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Подготовка массива из ролей, хотя бы одна из которых требуется для права по значению доступа.
	ОписаниеПрава = ВозможныеПраваПоЗначениюДоступа(ЗначениеДоступа.Метаданные().ПолноеИмя()).Найти(Право, "Имя");
	Если ОписаниеПрава = Неопределено Тогда
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдено право ""%1"" таблицы ""%2""'"), Право, ЗначениеДоступа.Метаданные().ПолноеИмя()));
	КонецЕсли;
	
	// Проверка, что хотя бы одна из ролей назначается пользователю через профиль его групп доступа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	|ПОМЕСТИТЬ ГруппыДоступаПользователя
	|ИЗ
	|	РегистрСведений.ПользователиГруппыДоступа КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|		ПО (ПользователиИГруппыПользователей.ВидДоступа = &ВидДоступаПользователи)
	|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь)
	|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|			И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ГруппыДоступаПользователи.ГруппаДоступа.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|			И (ПрофилиГруппДоступаРоли.Роль В (&Роли))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	ГруппыДоступаПользователя КАК ГруппыДоступаПользователя");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Роли",         ОписаниеПрава.ТребуемаяРоль);
	Запрос.УстановитьПараметр("ВидДоступаПользователи", ПланыВидовХарактеристик.ВидыДоступа.Пользователи);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЕстьПраво = НЕ Запрос.Выполнить().Пустой();
	
	Если ЕстьПраво Тогда
	
		// Проверка, что по виду доступа ограничение установлено в каждой группе доступа пользователя.
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(ГруппыДоступаПользователя.ГруппаДоступа) КАК КоличествоГруппДоступа,
		|	СУММА(ВЫБОР
		|			КОГДА ЗначенияГруппДоступа.ГруппаДоступа ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоВключенныхОграничений
		|ИЗ
		|	ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
		|		ПО ГруппыДоступаПользователя.ГруппаДоступа = ЗначенияГруппДоступа.ГруппаДоступа
		|			И (ЗначенияГруппДоступа.ВидДоступа = &ВидДоступа)
		|			И (ЗначенияГруппДоступа.ТолькоВидДоступа)";
		Запрос.УстановитьПараметр("ВидДоступа", ВидыДоступаТаблицы(ЗначениеДоступа.Метаданные().ПолноеИмя())[0]);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		// Проверка права пользователя по значению доступа.
		Если Выборка.КоличествоГруппДоступа = Выборка.КоличествоВключенныхОграничений И
			 ЗначениеДоступа <> Неопределено И
			 ОграничиватьДоступНаУровнеЗаписей() Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ИСТИНА КАК ЗначениеИстина
			|ГДЕ
			|	ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
			|					ПО
			|						ИерархияЗначений.ВидДоступа = &ВидДоступа
			|							И ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа
			|							И ИерархияЗначений.ИспользоватьПраваСсылки
			|							И ПраваПоЗначениям.Право = &Право
			|							И (НЕ ПраваПоЗначениям.Запрещено)
			|							И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
			|							И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
			|					ПО
			|						ПользователиИГруппыПользователей.ВидДоступа = &ВидДоступаПользователи
			|							И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
			|							И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
			|							И ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениям.Пользователь)
			|	И (НЕ ЛОЖЬ В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ЛОЖЬ
			|				ИЗ
			|					РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
			|						ПО
			|							ИерархияЗначений.ВидДоступа = &ВидДоступа
			|								И ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа
			|								И ИерархияЗначений.ИспользоватьПраваСсылки
			|								И ПраваПоЗначениям.Право = &Право
			|								И ПраваПоЗначениям.Запрещено
			|								И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
			|								И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
			|						ПО
			|							ПользователиИГруппыПользователей.ВидДоступа = &ВидДоступаПользователи
			|								И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
			|								И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
			|								И ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениям.Пользователь))";
			Запрос.УстановитьПараметр("ЗначениеДоступа", ЗначениеДоступа);
			Запрос.УстановитьПараметр("Право",           Право);
			ЕстьПраво = НЕ Запрос.Выполнить().Пустой();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции // ЕстьПравоПоЗначениюДоступа()

// Функция РазрешеноУправлениеПравамиПоЗначениямДоступа проверяет у текущего пользователя
// есть право "УправлениеПравами", разрешающее изменять
// права заданного значения доступа для пользователей и групп пользователей
// или права различных значений доступа для заданного пользователя или группы пользователей.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка.Пользователи, СправочникСсылка.ГруппыПользователей,
//                 или значение доступа СправочникСсылка, ПланВидовХарактеристикСсылка,
//                 для которого нужно проверить разрешенность права, например, ссылка на папку файлов.
//  ОписаниеОшибки - Строка, заполнена когда разрешения нет.
//  ТолькоПросмотр - Булево, только для внутренних нужд - не использовать.
//
// Возвращаемое значение:
//  Булево.
//
Функция РазрешеноУправлениеПравамиПоЗначениямДоступа(Знач СсылкаНаОбъект, ОписаниеОшибки, ТолькоПросмотр = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
		Возврат Истина;
	КонецЕсли;
	
	РазрешеноУправлениеПравами = Истина;
	ЭтоЗначениеДоступа         = НЕ (ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи") ИЛИ
	                                 ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыПользователей"));
	
	// Проверка разрешения на управление правами значений доступа для заданного пользователя или группы пользователей.
	// Т.к. команда "привязана" к роли ДобавлениеИзменениеПользователейИГруппДоступа, вызывает исключение, только при нестандартном сценарии.
	Если НЕ ЭтоЗначениеДоступа Тогда
		
		ЕстьРольДобавлениеИзменениеПользователейИГруппДоступа = ЕстьРоль("ДобавлениеИзменениеПользователейИГруппДоступа");
		
		Если ( ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи") ИЛИ
		            ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыПользователей") ) И
		           НЕ ЕстьРольДобавлениеИзменениеПользователейИГруппДоступа Тогда
			
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У вас нет роли ""%1""'"), Метаданные.Роли.ДобавлениеИзменениеПользователейИГруппДоступа.Синоним);
			РазрешеноУправлениеПравами = Ложь;
		КонецЕсли;
		
		ТолькоПросмотр = НЕ ЕстьРольДобавлениеИзменениеПользователейИГруппДоступа;
		
	// Проверка разрешения на управление правами заданного значения доступа.
	ИначеЕсли НЕ ЕстьПравоПоЗначениюДоступа("УправлениеПравами", СсылкаНаОбъект) Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 ""%2"" недоступна для управления правами.'"), СсылкаНаОбъект.Метаданные().ПредставлениеОбъекта, СсылкаНаОбъект);
		РазрешеноУправлениеПравами = Ложь;
	КонецЕсли;
		
	Возврат РазрешеноУправлениеПравами;
	
КонецФункции // РазрешеноУправлениеПравамиПоЗначениямДоступа()

// Функция возвращает значение ПараметрСеанса.ОграничиватьДоступПоВиду,
// установленное по значению Константа.ОграничиватьДоступНаУровнеЗаписей.
//
Функция ОграничиватьДоступНаУровнеЗаписей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат(ПараметрыСеанса.ОграничиватьДоступПоВиду <> "");
	
КонецФункции // ОграничиватьДоступНаУровнеЗаписей()

// Функция НовоеОписаниеПрофиляГруппДоступа возвращает структуру для 
// удобства описания начальных профилей.
// 
Функция НовоеОписаниеПрофиляГруппДоступа() Экспорт
	
	Возврат( Новый Структура("Идентификатор,
	                         |Наименование,
	                         |Роли,
	                         |ВидыДоступа",
	                         "",
	                         "",
	                         Новый Массив,
	                         Новый Массив) );
	                         
КонецФункции // НовоеОписаниеПрофиляГруппДоступа()

// Процедура ОбновитьПоставляемыеПрофилиИГруппыДоступа обновляет
// поставляемые профили, и при необходимости обновляет группы доступа этих профилей.
//  Создаются не найденные поставляемые профили групп доступа.
// 
// Параметры:
//  ТолькоНеИзмененные - Булево, обновлять только те поставляемые профили групп доступа,
//                 у которых реквизит ПоставляемыйПрофильИзменен = Ложь.
//  ОбновлятьГруппыДоступа - Булево, обновлять группы доступа
//                 обновляемых профилей групп доступа.
//  УдаляемыеВидыДоступаБезНастройки - Булево, обновлять только те группы доступа,
//                 обновляемых профилей групп доступа, у которых настройки видов доступа
//                 остались неизменными, т.е. все значения, кроме указанных запрещены и
//                 список заданных значений пуст.
//
Процедура ОбновитьПоставляемыеПрофилиИГруппыДоступа(ТолькоНеИзмененные = Истина, ОбновлятьГруппыДоступа = Истина, УдаляемыеВидыДоступаБезНастройки = Истина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.ПоставляемыйПрофильИзменен,
	|	ПрофилиГруппДоступа.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа");
	ТекущиеПрофили = Запрос.Выполнить().Выгрузить();
	
	ОписанияПрофилей = ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	ОбновленныеПрофили       = Новый Массив;
	ОбновленныеГруппыДоступа = Новый Массив;
	
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
	
		Профиль = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор(ОписаниеПрофиля.Идентификатор));
		СтрокаТекущегоПрофиля = ТекущиеПрофили.Найти(Профиль, "Ссылка");
		ПрофильОбновлен = Ложь;
		
		Если СтрокаТекущегоПрофиля = Неопределено Тогда
			// Создание нового поставляемого профиля.
			ОбновитьПрофильГруппДоступа(ОписаниеПрофиля);
		ИначеЕсли НЕ СтрокаТекущегоПрофиля.ПоставляемыйПрофильИзменен ИЛИ НЕ ТолькоНеИзмененные Тогда
			// Обновление поставляемого профиля.
			ПрофильОбновлен = ОбновитьПрофильГруппДоступа(ОписаниеПрофиля, Истина);
		КонецЕсли;
		
		Если ОбновлятьГруппыДоступа Тогда
			ПрофильОбновлен = ПрофильОбновлен ИЛИ ОбновитьГруппыДоступаПрофиля(Профиль, УдаляемыеВидыДоступаБезНастройки);
		КонецЕсли;
		
		Если ПрофильОбновлен Тогда
			ОбновленныеПрофили.Добавить(Профиль);
		КонецЕсли;
	КонецЦикла;
	
	// Обновление ролей пользователей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиИГруппыПользователей.ЗначениеДоступа КАК Пользователь
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиГруппыДоступа КАК ГруппыДоступаПользователи
	|		ПО (ПользователиИГруппыПользователей.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи)))
	|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|			И ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь
	|			И (ГруппыДоступаПользователи.ГруппаДоступа.Профиль В (&Профили))
	|			И (ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.Пользователи))");
	Запрос.УстановитьПараметр("Профили", ОбновленныеПрофили);
	ПользователиДляОбновления = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	УправлениеДоступом.ОбновитьРолиПользователей(ПользователиДляОбновления);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: общего назначения.

// Функция СвойстваВидаДоступа возвращает свойства вида доступа, используя функцию
// УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа().
//
// Параметры:
//  ВидДоступа   - ПланВидовХарактеристикСсылка.ВидыДоступа, Неопределено.
//
// Возвращаемое значение:
//  Неопределено - когда для вида доступа свойств не найдено,
//  ТаблицаЗначений или СтрокаТаблицыЗначений с полями:
//                 описание которых см. в комментарии к функции
//                 УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа().
//
// 
Функция СвойстваВидаДоступа(Знач ВидДоступа = Неопределено) Экспорт
	
	СвойстваВидовДоступа = УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа().Скопировать();
	
	Если ВидДоступа = Неопределено Тогда
	
		Возврат СвойстваВидовДоступа;
	Иначе
		Возврат СвойстваВидовДоступа.Найти(ВидДоступа, "ВидДоступа");
	КонецЕсли;
	
КонецФункции

// Функция ВидыДоступаТаблицы возвращает массив видов доступа
// для таблицы с указанным именем.
//
// Параметры:
//  Таблица   - Строка, как в фукнции ПолноеИмя() объекта метаданных.
//
// Возвращаемое значение:
//  Массив       - элементы типа ПланВидовХарактеристикСсылка.ВидыДоступа.
//
Функция ВидыДоступаТаблицы(Знач Таблица) Экспорт
	
	ВидыДоступа = Новый Массив;
	
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа() Цикл
	
		Если СвойстваВидаДоступа.Таблицы.Найти(Таблица) <> Неопределено Тогда
		
			ВидыДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыДоступа;
	
КонецФункции

// Функция ВозможныеПраваПоЗначениюДоступа возвращает описание возможных прав
// по значению доступа имя таблицы которого, передается в качестве параметра.
//  Подробнее о возможных правах см. в комментарии к функции
// УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа().
//
// Параметры:
//  Таблица      - Строка, Неопределено - полное имя таблицы значений доступа,
//                 для которых нужно получить описание возможных прав,
//                 когда Неопределено, возвращается таблица всех описаний,
//                 заданных прикладным разработчиком.
//
// Возвращаемое значение:
//  ТаблицаЗначений с полями,
//                 описание которых см. в комментарии к функции
//                 УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа().
//                 Если задан параметр Таблица, возвращаются только её описания.
//
Функция ВозможныеПраваПоЗначениюДоступа(Таблица = Неопределено) Экспорт
	
	ВозможныеПрава = УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа();
	
	
	
	
	Если Таблица = Неопределено Тогда
		Строки = Неопределено;
	Иначе
		Строки = ВозможныеПрава.НайтиСтроки(Новый Структура("ВладелецПрав", Таблица));
	КонецЕсли;
	
	Возврат ВозможныеПрава.Скопировать(Строки);
	
КонецФункции

//popn+
Процедура ОбновитьРолиПользователейПриЗаписиГруппыДоступа(сПользователи, НовыеРоли) Экспорт
	
	Для Каждого текПользователь Из сПользователи Цикл
		ОбъектПользователя = текПользователь.ПолучитьОбъект();
		ОбъектПользователя.Записать();
		ИдентификаторПользователяИБ = Пользователи.ПолучитьУникальныйИдентификаторПользователяИБ(текПользователь);
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
		Если ПользовательИБ <> НЕОПРЕДЕЛЕНО Тогда
			текРоли = ПользовательИБ.Роли;
			СписокРолей = Новый Массив;
			Для Каждого Роль Из текРоли Цикл
				СписокРолей.Добавить(Роль.Имя);
			КонецЦикла;
		Иначе
			СписокРолей = НовыеРоли;
		КонецЕсли;
		ЗаписатьРолиВРегистр(текПользователь, СписокРолей);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьРолиВРегистр(текПользователь, СписокРолей)
	
	НаборЗаписей = РегистрыСведений.ПользователиСтруктурныхЕдиниц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(текПользователь);
	НаборЗаписей.Прочитать();
	
	Для каждого ЗаписьНабора из НаборЗаписей Цикл
		ЗаписьНабора.Роли =  Новый ХранилищеЗначения(СписокРолей);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры	
//popn-

Функция врТЗ(Знач Запрос, ИмяВрТЗ)
     Запрос.Текст = "Выбрать * Из " + ИмяВрТЗ;
     Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Процедура ОбновитьРолиПользователей обновляет список ролей пользователей
// информационной базы по их текущим принадлежностям к группам доступа.
//  Пользователи с ролью "ПолныеПрава" игнорируется.
// 
// Параметры:
//  Пользователи - Массив элементов СправочникСсылка.Пользователи.
//  ЕстьОшибки - Булево. Возвращает истина, когда были ошибки, записанные в журнал регистрации.
//
Процедура ОбновитьРолиПользователей(Знач сПользователи, ЕстьОшибки = Ложь, НеВыполнять = НЕОПРЕДЕЛЕНО) Экспорт
	
	Если НЕ ПользователиПереопределяемый.ЗапретРедактированияРолей() ИЛИ НеВыполнять = ИСТИНА Тогда
		// Роли устанавливаются механизмами подсистем Пользователи.
		Возврат;
	КонецЕсли;
	
	Если сПользователи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ПользователиСтруктурныхЕдиниц.УникальныйИдентификатор КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
	|			ПО ПользователиСтруктурныхЕдиниц.Пользователь = Пользователи.Ссылка
	|			И (ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница = &ТекущаяСтруктурнаяЕдиница)
	|ГДЕ
	|	Пользователи.Ссылка В(&Пользователи)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь,
	|	ПользователиСтруктурныхЕдиниц.УникальныйИдентификатор КАК ИдентификаторПользователяИБ
	|ИЗ
	|	РегистрСведений.ПользователиГруппыДоступа КАК ГруппыДоступаПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
	|			ПО ПользователиСтруктурныхЕдиниц.Пользователь = ГруппыДоступаПользователи.Пользователь
	|			И (ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница = &ТекущаяСтруктурнаяЕдиница)
	|ГДЕ
	|	ГруппыДоступаПользователи.ГруппаДоступа = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)");
	Запрос.УстановитьПараметр("Пользователи", сПользователи);
	Запрос.УстановитьПараметр("ТекущаяСтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница); //V
	ОбновляемыеПользователи = Запрос.Выполнить().Выгрузить();
	
	// Подготовка таблицы старых ролей пользователей.
	СтарыеРолиПользователей = Новый ТаблицаЗначений;
	СтарыеРолиПользователей.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	СтарыеРолиПользователей.Колонки.Добавить("Роль", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	
	//popn+
	ПользователиКоторыхНетВЦентре = Новый Массив;
	ВсеОбновляемыеПользователи = ОбновляемыеПользователи.Скопировать();
	//popn+
	
	ТекущийНомер = ОбновляемыеПользователи.Количество() - 1;
	Пока ТекущийНомер >= 0 Цикл
		// Проверка необходимости обработки пользователя.
		ИдентификаторПользователяИБ = Пользователи.ПолучитьУникальныйИдентификаторПользователяИБ(ОбновляемыеПользователи[ТекущийНомер].Пользователь);
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
		//popn+
		Если ПользовательИБ = Неопределено Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ОбновляемыеПользователи[ТекущийНомер].Пользователь) ;
		КонецЕсли;
		//popn-
		Если ПользовательИБ = Неопределено Тогда
			ПользователиКоторыхНетВЦентре.Добавить(ОбновляемыеПользователи[ТекущийНомер].Пользователь);
			ОбновляемыеПользователи.Удалить(ОбновляемыеПользователи[ТекущийНомер]);
		Иначе
			Для каждого Роль Из ПользовательИБ.Роли Цикл
				СтараяРольПользователя = СтарыеРолиПользователей.Добавить();
				СтараяРольПользователя.Пользователь = ОбновляемыеПользователи[ТекущийНомер].Пользователь;
				СтараяРольПользователя.Роль = Роль.Имя;
			КонецЦикла;
		КонецЕсли;
		ТекущийНомер = ТекущийНомер - 1;
	КонецЦикла;
	
	// Подготовка списка ролей отсутствующих в метаданных и которые нужно переустановить.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь,
	|	СтарыеРолиПользователей.Роль
	|ПОМЕСТИТЬ СтарыеРолиПользователей
	|ИЗ
	|	&СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДоступныеРоли.Имя КАК Имя
	|ПОМЕСТИТЬ ВсеДоступныеРоли
	|ИЗ
	|	&ВсеДоступныеРоли КАК ВсеДоступныеРоли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ПОМЕСТИТЬ Администраторы
	|ИЗ
	|	РегистрСведений.ПользователиГруппыДоступа КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.ГруппаДоступа = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
	|	И ГруппыДоступаПользователи.Пользователь В(&ОбновляемыеПользователи)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь
	|ИЗ
	|	СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|ГДЕ
	|	СтарыеРолиПользователей.Роль = ""ПолныеПрава""
	|	И (НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА КАК ЗначениеИстина
	|				ИЗ
	|					РегистрСведений.ПользователиГруппыДоступа КАК ГруппыДоступаПользователи
	|				ГДЕ
	|					ГруппыДоступаПользователи.ГруппаДоступа = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
	|					И ГруппыДоступаПользователи.Пользователь В (&ОбновляемыеПользователи)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь
	|ПОМЕСТИТЬ СнятыеАдминистраторы
	|ИЗ
	|	СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|ГДЕ
	|	СтарыеРолиПользователей.Роль = ""ПолныеПрава""
	|	И (НЕ СтарыеРолиПользователей.Пользователь В
	|				(ВЫБРАТЬ
	|					Администраторы.Пользователь
	|				ИЗ
	|					Администраторы КАК Администраторы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиИГруппыПользователей.ЗначениеДоступа КАК Пользователь,
	|	Роли.Ссылка КАК Профиль,
	|	Роли.Роль
	|ПОМЕСТИТЬ ВсеНовыеРолиПользователей
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК Роли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиГруппыДоступа КАК ГруппыДоступаПользователи
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|			ПО (ПользователиИГруппыПользователей.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи)))
	|				И (ПользователиИГруппыПользователей.ЗначениеДоступа В (&ОбновляемыеПользователи))
	|				И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|				И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
	|		ПО Роли.Ссылка = ГруппыДоступаПользователи.ГруппаДоступа.Профиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеНовыеРолиПользователей.Пользователь,
	|	ВсеНовыеРолиПользователей.Роль
	|ПОМЕСТИТЬ НовыеРолиПользователей
	|ИЗ
	|	ВсеНовыеРолиПользователей КАК ВсеНовыеРолиПользователей
	|ГДЕ
	|	ВсеНовыеРолиПользователей.Роль <> ""ПолныеПрава""
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА КАК ЗначениеИстина
	|			ИЗ
	|				ВсеДоступныеРоли КАК ВсеДоступныеРоли
	|			ГДЕ
	|				ВсеДоступныеРоли.Имя = ВсеНовыеРолиПользователей.Роль)
	|	И (НЕ ВсеНовыеРолиПользователей.Пользователь В
	|				(ВЫБРАТЬ
	|					Администраторы.Пользователь
	|				ИЗ
	|					Администраторы КАК Администраторы))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Администраторы.Пользователь,
	|	""ПолныеПрава""
	|ИЗ
	|	Администраторы КАК Администраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь
	|ПОМЕСТИТЬ ИзмененныеПользователи
	|ИЗ
	|	СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРолиПользователей КАК НовыеРолиПользователей
	|		ПО (НовыеРолиПользователей.Пользователь = СтарыеРолиПользователей.Пользователь)
	|			И (НовыеРолиПользователей.Роль = СтарыеРолиПользователей.Роль)
	|ГДЕ
	|	НовыеРолиПользователей.Роль ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НовыеРолиПользователей.Пользователь
	|ИЗ
	|	НовыеРолиПользователей КАК НовыеРолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|		ПО НовыеРолиПользователей.Пользователь = СтарыеРолиПользователей.Пользователь
	|			И НовыеРолиПользователей.Роль = СтарыеРолиПользователей.Роль
	|ГДЕ
	|	СтарыеРолиПользователей.Роль ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СнятыеАдминистраторы.Пользователь
	|ИЗ
	|	СнятыеАдминистраторы КАК СнятыеАдминистраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНовыеРолиПользователей.Пользователь,
	|	ВсеНовыеРолиПользователей.Профиль,
	|	ВсеНовыеРолиПользователей.Роль
	|ИЗ
	|	ВсеНовыеРолиПользователей КАК ВсеНовыеРолиПользователей
	|ГДЕ
	|	(НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА КАК ЗначениеИстина
	|				ИЗ
	|					ВсеДоступныеРоли КАК ВсеДоступныеРоли
	|				ГДЕ
	|					ВсеДоступныеРоли.Имя = ВсеНовыеРолиПользователей.Роль))";
	
	//popn+
	Если ПользователиКоторыхНетВЦентре.Количество() > 0 Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВсеДоступныеРоли", ПользователиСерверПовтИсп.ВсеРоли(Истина));
		Запрос.УстановитьПараметр("ОбновляемыеПользователи", ВсеОбновляемыеПользователи);
		Запрос.УстановитьПараметр("СтарыеРолиПользователей", СтарыеРолиПользователей);
		Запрос.Выполнить();
		НовыеРолиПользователей = врТЗ(Запрос, "НовыеРолиПользователей");
		Для Каждого ПользовательКоторогоНетВЦентре Из ПользователиКоторыхНетВЦентре Цикл
			СписокРолейПользователя = НовыеРолиПользователей.НайтиСтроки(Новый Структура("Пользователь", ПользовательКоторогоНетВЦентре));
			СписокРолей = Новый Массив;
			Для Каждого ТекРоль Из СписокРолейПользователя Цикл
				СписокРолей.Добавить(ТекРоль.Роль);
			КонецЦикла;
			ЗаписатьРолиВРегистр(ПользовательКоторогоНетВЦентре, СписокРолей);
		КонецЦикла;
	КонецЕсли;
	//popn-	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВсеДоступныеРоли", ПользователиСерверПовтИсп.ВсеРоли(Истина));
	Запрос.УстановитьПараметр("ОбновляемыеПользователи", ОбновляемыеПользователи);
	Запрос.УстановитьПараметр("СтарыеРолиПользователей", СтарыеРолиПользователей);
	
	// Регистрация ошибок имен ролей в профилях групп доступа.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Управление доступом.Роль не найдена в метаданных'"),
		                         УровеньЖурналаРегистрации.Ошибка,
		                         ,
		                         ,
		                         СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                              НСтр("ru= 'При обновлении ролей пользователя ""<%1>"" роль ""<%2>"" профиля групп доступа ""<%3>"" не найдена в метаданных!'"),
		                              СокрЛП(Выборка.Пользователь.Наименование),
		                              Выборка.Роль,
		                              Выборка.Профиль),
		                         РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	// Обновление ролей пользователейИБ.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзмененныеПользователиИРоли.Пользователь,
	|	ИзмененныеПользователиИРоли.Роль
	|ПОМЕСТИТЬ ИзмененныеПользователиИРоли
	|ИЗ
	|	(ВЫБРАТЬ
	|		НовыеРолиПользователей.Пользователь КАК Пользователь,
	|		НовыеРолиПользователей.Роль КАК Роль
	|	ИЗ
	|		НовыеРолиПользователей КАК НовыеРолиПользователей
	|	ГДЕ
	|		НовыеРолиПользователей.Пользователь В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователи.Пользователь
	|				ИЗ
	|					ИзмененныеПользователи КАК ИзмененныеПользователи)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Пользователи.Ссылка,
	|		""""
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|	ГДЕ
	|		Пользователи.Ссылка В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователи.Пользователь
	|				ИЗ
	|					ИзмененныеПользователи КАК ИзмененныеПользователи)
	|) КАК ИзмененныеПользователиИРоли	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененныеПользователиИРоли.Пользователь,
	|	ИзмененныеПользователиИРоли.Роль
	|ИЗ
	|	ИзмененныеПользователиИРоли КАК ИзмененныеПользователиИРоли
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА (ИзмененныеПользователиИРоли.Пользователь, ""ПолныеПрава"") В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователиИРоли.Пользователь,
	|					ИзмененныеПользователиИРоли.Роль
	|				ИЗ
	|					ИзмененныеПользователиИРоли КАК ИзмененныеПользователиИРоли)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ИзмененныеПользователиИРоли.Пользователь,
	|	ИзмененныеПользователиИРоли.Роль";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПользовательИБ = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Роль) Тогда
			Если ПользовательИБ <> Неопределено Тогда
				ПользовательИБ.Записать();
			КонецЕсли;
			ИдентификаторПользователяИБ = Пользователи.ПолучитьУникальныйИдентификаторПользователяИБ(ОбновляемыеПользователи.Найти(Выборка.Пользователь, "Пользователь").Пользователь);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
			//popn+
			Если ПользовательИБ = Неопределено Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Выборка.Пользователь) ;
			КонецЕсли;
			//popn-
			ПользовательИБ.Роли.Очистить();
		Иначе
			ПользовательИБ.Роли.Добавить(Метаданные.Роли[Выборка.Роль]);
		КонецЕсли;
	КонецЦикла;
	Если ПользовательИБ <> Неопределено Тогда
		ПользовательИБ.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура УстановитьПараметрыСеансаОграниченияДоступа устанавливает
// параметры сеанса по текущим настройкам констант и групп доступа пользователей.
//  Вызывается ПриНачалеРаботыСистемы
//
Процедура УстановитьПараметрыСеансаОграниченияДоступа(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ (Лев(ИмяПараметра, СтрДлина("ОграничиватьДоступПоВиду")) = "ОграничиватьДоступПоВиду" ИЛИ
	         Лев(ИмяПараметра, СтрДлина("ВидыДоступа"))              = "ВидыДоступа") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НЕ Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() Тогда
		// Для корректной работы препроцессора в ограничениях доступа, требуется инициализации всех
		// параметров сеанса, которые могут быть востребованы в работе препроцессора.
		Если ИмяПараметра = "ВидыДоступаЕдинственныеДляТипаЗначенияДоступа" ИЛИ
		     ИмяПараметра = "ВидыДоступаБезГруппЗначенияДоступа" Тогда
			ПараметрыСеанса[ИмяПараметра] = Новый ФиксированныйМассив(Новый Массив);
		Иначе
			ПараметрыСеанса[ИмяПараметра] = "";
		КонецЕсли;
		УстановленныеПараметры.Добавить(ИмяПараметра);
		Возврат;
	КонецЕсли;
	
	// Следующие виды доступа не самостоятельные,
	// поэтому не учитываются при расчете необходимости ограничения в целом.
	// В стандартных шаблонах проверка по этим видам доступа всегда выполняется,
	// а в препроцессоре проверка на неиспользуемость не выполнятся.
	ПараметрыСеанса.ОграничиватьДоступПоВидуУсловие = "";
	ПараметрыСеанса.ОграничиватьДоступПоВидуОбъект  = "";
	УстановленныеПараметры.Добавить("ОграничиватьДоступПоВидуУсловие");
	УстановленныеПараметры.Добавить("ОграничиватьДоступПоВидуОбъект");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыДоступаГруппДоступа.ВидДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.ВидыДоступа КАК ВидыДоступаГруппДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиГруппыДоступа КАК ГруппыДоступаПользователи
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|			ПО (ПользователиИГруппыПользователей.ВидДоступа = &ВидДоступаПользователи)
	|				И (ПользователиИГруппыПользователей.ЗначениеДоступа = &ТекущийПользователь)
	|				И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|				И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
	|		ПО ВидыДоступаГруппДоступа.Ссылка = ГруппыДоступаПользователи.ГруппаДоступа");
	Запрос.УстановитьПараметр("ВидДоступаПользователи", ПланыВидовХарактеристик.ВидыДоступа.Пользователи);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	ОграничиваемыеВидыДоступа = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДоступа");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыДоступа.Ссылка КАК ВидДоступа
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Предопределенный");
	Выборка = Запрос.Выполнить().Выбрать();
	
	КаждыйВидЕдинственный = Истина;
	КаждыйВидБезГрупп     = Истина;
	
	ВидыДоступаБезОграничения                     = Новый Массив;
	ВидыДоступаЕдинственныеДляТипаЗначенияДоступа = Новый Массив;
	ВидыДоступаБезГруппЗначенияДоступа            = Новый Массив;
	ВидыДоступаЧерезПраваПоЗначениямДоступа       = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваВидаДоступа = СвойстваВидаДоступа(Выборка.ВидДоступа);
		
		Если  СвойстваВидаДоступа.ВидДоступаИспользуетсяВсегда Тогда
			// Такие виды доступа не самостоятельные, поэтому не учитываются при расчете
			// необходимости ограничения в целом.
			// В стандартных шаблонах проверка по этим видам доступа всегда выполняется,
			// а в препроцессоре проверка на неиспользуемость не выполнятся.
			ОписаниеВидаДоступа = "";
			
		ИначеЕсли НЕ СвойстваВидаДоступа.ВидДоступаИспользуется Тогда
			ОписаниеВидаДоступа = "";
			ВидыДоступаБезОграничения.Добавить(Выборка.ВидДоступа);
			
		ИначеЕсли ОграничиваемыеВидыДоступа.Найти(Выборка.ВидДоступа) = Неопределено Тогда
			ОписаниеВидаДоступа = "";
			ВидыДоступаБезОграничения.Добавить(Выборка.ВидДоступа);
			
		ИначеЕсли СвойстваВидаДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа Тогда
			ОписаниеВидаДоступа = "ЧерезПраваПоЗначениямДоступа";
			ВидыДоступаЧерезПраваПоЗначениямДоступа.Добавить(Выборка.ВидДоступа);
		Иначе
			Если СвойстваВидаДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа Тогда
				ОписаниеВидаДоступа   = "ЕдинственныйВид,  ";
				ВидыДоступаЕдинственныеДляТипаЗначенияДоступа.Добавить(Выборка.ВидДоступа);
			Иначе
				ОписаниеВидаДоступа   = "ОдинИзМногихВидов,";
				КаждыйВидЕдинственный = Ложь;
			КонецЕсли;
			Если СвойстваВидаДоступа.ВидДоступаБезГруппЗначенияДоступа Тогда
				ОписаниеГрупп = "БезГрупп";
				ВидыДоступаБезГруппЗначенияДоступа.Добавить(Выборка.ВидДоступа);
			Иначе
				ОписаниеГрупп = ?(СвойстваВидаДоступа.ВидДоступаСОднойГруппойЗначенияДоступа, "ОднаГруппа", "МножествоГрупп");
				КаждыйВидБезГрупп = Ложь;
			КонецЕсли;
			ОписаниеВидаДоступа = ОписаниеВидаДоступа + ОписаниеГрупп;
		КонецЕсли;
		ИмяВидаДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПолучитьИмяПредопределенного(Выборка.ВидДоступа);
		ПараметрыСеанса["ОграничиватьДоступПоВиду" + ИмяВидаДоступа] = ОписаниеВидаДоступа;
		УстановленныеПараметры.Добавить("ОграничиватьДоступПоВиду" + ИмяВидаДоступа);
	КонецЦикла;
	
	ПараметрыСеанса.ВидыДоступаБезОграничения = Новый ФиксированныйМассив(ВидыДоступаБезОграничения);
	УстановленныеПараметры.Добавить("ВидыДоступаБезОграничения");
	
	ПараметрыСеанса.ВидыДоступаЕдинственныеДляТипаЗначенияДоступа = Новый ФиксированныйМассив(ВидыДоступаЕдинственныеДляТипаЗначенияДоступа);
	УстановленныеПараметры.Добавить("ВидыДоступаЕдинственныеДляТипаЗначенияДоступа");
	
	ПараметрыСеанса.ВидыДоступаБезГруппЗначенияДоступа = Новый ФиксированныйМассив(ВидыДоступаБезГруппЗначенияДоступа);
	УстановленныеПараметры.Добавить("ВидыДоступаБезГруппЗначенияДоступа");
	
	ПараметрыСеанса.ВидыДоступаЧерезПраваПоЗначениямДоступа = ?(ВидыДоступаЧерезПраваПоЗначениямДоступа.Количество() = 0,
	                                                            "",
	                                                            Новый ФиксированныйМассив(ВидыДоступаЧерезПраваПоЗначениямДоступа));
	УстановленныеПараметры.Добавить("ВидыДоступаЧерезПраваПоЗначениямДоступа");
	
	Если КаждыйВидЕдинственный И КаждыйВидБезГрупп Тогда
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "КаждыйВидЕдинственный, КаждыйВидБезГрупп";
	ИначеЕсли КаждыйВидЕдинственный Тогда
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "КаждыйВидЕдинственный";
	ИначеЕсли КаждыйВидБезГрупп Тогда
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "КаждыйВидБезГрупп";
	Иначе
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "Да";
	КонецЕсли;
	УстановленныеПараметры.Добавить("ОграничиватьДоступПоВиду");
	
КонецПроцедуры // УстановитьПараметрыСеансаОграниченияДоступа()

// Процедура ОбновитьТаблицыГруппДоступа проверяет и, если нужно,
// обновляет состав РегистрСведений.ТаблицыГруппДоступа для одной
// или всех групп доступа пользователей, в которых есть пользователи.
//  Процедура использует таблицу Справочник.ПрофилиГруппДоступ.ТаблицыРолей.
//
// Параметры:
//  ГруппаДоступа - СправочникСсылка.ГруппыДоступа.
//
Процедура ОбновитьТаблицыГруппДоступа(Знач ГруппаДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицыПрофиля.Таблица,
	|	ПользователиГрупп.Пользователь,
	|	ТаблицыПрофиля.Добавление КАК Добавление,
	|	ТаблицыПрофиля.Изменение КАК Изменение,
	|	ТаблицыПрофиля.Удаление КАК Удаление,
	|	ТаблицыПрофиля.ТипТаблицы КАК ТипТаблицы,
	|	ВЫБОР
	|		КОГДА ТаблицыПрофиля.Добавление
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДоступаПравоДобавления,
	|	ВЫБОР
	|		КОГДА ТаблицыПрофиля.Изменение
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДоступаПравоИзменения
	|ПОМЕСТИТЬ ТаблицыПользователейГруппы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицыРолей.Таблица КАК Таблица,
	|		МАКСИМУМ(ТаблицыРолей.Добавление) КАК Добавление,
	|		МАКСИМУМ(ТаблицыРолей.Изменение) КАК Изменение,
	|		МАКСИМУМ(ТаблицыРолей.Удаление) КАК Удаление,
	|		МАКСИМУМ(ТаблицыРолей.ТипТаблицы) КАК ТипТаблицы
	|	ИЗ
	|		Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК ТаблицыРолей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|			ПО (ГруппыДоступа.Профиль = ТаблицыРолей.Ссылка)
	|				И (ГруппыДоступа.Ссылка = &ГруппаДоступа)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицыРолей.Таблица) КАК ТаблицыПрофиля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиГруппыДоступа КАК ПользователиГрупп
	|		ПО (ПользователиГрупп.ГруппаДоступа = &ГруппаДоступа)
	|			И ((НЕ ПользователиГрупп.Пользователь В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы
	|		ПО (ТаблицыПользователейГруппы.Таблица = ТаблицыГруппДоступа.Таблица)
	|			И (ТаблицыПользователейГруппы.Пользователь = ТаблицыГруппДоступа.Пользователь)
	|			И (ТаблицыПользователейГруппы.Добавление = ТаблицыГруппДоступа.Добавление)
	|			И (ТаблицыПользователейГруппы.Изменение = ТаблицыГруппДоступа.Изменение)
	|			И (ТаблицыПользователейГруппы.Удаление = ТаблицыГруппДоступа.Удаление)
	|			И (ТаблицыПользователейГруппы.ТипТаблицы = ТаблицыГруппДоступа.ТипТаблицы)
	|			И (ТаблицыПользователейГруппы.ВидДоступаПравоДобавления = ТаблицыГруппДоступа.ВидДоступаПравоДобавления)
	|			И (ТаблицыПользователейГруппы.ВидДоступаПравоИзменения = ТаблицыГруппДоступа.ВидДоступаПравоИзменения)
	|ГДЕ
	|	ТаблицыГруппДоступа.ГруппаДоступа = &ГруппаДоступа
	|	И ТаблицыПользователейГруппы.Таблица ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
	|		ПО ТаблицыПользователейГруппы.Таблица = ТаблицыГруппДоступа.Таблица
	|			И ТаблицыПользователейГруппы.Пользователь = ТаблицыГруппДоступа.Пользователь
	|			И (ТаблицыГруппДоступа.ГруппаДоступа = &ГруппаДоступа)
	|			И ТаблицыПользователейГруппы.Добавление = ТаблицыГруппДоступа.Добавление
	|			И ТаблицыПользователейГруппы.Изменение = ТаблицыГруппДоступа.Изменение
	|			И ТаблицыПользователейГруппы.Удаление = ТаблицыГруппДоступа.Удаление
	|			И ТаблицыПользователейГруппы.ТипТаблицы = ТаблицыГруппДоступа.ТипТаблицы
	|			И ТаблицыПользователейГруппы.ВидДоступаПравоДобавления = ТаблицыГруппДоступа.ВидДоступаПравоДобавления
	|			И ТаблицыПользователейГруппы.ВидДоступаПравоИзменения = ТаблицыГруппДоступа.ВидДоступаПравоИзменения
	|ГДЕ
	|	ТаблицыГруппДоступа.Таблица ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступа);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицыПользователейГруппы.Таблица,
		|	ТаблицыПользователейГруппы.Пользователь,
		|	&ГруппаДоступа КАК ГруппаДоступа,
		|	ТаблицыПользователейГруппы.Добавление,
		|	ТаблицыПользователейГруппы.Изменение,
		|	ТаблицыПользователейГруппы.Удаление,
		|	ТаблицыПользователейГруппы.ТипТаблицы,
		|	ТаблицыПользователейГруппы.ВидДоступаПравоДобавления,
		|	ТаблицыПользователейГруппы.ВидДоступаПравоИзменения
		|ИЗ
		|	ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы";
		НаборЗаписей = РегистрыСведений.ТаблицыГруппДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГруппаДоступа.Установить(ГруппаДоступа);
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура ЗаписатьЗначенияГруппДоступа перезаписывает в РегистрСведений.ЗначенияГруппДоступа
// ЗначенияДоступа разрешенные/запрещенные для группы доступа.
//  Производится проверка на необходимость записи - если различий нет, запись не выполняется.
//
// Параметры:
//  ГруппаДоступа - СправочникСсылка.ГруппыДоступа.
//
Процедура ЗаписатьЗначенияГруппДоступа(Знач ГруппаДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыДоступа.ВидДоступа КАК ВидДоступа,
	|	ИСТИНА КАК ТолькоВидДоступа,
	|	НЕОПРЕДЕЛЕНО КАК ЗначениеДоступа
	|ПОМЕСТИТЬ ЗначенияГруппы
	|ИЗ
	|	Справочник.ГруппыДоступа.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	(НЕ ВидыДоступа.ДоступРазрешен)
	|	И ВидыДоступа.Ссылка = &ГруппаДоступа
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗначенияДоступа.ВидДоступа,
	|	ЛОЖЬ,
	|	ЗначенияДоступа.ЗначениеДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.ВидыДоступа КАК ВидыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ЗначенияДоступа
	|		ПО (ВидыДоступа.Ссылка = &ГруппаДоступа)
	|			И (ЗначенияДоступа.Ссылка = &ГруппаДоступа)
	|			И ВидыДоступа.ВидДоступа = ЗначенияДоступа.ВидДоступа
	|			И ((НЕ ВидыДоступа.ДоступРазрешен = ЗначенияДоступа.ДоступРазрешен))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияГруппы КАК ЗначенияГруппы
	|		ПО (ЗначенияГруппы.ВидДоступа = ЗначенияГруппДоступа.ВидДоступа)
	|			И (ЗначенияГруппы.ТолькоВидДоступа = ЗначенияГруппДоступа.ТолькоВидДоступа)
	|			И (ЗначенияГруппы.ЗначениеДоступа = ЗначенияГруппДоступа.ЗначениеДоступа)
	|ГДЕ
	|	ЗначенияГруппДоступа.ГруппаДоступа = &ГруппаДоступа
	|	И ЗначенияГруппы.ВидДоступа ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	ЗначенияГруппы КАК ЗначенияГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
	|		ПО (ЗначенияГруппДоступа.ГруппаДоступа = &ГруппаДоступа)
	|			И ЗначенияГруппы.ВидДоступа = ЗначенияГруппДоступа.ВидДоступа
	|			И ЗначенияГруппы.ТолькоВидДоступа = ЗначенияГруппДоступа.ТолькоВидДоступа
	|			И ЗначенияГруппы.ЗначениеДоступа = ЗначенияГруппДоступа.ЗначениеДоступа
	|ГДЕ
	|	ЗначенияГруппДоступа.ВидДоступа ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступа);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ГруппаДоступа КАК ГруппаДоступа,
		|	ЗначенияГруппы.ВидДоступа,
		|	ЗначенияГруппы.ТолькоВидДоступа,
		|	ЗначенияГруппы.ЗначениеДоступа
		|ИЗ
		|	ЗначенияГруппы КАК ЗначенияГруппы";
		НаборЗаписей = РегистрыСведений.ЗначенияГруппДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГруппаДоступа.Установить(ГруппаДоступа);
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Функция ПоставляемыйПрофильИзменен проверяет изменен ли поставляемый профиль
// по сравнению с описанием из функции ОписанияНачальногоЗаполненияПрофилейГруппДоступа()
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа
//                     (возвращается реквизит ПоставляемыйПрофильИзменен),
//               - СправочникОбъект.ПрофилиГруппДоступа
//                     (возвращается результат сравнения заполнения объекта
//                      с описанием в переопределяемом общем модуле).
//
// Возвращаемое значение:
//  Булево.
//
Функция ПоставляемыйПрофильИзменен(Профиль) Экспорт
	
	Если ТипЗнч(Профиль) = Тип("СправочникСсылка.ПрофилиГруппДоступа") Тогда
		Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Профиль, "ПоставляемыйПрофильИзменен");
	КонецЕсли;
	
	ОписанияПрофилей = ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	ОписаниеНайдено = Ложь;
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если ОписаниеПрофиля.Идентификатор = Строка(Профиль.Ссылка.УникальныйИдентификатор()) Тогда
			ОписаниеНайдено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеНайдено Тогда
		
		Если ВРег(Профиль.Наименование) <> ВРег(ОписаниеПрофиля.Наименование) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Профиль.Роли.Количество()        <> ОписаниеПрофиля.Роли.Количество()
		 ИЛИ Профиль.ВидыДоступа.Количество() <> ОписаниеПрофиля.ВидыДоступа.Количество() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для каждого СтрокаРоли Из Профиль.Роли Цикл
			Если ОписаниеПрофиля.Роли.Найти(СтрокаРоли.Роль) = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаВидаДоступа Из Профиль.ВидыДоступа Цикл
			Если ОписаниеПрофиля.ВидыДоступа.Найти(СтрокаВидаДоступа.ВидДоступа) = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: начальное заполнение.

// Процедура ЕстьНачальноеЗаполнениеПрофиляГруппДоступа определяет наличие начального
// заполнения для профиля групп доступа в переопределяемом модуле.
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа.
//  
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьНачальноеЗаполнениеПрофиляГруппДоступа(Знач Профиль) Экспорт
	
	ОписанияПрофилей = ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	ОписаниеНайдено = Ложь;
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если ОписаниеПрофиля.Идентификатор = Строка(Профиль.УникальныйИдентификатор()) Тогда
			ОписаниеНайдено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеНайдено;
	
КонецФункции

// Процедура НачальноеЗаполнениеПрофилейГруппДоступа создает элементы
// в справочнике ПрофилиГруппДоступа, свойственные прикладному решению,
// и позволяет восстановить ранее заполненный элемент по его уникальному идентификатору,
// если для него предусмотрено начальное заполнение.
//  Поиск начального заполнения осуществляется по строке уникального идентификатора профиля.
//
// Параметры:
//  Профиль      - Неопределено, СправочникСсылка.ПрофилиГруппДоступа.
//                 Если для указанного профиля описание начального заполнения найдено,
//                 содержимое профиля полностью замещается.
//
Процедура НачальноеЗаполнениеПрофилейГруппДоступа(Знач Профиль = Неопределено) Экспорт
	
	ОписанияПрофилей = ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если Профиль = Неопределено ИЛИ ОписаниеПрофиля.Идентификатор = Строка(Профиль.УникальныйИдентификатор()) Тогда
			ОбновитьПрофильГруппДоступа(ОписаниеПрофиля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция ОбновитьПрофильГруппДоступа замещает имеющийся или
// создает новый профиль групп доступа по его начальному описанию.
//
// Параметры:
//  ОписаниеПрофиля - Структура (см. функцию НовоеОписаниеПрофиляГруппДоступа()).
// 
// Возвращаемое значение:
//  Булево. Истина - профиль изменен.
//
Функция ОбновитьПрофильГруппДоступа(ОписаниеПрофиля, НеОбновлятьРолиПользователей = Ложь) Экспорт
	
	ПрофильИзменен = Ложь;
	
	УникальныйИдентификаторПрофиля = Новый УникальныйИдентификатор(ОписаниеПрофиля.Идентификатор);
	ПрофильСсылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(УникальныйИдентификаторПрофиля);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	ПрофилиГруппДоступа.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ПрофильСсылка);
	Если Запрос.Выполнить().Пустой() Тогда
		// Элемента данных нет, нужно создать новый.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(УникальныйИдентификаторПрофиля));
		ПрофильИзменен = Истина;
	Иначе
		ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
		ПрофильИзменен = УправлениеДоступом.ПоставляемыйПрофильИзменен(ПрофильОбъект);
	КонецЕсли;
	
	
	Если ПрофильИзменен Тогда
		ЗаблокироватьДанныеДляРедактирования(ПрофильОбъект.Ссылка);
		
		ПрофильОбъект.Наименование = ОписаниеПрофиля.Наименование;
		
		ПрофильОбъект.Роли.Очистить();
		Для каждого Роль Из ОписаниеПрофиля.Роли Цикл
			Строка = ПрофильОбъект.Роли.Добавить();
			Строка.Роль = Роль;
		КонецЦикла;
		
		ПрофильОбъект.ВидыДоступа.Очистить();
		Для каждого ИмяВидаДоступа Из ОписаниеПрофиля.ВидыДоступа Цикл
			Строка = ПрофильОбъект.ВидыДоступа.Добавить();
			Строка.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа[ИмяВидаДоступа];
		КонецЦикла;
		
		Если НеОбновлятьРолиПользователей Тогда
			ПрофильОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьРолиПользователей");
		КонецЕсли;
		ПрофильОбъект.Записать();
	КонецЕсли;
	
	Возврат ПрофильИзменен;
	
КонецФункции

// Процедура ОбновитьТаблицыРолейПрофилейГруппДоступа обновляет
// ТаблицыРолей каждого ПрофильГруппДоступа.
//
Процедура ОбновитьТаблицыРолейПрофилейГруппДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Справочники.ПрофилиГруппДоступа.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЭтоГруппа Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
			Если Выборка.Ссылка = Справочники.ПрофилиГруппДоступа.Администратор Тогда
				ЕстьИзменения = Истина;
				Объект.ОбменДанными.Загрузка = Истина;
			ИначеЕсли Объект.ТипыСсылок.Количество() <> 0 Тогда
				ЕстьИзменения = Истина;
			Иначе
				ЕстьИзменения = Ложь;
				ЗаполнитьТаблицыРолейПрофиляГруппДоступа(Объект, ЕстьИзменения);
			КонецЕсли;
			Если ЕстьИзменения Тогда
				Объект.ДополнительныеСвойства.Вставить("НеОбновлятьРеквизитПоставляемыйПрофильИзменен");
				Объект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьТаблицыРолейПрофилейГруппДоступа()

// Процедура ОбновитьЗависимостиПравДоступа обновляет
// содержимое регистра сведений ЗависимостиПравДоступа,
// если прикладной разработчик изменил зависимости.
//
Процедура ОбновитьЗависимостиПравДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ЗависимостиПравДоступа.СоздатьНаборЗаписей();
	УправлениеДоступомПереопределяемый.ЗаполнитьЗависимостиПравДоступа(НаборЗаписей);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НовыеЗаписи.ПодчиненнаяТаблица,
	|	НовыеЗаписи.ТипВедущейТаблицы,
	|	НовыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы,
	|	НовыеЗаписи.ПриПроверкеПраваЧтение,
	|	НовыеЗаписи.ПриПроверкеПраваДобавление,
	|	НовыеЗаписи.ПриПроверкеПраваИзменение,
	|	НовыеЗаписи.ПриПроверкеПраваУдаление
	|ПОМЕСТИТЬ НовыеЗаписи
	|ИЗ
	|	&НовыеЗаписи КАК НовыеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ЗависимостиПравДоступа КАК СтарыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗаписи КАК НовыеЗаписи
	|		ПО СтарыеЗаписи.ПодчиненнаяТаблица = НовыеЗаписи.ПодчиненнаяТаблица
	|			И СтарыеЗаписи.ТипВедущейТаблицы = НовыеЗаписи.ТипВедущейТаблицы
	|			И СтарыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы = НовыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы
	|			И СтарыеЗаписи.ПриПроверкеПраваЧтение = НовыеЗаписи.ПриПроверкеПраваЧтение
	|			И СтарыеЗаписи.ПриПроверкеПраваДобавление = НовыеЗаписи.ПриПроверкеПраваДобавление
	|			И СтарыеЗаписи.ПриПроверкеПраваИзменение = НовыеЗаписи.ПриПроверкеПраваИзменение
	|			И СтарыеЗаписи.ПриПроверкеПраваУдаление = НовыеЗаписи.ПриПроверкеПраваУдаление
	|ГДЕ
	|	НовыеЗаписи.ПодчиненнаяТаблица ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	НовыеЗаписи КАК НовыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗависимостиПравДоступа КАК СтарыеЗаписи
	|		ПО НовыеЗаписи.ПодчиненнаяТаблица = СтарыеЗаписи.ПодчиненнаяТаблица
	|			И НовыеЗаписи.ТипВедущейТаблицы = СтарыеЗаписи.ТипВедущейТаблицы
	|			И НовыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы = СтарыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы
	|			И НовыеЗаписи.ПриПроверкеПраваЧтение = СтарыеЗаписи.ПриПроверкеПраваЧтение
	|			И НовыеЗаписи.ПриПроверкеПраваДобавление = СтарыеЗаписи.ПриПроверкеПраваДобавление
	|			И НовыеЗаписи.ПриПроверкеПраваИзменение = СтарыеЗаписи.ПриПроверкеПраваИзменение
	|			И НовыеЗаписи.ПриПроверкеПраваУдаление = СтарыеЗаписи.ПриПроверкеПраваУдаление
	|ГДЕ
	|	СтарыеЗаписи.ПодчиненнаяТаблица ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("НовыеЗаписи", НаборЗаписей);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура ЗаполнитьТаблицыРолейПрофиляГруппДоступа
// заполняет табличную часть ТаблицыРолей профиля групп доступа,
// и проверяет отличия результата от начального.
// 
// Параметры:
//  Профиль      - СправочникОбъект.ПрофилиГруппДоступа.
//  ЕстьИзменения - Булево.
//
Процедура ЗаполнитьТаблицыРолейПрофиляГруппДоступа(Знач Профиль, ЕстьИзменения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка структуры имен коллекций метаданных, которые нужно проанализировать
	// на доступность ролям группы доступа.
	ИменаКоллекцийОбъектовМетаданных = Новый Структура;
	ИменаКоллекцийОбъектовМетаданных.Вставить("Справочники",             "Справочник");
	ИменаКоллекцийОбъектовМетаданных.Вставить("Документы",               "Документ");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ЖурналыДокументов",       "ЖурналДокументов");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыСчетов",             "ПланСчетов");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыВидовРасчета",       "ПланВидовРасчета");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыСведений",        "РегистрСведений");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыНакопления",      "РегистрНакопления");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыБухгалтерии",     "РегистрБухгалтерии");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыРасчета",         "РегистрРасчета");
	ИменаКоллекцийОбъектовМетаданных.Вставить("БизнесПроцессы",          "БизнесПроцесс");
	ИменаКоллекцийОбъектовМетаданных.Вставить("Задачи",                  "Задача");
	// Подготовка структуры наличия права добавления у коллекций метаданных.
	ПравоДобавления = Новый Структура;
	ПравоДобавления.Вставить("Справочники",             Истина);
	ПравоДобавления.Вставить("Документы",               Истина);
	ПравоДобавления.Вставить("ЖурналыДокументов",       Ложь);
	ПравоДобавления.Вставить("ПланыВидовХарактеристик", Истина);
	ПравоДобавления.Вставить("ПланыСчетов",             Истина);
	ПравоДобавления.Вставить("ПланыВидовРасчета",       Истина);
	ПравоДобавления.Вставить("РегистрыСведений",        Ложь);
	ПравоДобавления.Вставить("РегистрыНакопления",      Ложь);
	ПравоДобавления.Вставить("РегистрыБухгалтерии",     Ложь);
	ПравоДобавления.Вставить("РегистрыРасчета",         Ложь);
	ПравоДобавления.Вставить("БизнесПроцессы",          Истина);
	ПравоДобавления.Вставить("Задачи",                  Истина);
	// Подготовка структуры наличия права изменения у коллекций метаданных.
	ПравоИзменения = Новый Структура;
	ПравоИзменения.Вставить("Справочники",             Истина);
	ПравоИзменения.Вставить("Документы",               Истина);
	ПравоИзменения.Вставить("ЖурналыДокументов",       Ложь);
	ПравоИзменения.Вставить("ПланыВидовХарактеристик", Истина);
	ПравоИзменения.Вставить("ПланыСчетов",             Истина);
	ПравоИзменения.Вставить("ПланыВидовРасчета",       Истина);
	ПравоИзменения.Вставить("РегистрыСведений",        Истина);
	ПравоИзменения.Вставить("РегистрыНакопления",      Истина);
	ПравоИзменения.Вставить("РегистрыБухгалтерии",     Истина);
	ПравоИзменения.Вставить("РегистрыРасчета",         Истина);
	ПравоИзменения.Вставить("БизнесПроцессы",          Истина);
	ПравоИзменения.Вставить("Задачи",                  Истина);
	// Подготовка структуры наличия права удаления у коллекций метаданных.
	ПравоУдаления = Новый Структура;
	ПравоУдаления.Вставить("Справочники",             Истина);
	ПравоУдаления.Вставить("Документы",               Истина);
	ПравоУдаления.Вставить("ЖурналыДокументов",       Ложь);
	ПравоУдаления.Вставить("ПланыВидовХарактеристик", Истина);
	ПравоУдаления.Вставить("ПланыСчетов",             Истина);
	ПравоУдаления.Вставить("ПланыВидовРасчета",       Истина);
	ПравоУдаления.Вставить("РегистрыСведений",        Ложь);
	ПравоУдаления.Вставить("РегистрыНакопления",      Ложь);
	ПравоУдаления.Вставить("РегистрыБухгалтерии",     Ложь);
	ПравоУдаления.Вставить("РегистрыРасчета",         Ложь);
	ПравоУдаления.Вставить("БизнесПроцессы",          Истина);
	ПравоУдаления.Вставить("Задачи",                  Истина);
	
	Профиль.ТаблицыРолей.Очистить();
	
	// Создание нового списка.
	Для каждого КлючИЗначение Из ИменаКоллекцийОбъектовМетаданных Цикл
		
		Для каждого ОбъектМетаданных Из Метаданные[КлючИЗначение.Ключ] Цикл
			
			ТаблицаТекущегоОбъектаМетаданных = КлючИЗначение.Значение + "." + ОбъектМетаданных.Имя;
			
			Для каждого СтрокаТЧ Из Профиль.Роли Цикл
				Если Метаданные.Роли.Найти(СтрокаТЧ.Роль) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПравоДоступа("Чтение", ОбъектМетаданных, Метаданные.Роли[СтрокаТЧ.Роль]) Тогда
					НоваяСтрока = Профиль.ТаблицыРолей.Добавить();
					НоваяСтрока.Роль    = СтрокаТЧ.Роль;
					НоваяСтрока.Таблица = ТаблицаТекущегоОбъектаМетаданных;
					НоваяСтрока.Добавление               = ПравоДобавления[КлючИЗначение.Ключ] И ПравоДоступа("Добавление", ОбъектМетаданных, Метаданные.Роли[СтрокаТЧ.Роль]);
					НоваяСтрока.Изменение                = ПравоИзменения [КлючИЗначение.Ключ] И ПравоДоступа("Изменение",  ОбъектМетаданных, Метаданные.Роли[СтрокаТЧ.Роль]);
					НоваяСтрока.Удаление                 = ПравоУдаления  [КлючИЗначение.Ключ] И ПравоДоступа("Удаление",   ОбъектМетаданных, Метаданные.Роли[СтрокаТЧ.Роль]);
					
					// Установка пустой ссылки, как идентификатора типа для таблиц объектов.
					Если ПравоДобавления[КлючИЗначение.Ключ] Тогда
						ОписаниеТипаТаблицы = Новый ОписаниеТипов(КлючИЗначение.Значение + "Ссылка." + ОбъектМетаданных.Имя);
						НоваяСтрока.ТипТаблицы = ОписаниеТипаТаблицы.ПривестиЗначение(Неопределено);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЦикла;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НовыеТаблицы.Роль,
	|	НовыеТаблицы.Таблица,
	|	НовыеТаблицы.Добавление,
	|	НовыеТаблицы.Изменение,
	|	НовыеТаблицы.Удаление,
	|	НовыеТаблицы.ТипТаблицы
	|ПОМЕСТИТЬ НовыеТаблицы
	|ИЗ
	|	&НовыеТаблицы КАК НовыеТаблицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК СтарыеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеТаблицы КАК НовыеТаблицы
	|		ПО (НовыеТаблицы.Роль = СтарыеТаблицы.Роль)
	|			И (НовыеТаблицы.Таблица = СтарыеТаблицы.Таблица)
	|			И (НовыеТаблицы.Добавление = СтарыеТаблицы.Добавление)
	|			И (НовыеТаблицы.Изменение = СтарыеТаблицы.Изменение)
	|			И (НовыеТаблицы.Удаление = СтарыеТаблицы.Удаление)
	|			И (НовыеТаблицы.ТипТаблицы = СтарыеТаблицы.ТипТаблицы)
	|ГДЕ
	|	СтарыеТаблицы.Ссылка = &Профиль
	|	И НовыеТаблицы.Роль ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	НовыеТаблицы КАК НовыеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК СтарыеТаблицы
	|		ПО (СтарыеТаблицы.Ссылка = &Профиль)
	|			И НовыеТаблицы.Роль = СтарыеТаблицы.Роль
	|			И НовыеТаблицы.Таблица = СтарыеТаблицы.Таблица
	|			И НовыеТаблицы.Добавление = СтарыеТаблицы.Добавление
	|			И НовыеТаблицы.Изменение = СтарыеТаблицы.Изменение
	|			И НовыеТаблицы.Удаление = СтарыеТаблицы.Удаление
	|			И НовыеТаблицы.ТипТаблицы = СтарыеТаблицы.ТипТаблицы
	|ГДЕ
	|	СтарыеТаблицы.Роль ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("НовыеТаблицы", Профиль.ТаблицыРолей.Выгрузить());
	Запрос.УстановитьПараметр("Профиль", Профиль.Ссылка);
	ЕстьИзменения = НЕ Запрос.Выполнить().Пустой();

КонецПроцедуры // ЗаполнитьТаблицыРолейПрофиляГруппДоступа()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: обработчики подписок на события и регламентного задания.

// Процедура ЗаписатьГруппыИВидыДоступа перезаписывает группы и виды доступа ЗначенияДоступа,
// в РегистрСведений.ГруппыЗначенийДоступа, используя объект или ссылку на объект.
//  Процедура вызывается из УправлениеДоступомСобытия.ЗаписатьГруппыДоступа(),
// но может быть вызвана из любого места, например, при включении ограничения доступа на уровне записи.
//
// Параметры:
//  Объект - объект или ссылка на объект (обычно Справочник<Объект|Ссылка>).
//                 В случае вызова с клиента можно передать только ссылку, а нужен объект.
//                 Если получена ссылка, то по ней будет получен объект.
//                 Ссылка объекта должна быть типа ОписаниеТипов измерения Значение
//                 в РегистрСведений.ГруппыЗначенийДоступа.
// 
Процедура ЗаписатьГруппыИВидыДоступа(Знач Объект, Отказ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		
		
		
		ИзмененныеПользователи = Новый Массив;
		Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ИзмененныеПользователи.Добавить(Объект.Ссылка);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Подготовка таблицы подчиненности пользователей.
		Если НЕ УправлениеДоступомПереопределяемый.ТаблицаПодчиненностиПользователей(Запрос.МенеджерВременныхТаблиц) Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	Пользователи.Ссылка КАК ПодчиненныйПользователь
			|ПОМЕСТИТЬ ТаблицаПодчиненностиПользователей
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	ЛОЖЬ";
			Запрос.Выполнить();
		КонецЕсли;
		
		// 1. Подготовка состава групп пользователей для расширения доступа пользователей,
		//    имеющих подчиненных пользователей, например, для руководителей сотрудников.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
		|	ТаблицаПодчиненностиПользователей.Пользователь
		|ПОМЕСТИТЬ РасширенныйСоставГруппПользователей
		|ИЗ
		|	ТаблицаПодчиненностиПользователей КАК ТаблицаПодчиненностиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставГруппПользователей
		|		ПО ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь = СоставГруппПользователей.Пользователь
		|			И (ТИПЗНАЧЕНИЯ(СоставГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи))
		|			И (ТИПЗНАЧЕНИЯ(ТаблицаПодчиненностиПользователей.Пользователь) = ТИП(Справочник.Пользователи))
		|			И (ТаблицаПодчиненностиПользователей.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставГруппПользователей.ГруппаПользователей,
		|	СоставГруппПользователей.Пользователь
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПодчиненностиПользователей";
		Запрос.Выполнить();
		
		// Подготовка таблицы дополнительных групп пользователей - групп доступа исполнителей (например задач).
		Если НЕ УправлениеДоступомПереопределяемый.ТаблицаГруппИсполнителей(Запрос.МенеджерВременныхТаблиц) Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК ГруппаИсполнителей,
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ВсеПользователиГруппИсполнителей
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	ЛОЖЬ";
			Запрос.Выполнить();
		Иначе
			// Получение таблицы всех пользователей групп исполнителей:
			// пользователей групп исполнителей плюс пользователей групп пользователей групп исполнителей.
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаГруппИсполнителей.ГруппаИсполнителей,
			|	РасширенныйСоставГруппПользователей.Пользователь
			|ПОМЕСТИТЬ ВсеПользователиГруппИсполнителей
			|ИЗ
			|	ТаблицаГруппИсполнителей КАК ТаблицаГруппИсполнителей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасширенныйСоставГруппПользователей КАК РасширенныйСоставГруппПользователей
			|		ПО ТаблицаГруппИсполнителей.Пользователь = РасширенныйСоставГруппПользователей.ГруппаПользователей
			|			И (ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ГруппыПользователей))
			|			И (ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.Пользователи))
			|			И ((НЕ ТаблицаГруппИсполнителей.ГруппаИсполнителей В (&ПустыеСсылкиВозможныхЗначений)))
			|			И (ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) = ТИП(Справочник.Пользователи))
			|			И (ТаблицаГруппИсполнителей.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
			|;
			|
			|УНИЧТОЖИТЬ ТаблицаГруппИсполнителей";
			// Подготовка массива пустых ссылок, для фильтрации в запросе, с целью предотвратить ошибку записи набора с пустыми значениями.
			ПустыеСсылкиВозможныхЗначений = Новый Массив;
			Для каждого ТипЗначения Из Метаданные.РегистрыСведений.ГруппыЗначенийДоступа.Измерения.ЗначениеДоступа.Тип.Типы() Цикл
				ПустыеСсылкиВозможныхЗначений.Добавить(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя()).ПустаяСсылка());
			КонецЦикла;
			Запрос.УстановитьПараметр("ПустыеСсылкиВозможныхЗначений", ПустыеСсылкиВозможныхЗначений);
			Запрос.Выполнить();
		КонецЕсли;
		
		// 2. Подготовка состава групп пользователей для использования групп пользователей, как значений доступа.
		// 3. Подготовка состава групп пользователей для использования дополнительных групп пользователей
		//    (групп исполнителей), например, при адресации задач.
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаписиПользователей.ГруппаДоступа,
		|	ЗаписиПользователей.ЗначениеДоступа
		|ПОМЕСТИТЬ НовыеЗаписиПользователей
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасширенныйСоставГруппПользователей.ГруппаПользователей КАК ЗначениеДоступа,
		|		РасширенныйСоставГруппПользователей.Пользователь КАК ГруппаДоступа
		|	ИЗ
		|		РасширенныйСоставГруппПользователей КАК РасширенныйСоставГруппПользователей
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(РасширенныйСоставГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыПользователей)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ГруппыПользователейПользователей.ГруппаПользователей,
		|		ПользователиГруппПользователей.ГруппаПользователей
		|	ИЗ
		|		РасширенныйСоставГруппПользователей КАК ГруппыПользователейПользователей
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасширенныйСоставГруппПользователей КАК ПользователиГруппПользователей
		|			ПО ГруппыПользователейПользователей.Пользователь = ПользователиГруппПользователей.Пользователь
		|				И (ТИПЗНАЧЕНИЯ(ГруппыПользователейПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыПользователей))
		|				И (ТИПЗНАЧЕНИЯ(ПользователиГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыПользователей))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасширенныйСоставГруппПользователей.Пользователь,
		|		РасширенныйСоставГруппПользователей.ГруппаПользователей
		|	ИЗ
		|		РасширенныйСоставГруппПользователей КАК РасширенныйСоставГруппПользователей
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВсеПользователиГруппИсполнителей.Пользователь,
		|		ВсеПользователиГруппИсполнителей.ГруппаИсполнителей
		|	ИЗ
		|		ВсеПользователиГруппИсполнителей КАК ВсеПользователиГруппИсполнителей
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВсеПользователиГруппИсполнителей.ГруппаИсполнителей,
		|		РасширенныйСоставГруппПользователей.ГруппаПользователей
		|	ИЗ
		|		ВсеПользователиГруппИсполнителей КАК ВсеПользователиГруппИсполнителей
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасширенныйСоставГруппПользователей КАК РасширенныйСоставГруппПользователей
		|			ПО ВсеПользователиГруппИсполнителей.Пользователь = РасширенныйСоставГруппПользователей.Пользователь) КАК ЗаписиПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ РасширенныйСоставГруппПользователей";
		Запрос.Выполнить();
		
		// Получение записей для удаления.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПользователиИГруппыПользователей.ВидДоступа,
		|	ПользователиИГруппыПользователей.ЗначениеДоступа,
		|	ПользователиИГруппыПользователей.ТолькоВидДоступа,
		|	ПользователиИГруппыПользователей.ГруппаДоступа
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗаписиПользователей КАК НовыеЗаписиПользователей
		|		ПО ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеЗаписиПользователей.ЗначениеДоступа
		|			И ПользователиИГруппыПользователей.ГруппаДоступа = НовыеЗаписиПользователей.ГруппаДоступа
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи)
		|	И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
		|	И НовыеЗаписиПользователей.ЗначениеДоступа ЕСТЬ NULL";
		Выборка = Запрос.Выполнить().Выбрать();
		
		МенеджерЗаписи = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьМенеджерЗаписи();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			Если ТипЗнч(МенеджерЗаписи.ЗначениеДоступа) = Тип("СправочникСсылка.Пользователи")  И
			     ИзмененныеПользователи.Найти(МенеджерЗаписи.ЗначениеДоступа) = Неопределено Тогда
				
				ИзмененныеПользователи.Добавить(МенеджерЗаписи.ЗначениеДоступа);
			КонецЕсли;
			
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		// Получение записей для добавления.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи) КАК ВидДоступа,
		|	НовыеЗаписиПользователей.ЗначениеДоступа,
		|	ЛОЖЬ КАК ТолькоВидДоступа,
		|	НовыеЗаписиПользователей.ГруппаДоступа
		|ИЗ
		|	НовыеЗаписиПользователей КАК НовыеЗаписиПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеЗаписиПользователей.ЗначениеДоступа)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = НовыеЗаписиПользователей.ГруппаДоступа)
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа ЕСТЬ NULL";
		
		НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Для каждого Запись Из НаборЗаписей Цикл
			Если ТипЗнч(Запись.ЗначениеДоступа) = Тип("СправочникСсылка.Пользователи") И
			     ИзмененныеПользователи.Найти(Запись.ЗначениеДоступа) = Неопределено Тогда
				
				ИзмененныеПользователи.Добавить(Запись.ЗначениеДоступа);
			КонецЕсли;
		КонецЦикла;
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
		// Обновление ролей пользователей, для которых роли могли быть изменены.
		Если Объект.Ссылка = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СоставГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставГруппПользователей
			|ГДЕ
			|	СоставГруппПользователей.ГруппаПользователей = &ПредопределеннаяГруппа");
			Запрос.УстановитьПараметр("ПредопределеннаяГруппа", Объект.Ссылка);
			
			ИзмененныеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		ОбновитьРолиПользователей(ИзмененныеПользователи, ЕстьОшибки, ИСТИНА);
		Если ЕстьОшибки И НЕ Объект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
			Объект.ДополнительныеСвойства.Вставить("ЕстьОшибки");
		КонецЕсли;
	Иначе
		
		ВидыДоступа  = ВидыДоступаТаблицы(Объект.Метаданные().ПолноеИмя());
		ВидДоступаЧерезПраваПоЗначениямДоступа = (ВидыДоступа.Количество() = 1) И СвойстваВидаДоступа(ВидыДоступа[0]).ВидДоступаЧерезПраваПоЗначениямДоступа;
		
		Если ВидДоступаЧерезПраваПоЗначениямДоступа Тогда
			
			ВидДоступа = ВидыДоступа[0];
			
			// Подготовка групп доступа (родителей) значения доступа.
			НаборЗаписей = РодителиЗначенияДоступа(Объект.Ссылка, ВидДоступа);
			
			// Проверка изменения состава родителей.
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЗначениеИстина
			|ИЗ
			|	РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
			|ГДЕ
			|	ГруппыЗначенийДоступа.ЗначениеДоступа = &ЗначениеДоступа
			|	И ГруппыЗначенийДоступа.ВидДоступа = &ВидДоступа
			|	И (НЕ (ГруппыЗначенийДоступа.ТолькоВидДоступа, ГруппыЗначенийДоступа.ГруппаДоступа) В (&НовыеРодители))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИСТИНА
			|ГДЕ
			|	(НЕ ИСТИНА В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА КАК ЗначениеИстина
			|				ИЗ
			|					РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
			|				ГДЕ
			|					ГруппыЗначенийДоступа.ЗначениеДоступа = &ЗначениеДоступа
			|					И ГруппыЗначенийДоступа.ВидДоступа = &ВидДоступа))");
			Запрос.УстановитьПараметр("ВидДоступа",      ВидДоступа);
			Запрос.УстановитьПараметр("ЗначениеДоступа", Объект.Ссылка);
			Запрос.УстановитьПараметр("НовыеРодители",   НаборЗаписей.Выгрузить(, "ТолькоВидДоступа, ГруппаДоступа"));
			СоставРодителейИзменился = НЕ Запрос.Выполнить().Пустой();
			
			НаборЗаписей.Записать();
			
			Если СоставРодителейИзменился Тогда
			
				// Обновление состава родителей элементов в иерархии текущего значения.
				Запрос = Новый Запрос(СтрЗаменить(
				"ВЫБРАТЬ
				|	ТаблицаСИерархией.Ссылка КАК ПодчиненнаяСсылка
				|ИЗ
				|	ПодставляемаяТаблица КАК ТаблицаСИерархией
				|ГДЕ
				|	ТаблицаСИерархией.Ссылка В ИЕРАРХИИ(&ЗначениеДоступа)
				|	И ТаблицаСИерархией.Ссылка <> &ЗначениеДоступа", "ПодставляемаяТаблица", Объект.Метаданные().ПолноеИмя()));
				Запрос.УстановитьПараметр("ЗначениеДоступа", Объект.Ссылка);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					РодителиЗначенияДоступа(Выборка.ПодчиненнаяСсылка, ВидДоступа).Записать();
				КонецЦикла;
			КонецЕсли;
			
		Иначе
		
			НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
			
			Если ОграничиватьДоступНаУровнеЗаписей() Тогда
				// Заполнение группы значений для каждого вида доступа.
				Для каждого ВидДоступа Из ВидыДоступа Цикл
					Свойства = СвойстваВидаДоступа(ВидДоступа);
					ПостфиксИмени = ?(Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа, "", ПланыВидовХарактеристик.ВидыДоступа.ПолучитьИмяПредопределенного(ВидДоступа));
					
					Если НЕ Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа И НЕ Объект["ВидДоступа" + ПостфиксИмени] Тогда
						// Когда значение не разрешено по виду доступа.
						Запись = НаборЗаписей.Добавить();
						Запись.ВидДоступа       = ВидДоступа;
						Запись.ЗначениеДоступа  = Объект.Ссылка;
						Запись.ТолькоВидДоступа = Истина;
						Запись.ГруппаДоступа    = Неопределено;
					ИначеЕсли Свойства.ВидДоступаСОднойГруппойЗначенияДоступа Тогда
						Запись = НаборЗаписей.Добавить();
						Запись.ВидДоступа       = ВидДоступа;
						Запись.ЗначениеДоступа  = Объект.Ссылка;
						Запись.ТолькоВидДоступа = Ложь;
						Запись.ГруппаДоступа    = Объект["ГруппаДоступа" + ПостфиксИмени];
					Иначе
						Для каждого СтрокаТЧ Из Объект["ГруппыДоступа" + ПостфиксИмени] Цикл
							Запись = НаборЗаписей.Добавить();
							Запись.ВидДоступа       = ВидДоступа;
							Запись.ЗначениеДоступа  = Объект.Ссылка;
							Запись.ТолькоВидДоступа = Ложь;
							Запись.ГруппаДоступа    = СтрокаТЧ["ГруппаДоступа" + ПостфиксИмени];
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если НаборЗаписей.Количество() = 0 Тогда
					// Если это условие отключить, тогда зациклится регламентное задание
					// "Заполнение данных для ограничения доступа".
					ВызватьИсключение(НСтр("ru = 'Попытка записать пустой набор групп доступа или видов доступа!'"));
				КонецЕсли;
			КонецЕсли;
			
			НаборЗаписей.Отбор.ЗначениеДоступа.Установить(Объект.Ссылка);
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьГруппыИВидыДоступа()



////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ.

// Функция РодителиЗначенияДоступа заполняет НаборЗаписей,
// родителями значения доступа, включая себя, как родителя.
//
// Параметры:
//  ЗначениеДоступа - СправочникСсылка, ПланВидовХарактеристикСсылка.
//  ВидДоступа   - ПланВидовХарактеристикСсылка.ВидыДоступа - для заполнения.
//
// Возвращаемое значение:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ГруппыЗначенийДоступа.
//
Функция РодителиЗначенияДоступа(ЗначениеДоступа, ВидДоступа)
	
	// Получение флажка наследования права родителей для значения доступа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыЗначенийДоступа.НаследоватьПраваРодителей
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
	|ГДЕ
	|	ГруппыЗначенийДоступа.ВидДоступа = &ВидДоступа
	|	И ГруппыЗначенийДоступа.ЗначениеДоступа = &ЗначениеДоступа
	|	И ГруппыЗначенийДоступа.ГруппаДоступа = &ЗначениеДоступа");
	Запрос.УстановитьПараметр("ЗначениеДоступа", ЗначениеДоступа);
	Запрос.УстановитьПараметр("ВидДоступа", ВидДоступа);
	Выборка = Запрос.Выполнить().Выбрать();
	НаследоватьПраваРодителей = ?(Выборка.Следующий(), Выборка.НаследоватьПраваРодителей, Истина);
	
	НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидДоступа.Установить(ВидДоступа);
	НаборЗаписей.Отбор.ЗначениеДоступа.Установить(ЗначениеДоступа);
	
	ТекущийРодитель = ЗначениеДоступа;
	Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
	
		Запись = НаборЗаписей.Добавить();
		Запись.ВидДоступа                = ВидДоступа;
		Запись.ЗначениеДоступа           = ЗначениеДоступа;
		Запись.ГруппаДоступа             = ТекущийРодитель;
		Запись.НаследоватьПраваРодителей = ?(ЗначениеДоступа = Запись.ГруппаДоступа, НаследоватьПраваРодителей, Ложь);
		Запись.ИспользоватьПраваСсылки   = ?(ЗначениеДоступа = Запись.ГруппаДоступа, Истина, НаследоватьПраваРодителей);
		Запись.СвязьСРодителем           = ЗначениеДоступа <> Запись.ГруппаДоступа;
		
		ТекущийРодитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущийРодитель, "Родитель");
	КонецЦикла;
	
	Возврат НаборЗаписей;
	
КонецФункции // ЗаполнитьРодителейЗначенияДоступа()

Функция ОбновитьГруппыДоступаПрофиля(Профиль, УдаляемыеВидыДоступаБезНастройки)
	
	ЕстьОбновленниеГруппыДоступа = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	(ГруппыДоступа.Профиль = &Профиль
	|			ИЛИ &Профиль = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|				И ГруппыДоступа.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы))");
	
	Запрос.УстановитьПараметр("Профиль", Профиль.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Проверка необходимости/возможности обновления группы доступа.
		ГруппаДоступа = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ГруппаДоступа.Ссылка = Справочники.ГруппыДоступа.Администраторы
		   И ГруппаДоступа.Профиль <> Справочники.ПрофилиГруппДоступа.Администратор Тогда
			// Установка профиля Администратор, если не задан.
			ГруппаДоступа.Профиль = Справочники.ПрофилиГруппДоступа.Администратор;
		КонецЕсли;
		
		// Проверка состава видов доступа.
		СоставВидовДоступаИзменен           = Ложь;
		ЕстьУдаляемыеВидыДоступаСНастройкой = Ложь;
		Если ГруппаДоступа.ВидыДоступа.Количество() <> Профиль.ВидыДоступа.Количество() Тогда
			СоставВидовДоступаИзменен = Истина;
		Иначе
			Для каждого СтрокаВидаДоступа Из ГруппаДоступа.ВидыДоступа Цикл
				Если Профиль.ВидыДоступа.Найти(СтрокаВидаДоступа.ВидДоступа, "ВидДоступа") = Неопределено Тогда
					СоставВидовДоступаИзменен = Истина;
					Если СтрокаВидаДоступа.ДоступРазрешен ИЛИ
					     ГруппаДоступа.ЗначенияДоступа.Найти(СтрокаВидаДоступа.ВидДоступа, "ВидДоступа") <> Неопределено Тогда
						
						ЕстьУдаляемыеВидыДоступаСНастройкой = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СоставВидовДоступаИзменен
		   И (     НЕ УдаляемыеВидыДоступаБезНастройки
		       ИЛИ НЕ ЕстьУдаляемыеВидыДоступаСНастройкой ) Тогда
			// Обновление группы доступа.
			// 1. Удаление лишних видов доступа и значений доступа (если есть).
			ТекущийНомерСтроки = ГруппаДоступа.ВидыДоступа.Количество();
			Пока ТекущийНомерСтроки >= 0 Цикл
				ТекущийВидДоступа = ГруппаДоступа.ВидыДоступа[ТекущийНомерСтроки].ВидДоступа;
				Если Профиль.ВидыДоступа.Найти(ТекущийВидДоступа, "ВидДоступа") = Неопределено Тогда
					СтрокиЗначенийВидаДоступа = ГруппаДоступа.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа));
					Для каждого СтрокаЗначения Из СтрокиЗначенийВидаДоступа Цикл
						ГруппаДоступа.ЗначенияДоступа.Удалить(СтрокаЗначения);
					КонецЦикла;
					ГруппаДоступа.ВидыДоступа.Удалить(ТекущийНомерСтроки);
				КонецЕсли;
				ТекущийНомерСтроки = ТекущийНомерСтроки - 1;
			КонецЦикла;
			// 2. Добавление новых видов доступа (если есть).
			Для каждого СтрокаВидаДоступа Из Профиль.ВидыДоступа Цикл
				Если ГруппаДоступа.ВидыДоступа.Найти(СтрокаВидаДоступа.ВидДоступа, "ВидДоступа") = Неопределено Тогда
					ГруппаДоступа.ВидыДоступа.Добавить().ВидДоступа = СтрокаВидаДоступа.ВидДоступа;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ГруппаДоступа.Модифицированность() Тогда
			ГруппаДоступа.ДополнительныеСвойства.Вставить("НеОбновлятьРолиПользователей");
			ГруппаДоступа.Записать();
			ЕстьОбновленниеГруппыДоступа = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОбновленниеГруппыДоступа;
	
КонецФункции

Функция ОписанияНачальногоЗаполненияПрофилейГруппДоступа()
	
	ОписанияПрофилей = УправлениеДоступомПереопределяемый.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	// Описание для заполнения предопределенного профиля "Администратор".
	ОписаниеПрофиляАдминистратор = НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиляАдминистратор.Идентификатор = Строка(Справочники.ПрофилиГруппДоступа.Администратор.УникальныйИдентификатор());
	ОписаниеПрофиляАдминистратор.Наименование  = "Администратор";
	ОписаниеПрофиляАдминистратор.Роли.Добавить("ПолныеПрава");
	ОписанияПрофилей.Добавить(ОписаниеПрофиляАдминистратор);
	
	Возврат ОписанияПрофилей;
	
КонецФункции

