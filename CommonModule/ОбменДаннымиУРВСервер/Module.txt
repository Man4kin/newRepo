
//////////////////////// ФОРМИРОВАНИЕ ПАКЕТОВ //////////////////////////

&НаСервере
Функция СформироватьПакетDocumentObjectПриказОРаспределенииНадбавок(Объект)
	
	ТипДокумента	= ФабрикаXDTO.Тип("http://www.1cbit.ru", "DocumentObject.ПриказОРаспределенииНадбавок");
	ТипСостав		= ФабрикаXDTO.Тип("http://www.1cbit.ru", "DocumentTabularSectionRow.ПриказОРаспределенииНадбавок.Распределение");
	
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	ЗаполнитьЗначенияСвойств(Пакет, Объект,,"Ссылка,СтруктурнаяЕдиница,Распределение");
	Пакет.Ссылка			= СокрЛП(Объект.Ссылка.УникальныйИдентификатор());	
	Пакет.СтруктурнаяЕдиница= СокрЛП(Объект.СтруктурнаяЕдиница.УникальныйИдентификатор());	
	
	Для Каждого СтрокаТЧ Из Объект.Распределение Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ЗаполнитьЗначенияСвойств(ПакетСостав, СтрокаТЧ,,"ВидРаспределения");
		ПакетСостав.ВидРаспределения = ?(ЗначениеЗаполнено(СтрокаТЧ.ВидРаспределения), 
											СокрЛП(Перечисления.Izh_ВидыПерераспределенияНадбавок.Индекс(СтрокаТЧ.ВидРаспределения)),
												"");
		Пакет.Распределение.Добавить(ПакетСостав);
	КонецЦикла;
		
	Возврат Пакет;
	
КонецФункции

&НаСервере
Функция СформироватьПакетDocumentDocumentObjectТабельУчетаРабочегоВремени(Объект)
	
	МассивПриставок = Новый Массив(4);
	МассивПриставок[0] = "Первый";
	МассивПриставок[1] = "Второй";
	МассивПриставок[2] = "Третий";
	МассивПриставок[3] = "Четвертый";
	
	ТипДокумента	= ФабрикаXDTO.Тип("http://www.1cbit.ru", "DocumentObject.ТабельУчетаРабочегоВремени");
	ТипСостав		= ФабрикаXDTO.Тип("http://www.1cbit.ru", "DocumentTabularSectionRow.ТабельУчетаРабочегоВремени.ОтработанноеВремя");
	
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	ЗаполнитьЗначенияСвойств(Пакет, Объект,,"Ссылка,СтруктурнаяЕдиница,ОтработанноеВремя");
	Пакет.Ссылка			= СокрЛП(Объект.Ссылка.УникальныйИдентификатор());	
	Пакет.СтруктурнаяЕдиница= СокрЛП(Объект.СтруктурнаяЕдиница.УникальныйИдентификатор());	
	
	СтрокаИсключений = "";
	Для День = 1 По 31 Цикл
		Для Каждого Приставка Из МассивПриставок Цикл		
			СтрокаИсключений = СтрокаИсключений + Приставка + "ВидВремени" + СокрЛП(День) + ",";
		КонецЦикла;
		СтрокаИсключений = СтрокаИсключений + "ВидЗанятостиДень" + СокрЛП(День) + ",";
		СтрокаИсключений = СтрокаИсключений + "ДолжностьДень" + СокрЛП(День) + ",";
	КонецЦикла;	
	
	Для Каждого СтрокаТЧ Из Объект.ОтработанноеВремя Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ЗаполнитьЗначенияСвойств(ПакетСостав, СтрокаТЧ,,СтрокаИсключений);
		
		Для День = 1 По 31 Цикл
			Для Каждого Приставка Из МассивПриставок Цикл			
				ПакетСостав[Приставка + "ВидВремени" + СокрЛП(День)] = СокрЛП(СтрокаТЧ[Приставка + "ВидВремени" + СокрЛП(День)].УникальныйИдентификатор());
			КонецЦикла;
			ТекВидЗанятости = СтрокаТЧ["ВидЗанятостиДень" + СокрЛП(День)];
			ПакетСостав["ВидЗанятостиДень" + СокрЛП(День)]	= ?(ЗначениеЗаполнено(ТекВидЗанятости), СокрЛП(Перечисления.Izh_ВидыЗанятостиНаТекущемМестеРаботы.Индекс(ТекВидЗанятости)), 0);
			ПакетСостав["ДолжностьДень" + СокрЛП(День)]		= СокрЛП(СтрокаТЧ["ДолжностьДень" + СокрЛП(День)].УникальныйИдентификатор());
		КонецЦикла;		
		Пакет.ОтработанноеВремя.Добавить(ПакетСостав);
	КонецЦикла;
		
	Возврат Пакет;
	
КонецФункции

&НаСервере
Функция СформироватьПакетCatalogObjectКлассификаторИспользованияРабочегоВремени(Объект)
	
	ТипСправочника	= ФабрикаXDTO.Тип("http://www.1cbit.ru", "CatalogObject.КлассификаторИспользованияРабочегоВремени");	
	
	Пакет = ФабрикаXDTO.Создать(ТипСправочника);
	ЗаполнитьЗначенияСвойств(Пакет, Объект,,"Ссылка");
	Пакет.Ссылка = СокрЛП(Объект.Ссылка.УникальныйИдентификатор());		
		
	Возврат Пакет;
	
КонецФункции

&НаСервере
Функция СформироватьПакетCatalogObjectДолжности(Объект)
	
	ТипСправочника	= ФабрикаXDTO.Тип("http://www.1cbit.ru", "CatalogObject.Должности");		
	
	Пакет = ФабрикаXDTO.Создать(ТипСправочника);
	ЗаполнитьЗначенияСвойств(Пакет, Объект,,"Ссылка");
	Пакет.Ссылка = СокрЛП(Объект.Ссылка.УникальныйИдентификатор());		
	
	Возврат Пакет;
	
КонецФункции

//////////////////////// ЗАГРУЗКА ПАКЕТОВ //////////////////////////////

Функция ЗагрузитьDocumentObjectТабельУчетаРабочегоВремени(XDTO) Экспорт
	
	МассивПриставок = Новый Массив(4);
	МассивПриставок[0] = "Первый";
	МассивПриставок[1] = "Второй";
	МассивПриставок[2] = "Третий";
	МассивПриставок[3] = "Четвертый";
	
	Попытка
		Ссылка = Документы.Izh_ТабельУчетаРабочегоВремени.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ссылка));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.Izh_ТабельУчетаРабочегоВремени.СоздатьДокумент();
			Ссылка = Документы.Izh_ТабельУчетаРабочегоВремени.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ссылка));
			Объект.УстановитьСсылкуНового(Ссылка);			
		КонецЕсли;		
		ЗаполнитьЗначенияСвойств(Объект, XDTO,, "Проведен,ОтработанноеВремя,СтруктурнаяЕдиница");		
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.ФизическиеЛица.НайтиПоКоду(XDTO.Автор);		
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.СтруктурнаяЕдиница));
		
		СтрокаИсключений = "";
		Для День = 1 По 31 Цикл
			Для Каждого Приставка Из МассивПриставок Цикл		
				СтрокаИсключений = СтрокаИсключений + Приставка + "ВидВремени" + СокрЛП(День) + ",";
			КонецЦикла;
			СтрокаИсключений = СтрокаИсключений + "ВидЗанятостиДень" + СокрЛП(День) + ",";
			СтрокаИсключений = СтрокаИсключений + "ДолжностьДень" + СокрЛП(День) + ",";
		КонецЦикла;	
		
		Объект.ОтработанноеВремя.Очистить();
		Для Каждого СтрокаXTDO Из XDTO.ОтработанноеВремя Цикл
			НоваяСтрока = Объект.ОтработанноеВремя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаXTDO,,СтрокаИсключений);
						
			Для День = 1 По 31 Цикл 
				Для Каждого Приставка Из МассивПриставок Цикл			
					НоваяСтрока[Приставка + "ВидВремени" + СокрЛП(День)] = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаXTDO[Приставка + "ВидВремени" + СокрЛП(День)]));;
				КонецЦикла;
				ТекВидЗанятости = СтрокаXTDO["ВидЗанятостиДень" + СокрЛП(День)];
				НоваяСтрока["ВидЗанятостиДень" + СокрЛП(День)]	= ?(ТекВидЗанятости = 0, Перечисления.Izh_ВидыЗанятостиНаТекущемМестеРаботы.ПустаяСсылка(), Перечисления.Izh_ВидыЗанятостиНаТекущемМестеРаботы.Получить(Число(ТекВидЗанятости)));
				НоваяСтрока["ДолжностьДень" + СокрЛП(День)]		= Справочники.Izh_Должности.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаXTDO["ДолжностьДень" + СокрЛП(День)]));
			КонецЦикла;					
		КонецЦикла;
				
		Если XDTO.Проведен Тогда			
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Объект.Записать(?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
		XDTO		= Строка(Объект);
		Результат	= Истина;
	Исключение
		XDTO		= ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат	= Ложь;
	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции

Функция ЗагрузитьDocumentObjectПриказОРаспределенииНадбавок(XDTO) Экспорт
	
	Попытка
		Ссылка = Документы.Izh_ПриказОРаспределенииНадбавок.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ссылка));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.Izh_ПриказОРаспределенииНадбавок.СоздатьДокумент();
			Ссылка = Документы.Izh_ПриказОРаспределенииНадбавок.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ссылка));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект, XDTO,, "Проведен,Распределение,СтруктурнаяЕдиница");		
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.ФизическиеЛица.НайтиПоКоду(XDTO.Автор);		
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.СтруктурнаяЕдиница));
		
		Объект.Распределение.Очистить();
		Для Каждого СтрокаXTDO Из XDTO.Распределение Цикл
			НоваяСтрока = Объект.Распределение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаXTDO);
			НоваяСтрока.ВидРаспределения = ?(ЗначениеЗаполнено(СтрокаXTDO.ВидРаспределения), 
												Перечисления.Izh_ВидыПерераспределенияНадбавок.Получить(Число(СтрокаXTDO.ВидРаспределения)), 
													Неопределено);
		КонецЦикла;
		
		Если XDTO.Проведен Тогда			
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Объект.Записать(?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
		XDTO		= Строка(Объект);
		Результат	= Истина;
	Исключение
		XDTO		= ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат	= Ложь;
	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции

Функция ЗагрузитьCatalogObjectДолжности(XDTO) Экспорт
	
	Попытка
		Ссылка = Справочники.Izh_Должности.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ссылка));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Справочники.Izh_Должности.СоздатьЭлемент();
			Ссылка = Справочники.Izh_Должности.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ссылка));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект, XDTO,, "Ссылка");								
		Объект.Записать();		
		
		XDTO		= Строка(Объект);
		Результат	= Истина;
	Исключение
		XDTO		= ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат	= Ложь;
	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции

Функция ЗагрузитьCatalogObjectКлассификаторИспользованияРабочегоВремени(XDTO) Экспорт
	
	Попытка
		Ссылка = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ссылка));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.СоздатьЭлемент();
			Ссылка = Справочники.Izh_КлассификаторИспользованияРабочегоВремени.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ссылка));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект, XDTO,, "Ссылка");								
		Объект.Записать();		
		
		XDTO		= Строка(Объект);
		Результат	= Истина;
	Исключение
		XDTO		= ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат	= Ложь;
	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции



////////////////////////////////////////////////////////////////////////

&НаСервере
Функция ОтправитьСообщение(PackageXDTO, СтруктурнаяЕдиница = Неопределено) Экспорт
		
	Попытка
		ВебСервис			= УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисУРВ, СтруктурнаяЕдиница);
		Определение			= Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
		URIПространстваИмен	= Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса			= Определение.Сервисы.Получить(0).Имя;
		ИмяТочки			= Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси				= Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		Прокси.Пользователь = ВебСервис.Имя;
		Прокси.Пароль		= ВебСервис.Пароль;
	Исключение
		СообщениеОшибки = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(), "Web-сервис УРВ");
		ВызватьИсключение(СообщениеОшибки);
	КонецПопытки;
	
	//Определение	= Новый WSОпределения("http://test-1c/zup_test1/ws/ExchangeRSStore?wsdl", "ws");	
	//Прокси		= Новый WSПрокси(Определение, "http://www.1c.ru/SSL/Exchange", "ExchangeRSStore", "ExchangeRSStoreSoap");
	//Прокси.Пользователь = "ws";		
	
	ТипПакета = PackageXDTO.Тип();
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, PackageXDTO, ТипПакета.Имя, ТипПакета.URIПространстваИмен);
	Данные = ЗаписьXML.Закрыть();
	
	Результат = Истина;	
	Попытка
		Результат	= Прокси.DataExchange(Данные);
		PackageXDTO	= "";
	Исключение
		PackageXDTO	= ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"WebService URV");
		Результат	= Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбменДаннымиОтправка(УзелПланаОбмена, НомерСообщения = 0) Экспорт
	
	НомерСообщения	= УзелПланаОбмена.НомерОтправленного;
	
	СчтВсего = 0;
	СчтОбработано = 0;
	
	Выборка = ПланыОбмена.ВыбратьИзменения(УзелПланаОбмена, НомерСообщения);	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Получить();    	
		СчтВсего = СчтВсего + 1;
		
		XDTO = Неопределено;
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.Izh_ПриказОРаспределенииНадбавок") Тогда
			XDTO = СформироватьПакетDocumentObjectПриказОРаспределенииНадбавок(Объект);
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.Izh_ТабельУчетаРабочегоВремени") Тогда
			XDTO = СформироватьПакетDocumentDocumentObjectТабельУчетаРабочегоВремени(Объект);
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Izh_Должности") Тогда
			XDTO = СформироватьПакетCatalogObjectДолжности(Объект);
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Izh_КлассификаторИспользованияРабочегоВремени") Тогда
			XDTO = СформироватьПакетCatalogObjectКлассификаторИспользованияРабочегоВремени(Объект);
		КонецЕсли;
		
		Если НЕ XDTO = Неопределено Тогда
			Если ОтправитьСообщение(XDTO, УзелПланаОбмена.СтруктурнаяЕдиница) Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена, Объект);
				СчтОбработано = СчтОбработано + 1;
			Иначе
				Сообщить(XDTO);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Отправка завершена, отправлено " + СокрЛП(СчтОбработано) + " из " + СокрЛП(СчтВсего));
	
КонецПроцедуры

Процедура ОбменДаннымиПолучение() Экспорт
	
	
	
КонецПроцедуры


/////////////////////////// РЕГИСТРАЦИЯ ОБЪЕКТОВ ДЛЯ ОБМЕНА /////////////////////////////////

Процедура Izh_РегистрацияОбменЗУППриЗаписи(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Izh_ПриказОРаспределенииНадбавок")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.Izh_ТабельУчетаРабочегоВремени") Тогда
		
		Если ПараметрыСеанса.ЭтоЦентр Тогда
			Если ЗначениеЗаполнено(Источник.СтруктурнаяЕдиница) Тогда
				УзелОбмена = ПланыОбмена.ОбменУРВ.НайтиПоРеквизиту("СтруктурнаяЕдиница", Источник.СтруктурнаяЕдиница);			
				Если ЗначениеЗаполнено(УзелОбмена) Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
				КонецЕсли;
			КонецЕсли;
		Иначе
			УзелОбмена = ПланыОбмена.ОбменУРВ.НайтиПоКоду("ЦБ");
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////                                 /////////////////////
Процедура Izh_ВыгрузитьДанные() Экспорт
		
	Если ПараметрыСеанса.ЭтоЦентр Тогда
		//Выгрузка во все узлы
		ВсеУзлы = Izh_ОбменДанными.ВсеУзлыПланаОбмена(ПланыОбмена.ОбменУРВ);
		Для Каждого Узел Из ВсеУзлы Цикл			
			ОбменДаннымиОтправка(Узел);
		КонецЦикла;
	Иначе
		//Выгрузка в центр
		Узел = ПланыОбмена.ОбменУРВ.НайтиПоРеквизиту("СтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.Центр);
		ОбменДаннымиОтправка(Узел);
	КонецЕсли;	
	
КонецПроцедуры