Процедура ОбменДанными(Ссылка) Экспорт
	Попытка
		ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисФинансы);
		Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
		URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		Прокси.Пользователь = ВебСервис.Имя;
		Прокси.Пароль = ВебСервис.Пароль;
	Исключение
		Ошибка = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"WebService Финансы");
		ВызватьИсключение(Ошибка);
	КонецПопытки;
	ВсеОшибки = "";
	КоличествоОшибок = 0;
	КоличествоПакетов = 0;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1);
	Пока ВыборкаИзменений.Следующий() Цикл
		Ошибка = "";
		Объект = ВыборкаИзменений.Получить();
		ТипОбъекта = ТипЗнч(Объект);
		Ушло = Ложь;
		Если ПараметрыСеанса.ЭтоЦентр Тогда
			Если ТипОбъекта = Тип("СправочникОбъект.Склады") или ТипОбъекта = Тип("СправочникСсылка.Склады") Тогда
				Ушло = ОтправитьСклад(Объект,Прокси,Ошибка);
			ИНачеЕсли ТипОбъекта = Тип("СправочникОбъект.ККМ") или ТипОбъекта = Тип("СправочникСсылка.ККМ") Тогда
				Ушло = ОтправитьККМ(Объект,Прокси,Ошибка);
			Иначе
				//Грузим из магазина
				Ушло = Истина;
			КонецЕсли;	
		Иначе	
			Если ТипОбъекта = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
				//Если НЕ Объект.ОбработанЦВД  Тогда
				//	Ушло = Ложь;
				//Иначе
				//BIT_Izhevsk ALProzorov 16/09/2015 -->>	
				//Ушло = ОтправитьПриходнуюНакладную(Объект,Прокси,Ошибка);
				ВыполнитьВыгрузку = Истина;
				Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы")  Тогда
					Если Объект.Контрагент.Организация = Объект.Фирма Тогда 
						ВыполнитьВыгрузку = Ложь;
					КонецЕсли;	
				ИначеЕсли ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Если  Объект.Контрагент = Объект.Фирма Тогда
						ВыполнитьВыгрузку = Ложь;
					КонецЕсли;	
				КонецЕсли;
				
				Если ВыполнитьВыгрузку Тогда
					Ушло = ОтправитьПриходнуюНакладную(Объект,Прокси,Ошибка);
				Иначе
					Ушло = Истина;
				КонецЕсли;
				//BIT_Izhevsk ALProzorov 16/09/2015 <<--
				//КонецЕсли;	
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
				//BIT_Izhevsk ALProzorov 08/07/2015 -->>
				ВыполнитьВыгрузку = Истина;
				Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы")  Тогда
					Если Объект.Контрагент.Организация = Объект.Фирма Тогда 
						ВыполнитьВыгрузку = Ложь;
					КонецЕсли;	
				//BIT_Izhevsk ALProzorov 16/09/2015 -->>	
				ИначеЕсли ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Если  Объект.Контрагент = Объект.Фирма Тогда
						ВыполнитьВыгрузку = Ложь;
					КонецЕсли;	
				КонецЕсли;
				
				Если ВыполнитьВыгрузку Тогда
					Ушло = ОтправитьРасходнуюНакладную(Объект,Прокси,Ошибка);
				Иначе
					Ушло = Истина;
				КонецЕсли;
				//BIT_Izhevsk ALProzorov 08/07/2015 <<--	
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
				Ушло = ОтправитьКорректировкуРеализации(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
				Ушло = ОтправитьКорректировкуПоступления(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ГотоваяПродукция") Тогда
				Ушло = ОтправитьГотовуюПродукцию(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КоррекцияЗапасов") Тогда
				Ушло = ОтправитьКоррекциюЗапасов(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.Инвентаризация") Тогда
				Ушло = ОтправитьИнвентаризацию(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ZОтчет") Тогда
				Ушло = ОтправитьZОтчет(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ВозвратнаяНакладнаяОтПокупателя") Тогда
				Ушло = ОтправитьВозвратнуюОтПокупателя(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
				Ушло = ОтправитьПриходныйКассовыйОрдер(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
				Ушло = ОтправитьРасходныйКассовыйОрдер(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
				Ушло = ОтправитьАвансовыйОтчет(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ОтчетРеализатора") Тогда
				Ушло = ОтправитьОтчетРеализатора(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.Перемещение") Тогда
				Ушло = ОтправитьПеремещение(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетФактура") Тогда
				Ушло = ОтправитьСчетФактура(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РегистрацияСчетФактуры") Тогда
				Ушло = ОтправитьРегистрацияСчетФактуры(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Склады") или ТипОбъекта = Тип("СправочникСсылка.Склады") Тогда
				//Грузим из Центра
				Ушло = Истина;
			ИНачеЕсли ТипОбъекта = Тип("СправочникОбъект.ККМ") или ТипОбъекта = Тип("СправочникСсылка.ККМ") Тогда
				//Грузим из Центра
				Ушло = Истина;
				// Котлячкова++ 10,06,15  Обращение 0000128962 от 26.05.2015
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПередачаТоваровМеждуФирмами") Тогда
				Ушло = ОтправитьПередачуТоваровМеждуФирмами(Объект,Прокси,Ошибка);
				// Котлячкова++ 10,06,15  Обращение 0000128962 от 26.05.2015
			КонецЕсли;	
		КонецЕсли;	
		Если Ушло Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
		КонецЕсли; 
		КоличествоПакетов = КоличествоПакетов + 1;
		Если Ошибка <> "" Тогда
			ВсеОшибки = Ошибка;
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецЕсли;	
	КонецЦикла; 
	Если ВсеОшибки <> "" Тогда
		Сообшение = "Всего ошибок - "+КоличествоОшибок+" из "+КоличествоПакетов+"
		| последняя ошибка:
		|"+ВсеОшибки;
		ВызватьИсключение(Сообшение);
	КонецЕсли;	
КонецПроцедуры

Функция ОтправитьСообщение(Package,Прокси,Имя)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Package,Имя,,,НазначениеТипаXML.Явное);
	Данные = ЗаписьXML.Закрыть();
	Результат = Истина;
	МестоВызова = ?(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр,"center","sh/"+Формат(СтруктурныеЕдиницы.ПолучитьКодТекущейЛокации(),"ЧГ="));
	Попытка
		Результат = Прокси.DataExchange(МестоВызова,Данные);
		Если Результат = Ложь Тогда
			ЗаписьЖурналаРегистрации("WebService ТД6", УровеньЖурналаРегистрации.Ошибка,,,Данные);
			Package = Данные;
		Иначе	
			Package = "";
		КонецЕсли;	
	Исключение
		Package = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"WebService ТД6");
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ОпределитьПрисутствиеАлкоголя(Док) экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокСостав.Номенклатура
	|			ИЗ
	|				Документ."+Док.Метаданные().Имя+".Состав КАК ДокСостав
	|			ГДЕ
	|				ДокСостав.Ссылка = &Ссылка
	|			СГРУППИРОВАТЬ ПО
	|						ДокСостав.Номенклатура)
	|	И НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоКатегорияАлкоголя");
	Запрос.УстановитьПараметр("Ссылка",Док);
	Запрос.УстановитьПараметр("СвойствоКатегорияАлкоголя",ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаВидАлкогольнойПродукции)));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

функция ОпределитьКонтрагента(Контрагент,Код)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")  Тогда
		Возврат СокрЛП(Код);
	Иначе
		Если Контрагент = Неопределено ИЛИ Контрагент = NULL Тогда
			Возврат "";
		Иначе
			Возврат Строка(Контрагент.УникальныйИдентификатор());
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	

Функция ОпределитьТипКонтрагента(Контрагент)
	
	
	Если Контрагент=Неопределено ИЛИ Контрагент=NULL  Тогда
		
		Возврат "";
		
	Иначе
		
		ТипКонтрагента =  Контрагент.Метаданные().Имя;
		Если ТипКонтрагента = "Контрагенты" И ЗначениеЗаполнено(Контрагент) Тогда
			Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() И Контрагент.Поставщик Тогда
				Возврат "ПодразделенияПоставщиков";
			Иначе
				Возврат ТипКонтрагента
			КонецЕсли;	
		Иначе
			Возврат ТипКонтрагента
		КонецЕсли;
		
	КонецЕсли;	
	
КонецФункции	
// Котлячкова++ 8,06,15  Обращение 0000128962 от 26.05.2015
Функция ОтправитьПередачуТоваровМеждуФирмами(ОбъектДокумент,Прокси,Ошибка)
	Если ОбъектДокумент.ТипДоговора = Перечисления.ТипыДоговоров.Комиссия Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_РасходнаяНакладная");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(ОбъектДокумент.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = ОбъектДокумент.ПометкаУдаления;
	Пакет.Date = ОбъектДокумент.Дата;
	Пакет.Number = ОбъектДокумент.Номер;
	Пакет.Posted = ОбъектДокумент.Проведен;
	Пакет.Фирма = Строка(ОбъектДокумент.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = ОбъектДокумент.СтруктурнаяЕдиница.Код;
	// BiT ALProzorov 09/09/2015 -->>
	//Пакет.Валюта = "810";
	Пакет.Валюта = "643";
	// BiT ALProzorov 09/09/2015 <<--
	Пакет.КурсВалютыДоговора = ОбъектДокумент.Курс;
	Пакет.ГрузоотправительТип = ?(НЕ ЗначениеЗаполнено(ОбъектДокумент.Грузоотправитель),"",ОбъектДокумент.Грузоотправитель.Метаданные().Имя);
	Пакет.Грузоотправитель = ?(НЕ ЗначениеЗаполнено(ОбъектДокумент.Грузоотправитель),"",ОбъектДокумент.Грузоотправитель.Код);
	Пакет.Грузополучатель = ?(НЕ ЗначениеЗаполнено(ОбъектДокумент.Грузополучатель),"",ОбъектДокумент.Грузополучатель.Код);
	Пакет.АдресДоставки = "";
	Пакет.Склад = ОбъектДокумент.Склад.Код;
	Пакет.КонтрагентТип = ОбъектДокумент.ФирмаПолучатель.Метаданные().Имя;
	Пакет.Контрагент = ОбъектДокумент.ФирмаПолучатель.Код;
	Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(ОбъектДокумент.ТипДоговора)).Имя;
	Пакет.Возврат = ОбъектДокумент.Возврат;
	//BiT ALProzorov 15/09/2015 -->>
	Пакет.Комментарий = ОбъектДокумент.Комментарий;
	//BiT ALProzorov 15/09/2015 <<--
	
	МассивОбъектДокументов = новый Массив();
	МассивОбъектДокументов.Добавить(ОбъектДокумент.ссылка);
	ОбъектДокументыПечати=новый СписокЗначений;
	ПечФорма = Документы.ПередачаТоваровМеждуФирмами.ПечатьТОРГ12(МассивОбъектДокументов,ОбъектДокументыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(ОбъектДокумент.Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА РасходнаяНакладнаяСостав.Номенклатура.Код
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры,
	|	ЕСТЬNULL(РасходнаяНакладнаяСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	РасходнаяНакладнаяСостав.Ссылка,
	|	СУММА(РасходнаяНакладнаяСостав.Количество * РасходнаяНакладнаяСостав.Коэффициент) КАК Количество,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Себестоимость), 0) КАК Себестоимость,
	|	СУММА(РасходнаяНакладнаяСостав.Сумма) КАК Сумма,
	|	СУММА(РасходнаяНакладнаяСостав.Цена) КАК Цена,
	|	СУММА(РасходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуФирмами.Состав КАК РасходнаяНакладнаяСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО РасходнаяНакладнаяСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|ГДЕ
	|	РасходнаяНакладнаяСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяСостав.Ссылка,
	|	РасходнаяНакладнаяСостав.Коэффициент,
	|	РасходнаяНакладнаяСостав.СтавкаНДС.Ставка,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА РасходнаяНакладнаяСостав.Номенклатура.Код
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",ОбъектДокумент.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_РасходнаяНакладная_Состав");
	
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС     = Выборка.СтавкаНДС;
		ПакетСостав.Количество    = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетСостав.Сумма         = Выборка.Сумма;
		ПакетСостав.СуммаНДС      = Выборка.СуммаНДС;
		ПакетСостав.Номенклатура  = Выборка.ВидНоменклатуры;
		Пакет.Состав.Добавить(ПакетСостав);
		
	КонецЦикла;
	
	//регистр остатки номенклатуры
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|   СУММА(ДвиженияТМЦ.Сумма) КАК Себестоимость,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|			ТОГДА ДвиженияТМЦ.Номенклатура.Код
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры,
	|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0) КАК СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка И  ДвиженияТМЦ.Фирма=&Фирма
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|			ТОГДА ДвиженияТМЦ.Номенклатура.Код
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ДвиженияТМЦ.Комитент,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0)");
	Запрос.УстановитьПараметр("Ссылка",ОбъектДокумент.Ссылка);
	Запрос.УстановитьПараметр("Фирма",ОбъектДокумент.Фирма);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_РасходнаяНакладная_ОстаткиНоменклатуры");
	ТипОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_РасходнаяНакладная_ОстаткиНоменклатурыМатериалы");
	
	
	
	Пока Выборка.Следующий() Цикл
		ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
		ПакетОстаткиНоменклатуры.Номенклатура          = Выборка.ВидНоменклатуры;
		ПакетОстаткиНоменклатуры.Статус                = Строка(Выборка.Статус);
		ПакетОстаткиНоменклатуры.Комитент              = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент));
		ПакетОстаткиНоменклатуры.КомитентТип              = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
		ПакетОстаткиНоменклатуры.Количество            = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
		ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
		ПакетОстаткиНоменклатуры.СуммаПродажи          = Выборка.СуммаПродажи;
		ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = Выборка.СуммаНДСПродажи;
		ПакетОстаткиНоменклатуры.СтавкаНДС             = Выборка.СтавкаНДС;
		Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
	КонецЦикла;
	
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(ОбъектДокумент.Дата,ОбъектДокумент.Номер,Пакет,"DocumentObject_РасходнаяНакладная","fin","RS_РасходнаяНакладная");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции
// Котлячкова-- 8,06,15  Обращение 0000128962 от 26.05.2015

Функция ОтправитьОтчетРеализатораМеждуФирмами(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_ОтчетРеализатора");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.ФирмаКомиссионер.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.КонтрагентТип = Объект.ФирмаКомитент.Метаданные().Имя;
	Пакет.Контрагент = Объект.ФирмаКомитент.Код;
	Пакет.ТипОтчета = "Комитенту";
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.ОтчетРеализатораМеждуФирмами.ПечатьОтчетКомитентуОПродажах(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОтчетРеализатораСостав.Сумма) КАК Сумма,
	|	СУММА(ОтчетРеализатораСостав.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ОтчетРеализатораСостав.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(ОтчетРеализатораСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ОтчетРеализатораСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры
	|ИЗ
	|	Документ.ОтчетРеализатораМеждуФирмами.Состав КАК ОтчетРеализатораСостав
	|ГДЕ
	|	ОтчетРеализатораСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетРеализатораСостав.СтавкаНДС.Ставка,
	|	ВЫБОР
	|		КОГДА ОтчетРеализатораСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials", "DocumentTabularSectionRow_ОтчетРеализатора_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС    = Выборка.СтавкаНДС;
		ПакетСостав.СуммаПродажи = Выборка.СуммаПродажи;
		ПакетСостав.Сумма        = Выборка.Сумма;
		ПакетСостав.СуммаНДС     = Выборка.СуммаНДС;
		ПакетСостав.ВидНоменклатуры  = Выборка.ВидНоменклатуры;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ОтчетРеализатора","fin","RS_ОтчетРеализатора");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьУдалениеОбъекта(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "УдалениеОбъекта");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.Тип = ПривестиТип(Объект.Ссылка.Метаданные().Имя,Объект.Ссылка);
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"УдалениеОбъекта","fin","RS_УдалениеОбъекта");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ПривестиТип(Тип,Ссылка)
	Если Тип = "РасходнаяНакладная" Тогда
		Если Ссылка.Возврат Тогда
			Тип = "ВозвратнаяНакладная";
		КонецЕсли;	
	ИначеЕсли Тип = "ВозвратнаяНакладнаяОтПокупателя" Тогда
		Тип = "ВозвратнаяНакладная";
	КонецЕсли;	
	Возврат Тип;
КонецФункции

Функция ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы, НазваниеУсловия)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				И &ВыгружатьМатериалыДетально
	|			ТОГДА Таблица.Номенклатура.Код
	|		КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА ""у""
	|		КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Тара)
	|			ТОГДА ""а""
	|		КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		КОГДА &ЭтоЦех
	|			ТОГДА ""с""
	|		КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.ПодарочнаяКарта)
	|			ТОГДА ""пк""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры
	|Поместить ТабВидовНоменклатуры
	|ИЗ 
	|"+НазваниеТаблицы+" КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТехнологическаяКарта.Продукция КАК Продукция,
	|			МАКСИМУМ(ТехнологическаяКарта.Ссылка) КАК Ссылка
	|		ИЗ
	|			Документ.ТехнологическаяКарта КАК ТехнологическаяКарта
	|		ГДЕ
	|			ТехнологическаяКарта.Проведен
	|		    И ТехнологическаяКарта.ВидПроизводства = Значение(Перечисление.ВидыПроизводства.Приготовление)
	|
	|		СГРУППИРОВАТЬ ПО
	|			ТехнологическаяКарта.Продукция) КАК ТехКарты
	|		ПО (ТехКарты.Продукция = Таблица.Номенклатура)
	|ГДЕ Таблица."+НазваниеУсловия+"= &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	ВЫБОР
	|		КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				И &ВыгружатьМатериалыДетально
	|			ТОГДА Таблица.Номенклатура.Код
	|		КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА ""у""
	|		КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Тара)
	|			ТОГДА ""а""
	|		КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		КОГДА &ЭтоЦех
	|			ТОГДА ""с""
	|		КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.ПодарочнаяКарта)
	|			ТОГДА ""пк""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ";
	Возврат ТекстЗапроса;
	//*Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	// В запрос добавлены условия по параметру.
	// а ля: |				И &ВыгружатьМатериалыДетально
	///Зернятко А.В.@ - конец блока 
	
	
КонецФункции

Функция ПолучитьТекстЗапросаПоВидамНоменклатурыИнвентаризация(НазваниеТаблицы1, НазваниеТаблицы2, НазваниеУсловия)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыНоменклатуры.Номенклатура,
	|	ВидыНоменклатуры.ВидНоменклатуры
	|ПОМЕСТИТЬ ТабВидовНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				И &ВыгружатьМатериалыДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|				И &ВыгружатьУслугиДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Тара)
	|				И &ВыгружатьТаруДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|					ИЛИ НЕ ТехКарты.Ссылка ЕСТЬ NULL 
	|				ТОГДА ""п""
	|			КОГДА &ЭтоЦех
	|				ТОГДА ""с""
	|			ИНАЧЕ ""т""
	|		КОНЕЦ КАК ВидНоменклатуры
	|	ИЗ
	|		"+НазваниеТаблицы1+" КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТехнологическаяКарта.Продукция КАК Продукция,
	|				МАКСИМУМ(ТехнологическаяКарта.Ссылка) КАК Ссылка
	|			ИЗ
	|				Документ.ТехнологическаяКарта КАК ТехнологическаяКарта
	|			ГДЕ
	|				ТехнологическаяКарта.Проведен
	|				И ТехнологическаяКарта.ВидПроизводства = ЗНАЧЕНИЕ(Перечисление.ВидыПроизводства.Приготовление)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТехнологическаяКарта.Продукция) КАК ТехКарты
	|			ПО (ТехКарты.Продукция = Таблица.Номенклатура)
	|	ГДЕ
	|		Таблица."+НазваниеУсловия+" = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Номенклатура,
	|		ВЫБОР
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				И &ВыгружатьМатериалыДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|				И &ВыгружатьУслугиДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Тара)
	|				И &ВыгружатьТаруДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|					ИЛИ НЕ ТехКарты.Ссылка ЕСТЬ NULL 
	|				ТОГДА ""п""
	|			КОГДА &ЭтоЦех
	|				ТОГДА ""с""
	|			ИНАЧЕ ""т""
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура,
	|		ВЫБОР
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				И &ВыгружатьМатериалыДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|				И &ВыгружатьУслугиДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Тара)
	|				И &ВыгружатьТаруДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|					ИЛИ НЕ ТехКарты.Ссылка ЕСТЬ NULL 
	|				ТОГДА ""п""
	|			КОГДА &ЭтоЦех
	|				ТОГДА ""с""
	|			ИНАЧЕ ""т""
	|		КОНЕЦ
	|	ИЗ
	|		"+НазваниеТаблицы2+" КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТехнологическаяКарта.Продукция КАК Продукция,
	|				МАКСИМУМ(ТехнологическаяКарта.Ссылка) КАК Ссылка
	|			ИЗ
	|				Документ.ТехнологическаяКарта КАК ТехнологическаяКарта
	|			ГДЕ
	|				ТехнологическаяКарта.Проведен
	|				И ТехнологическаяКарта.ВидПроизводства = ЗНАЧЕНИЕ(Перечисление.ВидыПроизводства.Приготовление)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТехнологическаяКарта.Продукция) КАК ТехКарты
	|			ПО (ТехКарты.Продукция = Таблица.Номенклатура)
	|	ГДЕ
	|		Таблица."+НазваниеУсловия+" = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Номенклатура,
	|		ВЫБОР
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				И &ВыгружатьМатериалыДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|				И &ВыгружатьУслугиДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Тара)
	|				И &ВыгружатьТаруДетально
	|				ТОГДА Таблица.Номенклатура.Код
	|			КОГДА Таблица.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|					ИЛИ НЕ ТехКарты.Ссылка ЕСТЬ NULL 
	|				ТОГДА ""п""
	|			КОГДА &ЭтоЦех
	|				ТОГДА ""с""
	|			ИНАЧЕ ""т""
	|		КОНЕЦ) КАК ВидыНоменклатуры";
	
	Возврат ТекстЗапроса;
	//*Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	// В запрос добавлено услвоие детальной выгрузки тары.
	// В запрос добавлены условия по параметру.
	// а ля: |				И &ВыгружатьМатериалыДетально
	///Зернятко А.В.@ - конец блока 
	
КонецФункции

Функция ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка)
	Кол   = ?(Выборка.ВидНоменклатуры = "п" ИЛИ Выборка.ВидНоменклатуры = "с" ИЛИ Выборка.ВидНоменклатуры = "т",Выборка.Себестоимость,Выборка.Количество);
	Возврат Кол; 
КонецФункции

Функция ЭтоЦех(СтруктурнаяЕдиница =  Неопределено)
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Возврат СтруктурныеЕдиницы.ЕстьВГруппеТипСЕ(Перечисления.ТипыСтруктурныхЕдиниц.Цех);
	Иначе
		Если СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Цех Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
КонецФункции

Функция ЭтоПеремещениеМеждуСтруктурнымиЕдиницами(ДокументОбъект) Экспорт
	
	флКонтрагентаСЕ = ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Организации")
	ИЛИ ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы");
	
	Если флКонтрагентаСЕ Тогда 
		Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			флПеремещениеБезПерепродажи = НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент.Организация) ИЛИ ДокументОбъект.Контрагент.Организация = ДокументОбъект.Фирма;  
		ИначеЕсли ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			флПеремещениеБезПерепродажи =  ДокументОбъект.Контрагент = ДокументОбъект.Фирма;  
		КонецЕсли;
	Иначе
		флПеремещениеБезПерепродажи = Ложь;
	КонецЕсли;		
	
	Возврат флПеремещениеБезПерепродажи;
	
КонецФункции
//Котлячкова ++ Выгрузка РСФ
Функция ПолучитьПодчиненнуюРегистрациюСчетФактуру(Ссылка)
	
	//dps+ 15,08,21 136622 Если есть Регистрация СФ у ПН, тогда сразу берем ее.
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РегистрацияСчетФактуры.Ссылка
	|ИЗ
	|	Документ.РегистрацияСчетФактуры КАК РегистрацияСчетФактуры
	|ГДЕ
	|	РегистрацияСчетФактуры.ДокументОснование = &ДокументОснование
	|	И НЕ РегистрацияСчетФактуры.ПометкаУдаления");
	Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;	
	КонецЕсли;
	//dps- 15,08,21 136622 
	
	//{Ситек ДойниковПВ 2015-11-06
	//Неправильный код. Ошибочно искалась регистрация счет фактуры у подчиненных корректировок, этого поиска быть не должно,
	//иначе регистрация счета фактуры по корректировке в базе Fin будет переписана на новую с основанием приходной накладной.
	
	//// BiT ALProzorov 20/07/2015 -->>
	//ДокументОснование = Ссылка;
	//Пока Истина Цикл
	//	Запрос = Новый Запрос("ВЫБРАТЬ
	//	                      |	КорректировкаПоступления.Ссылка КАК ДокКорректировки
	//	                      |ИЗ
	//	                      |	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	//	                      |ГДЕ
	//	                      |	КорректировкаПоступления.Проведен
	//	                      |	И КорректировкаПоступления.ДокументПоступления = &ДокументПоступления
	//	                      |	И КорректировкаПоступления.РежимКорректировки = &РежимКорректировки");//dps+ 15,08,21 136622 Смотрим только КП с режимом "Исправление в первичных дкоументах".
	//	Запрос.УстановитьПараметр("ДокументПоступления",ДокументОснование);
	//	Запрос.УстановитьПараметр("РежимКорректировки",Перечисления.РежимыКорректировок.ИсправлениеОшибки);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Если ЗначениеЗаполнено(Выборка.ДокКорректировки) Тогда
	//			ДокументОснование = Выборка.ДокКорректировки;
	//		Иначе
	//			Прервать;
	//		КонецЕсли;	
	//	Иначе
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//// BiT ALProzorov 20/07/2015 <<--
	//
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	РегистрацияСчетФактуры.Ссылка
	//|ИЗ
	//|	Документ.РегистрацияСчетФактуры КАК РегистрацияСчетФактуры
	//|ГДЕ
	//|	РегистрацияСчетФактуры.ДокументОснование = &ДокументОснование
	//|	И НЕ РегистрацияСчетФактуры.ПометкаУдаления");
	//Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	//Результат = Запрос.Выполнить();
	//Если Результат.Пустой() Тогда
	//	Возврат Документы.РегистрацияСчетФактуры.ПустаяСсылка();
	//КонецЕсли;
	//Выборка = Результат.Выбрать();
	//Выборка.Следующий();
	//Возврат Выборка.Ссылка;	
	
	//{Ситек ДойниковПВ 2015-11-06

КонецФункции
//Котлячкова -- Выгрузка РСФ

//{Ситек Дойников 2015-10-19
//Функция Ищет тип договора из документа реализации у корректировки реализации
Функция ПолучитьТипДоговораКорректировки(текДокумент, СписокДокументов)
	
	Если ТипЗнч(текДокумент) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		Возврат текДокумент.ТипДоговора;
	ИначеЕсли ТипЗнч(текДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И СписокДокументов.НайтиПоЗначению(текДокумент) = Неопределено Тогда
		СписокДокументов.Добавить(текДокумент.Ссылка);
		Возврат ПолучитьТипДоговораКорректировки(текДокумент.ДокументРеализации, СписокДокументов);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПоулчитьТипДоговора()
 

//****************************************************************************
//****************************************************************************
//****************************************************************************
//****************************************************************************
Функция ОтправитьСчетФактура(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_СчетФактура");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	
	Пакет.ВидСчетаФактуры = Метаданные.Перечисления.ВидСчетаФактурыВыставленного.EnumValues.Get(Перечисления.ВидСчетаФактурыВыставленного.Индекс(Объект.ВидСчетаФактуры)).Имя;
	
	Пакет.КонтрагентТип = ОпределитьТипКонтрагента(Объект.Контрагент);
	
	Если Пакет.КонтрагентТип = "Контрагенты" Тогда
		Если Объект.Контрагент.Поставщик Тогда
			Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() Тогда
				Пакет.Контрагент = Объект.Контрагент.Родитель.Код;
			Иначе
				Пакет.Контрагент = Объект.Контрагент.Код;
			КонецЕсли;
		Иначе
			Пакет.Контрагент = Объект.Контрагент.Код;
		КонецЕсли;
	ИначеЕсли Пакет.КонтрагентТип = "ПодразделенияПоставщиков" Тогда
		Пакет.Контрагент = Объект.Контрагент.Код;
	ИначеЕсли Пакет.КонтрагентТип = "СтруктурныеЕдиницы" Тогда
		Пакет.Контрагент = Строка(Объект.Контрагент.Организация.УникальныйИдентификатор());
	КонецЕсли;
	
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.НомерПлатежноРасчетногоДокумента = Объект.НомерПлатежноРасчетногоДокумента;
	Пакет.ДатаПлатежноРасчетногоДокумента = Объект.ДатаПлатежноРасчетногоДокумента;
	
	Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда 
		Пакет.ДокОснование = Строка(Объект.ДокОснование.УникальныйИдентификатор());
		
		Если Объект.ДокОснование.Метаданные().Имя = "РасходнаяНакладная" И Объект.ДокОснование.Возврат Тогда
			Пакет.ДокОснованиеТип = "ВозвратнаяНакладная";
		Иначе
			Пакет.ДокОснованиеТип = Объект.ДокОснование.Метаданные().Имя;
		КонецЕсли;
		
		//BIT_Izhevsk ALProzorov 21/07/2015 -->>
		ПР = Объект.ДокОснование;
		Если ПР.Метаданные().Реквизиты.Найти("ТипДоговора") <> Неопределено Тогда
			Пакет.ТипДоговора = ?(НЕ ЗначениеЗаполнено(ПР.ТипДоговора),"",Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(ПР.ТипДоговора)).Имя);
		Иначе
			Пакет.ТипДоговора = "КупляПродажа";
		КонецЕсли;	
		//BIT_Izhevsk ALProzorov 21/07/2015 <<--
		
	Иначе
		Пакет.ДокОснование = "";
		Пакет.ДокОснованиеТип = "";
		//BIT_Izhevsk ALProzorov 21/07/2015 -->>
		Пакет.ТипДоговора	  = "";
		//BIT_Izhevsk ALProzorov 21/07/2015 <<--
	КонецЕсли;
	
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.НомерИсправления = Объект.НомерИсправления;
	Пакет.Исправление = Объект.Исправление;
	Пакет.ИсправляемыйСчетФактура = Строка(Объект.ИсправляемыйСчетФактура.УникальныйИдентификатор());
	Пакет.НомерИсправляемогоКорректировочногоДокумента = Объект.НомерИсправляемогоКорректировочногоДокумента;
	Пакет.ДатаИсправляемогоКорректировочногоДокумента = Объект.ДатаИсправляемогоКорректировочногоДокумента;
	Пакет.НомерИсходногоДокумента = Объект.НомерИсходногоДокумента;
	Пакет.ДатаИсходногоДокумента = Объект.ДатаИсходногоДокумента;
	Пакет.УчитыватьИсправлениеИсходногоДокумента = Объект.УчитыватьИсправлениеИсходногоДокумента;
	Пакет.НомерИсправленияИсходногоДокумента = Объект.НомерИсправленияИсходногоДокумента;
	Пакет.ДатаИсправленияИсходногоДокумента = Объект.ДатаИсправленияИсходногоДокумента;
	Пакет.КодВидаОперации = Объект.КодВидаОперации;
	Пакет.СчетФактураНеВыставляется = Объект.СчетФактураНеВыставляется;
	Пакет.Выставлен = Объект.Выставлен;
	Пакет.ДатаВыставления = Объект.ДатаВыставления;
	Пакет.КодСпособаВыставления = Объект.КодСпособаВыставления;
	Пакет.СчетФактураБезНДС = Объект.СчетФактураБезНДС;
	Пакет.СуммаУвеличение = Объект.СуммаУвеличение;
	Пакет.СуммаУменьшение = Объект.СуммаУменьшение;
	Пакет.СуммаДокумента = Объект.СуммаДокумента;
	Пакет.СуммаНДСУвеличение = Объект.СуммаНДСУвеличение;
	Пакет.СуммаНДСУменьшение = Объект.СуммаНДСУменьшение;
	Пакет.СуммаНДСДокумента = Объект.СуммаНДСДокумента;
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.СчетФактура.ПечатьСЧетФактура(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_СчетФактура","fin","RS_СчетФактура");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьРегистрацияСчетФактуры(Объект,Прокси,Ошибка)
	
	//ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_РегистрацияСчетФактуры");
	//Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	//Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	//Пакет.DeletionMark = Объект.ПометкаУдаления;
	//Пакет.Date = Объект.Дата;
	//Пакет.Number = Объект.Номер;
	//Пакет.Posted = Объект.Проведен;
	//
	//Пакет.ВидСчетаФактуры = Метаданные.Перечисления.ВидСчетаФактурыПолученного.EnumValues.Get(Перечисления.ВидСчетаФактурыПолученного.Индекс(Объект.ВидСчетаФактуры)).Имя;
	//
	//Пакет.КонтрагентТип = ОпределитьТипКонтрагента(Объект.Контрагент);
	//
	//Если Пакет.КонтрагентТип = "Контрагенты" Тогда
	//	Если Объект.Контрагент.Поставщик Тогда
	//		Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() Тогда
	//			Пакет.Контрагент = Объект.Контрагент.Родитель.Код;
	//		Иначе
	//			Пакет.Контрагент = Объект.Контрагент.Код;
	//		КонецЕсли;
	//	Иначе
	//		Пакет.Контрагент = Объект.Контрагент.Код;
	//	КонецЕсли;
	//ИначеЕсли Пакет.КонтрагентТип = "ПодразделенияПоставщиков" Тогда
	//	Пакет.Контрагент = Объект.Контрагент.Код;
	//ИначеЕсли Пакет.КонтрагентТип = "СтруктурныеЕдиницы" Тогда
	//	Пакет.Контрагент = Строка(Объект.Контрагент.Организация.УникальныйИдентификатор());
	//КонецЕсли;
	//
	//Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	//Пакет.НомерВходящегоДокумента = Объект.НомерВходящегоДокумента;
	//Пакет.ДатаВходящегоДокумента = Объект.ДатаВходящегоДокумента;
	//
	//Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
	//	Пакет.ДокОснование = Строка(Объект.ДокументОснование.УникальныйИдентификатор());
	//	Пакет.ДокОснованиеТип = Объект.ДокументОснование.Метаданные().Имя;
	//Иначе
	//	Пакет.ДокОснование = "";
	//	Пакет.ДокОснованиеТип = "";
	//КонецЕсли;
	//
	//Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	//Пакет.Комментарий = Объект.Комментарий;
	//Пакет.НомерИсправления = Объект.НомерИсправления;
	//Пакет.ДатаИсправления = Объект.ДатаИсправления;
	//Пакет.Исправление = Объект.Исправление;
	//Пакет.ИсправляемыйСчетФактура = Строка(Объект.ИсправляемыйСчетФактура.УникальныйИдентификатор());
	//Пакет.НомерИсходногоДокумента = Объект.НомерИсходногоДокумента;
	//Пакет.ДатаИсходногоДокумента = Объект.ДатаИсходногоДокумента;
	//Пакет.УчитыватьИсправлениеИсходногоДокумента = Объект.УчитыватьИсправлениеИсходногоДокумента;
	//Пакет.НомерИсправленияИсходногоДокумента = Объект.НомерИсправленияИсходногоДокумента;
	//Пакет.ДатаИсправленияИсходногоДокумента = Объект.ДатаИсправленияИсходногоДокумента;
	//Пакет.НДСПредъявленКВычету = Объект.НДСПредъявленКВычету;
	//Пакет.СчетФактураБезНДС = Объект.СчетФактураБезНДС;
	//Пакет.КодВидаОперации = Объект.КодВидаОперации;
	//Пакет.КодСпособаПолучения = Объект.КодСпособаПолучения;
	//Пакет.СуммаДокумента = Объект.СуммаДокумента;
	//Пакет.СуммаУвеличение = Объект.СуммаУвеличение;
	//Пакет.СуммаУменьшение = Объект.СуммаУменьшение;
	//Пакет.СуммаНДСДокумента = Объект.СуммаНДСДокумента;
	//Пакет.СуммаНДСУвеличение = Объект.СуммаНДСУвеличение;
	//Пакет.СуммаНДСУменьшение = Объект.СуммаНДСУменьшение;
	//
	//RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_РегистрацияСчетФактуры","fin","RS_РегистрацияСчетФактуры");
	//Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	//Ошибка = RibMessages;
	//Возврат Результат;
	Возврат Истина;
	
КонецФункции

Функция ОтправитьКорректировкуРеализации(Объект,Прокси,Ошибка)
	
	//{Ситек Дойников 2015-10-19 Корректировка по типу договора "Комиссия" не должна выгружаться
	
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить(Объект.Ссылка);
	ТипДоговора	= ПолучитьТипДоговораКорректировки(Объект.ДокументРеализации, СписокДокументов);
	
	Если ТипДоговора = Перечисления.ТипыДоговоров.Комиссия Тогда
		Возврат Истина;
	КонецЕсли;
	
	//}Ситек Дойников 2015-10-19
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_КорректировкаРеализации");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.ГрузоотправительТип = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Метаданные().Имя);
	Пакет.Грузоотправитель = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Код);
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.РежимКорректировки = Метаданные.Перечисления.РежимыКорректировок.EnumValues.Get(Перечисления.РежимыКорректировок.Индекс(Объект.РежимКорректировки)).Имя;
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений; 
	ПечФорма = Документы.КорректировкаРеализации.ПечатьТОРГ12(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	// BiT ALProzorov 24/08/2015 -->> 
	//Пакет.ДокументРеализации = Строка(Объект.ДокументРеализации.УникальныйИдентификатор());
	//Пакет.ДокументРеализацииТип = Объект.ДокументРеализации.Метаданные().Имя;
	//Пакет.ИсправляемыйДокумент = Строка(Объект.ИсправляемыйДокумент.УникальныйИдентификатор());
	//Пакет.ИсправляемыйДокументТип = Объект.ИсправляемыйДокумент.Метаданные().Имя;
	Пакет.ДокументРеализации = Строка(Объект.ДокументРеализации.УникальныйИдентификатор());
	Если ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.РасходнаяНакладная") и Объект.ДокументРеализации.Возврат Тогда
		Пакет.ДокументРеализацииТип = "ВозвратнаяНакладная";
	Иначе
		Пакет.ДокументРеализацииТип = Объект.ДокументРеализации.Метаданные().Имя;
	КонецЕсли;
	
	Пакет.ИсправляемыйДокумент = Строка(Объект.ИсправляемыйДокумент.УникальныйИдентификатор());
	Если ТипЗнч(Объект.ИсправляемыйДокумент) = Тип("ДокументСсылка.РасходнаяНакладная") и Объект.ИсправляемыйДокумент.Возврат Тогда
		Пакет.ИсправляемыйДокументТип = "ВозвратнаяНакладная";
	Иначе
		Пакет.ИсправляемыйДокументТип = Объект.ИсправляемыйДокумент.Метаданные().Имя;
	КонецЕсли;
	// BiT ALProzorov 24/08/2015 <<-- 
	
	ОписаниеОрганизации = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Объект.Фирма, Объект.Дата);
	Пакет.АдресГрузоотправителя = ОписаниеОрганизации.ЮридическийАдрес;
	
	КонтрагентТип = ОпределитьТипКонтрагента(Объект.Контрагент);
	Если КонтрагентТип = "Контрагенты" Тогда
		//Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
		Если Объект.Контрагент.Поставщик Тогда
			Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() Тогда
				Пакет.Контрагент = Объект.Контрагент.Родитель.Код;
			Иначе
				Пакет.Контрагент = Объект.Контрагент.Код;
			КонецЕсли;
		Иначе
			Пакет.Контрагент = Объект.Контрагент.Код;
		КонецЕсли;
		Пакет.КонтрагентТип = "Контрагенты";
	ИначеЕсли КонтрагентТип = "ПодразделенияПоставщиков" Тогда
		Пакет.Контрагент = Объект.Контрагент.Код;
		Пакет.КонтрагентТип = "ПодразделенияПоставщиков";
	ИначеЕсли КонтрагентТип = "СтруктурныеЕдиницы" Тогда 
		//BIT_Izhevsk ALProzorov 22/07/2015 -->>
		//Если ЭтоПеремещениеМеждуСтруктурнымиЕдиницами(Объект) Тогда
		//	Пакет.Контрагент = Строка(Объект.Контрагент.Код);
		//	Пакет.КонтрагентТип = "СтруктурныеЕдиницы";
		//Иначе
			Пакет.Контрагент = Строка(Объект.Контрагент.Организация.УникальныйИдентификатор());
			Пакет.КонтрагентТип = "Организации";
		//КонецЕсли;
		//BIT_Izhevsk ALProzorov 22/07/2015 <<--
	ИначеЕсли КонтрагентТип = "Организации" Тогда
		//BIT_Izhevsk ALProzorov 22/07/2015 -->>
		//Если ЭтоПеремещениеМеждуСтруктурнымиЕдиницами(Объект) Тогда
		//	Пакет.Контрагент = Строка(Объект.Грузоотправитель.Код);
		//	Пакет.КонтрагентТип = "СтруктурныеЕдиницы";
		//Иначе
			Пакет.Контрагент = Строка(Объект.Контрагент.УникальныйИдентификатор());
			Пакет.КонтрагентТип = "Организации";
		//КонецЕсли;
		//BIT_Izhevsk ALProzorov 22/07/2015 <<--
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "Документ.КорректировкаРеализации.Состав";
	НазваниеУсловия = "Ссылка";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("СсылкаНаИсправляемыйДокумент",Объект.ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатурыПоИсправляемомуДокументу
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &СсылкаНаИсправляемыйДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(КорректировкаРеализацииСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	ЕСТЬNULL(КорректировкаРеализацииСостав.СтавкаНДСДоИзменения.Ставка,0) КАК СтавкаНДСДоИзменения,
	|	КорректировкаРеализацииСостав.Ссылка,
	
	|	СУММА(ЕСТЬNULL(ОстаткиНоменклатуры.Себестоимость, 0)) КАК Себестоимость,
	|	СУММА(ЕСТЬNULL(ОстаткиНоменклатурыПоИсправляемомуДокументу.Себестоимость, 0)) КАК СебестоимостьДоИзменения,
	
	|	СУММА(КорректировкаРеализацииСостав.Количество * КорректировкаРеализацииСостав.Коэффициент) КАК Количество,
	|	СУММА(КорректировкаРеализацииСостав.КоличествоДоИзменения * КорректировкаРеализацииСостав.Коэффициент) КАК КоличествоДоИзменения,
	|	СУММА(КорректировкаРеализацииСостав.КоличествоДоКорректировки * КорректировкаРеализацииСостав.Коэффициент) КАК КоличествоДоКорректировки,
	
	|	СУММА(КорректировкаРеализацииСостав.Сумма) КАК Сумма,
	|	СУММА(КорректировкаРеализацииСостав.СуммаДоИзменения) КАК СуммаДоИзменения,
	|	СУММА(КорректировкаРеализацииСостав.СуммаДоКорректировки) КАК СуммаДоКорректировки,
	
	|	СУММА(КорректировкаРеализацииСостав.СуммаНДС) КАК СуммаНДС,
	|	СУММА(КорректировкаРеализацииСостав.СуммаНДСДоИзменения) КАК СуммаНДСДоИзменения,
	|	СУММА(КорректировкаРеализацииСостав.СуммаНДСДоКорректировки) КАК СуммаНДСДоКорректировки
	|ИЗ
	|	Документ.КорректировкаРеализации.Состав КАК КорректировкаРеализацииСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО КорректировкаРеализацииСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатурыПоИсправляемомуДокументу КАК ОстаткиНоменклатурыПоИсправляемомуДокументу
	|		ПО КорректировкаРеализацииСостав.Номенклатура = ОстаткиНоменклатурыПоИсправляемомуДокументу.Номенклатура
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО КорректировкаРеализацииСостав.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	КорректировкаРеализацииСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииСостав.Ссылка,
	|	КорректировкаРеализацииСостав.Коэффициент,
	|	КорректировкаРеализацииСостав.СтавкаНДС.Ставка,
	|   КорректировкаРеализацииСостав.СтавкаНДСДоИзменения.Ставка,
	|	ТабВидовНоменклатуры.ВидНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	// BiT ALProzorov 25/08/2015 -->>
	ТаблицаДляОстатков = Новый ТаблицаЗначений;
	ТаблицаДляОстатков.Колонки.Добавить("Номенклатура");
	ТаблицаДляОстатков.Колонки.Добавить("СтавкаНДС");
	ТаблицаДляОстатков.Колонки.Добавить("Количество");
	ТаблицаДляОстатков.Колонки.Добавить("КоличествоДоИзменения");
	ТаблицаДляОстатков.Колонки.Добавить("Сумма");
	ТаблицаДляОстатков.Колонки.Добавить("СуммаДоИзменения");
	ТаблицаДляОстатков.Колонки.Добавить("СуммаНДС");
	ТаблицаДляОстатков.Колонки.Добавить("СуммаНДСДоИзменения");
	// BiT ALProzorov 25/08/2015 <<--
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_КорректировкаРеализации_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС            = Выборка.СтавкаНДС;
		ПакетСостав.СтавкаНДСДоИзменения = Выборка.СтавкаНДСДоИзменения;
		
		ЭтоНеМатериалИлиУслуга = Выборка.ВидНоменклатуры = "п" ИЛИ Выборка.ВидНоменклатуры = "с" ИЛИ Выборка.ВидНоменклатуры = "т";
		
		//{Ситек ДойниковПВ 2015-10-13
		//Документ КорректировкаРеализации делает неправильные движения по себестоимости, пока не переделаны движения, 
		//необходимо заполнять количество новой суммой.
		//ПакетСостав.Количество                 = ?(ЭтоНеМатериалИлиУслуга,Выборка.СебестоимостьДоИзменения+Выборка.Себестоимость,Выборка.Количество);
		ПакетСостав.Количество                 = ?(ЭтоНеМатериалИлиУслуга,Выборка.Сумма,Выборка.Количество);
		//}Ситек ДойниковПВ 2015-10-13
		
		ПакетСостав.КоличествоДоИзменения      = ?(ЭтоНеМатериалИлиУслуга,Выборка.СебестоимостьДоИзменения,Выборка.КоличествоДоИзменения);
		ПакетСостав.КоличествоДоКорректировки  = 0;
		
		//ПакетСостав.Количество                 = ?(ЭтоНеМатериалИлиУслуга,Выборка.Сумма,Выборка.Количество);
		//ПакетСостав.КоличествоДоИзменения      = ?(ЭтоНеМатериалИлиУслуга,Выборка.СуммаДоИзменения,Выборка.КоличествоДоИзменения);
		//ПакетСостав.КоличествоДоКорректировки  = ?(ЭтоНеМатериалИлиУслуга,Выборка.СуммаДоКорректировки,Выборка.КоличествоДоКорректировки);
		
		ПакетСостав.Сумма                = Выборка.Сумма;
		ПакетСостав.СуммаДоИзменения     = Выборка.СуммаДоИзменения;
		ПакетСостав.СуммаДоКорректировки = Выборка.СуммаДоКорректировки;
		ПакетСостав.СуммаНДС                = Выборка.СуммаНДС;
		ПакетСостав.СуммаНДСДоИзменения     = Выборка.СуммаНДСДоИзменения;
		ПакетСостав.СуммаНДСДоКорректировки = Выборка.СуммаНДСДоКорректировки;
		ПакетСостав.Номенклатура  = Выборка.ВидНоменклатуры;
		Пакет.Состав.Добавить(ПакетСостав);
		
		// BiT ALProzorov 25/08/2015 -->>
		НСО = ТаблицаДляОстатков.Добавить();
		НСО.Номенклатура          = Выборка.ВидНоменклатуры;
		НСО.СтавкаНДС             = Выборка.СтавкаНДС;
		НСО.Количество            = ?(ЭтоНеМатериалИлиУслуга,Выборка.СебестоимостьДоИзменения+Выборка.Себестоимость,Выборка.Количество);
		НСО.КоличествоДоИзменения = ?(ЭтоНеМатериалИлиУслуга,Выборка.СебестоимостьДоИзменения,Выборка.КоличествоДоИзменения);
		НСО.Сумма                 = Выборка.Сумма;
		НСО.СуммаДоИзменения      = Выборка.СуммаДоИзменения;
		НСО.СуммаНДС              = Выборка.СуммаНДС;
		НСО.СуммаНДСДоИзменения   = Выборка.СуммаНДСДоИзменения;
		// BiT ALProzorov 25/08/2015 <<--
	КонецЦикла;
	
	// BiT ALProzorov 25/08/2015 -->>
	ВозвратнаяНакладная = (ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.РасходнаяНакладная") и Объект.ДокументРеализации.Возврат);
	ТаблицаДляОстатков.Свернуть("Номенклатура,СтавкаНДС","Количество,КоличествоДоИзменения,Сумма,СуммаДоИзменения,СуммаНДС,СуммаНДСДоИзменения");
	// BiT ALProzorov 25/08/2015 <<--	
	
	//регистр остатки номенклатуры
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Себестоимость,
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0) КАК СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО ДвиженияТМЦ.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ТабВидовНоменклатуры.ВидНоменклатуры,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ДвиженияТМЦ.Комитент,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_КорректировкаРеализации_ОстаткиНоменклатуры");
	Пока Выборка.Следующий() Цикл
		
		// BiT ALProzorov 25/08/2015 -->>
		Если ВозвратнаяНакладная Тогда
			НайденныеСтроки = ТаблицаДляОстатков.НайтиСтроки(Новый Структура("Номенклатура, СтавкаНДС",Выборка.ВидНоменклатуры,Выборка.СтавкаНДС));
			Количество      = НайденныеСтроки[0].Количество - НайденныеСтроки[0].КоличествоДоИзменения;
			СуммаПродажи    = НайденныеСтроки[0].Сумма 		- НайденныеСтроки[0].СуммаДоИзменения;
			СуммаНДСПродажи = НайденныеСтроки[0].СуммаНДС 	- НайденныеСтроки[0].СуммаНДСДоИзменения;
		Иначе
			Количество      = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
			СуммаПродажи    = Выборка.СуммаПродажи;
			СуммаНДСПродажи = Выборка.СуммаНДСПродажи;
		КонецЕсли;
		// BiT ALProzorov 25/08/2015 <<--
		
		ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
		ПакетОстаткиНоменклатуры.Номенклатура          = Выборка.ВидНоменклатуры;
		ПакетОстаткиНоменклатуры.Статус                = Строка(Выборка.Статус);
		ПакетОстаткиНоменклатуры.Комитент              = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент));
		ПакетОстаткиНоменклатуры.КомитентТип           = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
		// BiT ALProzorov 25/08/2015 -->>
		//ПакетОстаткиНоменклатуры.Количество            = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетОстаткиНоменклатуры.Количество            = Количество;
		// BiT ALProzorov 25/08/2015 <<--
		ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
		ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
		// BiT ALProzorov 25/08/2015 -->>
		//ПакетОстаткиНоменклатуры.СуммаПродажи          = Выборка.СуммаПродажи;
		//ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = Выборка.СуммаНДСПродажи;
		ПакетОстаткиНоменклатуры.СуммаПродажи          = СуммаПродажи;
		ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = СуммаНДСПродажи;
		// BiT ALProzorov 25/08/2015 <<--
		ПакетОстаткиНоменклатуры.СтавкаНДС             = Выборка.СтавкаНДС;
		Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
	КонецЦикла;
	
	//************************************************
	Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры";
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_КорректировкаРеализации","fin","RS_КорректировкаРеализации");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьКорректировкуПоступления(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_КорректировкаПоступления");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	
	//{Ситек ДойниковПВ 2015-11-06
	//Необходимо искать подчиненную регистрацию счет фактуры.
	
	//Пакет.ДатаДокумента = Объект.ДатаДокумента;
	//Пакет.ДатаСФ = Объект.ДатаСФ;
	//Пакет.НомерДокумента = Объект.НомерДокумента;
	//Пакет.НомерСФ = Объект.НомерСФ;
	
	СчетФактура = ПолучитьПодчиненнуюРегистрациюСчетФактуру(Объект.Ссылка);
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		Пакет.ДатаСФ = СчетФактура.ДатаВходящегоДокумента;
		Пакет.НомерСФ = СчетФактура.НомерВходящегоДокумента;
	Иначе
		Пакет.ДатаСФ = Объект.ДатаСФ;
		Пакет.НомерСФ = Объект.НомерСФ;
	КонецЕсли;
	//}Ситек ДойниковПВ 2015-11-06

	
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Комментарий = Объект.Комментарий;
	
	Пакет.РежимКорректировки = Метаданные.Перечисления.РежимыКорректировок.EnumValues.Get(Перечисления.РежимыКорректировок.Индекс(Объект.РежимКорректировки)).Имя;
	
	Пакет.ДокументПоступления = Строка(Объект.ДокументПоступления.УникальныйИдентификатор());
	Пакет.ДокументПоступленияТип = Объект.ДокументПоступления.Метаданные().Имя;
	
	Пакет.ИсправляемыйДокумент = Строка(Объект.ИсправляемыйДокумент.УникальныйИдентификатор());
	Пакет.ИсправляемыйДокументТип = Объект.ИсправляемыйДокумент.Метаданные().Имя;
	
	ОписаниеОрганизации = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Объект.Фирма, Объект.Дата);
	Пакет.АдресГрузоотправителя = ОписаниеОрганизации.ЮридическийАдрес;
	
	КонтрагентТип = ОпределитьТипКонтрагента(Объект.Контрагент);
	Если КонтрагентТип = "Контрагенты" Тогда
		//Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
		Если Объект.Контрагент.Поставщик Тогда
			Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() Тогда
				Пакет.Контрагент = Объект.Контрагент.Родитель.Код;
			Иначе
				Пакет.Контрагент = Объект.Контрагент.Код;
			КонецЕсли;
		Иначе
			Пакет.Контрагент = Объект.Контрагент.Код;
		КонецЕсли;
		Пакет.КонтрагентТип = "Контрагенты";
	ИначеЕсли КонтрагентТип = "ПодразделенияПоставщиков" Тогда
		Пакет.Контрагент = Объект.Контрагент.Код;
		Пакет.КонтрагентТип = "ПодразделенияПоставщиков";
	ИначеЕсли КонтрагентТип = "СтруктурныеЕдиницы" Тогда 
		//BIT_Izhevsk ALProzorov 22/07/2015 -->>
		//Если ЭтоПеремещениеМеждуСтруктурнымиЕдиницами(Объект) Тогда
		//	Пакет.Контрагент = Строка(Объект.Контрагент.Код);
		//	Пакет.КонтрагентТип = "СтруктурныеЕдиницы";
		//Иначе
			Пакет.Контрагент = Строка(Объект.Контрагент.Организация.УникальныйИдентификатор());
			Пакет.КонтрагентТип = "Организации";
		//КонецЕсли;
		//BIT_Izhevsk ALProzorov 22/07/2015 <<--
	ИначеЕсли КонтрагентТип = "Организации" Тогда
		//BIT_Izhevsk ALProzorov 22/07/2015 -->>
		//Если ЭтоПеремещениеМеждуСтруктурнымиЕдиницами(Объект) Тогда
		//	Пакет.Контрагент = Строка(Объект.ИсправляемыйДокумент.Грузоотправитель.Код);
		//	Пакет.КонтрагентТип = "СтруктурныеЕдиницы";
		//Иначе
			Пакет.Контрагент = Строка(Объект.Контрагент.УникальныйИдентификатор());
			Пакет.КонтрагентТип = "Организации";
		//КонецЕсли;
		//BIT_Izhevsk ALProzorov 22/07/2015 <<--
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "Документ.КорректировкаПоступления.Состав";
	НазваниеУсловия = "Ссылка";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(КорректировкаПоступленияСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	ЕСТЬNULL(КорректировкаПоступленияСостав.СтавкаНДСДоИзменения.Ставка,0) КАК СтавкаНДСДоИзменения,
	|	КорректировкаПоступленияСостав.Ссылка,
	|	СУММА(ЕСТЬNULL(ОстаткиНоменклатуры.Себестоимость, 0)) КАК Себестоимость,
	
	|	СУММА(КорректировкаПоступленияСостав.Количество * КорректировкаПоступленияСостав.Коэффициент) КАК Количество,
	|	СУММА(КорректировкаПоступленияСостав.КоличествоДоИзменения * КорректировкаПоступленияСостав.Коэффициент) КАК КоличествоДоИзменения,
	|	СУММА(КорректировкаПоступленияСостав.КоличествоДоКорректировки * КорректировкаПоступленияСостав.Коэффициент) КАК КоличествоДоКорректировки,
	
	|	СУММА(КорректировкаПоступленияСостав.Сумма) КАК Сумма,
	|	СУММА(КорректировкаПоступленияСостав.СуммаДоИзменения) КАК СуммаДоИзменения,
	|	СУММА(КорректировкаПоступленияСостав.СуммаДоКорректировки) КАК СуммаДоКорректировки,
	
	|	СУММА(КорректировкаПоступленияСостав.СуммаНДС) КАК СуммаНДС,
	|	СУММА(КорректировкаПоступленияСостав.СуммаНДСДоИзменения) КАК СуммаНДСДоИзменения,
	|	СУММА(КорректировкаПоступленияСостав.СуммаНДСДоКорректировки) КАК СуммаНДСДоКорректировки
	|ИЗ
	|	Документ.КорректировкаПоступления.Состав КАК КорректировкаПоступленияСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО КорректировкаПоступленияСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО КорректировкаПоступленияСостав.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	КорректировкаПоступленияСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПоступленияСостав.Ссылка,
	|	КорректировкаПоступленияСостав.Коэффициент,
	|	КорректировкаПоступленияСостав.СтавкаНДС.Ставка,
	|   КорректировкаПоступленияСостав.СтавкаНДСДоИзменения.Ставка,
	|	ТабВидовНоменклатуры.ВидНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_КорректировкаПоступления_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС            = Выборка.СтавкаНДС;
		ПакетСостав.СтавкаНДСДоИзменения = Выборка.СтавкаНДСДоИзменения;
		
		ЭтоНеМатериалИлиУслуга = Выборка.ВидНоменклатуры = "п" ИЛИ Выборка.ВидНоменклатуры = "с" ИЛИ Выборка.ВидНоменклатуры = "т";
		
		ПакетСостав.Количество                 = ?(ЭтоНеМатериалИлиУслуга,Выборка.Сумма,Выборка.Количество);
		ПакетСостав.КоличествоДоИзменения      = ?(ЭтоНеМатериалИлиУслуга,Выборка.СуммаДоИзменения,Выборка.КоличествоДоИзменения);
		ПакетСостав.КоличествоДоКорректировки  = ?(ЭтоНеМатериалИлиУслуга,Выборка.СуммаДоКорректировки,Выборка.КоличествоДоКорректировки);
		
		ПакетСостав.Сумма                = Выборка.Сумма;
		ПакетСостав.СуммаДоИзменения     = Выборка.СуммаДоИзменения;
		ПакетСостав.СуммаДоКорректировки = Выборка.СуммаДоКорректировки;
		ПакетСостав.СуммаНДС                = Выборка.СуммаНДС;
		ПакетСостав.СуммаНДСДоИзменения     = Выборка.СуммаНДСДоИзменения;
		ПакетСостав.СуммаНДСДоКорректировки = Выборка.СуммаНДСДоКорректировки;
		ПакетСостав.Номенклатура  = Выборка.ВидНоменклатуры;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	//BIT_Izhevsk ALProzorov 29/07/2015 -->>
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений; 
	ПечФорма = Документы.КорректировкаПоступления.ПечатьКорректировкаПоступления(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	//BIT_Izhevsk ALProzorov 29/07/2015 <<--
	
	//************************************************
	Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры";
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_КорректировкаПоступления","fin","RS_КорректировкаПоступления");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьПеремещение(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_Перемещение");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Склад = Объект.Склад.Код;
	Пакет.СкладПолучатель = Объект.СкладПолучатель.Код;
	Пакет.Основание = Объект.Основание;
	Пакет.Комментарий = Объект.Комментарий;
	
	Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
		Пакет.ДокОснование = Строка(Объект.ДокОснование.УникальныйИдентификатор());
		Пакет.ДокОснованиеТип = Объект.ДокОснование.Метаданные().Имя;
	КонецЕсли;
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.Перемещение.ПечатьТОРГ13(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "Документ.Перемещение.Состав";
	НазваниеУсловия = "Ссылка";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Расход);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Сумма,
	|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ОстаткиНоменклатуры.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ОстаткиНоменклатуры.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ОстаткиНоменклатуры.Номенклатура,
	|	ОстаткиНоменклатуры.Статус,
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатуры.Комитент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ОстаткиНоменклатуры.Комитент = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ОстаткиНоменклатуры.Комитент
	|	КОНЕЦ КАК КомитентГуид,
	|	ОстаткиНоменклатуры.Комитент.Код КАК Комитент
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|	И ОстаткиНоменклатуры.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура,
	|	ОстаткиНоменклатуры.Статус,
	|	ОстаткиНоменклатуры.Комитент.Код,
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатуры.Комитент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ОстаткиНоменклатуры.Комитент = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ОстаткиНоменклатуры.Комитент
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ОстаткиНоменклатуры.КомитентГуид КАК КомитентГуид,
	|	ОстаткиНоменклатуры.Комитент КАК Комитент,
	|	ОстаткиНоменклатуры.Статус,
	|	ПеремещениеСостав.Ссылка,
	|	СУММА(ПеремещениеСостав.Количество * ПеремещениеСостав.Коэффициент) КАК Количество,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Сумма), 0) КАК Себестоимость,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Сумма), 0) КАК Сумма,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СуммаУпр), 0) КАК СуммаУпр,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СуммаНДС), 0) КАК СуммаНДС,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СуммаНДСУпр), 0) КАК СуммаНДСУпр
	|ИЗ
	|	Документ.Перемещение.Состав КАК ПеремещениеСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО ПеремещениеСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО ПеремещениеСостав.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	ПеремещениеСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеСостав.Ссылка,
	|	ПеремещениеСостав.Коэффициент,
	|	ОстаткиНоменклатуры.Комитент,
	|	ОстаткиНоменклатуры.КомитентГуид,
	|	ОстаткиНоменклатуры.Статус,
	|	ТабВидовНоменклатуры.ВидНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_Перемещение_Состав");
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_Перемещение_ОстаткиНоменклатуры");
	
	Пока Выборка.Следующий() Цикл
		
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура  = Выборка.ВидНоменклатуры;
		ПакетСостав.Количество    = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетСостав.Сумма         = Выборка.Сумма;
		Пакет.Состав.Добавить(ПакетСостав);
		
		ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
		ПакетОстаткиНоменклатуры.Номенклатура          = Выборка.ВидНоменклатуры;
		ПакетОстаткиНоменклатуры.Статус                = Строка(Выборка.Статус);
		ПакетОстаткиНоменклатуры.Комитент              = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент));
		ПакетОстаткиНоменклатуры.КомитентТип              = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
		ПакетОстаткиНоменклатуры.Количество            = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
		ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
		Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
		
	КонецЦикла;
	
	//************************************************
	Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры";
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_Перемещение","fin","RS_Перемещение");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьВозвратнуюОтПокупателя(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_ВозвратнаяНакладнаяОтПокупателя");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.АдресДоставки = "";
	Пакет.Склад = Объект.Склад.Код;
	Пакет.Контрагент = Объект.Контрагент.Код;
	//BiT ALProzorov 08/09/2015 -->>
	Пакет.Комментарий = Объект.Комментарий;
	//BiT ALProzorov 08/09/2015 <<--
	Пакет.КонтрагентТип = ОпределитьТипКонтрагента(Объект.Контрагент);
	
	Если Пакет.КонтрагентТип = "Контрагенты" Тогда
		Если Объект.Контрагент.Поставщик Тогда
			Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() Тогда
				Пакет.Контрагент = Объект.Контрагент.Родитель.Код;
				Пакет.Грузополучатель = ?(НЕ ЗначениеЗаполнено(Объект.Грузополучатель),"",Объект.Грузополучатель.Родитель.Код)
			Иначе
				Пакет.Контрагент = Объект.Контрагент.Код;
				Пакет.Грузополучатель = ?(НЕ ЗначениеЗаполнено(Объект.Грузополучатель),"",Объект.Грузополучатель.Код)
			КонецЕсли;
		Иначе
			Пакет.Контрагент = Объект.Контрагент.Код;
			Пакет.Грузополучатель = ?(НЕ ЗначениеЗаполнено(Объект.Грузополучатель),"",Объект.Грузополучатель.Код)
		КонецЕсли;
	ИначеЕсли Пакет.КонтрагентТип = "ПодразделенияПоставщиков" Тогда
		Пакет.Контрагент = Объект.Контрагент.Код;
		Пакет.Грузополучатель = ?(НЕ ЗначениеЗаполнено(Объект.Грузополучатель),"",Объект.Грузополучатель.Код)
	ИначеЕсли Пакет.КонтрагентТип = "СтруктурныеЕдиницы" Тогда
		Пакет.Контрагент = Строка(Объект.Контрагент.Организация.УникальныйИдентификатор());
		Пакет.Грузополучатель = Строка(Объект.Контрагент.Организация.УникальныйИдентификатор());
	КонецЕсли;
	
	Пакет.ТипВозврата = "ОтПокупателя";
	
	Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
		Пакет.ДокументОснование = Строка(Объект.ДокОснование.УникальныйИдентификатор());
		Пакет.ДокументОснованиеТип = Объект.ДокОснование.Метаданные().Имя;
	КонецЕсли;
	
	Если Объект.Метаданные().Имя = "ПриходнаяНакладная" Тогда
		Пакет.НомерВходящегоСчетаФактуры = Объект.НомерСФ;
		Пакет.ДатаВходящегоСчетаФактуры  = Объект.ДатаСФ;
	КонецЕсли;
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.ВозвратнаяНакладнаяОтПокупателя.ПечатьТОРГ12(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	//НазваниеТаблицы = "Документ.ВозвратнаяНакладнаяОтПокупателя.Состав";
	НазваниеТаблицы = "Документ."+Объект.Метаданные().Имя+".Состав";
	
	НазваниеУсловия = "Ссылка";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура,
	|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК СебестоимостьУпр,
	|	СУММА(ОстаткиНоменклатуры.СуммаНДС) КАК СебестоимостьНДС,
	|	СУММА(ОстаткиНоменклатуры.СуммаНДСУпр) КАК СебестоимостьНДСУпр
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ВозвратнаяНакладнаяОтПокупателяСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	ВозвратнаяНакладнаяОтПокупателяСостав.Ссылка,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Себестоимость), 0) КАК Себестоимость,
	|	СУММА(ВозвратнаяНакладнаяОтПокупателяСостав.Сумма) КАК Сумма,
	|	СУММА(ВозвратнаяНакладнаяОтПокупателяСостав.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВозвратнаяНакладнаяОтПокупателяСостав.Количество * ВозвратнаяНакладнаяОтПокупателяСостав.Коэффициент) КАК Количество,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СебестоимостьУпр), 0) КАК СебестоимостьУпр,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СебестоимостьНДС), 0) КАК СебестоимостьНДС,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СебестоимостьНДСУпр), 0) КАК СебестоимостьНДСУпр
	|ИЗ
	|	Документ."+Объект.Метаданные().Имя+".Состав КАК ВозвратнаяНакладнаяОтПокупателяСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО ВозвратнаяНакладнаяОтПокупателяСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО ВозвратнаяНакладнаяОтПокупателяСостав.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	ВозвратнаяНакладнаяОтПокупателяСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратнаяНакладнаяОтПокупателяСостав.Ссылка,
	|	ВозвратнаяНакладнаяОтПокупателяСостав.СтавкаНДС.Ставка,
	|	ОстаткиНоменклатуры.СебестоимостьУпр,
	|	ОстаткиНоменклатуры.СебестоимостьНДС,
	|	ОстаткиНоменклатуры.СебестоимостьНДСУпр,
	|	ТабВидовНоменклатуры.ВидНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ВозвратнаяНакладнаяОтПокупателя_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура   = Выборка.ВидНоменклатуры;
		ПакетСостав.Количество     = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетСостав.СтавкаНДС      = Выборка.СтавкаНДС;
		ПакетСостав.СуммаНДС       = Выборка.СуммаНДС;
		ПакетСостав.Сумма          = Выборка.Сумма;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	//регистр остатки номенклатуры
	Запрос.Текст ="ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Себестоимость,
	|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ТабВидовНоменклатуры.ВидНоменклатуры,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0) КАК  СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО ДвиженияТМЦ.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ТабВидовНоменклатуры.ВидНоменклатуры,
	|	ДвиженияТМЦ.Комитент,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ВозвратнаяНакладнаяОтПокупателя_ОстаткиНоменклатуры");
	Пока Выборка.Следующий() Цикл
		ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
		ПакетОстаткиНоменклатуры.Номенклатура       = Выборка.ВидНоменклатуры;
		ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
		ПакетОстаткиНоменклатуры.Комитент = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент));
		ПакетОстаткиНоменклатуры.КомитентТип              = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
		ПакетОстаткиНоменклатуры.Количество            = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетОстаткиНоменклатуры.СтавкаНДС             = Выборка.СтавкаНДС;
		ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
		ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
		ПакетОстаткиНоменклатуры.СуммаПродажи          = Выборка.СуммаПродажи;
		ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = Выборка.СуммаНДСПродажи;
		Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
	КонецЦикла;
	
	//************************************************
	Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры";
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ВозвратнаяНакладнаяОтПокупателя","fin","RS_ВозвратнаяНакладнаяОтПокупателя");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьОтчетРеализатора(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_ОтчетРеализатора");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.ТипОтчета = Метаданные.Перечисления.ТипыОтчетаРеализатора.EnumValues.Get(Перечисления.ТипыОтчетаРеализатора.Индекс(Объект.ТипОтчета)).Имя;
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.ДокументОснование = Строка(Объект.ДокОснование.УникальныйИдентификатор());
	Пакет.ТипДокументаОснования = Объект.ДокОснование.Метаданные().Имя;
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.ОтчетРеализатора.ПечатьОтчетаКомитентуОПродажах(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "Документ.ОтчетРеализатора.Состав";
	НазваниеУсловия = "Ссылка";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ОтчетРеализатораСостав.Сумма) КАК Себестоимость,
	|	СУММА(ОтчетРеализатораСостав.Количество * ОтчетРеализатораСостав.Коэффициент) КАК Количество,
	|	СУММА(ОтчетРеализатораСостав.Сумма) КАК Сумма,
	|	СУММА(ОтчетРеализатораСостав.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ОтчетРеализатораСостав.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(ОтчетРеализатораСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Документ.ОтчетРеализатора.Состав КАК ОтчетРеализатораСостав
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО ОтчетРеализатораСостав.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	ОтчетРеализатораСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетРеализатораСостав.СтавкаНДС.Ставка,
	|	ТабВидовНоменклатуры.ВидНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ОтчетРеализатора_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура = Выборка.ВидНоменклатуры;
		ПакетСостав.Количество   = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетСостав.Сумма        = Выборка.Сумма;
		ПакетСостав.СуммаНДС     = Выборка.СуммаНДС;
		ПакетСостав.СтавкаНДС    = Выборка.СтавкаНДС;
		ПакетСостав.СуммаПродажи = Выборка.СуммаПродажи;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	//************************************************
	Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры";
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ОтчетРеализатора","fin","RS_ОтчетРеализатора");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьАвансовыйОтчет(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_АвансовыйОтчет");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	
	//BIT_Izhevsk ALProzorov 30/07/2015 -->>
	//Пакет.Сотрудник = Строка(Объект.Сотрудник.Код);   //УникальныйИдентификатор(); //dps 15/06/26 обращение 0000131199
	Пакет.Сотрудник = Строка(Объект.Сотрудник.УникальныйИдентификатор());
	//BIT_Izhevsk ALProzorov 30/07/2015 <<--
	
	Пакет.КоличествоПриложенныхДокументов = Объект.КоличествоПриложенныхДокументов;
	Пакет.КоличествоПриложенныхЛистов = Объект.КоличествоПриложенныхЛистов;
	Пакет.НазначениеАванса = Объект.НазначениеАванса;
	Пакет.ПредыдущийАванс = Объект.ПредыдущийАванс;
	Пакет.ПерерасходПоПредыдущемуАвансу = Объект.ПерерасходПоПредыдущемуАвансу;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.Курс = Объект.Курс;
	
	ТипАванс = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_АвансовыйОтчет_Авансы");
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_АвансовыйОтчет_Состав");
	
	//Авансы
	Для каждого выборка из Объект.Авансы Цикл
		ПакетАвансы = ФабрикаXDTO.Создать(ТипАванс);
		ПакетАвансы.РКО   = Строка(Выборка.РКО.УникальныйИдентификатор());
		ПакетАвансы.Сумма = Выборка.Сумма;
		Пакет.Авансы.Добавить(ПакетАвансы);
	КонецЦикла;
	
	//Состав
	Для каждого выборка из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.ДатаДокументаРасхода   = Выборка.ДатаДокументаРасхода;
		ПакетСостав.НомерДокументаРасхода = Выборка.НомерДокументаРасхода;
		ПакетСостав.НаименованиеДокументаРасхода = Выборка.НаименованиеДокументаРасхода;
		ПакетСостав.СуммаПоОтчету = Выборка.СуммаПоОтчету;
		ПакетСостав.Сумма = Выборка.Сумма;
		ПакетСостав.СтатьяДвиженияДенежныхСредств = Строка(Выборка.СтатьяДвиженияДенежныхСредств.УникальныйИдентификатор());
		ПакетСостав.КлассификаторДДС = Строка(Выборка.КлассификаторДДС.Наименование);
		ПакетСостав.ТипАналитики = ОпределитьТипКонтрагента(Выборка.Аналитика);
		Если ЗначениеЗаполнено(Выборка.Аналитика) Тогда
			Если ПакетСостав.ТипАналитики = "Контрагенты" Тогда 
				// {ВетровИА 2015-07-09 Обращение 0000132750 	
				Если Выборка.Аналитика.Поставщик Тогда
					Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() Тогда
						ПакетСостав.Аналитика = Строка(Выборка.Аналитика.Родитель.Код);
					Иначе
						ПакетСостав.Аналитика = Строка(Выборка.Аналитика.Код);
					КонецЕсли;
				Иначе
					ПакетСостав.Аналитика = Строка(Выборка.Аналитика.Код);
				КонецЕсли;
				// ВетровИА 2015-07-09 Обращение 0000132750} 
			ИначеЕсли ПакетСостав.ТипАналитики = "ПодразделенияПоставщиков" ТОгда
				ПакетСостав.Аналитика = Строка(Выборка.Аналитика.Код);
			ИначеЕсли ТипЗнч(Выборка.Аналитика) = Тип("СправочникСсылка.ККМ") Тогда	
				ПакетСостав.Аналитика = Строка(Выборка.Аналитика.УникальныйИдентификатор());
			ИначеЕсли ТипЗнч(Выборка.Аналитика) = Тип("СправочникСсылка.КассыФирмы") Тогда	
				ПакетСостав.Аналитика = Строка(Выборка.Аналитика.УникальныйИдентификатор());
			Иначе
				ПакетСостав.Аналитика = Строка(Выборка.Аналитика.Код);
			КонецЕсли;
		КонецЕсли;
		ПакетСостав.Комментарий = Выборка.Комментарий;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_АвансовыйОтчет","fin","RS_АвансовыйОтчет");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьZОтчет(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_ZОтчет");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	
	СтруктураПечФорм = Документы.ZОтчет.ПолучитьСтруктуруПечатныхФорм(Объект);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(СтруктураПечФорм, Новый СжатиеДанных(6));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "Документ.ZОтчет.Состав";
	НазваниеУсловия = "Ссылка";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	Запрос.УстановитьПараметр("ДатаСреза",Объект.Дата);					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//{БредовЮГ 2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44
	//Запрос.Текст = "ВЫБРАТЬ
	//|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	//|	ОстаткиНоменклатуры.Номенклатура
	//|ПОМЕСТИТЬ ОстаткиНоменклатуры
	//|ИЗ
	//|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	//|ГДЕ
	//|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ОстаткиНоменклатуры.Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(ZОтчетСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	//|	ZОтчетСостав.Ссылка,
	//|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Себестоимость), 0) КАК Себестоимость,
	//|	СУММА(ZОтчетСостав.Количество) КАК Количество,
	//|	СУММА(ZОтчетСостав.Сумма) КАК Сумма,
	//|	СУММА(ZОтчетСостав.СуммаНДС) КАК СуммаНДС,
	//|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	//|	ZОтчетСостав.Склад КАК Склад
	//|ИЗ
	//|	Документ.Zотчет.Состав КАК ZОтчетСостав
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	//|		ПО ZОтчетСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	//|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	//|		ПО ZОтчетСостав.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	//|ГДЕ
	//|	ZОтчетСостав.Ссылка = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|   ZОтчетСостав.Склад,
	//|	ZОтчетСостав.Ссылка,
	//|	ZОтчетСостав.СтавкаНДС.Ставка,
	//|	ТабВидовНоменклатуры.ВидНоменклатуры";
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА ДвиженияТМЦ.Статус = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.КупляПродажа)
	               |				ТОГДА ВЫБОР
				   //BIT_Izhevsk ALProzorov 06/08/2015 -->>
	               //|						КОГДА ЕСТЬNULL(УчетнаяПолитикаФирмы.Izh_ПлательщикНДС, ИСТИНА)
				   |						КОГДА ЕСТЬNULL(УчетнаяПолитикаФирмы.Izh_ПлательщикНДС, ЛОЖЬ)
				   //BIT_Izhevsk ALProzorov 06/08/2015 <<--
	               |							ТОГДА ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ДвиженияТМЦ.Статус = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Комиссия)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ТИПЗНАЧЕНИЯ(ДвиженияТМЦ.Комитент) = ТИП(Справочник.Организации)
	               |								И ДвиженияТМЦ.Комитент <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ЕСТЬNULL(УчетнаяПолитикаКомитента.Izh_ПлательщикНДС, ИСТИНА)
	               |										ТОГДА ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |						КОГДА ТИПЗНАЧЕНИЯ(ДвиженияТМЦ.Комитент) = ТИП(Справочник.Контрагенты)
	               |								И ДвиженияТМЦ.Комитент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВЫРАЗИТЬ(ДвиженияТМЦ.Комитент КАК Справочник.Контрагенты).НеПлательщикНДС
	               |										ТОГДА 0
	               |									ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |								КОНЕЦ
	               |						ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |					КОНЕЦ
	               |			ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СтавкаНДС,
	               |	ДвиженияТМЦ.Регистратор КАК Ссылка,
	               |	ДвиженияТМЦ.Сумма КАК Себестоимость,
	               |	ДвиженияТМЦ.Количество КАК Количество,
	               |	ДвиженияТМЦ.СуммаПродажи КАК Сумма,
	               |	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	ВЫРАЗИТЬ(ДвиженияТМЦ.Регистратор КАК Документ.Zотчет).СтруктурнаяЕдиница.СкладТорговогоЗала КАК Склад
	               |ПОМЕСТИТЬ ВТДанные
	               |ИЗ
	               |	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаСреза, ) КАК УчетнаяПолитикаФирмы
	               |		ПО ДвиженияТМЦ.Фирма = УчетнаяПолитикаФирмы.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаСреза, ) КАК УчетнаяПолитикаКомитента
	               |		ПО ДвиженияТМЦ.Комитент = УчетнаяПолитикаКомитента.Организация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	               |		ПО ДвиженияТМЦ.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	               |ГДЕ
	               |	ДвиженияТМЦ.Регистратор = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанные.СтавкаНДС,
	               |	ВТДанные.Ссылка,
	               |	СУММА(ВТДанные.Себестоимость) КАК Себестоимость,
	               |	СУММА(ВТДанные.Количество) КАК Количество,
	               |	СУММА(ВТДанные.Сумма) КАК Сумма,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА ЕСТЬNULL(ВТДанные.СтавкаНДС, 0) = 0
	               |					ТОГДА 0
	               |				ИНАЧЕ ВТДанные.Сумма * ВТДанные.СтавкаНДС / (100 + ВТДанные.СтавкаНДС)
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
	               |	ВТДанные.ВидНоменклатуры,
	               |	ВТДанные.Склад
	               |ИЗ
	               |	ВТДанные КАК ВТДанные
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТДанные.Склад,
	               |	ВТДанные.Ссылка,
	               |	ВТДанные.ВидНоменклатуры,
	               |	ВТДанные.СтавкаНДС";
	//БредовЮГ  2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44 } 
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ZОтчет_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура  = Выборка.ВидНоменклатуры;
		ПакетСостав.Количество    = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетСостав.Склад         = Строка(Выборка.Склад.Код);
		ПакетСостав.Сумма         = Выборка.Сумма;
		ПакетСостав.СтавкаНДС     = Выборка.СтавкаНДС;
		ПакетСостав.СуммаНДС      = Выборка.СуммаНДС;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "РегистрНакопления.ОстаткиНоменклатуры";
	НазваниеУсловия = "Регистратор";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	//{БредовЮГ 2015-04-20 Наряд 000146952 от 05.04.2015 15:49:44
	Запрос.УстановитьПараметр("ДатаСреза",Объект.Дата);
	//БредовЮГ 2015-04-20 Наряд 000146952 от 05.04.2015 15:49:44 исправление ошибки}
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//регистр остатки номенклатуры
	//{БредовЮГ 2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СУММА(ДвиженияТМЦ.Сумма) КАК Себестоимость,
	//               |	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	//               |	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	//               |	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	//               |	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	//               |	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	//               |	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	//               |	ДвиженияТМЦ.Статус,
	//               |	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	//               |	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	//               |	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	//               |	ДвиженияТМЦ.Комитент КАК КомитентГуид,
	//               |	ЕСТЬNULL(ДвиженияТМЦ.СтавкаНДС.Ставка, 0) КАК СтавкаНДС,
	//               |	ОстаткиНоменклатуры.МестоХранения КАК Склад
	//               |ИЗ
	//               |	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	//               |		ПО ДвиженияТМЦ.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//               |			ОстаткиНоменклатуры.Фирма КАК Фирма,
	//               |			ОстаткиНоменклатуры.Статус КАК Статус,
	//               |			ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
	//               |			ОстаткиНоменклатуры.КодОперации КАК КодОперации,
	//               |			ОстаткиНоменклатуры.Количество КАК Количество,
	//               |			ОстаткиНоменклатуры.Сумма КАК Сумма,
	//               |			ОстаткиНоменклатуры.СуммаУпр КАК СуммаУпр,
	//               |			ОстаткиНоменклатуры.СуммаНДС КАК СуммаНДС,
	//               |			ОстаткиНоменклатуры.СуммаНДСУпр КАК СуммаНДСУпр,
	//               |			ОстаткиНоменклатуры.МестоХранения КАК МестоХранения
	//               |		ИЗ
	//               |			РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	//               |		ГДЕ
	//               |			ОстаткиНоменклатуры.Регистратор = &Ссылка
	//               |		
	//               |		СГРУППИРОВАТЬ ПО
	//               |			ОстаткиНоменклатуры.Номенклатура,
	//               |			ОстаткиНоменклатуры.МестоХранения,
	//               |			ОстаткиНоменклатуры.Количество,
	//               |			ОстаткиНоменклатуры.Сумма,
	//               |			ОстаткиНоменклатуры.СуммаУпр,
	//               |			ОстаткиНоменклатуры.СуммаНДС,
	//               |			ОстаткиНоменклатуры.СуммаНДСУпр,
	//               |			ОстаткиНоменклатуры.Фирма,
	//               |			ОстаткиНоменклатуры.КодОперации,
	//               |			ОстаткиНоменклатуры.Статус) КАК ОстаткиНоменклатуры
	//               |		ПО ДвиженияТМЦ.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	//               |			И ДвиженияТМЦ.Фирма = ОстаткиНоменклатуры.Фирма
	//               |			И ДвиженияТМЦ.Статус = ОстаткиНоменклатуры.Статус
	//               |			И ДвиженияТМЦ.КодОперации = ОстаткиНоменклатуры.КодОперации
	//               |			И ДвиженияТМЦ.Количество = ОстаткиНоменклатуры.Количество
	//               |			И ДвиженияТМЦ.Сумма = ОстаткиНоменклатуры.Сумма
	//               |			И ДвиженияТМЦ.СуммаУпр = ОстаткиНоменклатуры.СуммаУпр
	//               |			И ДвиженияТМЦ.СуммаНДС = ОстаткиНоменклатуры.СуммаНДС
	//               |			И ДвиженияТМЦ.СуммаНДСУпр = ОстаткиНоменклатуры.СуммаНДСУпр
	//               |ГДЕ
	//               |	ДвиженияТМЦ.Регистратор = &Ссылка
	//               |    И ДвиженияТМЦ.Номенклатура.ВидТовара <> ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	//               |СГРУППИРОВАТЬ ПО
	//               |	ДвиженияТМЦ.Статус,
	//               |	ДвиженияТМЦ.Комитент.Код,
	//               |	ТабВидовНоменклатуры.ВидНоменклатуры,
	//               |	ДвиженияТМЦ.Комитент,
	//               |	ЕСТЬNULL(ДвиженияТМЦ.СтавкаНДС.Ставка, 0),
	//               |	ОстаткиНоменклатуры.МестоХранения";
	Запрос.Текст = "ВЫБРАТЬ
	|	ДвиженияТМЦ.Сумма КАК Себестоимость,
	|	ДвиженияТМЦ.Количество КАК Количество,
	|	ДвиженияТМЦ.Сумма КАК Сумма,
	|	ДвиженияТМЦ.СуммаУпр КАК СуммаУпр,
	|	ДвиженияТМЦ.СуммаНДС КАК СуммаНДС,
	|	ДвиженияТМЦ.СуммаНДСУпр КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	ДвиженияТМЦ.СуммаПродажи КАК СуммаПродажи,
	|	ДвиженияТМЦ.СуммаНДСПродажи КАК СуммаНДСПродажи,
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ДвиженияТМЦ.Статус = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.КупляПродажа)
	|				ТОГДА ВЫБОР
    //BIT_Izhevsk ALProzorov 06/08/2015 -->>
	//|						КОГДА ЕСТЬNULL(УчетнаяПолитикаФирмы.Izh_ПлательщикНДС, ИСТИНА)
	|						КОГДА ЕСТЬNULL(УчетнаяПолитикаФирмы.Izh_ПлательщикНДС, ЛОЖЬ)
	//BIT_Izhevsk ALProzorov 06/08/2015 <<--
	|							ТОГДА ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА ДвиженияТМЦ.Статус = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Комиссия)
	|				ТОГДА ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(ДвиженияТМЦ.Комитент) = ТИП(Справочник.Организации)
	|								И ДвиженияТМЦ.Комитент <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(УчетнаяПолитикаКомитента.Izh_ПлательщикНДС, ИСТИНА)
	|										ТОГДА ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						КОГДА ТИПЗНАЧЕНИЯ(ДвиженияТМЦ.Комитент) = ТИП(Справочник.Контрагенты)
	|								И ДвиженияТМЦ.Комитент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ВЫБОР
	|									КОГДА ВЫРАЗИТЬ(ДвиженияТМЦ.Комитент КАК Справочник.Контрагенты).НеПлательщикНДС
	|										ТОГДА 0
	|									ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	|								КОНЕЦ
	|						ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СтавкаНДС,
	|	ОстаткиНоменклатуры.МестоХранения КАК Склад
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО ДвиженияТМЦ.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОстаткиНоменклатуры.Фирма КАК Фирма,
	|			ОстаткиНоменклатуры.Статус КАК Статус,
	|			ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
	|			ОстаткиНоменклатуры.КодОперации КАК КодОперации,
	|			ОстаткиНоменклатуры.Количество КАК Количество,
	|			ОстаткиНоменклатуры.Сумма КАК Сумма,
	|			ОстаткиНоменклатуры.СуммаУпр КАК СуммаУпр,
	|			ОстаткиНоменклатуры.СуммаНДС КАК СуммаНДС,
	|			ОстаткиНоменклатуры.СуммаНДСУпр КАК СуммаНДСУпр,
	|			ОстаткиНоменклатуры.МестоХранения КАК МестоХранения
	|		ИЗ
	|			РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ГДЕ
	|			ОстаткиНоменклатуры.Регистратор = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОстаткиНоменклатуры.Номенклатура,
	|			ОстаткиНоменклатуры.МестоХранения,
	|			ОстаткиНоменклатуры.Количество,
	|			ОстаткиНоменклатуры.Сумма,
	|			ОстаткиНоменклатуры.СуммаУпр,
	|			ОстаткиНоменклатуры.СуммаНДС,
	|			ОстаткиНоменклатуры.СуммаНДСУпр,
	|			ОстаткиНоменклатуры.Фирма,
	|			ОстаткиНоменклатуры.КодОперации,
	|			ОстаткиНоменклатуры.Статус) КАК ОстаткиНоменклатуры
	|		ПО ДвиженияТМЦ.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|			И ДвиженияТМЦ.Фирма = ОстаткиНоменклатуры.Фирма
	|			И ДвиженияТМЦ.Статус = ОстаткиНоменклатуры.Статус
	|			И ДвиженияТМЦ.КодОперации = ОстаткиНоменклатуры.КодОперации
	|			И ДвиженияТМЦ.Количество = ОстаткиНоменклатуры.Количество
	|			И ДвиженияТМЦ.Сумма = ОстаткиНоменклатуры.Сумма
	|			И ДвиженияТМЦ.СуммаУпр = ОстаткиНоменклатуры.СуммаУпр
	|			И ДвиженияТМЦ.СуммаНДС = ОстаткиНоменклатуры.СуммаНДС
	|			И ДвиженияТМЦ.СуммаНДСУпр = ОстаткиНоменклатуры.СуммаНДСУпр
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаСреза, ) КАК УчетнаяПолитикаФирмы
	|		ПО ДвиженияТМЦ.Фирма = УчетнаяПолитикаФирмы.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаСреза, ) КАК УчетнаяПолитикаКомитента
	|		ПО ДвиженияТМЦ.Комитент = УчетнаяПолитикаКомитента.Организация
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|	И ДвиженияТМЦ.Номенклатура.ВидТовара <> ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТДанные.Себестоимость) КАК Себестоимость,
	|	СУММА(ВТДанные.Количество) КАК Количество,
	|	СУММА(ВТДанные.Сумма) КАК Сумма,
	|	СУММА(ВТДанные.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТДанные.СтавкаНДС, 0) = 0
	|					ТОГДА 0
	|				ИНАЧЕ ВТДанные.Сумма * ВТДанные.СтавкаНДС / (100 + ВТДанные.СтавкаНДС)
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТДанные.СтавкаНДС, 0) = 0
	|					ТОГДА 0
	|				ИНАЧЕ ВТДанные.СуммаУпр * ВТДанные.СтавкаНДС / (100 + ВТДанные.СтавкаНДС)
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаНДСУпр,
	|	ВТДанные.Комитент,
	|	ВТДанные.Статус,
	|	СУММА(ВТДанные.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТДанные.СтавкаНДС, 0) = 0
	|					ТОГДА 0
	|				ИНАЧЕ ВТДанные.СуммаПродажи * ВТДанные.СтавкаНДС / (100 + ВТДанные.СтавкаНДС)
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаНДСПродажи,
	|	ВТДанные.ВидНоменклатуры,
	|	ВТДанные.КомитентГуид,
	|	ВТДанные.СтавкаНДС,
	|	ВТДанные.Склад
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанные.Статус,
	|	ВТДанные.ВидНоменклатуры,
	|	ВТДанные.КомитентГуид,
	|	ВТДанные.Склад,
	|	ВТДанные.Комитент,
	|	ВТДанные.СтавкаНДС";
	//БредовЮГ 2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44}
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();	
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ZОтчет_ОстаткиНоменклатуры");
	Пока Выборка.Следующий() Цикл
		ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
		ПакетОстаткиНоменклатуры.Номенклатура       = Выборка.ВидНоменклатуры;
		ПакетОстаткиНоменклатуры.Статус             = Строка(Выборка.Статус);
		ПакетОстаткиНоменклатуры.Комитент           = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент));
		ПакетОстаткиНоменклатуры.КомитентТип           = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
		ПакетОстаткиНоменклатуры.Количество            = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
		ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
		ПакетОстаткиНоменклатуры.СуммаПродажи          = Выборка.СуммаПродажи;
		ПакетОстаткиНоменклатуры.СтавкаНДС             = Выборка.СтавкаНДС;
		ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = Выборка.СуммаНДСПродажи;
		Если ЗначениеЗаполнено(Выборка.Склад) ТОгда
			ПакетОстаткиНоменклатуры.Склад         = Строка(Выборка.Склад.Код);
		КонецЕсли;	
		Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
	КонецЦикла;
	
	//************************************************
	Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры;
	//{БредовЮГ  2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44  	
	|УНИЧТОЖИТЬ ВТДанные";
	//БредовЮГ  2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44  }
	
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	ТипКарты = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ZОтчет_Карты");
	
	//{Ситек ДойниковПВ 2015-10-29
	//Добавлена трансляция суммы номиналов в rs-fin
	
	Для Каждого Строка Из Объект.Карты Цикл
		ПакетКарты 					= ФабрикаXDTO.Создать(ТипКарты);
		ПакетКарты.ТипКарты 		= Строка(Строка.ТипКарты.УникальныйИдентификатор());
		ПакетКарты.Сумма 			= Строка.Сумма;
		ПакетКарты.СуммаНоминалов 	= Строка.СуммаНоминалов;
		Пакет.Карты.Добавить(ПакетКарты);
	КонецЦикла;
	
	//}Ситек ДойниковПВ 2015-10-29
	
	ТипВыручка = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ZОтчет_Выручка");
	Для Каждого Строка Из Объект.Выручка Цикл
		ПакетВыручка = ФабрикаXDTO.Создать(ТипВыручка);
		ПакетВыручка.ККМ   = Строка(Строка.ПОС.УникальныйИдентификатор());
		ПакетВыручка.Смена = Строка.Смена;
		ПакетВыручка.Сумма = Строка.Сумма;
		ПакетВыручка.СуммаНал = Строка.СуммаНал;
		ПакетВыручка.СвободнаяСумма = Строка.СвободнаяСумма;
		Пакет.Выручка.Добавить(ПакетВыручка);
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ZОтчет","fin","RS_ZОтчет");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьРасходныйКассовыйОрдер(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_РасходныйКассовыйОрдер");
	
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Касса = Строка(Объект.Касса.УникальныйИдентификатор());
	Пакет.Основание = Объект.Основание;
	Пакет.ПоДокументу = Объект.ПоДокументу;
	Пакет.Приложение = Объект.Приложение;
	Пакет.Выдать = Объект.Выдать;
	Пакет.Сумма = Объект.Сумма;
	Пакет.СтавкаНДС = Объект.СтавкаНДС.Ставка;
	Пакет.СуммаНДС = Объект.СуммаНДС;
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.СтатьяДвиженияДенежныхСредств = Строка(Объект.СтатьяДвиженияДенежныхСредств.УникальныйИдентификатор());
	Пакет.КлассификаторДДС = Объект.КлассификаторДДС.Наименование;
	Пакет.КоррСчет = Объект.СтатьяДвиженияДенежныхСредств.СчетУчета;
	Если ЗначениеЗаполнено(Объект.Аналитика) Тогда
		Если Объект.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС.ПеремещениеКассаБанк 
			ИЛИ Объект.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС.ПеремещениеБанкКасса Тогда
			Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
		Иначе
			Пакет.Аналитика = Строка(Объект.Аналитика.Код);
		КонецЕсли;
		Пакет.ТипАналитики = ОпределитьТипКонтрагента(Объект.Аналитика);
	КонецЕсли;
	
	Если Пакет.ТипАналитики = "Контрагенты" Тогда
		Если Объект.Аналитика.Поставщик Тогда
			Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() Тогда
				Пакет.Аналитика = Строка(Объект.Аналитика.Родитель.Код);
			Иначе
				Пакет.Аналитика = Строка(Объект.Аналитика.Код);
			КонецЕсли;
		Иначе
			Пакет.Аналитика = Строка(Объект.Аналитика.Код);
		КонецЕсли;
	//BIT_Izhevsk ALProzorov 30/07/2015 -->>
	ИначеЕсли Пакет.ТипАналитики = "ФизическиеЛица" Тогда
		Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
	//BIT_Izhevsk ALProzorov 30/07/2015 <<--
	ИначеЕсли Пакет.ТипАналитики = "ПодразделенияПоставщиков" ТОгда
		Пакет.Аналитика = Строка(Объект.Аналитика.Код);
	ИначеЕсли Пакет.ТипАналитики = "ККМ" Тогда	
		Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
	ИначеЕсли Пакет.ТипАналитики = "КассыФирмы" Тогда	
		Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
	ИначеЕсли Пакет.ТипАналитики = "БанковскиеСчета" Тогда	
		Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
	ИначеЕсли ЗначениеЗаполнено(Объект.Аналитика) и Объект.Аналитика.Метаданные().ДлинаКода>0 Тогда
		Пакет.Аналитика = Строка(Объект.Аналитика.Код);
	КонецЕсли;
	
	Пакет.ДокументОснование    = ?(НЕ ЗначениеЗаполнено(Объект.ДокОснование),"",Строка(Объект.ДокОснование.УникальныйИдентификатор()));
	Пакет.ДокументОснованиеТип = ?(НЕ ЗначениеЗаполнено(Объект.ДокОснование),"",Объект.ДокОснование.Метаданные().Имя);
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.Курс = Объект.Курс;
	
	Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Иначе
		Пакет.ТипДоговора = "КупляПродажа";
	КонецЕсли;	
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_РасходныйКассовыйОрдер","fin","RS_РасходныйКассовыйОрдер");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьПриходныйКассовыйОрдер(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_ПриходныйКассовыйОрдер");
	
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Касса = Строка(Объект.Касса.УникальныйИдентификатор());
	Пакет.Основание = Объект.Основание;
	Пакет.Приложение = Объект.Приложение;
	Пакет.ПринятоОт = Объект.ПринятоОт;
	Пакет.Сумма = Объект.Сумма;
	Пакет.СтавкаНДС = Объект.СтавкаНДС.Ставка;
	Пакет.СуммаНДС = Объект.СуммаНДС;
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.СтатьяДвиженияДенежныхСредств = Строка(Объект.СтатьяДвиженияДенежныхСредств.УникальныйИдентификатор());
	Пакет.КлассификаторДДС = Объект.КлассификаторДДС.Наименование;
	Пакет.КоррСчет = Объект.СтатьяДвиженияДенежныхСредств.СчетУчета;
	Если ЗначениеЗаполнено(Объект.Аналитика) Тогда
		Если Объект.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС.ПеремещениеКассаБанк 
			ИЛИ Объект.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС.ПеремещениеБанкКасса Тогда
			Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
		Иначе
			Пакет.Аналитика = Строка(Объект.Аналитика.Код);
		КонецЕсли;
		Пакет.ТипАналитики = ОпределитьТипКонтрагента(Объект.Аналитика);
	КонецЕсли;
	
	Если Пакет.ТипАналитики = "Контрагенты" Тогда
		Если Объект.Аналитика.Поставщик Тогда
			Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() Тогда
				Пакет.Аналитика = Строка(Объект.Аналитика.Родитель.Код);
			Иначе
				Пакет.Аналитика = Строка(Объект.Аналитика.Код);
			КонецЕсли;
		Иначе
			Пакет.Аналитика = Строка(Объект.Аналитика.Код);
		КонецЕсли;
	//BIT_Izhevsk ALProzorov 30/07/2015 -->>
	ИначеЕсли Пакет.ТипАналитики = "ФизическиеЛица" Тогда
		Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
	//BIT_Izhevsk ALProzorov 30/07/2015 <<--
	ИначеЕсли Пакет.ТипАналитики = "ПодразделенияПоставщиков" ТОгда
		Пакет.Аналитика = Строка(Объект.Аналитика.Код);
	ИначеЕсли Пакет.ТипАналитики = "ККМ" Тогда	
		Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
	ИначеЕсли Пакет.ТипАналитики = "КассыФирмы" Тогда	
		Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
	КонецЕсли;
	
	Пакет.ДокументОснование    = ?(НЕ ЗначениеЗаполнено(Объект.ДокументОснование),"",Строка(Объект.ДокументОснование.УникальныйИдентификатор()));
	Пакет.ДокументОснованиеТип = ?(НЕ ЗначениеЗаполнено(Объект.ДокументОснование),"",Объект.ДокументОснование.Метаданные().Имя);
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.Курс = Объект.Курс;
	
	Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Иначе
		Пакет.ТипДоговора = "КупляПродажа";
	КонецЕсли;	
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ПриходныйКассовыйОрдер","fin","RS_ПриходныйКассовыйОрдер");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьПриходнуюНакладную(Объект,Прокси,Ошибка)
	
	//Если НЕ Объект.ОбработанЦВД Тогда
	//	Возврат Истина;
	//КонецЕсли;	
	Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.Комиссия Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.Состав.Итог("Количество") = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	чВидОперации = Документы.ПриходнаяНакладная.ПолучитьВидОперацииПриходнаяНакладная(Объект); 
	Если чВидОперации = 4 Тогда
		ОтправитьВозвратнуюОтПокупателя(Объект,Прокси,Ошибка);
		Возврат ИСТИНА;
	КонецЕсли;
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_ПриходнаяНакладная");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.БонуснаяПоставка = Объект.БонуснаяПоставка;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.Грузоотправитель = ?(НЕ ЗначениеЗаполнено(Объект.Грузоотправитель),"",Объект.Грузоотправитель.Родитель.Код);
	//BiT ALProzorov 08/09/2015 -->>
	Пакет.Комментарий = Объект.Комментарий;
	//BiT ALProzorov 08/09/2015 <<--
	
	КонтрагентТип = ОпределитьТипКонтрагента(Объект.Контрагент);
	Если КонтрагентТип = "Контрагенты" Тогда
		Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
		Если Объект.Контрагент.Поставщик Тогда
			Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() Тогда
				Пакет.Контрагент = Объект.Контрагент.Родитель.Код;
				Пакет.Грузополучатель = ?(НЕ ЗначениеЗаполнено(Объект.Грузополучатель),"",Объект.Грузополучатель.Родитель.Код)
			Иначе
				Пакет.Контрагент = Объект.Контрагент.Код;
				Пакет.Грузополучатель = ?(НЕ ЗначениеЗаполнено(Объект.Грузополучатель),"",Объект.Грузополучатель.Код)
			КонецЕсли;
		Иначе
			Пакет.Контрагент = Объект.Контрагент.Код;
			Пакет.Грузополучатель = ?(НЕ ЗначениеЗаполнено(Объект.Грузополучатель),"",Объект.Грузополучатель.Код)
		КонецЕсли;
		Пакет.КонтрагентТип = "Контрагенты";
	ИначеЕсли КонтрагентТип = "ПодразделенияПоставщиков" Тогда
		Пакет.Контрагент = Объект.Контрагент.Код;
		Пакет.КонтрагентТип = "ПодразделенияПоставщиков";
		Пакет.Грузополучатель = ?(НЕ ЗначениеЗаполнено(Объект.Грузополучатель),"",Объект.Грузополучатель.Код);
		Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	ИначеЕсли КонтрагентТип = "СтруктурныеЕдиницы" Тогда 
		Если ЭтоПеремещениеМеждуСтруктурнымиЕдиницами(Объект) Тогда
			Пакет.Контрагент = Строка(Объект.Контрагент.Код);
			Пакет.КонтрагентТип = "СтруктурныеЕдиницы";
		Иначе
			Пакет.Контрагент = Строка(Объект.Контрагент.Организация.УникальныйИдентификатор());
			Пакет.Грузополучатель = Строка(Объект.Контрагент.Организация.УникальныйИдентификатор());
			Пакет.КонтрагентТип = "Организации";
		КонецЕсли;
	ИначеЕсли КонтрагентТип = "Организации" Тогда
		Если ЭтоПеремещениеМеждуСтруктурнымиЕдиницами(Объект) Тогда
			Пакет.Контрагент = Строка(Объект.Грузоотправитель.Код);
			Пакет.КонтрагентТип = "СтруктурныеЕдиницы";
		Иначе
			Пакет.Контрагент = Строка(Объект.Контрагент.УникальныйИдентификатор());
			Пакет.Грузополучатель = Строка(Объект.Контрагент.УникальныйИдентификатор());
			Пакет.КонтрагентТип = "Организации";
		КонецЕсли;
	КонецЕсли;
	//Котлячкова ++ Выгрузка РСФ
	СчетФактура = ПолучитьПодчиненнуюРегистрациюСчетФактуру(Объект.Ссылка);
	Если НЕ СчетФактура.Пустая() Тогда
		Пакет.ДатаСФ = СчетФактура.ДатаВходящегоДокумента;
		Пакет.НомерСФ = СчетФактура.НомерВходящегоДокумента;
	Иначе
		Пакет.ДатаСФ = Объект.ДатаСФ;
		Пакет.НомерСФ = Объект.НомерСФ;
	КонецЕсли;
	//Котлячкова -- Выгрузка РСФ
	Пакет.ДатаДокумента = Объект.ДатаДокумента;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.НомерДокумента = Объект.НомерДокумента;
	
	//BIT_Izhevsk ALProzorov 30/07/2015 -->>
	//Пакет.Приемщик = Объект.Приемщик.Код;
	Пакет.Приемщик = Строка(Объект.Приемщик.УникальныйИдентификатор());
	//BIT_Izhevsk ALProzorov 30/07/2015 <<--
	
	Пакет.Склад = Объект.Склад.Код;
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(Объект.Ссылка);
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Пакет.ДокОснование = Пакет.Ref;
	КонецЕсли;	
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений; 
	ПечФорма = Документы.ПриходнаяНакладная.ПечатьТОРГ12(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "Документ.ПриходнаяНакладная.Состав";
	НазваниеУсловия = "Ссылка";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Ложь);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ПриходнаяНакладнаяСостав.СтавкаНДС.Ставка, 0) КАК СтавкаНДС,
	|	ПриходнаяНакладнаяСостав.Ссылка,
	|	СУММА(ПриходнаяНакладнаяСостав.Количество * ПриходнаяНакладнаяСостав.Коэффициент) КАК Количество,
	|	СУММА(ЕСТЬNULL(ОстаткиНоменклатуры.Себестоимость, 0)) КАК Себестоимость,
	|	СУММА(ПриходнаяНакладнаяСостав.Сумма) КАК Сумма,
	|	СУММА(ПриходнаяНакладнаяСостав.Цена) КАК Цена,
	|	СУММА(ПриходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО ПриходнаяНакладнаяСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО ПриходнаяНакладнаяСостав.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	ПриходнаяНакладнаяСостав.Ссылка = &Ссылка
	|	И ПриходнаяНакладнаяСостав.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходнаяНакладнаяСостав.Ссылка,
	|	ПриходнаяНакладнаяСостав.Коэффициент,
	|	ПриходнаяНакладнаяСостав.СтавкаНДС.Ставка,
	|	ТабВидовНоменклатуры.ВидНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ПриходнаяНакладная_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура  = Выборка.ВидНоменклатуры;
		ПакетСостав.Количество    = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетСостав.Сумма         = Выборка.Сумма;
		ПакетСостав.СуммаНДС      = Выборка.СуммаНДС;
		ПакетСостав.СтавкаНДС     = Выборка.СтавкаНДС;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	//регистр остатки номенклатуры
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Себестоимость,
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО ДвиженияТМЦ.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|	И ДвиженияТМЦ.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ТабВидовНоменклатуры.ВидНоменклатуры,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ДвиженияТМЦ.Комитент";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ПриходнаяНакладная_ОстаткиНоменклатуры");
	Пока Выборка.Следующий() Цикл
		ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
		ПакетОстаткиНоменклатуры.Номенклатура          = Выборка.ВидНоменклатуры;
		ПакетОстаткиНоменклатуры.Статус                = Строка(Выборка.Статус);
		ПакетОстаткиНоменклатуры.Комитент              = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент)); 
		ПакетОстаткиНоменклатуры.КомитентТип              = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
		ПакетОстаткиНоменклатуры.Количество            = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
		ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
		Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
	КонецЦикла;
	Пакет.ДатаПредоставленияДокумента = Объект.ДатаПредоставленияДокумента;
	//************************************************
	Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры";
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ПриходнаяНакладная","fin","RS_ПриходнаяНакладная");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьРасходнуюНакладную(Объект,Прокси,Ошибка)
	Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.Комиссия Тогда
		Возврат Истина;
	КонецЕсли;
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_РасходнаяНакладная");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.ГрузоотправительТип = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Метаданные().Имя);
	Пакет.Грузоотправитель = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Код);
	Пакет.Склад = Объект.Склад.Код;
	Пакет.Возврат = Объект.Возврат;
	//BiT ALProzorov 08/09/2015 -->>
	Пакет.Комментарий = Объект.Комментарий;
	//BiT ALProzorov 08/09/2015 <<--
	
	Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
		Пакет.ДокОснование = Строка(Объект.ДокОснование.УникальныйИдентификатор());
		Пакет.ДокОснованиеТип = Объект.ДокОснование.Метаданные().Имя;
	КонецЕсли;
	
	Пакет.АдресДоставки = Объект.АдресДоставки;
	Пакет.Менеджер = Объект.Менеджер.Код;
	Пакет.Экспедитор = Объект.Экспедитор.Код;
	
	ОписаниеОрганизации = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Объект.Фирма, Объект.Дата);
	Пакет.АдресГрузоотправителя = ОписаниеОрганизации.ЮридическийАдрес;
	
	КонтрагентТип = ОпределитьТипКонтрагента(Объект.Контрагент);
	Если КонтрагентТип = "Контрагенты" Тогда
		Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
		Если Объект.Контрагент.Поставщик Тогда
			Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() Тогда
				Пакет.Контрагент = Объект.Контрагент.Родитель.Код;
				Пакет.Грузоотправитель= ?(НЕ ЗначениеЗаполнено(Объект.Грузоотправитель),"",Объект.Грузоотправитель.Родитель.Код)
			Иначе
				Пакет.Контрагент = Объект.Контрагент.Код;
				Пакет.Грузоотправитель = ?(НЕ ЗначениеЗаполнено(Объект.Грузоотправитель),"",Объект.Грузоотправитель.Код)
			КонецЕсли;
		Иначе
			Пакет.Контрагент = Объект.Контрагент.Код;
			Пакет.Грузоотправитель = ?(НЕ ЗначениеЗаполнено(Объект.Грузоотправитель),"",Объект.Грузоотправитель.Код)
		КонецЕсли;
		Пакет.КонтрагентТип = "Контрагенты";
	ИначеЕсли КонтрагентТип = "ПодразделенияПоставщиков" Тогда
		Пакет.Контрагент = Объект.Контрагент.Код;
		Пакет.КонтрагентТип = "ПодразделенияПоставщиков";
		Пакет.Грузоотправитель = ?(НЕ ЗначениеЗаполнено(Объект.Грузоотправитель),"",Объект.Грузоотправитель.Код);
		Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	ИначеЕсли КонтрагентТип = "СтруктурныеЕдиницы" Тогда 
		Если ЭтоПеремещениеМеждуСтруктурнымиЕдиницами(Объект) Тогда
			Пакет.Контрагент = Строка(Объект.Контрагент.Код);
			Пакет.КонтрагентТип = "СтруктурныеЕдиницы";
		Иначе
			Пакет.Контрагент = Строка(Объект.Контрагент.Организация.УникальныйИдентификатор());
			Пакет.Грузоотправитель = Строка(Объект.Контрагент.Организация.УникальныйИдентификатор());
			Пакет.КонтрагентТип = "Организации";
		КонецЕсли;
	ИначеЕсли КонтрагентТип = "Организации" Тогда
		Если ЭтоПеремещениеМеждуСтруктурнымиЕдиницами(Объект) Тогда
			Пакет.Контрагент = Строка(Объект.Грузоотправитель.Код);
			Пакет.КонтрагентТип = "СтруктурныеЕдиницы";
		Иначе
			Пакет.Контрагент = Строка(Объект.Контрагент.УникальныйИдентификатор());
			Пакет.Грузоотправитель = Строка(Объект.Контрагент.УникальныйИдентификатор());
			Пакет.КонтрагентТип = "Организации";
		КонецЕсли;
	КонецЕсли;
	
	
	Пакет.ТипДоговора = ?(НЕ ЗначениеЗаполнено(Объект.ТипДоговора),"",Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя);
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ПечФорма = Документы.РасходнаяНакладная.ПечатьТОРГ13(МассивОбъектов,ОбъектыПечати);
	Иначе	
		ПечФорма = Документы.РасходнаяНакладная.ПечатьТОРГ12(МассивОбъектов,ОбъектыПечати);
	КонецЕсли;	
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "Документ.РасходнаяНакладная.Состав";
	НазваниеУсловия = "Ссылка";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Ложь);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(РасходнаяНакладнаяСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	РасходнаяНакладнаяСостав.Ссылка,
	|	СУММА(ЕСТЬNULL(ОстаткиНоменклатуры.Себестоимость, 0)) КАК Себестоимость,
	|	СУММА(РасходнаяНакладнаяСостав.Количество * РасходнаяНакладнаяСостав.Коэффициент) КАК Количество,
	|	СУММА(РасходнаяНакладнаяСостав.Сумма) КАК Сумма,
	|	СУММА(РасходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО РасходнаяНакладнаяСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО РасходнаяНакладнаяСостав.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	РасходнаяНакладнаяСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяСостав.Ссылка,
	|	РасходнаяНакладнаяСостав.Коэффициент,
	|	РасходнаяНакладнаяСостав.СтавкаНДС.Ставка,
	|	ТабВидовНоменклатуры.ВидНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_РасходнаяНакладная_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС     = Выборка.СтавкаНДС;
		ПакетСостав.Количество    = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетСостав.Сумма         = Выборка.Сумма;
		ПакетСостав.СуммаНДС      = Выборка.СуммаНДС;
		ПакетСостав.Номенклатура  = Выборка.ВидНоменклатуры;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	//************************************************
	Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры";
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "РегистрНакопления.ДвиженияТМЦ";
	НазваниеУсловия = "Регистратор";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//регистр остатки номенклатуры
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Себестоимость,
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0) КАК СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО ДвиженияТМЦ.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ТабВидовНоменклатуры.ВидНоменклатуры,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ДвиженияТМЦ.Комитент,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_РасходнаяНакладная_ОстаткиНоменклатуры");
	Пока Выборка.Следующий() Цикл
		ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
		ПакетОстаткиНоменклатуры.Номенклатура          = Выборка.ВидНоменклатуры;
		ПакетОстаткиНоменклатуры.Статус                = Строка(Выборка.Статус);
		ПакетОстаткиНоменклатуры.Комитент              = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент));
		ПакетОстаткиНоменклатуры.КомитентТип              = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
		ПакетОстаткиНоменклатуры.Количество            = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
		ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
		ПакетОстаткиНоменклатуры.СуммаПродажи          = Выборка.СуммаПродажи;
		ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = Выборка.СуммаНДСПродажи;
		ПакетОстаткиНоменклатуры.СтавкаНДС             = Выборка.СтавкаНДС;
		Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
	КонецЦикла;
	
	//************************************************
	Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры";
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_РасходнаяНакладная","fin","RS_РасходнаяНакладная");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьГотовуюПродукцию(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_ОтчетПроизводстваЗаСмену");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Склад = Объект.Склад.Код;
	Пакет.СкладПроизводства = Объект.СкладПроизводства.Код;
	//BiT ALProzorov 08/09/2015 -->>
	Пакет.Комментарий = Объект.Комментарий;
	//BiT ALProzorov 08/09/2015 <<--
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.ГотоваяПродукция.ПечатьОП23(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма1 = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.ГотоваяПродукция.ПечатьМ11(МассивОбъектов,ОбъектыПечати,Истина);
	Пакет.ПечатнаяФорма2 = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ОтчетПроизводстваЗаСмену_Состав");
	ТипПродукция = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_ОтчетПроизводстваЗаСмену_Продукция");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "РегистрНакопления.ОстаткиНоменклатуры";
	НазваниеУсловия = "Регистратор";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ОстаткиНоменклатуры.Регистратор КАК Ссылка,
	|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(ОстаткиНоменклатуры.Количество) КАК Количество,
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Сумма,
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ОстаткиНоменклатуры.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ОстаткиНоменклатуры.СуммаНДСУпр) КАК СуммаНДСУпр
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	|		ПО ОстаткиНоменклатуры.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|	И ОстаткиНоменклатуры.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Регистратор,
	|	ТабВидовНоменклатуры.ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Расход);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();	
	
	Если Объект.ВидПроизводства = Перечисления.ВидыПроизводства.Приготовление Тогда
		Пока Выборка.Следующий() Цикл
			ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
			ПакетСостав.Номенклатура        = Выборка.ВидНоменклатуры;
			ПакетСостав.Количество          = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
			ПакетСостав.Себестоимость       = Выборка.Сумма;
			ПакетСостав.СебестоимостьУпр    = Выборка.СуммаУпр;
			ПакетСостав.СебестоимостьНДС    = Выборка.СуммаНДС;
			ПакетСостав.СебестоимостьНДСУпр = Выборка.СуммаНДСУпр;
			Пакет.Состав.Добавить(ПакетСостав);
		КонецЦикла;
	Иначе
		Пока Выборка.Следующий() Цикл
			ПакетПродукция = ФабрикаXDTO.Создать(ТипПродукция);
			ПакетПродукция.Номенклатура = Выборка.ВидНоменклатуры;
			ПакетПродукция.Количество   = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
			ПакетПродукция.Сумма        = Выборка.Сумма;
			ПакетПродукция.СуммаУпр     = Выборка.СуммаУпр;
			ПакетПродукция.СуммаНДС     = Выборка.СуммаНДС;
			ПакетПродукция.СуммаНДСУпр  = Выборка.СуммаНДСУпр;
			Пакет.Продукция.Добавить(ПакетПродукция);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Приход);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Объект.ВидПроизводства = Перечисления.ВидыПроизводства.Приготовление Тогда
		Пока Выборка.Следующий() Цикл
			ПакетПродукция = ФабрикаXDTO.Создать(ТипПродукция);
			ПакетПродукция.Номенклатура = Выборка.ВидНоменклатуры;
			ПакетПродукция.Количество   = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
			ПакетПродукция.Сумма        = Выборка.Сумма;
			ПакетПродукция.СуммаУпр     = Выборка.СуммаУпр;
			ПакетПродукция.СуммаНДС     = Выборка.СуммаНДС;
			ПакетПродукция.СуммаНДСУпр  = Выборка.СуммаНДСУпр;
			Пакет.Продукция.Добавить(ПакетПродукция);
		КонецЦикла;
	Иначе
		Пока Выборка.Следующий() Цикл
			ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
			ПакетСостав.Номенклатура        = Выборка.ВидНоменклатуры;
			ПакетСостав.Количество          = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
			ПакетСостав.Себестоимость       = Выборка.Сумма;
			ПакетСостав.СебестоимостьУпр    = Выборка.СуммаУпр;
			ПакетСостав.СебестоимостьНДС    = Выборка.СуммаНДС;
			ПакетСостав.СебестоимостьНДСУпр = Выборка.СуммаНДСУпр;
			Пакет.Состав.Добавить(ПакетСостав);
		КонецЦикла;
	КонецЕсли;
	
	//************************************************
	Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры";
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ОтчетПроизводстваЗаСмену","fin","RS_ОтчетПроизводстваЗаСмену");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьКоррекциюЗапасов(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_КоррекцияЗапасов");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Склад = Объект.Склад.Код;
	Пакет.ВиновноеЛицо = Строка(Объект.ВиновноеЛицо.УникальныйИдентификатор());
	Пакет.ВидСписания = Объект.ВидСписания.Код;
	Пакет.Оприходование = Объект.Оприходование;
	Пакет.Основание = Объект.Основание;
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(Объект.Ссылка);
	//BiT ALProzorov 08/09/2015 -->>
	Пакет.Комментарий = Объект.Комментарий;
	//BiT ALProzorov 08/09/2015 <<--
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.КоррекцияЗапасов.ПечатьТОРГ16(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НазваниеТаблицы = "Документ.КоррекцияЗапасов.Состав";
	НазваниеУсловия = "Ссылка";
	Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатуры(НазваниеТаблицы,НазваниеУсловия);
	
	//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
	//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
	Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
	Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
	// А вот услуги - всегда детально
	Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
	///Зернятко А.В.@ - конец блока 
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
	Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	//{БредовЮГ  2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44 
	//Запрос.Текст = "ВЫБРАТЬ
	//|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	//|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Сумма,
	//|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК СуммаУпр,
	//|	СУММА(ОстаткиНоменклатуры.СуммаНДС) КАК СуммаНДС,
	//|	СУММА(ОстаткиНоменклатуры.СуммаНДСУпр) КАК СуммаНДСУпр,
	//|	ОстаткиНоменклатуры.Номенклатура
	//|ПОМЕСТИТЬ ОстаткиНоменклатуры
	//|ИЗ
	//|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	//|ГДЕ
	//|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ОстаткиНоменклатуры.Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	//|	КоррекцияЗапасовСостав.Ссылка,
	//|	СУММА(КоррекцияЗапасовСостав.Количество * КоррекцияЗапасовСостав.Коэффициент) КАК Количество,
	//|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Себестоимость),0) КАК Себестоимость,
	//|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Сумма),0) КАК Сумма,
	//|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СуммаУпр),0) КАК СуммаУпр,
	//|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СуммаНДС),0) КАК СуммаНДС,
	//|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СуммаНДСУпр),0) КАК СуммаНДСУпр,
	//|	ЕСТЬNULL(КоррекцияЗапасовСостав.СтавкаНДС.Ставка, 0) КАК СтавкаНДС
	//|ИЗ
	//|	Документ.КоррекцияЗапасов.Состав КАК КоррекцияЗапасовСостав
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	//|		ПО КоррекцияЗапасовСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	//|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	//|		ПО КоррекцияЗапасовСостав.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	//|ГДЕ
	//|	КоррекцияЗапасовСостав.Ссылка = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	КоррекцияЗапасовСостав.Ссылка,
	//|	КоррекцияЗапасовСостав.Коэффициент,
	//|	ТабВидовНоменклатуры.ВидНоменклатуры,
	//|	КоррекцияЗапасовСостав.СтавкаНДС.Ставка";
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА ДвиженияТМЦ.Статус = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.КупляПродажа)
	               |				ТОГДА ВЫБОР
				   //BIT_Izhevsk ALProzorov 06/08/2015 -->>
				   //|						КОГДА ЕСТЬNULL(УчетнаяПолитикаФирмы.Izh_ПлательщикНДС, ИСТИНА)
				   |						КОГДА ЕСТЬNULL(УчетнаяПолитикаФирмы.Izh_ПлательщикНДС, ЛОЖЬ)
				   //BIT_Izhevsk ALProzorov 06/08/2015 <<--
	               |							ТОГДА ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ДвиженияТМЦ.Статус = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Комиссия)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ТИПЗНАЧЕНИЯ(ДвиженияТМЦ.Комитент) = ТИП(Справочник.Организации)
	               |								И ДвиженияТМЦ.Комитент <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ЕСТЬNULL(УчетнаяПолитикаКомитента.Izh_ПлательщикНДС, ИСТИНА)
	               |										ТОГДА ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |						КОГДА ТИПЗНАЧЕНИЯ(ДвиженияТМЦ.Комитент) = ТИП(Справочник.Контрагенты)
	               |								И ДвиженияТМЦ.Комитент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВЫРАЗИТЬ(ДвиженияТМЦ.Комитент КАК Справочник.Контрагенты).НеПлательщикНДС
	               |										ТОГДА 0
	               |									ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |								КОНЕЦ
	               |						ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |					КОНЕЦ
	               |			ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СтавкаНДС,
	               |	ДвиженияТМЦ.Регистратор КАК Ссылка,
	               |	ДвиженияТМЦ.Сумма КАК Себестоимость,
	               |	ДвиженияТМЦ.Количество КАК Количество,
	               |	ДвиженияТМЦ.СуммаПродажи КАК Сумма,
	               |	ДвиженияТМЦ.СуммаУпр КАК СуммаУпр,
	               |	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	ВЫРАЗИТЬ(ДвиженияТМЦ.Регистратор КАК Документ.Zотчет).СтруктурнаяЕдиница.СкладТорговогоЗала КАК Склад
	               |ПОМЕСТИТЬ ВТДанные
	               |ИЗ
	               |	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаСреза, ) КАК УчетнаяПолитикаФирмы
	               |		ПО ДвиженияТМЦ.Фирма = УчетнаяПолитикаФирмы.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаСреза, ) КАК УчетнаяПолитикаКомитента
	               |		ПО ДвиженияТМЦ.Комитент = УчетнаяПолитикаКомитента.Организация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	               |		ПО ДвиженияТМЦ.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	               |ГДЕ
	               |	ДвиженияТМЦ.Регистратор = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанные.ВидНоменклатуры,
	               |	ВТДанные.Ссылка,
	               |	СУММА(ВТДанные.Количество) КАК Количество,
	               |	СУММА(ВТДанные.Себестоимость) КАК Себестоимость,
	               |	СУММА(ВТДанные.Сумма) КАК Сумма,
	               |	СУММА(ВТДанные.СуммаУпр) КАК СуммаУпр,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА ЕСТЬNULL(ВТДанные.СтавкаНДС, 0) = 0
	               |					ТОГДА 0
	               |				ИНАЧЕ ВТДанные.Сумма * ВТДанные.СтавкаНДС / (100 + ВТДанные.СтавкаНДС)
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА ЕСТЬNULL(ВТДанные.СтавкаНДС, 0) = 0
	               |					ТОГДА 0
	               |				ИНАЧЕ ВТДанные.СуммаУпр * ВТДанные.СтавкаНДС / (100 + ВТДанные.СтавкаНДС)
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаНДСУпр,
	               |	ВТДанные.СтавкаНДС
	               |ИЗ
	               |	ВТДанные КАК ВТДанные
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТДанные.Склад,
	               |	ВТДанные.Ссылка,
	               |	ВТДанные.ВидНоменклатуры,
	               |	ВТДанные.СтавкаНДС";
	//БредовЮГ  2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44 } 
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_КоррекцияЗапасов_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура = Выборка.ВидНоменклатуры;
		ПакетСостав.Количество   = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетСостав.Сумма        = Выборка.Сумма;
		ПакетСостав.СуммаУпр     = Выборка.СуммаУпр;
		ПакетСостав.СтавкаНДС    = Выборка.СтавкаНДС;
		ПакетСостав.СуммаНДС     = Выборка.СуммаНДС;
		ПакетСостав.СуммаНДСУпр  = Выборка.СуммаНДСУпр;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	//{БредовЮГ  2015-04-20 Наряд 000146952 от 05.04.2015 15:49:44  
	Запрос.Текст = "УНИЧТОЖИТЬ ВТДанные" ;
	Запрос.Выполнить();
	//БредовЮГ  2015-04-20 Наряд 000146952 от 05.04.2015 15:49:44 Исправление ошибки }
	
	//регистр остатки номенклатуры
	
	//{БредовЮГ  2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44  
	//Запрос.Текст = "ВЫБРАТЬ
	//|	СУММА(ДвиженияТМЦ.Сумма) КАК Себестоимость,
	//|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	//|	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	//|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	//|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	//|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	//|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	//|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	//|	ДвиженияТМЦ.Статус,
	//|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	//|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	//|	ДвиженияТМЦ.Комитент КАК КомитентГуид
	//|ИЗ
	//|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	//|	    ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	//|		ПО ДвиженияТМЦ.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	//|ГДЕ
	//|	ДвиженияТМЦ.Регистратор = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ДвиженияТМЦ.Статус,
	//|	ТабВидовНоменклатуры.ВидНоменклатуры,
	//|	ДвиженияТМЦ.Комитент.Код,
	//|	ДвиженияТМЦ.Комитент";
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА ДвиженияТМЦ.Статус = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.КупляПродажа)
	               |				ТОГДА ВЫБОР
				   //BIT_Izhevsk ALProzorov 06/08/2015 -->>
				   //|						КОГДА ЕСТЬNULL(УчетнаяПолитикаФирмы.Izh_ПлательщикНДС, ИСТИНА)
				   |						КОГДА ЕСТЬNULL(УчетнаяПолитикаФирмы.Izh_ПлательщикНДС, ЛОЖЬ)
				   //BIT_Izhevsk ALProzorov 06/08/2015 <<--
	               |							ТОГДА ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ДвиженияТМЦ.Статус = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Комиссия)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ТИПЗНАЧЕНИЯ(ДвиженияТМЦ.Комитент) = ТИП(Справочник.Организации)
	               |								И ДвиженияТМЦ.Комитент <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ЕСТЬNULL(УчетнаяПолитикаКомитента.Izh_ПлательщикНДС, ИСТИНА)
	               |										ТОГДА ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |						КОГДА ТИПЗНАЧЕНИЯ(ДвиженияТМЦ.Комитент) = ТИП(Справочник.Контрагенты)
	               |								И ДвиженияТМЦ.Комитент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВЫРАЗИТЬ(ДвиженияТМЦ.Комитент КАК Справочник.Контрагенты).НеПлательщикНДС
	               |										ТОГДА 0
	               |									ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |								КОНЕЦ
	               |						ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |					КОНЕЦ
	               |			ИНАЧЕ ЕСТЬNULL(ДвиженияТМЦ.Номенклатура.СтавкаНДС.Ставка, 0)
	               |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СтавкаНДС,
	               |	ДвиженияТМЦ.Сумма КАК Себестоимость,
	               |	ДвиженияТМЦ.Сумма КАК Сумма,
	               |	ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	ДвиженияТМЦ.Количество КАК Количество,
	               |	ДвиженияТМЦ.СуммаУпр КАК СуммаУпр,
	               |	ДвиженияТМЦ.СуммаНДС КАК СуммаНДС,
	               |	ДвиженияТМЦ.СуммаНДСУпр КАК СуммаНДСУпр,
	               |	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	               |	ДвиженияТМЦ.Статус,
	               |	ДвиженияТМЦ.СуммаПродажи КАК СуммаПродажи,
	               |	ДвиженияТМЦ.СуммаНДСПродажи КАК СуммаНДСПродажи,
	               |	ДвиженияТМЦ.Комитент КАК КомитентГуид
	               |ПОМЕСТИТЬ ВТДанные
	               |ИЗ
	               |	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаСреза, ) КАК УчетнаяПолитикаФирмы
	               |		ПО ДвиженияТМЦ.Фирма = УчетнаяПолитикаФирмы.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаСреза, ) КАК УчетнаяПолитикаКомитента
	               |		ПО ДвиженияТМЦ.Комитент = УчетнаяПолитикаКомитента.Организация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
	               |		ПО ДвиженияТМЦ.Номенклатура = ТабВидовНоменклатуры.Номенклатура
	               |ГДЕ
	               |	ДвиженияТМЦ.Регистратор = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВТДанные.Себестоимость) КАК Себестоимость,
	               |	СУММА(ВТДанные.Сумма) КАК Сумма,
	               |	ВТДанные.ВидНоменклатуры,
	               |	СУММА(ВТДанные.Количество) КАК Количество,
	               |	СУММА(ВТДанные.СуммаУпр) КАК СуммаУпр,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА ЕСТЬNULL(ВТДанные.СтавкаНДС, 0) = 0
	               |					ТОГДА 0
	               |				ИНАЧЕ ВТДанные.Сумма * ВТДанные.СтавкаНДС / (100 + ВТДанные.СтавкаНДС)
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА ЕСТЬNULL(ВТДанные.СтавкаНДС, 0) = 0
	               |					ТОГДА 0
	               |				ИНАЧЕ ВТДанные.СуммаУпр * ВТДанные.СтавкаНДС / (100 + ВТДанные.СтавкаНДС)
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаНДСУпр,
	               |	ВТДанные.Комитент,
	               |	ВТДанные.Статус,
	               |	СУММА(ВТДанные.СуммаПродажи) КАК СуммаПродажи,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА ЕСТЬNULL(ВТДанные.СтавкаНДС, 0) = 0
	               |					ТОГДА 0
	               |				ИНАЧЕ ВТДанные.СуммаПродажи * ВТДанные.СтавкаНДС / (100 + ВТДанные.СтавкаНДС)
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаНДСПродажи,
	               |	ВТДанные.КомитентГуид
	               |ИЗ
	               |	ВТДанные КАК ВТДанные
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТДанные.Статус,
	               |	ВТДанные.ВидНоменклатуры,
	               |	ВТДанные.КомитентГуид,
	               |	ВТДанные.Комитент";
	//БредовЮГ  2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44  }
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_КоррекцияЗапасов_ОстаткиНоменклатуры");
	Пока Выборка.Следующий() Цикл
		ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
		ПакетОстаткиНоменклатуры.Номенклатура          = Выборка.ВидНоменклатуры;
		ПакетОстаткиНоменклатуры.Количество            = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
		ПакетОстаткиНоменклатуры.Статус                = Строка(Выборка.Статус);
		ПакетОстаткиНоменклатуры.Комитент              = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент));
		ПакетОстаткиНоменклатуры.КомитентТип              = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
		ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
		ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
		Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
	КонецЦикла;
	
	//************************************************
	Запрос.Текст="
	|УНИЧТОЖИТЬ ТабВидовНоменклатуры ;
	//{БредовЮГ  2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44  	
	|УНИЧТОЖИТЬ ВТДанные";
	//БредовЮГ  2015-04-08 Наряд 000146952 от 05.04.2015 15:49:44  }
	РезультатЗапроса = Запрос.Выполнить();
	//************************************************
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_КоррекцияЗапасов","fin","RS_КоррекцияЗапасов");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИнвентаризацию(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentObject_Инвентаризация");
	Результат = истина;
	
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Основание = Объект.Основание;
	Пакет.ВидКоррекцииСписание = Объект.ВидКоррекцииСписание.Код;
	Пакет.ВидКоррекцииОприходование = Объект.ВидКоррекцииОприходование.Код;
	//BiT ALProzorov 08/09/2015 -->>
	Пакет.Комментарий = Объект.Комментарий;
	//BiT ALProzorov 08/09/2015 <<--
	
	//popn+
	//Пакет.ЧастичнаяИнвентаризация = Объект.ТолькоТаблица;
	Пакет.ЧастичнаяИнвентаризация = Объект.ТипПередачиРезультатов = Перечисления.ТипыПередачиРезультатовИнвентаризации.ИзлишкиНедостачи;
	//popn-
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.Инвентаризация.ПечатьИНВ19(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	ТипДокументы = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_Инвентаризация_Документы");
	
	//получим список фирм
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИнвентаризацияСоставПоФирмам.Фирма,
	|	ИнвентаризацияСоставПоФирмам.Склад
	|ИЗ
	|	Документ.Инвентаризация.СоставПоФирмам КАК ИнвентаризацияСоставПоФирмам
	|ГДЕ
	|	ИнвентаризацияСоставПоФирмам.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияСоставПоФирмам.Фирма,
	|	ИнвентаризацияСоставПоФирмам.Склад");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	ВыборкаФирм = Запрос.Выполнить().Выбрать();
	Пока ВыборкаФирм.Следующий() Цикл
		
		спрФирма = ВыборкаФирм.Фирма;
		спрСклад = ВыборкаФирм.Склад;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		НазваниеТаблицы1 = "РегистрНакопления.ОстаткиНоменклатуры";
		НазваниеТаблицы2 = "РегистрСведений.СведенияПоИнвентаризации";
		
		НазваниеУсловия = "Регистратор";
		Запрос.Текст = ПолучитьТекстЗапросаПоВидамНоменклатурыИнвентаризация(НазваниеТаблицы1, НазваниеТаблицы2, НазваниеУсловия);
		
		//+Зернятко А.В.@06.08.2013 - //RS-119. Обмен с RSF. Выгрузка данных по материалам, таре и услугам
		//Для определения необходимости детальной выгрузки по виду номенклтуры, использую условие заполненности кода нужной группы номенклатуры. Теоретически правильнее было бы ввести ещё одно служебное значение.
		Запрос.УстановитьПараметр("ВыгружатьМатериалыДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)));
		Запрос.УстановитьПараметр("ВыгружатьТаруДетально",ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)));
		// А вот услуги - всегда детально
		Запрос.УстановитьПараметр("ВыгружатьУслугиДетально",Истина);
		///Зернятко А.В.@ - конец блока 
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	СвернутыйЗапрос.ВидДвижения КАК ВидДвижения,
		|	СвернутыйЗапрос.ВидНоменклатуры,
		|	СвернутыйЗапрос.Комитент,
		|	СУММА(СвернутыйЗапрос.Количество) КАК Количество,
		|	СУММА(СвернутыйЗапрос.Себестоимость) КАК Себестоимость,
		|	СУММА(СвернутыйЗапрос.Сумма) КАК Сумма,
		|	СУММА(СвернутыйЗапрос.СуммаУпр) КАК СуммаУпр,
		|	СУММА(СвернутыйЗапрос.СуммаНДС) КАК СуммаНДС,
		|	СУММА(СвернутыйЗапрос.СуммаНДСУпр) КАК СуммаНДСУпр,
		|	СвернутыйЗапрос.Статус,
		|	СвернутыйЗапрос.КомитентГуид,
		|	СвернутыйЗапрос.СтавкаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА СведенияПоИнвентаризации.Количество = 0
		|				ТОГДА ВЫБОР
		|						КОГДА СведенияПоИнвентаризации.Сумма > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризации.Сумма < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризации.СуммаУпр > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризации.СуммаУпр < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризации.СуммаНДС > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризации.СуммаНДС < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризации.СуммаНДСУпр > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризации.СуммаНДСУпр < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					КОНЕЦ
		|			КОГДА СведенияПоИнвентаризации.Количество > 0
		|				ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		КОНЕЦ КАК ВидДвижения,
		|		ТабВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
		|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Комитент,
		|		СУММА(СведенияПоИнвентаризации.Количество - СведенияПоИнвентаризации.КоличествоПересорт) КАК Количество,
		|		СУММА(СведенияПоИнвентаризации.Сумма - СведенияПоИнвентаризации.СуммаПересорт) КАК Себестоимость,
		|		СУММА(СведенияПоИнвентаризации.Сумма - СведенияПоИнвентаризации.СуммаПересорт) КАК Сумма,
		|		СУММА(СведенияПоИнвентаризации.СуммаУпр - СведенияПоИнвентаризации.СуммаУпрПересорт) КАК СуммаУпр,
		|		СУММА(СведенияПоИнвентаризации.СуммаНДС - СведенияПоИнвентаризации.СуммаНДСПересорт) КАК СуммаНДС,
		|		СУММА(СведенияПоИнвентаризации.СуммаНДСУпр - СведенияПоИнвентаризации.СуммаНДСУпрПересорт) КАК СуммаНДСУпр,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.КупляПродажа) КАК Статус,
		|		НЕОПРЕДЕЛЕНО КАК КомитентГуид,
		|		ЕСТЬNULL(СведенияПоИнвентаризации.Номенклатура.СтавкаНДС.Ставка, 0) КАК СтавкаНДС
		|	ИЗ
		|		РегистрСведений.СведенияПоИнвентаризации КАК СведенияПоИнвентаризации
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
		|			ПО СведенияПоИнвентаризации.Номенклатура = ТабВидовНоменклатуры.Номенклатура
		|	ГДЕ
		|		СведенияПоИнвентаризации.Регистратор = &Ссылка
		|		И (СведенияПоИнвентаризации.Количество - СведенияПоИнвентаризации.КоличествоПересорт <> 0
		|				ИЛИ СведенияПоИнвентаризации.КоличествоПересорт = 0)
		|		И СведенияПоИнвентаризации.Фирма = &Фирма
		|		И СведенияПоИнвентаризации.Склад = &Склад
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СведенияПоИнвентаризации.Номенклатура,
		|		ТабВидовНоменклатуры.ВидНоменклатуры,
		|		ЕСТЬNULL(СведенияПоИнвентаризации.Номенклатура.СтавкаНДС.Ставка, 0),
		|		ВЫБОР
		|			КОГДА СведенияПоИнвентаризации.Количество = 0
		|				ТОГДА ВЫБОР
		|						КОГДА СведенияПоИнвентаризации.Сумма > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризации.Сумма < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризации.СуммаУпр > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризации.СуммаУпр < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризации.СуммаНДС > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризации.СуммаНДС < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризации.СуммаНДСУпр > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризации.СуммаНДСУпр < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					КОНЕЦ
		|			КОГДА СведенияПоИнвентаризации.Количество > 0
		|				ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА СведенияПоИнвентаризацииПересорт.Количество = 0
		|				ТОГДА ВЫБОР
		|						КОГДА СведенияПоИнвентаризацииПересорт.Сумма > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.Сумма < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаУпр > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаУпр < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаНДС > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаНДС < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСУпр > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСУпр < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					КОНЕЦ
		|			КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|				ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		КОНЕЦ,
		|		ТабВидовНоменклатуры.ВидНоменклатуры,
		|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|		СУММА(0),
		|		СУММА(ВЫБОР
		|				КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|						И СведенияПоИнвентаризацииПересорт.СуммаПересорт > -СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|					ТОГДА СведенияПоИнвентаризацииПересорт.СуммаПересорт + СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|				КОГДА СведенияПоИнвентаризацииПересорт.Количество < 0
		|						И -СведенияПоИнвентаризацииПересорт.СуммаПересорт > СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|					ТОГДА СведенияПоИнвентаризацииПересорт.СуммаПересорт + СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|						И СведенияПоИнвентаризацииПересорт.СуммаПересорт > -СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|					ТОГДА СведенияПоИнвентаризацииПересорт.СуммаПересорт + СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|				КОГДА СведенияПоИнвентаризацииПересорт.Количество < 0
		|						И -СведенияПоИнвентаризацииПересорт.СуммаПересорт > СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|					ТОГДА СведенияПоИнвентаризацииПересорт.СуммаПересорт + СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|						И СведенияПоИнвентаризацииПересорт.СуммаУпрПересорт > -СведенияПоИнвентаризацииПересорт2.СуммаУпрПересорт
		|					ТОГДА СведенияПоИнвентаризацииПересорт.СуммаУпрПересорт + СведенияПоИнвентаризацииПересорт2.СуммаУпрПересорт
		|				КОГДА СведенияПоИнвентаризацииПересорт.Количество < 0
		|						И -СведенияПоИнвентаризацииПересорт.СуммаУпрПересорт > СведенияПоИнвентаризацииПересорт2.СуммаУпрПересорт
		|					ТОГДА СведенияПоИнвентаризацииПересорт.СуммаУпрПересорт + СведенияПоИнвентаризацииПересорт2.СуммаУпрПересорт
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|						И СведенияПоИнвентаризацииПересорт.СуммаНДСПересорт > -СведенияПоИнвентаризацииПересорт2.СуммаНДСПересорт
		|					ТОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСПересорт + СведенияПоИнвентаризацииПересорт2.СуммаНДСПересорт
		|				КОГДА СведенияПоИнвентаризацииПересорт.Количество < 0
		|						И -СведенияПоИнвентаризацииПересорт.СуммаНДСПересорт > СведенияПоИнвентаризацииПересорт2.СуммаНДСПересорт
		|					ТОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСПересорт + СведенияПоИнвентаризацииПересорт2.СуммаНДСПересорт
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|						И СведенияПоИнвентаризацииПересорт.СуммаНДСУпрПересорт > -СведенияПоИнвентаризацииПересорт2.СуммаНДСУпрПересорт
		|					ТОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСУпрПересорт + СведенияПоИнвентаризацииПересорт2.СуммаНДСУпрПересорт
		|				КОГДА СведенияПоИнвентаризацииПересорт.Количество < 0
		|						И -СведенияПоИнвентаризацииПересорт.СуммаНДСУпрПересорт > СведенияПоИнвентаризацииПересорт2.СуммаНДСУпрПересорт
		|					ТОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСУпрПересорт + СведенияПоИнвентаризацииПересорт2.СуммаНДСУпрПересорт
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.КупляПродажа),
		|		НЕОПРЕДЕЛЕНО,
		|		ЕСТЬNULL(СведенияПоИнвентаризацииПересорт.Номенклатура.СтавкаНДС.Ставка, 0)
		|	ИЗ
		|		РегистрСведений.СведенияПоИнвентаризации КАК СведенияПоИнвентаризацииПересорт
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
		|			ПО СведенияПоИнвентаризацииПересорт.Номенклатура = ТабВидовНоменклатуры.Номенклатура
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПоИнвентаризации КАК СведенияПоИнвентаризацииПересорт2
		|			ПО СведенияПоИнвентаризацииПересорт.НомерСтрокиПересорт = СведенияПоИнвентаризацииПересорт2.НомерСтроки
		|	ГДЕ
		|		СведенияПоИнвентаризацииПересорт.Регистратор = &Ссылка
		|		И СведенияПоИнвентаризацииПересорт.Фирма = &Фирма
		|		И СведенияПоИнвентаризацииПересорт.Склад = &Склад
		|		И СведенияПоИнвентаризацииПересорт2.Регистратор = &Ссылка
		|		И СведенияПоИнвентаризацииПересорт2.Склад = &Склад
		|		И СведенияПоИнвентаризацииПересорт2.Фирма = &Фирма
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СведенияПоИнвентаризацииПересорт.Номенклатура,
		|		ТабВидовНоменклатуры.ВидНоменклатуры,
		|		ЕСТЬNULL(СведенияПоИнвентаризацииПересорт.Номенклатура.СтавкаНДС.Ставка, 0),
		|		ВЫБОР
		|			КОГДА СведенияПоИнвентаризацииПересорт.Количество = 0
		|				ТОГДА ВЫБОР
		|						КОГДА СведенияПоИнвентаризацииПересорт.Сумма > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.Сумма < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаУпр > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаУпр < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаНДС > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаНДС < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСУпр > 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						КОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСУпр < 0
		|							ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					КОНЕЦ
		|			КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|				ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		КОНЕЦ
		|	
		|	ИМЕЮЩИЕ
		|		(НЕ СУММА(ВЫБОР
		|						КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|								И СведенияПоИнвентаризацииПересорт.СуммаПересорт > -СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|							ТОГДА СведенияПоИнвентаризацииПересорт.СуммаПересорт + СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|						КОГДА СведенияПоИнвентаризацииПересорт.Количество < 0
		|								И -СведенияПоИнвентаризацииПересорт.СуммаПересорт > СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|							ТОГДА СведенияПоИнвентаризацииПересорт.СуммаПересорт + СведенияПоИнвентаризацииПересорт2.СуммаПересорт
		|						ИНАЧЕ 0
		|					КОНЕЦ) = 0
		|			ИЛИ НЕ СУММА(ВЫБОР
		|						КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|								И СведенияПоИнвентаризацииПересорт.СуммаУпрПересорт > -СведенияПоИнвентаризацииПересорт2.СуммаУпрПересорт
		|							ТОГДА СведенияПоИнвентаризацииПересорт.СуммаУпрПересорт + СведенияПоИнвентаризацииПересорт2.СуммаУпрПересорт
		|						КОГДА СведенияПоИнвентаризацииПересорт.Количество < 0
		|								И -СведенияПоИнвентаризацииПересорт.СуммаУпрПересорт > СведенияПоИнвентаризацииПересорт2.СуммаУпрПересорт
		|							ТОГДА СведенияПоИнвентаризацииПересорт.СуммаУпрПересорт + СведенияПоИнвентаризацииПересорт2.СуммаУпрПересорт
		|						ИНАЧЕ 0
		|					КОНЕЦ) = 0
		|			ИЛИ НЕ СУММА(ВЫБОР
		|						КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|								И СведенияПоИнвентаризацииПересорт.СуммаНДСПересорт > -СведенияПоИнвентаризацииПересорт2.СуммаНДСПересорт
		|							ТОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСПересорт + СведенияПоИнвентаризацииПересорт2.СуммаНДСПересорт
		|						КОГДА СведенияПоИнвентаризацииПересорт.Количество < 0
		|								И -СведенияПоИнвентаризацииПересорт.СуммаНДСПересорт > СведенияПоИнвентаризацииПересорт2.СуммаНДСПересорт
		|							ТОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСПересорт + СведенияПоИнвентаризацииПересорт2.СуммаНДСПересорт
		|						ИНАЧЕ 0
		|					КОНЕЦ) = 0
		|			ИЛИ НЕ СУММА(ВЫБОР
		|						КОГДА СведенияПоИнвентаризацииПересорт.Количество > 0
		|								И СведенияПоИнвентаризацииПересорт.СуммаНДСУпрПересорт > -СведенияПоИнвентаризацииПересорт2.СуммаНДСУпрПересорт
		|							ТОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСУпрПересорт + СведенияПоИнвентаризацииПересорт2.СуммаНДСУпрПересорт
		|						КОГДА СведенияПоИнвентаризацииПересорт.Количество < 0
		|								И -СведенияПоИнвентаризацииПересорт.СуммаНДСУпрПересорт > СведенияПоИнвентаризацииПересорт2.СуммаНДСУпрПересорт
		|							ТОГДА СведенияПоИнвентаризацииПересорт.СуммаНДСУпрПересорт + СведенияПоИнвентаризацииПересорт2.СуммаНДСУпрПересорт
		|						ИНАЧЕ 0
		|					КОНЕЦ) = 0)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОстаткиНоменклатуры.ВидДвижения,
		|		ТабВидовНоменклатуры.ВидНоменклатуры,
		|		ОстаткиНоменклатуры.Комитент.Код,
		|		0,
		|		ВЫБОР
		|			КОГДА ОстаткиНоменклатуры.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ОстаткиНоменклатуры.Сумма
		|			ИНАЧЕ ОстаткиНоменклатуры.Сумма
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ОстаткиНоменклатуры.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ОстаткиНоменклатуры.Сумма
		|			ИНАЧЕ ОстаткиНоменклатуры.Сумма
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ОстаткиНоменклатуры.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ОстаткиНоменклатуры.СуммаУпр
		|			ИНАЧЕ ОстаткиНоменклатуры.СуммаУпр
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ОстаткиНоменклатуры.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ОстаткиНоменклатуры.СуммаНДС
		|			ИНАЧЕ ОстаткиНоменклатуры.СуммаНДС
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ОстаткиНоменклатуры.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ОстаткиНоменклатуры.СуммаНДСУпр
		|			ИНАЧЕ ОстаткиНоменклатуры.СуммаНДСУпр
		|		КОНЕЦ,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Комиссия),
		|		ВЫБОР
		|			КОГДА ОстаткиНоменклатуры.Комитент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|					ИЛИ ОстаткиНоменклатуры.Комитент = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ОстаткиНоменклатуры.Комитент
		|		КОНЕЦ,
		|		ЕСТЬNULL(ОстаткиНоменклатуры.Номенклатура.СтавкаНДС.Ставка, 0)
		|	ИЗ
		|		РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТабВидовНоменклатуры КАК ТабВидовНоменклатуры
		|			ПО ОстаткиНоменклатуры.Номенклатура = ТабВидовНоменклатуры.Номенклатура
		|	ГДЕ
		|		ОстаткиНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Комиссия)
		|		И ОстаткиНоменклатуры.Регистратор = &Ссылка
		|		И ОстаткиНоменклатуры.Фирма = &Фирма
		|		И ОстаткиНоменклатуры.МестоХранения = &Склад) КАК СвернутыйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	СвернутыйЗапрос.ВидДвижения,
		|	СвернутыйЗапрос.ВидНоменклатуры,
		|	СвернутыйЗапрос.Комитент,
		|	СвернутыйЗапрос.Статус,
		|	СвернутыйЗапрос.КомитентГуид,
		|	СвернутыйЗапрос.СтавкаНДС";
		
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		Запрос.УстановитьПараметр("Фирма",спрФирма);
		Запрос.УстановитьПараметр("Склад",спрСклад);
		Запрос.УстановитьПараметр("ЭтоЦех",ЭтоЦех(Объект.СтруктурнаяЕдиница));					  
		
		ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_Инвентаризация_Состав");
		ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "DocumentTabularSectionRow_Инвентаризация_ОстаткиНоменклатуры");
		
		прчКупляПродажа = Перечисления.ТипыДоговоров.КупляПродажа;
		спрПустойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		РезультатЗапроса = Запрос.Выполнить();
		
		// если нечего выгрузить в состав пакета - то и пакет формировать не нужно
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ТзЗапроса = РезультатЗапроса.Выгрузить();
		ТзЗапроса.Свернуть("ВидДвижения");
		
		Для Каждого СтрокаТзЗапроса Из ТзЗапроса Цикл
			
			ПакетДокументы = ФабрикаXDTO.Создать(ТипДокументы);
			ПакетДокументы.Фирма = Строка(спрФирма.УникальныйИдентификатор());
			ПакетДокументы.Склад = спрСклад.Код;
			ПакетДокументы.Оприходование = СтрокаТзЗапроса.ВидДвижения = ВидДвиженияНакопления.Приход;
			Пакет.Документы.Добавить(ПакетДокументы);
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если СтрокаТзЗапроса.ВидДвижения = Выборка.ВидДвижения Тогда
					
					Если Выборка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
						ПакетСостав.Номенклатура  = Выборка.ВидНоменклатуры;
						ПакетСостав.Количество   = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
						ПакетСостав.Сумма        = Выборка.Сумма;
						ПакетСостав.СуммаУпр     = Выборка.СуммаУпр;
						ПакетСостав.СтавкаНДС    = Выборка.СтавкаНДС;
						ПакетСостав.СуммаНДС     = Выборка.СуммаНДС;
						ПакетСостав.СуммаНДСУпр  = Выборка.СуммаНДСУпр;
						ПакетДокументы.Состав.Добавить(ПакетСостав);
						ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
						ПакетОстаткиНоменклатуры.Номенклатура = Выборка.ВидНоменклатуры;
						ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
						//++Минин 2015-05-21 ошибка в рег.задании. Тк комитент может быть не только контрагентом
						//Если Выборка.Комитент = спрПустойКонтрагент Тогда
						//Если Не ЗначениеЗаполнено(Выборка.КомитентГуид) Тогда
						//	//--Минин 2015-05-21 ошибка в рег.задании. Тк комитент может быть не только контрагентом
						//	ПакетОстаткиНоменклатуры.Комитент = Строка(Выборка.Комитент);
						//Иначе	
						//	ПакетОстаткиНоменклатуры.Комитент = Строка(Выборка.КомитентГуид.УникальныйИдентификатор());
						//КонецЕсли;
						//BIT_Izhevsk ALProzorov 20/08/2015 -->>
						ПакетОстаткиНоменклатуры.Комитент              = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент));
						ПакетОстаткиНоменклатуры.КомитентТип           = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
						//BIT_Izhevsk ALProzorov 20/08/2015 <<--
						
						ПакетОстаткиНоменклатуры.Количество            = ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);
						ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
						ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
						ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
						ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
						ПакетДокументы.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
					Иначе	
						ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
						ПакетСостав.Номенклатура  = Выборка.ВидНоменклатуры;
						ПакетСостав.Количество   = -ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);;
						ПакетСостав.Сумма        = -Выборка.Сумма;
						ПакетСостав.СуммаУпр     = -Выборка.СуммаУпр;
						ПакетСостав.СтавкаНДС    =  Выборка.СтавкаНДС;
						ПакетСостав.СуммаНДС     = -Выборка.СуммаНДС;
						ПакетСостав.СуммаНДСУпр  = -Выборка.СуммаНДСУпр;
						ПакетДокументы.Состав.Добавить(ПакетСостав);
						ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
						ПакетОстаткиНоменклатуры.Номенклатура = Выборка.ВидНоменклатуры;
						ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
						//BIT_Izhevsk ALProzorov 20/08/2015 -->>
						//ПакетОстаткиНоменклатуры.Комитент = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент)); 
						ПакетОстаткиНоменклатуры.Комитент              = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент));
						ПакетОстаткиНоменклатуры.КомитентТип           = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
						//BIT_Izhevsk ALProzorov 20/08/2015 <<--
						ПакетОстаткиНоменклатуры.Количество            = -ПолучитьКоличествоВЗависимостиОтВидаНоменклатуры(Выборка);;
						ПакетОстаткиНоменклатуры.Себестоимость         = -Выборка.Сумма;
						ПакетОстаткиНоменклатуры.СебестоимостьУпр      = -Выборка.СуммаУпр;
						ПакетОстаткиНоменклатуры.СебестоимостьНДС      = -Выборка.СуммаНДС;
						ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = -Выборка.СуммаНДСУпр;
						ПакетДокументы.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;	
		
		//************************************************
		Запрос.Текст="УНИЧТОЖИТЬ ТабВидовНоменклатуры";
		РезультатЗапроса = Запрос.Выполнить();
		//************************************************
		
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_Инвентаризация","fin","RS_Инвентаризация");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьСклад(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "CatalogObject_Склады");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Description = Объект.Наименование;
	Пакет.Code = Объект.Код;
	Если Объект.Владелец = Справочники.СтруктурныеЕдиницы.Центр Тогда
		Пакет.Owner = "Центр";
	Иначе
		Пакет.Owner = Объект.Владелец.Код;
	КонецЕсли;
	Пакет.ВидСклада = Метаданные.Перечисления.ВидыСкладов.EnumValues.Get(Перечисления.ВидыСкладов.Индекс(Объект.ВидСклада)).Имя;
	
	Пакет.ОтрицательныеОстатки = Объект.ОтрицательныеОстатки;
	Пакет.Телефон = Объект.Телефон;
	Пакет.СуммовойУчет = Объект.СуммовойУчет;
	Пакет.НеУчаствуетВРасчетеЗаказа = Объект.НеУчаствуетВРасчетеЗаказа;
	Пакет.Площадь = Объект.Площадь;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(ТекущаяДата(),СокрЛП(Пакет.Owner)+"/"+СокрЛП(Пакет.Code),Пакет,"CatalogObject_Склады","fin","RS_Склад");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьККМ(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/rsfinancials/rs", "CatalogObject_ККМ");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Description = Объект.Наименование;
	Пакет.Code = Объект.Код;
	Если Объект.Владелец = Справочники.СтруктурныеЕдиницы.Центр Тогда
		Пакет.Owner = "Центр";
	Иначе
		Пакет.Owner = Объект.Владелец.Код;
	КонецЕсли;
	Пакет.ТипККМ = Метаданные.Перечисления.ТипыККМ.EnumValues.Get(Перечисления.ТипыККМ.Индекс(Объект.ТипККМ)).Имя;
	
	Пакет.НомерПроизводителя = Объект.НомерПроизводителя;
	Пакет.НомерРегистрационный = Объект.НомерРегистрационный;
	
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(ТекущаяДата(),СокрЛП(Пакет.Owner)+"/"+СокрЛП(Пакет.Code),Пакет,"CatalogObject_ККМ","fin","RS_ККМ");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
//////////////////////процедуры получения данных из Финансов///////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

Функция НайтиЭлементСправочника(ИдСинх,стрИмяСправочника,Владелец=Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ИдСинх) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если СтрДлина(ИдСинх) = 36 Тогда
		СправочникСсылка = Справочники[стрИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдСинх));
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
			Возврат ?(СправочникОбъект = Неопределено,Неопределено,СправочникСсылка);
		Иначе
			Возврат Неопределено;	
		КонецЕсли;
	Иначе
		СправочникСсылка = Справочники[стрИмяСправочника].НайтиПоКоду(ИдСинх,,,Владелец);
		Возврат ?(НЕ ЗначениеЗаполнено(СправочникСсылка),Неопределено,СправочникСсылка);
	КонецЕсли;
	
КонецФункции


Процедура ЗаписатьКонтактнуюИнформацию(ТабЧасть,Тип,Вид,Значение)
	
	СтрокаТЧ = ТабЧасть.Найти(Вид,"Вид");
	Если  СтрокаТЧ = неопределено Тогда
		СтрокаТЧ = ТабЧасть.Добавить();
		СтрокаТЧ.Тип = Тип;
		СтрокаТЧ.Вид = Вид;
	КонецЕсли;	
	СтрокаТЧ.Представление = Значение;
	
КонецПроцедуры	

Процедура ЗаписатьОтветственноеЛицо(Нз,ОтветственноеЛицо)
	спрФизЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(ОтветственноеЛицо));
	Если НЕ ЗначениеЗаполнено(спрФизЛицо) Тогда
		Возврат;
	КонецЕсли;	
	нз.Прочитать();
	Если нз.Количество()>0 Тогда
		нз[0].ФизическоеЛицо = спрФизЛицо;
	Иначе
		Запись = нз.Добавить();
		Запись.Период = ТекущаяДата();
		Запись.Организация = нз.Отбор.Организация.Значение;
		Запись.ТипОтветственногоЛица = нз.Отбор.ТипОтветственногоЛица.Значение;
		Запись.ФизическоеЛицо = спрФизЛицо;
	КонецЕсли;	
	нз.Записать();
КонецПроцедуры	

Функция Финансы_Организации(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Справочники.Организации.СоздатьЭлемент();
			Ссылка = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Код = XDTO.Code;
		Объект.Наименование = XDTO.Description;
		Объект.ИНН = XDTO.ИНН;
		Объект.КПП = XDTO.КПП;
		Объект.КодПоОКПО = XDTO.КодПоОКПО;
		Объект.Префикс = XDTO.Префикс; 
		Объект.ПолноеНаименование = XDTO.ПолноеНаименование;
		
		//{ ВетровИА 03.03.2015 Наряд}
		Объект.ОГРН = XDTO.ОГРН;
		Объект.СвидетельствоСерияНомер = XDTO.СвидетельствоСерияНомер;
		Объект.СвидетельствоДатаВыдачи = XDTO.СвидетельствоДатаВыдачи;
		//{ ВетровИА 03.03.2015 Наряд}
		
		//popn+
		//Объект.ОсновнойБанковскийСчет = XDTO.ОсновнойБанковскийСчет;
		Объект.ОсновнойБанковскийСчет = НайтиЭлементСправочника(XDTO.ОсновнойБанковскийСчет,"БанковскиеСчета",Ссылка);
		//popn-
		//запись контактной информации
		прчТип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Если ЗначениеЗаполнено(XDTO.ЮридическийАдрес) Тогда
			спрВид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			ЗаписатьКонтактнуюИнформацию(Объект.КонтактнаяИнформация,прчТип,спрВид,XDTO.ЮридическийАдрес);
		КонецЕсли;	
		Если ЗначениеЗаполнено(XDTO.ФактическийАдрес) Тогда
			спрВид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			ЗаписатьКонтактнуюИнформацию(Объект.КонтактнаяИнформация,прчТип,спрВид,XDTO.ФактическийАдрес);
		КонецЕсли;
		Если ЗначениеЗаполнено(XDTO.ПочтовыйАдрес) Тогда
			спрВид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
			ЗаписатьКонтактнуюИнформацию(Объект.КонтактнаяИнформация,прчТип,спрВид,XDTO.ПочтовыйАдрес);
		КонецЕсли;
		прчТипТелефон = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если ЗначениеЗаполнено(XDTO.Телефон) Тогда
			спрВид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			ЗаписатьКонтактнуюИнформацию(Объект.КонтактнаяИнформация,прчТипТелефон,спрВид,XDTO.Телефон);
		КонецЕсли;
		Объект.ЮрФизЛицо=?(XDTO.ЮрФизЛицо="Юр. лицо",Перечисления.ТипыКонтрагентов.ЮрЛицо,Перечисления.ТипыКонтрагентов.ФизЛицо);
		Объект.Записать();
		//запишем ответственных лиц организации
		менТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц;
		нзОтветственныеЛица = РегистрыСведений.ОтветственныеЛица.СоздатьНаборЗаписей();
		нзОтветственныеЛица.Отбор.Организация.Установить(Объект.Ссылка);
		Если ЗначениеЗаполнено(XDTO.Руководитель) Тогда 
			нзОтветственныеЛица.Отбор.ТипОтветственногоЛица.Установить(менТипОтветственногоЛица.Руководитель);
			ЗаписатьОтветственноеЛицо(нзОтветственныеЛица,XDTO.Руководитель);
		КонецЕсли;	
		Если ЗначениеЗаполнено(XDTO.ГлавныйБухгалтер) Тогда 
			нзОтветственныеЛица.Отбор.ТипОтветственногоЛица.Установить(менТипОтветственногоЛица.ГлавныйБухгалтер);
			ЗаписатьОтветственноеЛицо(нзОтветственныеЛица,XDTO.ГлавныйБухгалтер);
		КонецЕсли;	
		Если ЗначениеЗаполнено(XDTO.Кассир) Тогда 
			нзОтветственныеЛица.Отбор.ТипОтветственногоЛица.Установить(менТипОтветственногоЛица.Кассир);
			ЗаписатьОтветственноеЛицо(нзОтветственныеЛица,XDTO.Кассир);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_СтатьиДДС(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
			Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Код = XDTO.Code;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Если НЕ ЗначениеЗаполнено(XDTO.СчетУчета) Тогда
			Package = "У статьи ДДС ="+Строка(XDTO.Description)+" не задан счет учета";
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		Объект.СчетУчета = XDTO.СчетУчета;
		Объект.КлассификацияДенежнойОперацииПоУмолчанию = ?(ЗначениеЗаполнено(XDTO.КлассификаторДенежныхОпераций),ПланыВидовХарактеристик.КлассификаторДДС[XDTO.КлассификаторДенежныхОпераций],"");
		Если НЕ ЗначениеЗаполнено(Объект.КлассификацияДенежнойОперацииПоУмолчанию) Тогда
			Package = "У статьи ДДС ="+Строка(XDTO.Description)+" не задан классификатор ДДС";
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		//BIT_Izhevsk ALProzorov 08/07/2015 -->>
		//Объект.ТипАналитики = XDTO.ТипАналитики;
		//BIT_Izhevsk ALProzorov 08/07/2015 <<--
		
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_БанковскиеСчета(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.БанковскиеСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.БанковскиеСчета.СоздатьЭлемент();
			Ссылка = Справочники.БанковскиеСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		
		СсылкаНаВладельца = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Owner));
		ОбъектВладельца = СсылкаНаВладельца.ПолучитьОбъект();
		Если ОбъектВладельца = Неопределено Тогда
			Package = "Не найден владелец банковского счета "+Строка(XDTO.Description);
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		Объект.Владелец = СсылкаНаВладельца;
		
		Объект.НомерСчета = Строка(XDTO.НомерСчета);
		Объект.ВидСчета = Строка(XDTO.ВидСчета);
		Объект.ДатаОткрытия = XDTO.ДатаОткрытия;
		Объект.ДатаЗакрытия = XDTO.ДатаЗакрытия;
		
		Объект.НаименованиеБанка = Строка(XDTO.НаименованиеБанка);
		Объект.КоррСчетБанка = Строка(XDTO.КоррСчетБанка);
		Объект.АдресБанка = Строка(XDTO.АдресБанка);
		Объект.ГородБанка = Строка(XDTO.ГородБанка);
		Объект.ТелефоныБанка = Строка(Объект.ТелефоныБанка);
		Объект.БИКБанка = Строка(XDTO.БИКБанка);		
		
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_КассыФирмы(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.КассыФирмы.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.КассыФирмы.СоздатьЭлемент();
			Ссылка = Справочники.КассыФирмы.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		
		Если НЕ ЗначениеЗаполнено(XDTO.Owner) ИЛИ XDTO.Owner = "0" Тогда
			СсылкаНаВладельца = Справочники.СтруктурныеЕдиницы.Центр;	
		Иначе
			СсылкаНаВладельца = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(СокрЛП(XDTO.Owner));
		КонецЕсли;
		Если СсылкаНаВладельца.Пустая() Тогда
			Package = "Не найден владелец кассы "+Строка(XDTO.Description);
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		Объект.Владелец = СсылкаНаВладельца;
		
		СсылкаНаФирму = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Фирма));
		Если СсылкаНаФирму.Пустая() Тогда
			Package = "Не найдена фирма кассы "+Строка(XDTO.Description);
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		Объект.Фирма = СсылкаНаФирму;
		//Котлячкова ++ 18,03,15  Обмен с фин 
		//Если ЗначениеЗаполнено(XDTO.ОсновноеНаправлениеИнкассацииТип) ТОгда
		//	Объект.ОсновноеНаправлениеИнкассации = НайтиЭлементСправочника(XDTO.ОсновноеНаправлениеИнкассации,XDTO.ОсновноеНаправлениеИнкассацииТип);
		//КонецЕсли;
		//Котлячкова -- 18,03,15
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_Контрагенты(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.Контрагенты.НайтиПоКоду(XDTO.Code);
		
		Если Ссылка.Пустая() Тогда
			Если XDTO.IsFolder Тогда
				Объект = Справочники.Контрагенты.СоздатьГруппу();
				Объект.ЭтоПодразделение = XDTO.ЭтоПодразделение;
			Иначе	
				Объект = Справочники.Контрагенты.СоздатьЭлемент();
			КонецЕсли;
		Иначе
			//{Ситек ДойниковПВ 2015-10-09
			ПодчиненныеЭлементы = Справочники.Контрагенты.НайтиПоНаименованию("", Ложь, Ссылка);
			Если НЕ XDTO.IsFolder И Ссылка.ЭтоГруппа И НЕ ЗначениеЗаполнено(ПодчиненныеЭлементы) Тогда
				Объект = Справочники.Контрагенты.СоздатьЭлемент();
				Объект.УстановитьСсылкуНового(Ссылка);
				УдаляемыйОбъект = Ссылка.ПолучитьОбъект();
				УдаляемыйОбъект.Удалить();
			Иначе
				Объект = Ссылка.ПолучитьОбъект();
				// BiT ALProzorov 20/07/2015 -->>
				Если Объект.ЭтоГруппа Тогда
					Объект.ЭтоПодразделение = XDTO.ЭтоПодразделение;
				КонецЕсли;
				// BiT ALProzorov 20/07/2015 <<--
			КонецЕсли;
			//}Ситек ДойниковПВ 2015-10-09
		КонецЕсли;
		
		Если XDTO.Parent = "" Тогда
			Объект.Родитель = Справочники.Контрагенты.ПустаяСсылка();
		Иначе	
			Родитель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Parent);
			Если НЕ Родитель.ЭтоГруппа Тогда
				Объект = Родитель.ПолучитьОбъект();
				Объект.Код = XDTO.Code;
				Объект.Наименование = XDTO.Description;
				Объект.Записать();
				РодительОбъект = Справочники.Контрагенты.СоздатьГруппу();
				РодительОбъект.Код = XDTO.Parent;
				РодительОбъект.Наименование = XDTO.Description;
				РодительОбъект.ЭтоПодразделение = Истина;
				РодительОбъект.Записать();
				Родитель = РодительОбъект.Ссылка;
			КонецЕсли;	
			Объект.Родитель = Родитель;
		КонецЕсли;	
		
		Если Объект.ЭтоГруппа Тогда
			Объект.ЭтоПодразделение = XDTO.ЭтоПодразделение;
			//++Минин 0000143179 2015-10-23
			Если XDTO.Установлено("ИнойГрузоотправитель") Тогда
				Объект.ИнойГрузоотправитель = XDTO.ИнойГрузоотправитель;
			КонецЕсли;
			//--Минин 0000143179 2015-10-23
		КонецЕсли;	
		
		Объект.Код = XDTO.Code;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Если НЕ Объект.ЭтоГруппа Тогда
			Объект.ИНН = XDTO.ИНН;
			Объект.КПП = XDTO.КПП;
			
			// BiT ALprozorov 20/07/2015 -->>
			Если XDTO.Установлено("КодПоОКПО") Тогда
				Объект.КодПоОКПО = XDTO.КодПоОКПО;
			КонецЕсли;	
			// BiT ALprozorov 20/07/2015 <<--
			
			Объект.ДоговорПоУмолчанию = XDTO.ДоговорПоУмолчанию;
			Объект.ОсновнойБанковскийСчет = XDTO.ОсновнойБанковскийСчет;
			Объект.Покупатель = XDTO.Покупатель;
			Объект.Поставщик = XDTO.Поставщик;
			Объект.Производитель = XDTO.Производитель;
			Объект.ПолноеНаименование = XDTO.ПолноеНаименование;
			Объект.НеФормироватьСчетаФактурыАвтоматически = XDTO.НеФормироватьСчетаФактурыАвтоматически;
			Объект.Статус = XDTO.Активен;
			Объект.Местный =  XDTO.Местный;
			Объект.ГоловнойКонтрагент = Справочники.Контрагенты.НайтиПоКоду(XDTO.ГоловнойКонтрагент);
			//{БредовЮГ 2015-06-17 Наряд 000153808 от 17.06.2015 22:31:46
			Объект.Izh_ЮЗЭДО_ПриходнаяНакладная = XDTO.Izh_ЮЗЭДО_ПриходнаяНакладная;
			Объект.Izh_ЮЗЭДО_СчетФактура = XDTO.Izh_ЮЗЭДО_СчетФактура;
			//БредовЮГ  2015-06-17 Наряд 000153808 от 17.06.2015 22:31:46 } 
			
			Если XDTO.Установлено("ПротоколРЦ") Тогда
				Объект.ПротоколРЦ = XDTO.ПротоколРЦ;
			КонецЕсли;
			
			//++Минин 0000143179 2015-10-23
			Если XDTO.Установлено("Агент") Тогда
				Объект.Агент = XDTO.Агент;
			КонецЕсли;
			//--Минин 0000143179 2015-10-23
		КонецЕсли;	
		Если ЗначениеЗаполнено(XDTO.WWW) Тогда
			ВидАдреса=Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			КИ=Объект.КонтактнаяИнформация.Найти(ВидАдреса, "Вид");
			Если КИ = Неопределено Тогда
				НоваяСтрока=Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Вид=ВидАдреса;
				НоваяСтрока.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяСтрока.Представление=XDTO.WWW;
			Иначе
				КИ.Представление= XDTO.WWW;
			КонецЕсли;	
		КонецЕсли;		
		Объект.Записать();	
		//{БредовЮГ 2014-02-12 Доработка выгрузки провайдеров EDI
		Если XDTO.ОператорEDI="ДК" Тогда
			ОператорEDI=Справочники.EDIПровайдеры.ДК;
		ИначеЕсли XDTO.ОператорEDI="Корус" Тогда
			ОператорEDI=Справочники.EDIПровайдеры.Корус;
		ИначеЕсли XDTO.ОператорEDI="Exite" Тогда
			ОператорEDI=Справочники.EDIПровайдеры.Exite;
		КонецЕсли;
		НаборЗаписейEDIПровайдеры = РегистрыСведений.EDIПровайдерыПоставщиков.СоздатьНаборЗаписей();
		НаборЗаписейEDIПровайдеры.Отбор.Контрагент.Установить(Объект.Ссылка);
		НаборЗаписейEDIПровайдеры.Прочитать();
		НаборЗаписейEDIПровайдеры.Очистить();
		Если ЗначениеЗаполнено(XDTO.GLN) Тогда		
			НоваяЗапись = НаборЗаписейEDIПровайдеры.Добавить();
			НоваяЗапись.Контрагент = Объект.Ссылка;
			НоваяЗапись.EDIПровайдер = ОператорEDI;
			НоваяЗапись.GLN = XDTO.GLN;
			НоваяЗапись.Основной = Истина;
			НоваяЗапись.ORDERS = XDTO.БезЗаказа;
			НоваяЗапись.DESADV = XDTO.DESADV;
			НоваяЗапись.RECADV = XDTO.RECADV;
			НоваяЗапись.RETANN = XDTO.RETANN;
		КонецЕсли;
		НаборЗаписейEDIПровайдеры.Записать();
		//{БредовЮГ 2014-02-12 Доработка выгрузки провайдеров EDI
		Если ЗначениеЗаполнено(XDTO.ТипыДоговора) Тогда 
			Для Каждого Строка Из XDTO.ТипыДоговора Цикл
				Запись = РегистрыСведений.Izh_ТипыДоговоровПоУмолчанию.СоздатьМенеджерЗаписи();
				Запись.Период = ?(Строка.Дата='00010101000000',ТекущаяДата(),Строка.Дата);
				Запись.Контрагент = Объект.Ссылка;
				Запись.Фирма = Справочники.Организации.НайтиПоКоду(Строка.Фирма);
				Запись.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.СЕ);
				Если Строка.ТипДоговора = "Купля-продажа" Тогда 
					Запись.ТипДоговора = Перечисления.ТипыДоговоров.КупляПродажа;
				ИначеЕсли Строка.ТипДоговора = "Комиссия" Тогда 
					Запись.ТипДоговора = Перечисления.ТипыДоговоров.Комиссия;
				Иначе	
					Запись.ТипДоговора = Перечисления.ТипыДоговоров.ОтветственноеХранение;
				КонецЕсли;
				Запись.Записать();
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(XDTO.ГоловнойКонтрагент) Тогда 
			МенеджерЗаписейТипыДоговоровПоУмолчанию = РегистрыСведений.Izh_ТипыДоговоровПоУмолчанию.СоздатьНаборЗаписей();
			МенеджерЗаписейТипыДоговоровПоУмолчанию.Отбор.Контрагент.Установить(Объект.ГоловнойКонтрагент);
			МенеджерЗаписейТипыДоговоровПоУмолчанию.Прочитать();
			Для каждого ЗаписьНабора Из МенеджерЗаписейТипыДоговоровПоУмолчанию Цикл
				Запись = РегистрыСведений.Izh_ТипыДоговоровПоУмолчанию.СоздатьМенеджерЗаписи();
				Запись.Период = ЗаписьНабора.Дата;
				Запись.Контрагент = Объект.Ссылка;
				Запись.Фирма = ЗаписьНабора.Фирма;
				Запись.СтруктурнаяЕдиница = ЗаписьНабора.СтруктурнаяЕдиница;
				Запись.ТипДоговора = ЗаписьНабора.ТипДоговора;
				Запись.Записать();
			КонецЦикла;
		КонецЕсли;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
	
КонецФункции

Функция Финансы_ФизическиеЛица(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Если XDTO.IsFolder Тогда
				Объект = Справочники.ФизическиеЛица.СоздатьГруппу();
			Иначе	
				Объект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			КонецЕсли;	
			Ссылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Код = XDTO.Code;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Родитель = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Parent));
		Если ЗначениеЗаполнено(XDTO.Пол) Тогда
			Объект.Пол = Перечисления.ПолФизическихЛиц[XDTO.Пол];
		КонецЕсли;	
		//Объект.ДатаРождения = XDTO.ДатаРождения;
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//popn+
Функция Финансы_ПаспортныеДанныеФизЛиц(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			Набор = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
			Физлицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Физлицо));
			Если Физлицо.Пустая() Тогда
				Package = "Не найдено физ. лицо с ГУИД "+Строка(Строка.Физлицо);
				Возврат Ложь;
			КонецЕсли;
			Набор.Отбор.Физлицо.Установить(Физлицо);
			Запись = Набор.Добавить();
			Запись.Физлицо           = Физлицо;
			Запись.Период            = Строка.Period;
			Запись.Серия             = Строка.Серия;
			Запись.Номер             = Строка.Номер;
			Запись.КемВыдан          = Строка.КемВыдан;
			Запись.ДатаВыдачи        = Строка.ДатаВыдачи;
			Запись.КодПодразделения  = Строка.КодПодразделения;
			Запись.ВидДокумента      = Справочники.ДокументыУдостоверяющиеЛичность.НайтиПоНаименованию(Строка.ВидДокумента);
			Набор.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции
//popn-

Функция Финансы_КредитныеКарты(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.КредитныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.КредитныеКарты.СоздатьЭлемент();
			Ссылка = Справочники.КредитныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Код = XDTO.Code;
		Объект.Наименование = XDTO.Description;
		Если ЗначениеЗаполнено(XDTO.ТипОплаты) Тогда
			Объект.ТипОплаты = Перечисления.ТипыОплат.Получить(Число(XDTO.ТипОплаты));
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_ВидыСписания(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.ВидыСписания.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.ВидыСписания.СоздатьЭлемент();
			Ссылка = Справочники.ВидыСписания.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = XDTO.Description;
		Объект.Код = XDTO.Code;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.ВидКоррекции = Перечисления.Izh_ВидыКоррекций.Получить(Число(XDTO.ТипСписания));
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_УчетнаяПолитикаНалоговыйУчет(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			Набор = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
			Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Организация));
			Набор.Отбор.Организация.Установить(Организация);
			Запись = Набор.Добавить();
			Запись.Период = Строка.Period;
			Запись.Организация = Организация;
			Запись.СхемаНалогообложения = Перечисления.СхемыНалогообложения[Строка.СхемаНалогообложения];
			//Запись.ВыпускПродукцииПоПлановымЦенам = Строка.ВыпускПродукцииПоПлановымЦенам;
			Запись.АвтоматическоеФормированиеСчетаФактуры = Строка.АвтоматическоеФормированиеСчетаФактуры;
			//{БредовЮГ 2015-02-15 Доработки по НДС
			Запись.Izh_ПлательщикНДС = Строка.ПлательщикНДС;
			//БредовЮГ 2015-02-15 Доработки по НДС}
			
			Набор.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_ДополнительныеРеквизитыКонтрагентов(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(Строка.Контрагент);
			КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
			Если КонтрагентОбъект <> Неопределено Тогда
				Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыКонтрагентов.НайтиПоКоду(Строка.КодСвойства);
				Если Свойство.Пустая() Тогда
					Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыКонтрагентов.СоздатьЭлемент();
					Свойство.Код          = Строка.КодСвойства;
				Иначе
					Свойство = Свойство.ПолучитьОбъект();
				КонецЕсли;
				Свойство.Наименование = Строка.НаименованиеСвойства;
				Попытка 
					Свойство.ТипЗначения = Новый ОписаниеТипов(Строка.ТипЗначенияСвойства);
				Исключение
					Свойство.ТипЗначения = Новый ОписаниеТипов("Строка");
				КонецПопытки;
				Свойство.Записать();
				//++МининНА 2014-08-12 Наряд № 000121740
				Результат=Izh_УправлениеСвойствамиОбъектов.ЗаполнитьДополнительныеРеквизиты(КонтрагентСсылка,Строка.ЗначениеСвойства,Свойство.Ссылка);
				//СтрокаТаблицы = КонтрагентОбъект.ДополнительныеРеквизиты.Найти(Свойство.Ссылка,"Свойство");
				//Если СтрокаТаблицы = Неопределено Тогда
				//	СтрокаТаблицы = КонтрагентОбъект.ДополнительныеРеквизиты.Добавить();
				//КонецЕсли;
				//СтрокаТаблицы.Свойство = Свойство.Ссылка;
				//СтрокаТаблицы.Значение = Строка.ЗначениеСвойства;
				//--МининНА 2014-08-12 Наряд № 000121740
			Иначе
				Package = "Не найден контрагент с ГУИД="+Строка.Контрагент;
				Результат = ЛОЖЬ;
			КонецЕсли;
			КонтрагентОбъект.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_ДополнительныеРеквизитыОрганизаций(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			ОрганизацияСсылка = Справочники.Организации.НайтиПоКоду(Строка.Организация);
			ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
			Если ОрганизацияОбъект <> Неопределено Тогда
				Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыОрганизаций.НайтиПоКоду(Строка.КодСвойства);
				Если Свойство.Пустая() Тогда
					Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыОрганизаций.СоздатьЭлемент();
					Свойство.Код          = Строка.КодСвойства;
				Иначе
					Свойство = Свойство.ПолучитьОбъект();
				КонецЕсли;
				Свойство.Наименование = Строка.НаименованиеСвойства;
				Попытка 
					Свойство.ТипЗначения = Новый ОписаниеТипов(Строка.ТипЗначенияСвойства);
				Исключение
					Свойство.ТипЗначения = Новый ОписаниеТипов("Строка");
				КонецПопытки;
				Свойство.Записать();
				СтрокаТаблицы = ОрганизацияОбъект.ДополнительныеРеквизиты.Найти(Свойство.Ссылка,"Свойство");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ОрганизацияОбъект.ДополнительныеРеквизиты.Добавить();
				КонецЕсли;
				СтрокаТаблицы.Свойство = Свойство.Ссылка;
				СтрокаТаблицы.Значение = Строка.ЗначениеСвойства;
			Иначе
				Package = "Не найдена организация с кодом="+Строка.Контрагент;
				Результат = ЛОЖЬ;
			КонецЕсли;
			ОрганизацияОбъект.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция Финансы_ДополнительныеРеквизитыСтруктурныхЕдиниц(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			СтруктурнаяЕдиницаСсылка = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.СтруктурнаяЕдиница);
			Если (СтруктурнаяЕдиницаСсылка = Справочники.СтруктурныеЕдиницы.ПустаяСсылка())ИЛИ(СтруктурнаяЕдиницаСсылка = Неопределено) Тогда 
				Package = "Не найдена структурная единица с кодом="+Строка.Контрагент;
				Результат = ЛОЖЬ;
			Иначе	
				СтруктурнаяЕдиницаОбъект = СтруктурнаяЕдиницаСсылка.ПолучитьОбъект();
				Если СтруктурнаяЕдиницаОбъект <> Неопределено Тогда
					Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыСтруктурныхЕдиниц.НайтиПоКоду(Строка.КодСвойства);
					Если Свойство.Пустая() Тогда
						Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыСтруктурныхЕдиниц.СоздатьЭлемент();
						Свойство.Код          = Строка.КодСвойства;
					Иначе
						Свойство = Свойство.ПолучитьОбъект();
					КонецЕсли;
					Свойство.Наименование = Строка.НаименованиеСвойства;
					Попытка 
						Свойство.ТипЗначения = Новый ОписаниеТипов(Строка.ТипЗначенияСвойства);
					Исключение
						Свойство.ТипЗначения = Новый ОписаниеТипов("Строка");
					КонецПопытки;
					Свойство.Записать();
					//{КотлячковаЕВ 2014-06-18 09:49:13 Наряд № 000118831
					Результат=Izh_УправлениеСвойствамиОбъектов.ЗаполнитьДополнительныеРеквизиты(СтруктурнаяЕдиницаСсылка,Строка.ЗначениеСвойства,Свойство.Ссылка);
				Иначе                    
					Package = "Не найдена структурная единица с кодом="+Строка.Контрагент;
					Результат = ЛОЖЬ;
				КонецЕсли;
			КонецЕсли;
			
			// старый код:
			//{	
			//	СтрокаТаблицы = СтруктурнаяЕдиницаОбъект.ДополнительныеРеквизиты.Найти(Свойство.Ссылка,"Свойство");
			//	Если СтрокаТаблицы = Неопределено Тогда
			//		СтрокаТаблицы = СтруктурнаяЕдиницаОбъект.ДополнительныеРеквизиты.Добавить();
			//	КонецЕсли;
			//	СтрокаТаблицы.Свойство = Свойство.Ссылка;
			//	//Шилов М.В. 21.02.14
			//	Если Справочники.ТипВсеСсылки().СодержитТип(Свойство.ТипЗначения.Типы()[0]) Тогда
			//		ТипСпр=Метаданные.НайтиПоТипу(Свойство.ТипЗначения.Типы()[0]).Имя;
			//		Если ТипСпр="ЗначенияСвойствОбъектов" Тогда
			//			СтрокаТаблицы.Значение = Справочники[ТипСпр].НайтиПоКоду(Строка.ЗначениеСвойства,,,Свойство.Ссылка);
			//		Иначе
			//			СтрокаТаблицы.Значение = Справочники[ТипСпр].НайтиПоКоду(Строка.ЗначениеСвойства);
			//		КонецЕсли;
			//		//Шилов М.В. 21.02.14
			//	Иначе
			//		СтрокаТаблицы.Значение = Строка.ЗначениеСвойства;
			//	КонецЕсли;
			//Иначе
			//	Package = "Не найдена структурная единица с кодом="+Строка.Контрагент;
			//	Результат = ЛОЖЬ;
			//КонецЕсли;
			//СтруктурнаяЕдиницаОбъект.Записать();   
			//}
			//КотлячковаЕВ 2014-06-18 09:49:13 }
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;           
КонецФункции

Функция Финансы_ЗначенияСвойствОбъектов(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			Ссылка = Справочники[Строка.ТипОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Объект));
			Объект = Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			Свойство = ПланыВидовХарактеристик[Строка.ТипСвойства].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Свойство));
			СтрокаТаблицы = Объект.ДополнительныеРеквизиты.Найти(Свойство,"Свойство");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = Объект.ДополнительныеРеквизиты.Добавить();
				СтрокаТаблицы.Свойство = Свойство;
			КонецЕсли;	
			СтрокаТаблицы.Значение = Свойство.ТипЗначения.ПривестиЗначение(Строка.Значение);
			Объект.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_ЗначенияСвойств(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			Ссылка = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = XDTO.Description;
		Объект.Код = XDTO.Code;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		ПВХ=ПланыВидовХарактеристик[XDTO.TypeOwner].НайтиПоКоду(XDTO.Owner);
		Если  ПВХ.Пустая() Тогда
			ПВХ = ПланыВидовХарактеристик[XDTO.TypeOwner].СоздатьЭлемент();
			ПВХ.Код          = XDTO.Owner;
			ПВХ.УстановитьСсылкуНового(Ссылка);
			ПВХ.ТипЗначения = Новый ОписаниеТипов(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
			ПВХ.Записать();
		КонецЕсли;
		Объект.Владелец = ПВХ; 
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции


Функция ПолучитьИнформациюОбОшибке(Знач ИнформацияОбОшибке,ИмяСобытия = "WebService") Экспорт
	ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Если ПараметрыСеанса.Отладка Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	КонецЕсли;
	Возврат ОписаниеОшибки;
	//Если ИнформацияОбОшибке = Неопределено Тогда
	//	Возврат("");
	//ИначеЕсли НЕ ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
	//	Возврат("Неверный тип параметра ИнформацияОбОшибке в функции ПолучитьИнформациюОбОшибке!");
	//КонецЕсли;
	//ОписаниеИнформацииОбОшибке = "";
	//Сдвиг = "";
	//Пока Не ИнформацияОбОшибке = Неопределено Цикл
	//	ОписаниеИнформацииОбОшибке = ОписаниеИнформацииОбОшибке + "
	//	|" + Сдвиг + ?(ИнформацияОбОшибке.НомерСтроки=0,"","{"  +  ИнформацияОбОшибке.ИмяМодуля + "(" + ИнформацияОбОшибке.НомерСтроки + ")}: ") + ИнформацияОбОшибке.Описание;
	//	ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	//	Сдвиг = Сдвиг + "    ";
	//КонецЦикла;
	//Возврат(СокрЛП(ОписаниеИнформацииОбОшибке));
КонецФункции

Функция ПолучитьОбъектXDTO(Текст) Экспорт
	//Если ПараметрыСеанса.Отладка Тогда
	//	ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Информация,,,Текст);
	//КонецЕсли;	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Текст);
	ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипДанныхXML = Неопределено Тогда
		XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Иначе	
		ПространствоИмен = ТипДанныхXML.URIПространстваИмен;
		ИмяТипа = ТипДанныхXML.ИмяТипа;
		Если НЕ ЗначениеЗаполнено(ПространствоИмен) Тогда
			ПространствоИмен = Метаданные.ПакетыXDTO[ИмяТипа].ПространствоИмен;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИмяТипа) Тогда
			ИмяТипа = ПространствоИмен;
			Пока Найти(ИмяТипа,"/")<>0 Цикл
				ИмяТипа = Сред(ИмяТипа,Найти(ИмяТипа,"/")+1);
			КонецЦикла;	
		КонецЕсли;
		Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
		Если Пакет.КорневыеСвойства.Количество() = 0 Тогда
			Тип = Пакет.Получить(ИмяТипа);
		Иначе	
			Тип = Пакет.КорневыеСвойства.Получить(ИмяТипа).Тип;
		КонецЕсли;	
		XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип);
	КонецЕсли;	
	Возврат XDTO;
КонецФункции

//////////////////////процедуры получения данных из Финансов///////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
