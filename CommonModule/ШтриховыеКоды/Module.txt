
Функция ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода) Экспорт
	
	// Зададим размер картинки
	ВнешняяКомпонента.Ширина = ПараметрыШтрихкода.Ширина;
	ВнешняяКомпонента.Высота = ПараметрыШтрихкода.Высота;
	
	// Разрешим компоненте самой определять тип кода
	ВнешняяКомпонента.АвтоТип = ПараметрыШтрихкода.АвтоТип;//Ложь;
	ВнешняяКомпонента.ТипКода         = ПараметрыШтрихкода.ТипКода;
	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;
	Попытка
		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	Исключение
		
	КонецПопытки;
	
	// Или установим код EAN-13
	// ВнешняяКомпонента.ТипКода = 1;
	//
	// Тип смотрим в документации на внешнуюю компоненту
	
	// Если код содержит контрольный символ, обязательно указываем
	ВнешняяКомпонента.СодержитКС = СтрДлина(ПараметрыШтрихкода.Штрихкод) = 13;
	
	// Если отображать контрольный символ не нужно
	// ВнешняяКомпонента.ВидимостьКС = Ложь;
	
	// Формируем картинку штрихкода
	ВнешняяКомпонента.ЗначениеКода = ПараметрыШтрихкода.Штрихкод;
	
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
		// Скорректируем ширину
		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода + 10;
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция выполняет подключение внешней компоненты и ее первоначальную настройку.
// 
// Параметры: 
//  Нет 
// 
// Возвращаемое значение: 
//  Картинка - Картинка со сформированным штрихкодом или НЕОПРЕДЕЛЕНО
Функция ПодключитьВнешнююКомпонентуПечатиШтрихкода() экспорт
	
	// В зависимости от типа платформы подключим соответствующую внешнюю компоненту
	ПодключениеВыполнено = Неопределено;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьЦенниковИЭтикеток.Макет.КомпонентаПечатиШтрихкодовWindows32", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьЦенниковИЭтикеток.Макет.КомпонентаПечатиШтрихкодовWindows64", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьЦенниковИЭтикеток.Макет.КомпонентаПечатиШтрихкодовLinux32", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
	Иначе
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьЦенниковИЭтикеток.Макет.КомпонентаПечатиШтрихкодовLinux64", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
	КонецЕсли;
	
	// Создадим объект внешней компоненты
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкода.Barcode");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем
		Возврат Неопределено;
	Иначе
		
		// Установим основные параметры компоненты
		
		// Если в системе установлен шрифт Tahoma
		Если ВнешняяКомпонента.НайтиШрифт("Tahoma") = Истина Тогда
			// Выбираем его как шрифт для формирования картинки
			ВнешняяКомпонента.Шрифт = "Tahoma";
		Иначе
			
			// Шрифт Tahoma в системе отсутствует
			// Обойдем все доступные компоненте шрифты
			Для Сч = 0 По ВнешняяКомпонента.КоличествоШрифтов -1 Цикл
				// Получим очередной шрифт, доступный компоненте
				ТекущийШрифт = ВнешняяКомпонента.ШрифтПоИндексу(Сч);
				// Если шрифт доступен
				Если ТекущийШрифт <> Неопределено Тогда
					// Они и будет шрифтом для формирования штри-кода
					ВнешняяКомпонента.Шрифт = ТекущийШрифт;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Утановим размер шрифта
		ВнешняяКомпонента.РазмерШрифта = 12;
		
		Возврат ВнешняяКомпонента;
		
	КонецЕсли;
	
КонецФункции

Функция ПроверкаВыбораВесовогоТовара(Весы, Номенклатура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СправочникВесы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Весы КАК СправочникВесы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВесовойТовар КАК ВесовойТовар 
	|		ПО  (ВЫБОР
	|				КОГДА СправочникВесы.Родитель ЕСТЬ NULL 
	|					ТОГДА СправочникВесы.Ссылка = ВесовойТовар.Владелец
	|				ИНАЧЕ СправочникВесы.Ссылка.Родитель = ВесовойТовар.Владелец
	|				 ИЛИ СправочникВесы.Ссылка = ВесовойТовар.Владелец
	|				 ИЛИ СправочникВесы.Ссылка.Родитель.Родитель = ВесовойТовар.Владелец
	|				 ИЛИ СправочникВесы.Ссылка.Родитель.Родитель.Родитель = ВесовойТовар.Владелец
	|				 ИЛИ СправочникВесы.Ссылка.Родитель.Родитель.Родитель.Родитель = ВесовойТовар.Владелец
	|			КОНЕЦ)
	|ГДЕ
	|	ВесовойТовар.Номенклатура = &Номенклатура   
	|";
	Запрос.Текст = Запрос.Текст + "И СправочникВесы.Ссылка В ИЕРАРХИИ (&Весы) ИТОГИ ПО Ссылка ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Весы",Весы);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;	
	КонецЕсли;	
	Сообщить("Товар " + СокрЛП(Номенклатура) + " уже есть в списке!");
	Возврат Истина;	
КонецФункции	

//Функция ПроверкаФасованный(Номенклатура) Экспорт
//	Отбор = Новый Структура;
//	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.ТоварФасованный;
//	Отбор.Вставить("Свойство",Свойство);
//	Если Свойство.ОбщееСвойство Тогда
//		Отбор.Вставить("СтруктурнаяЕдиница",Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
//	Иначе	
//		Отбор.Вставить("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
//	КонецЕсли;	
//		Отбор.Вставить("Объект",Номенклатура);
//		Фасованный = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор).Значение;
//		Если  Фасованный=Истина Тогда
//			Сообщить("Товар "+СокрЛП(Номенклатура)+" фасованный!");
//			Возврат Истина;
//		КонецЕсли; 
//	Возврат Ложь;	
//КонецФункции	
Функция ПолучитьНовыйPLU(Весы) Экспорт
	
	//Если Весы.Родитель.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(МАКСИМУМ(ВесовойТовар.Код), 0) + 1 КАК Код
		               |ИЗ
		               |	Справочник.Весы КАК СправочникВесы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВесовойТовар КАК ВесовойТовар
		               |		ПО (ВЫБОР
		               |				КОГДА &Весы = НЕОПРЕДЕЛЕНО
		               |					ТОГДА ЛОЖЬ
		               |				КОГДА СправочникВесы.ВыгружатьТоварыТолькоЭтихВесов = ИСТИНА
		               |					ТОГДА СправочникВесы.Ссылка = ВесовойТовар.Владелец
		               |				ИНАЧЕ СправочникВесы.Ссылка = ВесовойТовар.Владелец
		               |						ИЛИ СправочникВесы.Родитель.Ссылка = ВесовойТовар.Владелец
		               |						ИЛИ СправочникВесы.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
		               |						ИЛИ СправочникВесы.Родитель.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
		               |						ИЛИ СправочникВесы.Родитель.Родитель.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
		               |			КОНЕЦ)
		               |ГДЕ
		               |	СправочникВесы.Ссылка = &Весы
		               |	И ВесовойТовар.Номенклатура ЕСТЬ НЕ NULL ";
		Запрос.УстановитьПараметр("Весы", Весы);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Код;
	//Иначе
	//	Возврат ПолучитьНовыйPLU(Весы.Родитель);
	//КонецЕсли;
	
КонецФункции

Функция ДобавитьВесовойТовар(Весы, Номенклатура, ТранслироватьДатуПроизводства = Ложь) Экспорт

	//Если ПроверкаВыбораВесовогоТовара(Весы, Номенклатура) Тогда
	//	Возврат Справочники.ВесовойТовар.ПустаяСсылка();
	//КонецЕсли;	
	//Если ШтриховыеКоды.ПроверкаФасованный(Номенклатура) Тогда
	//	Возврат;
	//КонецЕсли;
	НовыйЭлемент = Справочники.ВесовойТовар.СоздатьЭлемент();
	НовыйЭлемент.Владелец = Весы;
	НовыйЭлемент.Номенклатура = Номенклатура;
	НовыйЭлемент.ТранслироватьДатуПроизводства = ТранслироватьДатуПроизводства; //dps+ 15,08,28 136118
	Попытка
		НовыйЭлемент.Записать();
	Исключение
		//Возврат Справочники.ВесовойТовар.ПустаяСсылка();
	КонецПопытки;
	
	Возврат НовыйЭлемент.Ссылка;

КонецФункции // ДобавитьВесовойТовар()

Функция УдалитьВесовойТовар(ВесовойТоварСсылка) Экспорт

	Попытка
		ВесовойТоварСсылка.ПолучитьОбъект().Удалить();
		Рез = Истина;
	Исключение
	    Рез = Ложь;
	КонецПопытки;
	
	Возврат Рез;
КонецФункции

Функция ПолучитьМассивТиповКодовВесовогоТовара() Экспорт	//может потом пригодится

	мТипыКодов = Новый Массив(3);
	мТипыКодов.Добавить("PLU");
	мТипыКодов.Добавить("VPLU");
	мТипыКодов.Добавить("MANL");
	
	Возврат мТипыКодов;
КонецФункции

//по транзакционному товару Номенклатура определяем его ШК
Функция ПолучитьМассивНоменклатурыСШК(Номенклатура, мТипыКодов) Экспорт	//может потом пригодится
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	//во временную - товар с нужным типом кода
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.ФлагОсновногоШК
	               |ПОМЕСТИТЬ НоменклатураСШК
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	(Номенклатура.Родитель = &Номенклатура
	               |			ИЛИ Номенклатура.Ссылка = &Номенклатура)
	               |	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	               |	И Номенклатура.ТипКода В
	               |			(ВЫБРАТЬ
	               |				СлужебныеКоды.Ссылка
	               |			ИЗ
	               |				Справочник.СлужебныеКоды КАК СлужебныеКоды
	               |			ГДЕ
	               |				СлужебныеКоды.Код В (&ТипыКодов))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураСШК.Ссылка
	               |ИЗ
	               |	НоменклатураСШК КАК НоменклатураСШК
	               |ГДЕ
	               |	НоменклатураСШК.ФлагОсновногоШК";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипыКодов", мТипыКодов);

	тзРезультат = Запрос.Выполнить().Выгрузить();
	Если тзРезультат.Количество() = 1 Тогда	//у товара определен основной ШК
		мНоменклатураСШК = тзРезультат.ВыгрузитьКолонку("Ссылка");
	Иначе	//делаем выборку возможных
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НоменклатураСШК.Ссылка
		|ИЗ
		|	НоменклатураСШК КАК НоменклатураСШК";
		
		мНоменклатураСШК = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат мНоменклатураСШК;
КонецФункции

Функция ПолучитьМассивНоменклатурыСШКДляВесов(Номенклатура) Экспорт
//для весов особые условия
//EAN13 тоже может быть выгружен на весы, но при условии, что начало кода элемента справочника совпадает с префиксом штучного товара

	мТипыКодов = Новый Массив(2);
	мТипыКодов.Добавить("PLU");
	мТипыКодов.Добавить("VPLU");
	//мТипыКодов.Добавить("MANL");
	//мТипыКодов.Добавить("EAN13");
	ПрефиксШтучногоТовара = СокрЛП(Константы.ПрефиксШтучногоТовара.Получить());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	//во временную - товар с нужным типом кода
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипыКодов", мТипыКодов);
	Запрос.УстановитьПараметр("ПрефиксШтучногоТовара", ПрефиксШтучногоТовара);
	Запрос.УстановитьПараметр("ПрефиксШтучногоТовараДлина", СтрДлина(ПрефиксШтучногоТовара));

	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.ФлагОсновногоШК
	               |ПОМЕСТИТЬ НоменклатураСШК
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	(Номенклатура.Родитель = &Номенклатура
	               |			ИЛИ Номенклатура.Ссылка = &Номенклатура)
	               |	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	               |	И (Номенклатура.ТипКода В
	               |				(ВЫБРАТЬ
	               |					СлужебныеКоды.Ссылка
	               |				ИЗ
	               |					Справочник.СлужебныеКоды КАК СлужебныеКоды
	               |				ГДЕ
	               |					СлужебныеКоды.Код В (&ТипыКодов))
	               |			ИЛИ Номенклатура.ТипКода.Код = ""EAN13""
	               |				И (ВЫРАЗИТЬ(ПОДСТРОКА(Номенклатура.Код, 0, &ПрефиксШтучногоТовараДлина) КАК СТРОКА(6))) = &ПрефиксШтучногоТовара)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураСШК.Ссылка
	               |ИЗ
	               |	НоменклатураСШК КАК НоменклатураСШК
	               |ГДЕ
	               |	НоменклатураСШК.ФлагОсновногоШК";

	тзРезультат = Запрос.Выполнить().Выгрузить();
	Если тзРезультат.Количество() = 1 Тогда	//у товара определен основной ШК
		мНоменклатураСШК = тзРезультат.ВыгрузитьКолонку("Ссылка");
	Иначе	//делаем выборку возможных
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НоменклатураСШК.Ссылка
		|ИЗ
		|	НоменклатураСШК КАК НоменклатураСШК";
		
		мНоменклатураСШК = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат мНоменклатураСШК;
КонецФункции

Функция ПолучитьМассивСсылокТиповШтриховыхКодов() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СлужебныеКоды.Ссылка
		|ИЗ
		|	Справочник.СлужебныеКоды КАК СлужебныеКоды
		|ГДЕ
		|	(СлужебныеКоды.Код = ""VPLU""
		|			ИЛИ СлужебныеКоды.Код = ""MANL""	
		|			ИЛИ СлужебныеКоды.Код = ""PLU""
		|			ИЛИ ПОДСТРОКА(СлужебныеКоды.Код, 1, 3) = ""EAN""
		|			ИЛИ ПОДСТРОКА(СлужебныеКоды.Код, 1, 3) = ""UPC""
		|			ИЛИ ПОДСТРОКА(СлужебныеКоды.Код, 1, 3) = ""UCC""
		|			ИЛИ ПОДСТРОКА(СлужебныеКоды.Код, 1, 4) = ""ISBN"")";

	Рез = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Рез;

КонецФункции

// Осуществляет поиск транзакционного товара по коду с "правильным" типом кода
// предполагается, что шк может быть либо на транзакционном уровне, либо на ступень ниже
// Возвращает структуру массивов найденных товаров, веса (если шк весовой)
Функция ПрочитатьШтрихкод(ШК) Экспорт

	мТипыКодов = ПолучитьМассивСсылокТиповШтриховыхКодов();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тНоменклатура.Ссылка,
		|	тНоменклатура.СтрокаВес
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВЫБОР
		|			КОГДА Номенклатура.Транзакционный
		|				ТОГДА Номенклатура.Ссылка
		|			ИНАЧЕ ВЫБОР
		|					КОГДА Номенклатура.Родитель.Транзакционный
		|						ТОГДА Номенклатура.Родитель
		|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				КОНЕЦ
		|		КОНЕЦ КАК Ссылка,
		|		ВЫРАЗИТЬ(ПОДСТРОКА(&ШК, ЕСТЬNULL(ФорматыPLU.ДлинаПрефикса, 0) + ЕСТЬNULL(ФорматыPLU.ДлинаКода, 0) + 1, ЕСТЬNULL(ФорматыPLU.ДлинаКоличества, 0)) КАК СТРОКА(9)) КАК СтрокаВес
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФорматыPLU КАК ФорматыPLU
		|			ПО Номенклатура.ФорматPLU = ФорматыPLU.Код
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|			ПО Номенклатура.Ссылка = НоменклатураДополнительныеРеквизиты.Ссылка
		|	ГДЕ
		|		Номенклатура.Группа = 0
		|		И (Номенклатура.ТипКода В (&ТипыКодов)
		|					И ВЫБОР
		|						КОГДА ФорматыPLU.Ссылка ЕСТЬ NULL 
		|							ТОГДА Номенклатура.Код = &ШК
		|						ИНАЧЕ Номенклатура.ПрефиксPLU = (ВЫРАЗИТЬ(ПОДСТРОКА(&ШК, 1, ФорматыPLU.ДлинаПрефикса) КАК СТРОКА(2)))
		|								И Номенклатура.Код = (ВЫРАЗИТЬ(ПОДСТРОКА(&ШК, ФорматыPLU.ДлинаПрефикса + 1, ФорматыPLU.ДлинаКода) КАК СТРОКА(20)))
		|					КОНЕЦ
		|				ИЛИ НоменклатураДополнительныеРеквизиты.Значение.Наименование = &ШК
		|					И НоменклатураДополнительныеРеквизиты.Свойство = &Свойство)) КАК тНоменклатура";

	Запрос.УстановитьПараметр("ШК", ШК);
	Запрос.УстановитьПараметр("ТипыКодов", мТипыКодов);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаЛожныйШК)));
	Результат = Запрос.Выполнить();
	
	мНоменклатура = Новый Массив;
	мВес = Новый Массив;
	
	Если Результат.Пустой() Тогда
		СтрокаСообщения = НСтр("ru = 'Номенклатура не найдена по штрихкоду: %1%.'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ШК);
		Сообщить(СтрокаСообщения);
		Количество = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			мНоменклатура.Добавить(Выборка.Ссылка);
			
			СтрокаВес = Выборка.СтрокаВес;
			Если СтрокаВес = "" Тогда
				Вес = 0;
			Иначе
				Вес = Число(СтрокаВес) / 1000;
			КонецЕсли;
			мВес.Добавить(Вес);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("мНоменклатура, мВес", мНоменклатура, мВес);

КонецФункции
