////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ"
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.1.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//
// Вызывается перед началом обновления данных ИБ.
//
Функция ОбработчикиОбновления() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	//popn+
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыПереопределяемый.ПервыйЗапуск";	
	
	Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "7.0.3.2";
    Обработчик.Процедура = "ОбновлениеИнформационнойБазыПереопределяемый.ПерейтиНаВерсию_7_0_3_2";
	
	// КонтактнаяИнформация
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейПереопределяемый.КонтактнаяИнформацияОбновлениеИБ";	
	//popn-
	
	Возврат Обработчики;
	
КонецФункции


Процедура ПерейтиНаВерсию_7_0_2_3() Экспорт
	
	НачатьТранзакцию();
	Выборка = Справочники.Пользователи.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Наименование <> "" И Выборка.Наименование <> "<Не указан>" Тогда
			ОбъектПользователя = Выборка.ПолучитьОбъект();
			Попытка
				ОбъектПользователя.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаГрупп = Справочники.ГруппыПользователей.Выбрать();
	Пока ВыборкаГрупп.Следующий() Цикл
		ОбъектГруппы = ВыборкаГрупп.ПолучитьОбъект();
		ОбъектГруппы.ДополнительныеСвойства.Вставить("НаборЗаписейСоставГруппПользователей",ОбъектГруппы.Состав);
		Попытка
			ОбъектГруппы.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры


Процедура ПерейтиНаВерсию_7_0_3_2() Экспорт
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		Возврат;
	КонецЕсли;	
	НачатьТранзакцию();
	ТипСклад = Тип("СправочникСсылка.Склады");
	Выборка = Справочники.ПравилаАвтоЗаказов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Владелец) = ТипСклад Тогда
			ОбъектПравилаАвтоЗаказов = Выборка.ПолучитьОбъект();
			ОбъектПравилаАвтоЗаказов.СкладПроизводства = ОбъектПравилаАвтоЗаказов.Владелец;
			ОбъектПравилаАвтоЗаказов.Владелец = ОбъектПравилаАвтоЗаказов.СкладПроизводства.Владелец;
			Попытка
				ОбъектПравилаАвтоЗаказов.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ПервыйЗапуск() Экспорт
	НачатьТранзакцию();
	
	ГруппаДоступаАдминистраторы = Справочники.ГруппыДоступа.Администраторы.ПолучитьОбъект();
	ГруппаДоступаАдминистраторы.Профиль = Справочники.ПрофилиГруппДоступа.Администратор;
    ГруппаДоступаАдминистраторы.Записать();	
	
	Если ОбменДаннымиРБДСервер.НетУзловКромеТекущего("ОбменRIB") Тогда
		НовыйУзел = ПланыОбмена.ОбменRIB.СоздатьУзел();
		НовыйУзел.Код = 1;
		НовыйУзел.Наименование = "RIB";
		НовыйУзел.Записать();
	КонецЕсли;	
	Если ОбменДаннымиРБДСервер.НетУзловКромеТекущего("ОбменЦВД") Тогда
		НовыйУзел = ПланыОбмена.ОбменЦВД.СоздатьУзел();
		НовыйУзел.Код = 1;
		НовыйУзел.Наименование = "ЦВД";
		НовыйУзел.Записать();
	КонецЕсли;	
	Если ОбменДаннымиРБДСервер.НетУзловКромеТекущего("ОбменORDM") Тогда
		НовыйУзел = ПланыОбмена.ОбменORDM.СоздатьУзел();
		НовыйУзел.Код = 1;
		НовыйУзел.Наименование = "ORDM";
		НовыйУзел.Записать();
	КонецЕсли;
	Если ОбменДаннымиРБДСервер.НетУзловКромеТекущего("ОбменТД6") Тогда
		НовыйУзел = ПланыОбмена.ОбменТД6.СоздатьУзел();
		НовыйУзел.Код = 1;
		НовыйУзел.Наименование = "RS.Financials";
		НовыйУзел.Записать();
	КонецЕсли;
	Если Справочники.Организации.НайтиПоКоду(1)=Справочники.Организации.ПустаяСсылка() Тогда
		Фирма = Справочники.Организации.СоздатьЭлемент();
		СтрокаGUID = "4ffffc24-d284-11e2-9cf0-000c29a1d1ad"; //Гуид фирмы Ретейл из демо-базы. Для корректной синхронизации с базами RSS, необходимо чтобы фирма при начальной настройке создавалась с одинаковым гуидом.
		НовыйGUID = Новый УникальныйИдентификатор(СтрокаGUID);
		Фирма.УстановитьСсылкуНового(Справочники.Организации.ПолучитьСсылку(НовыйGUID));
		Фирма.Код = 1;
		Фирма.Наименование = "Наша фирма";
		Фирма.Записать();
	КонецЕсли;
	Если Справочники.Валюты.НайтиПоКоду("643") = Справочники.Валюты.ПустаяСсылка() Тогда
		ВалютаРубль = Справочники.Валюты.СоздатьЭлемент();
		ВалютаРубль.Код = "643";
		ВалютаРубль.Наименование = "RUR";
		ВалютаРубль.НаименованиеПолное = "Российский рубль";
		ВалютаРубль.ПараметрыПрописиНаРусском = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2 знака";
		ВалютаРубль.Записать();
	КонецЕсли;
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда	
		Если ОбменДаннымиРБДСервер.НетУзловКромеТекущего("ОбменSMS") Тогда
			НовыйУзел = ПланыОбмена.ОбменSMS.СоздатьУзел();
			НовыйУзел.Код = 1;
			НовыйУзел.Наименование = "SMS";
			НовыйУзел.Записать();
		КонецЕсли;	
	Иначе	
		НовыйУзел = ПланыОбмена.ОбменРБД.ЭтотУзел().ПолучитьОбъект();
		НовыйУзел.Код = 0;
		НовыйУзел.Наименование = "Центр";
		НовыйУзел.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр;
		НовыйУзел.Записать();
		
		ЗаполнитьСправочникФорматыПЛУ_70119();
	КонецЕсли;	
	
	ЗафиксироватьТранзакцию();
	
	
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		//заполняем пользователей
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиСтруктурныхЕдиниц.Имя,
		|	ПользователиСтруктурныхЕдиниц.ПолноеИмя,
		|	ПользователиСтруктурныхЕдиниц.АутентификацияСтандартная,
		|	ПользователиСтруктурныхЕдиниц.ПоказыватьВСпискеВыбора,
		|	ПользователиСтруктурныхЕдиниц.Пароль,
		|	ПользователиСтруктурныхЕдиниц.АутентификацияОС КАК АутентификацияОС,
		|	ПользователиСтруктурныхЕдиниц.ПользовательОС,
		|	ПользователиСтруктурныхЕдиниц.РежимЗапуска,
		|	ПользователиСтруктурныхЕдиниц.ОсновнойИнтерфейс,
		|	ПользователиСтруктурныхЕдиниц.УникальныйИдентификатор,
		|	ПользователиСтруктурныхЕдиниц.ПарольУстановлен,
		|	ПользователиСтруктурныхЕдиниц.Язык,
		|	ПользователиСтруктурныхЕдиниц.Роли,
		|	ПользователиСтруктурныхЕдиниц.ЗапрещеноИзменятьПароль,
		|	ПользователиСтруктурныхЕдиниц.Пользователь
		|ИЗ
		|	РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
		|ГДЕ
		|	ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|
		|УПОРЯДОЧИТЬ ПО
		|	АутентификацияОС УБЫВ";
		
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);  //V
		
		Результат = Запрос.Выполнить();
		
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаРезультата = Результат.Выгрузить();
		Для Каждого  ВыборкаДетальныеЗаписи из ТаблицаРезультата Цикл
			Если ВыборкаДетальныеЗаписи.АутентификацияОС = Ложь Тогда
				СписокРолей = ВыборкаДетальныеЗаписи.Роли.Получить();
				Если СписокРолей <> Неопределено Тогда
					Для каждого Роль Из СписокРолей Цикл
						Если ВРег(Роль) = ВРег("ПолныеПрава") Тогда
							ЗаполнитьПользователей(ВыборкаДетальныеЗаписи);
							ТаблицаРезультата.Удалить(ВыборкаДетальныеЗаписи);
							Прервать;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		
		Для Каждого  ВыборкаДетальныеЗаписи из ТаблицаРезультата Цикл
			ЗаполнитьПользователей(ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		//заполняем Регламентные задания
		
		НаборЗаписей = РегистрыСведений.ПараметрыСтруктурныхЕдиниц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница); //V
		НаборЗаписей.Прочитать();
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ПервыйЗапуск()

Процедура ЗаполнитьСправочникФорматыПЛУ_70119()

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.ФорматыPLU");
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьФорматPLU("A", 1, 4, 6);
	СоздатьФорматPLU("B", 1, 5, 5);
	СоздатьФорматPLU("C", 1, 4, 6);
	СоздатьФорматPLU("D", 1, 5, 5);
	СоздатьФорматPLU("E", 2, 4, 5);
	СоздатьФорматPLU("F", 2, 4, 5);
	СоздатьФорматPLU("G", 2, 5, 4);
	СоздатьФорматPLU("H", 2, 5, 5);
	СоздатьФорматPLU("I", 2, 4, 6);
	СоздатьФорматPLU("J", 2, 4, 6);
	СоздатьФорматPLU("K", 2, 5, 5);

КонецПроцедуры

Процедура СоздатьФорматPLU(Код, ДлинаПрефикса, ДлинаКода, ДлинаКоличества)

	оФорматPLU = Справочники.ФорматыPLU.СоздатьЭлемент();
	оФорматPLU.Код = Код;
	оФорматPLU.ДлинаПрефикса = ДлинаПрефикса;
	оФорматPLU.ДлинаКода = ДлинаКода;
	оФорматPLU.ДлинаКоличества = ДлинаКоличества;
	оФорматPLU.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПользователей(ВыборкаДетальныеЗаписи)
	
	ОписаниеОшибки = "";
	Свойства = Новый Структура;
	Свойства.Вставить("ПользовательИнфБазыУникальныйИдентификатор",   ВыборкаДетальныеЗаписи.УникальныйИдентификатор);
	Свойства.Вставить("ПользовательИнфБазыИмя",                       ВыборкаДетальныеЗаписи.Имя);
	Свойства.Вставить("ПользовательИнфБазыПолноеИмя",                 ВыборкаДетальныеЗаписи.ПолноеИмя);
	Свойства.Вставить("ПользовательИнфБазыАутентификацияСтандартная", ВыборкаДетальныеЗаписи.АутентификацияСтандартная);
	Свойства.Вставить("ПользовательИнфБазыПоказыватьВСпискеВыбора",   ВыборкаДетальныеЗаписи.ПоказыватьВСпискеВыбора);
	Свойства.Вставить("ПользовательИнфБазыПароль",                    ВыборкаДетальныеЗаписи.Пароль);
	Свойства.Вставить("ПользовательИнфБазыПарольУстановлен",          ВыборкаДетальныеЗаписи.ПарольУстановлен);
	Свойства.Вставить("ПользовательИнфБазыЗапрещеноИзменятьПароль",   ВыборкаДетальныеЗаписи.ЗапрещеноИзменятьПароль);
	Свойства.Вставить("ПользовательИнфБазыАутентификацияОС",          ВыборкаДетальныеЗаписи.АутентификацияОС);
	Свойства.Вставить("ПользовательИнфБазыПользовательОС",            ВыборкаДетальныеЗаписи.ПользовательОС);
	Свойства.Вставить("ПользовательИнфБазыОсновнойИнтерфейс",         ВыборкаДетальныеЗаписи.ОсновнойИнтерфейс);
	Свойства.Вставить("ПользовательИнфБазыРежимЗапуска",              ВыборкаДетальныеЗаписи.РежимЗапуска);
	Свойства.Вставить("ПользовательИнфБазыЯзык",                      ВыборкаДетальныеЗаписи.Язык);
	
	
	Роли = Новый Массив;
	СписокРолей = ВыборкаДетальныеЗаписи.Роли.Получить();
	Если СписокРолей <> Неопределено Тогда
		Для каждого Роль Из СписокРолей Цикл
			Роли.Добавить(Роль);
		КонецЦикла;
	КонецЕсли;	
	
	Если НЕ Пользователи.ЗаписатьПользователяИБ(ВыборкаДетальныеЗаписи.Имя, Свойства, Роли, Истина, ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	Иначе
		Запись = РегистрыСведений.ПользователиСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись,ВыборкаДетальныеЗаписи);
		Запись.УникальныйИдентификатор = Свойства.ПользовательИнфБазыУникальныйИдентификатор;
		Запись.СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;  //V
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры 

// Вызывается перед обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
	
КонецПроцедуры

// Вызывается после завершении обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсияИБ     - Строка - версия ИБ до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсияИБ        - Строка - версия ИБ после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков
//                                             обновления, сгруппированных по номеру версии.
//  Итерирование по выполненным обработчикам:
//		Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//	
//			Если Версия.Версия = "*" Тогда
//				группа обработчиков, которые выполняются всегда
//			Иначе
//				группа обработчиков, которые выполняются для определенной версии 
//			КонецЕсли;
//	
//			Для Каждого Обработчик Из Версия.Строки Цикл
//				...
//			КонецЦикла;
//	
//		КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево -	если Истина, то выводить форму с описанием 
//											обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсияИБ, Знач ТекущаяВерсияИБ,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений системы.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновлений.
//   
// См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	
	
КонецПроцедуры

// Получает список обработчиков обновления ИБ, которые не нужно выполнять.
// Отключать можно только те обработчики, у которых номер версии "*".
//
// Пример добавления отключаемого обработчика в список:
//   НовоеИсключение = ОтключаемыеОбработчики.Добавить();
//   НовоеИсключение.ИдентификаторБиблиотеки = "СтандартныеПодсистемы";
//   НовоеИсключение.Версия = "2.1.2.3";
//   НовоеИсключение.Процедура = "ВариантыОтчетов.Обновить";
//
// Версия - номер версии конфигурации, в которой нужно отключить
//          выполнение обработчика.
//
Процедура ДобавитьОтключаемыеОбработчикиОбновления(ОтключаемыеОбработчики) Экспорт
	
	
КонецПроцедуры

// Переопределяет текст подсказки, указывающий путь к форме "Результаты обновления программы".
//
// Параметры:
//  ТекстПодсказки - Строка, текст подсказки.
//
Процедура ПолучитьТекстПоясненияДляРезультатовОбновленияПрограммы(ТекстПодсказки) Экспорт
	
	
КонецПроцедуры