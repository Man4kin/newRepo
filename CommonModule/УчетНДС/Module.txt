// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо ПТУ либо корректировку ПТУ)
// либо первоначальный документ ПТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументПоступления(ДокПоступления, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокПоступления) 
		И ТипЗнч(ДокПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")
		И (ДокПоступления.РежимКорректировки = Перечисления.РежимыКорректировок.ИсправлениеОшибки ИЛИ Исходный) 
		И ДокПоступления.ДокументПоступления <> ДокПоступления Тогда
		
		Возврат ПолучитьИсправляемыйДокументПоступления(ДокПоступления.ДокументПоступления, Исходный);
		
	Иначе
		Возврат ДокПоступления;
	КонецЕсли;	
	
КонецФункции

// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо РТУ либо корректировку РТУ)
// либо первоначальный документ РТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокРеализации) 
		И ТипЗнч(ДокРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И (ДокРеализации.РежимКорректировки = Перечисления.РежимыКорректировок.ИсправлениеОшибки ИЛИ Исходный) Тогда
		
		Возврат ПолучитьИсправляемыйДокументРеализации(ДокРеализации.ДокументРеализации, Исходный);
		
	Иначе
		Возврат ДокРеализации;
	КонецЕсли;	
	
КонецФункции

// Функция производит поиск счета-фактуры выданного на реализацию или корректировочного с указанным документом-основанием
//
// Параметры:
//  ДокументОснование	- ссылка на документ, для которого надо найти счет-фактуру
//  ИсключаемыйСФ		- ссылка на счет-фактуру, исключаемый при поиске
//  ПометкаУдаления		- <Булево> - значение пометки счета-фактуры для отбора при поиске
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОснование, ИсключаемыйСФ = Неопределено, ПометкаУдаления = Ложь, СтруктураОтбора = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ПометкаУдаления",   ПометкаУдаления);
	Запрос.УстановитьПараметр("ИсключаемыйСФ",     ИсключаемыйСФ);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетаФактуры.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактура КАК СчетаФактуры
	|ГДЕ
	|	СчетаФактуры.ДокОснование = &ДокументОснование
	|	И СчетаФактуры.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|	И СчетаФактуры.ПометкаУдаления = &ПометкаУдаления
	|	И СчетаФактуры.Ссылка <> &ИсключаемыйСФ";

	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		ТекстУсловия = "";
		Для Каждого КлючЗначение Из СтруктураОтбора Цикл
			ТекстУсловия = ТекстУсловия + "
			| И ";
			
			Если ТипЗнч(КлючЗначение.Значение) = Тип("СписокЗначений") 
				ИЛИ ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
				ТекстУсловия = ТекстУсловия + "ДокументыОснования." + КлючЗначение.Ключ + " В (&" + КлючЗначение.Ключ + ")";
			Иначе
				ТекстУсловия = ТекстУсловия + "ДокументыОснования." + КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + ТекстУсловия;
	КонецЕсли;

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СчетФактура;
	КонецЕсли;

КонецФункции

Функция ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(ВидСчетаФактурыСписка, ЭтоИсправление = Ложь, НаАвансДляКомитентаНаЗакупку = Ложь) Экспорт
	
	СписокТипов = Новый Массив;
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
		ИЛИ ЭтоИсправление И ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент 
		ИЛИ НаАвансДляКомитентаНаЗакупку Тогда 
		
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		
	Иначе
		
		СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		
		Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			
			СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратнаяНакладнаяОтПокупателя"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетРеализатора"));
			
		ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда	
			
			СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратнаяНакладнаяОтПокупателя"));
			
		ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
			// Список типов не требует корректировки
		ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
			СписокТипов.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуФирмами"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетРеализатора"));
		КонецЕсли;
		
		Если НЕ ЭтоИсправление Тогда
			ИндексУдаляемогоЭлемента = СписокТипов.Найти(Тип("ДокументСсылка.КорректировкаРеализации"));
			Если ИндексУдаляемогоЭлемента <> Неопределено Тогда
				СписокТипов.Удалить(ИндексУдаляемогоЭлемента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

Функция ОпределитьВидСчетаФактурыВыданногоПоТипуОснования(ДокументОснование) Экспорт

	СписокТиповНаАванс			= ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	СписокТиповНалоговыйАгент	= ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
	СписокТиповКорректировочный	= ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	
	Если СписокТиповКорректировочный.Найти(ТипЗнч(ДокументОснование)) <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		НомераТаблиц	= Новый Структура;
		Запрос.Текст	= 
		"ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка КАК ДокОснование,
		|	КорректировкаРеализации.Дата,
		|	КорректировкаРеализации.Фирма,
		|	КорректировкаРеализации.Контрагент,
		|	КорректировкаРеализации.РежимКорректировки,
		|	КорректировкаРеализации.ДокументРеализации,
		|	КорректировкаРеализации.ИсправляемыйДокумент,
		|	КорректировкаРеализации.ИсправляемыйДокумент.РежимКорректировки КАК ИсправляемыйДокументРеализацииВидОперации
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Ссылка = &ДокументОснование";
		
		Результат	= Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;;
		КонецЕсли;
		
		РеквизитыОснования	= Результат.Выбрать();
		РеквизитыОснования.Следующий();		
		
		Если ЗначениеЗаполнено(РеквизитыОснования.ИсправляемыйДокумент)
			И (ТипЗнч(РеквизитыОснования.ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации")) 
			И РеквизитыОснования.ИсправляемыйДокументРеализацииВидОперации = Перечисления.РежимыКорректировок.СогласованноеИзменение 
			И РеквизитыОснования.РежимКорректировки = Перечисления.РежимыКорректировок.ИсправлениеОшибки Тогда
			
			Возврат Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			
		ИначеЕсли РеквизитыОснования.РежимКорректировки = Перечисления.РежимыКорректировок.СогласованноеИзменение Тогда
			
			Возврат Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			
		Иначе		
			
			ОснованиеДляВидаОперации	= ПолучитьИсправляемыйДокументРеализации(ДокументОснование);
			
			Если СписокТиповНалоговыйАгент.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
				
				Возврат	Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
				
			ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда			
				
				//Если ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				//	ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				//	
				//	Возврат Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
				//Иначе
				//	Возврат Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
				//КонецЕсли;
				
			ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
				
				Возврат Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;	
				
			Иначе
				
				Возврат Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;	
				
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		
		Возврат Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьПараметрыСчетаФактуры(СчетФактура) Экспорт

	Результат = Новый Структура("Фирма, Контрагент, СуммаДокумента, ВалютаДокумента, СуммаУвеличение, СуммаУменьшение, СуммаНДСУвеличение, СуммаНДСУменьшение, СуммаНДСДокумента, СчетФактураБезНДС");
	Результат.СуммаДокумента = 0;
	Результат.СуммаНДСДокумента = 0;
	Результат.СуммаУвеличение = 0;
	Результат.СуммаНДСУвеличение = 0;
	Результат.СуммаУменьшение = 0;
	Результат.СуммаНДСУменьшение = 0;
	Результат.СчетФактураБезНДС = 0;
	
	Если ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактура") Тогда
		Ссылка = СчетФактура;
	Иначе
		Ссылка = СчетФактура.Ссылка;
	КонецЕсли; 
	
	
	ЭтоПолученныйСФ = Ложь;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактура") И (СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс или СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу) Тогда
		// Реквизиты заново не определяются, получаются из счета-фактуры
		Результат.Вставить("Фирма",          СчетФактура.Фирма);
		Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);
		Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);
		Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);
		Возврат Результат;
	КонецЕслИ;
	
	ТипДокументаОснования = ТипЗнч(СчетФактура.ДокОснование); 
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", СчетФактура.ДокОснование);
				
		Если ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				
				Запрос.УстановитьПараметр("КорректировочныйСчетФактура", СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный);

				Если СчетФактура.Исправление И НЕ СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
					
					ТекстЗапроса = 
					"ВЫБРАТЬ
					|	СУММА(ВЫБОР
					|			КОГДА НЕ &КорректировочныйСчетФактура
					|				ТОГДА КорректировкаПоступленияТовары.Сумма
					|			ИНАЧЕ КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоКорректировки
					|		КОНЕЦ) КАК СуммаДокумента,
					|	СУММА(ВЫБОР
					|			КОГДА НЕ &КорректировочныйСчетФактура
					|				ТОГДА КорректировкаПоступленияТовары.СуммаНДС
					|			ИНАЧЕ КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоКорректировки
					|		КОНЕЦ) КАК СуммаНДСДокумента,
					|	МАКСИМУМ(ВЫБОР
					|			КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
					|				ТОГДА 0
					|			ИНАЧЕ 1
					|		КОНЕЦ) КАК ЕстьНДС
					|ИЗ
					|	Документ.КорректировкаПоступления.Состав КАК КорректировкаПоступленияТовары
					|ГДЕ
					|	КорректировкаПоступленияТовары.Ссылка = &ДокументОснование";
					
				Иначе
					
					ТекстЗапроса = 
					"ВЫБРАТЬ
					|	СУММА(ВЫБОР
					|			КОГДА НЕ &КорректировочныйСчетФактура
					|				ТОГДА 0
					|			ИНАЧЕ ВЫБОР
					|					КОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения > 0
					|						ТОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
					|					ИНАЧЕ 0
					|				КОНЕЦ
					|		КОНЕЦ) КАК СуммаУвеличение,
					|	СУММА(ВЫБОР
					|			КОГДА НЕ &КорректировочныйСчетФактура
					|				ТОГДА 0
					|			ИНАЧЕ ВЫБОР
					|					КОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения < 0
					|						ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма
					|					ИНАЧЕ 0
					|				КОНЕЦ
					|		КОНЕЦ) КАК СуммаУменьшение,
					|	СУММА(ВЫБОР
					|			КОГДА НЕ &КорректировочныйСчетФактура
					|				ТОГДА 0
					|			ИНАЧЕ ВЫБОР
					|					КОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения > 0
					|						ТОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения
					|					ИНАЧЕ 0
					|				КОНЕЦ
					|		КОНЕЦ) КАК СуммаНДСУвеличение,
					|	СУММА(ВЫБОР
					|			КОГДА НЕ &КорректировочныйСчетФактура
					|				ТОГДА 0
					|			ИНАЧЕ ВЫБОР
					|					КОГДА КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения < 0
					|						ТОГДА КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС
					|					ИНАЧЕ 0
					|				КОНЕЦ
					|		КОНЕЦ) КАК СуммаНДСУменьшение,
					|	СУММА(ВЫБОР
					|			КОГДА НЕ &КорректировочныйСчетФактура
					|				ТОГДА КорректировкаПоступленияТовары.Сумма
					|			ИНАЧЕ КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
					|		КОНЕЦ) КАК СуммаДокумента,
					|	СУММА(ВЫБОР
					|			КОГДА НЕ &КорректировочныйСчетФактура
					|				ТОГДА КорректировкаПоступленияТовары.СуммаНДС
					|			ИНАЧЕ КорректировкаПоступленияТовары.СуммаНДС - КорректировкаПоступленияТовары.СуммаНДСДоИзменения
					|		КОНЕЦ) КАК СуммаНДСДокумента,
					|	МАКСИМУМ(ВЫБОР
					|			КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
					|				ТОГДА 0
					|			ИНАЧЕ 1
					|		КОНЕЦ) КАК ЕстьНДС
					|ИЗ
					|	Документ.КорректировкаПоступления.Состав КАК КорректировкаПоступленияТовары
					|ГДЕ
					|	КорректировкаПоступленияТовары.Ссылка = &ДокументОснование";
				КонецЕсли;
				
				Если СчетФактура.Исправление Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоИзменения", "ДоКорректировки");
				КонецЕсли;
				
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				
				Запрос.УстановитьПараметр("КорректировочныйСчетФактура", СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
				ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА НЕ &КорректировочныйСчетФактура
				|			ТОГДА 0
				|		ИНАЧЕ ВЫБОР
				|				КОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения > 0
				|					ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	КОНЕЦ КАК СуммаУвеличение,
				|	ВЫБОР
				|		КОГДА НЕ &КорректировочныйСчетФактура
				|			ТОГДА 0
				|		ИНАЧЕ ВЫБОР
				|				КОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения < 0
				|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	КОНЕЦ КАК СуммаУменьшение,
				|	ВЫБОР
				|		КОГДА НЕ &КорректировочныйСчетФактура
				|			ТОГДА 0
				|		ИНАЧЕ ВЫБОР
				|				КОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения > 0
				|					ТОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	КОНЕЦ КАК СуммаНДСУвеличение,
				|	ВЫБОР
				|		КОГДА НЕ &КорректировочныйСчетФактура
				|			ТОГДА 0
				|		ИНАЧЕ ВЫБОР
				|				КОГДА КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения < 0
				|					ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	КОНЕЦ КАК СуммаНДСУменьшение,
				|	ВЫБОР
				|		КОГДА НЕ &КорректировочныйСчетФактура
				|			ТОГДА КорректировкаРеализацииТовары.Сумма
				|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаДоИзменения
				|	КОНЕЦ КАК СуммаДокумента,
				|	ВЫБОР
				|		КОГДА НЕ &КорректировочныйСчетФактура
				|			ТОГДА КорректировкаРеализацииТовары.СуммаНДС
				|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаНДС - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
				|	КОНЕЦ КАК СуммаНДСДокумента,
				|	ВЫБОР
				|		КОГДА КорректировкаРеализацииТовары.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК ЕстьНДС
				|ИЗ
				|	Документ.КорректировкаРеализации.Состав КАК КорректировкаРеализацииТовары
				|ГДЕ
				|	КорректировкаРеализацииТовары.Ссылка = &ДокументОснование";
				
				Если СчетФактура.Исправление Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоИзменения", "ДоКорректировки");
				КонецЕсли;
	
			Иначе
				
				ТекстЗапроса = 
				"ВЫБРАТЬ
				|	СУММА(Состав.Сумма) КАК СуммаДокумента,
				|	СУММА(Состав.СуммаНДС) КАК СуммаНДСДокумента,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА Состав.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
				|				ТОГДА 0
				|			ИНАЧЕ 1
				|		КОНЕЦ) КАК ЕстьНДС
				|ИЗ
				|	Документ.РасходнаяНакладная.Состав КАК Состав
				|ГДЕ
				|	Состав.Ссылка = &ДокументОснование";
				
		КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;			
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
	    Возврат Результат;
	Иначе
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Результат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		ПерваяСтрока = Истина;
		
		Пока Выборка.Следующий() Цикл
			ЭтоКорректировочный = Ложь;
			Если ПерваяСтрока Тогда
				ПерваяСтрока = Ложь;
				ЗаполнитьЗначенияСвойств(Результат, Выборка);
				Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
			Иначе
				
				Результат.СуммаДокумента = 	Результат.СуммаДокумента + Выборка.СуммаДокумента;
				Результат.СуммаНДСДокумента = Результат.СуммаНДСДокумента + Выборка.СуммаНДСДокумента;
									
				Если ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") 
					ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
					
					Если ЭтоПолученныйСФ Тогда
						ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
					Иначе
						ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;						
					КонецЕсли;
					
					Если ЭтоКорректировочный Тогда						
						Результат.СуммаУвеличение       =	Результат.СуммаУвеличение    + Выборка.СуммаУвеличение;
						Результат.СуммаУменьшение    =	Результат.СуммаУменьшение + Выборка.СуммаУменьшение;
						Результат.СуммаНДСУвеличение    =	Результат.СуммаНДСУвеличение    + Выборка.СуммаНДСУвеличение;
						Результат.СуммаНДСУменьшение = Результат.СуммаНДСУменьшение + Выборка.СуммаНДСУменьшение;
					Иначе
						Результат.СуммаУвеличение = 0;
						Результат.СуммаУменьшение = 0;					
						Результат.СуммаНДСУвеличение = 0;
						Результат.СуммаНДСУменьшение = 0;					
					КонецЕсли;
					
				Иначе
					Результат.СуммаУвеличение = 0;
					Результат.СуммаУменьшение = 0;					
					Результат.СуммаНДСУвеличение = 0;
					Результат.СуммаНДСУменьшение = 0;					
				КонецЕсли;
				
				Если Результат.СчетФактураБезНДС Тогда
					Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
				КонецЕсли;
				
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьСписокКодовВидовОпераций(Полученные, СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	Если Полученные Тогда
		
		СписокВыбора.Добавить("01", "01 - полученные товары, работы, услуги");
		СписокВыбора.Добавить("02", "02 - авансы выданные");
		СписокВыбора.Добавить("03", "03 - возврат от покупателя");
		СписокВыбора.Добавить("04", "04 - товары, работы, услуги комитента");
		СписокВыбора.Добавить("05", "05 - авансы за товары, работы, услуги комитента");
		СписокВыбора.Добавить("10", "10 - полученные безвозмездно товары, работы, услуги");
		СписокВыбора.Добавить("11", "11 - полученные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("12", "12 - авансы выданные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("13", "13 - капитальное строительство, модернизация (реконструкция) объектов недвижимости");
		
	Иначе
		
		СписокВыбора.Добавить("01", "01 - реализованные товары, работы, услуги");
		СписокВыбора.Добавить("02", "02 - авансы полученные");
		СписокВыбора.Добавить("03", "03 - возврат поставщику");
		СписокВыбора.Добавить("04", "04 - товары, работы, услуги комитента");
		СписокВыбора.Добавить("05", "05 - авансы за товары, работы, услуги комитента");
		СписокВыбора.Добавить("06", "06 - налоговый агент, статья 161 НК");
		СписокВыбора.Добавить("07", "07 - списание за счет прибыли, пп.2 п.1 статьи 146 НК");
		СписокВыбора.Добавить("08", "08 - строительно-монтажные работы, пп.3 п.1 статьи 146 НК");
		СписокВыбора.Добавить("09", "09 - суммы, связанные с расчетами по оплате, статья 162 НК");
		СписокВыбора.Добавить("10", "10 - переданные безвозмездно товары, работы, услуги");
		СписокВыбора.Добавить("11", "11 - реализованные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("12", "12 - авансы полученные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("13", "13 - капитальное строительство, модернизация (реконструкция) объектов недвижимости");
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ПЕЧАТЬ СЧЕТОВ-ФАКТУР

Функция ПечатьСчетовФактур1137(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам) Экспорт

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ПолеСверху			= 0;
	ТабДокумент.ПолеСнизу			= 0;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура1137";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСправа         = 0;
	Иначе
		ТабДокумент.ПолеСлева          = 10;
		ТабДокумент.ПолеСправа         = 10;
	КонецЕсли;


	Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.СчетФактура1137");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст	= ТекстЗапросаПоСчетамФактурам;
	Результаты		= Запрос.ВыполнитьПакет();
	
	ПервыйДокумент = Истина;

	ВыборкаСФ	= Результаты[0].Выбрать();
	
	//ПлатежноРасчетныеДокументы	= Неопределено;
	//Если Результаты.Количество() > 1 И НЕ Результаты[1].Пустой() Тогда
	//	ПлатежноРасчетныеДокументы	= Результаты[1].Выгрузить();
	//	ПлатежноРасчетныеДокументы.Индексы.Добавить("СчетФактура");
	//КонецЕсли;

	Пока ВыборкаСФ.Следующий() Цикл
		
		//ТаблицаДокумента = Неопределено;
		//ВыборкаПоОснованиям = ВыборкаСФ.Выбрать();
		//Пока ВыборкаПоОснованиям.Следующий() Цикл
		//	Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
		//		Продолжить;
		//	КонецЕсли;
			ПараметрыОснования = ПодготовитьДанныеДляПечатиСчетовФактур(
				ВыборкаСФ.ДокументОснование, ВыборкаСФ.СчетФактура, ВыборкаСФ.ВидСчетаФактуры, Истина);
			//Если ТаблицаДокумента = Неопределено Тогда
				ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
			//Иначе
			//	ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ПараметрыОснования.ТаблицаДокумента, ТаблицаДокумента);
			//КонецЕсли;
		//КонецЦикла;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаДокумента.Колонки.СуммаБезНДС.Имя = "Стоимость";
		Реквизиты = ПараметрыОснования.Реквизиты[0];

		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		// Вывод шапки

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ДанныеШапки   = ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаСФ, Реквизиты);
		ОбластьМакета.Параметры.Заполнить(Реквизиты);
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод заголовка таблицы

		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод табличной части
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");

		НомерСтроки = 0;
		КоличествоСтрок = ТаблицаДокумента.Количество();
		Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
			ДозаполнитьСтрокуСчетаФактуры1137(ОбластьМакета, ВыборкаСФ.ВидСчетаФактуры);
			ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет);
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
		
		// Вывод итоговых сумм

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ОбластьМакета.Параметры.ИтогоСтоимость = "--";
		Иначе
			ОбластьМакета.Параметры.ИтогоСтоимость = ТаблицаДокумента.Итог("Стоимость");
		КонецЕсли;
		Если ВыборкаСФ.СчетФактураБезНДС Тогда
			ОбластьМакета.Параметры.ИтогоСуммаНДС = "без НДС";
		Иначе
			ОбластьМакета.Параметры.ИтогоСуммаНДС = ТаблицаДокумента.Итог("СуммаНДС");
		КонецЕсли;
		ОбластьМакета.Параметры.ИтогоВсего = ТаблицаДокумента.Итог("Всего");
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод подвала

		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Процедура ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет)
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог и подвал
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьСтрокуСчетаФактуры1137(ОбластьМакета, ВидСчетаФактуры)

	Если ОбластьМакета.Параметры.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
		ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
		ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
	КонецЕсли;
		
	// Проставляем прочерки в незаполненные графы в соответствии с Постановлением 1137
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		
		ОбластьМакета.Параметры.Количество = "--";
		ОбластьМакета.Параметры.Цена       = "--";
		ОбластьМакета.Параметры.Стоимость  = "--";
		ОбластьМакета.Параметры.Акциз      = "--";
		
		ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
		ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
		ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
			ОбластьМакета.Параметры.Количество = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
			ОбластьМакета.Параметры.Цена = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеСтраны) Тогда
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаСФ, Реквизиты)

	ДанныеШапки = Новый Структура;
	
	// Номер и дата
	Если ТекущаяДата() > Дата(2015,04,15) Тогда 
		Номер = Сред(ВыборкаСФ.Номер,Найти(ВыборкаСФ.Номер,"-")+1,СтрДлина(ВыборкаСФ.Номер));
	Иначе
		Номер = ВыборкаСФ.Номер;
	КонецЕсли;
		
	Дата = Формат(ВыборкаСФ.Дата, "ДЛФ='ДД'");
	ДанныеШапки.Вставить("Номер", "Счет-фактура № " + Номер + " от " + Дата);
	
	// Номер и дата исправления
	Если ВыборкаСФ.Исправление Тогда
		НомерИсправления	= ВыборкаСФ.НомерИсправления;
		ДатаИсправления		= Формат(ВыборкаСФ.ДатаИсправления, "ДЛФ='ДД'");
	Иначе 	
		НомерИсправления	= "--";
		ДатаИсправления		= "--";
	КонецЕсли;
	ДанныеШапки.Вставить("НомерИсправления", "Исправление № " + НомерИсправления + " от " + ДатаИсправления);
		
	СведенияОПоставщике = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Реквизиты.Поставщик, ВыборкаСФ.Дата,Реквизиты.СтруктурнаяЕдиница);
	
	// Наименование продавца
	ДанныеШапки.Вставить("ПредставлениеПоставщика", "Продавец: "
		+ ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
	
	// Адрес продавца
	ДанныеШапки.Вставить("АдресПоставщика", "Адрес: " 
		+ ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
	
	// ИНН и КПП продавца
	ИНН = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);
	КПП = Реквизиты.КППпоставщика;
	ДанныеШапки.Вставить("ИННпоставщика", "ИНН/КПП продавца: "
	+ ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	//popn+	
	//СведенияОПокупателе = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Реквизиты.Покупатель, ВыборкаСФ.Дата);
	Если ТипЗнч(Реквизиты.Покупатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда 
		СсылкаПокупатель = Реквизиты.Покупатель.Организация;
	Иначе
		СсылкаПокупатель = Реквизиты.Покупатель;
	КонецЕсли;
	СведенияОПокупателе = ОбработкаПечатиСервер.СведенияОЮрФизЛице(СсылкаПокупатель, ВыборкаСФ.Дата,Реквизиты.СтруктурнаяЕдиница);
	//popn-
	// Наименование покупателя
	ДанныеШапки.Вставить("ПредставлениеПокупателя", "Покупатель: "
		+ ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	
	// Адрес покупателя
	ДанныеШапки.Вставить("АдресПокупателя", "Адрес: "
		+ ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
	
	// ИНН и КПП покупателя
	ИНН = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	КПП = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	ДанныеШапки.Вставить("ИННпокупателя", "ИНН/КПП покупателя: "
		+ ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
		
	// Грузоотправитель
	Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ПредставлениеГрузоотправителя = "--";
	ИначеЕсли Реквизиты.ЕстьТовары Тогда
		Если ТипЗнч(Реквизиты.Грузоотправитель) = Тип("Строка") Тогда
			ПредставлениеГрузоотправителя = Реквизиты.Грузоотправитель;
		Иначе
			Если ЗначениеЗаполнено(Реквизиты.Грузоотправитель) тогда
				//+Зернятко А.В.@06.11.2013 - //RSS-341. Фактический адрес грузоотправителя = Адрес СЕ
				Если ТипЗнч(Реквизиты.Грузоотправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") тогда
					ФирмаГрузоотправитель = Реквизиты.Грузоотправитель.Организация;
					СведенияОФирмеГрузоотправителе = ОбработкаПечатиСервер.СведенияОЮрФизЛице(ФирмаГрузоотправитель,ВыборкаСФ.Дата,Реквизиты.СтруктурнаяЕдиница);
					СведенияОГрузоотправителе = обработкаПечатиСервер.СведенияОЮрФизЛице(Реквизиты.Грузоотправитель,ВыборкаСФ.Дата,Реквизиты.СтруктурнаяЕдиница);
					ФактическийАдресГрузоотправителя = обработкаПечатиСервер.ОписаниеОрганизации(СведенияОГрузоотправителе,"ФактическийАдрес");
					ПредставлениеФирмыГрузоотправителяЧасть1 = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОФирмеГрузоотправителе,"ПолноеНаименование");
					ПредставлениеГрузоотправителя = ПредставлениеФирмыГрузоотправителяЧасть1+?(ЗначениеЗаполнено(ПредставлениеФирмыГрузоотправителяЧасть1) и ЗначениеЗаполнено(ФактическийАдресГрузоотправителя),",","")+ФактическийАдресГрузоотправителя;
				Иначе
				///Зернятко А.В.@ - конец блока
					СведенияОГрузоотправителе = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Реквизиты.Грузоотправитель, ВыборкаСФ.Дата,Реквизиты.СтруктурнаяЕдиница);
					ПредставлениеГрузоотправителя = ОбработкаПечатиСервер.ОписаниеОрганизации(
					СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,");
				//+Зернятко А.В.@06.11.2013 - //RSS-341. Фактический адрес грузоотправителя = Адрес СЕ
				КонецЕсли;
				///Зернятко А.В.@ - конец блока
			Иначе
				ПредставлениеГрузоотправителя = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ФактическийАдрес,");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПредставлениеГрузоотправителя = "--";
	КонецЕсли;
	ДанныеШапки.Вставить("ПредставлениеГрузоотправителя", "Грузоотправитель и его адрес: " + ПредставлениеГрузоотправителя);

	// Грузополучатель
	Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ПредставлениеГрузополучателя = "--";
	ИначеЕсли Реквизиты.ЕстьТовары  Тогда
		Если ТипЗнч(Реквизиты.Грузополучатель) = Тип("Строка") Тогда
			ПредставлениеГрузополучателя = Реквизиты.Грузополучатель;
		Иначе
			СведенияОГрузополучателе = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Реквизиты.Грузополучатель, ВыборкаСФ.Дата,Реквизиты.СтруктурнаяЕдиница);
			Если Не ЗначениеЗаполнено(ВыборкаСФ.ДокументОснование.Грузополучатель) тогда
				Грузополучатель = ВыборкаСФ.ДокументОснование.Контрагент;
			Иначе
				Грузополучатель = ВыборкаСФ.ДокументОснование.Грузополучатель;
			КонецЕсли;
			Если ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы")  тогда
				СведенияОГрузополучателеСЕ = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Грузополучатель, ВыборкаСФ.Дата,Реквизиты.СтруктурнаяЕдиница);
				ПредставлениеГрузополучателя = ""+Грузополучатель;
				ПредставлениеГрузополучателя = ПредставлениеГрузополучателя + ", " +ОбработкаПечатиСервер.ОписаниеОрганизации(
				СведенияОГрузополучателе, "ПолноеНаименование,")+" "+ОбработкаПечатиСервер.ОписаниеОрганизации(
				СведенияОГрузополучателеСЕ, "ФактическийАдрес,");
			Иначе
				ПредставлениеГрузополучателя = ОбработкаПечатиСервер.ОписаниеОрганизации(
				СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,");
			КонецЕсли;	
			КонецЕсли;
	Иначе
		ПредставлениеГрузополучателя = "--";
	КонецЕсли;
	ДанныеШапки.Вставить("ПредставлениеГрузополучателя", "Грузополучатель и его адрес: " + ПредставлениеГрузополучателя);
	
	// Платежно-расчетный документ
	ПоДокументу = "";
	//Если ЗначениеЗаполнено(ВыборкаСФ.НомерПлатежноРасчетногоДокумента) И ЗначениеЗаполнено(ВыборкаСФ.ДатаПлатежноРасчетногоДокумента) Тогда
	//	ПоДокументу = ПоДокументу + ?(ПустаяСтрока(ПоДокументу), "",", ")
	//	+ ВыборкаСФ.НомерПлатежноРасчетногоДокумента + " от " + Формат(ВыборкаСФ.ДатаПлатежноРасчетногоДокумента, "ДЛФ='Д'") + " г.";
	//КонецЕсли;

	Если ПустаяСтрока(ПоДокументу) Тогда
		Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ПоДокументу = "-- от --";
		Иначе
			ПоДокументу = "   от   ";
		КонецЕсли;
	КонецЕсли;
	ДанныеШапки.Вставить("ПоДокументу", "К платежно-расчетному документу № " + ПоДокументу);
	
	//dps+  14.01.15
	ДанныеШапки.Вставить("Валюта", "Валюта: код 643 наименование Российский рубль");
	//{{ШиловМВ 29.12.14 №000138544
	// Валюта
	//Если ЗначениеЗаполнено(Реквизиты.Валюта) Тогда
	//	ДанныеШапки.Вставить("Валюта", "Валюта: код "+Реквизиты.Валюта.Код+" наименование " + Реквизиты.Валюта.НаименованиеПолное);
	//Иначе
	//	ДанныеШапки.Вставить("Валюта", "Валюта: ");
	//КонецЕсли;
	//}}ШиловМВ 29.12.14 №000138544
	//dps-
	// Данные для подвала
	Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
		//{{ШиловМВ 29.12.14 №000138544
		//Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Поставщик) Тогда
		Если Реквизиты.Поставщик.ЮрФизЛицо=Перечисления.ТипыКонтрагентов.ЮрЛицо Тогда
			
			//Руководители = ОбщегоНазначенияБПВызовСервера.ОтветственныеЛица(Реквизиты.Поставщик, ВыборкаСФ.Дата, Реквизиты.Подразделение);
			//dps+  14.01.15
			Руководители = ОбработкаПечатиСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Реквизиты.Фирма, ВыборкаСФ.Дата, Реквизиты.СтруктурнаяЕдиница);
			ДанныеШапки.Вставить("ФИОРуководителя", Руководители.ФИОРуководителя);
			ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ФИОГлавногоБухгалтера);
			//dps-
			//Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
			//	Если ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда 
			//		ДанныеШапки.Вставить("ФИОРуководителя", ФизическиеЛица.ФамилияИнициалыФизЛица(ВыборкаСФ.Руководитель));
			//	Иначе 
			//		ДанныеШапки.Вставить("ФИОРуководителя", Руководители.РуководительПредставление);
			//	КонецЕсли;
			//	Если ЗначениеЗаполнено(ВыборкаСФ.ГлавныйБухгалтер) Тогда 
			//		ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", ФизическиеЛица.ФамилияИнициалыФизЛица(ВыборкаСФ.ГлавныйБухгалтер));
			//	Иначе 
			//		ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
			//	КонецЕсли;
			//Иначе 
			//	ДанныеШапки.Вставить("ФИОРуководителя", Руководители.РуководительПредставление);
			//	ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
			//КонецЕсли;
		Иначе
			//ДанныеШапки.Вставить("ФИОПБОЮЛ",		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ФИОПБОЮЛ,"));
			//ДанныеШапки.Вставить("Свидетельство",	ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
			ДанныеШапки.Вставить("Свидетельство", ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПоставщике, "СвидетельствоСерияНомер,СвидетельствоДатаВыдачи,ОГРН,")); 
			ДанныеШапки.Вставить("ФИОПБОЮЛ", СтрЗаменить(Реквизиты.Поставщик.ПолноеНаименование,"Индивидуальный предприниматель ",""));
		КонецЕсли;
		//}}ШиловМВ 29.12.14 №000138544
		//*Зернятко А.В.@06.11.2013 - //AKB-374. Ответственные лица СЕ
		//Руководители = ОбработкаПечатиСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Реквизиты.Фирма, ВыборкаСФ.Дата);
		//Руководители = ОбработкаПечатиСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Реквизиты.Фирма, ВыборкаСФ.Дата, Реквизиты.СтруктурнаяЕдиница);
		///Зернятко А.В.@ - конец блока
		//ДанныеШапки.Вставить("ФИОРуководителя",Руководители.ФИОРуководителя);
		//ДанныеШапки.Вставить("ФИОГлавногоБухгалтера",Руководители.ФИОГлавногоБухгалтера);
		
	КонецЕсли;

    Возврат ДанныеШапки;

КонецФункции

// Возвращает структуру из 2 таблиц для печати счета-фактуры:
// - Реквизиты - реквизиты шапки
// - ТаблицаДокумента - строки табличных частей.
//   Если СФ по договору в у.е. печатается в рублях, таблица содержит суммы, соответствующие
//   суммам бухгалтерских проводок, то есть скорректированные с учетом курсов зачтенных авансов
//
// Параметры:
// ДокументОснование - ДокументСсылка
//   В модуле менеджера документа должна быть экспортная функция
//   ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц)
// СчетФактура - ДокументСсылка.СчетФактураВыданный - распечатываемый счет-фактура
//   Используется при печати счета-фактуры по документу ОказаниеУслуг
// ВидСчетаФактура - ПеречислениеСсылка.ВидСчетаФактурыВыставленного или .ВидСчетаФактурыПолученного - реквизит счета-фактуры
// ИспользуетсяПостановлениеНДС1137 - Булево - применяется ли на дату счета-фактуры Постановление 1137 от 26.12.2011 (Истина)
//   или применяется Постановление 914 (Ложь)
//
Функция ПодготовитьДанныеДляПечатиСчетовФактур(ДокументОснование, СчетФактура, ВидСчетаФактуры, ИспользуетсяПостановлениеНДС1137) Экспорт

	ДанныеДляПечати = Новый Структура;
	
	ВалютаРеглУчета = ДокументОснование.СтруктурнаяЕдиница.Валюта;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаРеглУчета",					ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ДокументОснование",					ДокументОснование);
	Запрос.УстановитьПараметр("СчетФактура",						СчетФактура);
	Запрос.УстановитьПараметр("ВидСчетаФактуры",					ВидСчетаФактуры);
	Запрос.УстановитьПараметр("ИспользуетсяПостановлениеНДС1137",	Истина);
	
	Запрос.УстановитьПараметр("ТекстБезАкциза",						?(ИспользуетсяПостановлениеНДС1137, НСтр("ru = 'без акциза'"), ""));
	Запрос.УстановитьПараметр("ТекстКомиссионноеВознаграждение",	НСтр("ru = 'Комиссионное вознаграждение'"));

	НомераТаблиц = Новый Структура;

	Запрос.Текст = Документы[ДокументОснование.Метаданные().Имя].ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц)
		+ ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();

	Если Результат[НомераТаблиц.Реквизиты].Пустой()
		ИЛИ Результат[НомераТаблиц.ТаблицаДокумента].Пустой() Тогда
		
		ДанныеДляПечати.Вставить("Реквизиты",        Неопределено);
		ДанныеДляПечати.Вставить("ТаблицаДокумента", Неопределено);

		Возврат ДанныеДляПечати;
		
	КонецЕсли;	
			
	ТаблицаРеквизиты = Результат[НомераТаблиц.Реквизиты].Выгрузить();
	ТаблицаДокумента = Результат[НомераТаблиц.ТаблицаДокумента].Выгрузить();
	
	Реквизиты = ТаблицаРеквизиты[0];

	НуженПересчетВРубли = Ложь;
	
	ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");

	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		// Определяем окончательную сумму без НДС с учетом всех корректировок и цену
		СтрокаДокумента.СуммаБезНДС = СтрокаДокумента.Всего - СтрокаДокумента.СуммаНДС;
		СтрокаДокумента.СтавкаНДС = УчетНДСПовтИсп.ПолучитьПредставлениеСтавкиНДС(СтрокаДокумента.СтавкаНДССсылка);
		
		//Если СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
		// 	ИЛИ СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		// 	ИЛИ СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		//	СтрокаДокумента.СуммаБезНДС = СтрокаДокумента.Всего;
		//	Если СтрокаДокумента.Количество <> 0 Тогда
		//		СтрокаДокумента.Цена = Окр(СтрокаДокумента.СуммаБезНДС / СтрокаДокумента.Количество, 2);
		//	КонецЕсли;
		//КонецЕсли;
		//
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ЕдиницаИзмерения) Тогда
			СтрокаДокумента.Количество = 0;
			СтрокаДокумента.Цена = 0;
		ИначеЕсли СтрокаДокумента.Количество = 0 Тогда
			СтрокаДокумента.ЕдиницаИзмерения = "";
			СтрокаДокумента.Цена = 0;
		ИначеЕсли СтрокаДокумента.Цена = 0 Тогда
			СтрокаДокумента.Цена = Окр(СтрокаДокумента.СуммаБезНДС / СтрокаДокумента.Количество, 2);
		КонецЕсли;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("Реквизиты",        ТаблицаРеквизиты);
	ДанныеДляПечати.Вставить("ТаблицаДокумента", ТаблицаДокумента);

	Возврат ДанныеДляПечати;

КонецФункции

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Товар = ""СуммоваяРазница""
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаДокумента.Товар
	|	КОНЕЦ КАК Товар,
	|	ТаблицаДокумента.ТоварНаименование КАК ТоварНаименование,
	//|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.ПолноеНаименование, """") КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Количество = 0
	|						ТОГДА 0
	|					ИНАЧЕ ВЫРАЗИТЬ((ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС) / ТаблицаДокумента.Количество КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаВключаетНДС
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
	|	КОНЕЦ КАК Всего,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Товар = ""СуммоваяРазница""
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.СуммаВключаетНДС
	|					ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС
	|				ИНАЧЕ ТаблицаДокумента.Сумма
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДССсылка,
	|	&ТекстБезАкциза КАК Акциз,
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО (КлассификаторЕдиницИзмерения.Ссылка = ТаблицаДокумента.ЕдиницаИзмерения.ЕдиницаПоКлассификатору)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияПереопределяемый.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПечатьКорректировочныхСчетовФактур1137(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам) Экспорт

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ПолеСверху			= 0;
	ТабДокумент.ПолеСнизу			= 0;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура1137";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСправа         = 0;
	Иначе
		ТабДокумент.ПолеСлева          = 10;
		ТабДокумент.ПолеСправа         = 10;
	КонецЕсли;


	Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.КорректировочныйСчетФактура1137");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаПоСчетамФактурам;
	Результаты    = Запрос.ВыполнитьПакет();

	ПервыйДокумент = Истина;

	ВыборкаСФ	= Результаты[0].Выбрать();
	
	Пока ВыборкаСФ.Следующий() Цикл

		ПараметрыОснования = ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(
		ВыборкаСФ.ДокументОснование, ВыборкаСФ.СчетФактура, ВыборкаСФ.ВидСчетаФактуры, Истина);
		//Если ТаблицаДокумента = Неопределено Тогда
			ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
		//Иначе
		//	ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ПараметрыОснования.ТаблицаДокумента, ТаблицаДокумента);
		//КонецЕсли;
		Реквизиты = ПараметрыОснования.Реквизиты[0];

		//{Ситек ДойниковПВ 2015-10-26 ****
		//Необходимо для корректировки реализации установить структурную единицу, иначе данные шапки будут неполными
		
		Если ТипЗнч(ВыборкаСФ.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ДокументРеализации = Izh_ОбщегоНазначенияСервер.ПолучитьПервоначальныйДокументКорректировкиРеализации(ВыборкаСФ.ДокументОснование);
			                          
			Если ДокументРеализации <> Неопределено Тогда
				СтруктурнаяЕдиница = ДокументРеализации.СтруктурнаяЕдиница;
			Иначе
				СтруктурнаяЕдиница = Неопределено;
			КонецЕсли; 
			
			ПараметрыОснования.Реквизиты.Колонки.Добавить("СтруктурнаяЕдиница");
			Реквизиты.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		
		КонецЕсли; 
		
		//}Ситек ДойниковПВ 2015-10-26
	
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		// Вывод шапки

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ДанныеШапки   = ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры1137(ВыборкаСФ, Реквизиты);
		ОбластьМакета.Параметры.Заполнить(Реквизиты);
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод заголовка таблицы

		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета.Параметры.Заполнить(Реквизиты);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод табличной части

		ОбластьМакета = Макет.ПолучитьОбласть("Строка");

		Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл

			ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
			Если ЗначениеЗАполнено(СтрокаДокумента.НаименованиеЕдиницыИзмерения) тогда
				ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = СтрокаДокумента.НаименованиеЕдиницыИзмерения.ЕдиницаПоКлассификатору.ПолноеНаименование;
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = СтрокаДокумента.НаименованиеЕдиницыИзмерения.ЕдиницаПоКлассификатору.Код;
			Конецесли;

			ДозаполнитьСтрокуКорректировочногоСчетаФактуры1137(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывод итоговых сумм

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.РазницаБезНДСУменьшение	= ТаблицаДокумента.Итог("РазницаБезНДСУменьшение");
		ОбластьМакета.Параметры.РазницаБезНДСУвеличение	= ТаблицаДокумента.Итог("РазницаБезНДСУвеличение");
		ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ТаблицаДокумента.Итог("РазницаСНДСУменьшение");
		ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ТаблицаДокумента.Итог("РазницаСНДСУвеличение");
		Если ВыборкаСФ.СчетФактураБезНДС Тогда
			ОбластьМакета.Параметры.РазницаНДСУменьшение = "без НДС";
			ОбластьМакета.Параметры.РазницаНДСУвеличение = "без НДС";
		Иначе
			ОбластьМакета.Параметры.РазницаНДСУменьшение    = ТаблицаДокумента.Итог("РазницаНДСУменьшение");
			ОбластьМакета.Параметры.РазницаНДСУвеличение    = ТаблицаДокумента.Итог("РазницаНДСУвеличение");
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод подвала

		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Процедура ДозаполнитьСтрокуКорректировочногоСчетаФактуры1137(ОбластьМакета)

	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения) Тогда
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
		ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
		ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
	КонецЕсли;	
	       		
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
		ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
		ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
	КонецЕсли;	
	          		
	Если ОбластьМакета.Параметры.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
		ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
		ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
		ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры1137(ВыборкаСФ, Реквизиты) Экспорт

	ДанныеШапки = Новый Структура;
	ТекстПустойПоказатель = "--";
	
	// Номер и дата
	Если ВыборкаСФ.Исправление И ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		ДанныеШапки.Вставить("Номер",	ВыборкаСФ.НомерИсправляемогоКорректировочногоДокумента);
		ДанныеШапки.Вставить("Дата",	Формат(ВыборкаСФ.ДатаИсправляемогоКорректировочногоДокумента, "ДЛФ='ДД'"));
	Иначе
		//Если ВыборкаСФ.УдалитьПрефиксыИзНомера Тогда
		//	ДанныеШапки.Вставить("Номер", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаСФ.Номер, Истина, Истина));
		//Иначе
			ДанныеШапки.Вставить("Номер", ВыборкаСФ.Номер);
		//КонецЕсли;
		ДанныеШапки.Вставить("Дата", Формат(ВыборкаСФ.Дата, "ДЛФ='ДД'"));
	КонецЕсли;
	
	// Номер и дата исправления
	Если ВыборкаСФ.Исправление Тогда
		Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			НомерИсправленияКорректировочного = ВыборкаСФ.НомерИсправления;
			ДатаИсправленияКорректировочного  = Формат(ВыборкаСФ.ДатаИсправления, "ДЛФ='ДД'");
		Иначе // .ВидСчетаФактурыПолученного.Корректировочный
			НомерИсправленияКорректировочного = ВыборкаСФ.НомерИсправленияКорректировочного;
			ДатаИсправленияКорректировочного  = Формат(ВыборкаСФ.ДатаИсправленияКорректировочного, "ДЛФ='ДД'");
		КонецЕсли;
	Иначе
		НомерИсправленияКорректировочного = "--";
		ДатаИсправленияКорректировочного  = "--";
	КонецЕсли;
	ДанныеШапки.Вставить("НомерИсправленияКорректировочного", НомерИсправленияКорректировочного);
	ДанныеШапки.Вставить("ДатаИсправленияКорректировочного",  ДатаИсправленияКорректировочного);

	// Номер и дата исходного счета-фактуры
	ДанныеШапки.Вставить("НомерСчетаФактуры", ВыборкаСФ.НомерИсходногоДокумента);
	ДанныеШапки.Вставить("ДатаСчетаФактуры",  Формат(ВыборкаСФ.ДатаИсходногоДокумента, "ДЛФ='ДД'"));
	
	// Номер и дата исправления исходного счета-фактуры
	Если ВыборкаСФ.УчитыватьИсправлениеИсходногоДокумента Тогда
		НомерИсправления = ВыборкаСФ.НомерИсправленияИсходногоДокумента;
		ДатаИсправления	 = Формат(ВыборкаСФ.ДатаИсправленияИсходногоДокумента, "ДЛФ='ДД'");
	Иначе
		НомерИсправления= "--";
		ДатаИсправления	= "--";
	КонецЕсли;
	ДанныеШапки.Вставить("НомерИсправления", НомерИсправления);
	ДанныеШапки.Вставить("ДатаИсправления",  ДатаИсправления);
	
	СведенияОПоставщике = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Реквизиты.Поставщик, ВыборкаСФ.Дата,Реквизиты.СтруктурнаяЕдиница);
	
	// Наименование продавца
	ДанныеШапки.Вставить("НаименованиеПродавца",
		ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
	
	// Адрес продавца
	ДанныеШапки.Вставить("АдресПродавца",
		ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
	
	// ИНН и КПП продавца
	ИНН = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);
	ДанныеШапки.Вставить("ИННКППпродавца",
		ИНН + ?(ЗначениеЗаполнено(Реквизиты.КППпоставщика), "/" + Реквизиты.КППпоставщика, ТекстПустойПоказатель));

	//popn+	
	//СведенияОПокупателе = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Реквизиты.Покупатель, ВыборкаСФ.Дата);
	Если ТипЗнч(Реквизиты.Покупатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда 
		СсылкаПокупатель = Реквизиты.Покупатель.Организация;
	Иначе
		СсылкаПокупатель = Реквизиты.Покупатель;
	КонецЕсли;
	СведенияОПокупателе = ОбработкаПечатиСервер.СведенияОЮрФизЛице(СсылкаПокупатель, ВыборкаСФ.Дата,Реквизиты.СтруктурнаяЕдиница);
	//popn-
	
	// Наименование покупателя
	ДанныеШапки.Вставить("НаименованиеПокупателя",
		ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	
	// Адрес покупателя
	ДанныеШапки.Вставить("АдресПокупателя",
		ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
	
	// ИНН и КПП покупателя
	ИНН = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	КПП = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	ДанныеШапки.Вставить("ИННКППпокупателя",
		ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));

	// Валюта
	Если ЗначениеЗаполнено(Реквизиты.Валюта) Тогда
		Валюта = Реквизиты.Валюта.НаименованиеПолное + ", " + Реквизиты.Валюта.Код;
	Иначе
		Валюта = "";		
	КонецЕсли;
	ДанныеШапки.Вставить("Валюта", "Валюта: наименование, код " + Валюта);

	// Данные для подвала
	Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
		//Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Поставщик) Тогда
			//Руководители = ОбщегоНазначенияБПВызовСервера.ОтветственныеЛица(Реквизиты.Поставщик, ВыборкаСФ.Дата, Реквизиты.Подразделение);
			//ДанныеШапки.Вставить("ФИОРуководителя", Руководители.РуководительПредставление);
			//ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
		//Иначе
		//	ДанныеШапки.Вставить("ФИОПБОЮЛ",		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ФИОПБОЮЛ,"));
		//	ДанныеШапки.Вставить("Свидетельство",	ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
		//КонецЕсли;
		//*Зернятко А.В.@06.11.2013 - //AKB-374. Ответственные лица СЕ
		//Руководители = ОбработкаПечатиСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Реквизиты.Фирма, ВыборкаСФ.Дата);
		Руководители = ОбработкаПечатиСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Реквизиты.Фирма, ВыборкаСФ.Дата, Реквизиты.СтруктурнаяЕдиница);
		///Зернятко А.В.@ - конец блока
		ДанныеШапки.Вставить("ФИОРуководителя",Руководители.ФИОРуководителя);
		ДанныеШапки.Вставить("ФИОГлавногоБухгалтера",Руководители.ФИОГлавногоБухгалтера);

	КонецЕсли;

    Возврат ДанныеШапки;

КонецФункции

Функция ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(ДокументОснование,  СчетФактура, ВидСчетаФактуры, ИспользуетсяПостановлениеНДС1137) Экспорт

	ДанныеДляПечати = Новый Структура;

	Запрос = Новый Запрос;
	ВалютаРеглУчета = ДокументОснование.СтруктурнаяЕдиница.Валюта;

	Запрос.УстановитьПараметр("ВалютаРеглУчета",   ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("СчетФактура",	   СчетФактура);
	Запрос.УстановитьПараметр("ВидСчетаФактуры",   ВидСчетаФактуры);
	Запрос.УстановитьПараметр("ТекстБезАкциза",    ?(Истина, "без акциза", ""));
	Запрос.УстановитьПараметр("ИспользуетсяПостановлениеНДС1137", ИспользуетсяПостановлениеНДС1137);

	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = Документы[ДокументОснование.Метаданные().Имя].ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц)
		+ ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();

	ТаблицаРеквизиты = Результат[НомераТаблиц.Реквизиты].Выгрузить();
	ТаблицаДокумента = Результат[НомераТаблиц.ТаблицаДокумента].Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];

	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.НаименованиеЕдиницыИзмерения) Тогда
			СтрокаДокумента.КоличествоДоИзменения    = 0;
			СтрокаДокумента.КоличествоПослеИзменения = 0;
			СтрокаДокумента.ЦенаДоИзменения          = 0;
			СтрокаДокумента.ЦенаПослеИзменения       = 0;
		Иначе
			Если СтрокаДокумента.КоличествоДоИзменения = 0 Тогда
				СтрокаДокумента.ЦенаДоИзменения = 0;
			ИначеЕсли СтрокаДокумента.ЦенаДоИзменения = 0 Тогда
				СтрокаДокумента.ЦенаДоИзменения = Окр(СтрокаДокумента.СтоимостьБезНДСДоИзменения / СтрокаДокумента.КоличествоДоИзменения, 2);
			КонецЕсли;
			Если СтрокаДокумента.КоличествоПослеИзменения = 0 Тогда
				СтрокаДокумента.ЦенаПослеИзменения = 0;
			ИначеЕсли СтрокаДокумента.ЦенаПослеИзменения = 0 Тогда
				СтрокаДокумента.ЦенаПослеИзменения = Окр(СтрокаДокумента.СтоимостьБезНДСПослеИзменения / СтрокаДокумента.КоличествоПослеИзменения, 2);
			КонецЕсли;
			Если СтрокаДокумента.КоличествоДоИзменения = 0 
				И СтрокаДокумента.КоличествоПослеИзменения = 0 Тогда
				СтрокаДокумента.НаименованиеЕдиницыИзмерения = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("Реквизиты",        ТаблицаРеквизиты);
	ДанныеДляПечати.Вставить("ТаблицаДокумента", ТаблицаДокумента);
	
	Возврат ДанныеДляПечати;
	
КонецФункции
 
Функция ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Товар КАК Товар,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ТаблицаДокумента.ТоварНаименование КАК СТРОКА(10))) = """"
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товар)
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.ТоварНаименование КАК СТРОКА(1000))
	|	КОНЕЦ КАК НаименованиеНоменклатуры,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.ПолноеНаименование, """") КАК ЕдиницаИзмерения,
	|   ЕСТЬNULL(КлассификаторЕдиницИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.КоличествоДоИзменения,
	|	ТаблицаДокумента.КоличествоПослеИзменения,
	|	ТаблицаДокумента.ЦенаДоИзменения,
	|	ТаблицаДокумента.ЦенаПослеИзменения,
	|	ТаблицаДокумента.СтоимостьБезНДСДоИзменения,
	|	ТаблицаДокумента.СтоимостьБезНДСПослеИзменения,
	|	ТаблицаДокумента.СтавкаНДС,
	|	&ТекстБезАкциза КАК Акциз,
	|	ТаблицаДокумента.СуммаНДСДоИзменения,
	|	ТаблицаДокумента.СуммаНДСПослеИзменения,
	|	ТаблицаДокумента.СтоимостьСНДСДоИзменения,
	|	ТаблицаДокумента.СтоимостьСНДСПослеИзменения,
	|	ТаблицаДокумента.РазницаБезНДСУвеличение,
	|	ТаблицаДокумента.РазницаБезНДСУменьшение,
	|	ТаблицаДокумента.РазницаНДСУвеличение,
	|	ТаблицаДокумента.РазницаНДСУменьшение,
	|	ТаблицаДокумента.РазницаСНДСУвеличение,
	|	ТаблицаДокумента.РазницаСНДСУменьшение
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО ТаблицаДокумента.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = КлассификаторЕдиницИзмерения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияПереопределяемый.ТекстРазделителяЗапросовПакета();

КонецФункции

//popn+
Функция НайтиПодчиненныйСчетФактуруПолученный(ДокументОснование, ИсключаемыйСФ = Неопределено, ПометкаУдаления = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ДокументОснование.Метаданные().Реквизиты.Найти("ПредъявленСчетФактура") <> Неопределено
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ПредъявленСчетФактура") Тогда
		Возврат ДокументОснование;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ПометкаУдаления",   ПометкаУдаления);
	Запрос.УстановитьПараметр("ИсключаемыйСФ",     ИсключаемыйСФ);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактуры.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.РегистрацияСчетФактуры КАК СчетФактуры
	|ГДЕ
	|	СчетФактуры.ДокументОснование = &ДокументОснование
	|	И СчетФактуры.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный))
	|	И СчетФактуры.ПометкаУдаления = &ПометкаУдаления
	|	И (&ИсключаемыйСФ = НЕОПРЕДЕЛЕНО
	|			ИЛИ СчетФактуры.Ссылка <> &ИсключаемыйСФ)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СчетФактура;
	КонецЕсли;

КонецФункции

Функция НайтиПодчиненныйСчетФактуруВыданный(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетаФактуры.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактура КАК СчетаФактуры
	|ГДЕ
	|	СчетаФактуры.ДокОснование = &ДокументОснование
	|	И СчетаФактуры.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))";

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СчетФактура;
	КонецЕсли;

КонецФункции

Функция ПолучитьЦепочкуДокументовКорректировкиРеализации(Документ, МассивДокументов = НЕОПРЕДЕЛЕНО) Экспорт
	
	Если МассивДокументов = НЕОПРЕДЕЛЕНО Тогда
		МассивДокументов = Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		МассивДокументов.Добавить(Документ);
		ПолучитьЦепочкуДокументовКорректировкиРеализации(Документ.ДокументРеализации,МассивДокументов);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		МассивДокументов.Добавить(Документ);
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции
//popn-



