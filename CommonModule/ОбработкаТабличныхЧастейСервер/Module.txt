//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
//

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТОВ

// Получает данные объектов переданной структуры.
//
// Параметры:
//  СтруктураДанных - Структура, содержащая рекизиты объекта, которые требуется
//                 получить и заполненная реквизитами, которые требуются для
//                 получения
//  ДопПараметр  - Строка, содержащая имя произвольный критерий получения данных
//                 объекта.
//
Процедура ПолучитьДанныеОбъектов(СтруктураДанных, ДопПараметр = "") Экспорт
	Если СтруктураДанных.Свойство("ЕдиницаИзмерения") Тогда
		Если СтруктураДанных.Свойство("Номенклатура") Тогда
			Если ЗначениеЗаполнено(СтруктураДанных.Номенклатура) и НЕ ЭтоГруппаНоменклатуры(СтруктураДанных.Номенклатура) Тогда
				СтруктураДанных.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(СтруктураДанных.Номенклатура, Истина);
				Если СтруктураДанных.свойство("Коэффициент") тогда
					Если ЗначениеЗаполнено(СтруктураДанных.ЕдиницаИзмерения) тогда
						 СтруктураДанных.Коэффициент = СтруктураДанных.ЕдиницаИзмерения.Коэффициент;
					 Иначе
						 СтруктураДанных.Коэффициент = 0;
					 конецесли;
				Конецесли;
			Иначе
				СтруктураДанных.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
				Если СТруктураДанных.свойство("Коэффициент") тогда
					СтруктураДанных.Коэффициент = 0;
				конецесли;
			КонецЕсли;
		Иначе
			СтруктураДанных.Коэффициент = СтруктураДанных.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("СтавкаНДС") Тогда
		Если СтруктураДанных.Свойство("Номенклатура") Тогда
			Если ЗначениеЗаполнено(СтруктураДанных.Номенклатура) Тогда
				СтавкаНДС = СтруктураДанных.Номенклатура.СтавкаНДС;			
				СтруктураДанных.СтавкаНДС = СтавкаНДС;
			Иначе
				СтруктураДанных.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли СтруктураДанных.Свойство("Ставка") Тогда
			СтруктураДанных.Ставка = СтруктураДанных.СтавкаНДС.Ставка;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Склад") Тогда
		СтруктураДанных.Склад = СтруктураДанных.Склад.СкладТорговогоЗала;
	КонецЕсли;
	
	
	//Если СтруктураДанных.Свойство("Цена") Тогда
	//	Если СтруктураДанных.Свойство("ПрайсЛист") Тогда
	//		Если ЗначениеЗаполнено(СтруктураДанных.ПрайсЛист) Тогда
	//			СтруктураДанных.Цена = УНФ_ПродажиИМаркетинг.ПолучитьЦенуНоменклатурыПоПрайсЛисту(СтруктураДанных);
	//		Иначе
	//			СтруктураДанных.Цена = 0;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	//Если СтруктураДанных.Свойство("Контрагент") Тогда
	//	Если СтруктураДанных.Свойство("НаименованиеПолное") Тогда
	//		СтруктураДанных.НаименованиеПолное = СтруктураДанных.Контрагент.НаименованиеПолное;
	//	КонецЕсли;
	//	Если СтруктураДанных.Свойство("СчетКонтрагента") Тогда
	//		СтруктураДанных.СчетКонтрагента = СтруктураДанных.Контрагент.ОсновнойБанковскийСчет;
	//	КонецЕсли;
	//	Если СтруктураДанных.Свойство("ИННПолучателя") Тогда
	//		СтруктураДанных.ИННПолучателя = СтруктураДанных.Контрагент.ИНН;
	//	КонецЕсли;
	//  	Если СтруктураДанных.Свойство("КПППолучателя") Тогда
	//		СтруктураДанных.КПППолучателя = СтруктураДанных.Контрагент.КПП;
	//	КонецЕсли;
	//  КонецЕсли;
	
	//Если СтруктураДанных.Свойство("СчетКонтрагента") Тогда
	//	Если СтруктураДанных.Свойство("НазначениеПлатежа") Тогда
	//		СтруктураДанных.НазначениеПлатежа = СтруктураДанных.СчетКонтрагента.ТекстНазначения;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры // ПолучитьДанныеОбъектов()

// Функция возвращает паспортные данные физического лица строкой, используемые
// в печатных формах.
//
// Параметры
//  СтруктураДанных – Структура – ссылка на ФизЛицо и дата
//                 
// Возвращаемое значение:
//   Строка      – Строка, содержащая паспортные данные
//
Функция ПолучитьПаспорныеДанныеСтрокой(СтруктураДанных) Экспорт
	
	СтруктураПаспортныхДанных = РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьПоследнее(СтруктураДанных.Дата, Новый Структура("ФизЛицо",СтруктураДанных.ФизЛицо));
	
	ВидДокумента       = СтруктураПаспортныхДанных.ВидДокумента;
	Серия              = СтруктураПаспортныхДанных.Серия;
	Номер              = СтруктураПаспортныхДанных.Номер;
	ДатаВыдачи         = СтруктураПаспортныхДанных.ДатаВыдачи;
	//ДатаВыдачи         = "";
	КемВыдан           = СтруктураПаспортныхДанных.КемВыдан;
	НомерПодразделения = СтруктураПаспортныхДанных.КодПодразделения;
	
	Если НЕ (НЕ ЗначениеЗаполнено(ДатаВыдачи)
		И НЕ ЗначениеЗаполнено(ВидДокумента)
		И НЕ ЗначениеЗаполнено(Серия + Номер + КемВыдан + НомерПодразделения)) Тогда
		
		Возврат ?(ВидДокумента.Пустая(),"","" + ВидДокумента + ", ") 
		+ "Серия: "   + Серия + ", № " + Номер 
		+ ", Выдан: " + Формат(ДатаВыдачи,"ДФ='дд ММММ гггг'") + " года, " 
		+ КемВыдан    + "; № подр. " + НомерПодразделения;
		
	Иначе
		
		Возврат "Отсутствуют данные об удостоверении личности."
		
	КонецЕсли;	
	
КонецФункции // ПолучитьПаспорныеДанныеСтрокой()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры: 
//  Сумма        - Число - сумма от которой надо рассчитывать налоги 
//  УчитыватьНДС - Булево - признак учета НДС в сумме
//  СуммаВключаетНДС - булево - признак включения НДС в сумму ("внутри" 
//                 или "сверху")
//  СтавкаНДС    - Число - процентная ставка НДС.
//
// Возвращаемое значение:
//  Число - полученная сумма НДС.
//
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Если СуммаВключаетНДС Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;
	
	Если НЕ СуммаВключаетНДС Тогда
		СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС() 

// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура 
//  НоваяДатаДокумента - новая дата документа 
//  НачальнаяДатаДокумента - начальная дата документа 
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()


// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТОВ

//////////////////////////////////////////////////////////////////////////////// 
//  ПРОЦЕДУРЫ И ФУНКЦИИ 
//
//{БредовЮГ 2014-11-30 Наряд №000134614
Функция ПолучитьВидМатрицы(ВходящаяНоменклатура) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
	|	И НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ВходящаяНоменклатура);
	КодПВХ = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаПризнакМатрицы);
	Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(КодПВХ));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Значение;
КонецФункции
//БредовЮГ 2014-11-30 Наряд №000134614}

// Функция возвращает основную единицу измерения (по умолчанию).
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура, для которй необходимо получить
//                 единицу измерения.
//
// Возвращаемое значение:
//  СправочникСсылка.ЕдиницыИзмерения - полученная единица измерения.
// 
Функция ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(Номенклатура, флагСоздания = Ложь,ФлагЗагузки = Ложь) Экспорт
	ТипСправочника = Строка(ТипЗнч(Номенклатура));
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник."+ТипСправочника+" КАК Номенклатура
	|   ПО Номенклатура.ССылка = &Владелец И
	|	ЕдиницыИзмерения.Владелец = &Владелец И
	|	ЕдиницыИзмерения.Контрагент = &Контрагент И
	//{БредовЮГ 2015-09-06 Исправление ошщибки подбора, у некоторых номенклатур подбирало помеченную на удаление единицу измерения
	|	НЕ ЕдиницыИзмерения.ПометкаУдаления И 
	//БредовЮГ  2015-09-06 Наряд Исправление ошщибки подбора, у некоторых номенклатур подбирало помеченную на удаление единицу измерения} 
	|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения");
	Запрос.УстановитьПараметр("Владелец",Номенклатура);
	Запрос.УстановитьПараметр("Контрагент",Справочники.Контрагенты.ПустаяСсылка());
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Количество()>0 Тогда
		Выб.Следующий();
		ВыбЕдиницаИзмерения = Выб.Ссылка;
	Иначе
		Если флагСоздания Тогда
			спрЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(спрЕдиницаПоКлассификатору) Тогда
				Возврат Неопределено;
			КонецЕсли;			
			спрЕд = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			спрЕд.Владелец = Номенклатура;
			спрЕд.ЕдиницаПоКлассификатору = спрЕдиницаПоКлассификатору;
			спрЕд.Наименование = спрЕдиницаПоКлассификатору.Наименование;
			спрЕд.Коэффициент =  1;
			спрЕд.ОбменДанными.Загрузка = ФлагЗагузки;
			спрЕд.Записать();
			ВыбЕдиницаИзмерения = спрЕд.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
	КонецЕсли;	
	Возврат ВыбЕдиницаИзмерения;
	
	
КонецФункции // ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию()

Функция ЭтоГруппаНоменклатуры(Номенклатура)
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ?(Номенклатура.Группа =1,Истина,Ложь);	
	Иначе
		Возврат Номенклатура.ЭтоГруппа;	
	КонецЕсли;	
КонецФункции

Функция ПолучитьЕдиницуКлассификатора(НаименованиеЕдиницы,ПолноеНаименование = "") Экспорт 
	СпрЕдиница = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(НаименованиеЕдиницы,Истина);
	Если СпрЕдиница.Пустая() Тогда
		СпрЕдиница = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		СпрЕдиница.Наименование = НаименованиеЕдиницы;
		СпрЕдиница.ПолноеНаименование = ?(ПолноеНаименование = "",НаименованиеЕдиницы,ПолноеНаименование);
		СпрЕдиница.Записать();
	КонецЕсли;
	Возврат СпрЕдиница.Ссылка;
КонецФункции

Функция ПолучитьСоставНабора(Номенклатура) экспорт
	
	тз=Номенклатура.СоставНабора.Выгрузить();
	мсв=Новый Массив();
	Для каждого Строка из тз цикл
		
		струк = Новый Структура("Номенклатура,Количество",Строка.Компонент,Строка.Количество);		
		фструк = Новый ФиксированнаяСтруктура(струк);
		мсв.Добавить(фструк);
		
	КонецЦикла;	
	
	фмсв = новый ФиксированныйМассив(мсв);
	
	Возврат фмсв;
КонецФункции	

Процедура ЗаполнитьВесТовара(СтруктураДанных) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МассогабаритныеХарактеристики.ЕдиницаВеса,
		|	МассогабаритныеХарактеристики.Брутто
		|ИЗ
		|	РегистрСведений.МассогабаритныеХарактеристики КАК МассогабаритныеХарактеристики
		|ГДЕ
		|	МассогабаритныеХарактеристики.Номенклатура = &Номенклатура
		|	И МассогабаритныеХарактеристики.ЕдиницаИзмерения = &ЕдиницаИзмерения";
		Если СтруктураДанных.Номенклатура.БазоваяЕдиницаИзмерения <> СтруктураДанных.ЕдиницаИзмерения.ЕдиницаПоКлассификатору Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И МассогабаритныеХарактеристики.Контрагент = &Контрагент";
			Запрос.УстановитьПараметр("Контрагент", СтруктураДанных.ЕдиницаИзмерения.Контрагент);
    	КонецЕсли;
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", СтруктураДанных.ЕдиницаИзмерения.ЕдиницаПоКлассификатору);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураДанных.Номенклатура);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ВыборкаДетальныеЗаписи.Следующий();
	СтруктураДанных.ЕдиницаВеса = ВыборкаДетальныеЗаписи.ЕдиницаВеса;
	СтруктураДанных.Вес = ВыборкаДетальныеЗаписи.Брутто*СтруктураДанных.Количество;
КонецПроцедуры	
