процедура ОбменДаннымиОтправка() Экспорт
	
	//{ СИТЕК БрыляковЕЮ 2015-05-20  
	Если НЕ ПараметрыСеанса.ИспользованиеЦВД Тогда
		Возврат;
	КонецЕсли;
	// СИТЕК БрыляковЕЮ 2015-05-20 }
	
	Выборка = ПланыОбмена.ОбменЦВД.Выбрать();
	ЭтотУзел = ПланыОбмена.ОбменЦВД.ЭтотУзел();
	Пока Выборка.Следующий() Цикл
		Если ЭтотУзел = Выборка.Ссылка тогда Продолжить; КонецЕсли;
		ОбменДанными(Выборка.Ссылка);	
	КонецЦикла;
КонецПроцедуры

//{ СИТЕК БрыляковЕЮ 2015-05-21  
Процедура ОбменДанными(Ссылка) Экспорт
	
	ВсеОшибки = "";
	КоличествоОшибок = 0;
	КоличествоПакетов = 0;
	
	Попытка
		ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
		//НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.ПолучитьНастройкиПроксиНаСервере1СПредприятие();
		//ИнтернетПрокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, ПолучениеФайловИзИнтернетаКлиентСервер.СформироватьПрокси(НастройкаПроксиСервера, "http"));
		Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
		URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		Прокси.Пользователь = ВебСервис.Имя;
		Прокси.Пароль = ВебСервис.Пароль;
	Исключение
		Ошибка = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"WebService ЦВД");
		ВызватьИсключение(Ошибка);
	КонецПопытки;
	
	//++БИТ БВО 2015-11-02 - Расходная накладная на возврат должна выгружаться тоже
	//ДолжныБытьПроведены = Izh_СтроковыеФункцииКлиентСервер.МассивТипов(
	//	"ПриходнаяНакладная, КорректировкаПоступления",	"ДокументОбъект");
	ДолжныБытьПроведены = Izh_СтроковыеФункцииКлиентСервер.МассивТипов(
		"ПриходнаяНакладная, КорректировкаПоступления, РасходнаяНакладная",	"ДокументОбъект");
	//--БИТ БВО 2015-11-02	
	//{БредовЮГ 2015-09-30 Доработка по отправке документов Приходная накладная и КорректировкаПоступления по Организации
	//ДолженБытьУказанКонтрагент = Izh_СтроковыеФункцииКлиентСервер.МассивТипов(
	//	"ПриходнаяНакладная, КорректировкаПоступления, РегистрацияСчетФактуры",
	//	"ДокументОбъект"	
	ДолженБытьУказанКонтрагентИлиФирма = Izh_СтроковыеФункцииКлиентСервер.МассивТипов(
		"ПриходнаяНакладная, КорректировкаПоступления, РегистрацияСчетФактуры",	"ДокументОбъект");		
		
	//БредовЮГ  2015-09-30 Доработка по отправке документов Приходная накладная и КорректировкаПоступления по Организации } 
	
	ТолькоИзЦентра = Izh_СтроковыеФункцииКлиентСервер.МассивТипов(
		"РегистрацияСчетФактуры", "ДокументОбъект");
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1);
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Ошибка = "";
		
		Объект = ВыборкаИзменений.Получить();
		ТипОбъекта = ТипЗнч(Объект);
		
		Ушло = Ложь;
		
		Выгружать = Истина;
		Если ДолжныБытьПроведены.Найти(ТипОбъекта) <> Неопределено Тогда
			Выгружать = Выгружать И Объект.Проведен;			
		КонецЕсли;	
		
		Если ДолженБытьУказанКонтрагентИлиФирма.Найти(ТипОбъекта) <> Неопределено Тогда
			//{БредовЮГ 2015-09-30 Доработка по отправке документов Приходная накладная и КорректировкаПоступления по структурныем единицам
			//Выгружать = Выгружать И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты");
			Выгружать = Выгружать И (ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации"));
			//БредовЮГ  2015-09-30 Доработка по отправке документов Приходная накладная и КорректировкаПоступления по структурныем единицам } 
		КонецЕсли;
		
		Если ТолькоИзЦентра.Найти(ТипОбъекта) <> Неопределено Тогда
			Выгружать = Выгружать И ПараметрыСеанса.ЭтоЦентр;
		КонецЕсли;
		
		Если ТипОбъекта = Тип("ДокументОбъект.КорректировкаПоступления")Тогда
			Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Выгружать = Выгружать И ПараметрыСеанса.ЭтоЦентр;
			ИначеЕсли ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Выгружать = Выгружать И НЕ ПараметрыСеанса.ЭтоЦентр;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ТипОбъекта = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
			Выгружать = Выгружать И НЕ ПараметрыСеанса.ЭтоЦентр;			
		КонецЕсли;
		
		//++БИТ БВО 2015-11-02 - Расходная накладная на возврат должна выгружаться тоже
		Если ТипОбъекта = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
			Выгружать = Выгружать И Объект.Возврат И НЕ ПараметрыСеанса.ЭтоЦентр;
		КонецЕсли;
		//--БИТ БВО 2015-11-02
		
		Если Выгружать Тогда
			
			Если ТипОбъекта = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
				Ушло = ОтправитьПриходнуюНакладную(Объект,Прокси,Ошибка);
				
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
				Ушло = ОтправитьКорректировкуПоступления(Объект,Прокси,Ошибка);
				
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РегистрацияСчетФактуры") Тогда
				Ушло = ОтправитьРегистрациюСчетФактуры(Объект,Прокси,Ошибка);
				
			//++БИТ БВО 2015-11-02 - Расходная накладная на возврат должна выгружаться тоже
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
				Ушло = ОтправитьРасходнуюНакладную(Объект, Прокси, Ошибка);			
			//--БИТ БВО 2015-11-02			
			ИначеЕсли ТипОбъекта = Тип("УдалениеОбъекта") Тогда
				Ушло = ОтправитьУдалениеОбъекта(Объект,Прокси,Ошибка);
								
			Иначе
				Ушло = Izh_ОбменДаннымиЦВД.ОтправитьОбъект(Ссылка, Объект, Прокси, Ошибка);
			
			КонецЕсли;	
		
		КонецЕсли;
		
		Если Ушло Тогда
			Izh_ОбменДанными.ПометитьКакОтправленный(Объект);
		КонецЕсли; 
		
		Если Ушло ИЛИ НЕ Выгружать Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
		КонецЕсли;
		
		КоличествоПакетов = КоличествоПакетов + 1;
		Если Ошибка <> "" Тогда
			ВсеОшибки = Ошибка;
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецЕсли;	
		
	КонецЦикла;
		
	Если ВсеОшибки <> "" Тогда
		Сообшение = "Всего ошибок - "+КоличествоОшибок+" из "+КоличествоПакетов+"
		| последняя ошибка:
		|"+ВсеОшибки;
		ВызватьИсключение(Сообшение);
	КонецЕсли;	
	
КонецПроцедуры
// СИТЕК БрыляковЕЮ 2015-05-21 }

Функция ОтправитьПриходнуюНакладную(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_ПриходнаяНакладная_ЦВД");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.Автор = Строка(Объект.Автор.УникальныйИдентификатор());
	Пакет.БонуснаяПоставка = Объект.БонуснаяПоставка;
	Пакет.Валюта = Строка(Объект.Валюта.УникальныйИдентификатор());
	//Котлячкова ++ 29,01,15  Ошибки обмена ЦВД.
	Пакет.Грузоотправитель = ?(Объект.Грузополучатель = Неопределено,"",Объект.Грузоотправитель.Код);
	//Котлячкова -- 29,01,15
	Пакет.ГрузополучательТип = ?(Объект.Грузополучатель = Неопределено,"",Объект.Грузополучатель.Метаданные().Имя);
	Пакет.Грузополучатель = ?(Объект.Грузополучатель = Неопределено,"",Объект.Грузополучатель.Код);
	Пакет.ДатаДокумента = Объект.ДатаДокумента;
	Пакет.ДатаСФ = Объект.ДатаСФ;
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.Курс = Объект.Курс;
	Пакет.Кратность = Объект.Кратность;
	Пакет.НомерДокумента = Объект.НомерДокумента;
	Пакет.НомерСФ = Объект.НомерСФ;
	Пакет.Приемщик = Строка(Объект.Приемщик.УникальныйИдентификатор());
	Пакет.Склад = Строка(Объект.Склад.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Попытка
		Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Исключение
	КонецПопытки;
	Пакет.СуммаИтого = Объект.СуммаИтого;
	Пакет.СуммаНДСИтого = Объект.СуммаНДСИтого;
	Пакет.ДокОснование = ?(Объект.ДокОснование = Неопределено,"",Строка(Объект.ДокОснование.УникальныйИдентификатор()));
	Пакет.ДокОснованиеТип = ?(Объект.ДокОснование = Неопределено,"",Объект.ДокОснование.Метаданные().Имя);
	Пакет.ОбработанЦВД = Объект.ОбработанЦВД;
	Пакет.Контролер = Строка(Объект.Контролер.УникальныйИдентификатор());;
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_ПриходнаяНакладная_Состав_ЦВД");
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура = Строка.Номенклатура.Код;
		ПакетСостав.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения.Наименование;
		ПакетСостав.Количество = Строка.Количество;
		ПакетСостав.КоличествоПоДокументу = Строка.КоличествоПоДокументу;
		ПакетСостав.Коэффициент = Строка.Коэффициент;
		ПакетСостав.Цена = Строка.Цена;
		//{БредовЮГ 2013-09-17 Добавил в обмен цену протокола, т.к. она не учавствовала в обмене
		ПакетСостав.ЦенаПротокола = Строка.ЦенаПротокола;
		//БредовЮГ 2013-09-17 Добавил в обмен цену протокола, т.к. она не учавствовала в обмене}
		ПакетСостав.Вес = Строка.Вес;
		ПакетСостав.ЕдиницаВеса = Строка.ЕдиницаВеса.Код;
		ПакетСостав.СтавкаНДС = Строка.СтавкаНДС.Ставка;
		ПакетСостав.Сумма = Строка.Сумма;
		ПакетСостав.СуммаНДС = Строка.СуммаНДС;
		ПакетСостав.СуммаБезНДС = Строка.СуммаБезНДС;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	
	//Результат = ОтправитьСообщение(Пакет,Прокси,"DocumentObject_ПриходнаяНакладная");
	//Ошибка = Пакет;
	
	КодЛокации = ?(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="),"center");
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ПриходнаяНакладная_ЦВД","CID","RS_ПриходнаяНакладная",КодЛокации);
	Результат = ОбменДаннымиRIBСервер.ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

//++БИТ БВО 2015-11-02
Функция ПолучитьИндексЗначенияПеречисления(ЗначениеПеречисления, ИмяПеречисления)
	
	Результат = Неопределено;
	
	Попытка
		Результат = Метаданные.Перечисления[ИмяПеречисления].EnumValues.Get(Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления)).Имя;
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьРасходнуюНакладную(Объект, Прокси, Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_РасходнаяНакладная_ЦВД");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref					= Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark			= Объект.ПометкаУдаления;
	Пакет.Date					= Объект.Дата;
	Пакет.Number				= Объект.Номер;
	Пакет.Posted				= Объект.Проведен;
	Пакет.Фирма					= Строка(Объект.Фирма.УникальныйИдентификатор());	
	Пакет.Валюта 				= Строка(Объект.Валюта.УникальныйИдентификатор());		
	Пакет.Курс 					= Объект.Курс;
	Пакет.Контрагент 			= Объект.Контрагент.Код;
	Пакет.Склад 				= Строка(Объект.Склад.УникальныйИдентификатор());
	Пакет.Автор					= Строка(Объект.Автор.УникальныйИдентификатор());	
	Пакет.Основание				= Объект.Основание;
	Пакет.СтруктурнаяЕдиница	= Объект.СтруктурнаяЕдиница.Код;
	Пакет.Грузополучатель		= ?(Объект.Грузополучатель	= Неопределено, "", Объект.Грузополучатель.Код);
	Пакет.АдресДоставки			= Объект.АдресДоставки;
	Пакет.Грузоотправитель		= ?(Объект.Грузоотправитель = Неопределено, "", Объект.Грузоотправитель.Код);
	Пакет.ДокОснование			= ?(Объект.ДокОснование 	= Неопределено, "", Объект.ДокОснование.УникальныйИдентификатор());
	Пакет.Комментарий			= Объект.Комментарий;
	Пакет.Возврат				= Объект.Возврат;
	Пакет.Кратность				= Объект.Кратность;	
	Пакет.ТипДоговора			= ПолучитьИндексЗначенияПеречисления(Объект.ТипДоговора, "ТипыДоговоров");	
	Пакет.СуммаИтого			= Объект.СуммаИтого;
	Пакет.СуммаНДСИтого 		= Объект.СуммаНДСИтого;
	Пакет.Менеджер 				= Строка(Объект.Менеджер.УникальныйИдентификатор());
	Пакет.Экспедитор 			= Строка(Объект.Экспедитор.УникальныйИдентификатор());		
	Пакет.Контролер 			= Строка(Объект.Контролер.УникальныйИдентификатор());
	Пакет.Загружен 				= Объект.Загружен;
	Пакет.НомерRMS 				= Объект.НомерRMS;
	Пакет.НомераПаллет 			= Объект.НомераПаллет;
	//Доп.информация
	Пакет.ГрузоотправительТип	= ?(Объект.Грузоотправитель = Неопределено, "", Объект.Грузоотправитель.Метаданные().Имя);
	Пакет.ГрузополучательТип	= ?(Объект.Грузополучатель = Неопределено, "", Объект.Грузополучатель.Метаданные().Имя);	
	Пакет.КонтрагентТип			= Объект.Контрагент.Метаданные().Имя;
	Пакет.ДокОснованиеТип		= ?(Объект.ДокОснование = Неопределено, "", Объект.ДокОснованиеТип.Метаданные().Имя);
						
	//Пакет.ОбработанЦВД = Объект.ОбработанЦВД;	
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_РасходнаяНакладная_Состав_ЦВД");
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура		= Строка.Номенклатура.Код;
		ПакетСостав.ЕдиницаИзмерения	= Строка.ЕдиницаИзмерения.Наименование;
		ПакетСостав.Количество			= Строка.Количество;		
		ПакетСостав.Коэффициент			= Строка.Коэффициент;
		ПакетСостав.Цена				= Строка.Цена;		
		ПакетСостав.Сумма				= Строка.Сумма;
		ПакетСостав.СтавкаНДС			= Строка.СтавкаНДС.Ставка;
		ПакетСостав.СуммаНДС			= Строка.СуммаНДС;		
		ПакетСостав.Вес					= Строка.Вес;
		ПакетСостав.ЕдиницаВеса			= Строка.ЕдиницаВеса.Код;		
		ПакетСостав.Тара				= Строка.Тара.Код;
		ПакетСостав.КолТара				= Строка.КолТара;
		ПакетСостав.Тара1				= Строка.Тара1.Код;
		ПакетСостав.КолТара1			= Строка.КолТара1;
		ПакетСостав.Тара2				= Строка.Тара2.Код;
		ПакетСостав.КолТара2			= Строка.КолТара2;
		ПакетСостав.ВесБрутто			= Строка.ВесБрутто;
		ПакетСостав.НПП					= Строка.НПП;		
		ПакетСостав.ЦенаБезНДС			= Строка.ЦенаБезНДС;
		ПакетСостав.СуммаБезНДС			= Строка.СуммаБезНДС;				
		ПакетСостав.ТипРеализацииТовара	= ПолучитьИндексЗначенияПеречисления(Объект.ТипДоговора, "ТипыДоговоров");		
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;	
	
	КодЛокации	= ?(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="),"center");
	
	RibMessages	= ОбменДаннымиRIBСервер.УпаковатьВСообщение	(Объект.Дата, Объект.Номер, Пакет, "DocumentObject_РасходнаяНакладная_ЦВД","CID", "RS_РасходнаяНакладная", КодЛокации);
	Результат	= ОбменДаннымиRIBСервер.ОтправитьСообщение	(RibMessages, Прокси);
	Ошибка		= RibMessages;
	
	Возврат Результат;
	
КонецФункции
//--БИТ БВО 2015-11-02

Функция ОтправитьКорректировкуПоступления(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_КорректировкаПоступления_ЦВД");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.Автор = Строка(Объект.Автор.УникальныйИдентификатор());
	Пакет.ДатаДокумента = Объект.ДатаДокумента;
	Пакет.ДатаСФ = Объект.ДатаСФ;
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.НомерДокумента = Объект.НомерДокумента;
	Пакет.НомерСФ = Объект.НомерСФ;
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.СуммаИтого = Объект.СуммаИтого;
	Пакет.СуммаНДСИтого = Объект.СуммаНДСИтого;
	Пакет.РежимКорректировки = Метаданные.Перечисления.РежимыКорректировок.EnumValues.Get(Перечисления.РежимыКорректировок.Индекс(Объект.РежимКорректировки)).Имя;
	Пакет.ДокументПоступления = ?(Объект.ДокументПоступления = Неопределено,"",Строка(Объект.ДокументПоступления.УникальныйИдентификатор()));
	Пакет.ДокументПоступленияТип = ?(Объект.ДокументПоступления = Неопределено,"",Объект.ДокументПоступления.Метаданные().Имя);
	Пакет.ИсправляемыйДокумент = ?(Объект.ИсправляемыйДокумент = Неопределено,"",Строка(Объект.ИсправляемыйДокумент.УникальныйИдентификатор()));
	Пакет.ИсправляемыйДокументТип = ?(Объект.ИсправляемыйДокумент = Неопределено,"",Объект.ИсправляемыйДокумент.Метаданные().Имя);
	Пакет.ОбработанЦВД = Объект.ОбработанЦВД;
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_КорректировкаПоступления_Состав_ЦВД");
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура = Строка.Номенклатура.Код;
		ПакетСостав.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения.Наименование;
		ПакетСостав.Количество = Строка.Количество;
		ПакетСостав.КоличествоДоИзменения = Строка.КоличествоДоИзменения;
		ПакетСостав.КоличествоДоКорректировки = Строка.КоличествоДоКорректировки;
		ПакетСостав.Коэффициент = Строка.Коэффициент;
		ПакетСостав.Цена = Строка.Цена;
		ПакетСостав.ЦенаДоКорректировки = Строка.ЦенаДоКорректировки;
		ПакетСостав.ЦенаДоИзменения = Строка.ЦенаДоИзменения;
		ПакетСостав.СуммаНДС = Строка.СуммаНДС;
		ПакетСостав.СуммаНДСДоКорректировки = Строка.СуммаНДСДоКорректировки;
		ПакетСостав.СуммаНДСДоИзменения = Строка.СуммаНДСДоИзменения;
		ПакетСостав.СуммаБезНДС                = Строка.СуммаБезНДС;
		ПакетСостав.СуммаБезНДСДоКорректировки = Строка.СуммаБезНДСДоКорректировки;
		ПакетСостав.СуммаБезНДСДоИзменения     = Строка.СуммаБезНДСДоИзменения;
		ПакетСостав.Сумма = Строка.Сумма;
		ПакетСостав.СуммаДоКорректировки = Строка.СуммаДоКорректировки;
		ПакетСостав.СуммаДоИзменения = Строка.СуммаДоИзменения;
		ПакетСостав.СтавкаНДС = Строка.СтавкаНДС.Ставка;
		ПакетСостав.СтавкаНДСДоИзменения = Строка.СтавкаНДСДоИзменения.Ставка;
		ПакетСостав.Вес = Строка.Вес;
		ПакетСостав.ЕдиницаВеса = Строка.ЕдиницаВеса.Код;
		ПакетСостав.ЕстьВДокументеПоступления = Строка.ЕстьВДокументеПоступления;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	
	КодЛокации = ?(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="),"center");
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_КорректировкаПоступления_ЦВД","CID","RS_КорректировкаПоступления",КодЛокации);
	Результат = ОбменДаннымиRIBСервер.ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьРегистрациюСчетФактуры(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_РегистрацияСчетФактуры_ЦВД");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);

	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.Автор = Строка(Объект.Автор.УникальныйИдентификатор());
	Пакет.ВидСчетаФактуры = Метаданные.Перечисления.ВидСчетаФактурыПолученного.EnumValues.Get(Перечисления.ВидСчетаФактурыПолученного.Индекс(Объект.ВидСчетаФактуры)).Имя;
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.НомерВходящегоДокумента = Объект.НомерВходящегоДокумента;
	Пакет.ДатаВходящегоДокумента = Объект.ДатаВходящегоДокумента;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
		Пакет.ДокументОснование = Строка(Объект.ДокументОснование.УникальныйИдентификатор());
		Пакет.ДокументОснованиеТип = Объект.ДокументОснование.Метаданные().Имя;
	Иначе
		Пакет.ДокументОснование = "";
		Пакет.ДокументОснованиеТип = "";
	КонецЕсли;
	
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.НомерИсправления = Объект.НомерИсправления;
	Пакет.ДатаИсправления = Объект.ДатаИсправления;
	Пакет.Исправление = Объект.Исправление;
	Пакет.ИсправляемыйСчетФактура = Строка(Объект.ИсправляемыйСчетФактура.УникальныйИдентификатор());
	Пакет.НомерИсходногоДокумента = Объект.НомерИсходногоДокумента;
	Пакет.ДатаИсходногоДокумента = Объект.ДатаИсходногоДокумента;
	Пакет.УчитыватьИсправлениеИсходногоДокумента = Объект.УчитыватьИсправлениеИсходногоДокумента;
	Пакет.НомерИсправленияИсходногоДокумента = Объект.НомерИсправленияИсходногоДокумента;
	Пакет.ДатаИсправленияИсходногоДокумента = Объект.ДатаИсправленияИсходногоДокумента;
	Пакет.НДСПредъявленКВычету = Объект.НДСПредъявленКВычету;
	Пакет.СчетФактураБезНДС = Объект.СчетФактураБезНДС;
	Пакет.КодВидаОперации = Объект.КодВидаОперации;
	Пакет.КодСпособаПолучения = Объект.КодСпособаПолучения;
	Пакет.СуммаДокумента = Объект.СуммаДокумента;
	Пакет.СуммаУвеличение = Объект.СуммаУвеличение;
	Пакет.СуммаУменьшение = Объект.СуммаУменьшение;
	Пакет.СуммаНДСДокумента = Объект.СуммаНДСДокумента;
	Пакет.СуммаНДСУвеличение = Объект.СуммаНДСУвеличение;
	Пакет.СуммаНДСУменьшение = Объект.СуммаНДСУменьшение;
	Пакет.ОбработанЦВД = Объект.ОбработанЦВД;
	
	КодЛокации = ?(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="),"center");
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_РегистрацияСчетФактуры_ЦВД","CID","RS_РегистрацияСчетФактуры",КодЛокации);
	Результат = ОбменДаннымиRIBСервер.ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьУдалениеОбъекта(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "УдалениеОбъекта");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.Тип = ПривестиТип(Объект.Ссылка.Метаданные().Имя,Объект.Ссылка);
	//Результат = ОтправитьСообщение(Пакет,Прокси,"УдалениеОбъекта");
	//Ошибка = Пакет;
	КодЛокации = ?(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="),"center");
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"УдалениеОбъекта","CID","RS_УдалениеОбъекта",КодЛокации);
	Результат = ОбменДаннымиRIBСервер.ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ПривестиТип(Тип,Ссылка)
	Если Тип = "РасходнаяНакладная" Тогда
		Если Ссылка.Возврат Тогда
			Тип = "ВозвратнаяНакладная";
		КонецЕсли;	
	ИначеЕсли Тип = "ВозвратнаяНакладнаяОтПокупателя" Тогда
		Тип = "ВозвратнаяНакладная";
	КонецЕсли;	
	Возврат Тип;
КонецФункции

Функция ЕстьНулевыеЦены(Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяНакладная.Ссылка
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|ГДЕ
		|	ПриходнаяНакладная.Состав.Цена = 0
		|	И ПриходнаяНакладная.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;	
	Возврат Истина;
КонецФункции

Функция ЗагрузитьУдалениеОбъекта(XDTO,Package) Экспорт
	Попытка
		Результат = Истина;
		Ссылка = Документы[XDTO.Тип].ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект <> Неопределено Тогда 
			Объект.Удалить();
		КонецЕсли;
	Исключение
		Package = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьПриходнаяНакладная(XDTO,Package) Экспорт
	Попытка
		Результат = Истина;
		Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ПриходнаяНакладная.СоздатьДокумент();
			Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.БонуснаяПоставка = XDTO.БонуснаяПоставка;
		Объект.Валюта = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Валюта));
		Объект.Грузоотправитель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Грузоотправитель);
		Объект.Грузополучатель = ?(XDTO.ГрузополучательТип = "",Неопределено,Справочники[XDTO.ГрузополучательТип].НайтиПоКоду(XDTO.Грузополучатель));
		Если ПараметрыСеанса.ЭтоЦентр Тогда
			Объект.Дата = XDTO.Date;
		КонецЕсли;
		Объект.ДатаДокумента = XDTO.ДатаДокумента;
		Объект.ДатаСФ = XDTO.ДатаСФ;
		Объект.Контрагент = Справочники[XDTO.КонтрагентТип].НайтиПоКоду(XDTO.Контрагент);
		Объект.Фирма = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Фирма));
		Объект.Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Автор));
		Объект.Курс = XDTO.Курс;
		Объект.Кратность = XDTO.Кратность;
		Объект.Номер = XDTO.Number;
		Объект.НомерДокумента = XDTO.НомерДокумента;
		Объект.НомерСФ = XDTO.НомерСФ;
		Объект.Приемщик = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Приемщик));
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Склад));
		Объект.СуммаИтого = XDTO.СуммаИтого;
		Объект.СуммаНДСИтого = XDTO.СуммаНДСИтого;
		Попытка
			Объект.ТипДоговора = Перечисления.ТипыДоговоров[XDTO.ТипДоговора];
		Исключение
		КонецПопытки;
		Объект.Комментарий = XDTO.Комментарий;
		Если XDTO.ДокОснование <> "" Тогда
			Объект.ДокОснование = Документы[XDTO.ДокОснованиеТип].ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ДокОснование));
		КонецЕсли;
		Объект.Контролер = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Контролер));
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.КоличествоПоДокументу = Строка.КоличествоПоДокументу;
			НоваяСтрока.Цена = Строка.Цена;
			//{БредовЮГ 2013-09-17 Добавил в обмен цену протокола, т.к. она не учавствовала в обмене
			НоваяСтрока.ЦенаПротокола = Строка.ЦенаПротокола;
			//БредовЮГ 2013-09-17 Добавил в обмен цену протокола, т.к. она не учавствовала в обмене		}
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СуммаБезНДС = Строка.СуммаБезНДС;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Вес = Строка.Вес;
			НоваяСтрока.ЕдиницаВеса = Справочники.ЕдиницыИзмерения.НайтиПоКоду(Строка.ЕдиницаВеса,,,НоваяСтрока.Номенклатура);
		КонецЦикла;
		//Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		//	Объект.ОбработанЦВД = XDTO.ОбработанЦВД;
		//Иначе
		//	Объект.ОбработанЦВД = ЛОЖЬ;
		//КонецЕсли;
		Объект.ДополнительныеСвойства.Вставить("ОбменЦВД",Истина);
		
		Если XDTO.DeletionMark = ЛОЖЬ И Объект.ПометкаУдаления = ИСТИНА Тогда
			Объект.ПометкаУдаления = XDTO.DeletionMark;
		КонецЕсли;
		
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
		Izh_ОбменДанными.НеРегистрироватьВЦВД(Объект, Истина);
		// СИТЕК БрыляковЕЮ 2015-05-06 }
		
		Если XDTO.DeletionMark = ИСТИНА Тогда
			//Объект.ОбработанЦВД = ЛОЖЬ;
			Объект.ДополнительныеСвойства.Вставить("РазрешеноРедактировать",Истина);
			//{ СИТЕК БрыляковЕЮ 2015-05-06  
			// Исходный текст --> 
			//Если ПараметрыСеанса.ЭтоЦентр И Объект.Проведен Тогда
			//	Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			//КонецЕсли;
			// <-- Исходный текст 
			Izh_ОбменДанными.ОтменитьПроведениеДокумента(Объект);
			// СИТЕК БрыляковЕЮ 2015-05-06 }
			Объект.ПометкаУдаления = XDTO.DeletionMark;
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			Если XDTO.Posted Тогда
				//{ СИТЕК БрыляковЕЮ 2015-05-06  
				Izh_ОбменДанными.УстановитьОбменДаннымиЗагрузка(Объект, Ложь);
				Объект.Записать(РежимЗаписиДокумента.Проведение);
				// СИТЕК БрыляковЕЮ 2015-05-06 }
			Иначе	
				Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Package = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьРасходнаяНакладная(XDTO,Package) Экспорт
	
	Попытка
		Результат = Истина;
		Ссылка		= Документы.РасходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект		= Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект	= Документы.РасходнаяНакладная.СоздатьДокумент();
			Ссылка	= Документы.РасходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		
		Если ПараметрыСеанса.ЭтоЦентр Тогда
			Объект.Дата = XDTO.Date;
		КонецЕсли;
		Объект.Номер				= XDTO.Number;
		Объект.Фирма				= Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Фирма));		
		Объект.Валюта				= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Валюта));
		Объект.Курс					= XDTO.Курс;
		Объект.Контрагент			= Справочники[XDTO.КонтрагентТип].НайтиПоКоду(XDTO.Контрагент);
		Объект.Склад				= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Склад));
		Объект.Автор				= Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Автор));
		Объект.Грузоотправитель		= ?(XDTO.ГрузоотправительТип = ""	, Неопределено, Справочники[XDTO.ГрузоотправительТип].НайтиПоКоду(XDTO.Грузоотправитель));
		Объект.Грузополучатель		= ?(XDTO.ГрузополучательТип = ""	, Неопределено, Справочники[XDTO.ГрузополучательТип].НайтиПоКоду(XDTO.Грузополучатель));
		Объект.Основание			= XDTO.Основание;
		Объект.СтруктурнаяЕдиница	= Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.АдресДоставки		= XDTO.АдресДоставки;		
		Объект.ДокОснование			= ?(ЗначениеЗаполнено(XDTO.ДокОснование), Документы[XDTO.ДокОснованиеТип].ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ДокОснование)), Неопределено);
		Объект.Комментарий			= XDTO.Комментарий;
		Объект.Возврат				= XDTO.Возврат;
		Объект.Кратность			= XDTO.Кратность;
		Объект.ТипДоговора			= ?(ЗначениеЗаполнено(XDTO.ТипДоговора), Перечисления.ТипыДоговоров[XDTO.ТипДоговора], Неопределено);
		Объект.СуммаИтого			= XDTO.СуммаИтого;
		Объект.СуммаНДСИтого		= XDTO.СуммаНДСИтого;
		Объект.Менеджер				= Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Менеджер));
		Объект.Экспедитор			= Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Экспедитор));
		Объект.Контролер			= Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Контролер));
		Объект.Загружен 			= XDTO.Загружен;
		Объект.НомерRMS 			= XDTO.НомерRMS;
		Объект.НомераПаллет 		= XDTO.НомераПаллет;				
								
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура		= ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);			
			НоваяСтрока.ЕдиницаИзмерения	= Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура);			
			НоваяСтрока.Количество			= Строка.Количество;			
			НоваяСтрока.Коэффициент			= Строка.Коэффициент;
			НоваяСтрока.Цена				= Строка.Цена;						
			НоваяСтрока.Сумма				= Строка.Сумма;			
			НоваяСтрока.СтавкаНДС			= Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДС			= Строка.СуммаНДС;
			НоваяСтрока.Вес					= Строка.Вес;
			НоваяСтрока.ЕдиницаВеса			= Справочники.ЕдиницыИзмерения.НайтиПоКоду(Строка.ЕдиницаВеса,,,НоваяСтрока.Номенклатура);
			НоваяСтрока.Тара				= Справочники.Тара.НайтиПоКоду(Строка.Тара);
			НоваяСтрока.КолТара				= Строка.КолТара;
			НоваяСтрока.Тара1				= Справочники.Тара.НайтиПоКоду(Строка.Тара1);
			НоваяСтрока.КолТара1			= Строка.КолТара1;
			НоваяСтрока.Тара2				= Справочники.Тара.НайтиПоКоду(Строка.Тара2);
			НоваяСтрока.КолТара2			= Строка.КолТара2;			
			НоваяСтрока.ВесБрутто			= Строка.ВесБрутто;
			НоваяСтрока.НПП					= Строка.НПП;		
			НоваяСтрока.ЦенаБезНДС			= Строка.ЦенаБезНДС;
			НоваяСтрока.СуммаБезНДС			= Строка.СуммаБезНДС;			
			//НоваяСтрока.ТипРеализацииТовара	= ?(Строка.ТипРеализацииТовара = "", Неопределено, Перечисления.ТипыДоговоров.Получить(Строка.ТипРеализацииТовара));					
			НоваяСтрока.ТипРеализацииТовара	= ?(Строка.ТипРеализацииТовара = "", Неопределено, Перечисления.ТипыДоговоров[Строка.ТипРеализацииТовара]);
		КонецЦикла;
		
		Объект.ДополнительныеСвойства.Вставить("ОбменЦВД", Истина);
		
		Если XDTO.DeletionMark = ЛОЖЬ И Объект.ПометкаУдаления = ИСТИНА Тогда
			Объект.ПометкаУдаления = XDTO.DeletionMark;
		КонецЕсли;
				
		Izh_ОбменДанными.НеРегистрироватьВЦВД(Объект, Истина);
				
		Если XDTO.DeletionMark = ИСТИНА Тогда			
			Объект.ДополнительныеСвойства.Вставить("РазрешеноРедактировать",Истина);			
			Izh_ОбменДанными.ОтменитьПроведениеДокумента(Объект);			
			Объект.ПометкаУдаления = XDTO.DeletionMark;
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			Если XDTO.Posted Тогда				
				Izh_ОбменДанными.УстановитьОбменДаннымиЗагрузка(Объект, Ложь);
				Объект.Записать(РежимЗаписиДокумента.Проведение);				
			Иначе	
				Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Package = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКорректировкаПоступления(XDTO,Package) Экспорт
	Попытка
		Результат = Истина;
		Ссылка = Документы.КорректировкаПоступления.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.КорректировкаПоступления.СоздатьДокумент();
			Ссылка = Документы.КорректировкаПоступления.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Дата = XDTO.Date; 
		Объект.ДатаДокумента = XDTO.ДатаДокумента;
		Объект.ДатаСФ = XDTO.ДатаСФ;
		Объект.Контрагент = Справочники[XDTO.КонтрагентТип].НайтиПоКоду(XDTO.Контрагент);
		Объект.Фирма = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Фирма));
		Объект.Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Автор));
		Если ПараметрыСеанса.ЭтоЦентр Тогда
			Объект.Номер = XDTO.Number;
		КонецЕсли;
		Объект.НомерДокумента = XDTO.НомерДокумента;
		Объект.НомерСФ = XDTO.НомерСФ;
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.СуммаИтого = XDTO.СуммаИтого;
		Объект.СуммаНДСИтого = XDTO.СуммаНДСИтого;
		Попытка
			Объект.РежимКорректировки = Перечисления.РежимыКорректировок[XDTO.РежимКорректировки];
		Исключение
		КонецПопытки;
		Объект.Комментарий = XDTO.Комментарий;
		Если XDTO.ДокументПоступления <> "" Тогда
			Объект.ДокументПоступления = Документы[XDTO.ДокументПоступленияТип].ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ДокументПоступления));
		КонецЕсли;	
		Если XDTO.ИсправляемыйДокумент <> "" Тогда
			Объект.ИсправляемыйДокумент = Документы[XDTO.ИсправляемыйДокументТип].ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ИсправляемыйДокумент));
		КонецЕсли;	
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.КоличествоДоИзменения = Строка.КоличествоДоИзменения;
			НоваяСтрока.КоличествоДоКорректировки = Строка.КоличествоДоКорректировки;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СуммаДоКорректировки = Строка.СуммаДоКорректировки;
			НоваяСтрока.СуммаДоИзменения = Строка.СуммаДоИзменения;
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.СуммаНДСДоИзменения = Строка.СуммаНДСДоИзменения;
			НоваяСтрока.СуммаНДСДоКорректировки = Строка.СуммаНДСДоКорректировки;
			НоваяСтрока.СуммаБезНДС                = Строка.СуммаБезНДС;
			НоваяСтрока.СуммаБезНДСДоИзменения     = Строка.СуммаБезНДСДоИзменения;
			НоваяСтрока.СуммаБезНДСДоКорректировки = Строка.СуммаБезНДСДоКорректировки;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.СтавкаНДС));
			НоваяСтрока.СтавкаНДСДоИзменения = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.СтавкаНДСДоИзменения));
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.ЦенаДоИзменения = Строка.ЦенаДоИзменения;
			НоваяСтрока.ЦенаДоКорректировки = Строка.ЦенаДоКорректировки;
			НоваяСтрока.Вес = Строка.Вес;
			НоваяСтрока.ЕдиницаВеса = Справочники.ЕдиницыИзмерения.НайтиПоКоду(Строка.ЕдиницаВеса,,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕстьВДокументеПоступления = Строка.ЕстьВДокументеПоступления;
		КонецЦикла;
		//Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		//	Объект.ОбработанЦВД = XDTO.ОбработанЦВД;
		//КонецЕсли;	
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.ДополнительныеСвойства.Вставить("ОбменЦВД",Истина);
		
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
			Izh_ОбменДанными.НеРегистрироватьВЦВД(Объект, Ложь);
		// СИТЕК БрыляковЕЮ 2015-05-06 }

		Если XDTO.Posted Тогда
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			Объект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;

	Исключение
		Package = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 	
КонецФункции

Функция ЗагрузитьРегистрацияСчетФактуры(XDTO,Package) Экспорт
	Попытка
		Результат=Истина;
		Ссылка = Документы.РегистрацияСчетФактуры.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда 
			Объект = Документы.РегистрацияСчетФактуры.СоздатьДокумент();
			Ссылка = Документы.РегистрацияСчетФактуры.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		
		Объект.Дата = XDTO.Date; 
		Объект.Контрагент = Справочники[XDTO.КонтрагентТип].НайтиПоКоду(XDTO.Контрагент);
		Объект.Фирма = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Фирма));
		Объект.Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Автор));
		Объект.Номер = XDTO.Number;
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Комментарий = XDTO.Комментарий;
		
		Попытка
			Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного[XDTO.ВидСчетаФактуры];
		Исключение
		КонецПопытки;
		
		Объект.НомерВходящегоДокумента = XDTO.НомерВходящегоДокумента;
		Объект.ДатаВходящегоДокумента = XDTO.ДатаВходящегоДокумента;
		
		Если XDTO.ДокументОснование <> "" Тогда
			Объект.ДокументОснование = Документы[XDTO.ДокументОснованиеТип].ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ДокументОснование));
		КонецЕсли;
		
		Объект.НомерИсправления = XDTO.НомерИсправления;
		Объект.ДатаИсправления = XDTO.ДатаИсправления;
		Объект.Исправление = XDTO.Исправление;
		Объект.ИсправляемыйСчетФактура = Документы.РегистрацияСчетФактуры.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ИсправляемыйСчетФактура));
		Объект.НомерИсходногоДокумента = XDTO.НомерИсходногоДокумента;
		Объект.ДатаИсходногоДокумента = XDTO.ДатаИсходногоДокумента;
		Объект.УчитыватьИсправлениеИсходногоДокумента = XDTO.УчитыватьИсправлениеИсходногоДокумента;
		Объект.НомерИсправленияИсходногоДокумента = XDTO.НомерИсправленияИсходногоДокумента;
		Объект.ДатаИсправленияИсходногоДокумента = XDTO.ДатаИсправленияИсходногоДокумента;
		Объект.НДСПредъявленКВычету = XDTO.НДСПредъявленКВычету;
		Объект.СчетФактураБезНДС = XDTO.СчетФактураБезНДС;
		Объект.КодВидаОперации = XDTO.КодВидаОперации;
		Объект.КодСпособаПолучения = XDTO.КодСпособаПолучения;
		Объект.СуммаДокумента = XDTO.СуммаДокумента;
		Объект.СуммаУвеличение = XDTO.СуммаУвеличение;
		Объект.СуммаУменьшение = XDTO.СуммаУменьшение;
		Объект.СуммаНДСДокумента = XDTO.СуммаНДСДокумента;
		Объект.СуммаНДСУвеличение = XDTO.СуммаНДСУвеличение;
		Объект.СуммаНДСУменьшение = XDTO.СуммаНДСУменьшение;
		
		//Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		//	Объект.ОбработанЦВД = XDTO.ОбработанЦВД;
		//КонецЕсли;	
		
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.ДополнительныеСвойства.Вставить("ОбменЦВД",Истина);
		
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
		Izh_ОбменДанными.НеРегистрироватьВЦВД(Объект, Ложь);
		// СИТЕК БрыляковЕЮ 2015-05-06 }
		
		Если XDTO.Posted Тогда
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			Объект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		//{Ситек ДойниковПВ 2015-11-06
		
		Основание = Объект.ДокументОснование;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходнаяНакладная") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ОбменДаннымиОбщийСервер.ЗарегистрироватьДляОбменаФин(Основание);
		КонецЕсли; 
		
		//}Ситек ДойниковПВ 2015-11-06

	Исключение
		Package = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 	
КонецФункции

Функция ОтправитьАктПриемки(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_АктПриемки_ЦВД");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Автор = Строка(Объект.Автор.УникальныйИдентификатор());
	Пакет.Валюта = Строка(Объект.Валюта.УникальныйИдентификатор());
	Пакет.Грузоотправитель = Объект.Грузоотправитель.Код;
	Пакет.ДатаДокумента = Объект.ДатаДокумента;
	Пакет.Заключение = Объект.Заключение;
	Пакет.Кладовщик = ?(ЗначениеЗаполнено(Объект.Кладовщик),Объект.Кладовщик.Код,"");
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.Контрагент = ?(ЗначениеЗаполнено(Объект.Контрагент),Объект.Контрагент.Код,"");
	Пакет.Кратность = Объект.Кратность;
	Пакет.Курс = Объект.Курс;
	Пакет.НомерДокумента = Объект.НомерДокумента;
	Пакет.ПредстСотр = Строка(Объект.ПредстСотр.УникальныйИдентификатор());
	Пакет.ПредстФирма = Строка(Объект.ПредстФирма.УникальныйИдентификатор());
	Пакет.Склад = Строка(Объект.Склад.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Попытка
		Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Исключение
	КонецПопытки;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.Товаровед = ?(ЗначениеЗаполнено(Объект.Товаровед),Объект.Товаровед.Код,"");
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_АктПриемки_Состав_ЦВД");
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения.Наименование;
		ПакетСостав.Ключ = Строка.Ключ;
		ПакетСостав.Количество = Строка.Количество;
		ПакетСостав.КоличествоПоДокументу = Строка.КоличествоПоДокументу;
		ПакетСостав.Коэффициент = Строка.Коэффициент;
		ПакетСостав.Номенклатура = Строка.Номенклатура.Код;
		ПакетСостав.ПроцКол = Строка.ПроцКол;
		ПакетСостав.ПроцСумма = Строка.ПроцСумма;
		ПакетСостав.РКоличество = Строка.РКоличество;
		ПакетСостав.РСумма = Строка.РСумма;
		ПакетСостав.СтавкаНДС = Строка.СтавкаНДС.Ставка;
		ПакетСостав.Сумма = Строка.Сумма;
		ПакетСостав.СуммаПоДокументу = Строка.СуммаПоДокументу;
		ПакетСостав.Цена = Строка.Цена;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	ТипРасхождения = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_АктПриемки_ПричиныРасхождений_ЦВД");
	Для Каждого Строка Из Объект.ПричиныРасхождений Цикл
		ПакетРасхождения = ФабрикаXDTO.Создать(ТипРасхождения);
		ПакетРасхождения.Ключ = Строка.Ключ;
		ПакетРасхождения.Причина = Метаданные.Перечисления.РезультатПриемки.EnumValues.Get(Перечисления.РезультатПриемки.Индекс(Строка.Причина)).Имя;
		ПакетРасхождения.Количество = Строка.Количество;
		Пакет.ПричиныРасхождений.Добавить(ПакетРасхождения);
	КонецЦикла;
	//Результат = ОтправитьСообщение(Пакет,Прокси,"DocumentObject_ПриходнаяНакладная");
	//Ошибка = Пакет;
	
	КодЛокации = ?(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="),"center");
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_АктПриемки_ЦВД","CID","RS_АктПриемки",КодЛокации);
	Результат = ОбменДаннымиRIBСервер.ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

