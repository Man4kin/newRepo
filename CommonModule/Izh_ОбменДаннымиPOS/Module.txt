Функция ПолучитьДанные(сзТовары = Неопределено, БезОстатка = Ложь)
	//Получаем данные
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	А.Ссылка
	|ПОМЕСТИТЬ ВТОбщепит
	|ИЗ
	|	Справочник.Номенклатура КАК А
	|ГДЕ
	|	А.Ссылка В ИЕРАРХИИ(&ГруппаОбщепит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Набор.Ссылка ЕСТЬ NULL 
	|			ТОГДА Номенклатура1.Ссылка
	|		ИНАЧЕ Набор.Ссылка
	|	КОНЕЦ КАК Ссылка,
	|	ЕдИзмерения.Значение КАК ЕдИзмерения,
	|	МАКСИМУМ(Остаток.КоличествоОстаток / ВЫБОР
	|			КОГДА Набор.Количество ЕСТЬ NULL 
	|					ИЛИ Набор.Количество = 0
	|				ТОГДА 1
	|			ИНАЧЕ Набор.Количество
	|		КОНЕЦ) КАК Остаток,
	|	СУММА(ВЫБОР
	|			КОГДА РасходнаяЦенаАкция.Номенклатура ЕСТЬ NULL 
	|				ТОГДА ЦеныНоменклатуры.Цена
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасходнаяЦенаАкция.ДатаНачала <= &ТекДата
	|							И &ТекДата <= РасходнаяЦенаАкция.ДатаОкончания
	|						ТОГДА РасходнаяЦенаАкция.Цена
	|					ИНАЧЕ ЦеныНоменклатуры.Цена
	|				КОНЕЦ
	|		КОНЕЦ * ВЫБОР
	|			КОГДА Набор.Количество ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ Набор.Количество
	|		КОНЕЦ) КАК РасходнаяЦена,
	|	ВЫБОР
	|		КОГДА РасходнаяЦенаАкция.ДатаНачала <= &ТекДата
	|				И &ТекДата <= РасходнаяЦенаАкция.ДатаОкончания
	|			ТОГДА РасходнаяЦенаАкция.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончанияАкции,
	|	СУММА(ЦеныНоменклатуры.Цена * ВЫБОР
	|			КОГДА Набор.Количество ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ Набор.Количество
	|		КОНЕЦ) КАК ПостЦенаАкция,
	|	СУММА(Остаток.ПриходнаяЦена * ВЫБОР
	|			КОГДА Набор.Количество ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ Набор.Количество
	|		КОНЕЦ) КАК ПРиходнаяЦена,
	|	ВЫБОР
	|		КОГДА Номенклатура1.ТипТовара = &ТипВесовой
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипТовара,
	|	РеквизитАлко.Значение КАК ВидАлко,
	|	1 КАК МножительШК,
	|	СтатусНоменклатуры.Статус КАК СТатус,
	|	РасходнаяЦенаАкция.Название КАК НАзвание,
	|	РасходнаяЦенаАкция.ТипПромо КАК ТИпПромо,
	|	РасходнаяЦенаАкция.ЗначениеПорога КАК ЗНачениеПорога,
	|	РасходнаяЦенаАкция.ТипПорога КАК ТИпПорога,
	|	СУММА(Izh_МРЦ.МинимальнаяРозничнаяЦена * ВЫБОР
	|			КОГДА Набор.Количество ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ Набор.Количество
	|		КОНЕЦ) КАК МинЦена
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура1
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|			МАКСИМУМ(НоменклатураДополнительныеРеквизиты.Значение) КАК Значение
	|		ИЗ
	|			Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ГДЕ
	|			НоменклатураДополнительныеРеквизиты.Свойство = &ТипУпаковки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НоменклатураДополнительныеРеквизиты.Ссылка) КАК ЕдИзмерения
	|		ПО Номенклатура1.Ссылка = ЕдИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗАпрос2.Номенклатура КАК Номенклатура,
	|			НАЧАЛОПЕРИОДА(ВложенныйЗАпрос2.ДатаНачала, ДЕНЬ) КАК ДатаНачала,
	|			КОНЕЦПЕРИОДА(ВложенныйЗАпрос2.ДатаОкончания, ДЕНЬ) КАК ДатаОкончания,
	|			ВложенныйЗАпрос2.Цена КАК Цена,
	|			ВложенныйЗАпрос2.Название КАК Название,
	|			ВложенныйЗАпрос2.ТипПромо КАК ТипПромо,
	|			ВложенныйЗАпрос2.ЗначениеПорога КАК ЗначениеПорога,
	|			ВложенныйЗАпрос2.ТипПорога КАК ТипПорога
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПромоАкцииНоменклатура.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура,
	|				МИНИМУМ(ПромоАкцииНоменклатура.Цена) КАК Цена
	|			ИЗ
	|				РегистрСведений.ПромоАкции КАК ПромоАкции
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|					ПО ПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
	|						И ПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	|						И ПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	|						И ПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	|						И ПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	|						И (НАЧАЛОПЕРИОДА(ПромоАкции.ДатаНачала, ДЕНЬ) <= &ТекДата)
	|						И (КОНЕЦПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) >= &ТекДата)
	|						И (ПромоАкции.ФлагОкончания = ЛОЖЬ)
	|						И (ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|			ГДЕ
	|				ПромоАкцииНоменклатура.Цена <> 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПромоАкцииНоменклатура.СтруктурнаяЕдиница,
	|				ПромоАкцииНоменклатура.Номенклатура) КАК ВложенныйЗАпрос
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ПромоАкции.ДатаНачала КАК ДатаНачала,
	|					ПромоАкции.ДатаОкончания КАК ДатаОкончания,
	|					ПромоАкции.Название КАК Название,
	|					ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура,
	|					ПромоАкцииНоменклатура.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|					ПромоАкцииНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|					ПромоАкцииНоменклатура.Цена КАК Цена,
	|					ПромоАкцииПороги.ТипПромо КАК ТипПромо,
	|					ПромоАкцииПороги.ЗначениеПорога КАК ЗначениеПорога,
	|					ПромоАкцииПороги.ТипПорога КАК ТипПорога
	|				ИЗ
	|					РегистрСведений.ПромоАкции КАК ПромоАкции
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|						ПО ПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
	|							И ПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	|							И ПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	|							И ПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	|							И ПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	|							И (НАЧАЛОПЕРИОДА(ПромоАкции.ДатаНачала, ДЕНЬ) <= &ТекДата)
	|							И (КОНЕЦПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) >= &ТекДата)
	|							И (ПромоАкции.ФлагОкончания = ЛОЖЬ)
	|							И (ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииПороги КАК ПромоАкцииПороги
	|						ПО ПромоАкции.IDПромо = ПромоАкцииПороги.IDПромо
	|							И ПромоАкции.IDКомпоненты = ПромоАкцииПороги.IDКомпоненты
	|							И ПромоАкции.IDГруппы = ПромоАкцииПороги.IDГруппы
	|							И ПромоАкции.IDДеталей = ПромоАкцииПороги.IDДеталей
	|				ГДЕ
	|					ПромоАкцииНоменклатура.Цена <> 0
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ПромоАкции.ДатаНачала,
	|					ПромоАкции.ДатаОкончания,
	|					ПромоАкции.Название,
	|					ПромоАкцииНоменклатура.Номенклатура,
	|					ПромоАкцииНоменклатура.СтруктурнаяЕдиница,
	|					ПромоАкцииНоменклатура.ЕдиницаИзмерения,
	|					ПромоАкцииПороги.ТипПромо,
	|					ПромоАкцииПороги.ТипПорога,
	|					ПромоАкцииНоменклатура.Цена,
	|					ПромоАкцииПороги.ЗначениеПорога) КАК ВложенныйЗАпрос2
	|				ПО ВложенныйЗАпрос.Номенклатура = ВложенныйЗАпрос2.Номенклатура
	|					И ВложенныйЗАпрос.СтруктурнаяЕдиница = ВложенныйЗАпрос2.СтруктурнаяЕдиница
	|					И ВложенныйЗАпрос.Цена = ВложенныйЗАпрос2.Цена) КАК РасходнаяЦенаАкция
	|		ПО Номенклатура1.Ссылка = РасходнаяЦенаАкция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|					МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.ID) КАК ID
	|				ИЗ
	|					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|							МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	|						ИЗ
	|							РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|						ГДЕ
	|							ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
	|						
	|						СГРУППИРОВАТЬ ПО
	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|							ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|						ПО ЦеныНоменклатурыСрезПоследних.Период = ВложенныйЗапрос.Период
	|							И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|							И ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|							И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|				ГДЕ
	|					ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|				ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|					И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|					И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|					И ЦеныНоменклатурыСрезПоследних.ID = ВложенныйЗапрос.ID) КАК ЦеныНоменклатуры
	|		ПО Номенклатура1.Ссылка = ЦеныНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|			МАКСИМУМ(НоменклатураДополнительныеРеквизиты.Значение) КАК Значение
	|		ИЗ
	|			Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ГДЕ
	|			НоменклатураДополнительныеРеквизиты.Свойство = &КодРеквизитаАлко
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НоменклатураДополнительныеРеквизиты.Ссылка) КАК РеквизитАлко
	|		ПО Номенклатура1.Ссылка = РеквизитАлко.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтатусыНоменклатуры.Номенклатура КАК Номенклатура,
	|			СтатусыНоменклатуры.Статус КАК Статус
	|		ИЗ
	|			РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|		ГДЕ
	|			СтатусыНоменклатуры.ДатаДобавления <= &ТекДата
	|			И СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК СтатусНоменклатуры
	|		ПО Номенклатура1.Ссылка = СтатусНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОстаткиНоменклатурыОстатки.Номенклатура КАК НоменклатураОст,
	|			ОстаткиНоменклатурыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|			ОстаткиНоменклатурыОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|			ВЫБОР
	|				КОГДА ОстаткиНоменклатурыОстатки.КоличествоОстаток = 0
	|					ТОГДА 0
	|				ИНАЧЕ ОстаткиНоменклатурыОстатки.СуммаУпрОстаток / ОстаткиНоменклатурыОстатки.КоличествоОстаток
	|			КОНЕЦ КАК ПриходнаяЦена
	|		ИЗ
	|			РегистрНакопления.ОстаткиНоменклатуры.Остатки(&ТекДата, ) КАК ОстаткиНоменклатурыОстатки) КАК Остаток
	|		ПО Номенклатура1.Ссылка = Остаток.НоменклатураОст
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Izh_МРЦ.СрезПоследних(&ТекДата, ) КАК Izh_МРЦ
	|		ПО Номенклатура1.Ссылка = Izh_МРЦ.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураСоставНабора.Ссылка КАК Ссылка,
	|			НоменклатураСоставНабора.Компонент КАК Компонент,
	|			НоменклатураСоставНабора.Количество КАК Количество
	|		ИЗ
	|			Справочник.Номенклатура.СоставНабора КАК НоменклатураСоставНабора
	|		ГДЕ
	|			НоменклатураСоставНабора.Ссылка.ВидТовара = &ВидТовараНаборПоставщика
	|			И НоменклатураСоставНабора.Ссылка.УчетПоСоставу
	|			И НЕ НоменклатураСоставНабора.Ссылка В ИЕРАРХИИ (&ГруппаАлко)) КАК Набор
	|		ПО Номенклатура1.Ссылка = Набор.Компонент
	|ГДЕ
	|	Номенклатура1.Транзакционный
	|	И НЕ Номенклатура1.ПометкаУдаления
	|	И Номенклатура1.Ссылка В ИЕРАРХИИ(&Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Набор.Ссылка ЕСТЬ NULL 
	|			ТОГДА Номенклатура1.Ссылка
	|		ИНАЧЕ Набор.Ссылка
	|	КОНЕЦ,
	|	ЕдИзмерения.Значение,
	|	ВЫБОР
	|		КОГДА РасходнаяЦенаАкция.ДатаНачала <= &ТекДата
	|				И &ТекДата <= РасходнаяЦенаАкция.ДатаОкончания
	|			ТОГДА РасходнаяЦенаАкция.ДатаОкончания
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Номенклатура1.ТипТовара = &ТипВесовой
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	РеквизитАлко.Значение,
	|	СтатусНоменклатуры.Статус,
	|	РасходнаяЦенаАкция.Название,
	|	РасходнаяЦенаАкция.ТипПромо,
	|	РасходнаяЦенаАкция.ЗначениеПорога,
	|	РасходнаяЦенаАкция.ТипПорога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка КАК Ссылка,
	|	ВТ.Ссылка.Наименование КАК Наименование,
	|	ВТ.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТ.Ссылка.Группа КАК Группа,
	|	ВТ.Ссылка.Код КАК Код,
	|	ВТ.Ссылка.Родитель.Код КАК РодительКод,
	|	ВТ.ЕдИзмерения,
	|	ВТ.Остаток,
	|	ВТ.РасходнаяЦена,
	|	ВТ.ДатаОкончанияАкции,
	|	ВТ.ПостЦенаАкция,
	|	ВТ.ПРиходнаяЦена,
	|	ВТ.ВидАлко,
	|	ВТ.МножительШК,
	|	ВТ.ТипТовара,
	|	ВТ.СТатус,
	|	ВТ.НАзвание,
	|	ВТ.ТИпПромо,
	|	ВТ.ЗНачениеПорога,
	|	ВТ.ТИпПорога,
	|	ВТ.МинЦена
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ.Ссылка В
	|					(ВЫБРАТЬ
	|						А.Ссылка
	|					ИЗ
	|						ВТОбщепит КАК А)
	|				ТОГДА ВТ.СТатус = &СтатусАктивный
	|						ИЛИ ВТ.Остаток > 0
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ ВТ.РасходнаяЦена ЕСТЬ NULL 
	|	И ВЫБОР
	|			КОГДА &БезОстатка
	|					ИЛИ ВТ.Ссылка В
	|						(ВЫБРАТЬ
	|							НоменклатураКонтрагента.Номенклатура КАК Ссылка
	|						ИЗ
	|							РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|								ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|								ПО
	|									СтатусыНоменклатуры.Номенклатура = НоменклатураКонтрагента.Номенклатура
	|										И СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|										И НоменклатураКонтрагента.Контрагент В
	|											(ВЫБРАТЬ
	|												КонтрагентыДополнительныеРеквизиты.Ссылка КАК Контрагент
	|											ИЗ
	|												Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	|											ГДЕ
	|												КонтрагентыДополнительныеРеквизиты.Свойство = &СвойствоМагазинЦех
	|												И КонтрагентыДополнительныеРеквизиты.Значение = &СтруктурнаяЕдиница))
	|					ИЛИ ВТ.Ссылка В
	|						(ВЫБРАТЬ
	|							А.Ссылка
	|						ИЗ
	|							ВТОбщепит КАК А)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ.Остаток > 0
	|		КОНЕЦ
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("ТипУпаковки",ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаЛитраж)));
	Запрос.УстановитьПараметр("ПроцентАлко",ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаКрепость)));
	Запрос.УстановитьПараметр("КодРеквизитаАлко",ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаВидАлкогольнойПродукции)));
	Запрос.УстановитьПараметр("Номенклатура", ?(сзТовары = Неопределено,Справочники.Номенклатура.ПустаяСсылка(),сзТовары));
	Запрос.УстановитьПараметр("ТипВесовой", Перечисления.ТипыТоваров.Весовой);
	Запрос.УстановитьПараметр("ВидТовараНаборПоставщика", Перечисления.ВидыТоваров.НаборПоставщика);
	Запрос.УстановитьПараметр("ГруппаАлко", Справочники.Номенклатура.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.ГруппаНоменклатурыАлкоголь)));           
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ГруппаОбщепит", Справочники.Номенклатура.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыПроизводство)));
	Запрос.УстановитьПараметр("СтатусАктивный", Перечисления.СтатусыТоваров.Активный);
	Запрос.УстановитьПараметр("СвойствоМагазинЦех", ПланыВидовХарактеристик.ДополнительныеРеквизитыКонтрагентов.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаМагазинЦех)));      //dps 15.08.20 136124
	Запрос.УстановитьПараметр("БезОстатка", БезОстатка);
	Результат = Запрос.Выполнить();
	тзДанные = Результат.Выгрузить();

	Возврат тзДанные;
КонецФункции

Функция ПолучитьШК(сзТовары)
	//Получаем таблицу Штрих кодов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Код КАК ШК,
		|	Номенклатура.Родитель.Код КАК Код
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.Транзакционный
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.Ссылка В ИЕРАРХИИ(&Номенклатура)";
	Запрос.УстановитьПараметр("Номенклатура", сзТовары);
    Результат = Запрос.Выполнить();
    тзШК = Результат.Выгрузить();
	Возврат тзШК;
КонецФункции

Процедура СформироватьФайл(тзДанные, тзШК)
	//Заполняем файл
	ТипПакета = ФабрикаXDTO.Тип("http://local/POS", "ТоварыВPOS");
	Пакет = ФабрикаXDTO.Создать(ТипПакета);
	ТипТовар = ФабрикаXDTO.Тип("http://local/POS", "Товар_Данные");
	ТипШК = ФабрикаXDTO.Тип("http://local/POS", "Товар_ШтрихКод");
	Пакет.СЕ = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.Код;
	Пакет.Датаформирования = Формат(ТекущаяДата(),"ДФ='dd.MM.yyyy ЧЧ:мм:сс'");
	КоличествоСтрок = 0;
	Колтз = тзДанные.Количество();
	Для Каждого Строка Из тзДанные Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда           
			Продолжить;
		КонецЕсли;
		ПакетТовар = ФабрикаXDTO.Создать(ТипТовар);
		ПакетТовар.Тип = ?(Строка.Группа = 1, "1",?(Строка.ПометкаУдаления, "3", "2"));
		ПакетТовар.Код = СокрЛП(Строка.Код);
		ПакетТовар.ПКод = СокрЛП(Строка.Ссылка.ПолныйКод());
		ПакетТовар.ГУИД = СокрЛП(Строка.Ссылка.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(Строка.РодительКод) Тогда ПакетТовар.КодРод = СокрЛП(Строка.РодительКод); КонецЕсли;
		ПакетТовар.Наим = СокрЛП(Строка.Наименование);
		Если Строка.Группа = 1 Тогда 	
			Пакет.Тов.Добавить(ПакетТовар);
			Продолжить;
		КонецЕсли;
		КлючПорога = Ложь;
		КоличествоСтрок = КоличествоСтрок + 1;
		Если ЗначениеЗаполнено(Строка.Название) Тогда 
			Если Сред(Строка.Название,Найти(Строка.Название,"#S")+2,1) = "3" Тогда 
				ПакетТовар.ПарамАкц = "[MRC]";
			ИначеЕсли Сред(Строка.Название,Найти(Строка.Название,"#S")+2,1) = "2" Тогда
				КлючПорога = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ЕдИзмерения) Тогда ПакетТовар.ЕдИз = СокрЛП(Строка.ЕдИзмерения); КонецЕсли;          
		Если ЗначениеЗаполнено(Строка.Остаток) Тогда 
			ПакетТовар.Ост = Формат(Строка.Остаток,"ЧДЦ=3; ЧРД=.; ЧГ="); 
		Иначе 
			ПакетТовар.Ост = "0";
		КонецЕсли;  
		Если ЗначениеЗаполнено(Строка.РасходнаяЦена) Тогда 
			ПакетТовар.РасхЦена = Формат(Строка.РасходнаяЦена,"ЧДЦ=2; ЧРД=.; ЧГ="); 
		Иначе
			ПакетТовар.РасхЦена = "0";
		КонецЕсли; 
		Попытка
			Если Строка.ТипПромо = Перечисления.ТипыИзмененияПромо.СамыйДешевыйБесплатно Тогда 
			Если ЗначениеЗаполнено(Строка.ЗначениеПорога) Тогда  ПакетТовар.Кратн = Строка.ЗначениеПорога; КонецЕсли;
			КонецЕсли;
			Если КлючПорога Тогда 
				Если Строка.ТипПромо = Перечисления.ТипыИзмененияПромо.СуммаСкидки И Строка.ТипПорога = Перечисления.ТипыПорога.Количество Тогда 
					Если ЗначениеЗаполнено(Строка.ЗначениеПорога) Тогда  ПакетТовар.Порог = Строка.ЗначениеПорога; КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		Если ЗначениеЗаполнено(Строка.ДатаОкончанияАкции) Тогда  
			ПакетТовар.ДатаОкончАкц = Формат(Строка.ДатаОкончанияАкции,"ДФ=dd.MM.yyyy"); 
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ПостЦенаАкция) Тогда 
			ПакетТовар.ПостЦенаАкц = Формат(Строка.ПостЦенаАкция,"ЧДЦ=2; ЧРД=.; ЧГ="); 
		Иначе 
			ПакетТовар.ПостЦенаАкц = "0";
		КонецЕсли; 
		Если ЗначениеЗаполнено(Строка.ПриходнаяЦена) Тогда 
			ПакетТовар.ПрихЦена = Формат(Строка.ПриходнаяЦена,"ЧДЦ=2; ЧРД=.; ЧГ="); 
		Иначе 
			ПакетТовар.ПрихЦена = "0";
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ТипТовара) Тогда	ПакетТовар.Весовой = Строка.ТипТовара; КонецЕсли; 
		Если ЗначениеЗаполнено(Строка.ВидАлко) Тогда ПакетТовар.СтопВр = "23"; КонецЕсли;
		Если ЗначениеЗаполнено(Строка.МинЦена) Тогда ПакетТовар.МинЦена = Строка.МинЦена; КонецЕсли;
        НайденыеСтроки = тзШК.НайтиСтроки(Новый Структура("Код",Строка.Код));
		Для Каждого ШтрихКод Из НайденыеСтроки Цикл 
			ПакетШК = ФабрикаXDTO.Создать(ТипШК);
			ПакетШК.ШК = СокрЛП(ШтрихКод.ШК);   
			ПакетШК.МножШК = "1";
			ПакетТовар.ШКод.Добавить(ПакетШК);
		КонецЦикла;
		Пакет.Тов.Добавить(ПакетТовар);
	КонецЦикла;
	Пакет.КоличествоЗаписей = КоличествоСтрок;
	Если КоличествоСтрок = 0 Тогда 
		Возврат;
	КонецЕсли;
		
	//Отправляем файл
	ЗаписьXML = Новый ЗаписьXML;
	ПутьКаталога = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПутьКаталогаВыгрузкиВPOS);
	ПутьКаталога = ?(Прав(ПутьКаталога,1) = "\",ПутьКаталога,ПутьКаталога + "\");
	Номер = 1;
	Пока Истина Цикл 
		НайденныеФайлы = НайтиФайлы(ПутьКаталога, "выгрузка_"+Строка(Номер)+".xml");
		Если НайденныеФайлы.Количество() = 0 Тогда 
			Прервать;
		КонецЕсли;
		Номер = Номер + 1; 
	КонецЦикла;
	стрИмяФайла = ПутьКаталога+ "выгрузка_"+Строка(Номер)+".xml";
	Попытка
		ЗаписьXML.ОткрытьФайл(стрИмяФайла,"windows-1251");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML( ЗаписьXML, Пакет,,,, НазначениеТипаXML.Явное);
		ЗаписьXML.Закрыть();
	Исключение
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьСписокТоваровНаВыгрузку()
	сзТовары = Новый СписокЗначений;
	ВыборкаУзлов = ПланыОбмена.ОбменSMS.Выбрать();
	Пока выборкаУзлов.Следующий() Цикл
		ТекУзел = выборкаУзлов.Ссылка;
		Если ТекУзел = ПланыОбмена.ОбменSMS.ЭтотУзел() Тогда
			Продолжить;
		КонецЕсли; 
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ТекУзел, ТекУзел.НомерОтправленного+1);
		Пока выборкаИзменений.Следующий() Цикл
			Объект = выборкаИзменений.Получить();
			Результат = Ложь;
			Если ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ПромоАкции") Тогда 
				Объект.Прочитать();
				Для Каждого Запись Из Объект Цикл
					Если НачалоДня(ТекущаяДата()) < НачалоДня(Запись.ДатаНачала) Тогда 
						Продолжить;
					КонецЕсли;
					тзТоварИзАкции = ПолучитьТоварИзАкции(Запись);
					Для Каждого Строка Из тзТоварИзАкции Цикл
						сзТовары.Добавить(Строка.Номенклатура);
					КонецЦикла;
					Результат = Истина;
				КонецЦикла;
			ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда 
				Объект.Прочитать();
				Для Каждого Запись Из Объект Цикл
					сзТовары.Добавить(Запись.Номенклатура);
				КонецЦикла;
				Результат = Истина;
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ВесовойТовар") Тогда 
				сзТовары.Добавить(Объект.Номенклатура);
				Результат = Истина;
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура") Тогда 
				сзТовары.Добавить(Объект.Ссылка);
				Результат = Истина;
			КонецЕсли; 	
			Если Результат Тогда 
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекУзел, Объект);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	Возврат сзТовары;
КонецФункции

Процедура ВыгрузитьБезСписка() Экспорт
	//Товары = ПолучитьСписокТоваровНаВыгрузку();
	//Если Товары.Количество() > 0 Тогда  
		//СформироватьФайл(ПолучитьДанные(Товары),ПолучитьШК(Товары));
	//КонецЕсли;	
	тзТовар = ПолучитьДанные();
	СформироватьФайл(тзТовар,ПолучитьШК(тзТовар.Скопировать(тзТовар.НайтиСтроки(Новый Структура("Группа",0))).ВыгрузитьКолонку("Ссылка")));
КонецПроцедуры

Процедура Выгрузить(сзТовар, БезОстатка = Ложь) Экспорт
	//Товары = ПолучитьСписокТоваровНаВыгрузку();
	//Если Товары.Количество() > 0 Тогда  
		//СформироватьФайл(ПолучитьДанные(Товары),ПолучитьШК(Товары));
	//КонецЕсли;	
	тзТовар = ПолучитьДанные(сзТовар,БезОстатка);
	СформироватьФайл(тзТовар,ПолучитьШК(тзТовар.Скопировать(тзТовар.НайтиСтроки(Новый Структура("Группа",0))).ВыгрузитьКолонку("Ссылка")));
КонецПроцедуры

Функция ПолучитьТоварИзАкции(ПромоАкция)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПромоАкцииНоменклатура.Номенклатура
	|ИЗ
	|	РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|ГДЕ
	|	ПромоАкцииНоменклатура.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ПромоАкцииНоменклатура.IDДеталей = &IDДеталей
	|	И ПромоАкцииНоменклатура.IDГруппы = &IDГруппы
	|	И ПромоАкцииНоменклатура.IDКомпоненты = &IDКомпоненты
	|	И ПромоАкцииНоменклатура.IDПромо = &IDПромо";
	
	Запрос.УстановитьПараметр("IDГруппы", ПромоАкция.IDГруппы);
	Запрос.УстановитьПараметр("IDДеталей", ПромоАкция.IDДеталей);
	Запрос.УстановитьПараметр("IDКомпоненты", ПромоАкция.IDКомпоненты);
	Запрос.УстановитьПараметр("IDПромо", ПромоАкция.IDПромо);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПромоАкция.СтруктурнаяЕдиница);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
КонецФункции

Функция Загрузить() Экспорт
 	ПутьКаталога =  УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПутьКаталогаЗагрузкиИзPOS);
	ПутьКаталога = ?(Прав(ПутьКаталога,1) = "\",ПутьКаталога,ПутьКаталога + "\");
	СоздатьКаталог(ПутьКаталога+"Загруженные");
	НайденныеФайлы = НайтиФайлы(ПутьКаталога, "*.xml");
	ЧтениеXML = Новый ЧтениеXML;
	Для каждого Файл Из НайденныеФайлы Цикл
		ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
		ЧтениеXML.Прочитать();                        
		ЭлементXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("http://local/POS", "ZReport"));
		Результат = ЗагрузитьZОтчет(ЭлементXDTO);
		ЧтениеXML.Закрыть();
		Если Результат Тогда 
			ПереместитьФайл(Файл.ПолноеИмя,Файл.Путь+"\Загруженные\"+Файл.Имя);
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ЗагрузитьZОтчет(XDTO)
	Попытка
		НовыйДокумент = Ложь;
		Ссылка = Документы.Zотчет.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.GUID));
		Док = Ссылка.ПолучитьОбъект();
		Если Док = Неопределено Тогда 
			НовыйДокумент = Истина;
			Док = Документы.Zотчет.СоздатьДокумент();
			Ссылка = Документы.Zотчет.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.GUID));
			Док.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Док.Дата = КонецДня(XDTO.Shift[0].CloseTime); 
		Док.Автор = ПараметрыСеанса.ТекущийПользователь;
		Док.Выручка.Очистить();
		Для Каждого Строка Из XDTO.Shift Цикл
			СтрокаВыручки = Док.Выручка.Добавить();
			СтрокаВыручки.ПОС = Справочники.ККМ.НайтиПоРеквизиту("НомерРегистрационный", Строка.PosUID);
			Если НЕ ЗначениеЗаполнено(Док.Фирма) Тогда
				Док.Фирма = СтрокаВыручки.ПОС.Фирма;
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Док.СтруктурнаяЕдиница) Тогда
				Док.СтруктурнаяЕдиница = СтрокаВыручки.ПОС.Владелец;
			КонецЕсли;	
			СтрокаВыручки.ДатаСмены = Строка.CloseTime;
			СтрокаВыручки.Смена = Строка.No;
			СтрокаВыручки.Сумма = Строка.Amount;
			СтрокаВыручки.СуммаНал = Строка.AmountCash;
		КонецЦикла;
		Док.Карты.Очистить();
		Если XDTO.Свойства().Получить("Payment") <> Неопределено Тогда
			Если Тип(XDTO.Payment) = Тип("СписокXDTO") Тогда
				Для Каждого Строка Из XDTO.Payment Цикл
					НоваяСтрока = Док.Карты.Добавить();
					НоваяСтрока.ТипКарты = Справочники.КредитныеКарты.НайтиПоКоду(Строка.Type);
					НоваяСтрока.Сумма = Строка.Amount;
					Если Строка.Type = "201" Тогда 
						НоваяСтрока.СуммаНоминалов = Строка.Nominal; 
					КонецЕсли;
				КонецЦикла;
			Иначе
				НоваяСтрока = Док.Карты.Добавить();
				НоваяСтрока.ТипКарты = Справочники.КредитныеКарты.НайтиПоКоду(Строка.Type);
				НоваяСтрока.Сумма = XDTO.Payment.Amount;
			КонецЕсли;	
		КонецЕсли;
		Док.Состав.Очистить();
		Для Каждого Строка Из XDTO.Sale Цикл
			//dps+ 15/07/31 134310
			Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Строка.ItemUID);
			Если НЕ  ЗначениеЗаполнено(Номенклатура) Тогда 
				ВызватьИсключение "Не найдена номенклатура c кодом "+Строка.ItemUID;
			КонецЕсли;
			Если Номенклатура.УчетПоСоставу И Номенклатура.ВидТовара = Перечисления.ВидыТоваров.НаборПоставщика Тогда 
				тз = ПолучитьНаборНоменклатуры(Номенклатура,Док.Дата);
				СебестСумма = тз.Итог("Сумма");
				ОбщСумма = Строка.Amount;
				ПроверочнаяСумма = 0;
				Для Каждого стр Из тз Цикл 
					НоваяСтрока = Док.Состав.Добавить();
					НоваяСтрока.Номенклатура = стр.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура);
					НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
					НоваяСтрока.Количество = Строка.Quantity * стр.Коэффициент;
					НоваяСтрока.Сумма = Окр((стр.Цена * стр.Коэффициент/СебестСумма) * ОбщСумма,2);
					ПроверочнаяСумма = ПроверочнаяСумма + НоваяСтрока.Сумма;
					НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
					НоваяСтрока.СуммаНДС = ОбработкаТабличныхЧастейСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,Истина,НоваяСтрока.СтавкаНДС.Ставка);
				 	НоваяСтрока.Склад = Док.СтруктурнаяЕдиница.СкладТорговогоЗала;
				КонецЦикла;
				Если ОбщСумма <> ПроверочнаяСумма Тогда //хренова, подгоним сумму последней строки.
					НоваяСтрока.Сумма = НоваяСтрока.Сумма - (ПроверочнаяСумма - ОбщСумма);
					НоваяСтрока.СуммаНДС = ОбработкаТабличныхЧастейСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,Истина,НоваяСтрока.СтавкаНДС.Ставка);
				КонецЕсли;
			Иначе 
				НоваяСтрока = Док.Состав.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура);
				НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
				НоваяСтрока.Количество = Строка.Quantity;
				НоваяСтрока.Сумма = Строка.Amount;
				НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
				НоваяСтрока.СуммаНДС = ОбработкаТабличныхЧастейСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,Истина,НоваяСтрока.СтавкаНДС.Ставка);
				НоваяСтрока.Склад = Док.СтруктурнаяЕдиница.СкладТорговогоЗала;
			КонецЕсли;
			//dps- 15/07/31 134310
		КонецЦикла;
		Док.Записать(РежимЗаписиДокумента.Запись);
		//++БИТ БВО
		Док.ПерераспределитьСоставПоОстаткам();
		//--БИТ БВО	
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Результат = Ложь;
		КонецПопытки;
		Результат = Истина;
	Исключение                                                          
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

//dps+ 15/07/31 134310

// Функция - Получить набор номенклатуры
//
// Параметры:
//  Номенклатура - Номенклатура вида Набор с признаком УчетПоСоставу.
//  Дата		 - Дата на которую расчитывается себестоимость номенклатуры.
// Возвращаемое значение:
// 	Возвращает ТЗ с колонками Номенклатура, Коэффициент, Цена, Сумма.
//  ТЗ содержит номенклатуру из набора входящей номенклатуры, коэффициент из набора, цена себестоимости на дату, сумма = цена * коэффициент.
Функция ПолучитьНаборНоменклатуры(Номенклатура, Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураСоставНабора.Компонент КАК Номенклатура,
	               |	НоменклатураСоставНабора.Количество КАК Коэффициент,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0) = 0
	               |					ИЛИ ЕСТЬNULL(ОстаткиНоменклатурыОстатки.СуммаОстаток, 0) = 0
	               |				ТОГДА ВЫБОР
	               |						КОГДА ЕСТЬNULL(ЦеныНоменклатурыЗакупочныеСрезПоследних.ЦенаУпр, 0) = 0
	               |							ТОГДА НоменклатураКонтрагента.Цена
	               |						ИНАЧЕ ЦеныНоменклатурыЗакупочныеСрезПоследних.ЦенаУпр
	               |					КОНЕЦ
	               |			ИНАЧЕ ОстаткиНоменклатурыОстатки.СуммаОстаток / ОстаткиНоменклатурыОстатки.КоличествоОстаток
	               |		КОНЕЦ) КАК Цена,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0) = 0
	               |					ИЛИ ЕСТЬNULL(ОстаткиНоменклатурыОстатки.СуммаОстаток, 0) = 0
	               |				ТОГДА ВЫБОР
	               |						КОГДА ЕСТЬNULL(ЦеныНоменклатурыЗакупочныеСрезПоследних.ЦенаУпр, 0) = 0
	               |							ТОГДА НоменклатураКонтрагента.Цена
	               |						ИНАЧЕ ЦеныНоменклатурыЗакупочныеСрезПоследних.ЦенаУпр
	               |					КОНЕЦ
	               |			ИНАЧЕ ОстаткиНоменклатурыОстатки.СуммаОстаток / ОстаткиНоменклатурыОстатки.КоличествоОстаток
	               |		КОНЕЦ * НоменклатураСоставНабора.Количество) КАК Сумма
	               |ИЗ
	               |	Справочник.Номенклатура.СоставНабора КАК НоменклатураСоставНабора
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(&Дата, ) КАК ОстаткиНоменклатурыОстатки
	               |		ПО НоменклатураСоставНабора.Компонент = ОстаткиНоменклатурыОстатки.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыЗакупочные.СрезПоследних(&Дата, ) КАК ЦеныНоменклатурыЗакупочныеСрезПоследних
	               |		ПО НоменклатураСоставНабора.Компонент = ЦеныНоменклатурыЗакупочныеСрезПоследних.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	               |		ПО НоменклатураСоставНабора.Компонент = НоменклатураКонтрагента.Номенклатура
	               |			И (НоменклатураКонтрагента.ОсновнойПоставщик)
	               |ГДЕ
	               |	НоменклатураСоставНабора.Ссылка = &Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НоменклатураСоставНабора.Компонент,
	               |	НоменклатураСоставНабора.Количество";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Дата", Дата);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
//dps- 15/07/31 134310


Функция Зарегистрировать(Источник) Экспорт
	//Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ОстаткиНоменклатуры") Тогда
	//	СЕ = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	//	Если СЕ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин Тогда 
	//		Источник.Прочитать();
	//		Для Каждого Запись Из Источник Цикл 
	//			Если Запись.Фирма = СЕ.Организация ИЛИ Запись.Фирма = ПолучитьФирмуАлко(СЕ,ПланыВидовХарактеристик.ДополнительныеРеквизитыСтруктурныхЕдиниц.НайтиПоКоду("0000000378")) Тогда 
	//				Узел = ПланыОбмена.ОбменSMS.НайтиПоКоду(1);
	//				Если НЕ Узел.Пустая() Тогда
	//					ПланыОбмена.ЗарегистрироватьИзменения(Узел, Запись.Номенклатура);
	//				КонецЕсли;
	//			КонецЕсли;	
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
КонецФункции
	
Функция ПолучитьФирмуАлко(Объект,Свойство)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Izh_ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.Izh_ЗначенияСвойствОбъектов КАК Izh_ЗначенияСвойствОбъектов
		|ГДЕ
		|	Izh_ЗначенияСвойствОбъектов.Объект = &Объект
		|	И Izh_ЗначенияСвойствОбъектов.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Результат = Запрос.Выполнить().Выбрать();
	Если  Результат.Следующий() Тогда 
		Возврат Результат.Значение
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ИзменениеЦены() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатуры.Период,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Цена,
	|	""РЦ"" КАК Статус,
	|	NULL КАК ДатаНачала,
	|	NULL КАК ДатаОкончания,
	|	NULL КАК Название,
	|	NULL КАК ОписаниеПромо,
	|	NULL КАК Основание,
	|	ЦеныНоменклатуры.ЕдиницаИзмерения,
	|	ЦеныНоменклатуры.ID,
	|	&ТекДата
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), ) КАК ОстаткиНоменклатурыОстатки
	|		ПО ЦеныНоменклатуры.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
	|ГДЕ
	|	ЦеныНоменклатуры.Период = НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
	|	И ЦеныНоменклатуры.СтруктурнаяЕдиница В ИЕРАРХИИ(&СтруктурнаяЕдиница)
	|	И НЕ ЦеныНоменклатуры.Номенклатура В ИЕРАРХИИ (&Номенклатура)
	|	И НЕ ЦеныНоменклатуры.Номенклатура В
	|				(ВЫБРАТЬ
	|					ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкции КАК ПромоАкции
	|						ПО
	|							ПромоАкцииНоменклатура.IDПромо = ПромоАкции.IDПромо
	|								И ПромоАкцииНоменклатура.IDКомпоненты = ПромоАкции.IDКомпоненты
	|								И ПромоАкцииНоменклатура.IDГруппы = ПромоАкции.IDГруппы
	|								И ПромоАкцииНоменклатура.IDДеталей = ПромоАкции.IDДеталей
	|								И ПромоАкцииНоменклатура.СтруктурнаяЕдиница = ПромоАкции.СтруктурнаяЕдиница
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), ) КАК ОстаткиНоменклатурыОстатки
	|						ПО
	|							ПромоАкцииНоменклатура.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
	|				ГДЕ
	|					ПромоАкции.ДатаОкончания > &ТекДата
	|					И ПромоАкцииНоменклатура.Цена <> 0
	|					И ПромоАкции.СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)
	|					И НЕ ПромоАкцииНоменклатура.Номенклатура В ИЕРАРХИИ (&Номенклатура)
	|					И ПромоАкции.ДатаНачала < &ТекДата)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПромоАкции.ДатаНачала,
	|	ПромоАкцииНоменклатура.Номенклатура,
	|	ПромоАкцииНоменклатура.Цена,
	|	""Акция"",
	|	ПромоАкции.ДатаНачала,
	|	ПромоАкции.ДатаОкончания,
	|	ПромоАкции.Название,
	|	ПромоАкции.ОписаниеПромо,
	|	ПромоАкции.IDДеталей,
	|	ПромоАкцииНоменклатура.ЕдиницаИзмерения,
	|	"""",
	|	&ТекДата
	|ИЗ
	|	РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкции КАК ПромоАкции
	|		ПО ПромоАкцииНоменклатура.IDПромо = ПромоАкции.IDПромо
	|			И ПромоАкцииНоменклатура.IDКомпоненты = ПромоАкции.IDКомпоненты
	|			И ПромоАкцииНоменклатура.IDГруппы = ПромоАкции.IDГруппы
	|			И ПромоАкцииНоменклатура.IDДеталей = ПромоАкции.IDДеталей
	|			И ПромоАкцииНоменклатура.СтруктурнаяЕдиница = ПромоАкции.СтруктурнаяЕдиница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), ) КАК ОстаткиНоменклатурыОстатки
	|		ПО ПромоАкцииНоменклатура.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
	|ГДЕ
	|	ПромоАкции.ДатаНачала = НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
	|	И ПромоАкцииНоменклатура.Цена <> 0
	|	И ПромоАкции.СтруктурнаяЕдиница В ИЕРАРХИИ(&СтруктурнаяЕдиница)
	|	И НЕ ПромоАкцииНоменклатура.Номенклатура В ИЕРАРХИИ (&Номенклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Акция.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЦенаНоменклатуры.Период
	|		ИНАЧЕ Акция.ДатаНачала
	|	КОНЕЦ,
	|	АкцияКончилась.Номенклатура,
	|	ВЫБОР
	|		КОГДА Акция.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЦенаНоменклатуры.Цена
	|		ИНАЧЕ Акция.Цена
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Акция.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ""РЦ""
	|		ИНАЧЕ ""Акция""
	|	КОНЕЦ,
	|	Акция.ДатаНачала,
	|	Акция.ДатаОкончания,
	|	Акция.Название,
	|	Акция.ОписаниеПромо,
	|	Акция.Основание,
	|	ВЫБОР
	|		КОГДА Акция.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЦенаНоменклатуры.ЕдиницаИзмерения
	|		ИНАЧЕ Акция.ЕдиницаИзмерения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Акция.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЦенаНоменклатуры.ID
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	&ТекДата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура
	|	ИЗ
	|		РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкции КАК ПромоАкции
	|			ПО ПромоАкцииНоменклатура.IDПромо = ПромоАкции.IDПромо
	|				И ПромоАкцииНоменклатура.IDКомпоненты = ПромоАкции.IDКомпоненты
	|				И ПромоАкцииНоменклатура.IDГруппы = ПромоАкции.IDГруппы
	|				И ПромоАкцииНоменклатура.IDДеталей = ПромоАкции.IDДеталей
	|				И ПромоАкцииНоменклатура.СтруктурнаяЕдиница = ПромоАкции.СтруктурнаяЕдиница
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), ) КАК ОстаткиНоменклатурыОстатки
	|			ПО ПромоАкцииНоменклатура.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
	|	ГДЕ
	|		ПромоАкции.ДатаОкончания = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -1), ДЕНЬ)
	|		И ПромоАкцииНоменклатура.Цена <> 0
	|		И ПромоАкции.СтруктурнаяЕдиница В ИЕРАРХИИ(&СтруктурнаяЕдиница)
	|		И НЕ ПромоАкцииНоменклатура.Номенклатура В ИЕРАРХИИ (&Номенклатура)) КАК АкцияКончилась
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|			ЦеныНоменклатурыСрезПоследних.ID КАК ID,
	|			ЦеныНоменклатурыСрезПоследних.Период КАК Период
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|					МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.ID) КАК ID
	|				ИЗ
	|					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|							МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	|						ИЗ
	|							РегистрСведений.ЦеныНоменклатуры.СрезПоследних(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|						
	|						СГРУППИРОВАТЬ ПО
	|							ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|							ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|						ПО ЦеныНоменклатурыСрезПоследних.Период = ВложенныйЗапрос.Период
	|							И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|							И ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|							И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница,
	|					ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|				ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
	|					И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
	|					И ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|					И ЦеныНоменклатурыСрезПоследних.ID = ВложенныйЗапрос.ID) КАК ЦенаНоменклатуры
	|		ПО АкцияКончилась.Номенклатура = ЦенаНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПромоАкцииНоменклатура.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|			ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура,
	|			МИНИМУМ(ПромоАкцииНоменклатура.Цена) КАК Цена,
	|			ПромоАкции.ДатаНачала КАК ДатаНачала,
	|			ПромоАкции.ДатаОкончания КАК ДатаОкончания,
	|			ПромоАкции.Название КАК Название,
	|			ПромоАкции.ОписаниеПромо КАК ОписаниеПромо,
	|			ПромоАкции.IDДеталей КАК Основание,
	|			ПромоАкцииНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		ИЗ
	|			РегистрСведений.ПромоАкции КАК ПромоАкции
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	|				ПО ПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
	|					И ПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	|					И ПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	|					И ПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	|					И ПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	|					И (НАЧАЛОПЕРИОДА(ПромоАкции.ДатаНачала, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ))
	|					И (КОНЕЦПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ))
	|					И (ПромоАкции.ФлагОкончания = ЛОЖЬ)
	|					И (ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|		ГДЕ
	|			ПромоАкцииНоменклатура.Цена <> 0
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПромоАкцииНоменклатура.СтруктурнаяЕдиница,
	|			ПромоАкцииНоменклатура.Номенклатура,
	|			ПромоАкции.ДатаНачала,
	|			ПромоАкции.ДатаОкончания,
	|			ПромоАкции.Название,
	|			ПромоАкции.ОписаниеПромо,
	|			ПромоАкции.IDДеталей,
	|			ПромоАкцииНоменклатура.ЕдиницаИзмерения) КАК Акция
	|		ПО АкцияКончилась.Номенклатура = Акция.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), ) КАК ОстаткиНоменклатурыОстатки
	|		ПО АкцияКончилась.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура,
	|	МИНИМУМ(ВТ.Цена) КАК Цена,
	|	МАКСИМУМ(ВТ.Статус) КАК Статус,
	|	МАКСИМУМ(ВТ.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ВТ.ДатаОкончания) КАК ДатаОкончания,
	|	МАКСИМУМ(ВТ.Название) КАК Название,
	|	МАКСИМУМ(ВТ.ОписаниеПромо) КАК ОписаниеПромо,
	|	МАКСИМУМ(ВТ.Основание) КАК Основание,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ.Статус = ""Акция""
	|				ТОГДА ШаблонАкция.Ссылка
	|			ИНАЧЕ ШаблонПоУмолчанию.Ссылка
	|		КОНЕЦ) КАК ШаблонЦенника,
	|	МАКСИМУМ(ВТ.Период) КАК Период,
	|	МАКСИМУМ(ВТ.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ВТ.ID) КАК ID,
	|	МАКСИМУМ(ВТ.ТекДата) КАК ТекДата,
	|	&Фирма КАК Фирма
	|ИЗ
	|	ВТ КАК ВТ,
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ШаблоныЦенников.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ШаблоныЦенников КАК ШаблоныЦенников
	|	ГДЕ
	|		ШаблоныЦенников.ДляАкций
	|		И НЕ ШаблоныЦенников.ПометкаУдаления) КАК ШаблонАкция,
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ШаблоныЦенников.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ШаблоныЦенников КАК ШаблоныЦенников
	|	ГДЕ
	|		НЕ ШаблоныЦенников.ПометкаУдаления
	|		И ШаблоныЦенников.ПоУмолчанию) КАК ШаблонПоУмолчанию
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Номенклатура";
Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
Запрос.УстановитьПараметр("СтруктурнаяЕдиница",СтруктурнаяЕдиница);
Запрос.УстановитьПараметр("Фирма",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.Организация);
//++БИТ БВО 2015-06-16 Значение группы устанавливается в регистре "Служебные значения"
//Запрос.УстановитьПараметр("Номенклатура",ПланыВидовХарактеристик.СлужебныеЗначения.ГруппаСигареты);  
Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьСлужебноеЗначение(ПланыВидовХарактеристик.СлужебныеЗначения.ГруппаСигареты)));  
//--БИТ БВО 2015-06-16
тз = Запрос.Выполнить().Выгрузить();				   
Если тз.Количество() > 0 Тогда	//нужно создавать бп
	СтрукПараметры = Новый Структура;
	СтрукОснование = Новый Структура;
	струкПараметры.Вставить("Удалять", Ложь); 
	струкПараметры.Вставить("Искать", Ложь);
	СтрукПараметры.Вставить("БизнесПроцесс", БизнесПроцессы.НоваяЦена);
	СтрукПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	струкПараметры.Вставить("ТочкаМаршрута", БизнесПроцессы.НоваяЦена.ТочкиМаршрута.ПечатьЦенников);
	сткДопРеквизитыБП = УправлениеБизнесПроцессамиСервер.ПолучитьДопРеквизитыНастройкиБизнеснесПроцесса(БизнесПроцессы.НоваяЦена.ПустаяСсылка());
	сткДопРеквизитыБП.ВариантСозданияБП = Перечисления.ВариантыСозданияБПНоваяЦена.ПоПакету;
	струкПараметры.Вставить("ДопРеквизитыБП", сткДопРеквизитыБП);
	СтрукОснование.Вставить("Состав", тз);
	СтрукПараметры.Вставить("Основание",СтрукОснование);
	УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
КонецЕсли;
КонецПроцедуры
