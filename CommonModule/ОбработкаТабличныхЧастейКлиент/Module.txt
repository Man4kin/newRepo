//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
//

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ

// Процедура добавляет ключ связи в табличную часть.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//
Процедура ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ФормаДокумента) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти.КлючСвязи = СоздатьНовыйКлючСвязи(ФормаДокумента);		
	
КонецПроцедуры // ДобавитьКлючСвязиВСтрокуТабличнойЧасти()

// Процедура добавляет ключ связи в подчиненную табличную часть.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Процедура ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти) Экспорт
	
	ПодчиненнаяТабличнаяЧасть = ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти];
	
	СтрокаПодчиненнойТабличнойЧасти = ПодчиненнаяТабличнаяЧасть.ТекущиеДанные;
	
	СтрокаПодчиненнойТабличнойЧасти.КлючСвязи = ПодчиненнаяТабличнаяЧасть.ОтборСтрок[ИмяПодчиненнойТабличнойЧасти + "КлючСвязи"];
	
КонецПроцедуры // ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти()

// Процедура удаляет строки из подчиненной табличной части.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Процедура УдалитьСтрокиПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	ПодчиненнаяТабличнаяЧасть = ФормаДокумента.Объект[ИмяПодчиненнойТабличнойЧасти];
	
	РезультатПоиска = ПодчиненнаяТабличнаяЧасть.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
	Для каждого СтрокаПоиска Из  РезультатПоиска Цикл
		ИндексУдаления = ПодчиненнаяТабличнаяЧасть.Индекс(СтрокаПоиска);
		ПодчиненнаяТабличнаяЧасть.Удалить(ИндексУдаления);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиПодчиненнойТабличнойЧасти()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры: 
//  Сумма        - Число - сумма от которой надо рассчитывать налоги 
//  УчитыватьНДС - Булево - признак учета НДС в сумме 
//  СуммаВключаетНДС - булево - признак включения НДС в сумму
//  СтавкаНДС    - Число - процентная ставка НДС.
//
// Возвращаемое значение:
//  Число - полученная сумма НДС.
//
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Возврат Окр(СтавкаНДС * Сумма / (100 + СтавкаНДС),2);
	
КонецФункции // РассчитатьСуммуНДС() 

// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РЕКВИЗИТОВ ФОРМ

// Функция возвращает количество в базовой единицы измерения.
//
// Параметры: 
//  СтрокаТабличнойЧасти - ДанныеФормыСтруктура, содержащая строку табличной
//                 части.
Процедура РасчитатьКоличествоВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	
	//СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Коэффициент
	//								* СтрокаТабличнойЧасти.КоличествоЕдиниц;
	
КонецПроцедуры // ПересчетКоличестваВБазовуюЕдИзм()

// Функция возвращает количество в базовой единицы измерения.
//
// Параметры: 
//  СтрокаТабличнойЧасти - ДанныеФормыСтруктура, содержащая строку табличной
//                 части.
//  ОбъектФормы - ДанныеФормыСтруктура, содержащая объект формы.
//
Процедура РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	
	Если СтрокаТабличнойЧасти.Свойство("Цена") И СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
		СтрокаТабличнойЧасти.Сумма = Окр(СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена,2);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("ЦенаУпр") И СтрокаТабличнойЧасти.Свойство("СуммаУпр") Тогда
		СтрокаТабличнойЧасти.СуммаУпр = Окр(СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаУпр,2);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("СуммаНДС") И СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
		СтрокаТабличнойЧасти.СуммаНДС = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
		Истина,
		ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("СуммаНДСУпр") И СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
		СтрокаТабличнойЧасти.СуммаНДСУпр = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаУпр,
		Истина,
		ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("ЦенаБезНДС") И СтрокаТабличнойЧасти.Свойство("СуммаБезНДС") Тогда
		СтрокаТабличнойЧасти.СуммаБезНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
		СтрокаТабличнойЧасти.ЦенаБезНДС = Окр(СтрокаТабличнойЧасти.СуммаБезНДС / СтрокаТабличнойЧасти.Количество,2);
	КонецЕсли;
	
КонецПроцедуры // РасчитатьСуммуВСтрокеТабличнойЧасти()

Процедура РасчитатьСуммуБезНДСВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	
	СтавкаНДС = ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаБезНДС = Окр(СтрокаТабличнойЧасти.ЦенаБезНДС * СтрокаТабличнойЧасти.Количество, 2);
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезНДС * (1 + СтавкаНДС / 100);
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаБезНДС;
	СтрокаТабличнойЧасти.Цена = Окр(СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество, 2);
	
КонецПроцедуры // РасчитатьСуммуБезНДСВСтрокеТабличнойЧасти()




// Процедура заполняет реквизиты табличной части после подбора
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ЗаполнитьПараметрыТЧ(ФормаДокумента) Экспорт
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект.Состав Цикл
		
		// 1. Определим данные объектов, которые необходимо получить с сервера.
		
		СтруктураДанных = Новый Структура;
		ДопПараметр = "";
		
		Если СтрокаТабличнойЧасти.Свойство("Номенклатура") Тогда
			СтруктураДанных.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Свойство("ЕдиницаИзмерения") Тогда
			СтруктураДанных.Вставить("ЕдиницаИзмерения");
			СтруктураДанных.Вставить("Коэффициент");	
		КонецЕсли;
		
		
		Если СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
			СтруктураДанных.Вставить("СтавкаНДС");
			СтруктураДанных.Вставить("Ставка");
		КонецЕсли;
		
		
		
		//Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
		//	
		//	Если ФормаДокумента.Объект.Свойство("ПрайсЛист") Тогда 
		//		СтруктураДанных.Вставить("Дата", 				ФормаДокумента.Объект.Дата);
		//		СтруктураДанных.Вставить("Организация", 		ФормаДокумента.Компания);
		//		СтруктураДанных.Вставить("ПрайсЛист", 			ФормаДокумента.Объект.ПрайсЛист);
		//		СтруктураДанных.Вставить("КолонкаПрайсЛиста",	ФормаДокумента.Объект.КолонкаПрайсЛиста);
		//		СтруктураДанных.Вставить("Количество", 			СтрокаТабличнойЧасти.КоличествоЕдиниц);
		
		//		Если СтрокаТабличнойЧасти.Свойство("Характеристика") Тогда
		//			СтруктураДанных.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		//		КонецЕсли;
		
		//	КонецЕсли;
		//	
		//	Если ФормаДокумента.Объект.Свойство("ВидСкидкиНаценки") Тогда
		//		СтруктураДанных.Вставить("ВидСкидкиНаценки", ФормаДокумента.Объект.ВидСкидкиНаценки);
		//		СтруктураДанных.Вставить("ПроцентСкидкиНаценки");
		//	КонецЕсли;
		//	
		//	Если ФормаДокумента.Объект.Свойство("ВалютаДокумента") Тогда
		//		СтруктураДанных.Вставить("ВалютаДокумента",	ФормаДокумента.Объект.ВалютаДокумента);
		//	КонецЕсли;
		//	
		//	Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
		//		СтруктураДанных.Вставить("СуммаВключаетНДС", ФормаДокумента.Объект.СуммаВключаетНДС);
		//	КонецЕсли;	
		//	
		//	СтруктураДанных.Вставить("Цена");
		//	
		//КонецЕсли;
		
		
		// 2. Получим данные объектов с сервера.				
		
		ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных, ДопПараметр);
		
		// 3. Присвоим данные, полученные с сервера, реквизитам объекта.
		
		Если СтрокаТабличнойЧасти.Свойство("ЕдиницаИзмерения") Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанных.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент   		= СтруктураДанных.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		
		
		Если СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
			СтрокаТабличнойЧасти.СтавкаНДС         = СтруктураДанных.СтавкаНДС;
			//СтрокаТабличнойЧасти.ЗначениеСтавкиНДС = СтруктураДанных.Ставка;
		КонецЕсли;
		
		//Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
		//	СтрокаТабличнойЧасти.Цена = СтруктураДанных.Цена;
		//КонецЕсли;
		Если СтрокаТабличнойЧасти.Свойство("Количество") Тогда
			РасчитатьКоличествоВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПараметрыТЧ()

// Процедура заполняет плановыми значениями табличные части Начисления или
// Удержания.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//  ИмяТабличнойЧасти - Строка, имя табличной части, в которой заполняются
//                 значения.
//
Процедура ЗаполнитьНачисленияУдержанияСотрудника(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы.Сотрудники.ТекущиеДанные;
	ТабличнаяЧастьНачисленияУдержания = ФормаДокумента.Объект[ИмяТабличнойЧасти];
	
	ОбработкаТабличныхЧастейКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяТабличнойЧасти);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ФизЛицо", СтрокаТабличнойЧасти.ФизЛицо);
	СтруктураОтбора.Вставить("ХарактерРаботы", СтрокаТабличнойЧасти.ХарактерРаботы);
	СтруктураОтбора.Вставить("ТабельныйНомер", СтрокаТабличнойЧасти.ТабельныйНомер);
	СтруктураОтбора.Вставить("Организация", ФормаДокумента.Объект.Организация);
	СтруктураОтбора.Вставить("Дата", ФормаДокумента.Объект.Дата);
	СтруктураОтбора.Вставить("Удержание", ?(ИмяТабличнойЧасти = "Начисления", Ложь, Истина));
	
	РезультатПоиска = ОбработкаТабличныхЧастейСервер.НайтиНачисленияУдержанияСотрудника(СтруктураОтбора);
	Для каждого СтрокаПоиска Из  РезультатПоиска Цикл
		НоваяСтрока = ТабличнаяЧастьНачисленияУдержания.Добавить();
		Если ИмяТабличнойЧасти = "Начисления" Тогда
			НоваяСтрока.Начисление = СтрокаПоиска.ВидНачисленияУдержания;		
		Иначе
			НоваяСтрока.Удержание = СтрокаПоиска.ВидНачисленияУдержания;		
		КонецЕсли;		
		НоваяСтрока.Сумма = СтрокаПоиска.Сумма;
		НоваяСтрока.Валюта = СтрокаПоиска.Валюта;
		НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
	КонецЦикла;	
	
	СтрОтбора = Новый ФиксированнаяСтруктура(ИмяТабличнойЧасти + "КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	ФормаДокумента.Элементы[ИмяТабличнойЧасти].ОтборСтрок 	= СтрОтбора;
	
КонецПроцедуры // ЗаполнитьНачисленияУдержанияСотрудника()

// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПерезаполнитьЦеныТабличнойЧастиПоПрайсЛисту(ФормаДокумента) Экспорт
	
	СтруктураДанных	= Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата", 				ФормаДокумента.Объект.Дата);
	СтруктураДанных.Вставить("Организация", 		ФормаДокумента.Компания);
	СтруктураДанных.Вставить("ПрайсЛист", 			ФормаДокумента.Объект.ПрайсЛист);
	СтруктураДанных.Вставить("КолонкаПрайсЛиста", 	ФормаДокумента.Объект.КолонкаПрайсЛиста);
	СтруктураДанных.Вставить("ВалютаДокумента", 	ФормаДокумента.Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС", 	ФормаДокумента.Объект.СуммаВключаетНДС);
	
	Для каждого СтрокаТЧ Из ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтрокаТабличнойЧасти.Вставить("Коэффициент", 	СтрокаТЧ.Коэффициент);
		СтрокаТабличнойЧасти.Вставить("Количество", 	СтрокаТЧ.Количество);
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС", 		СтрокаТЧ.СтавкаНДС);
		СтрокаТабличнойЧасти.Вставить("Цена", 			0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;	
	
	ОбработкаТабличныхЧастейСервер.ПерезаполнитьЦеныТабличнойЧастиПоПрайсЛисту(СтруктураДанных, ТабличнаяЧастьДокумента);
	
	Индекс = 0;
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		СтрокаТабличнойЧасти = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти].Получить(Индекс);
		СтрокаТабличнойЧасти.Цена = СтрокаТЧ.Цена;
		
		РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;	
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоПрайсЛисту()

// Выполняем пересчет скидок табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПерезаполнитьСкидкиТабличнойЧастиПоВидуСкидки(ФормаДокумента)
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата", 				ФормаДокумента.Объект.Дата);
	СтруктураДанных.Вставить("Организация", 		ФормаДокумента.Компания);
	СтруктураДанных.Вставить("ПрайсЛист", 			ФормаДокумента.Объект.ПрайсЛист);
	СтруктураДанных.Вставить("КолонкаПрайсЛиста", 	ФормаДокумента.Объект.КолонкаПрайсЛиста);
	СтруктураДанных.Вставить("ВалютаДокумента", 	ФормаДокумента.Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС", 	ФормаДокумента.Объект.СуммаВключаетНДС);
	
	СтруктураДанных.Вставить("СуммаДокумента", 		ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти].Итог("Сумма"));
	СтруктураДанных.Вставить("ВидСкидкиНаценки", 	ФормаДокумента.Объект.ВидСкидкиНаценки);
	
	ТабличнаяЧастьДокумента = Новый Массив;
	
	Для каждого СтрокаТЧ Из ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура", 		СтрокаТЧ.Номенклатура);
		СтрокаТабличнойЧасти.Вставить("Коэффициент", 			СтрокаТЧ.Коэффициент);
		СтрокаТабличнойЧасти.Вставить("Количество", 			СтрокаТЧ.Количество);
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС", 				СтрокаТЧ.СтавкаНДС);
		СтрокаТабличнойЧасти.Вставить("ПроцентСкидкиНаценки", 	0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;	
	
	ОбработкаТабличныхЧастейСервер.ПерезаполнитьСкидкиТабличнойЧастиПоВидуСкидки(СтруктураДанных, ТабличнаяЧастьДокумента);
	
	Индекс = 0;
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		СтрокаТабличнойЧасти = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти].Получить(Индекс);
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтрокаТЧ.ПроцентСкидкиНаценки;
		
		РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;	 
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоПрайсЛисту()

// Функция возвращает паспортные данные физического лица строкой
//
// Параметры
//  Дата	     – Дата – дата, на которую анализируются данные
//  ФизЛицо      – СправочникСсылка.ФизическиеЛица – ссылка на ФизЛицо.
//                 
// Возвращаемое значение:
//   Строка      – Строка, содержащая паспортные данные.
//
Функция ПолучитьПаспорныеДанныеСтрокой(Дата, ФизЛицо) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Дата", Дата);
	СтруктураДанных.Вставить("ФизЛицо", ФизЛицо);
	
	Возврат ОбработкаТабличныхЧастейСервер.ПолучитьПаспорныеДанныеСтрокой(СтруктураДанных);	
	
КонецФункции // ПолучитьПаспорныеДанныеСтрокой()


// ПРОЦЕДУРЫ ОБРАБОТКИ НАЧАЛА ВЫБОРА РЕКВИЗИТОВ ШАПКИ ДОКУМЕНТА


// Процедура открывает форму выбора элементов справочника места хранения.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//  СтандартнаяОбработка - Булево, флаг стандартной обработки.
//
Процедура ПриНачалеВыбораМестаХранения(ФормаДокумента, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяДокумента"     , ФормаДокумента.ИмяДокумента);
	СтруктураОтбора.Вставить("ИмяТабличнойЧасти", ФормаДокумента.ИмяТабличнойЧасти);
	
	ФормаВыбора = ПолучитьФорму("Справочник.МестаХранения.ФормаВыбора", СтруктураОтбора,
	?(ФормаДокумента.ИмяТабличнойЧасти = "ШапкаДокумента",
	ФормаДокумента.ТекущийЭлемент,
	ФормаДокумента.ТекущийЭлемент.ТекущийЭлемент));
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры // ПриНачалеВыбораМестаХранения()


// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ШАПКИ ДОКУМЕНТА

// Процедура пересчитывает цену и сумму при изменении флага включения НДС в
// сумму.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииФлагаСуммаВключаетНДСВШапкеДокумента(ФормаДокумента) Экспорт
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект.Товары Цикл
		ПересчитатьЦенуПриИзмененииФлаговНДС(СтрокаТабличнойЧасти, ФормаДокумента.Объект.СуммаВключаетНДС);
		РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // ПриИзмененииФлагаСуммаВключаетНДСВШапкеДокумента()

// Процедура выполняет необходимые действия при изменении даты в шапке
// документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииДатыВШапкеДокумента(ФормаДокумента) Экспорт
	
	РазностьДат = ОбработкаТабличныхЧастейСервер.ПроверитьНомерДокумента(ФормаДокумента.Объект.Ссылка, ФормаДокумента.Объект.Дата, ФормаДокумента.ДатаДокумента);
	
	Если РазностьДат <> 0 Тогда
		ФормаДокумента.Объект.Номер = "";
	КонецЕсли;
	
	ФормаДокумента.ДатаДокумента = ФормаДокумента.Объект.Дата;
	
	
КонецПроцедуры // ПриИзмененииДатыВШапкеДокумента() 



// Процедура выполняет необходимые действия при изменении котрагента
// в шапке документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииКонтрагентаВШапкеДокумента(ФормаДокумента) Экспорт
	
	Если ФормаДокумента.Объект.Контрагент = ФормаДокумента.Контрагент Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос(НСтр("ru = 'Табличная часть ""'") + ФормаДокумента.ИмяТабличнойЧасти + НСтр("ru = '"" будет очищена! Продолжить выполнение операции?'"), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти].Очистить();
	Иначе
		ФормаДокумента.Объект.Контрагент = ФормаДокумента.Контрагент;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагентаВШапкеДокумента()

// Процедура выполняет необходимые действия при изменении подотчетника
// в шапке документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииПодотчетникаВШапкеДокумента(ФормаДокумента) Экспорт
	
	Если ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти].Количество() = 0 Тогда
		Если ФормаДокумента.Объект.Свойство("Документ") Тогда 
			ФормаДокумента.Объект.Документ = "";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Подотчетник = ФормаДокумента.Подотчетник Тогда
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос(НСтр("ru = 'Табличная часть будет очищена! Продолжить выполнение операции?'"), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти].Очистить();
		Если ФормаДокумента.Объект.Свойство("Документ") Тогда 
			ФормаДокумента.Объект.Документ = "";
		КонецЕсли;
	Иначе
		ФормаДокумента.Объект.Подотчетник = ФормаДокумента.Подотчетник;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииПодотчетникаВШапкеДокумента()

// Процедура выполняет необходимые действия при изменении кассы
// в шапке документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииБанковскогоСчетаКассыВШапкеДокумента(ФормаДокумента) Экспорт
	
	Если ФормаДокумента.Объект.Свойство("Касса") Тогда
		Если ФормаДокумента.Объект.Касса = ФормаДокумента.Касса Тогда
			Возврат;
		КонецЕсли;
		БанковскийСчетКасса = ФормаДокумента.Объект.Касса;
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("БанковскийСчет") Тогда
		Если ФормаДокумента.Объект.БанковскийСчет = ФормаДокумента.БанковскийСчет Тогда
			Возврат;
		КонецЕсли;
		БанковскийСчетКасса = ФормаДокумента.Объект.БанковскийСчет;
	КонецЕсли;
	
	Если ФормаДокумента.Объект.РасшифровкаПлатежа.Количество() <> 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(НСтр("ru = 'Табличная часть будет очищена! Продолжить выполнение операции?'"), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ФормаДокумента.Объект.РасшифровкаПлатежа.Очистить();
		Иначе
			Если ФормаДокумента.Объект.Свойство("Касса") Тогда
				ФормаДокумента.Объект.Касса = ФормаДокумента.Касса;			
			Иначе
				ФормаДокумента.Объект.БанковскийСчет = ФормаДокумента.БанковскийСчет;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("БанковскийСчетКасса", БанковскийСчетКасса);
	СтруктураРеквизитов.Вставить("Дата"           , ФормаДокумента.Объект.Дата);
	СтруктураРеквизитов.Вставить("СтруктураВалютаБанковскийСчетКасса");
	
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураРеквизитов);
	
	ФормаДокумента.Объект.Курс      = СтруктураРеквизитов.СтруктураВалютаБанковскийСчетКасса.Курс; // / СтруктураРеквизитов.СтруктураВалютаДокумента.Курс;
	ФормаДокумента.Объект.Кратность = СтруктураРеквизитов.СтруктураВалютаБанковскийСчетКасса.Кратность; // / СтруктураРеквизитов.СтруктураВалютаДокумента.Кратность;
	
КонецПроцедуры // ПриИзмененииБанковскогоСчетаКассыВШапкеДокумента()

// Процедура выполняет необходимые действия при изменении подразделения
// в шапке документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииПодразделенияВШапкеДокумента(ФормаДокумента) Экспорт
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти] Цикл
		
		Если СтрокаТабличнойЧасти.Свойство("СтатьяЗатрат") Тогда
			
			ХарактерЗатратСоответствует
			= ОбработкаТабличныхЧастейСервер.ПроверитьСоответствиеСтатьиЗатратПодразделению(ФормаДокумента.Объект.Подразделение,
			СтрокаТабличнойЧасти.СтатьяЗатрат);
			
			Если Не ХарактерЗатратСоответствует Тогда
				СтрокаТабличнойЧасти.СтатьяЗатрат = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПриИзмененииПодразделенияВШапкеДокумента()


// Процедура выполняет необходимые действия при изменении организации
// в шапке документа платежное поручение.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииОрганизацииВПлатежномПоручении(ФормаДокумента) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Организация", ФормаДокумента.Объект.Организация);
	СтруктураДанных.Вставить("КодОКАТО");
	СтруктураДанных.Вставить("НаименованиеПолное");
	СтруктураДанных.Вставить("СчетОрганизации");
	СтруктураДанных.Вставить("ИННПлательщика");
	СтруктураДанных.Вставить("КПППлательщика");
	
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
	
	ФормаДокумента.Объект.СчетОрганизации = СтруктураДанных.СчетОрганизации;
	ФормаДокумента.Объект.ИННПлательщика = СтруктураДанных.ИННПлательщика;
	ФормаДокумента.Объект.КПППлательщика = СтруктураДанных.КПППлательщика;
	ФормаДокумента.Объект.ТекстПлательщика = СтруктураДанных.НаименованиеПолное;
	
	Если ЗначениеЗаполнено(ФормаДокумента.Объект.Организация) Тогда		
		Если Строка(ФормаДокумента.Объект.ВидОперации) = "Перечисление налога" Тогда
			ФормаДокумента.Объект.КодОКАТО = СтруктураДанных.КодОКАТО;
		Иначе
			ФормаДокумента.Объект.КодОКАТО = "";
		КонецЕсли;		
	Иначе
		ФормаДокумента.Объект.СчетОрганизации = "";		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииОрганизацииВПлатежномПоручении()

// Процедура выполняет необходимые действия при изменении контрагента
// в шапке документа платежное поручение.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииКонтрагентаВПлатежномПоручении(ФормаДокумента) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Контрагент", ФормаДокумента.Объект.Контрагент);
	СтруктураДанных.Вставить("НаименованиеПолное");
	СтруктураДанных.Вставить("СчетКонтрагента");
	СтруктураДанных.Вставить("НазначениеПлатежа");
	СтруктураДанных.Вставить("ИННПолучателя");
	СтруктураДанных.Вставить("КПППолучателя");
	
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
	
	ФормаДокумента.Объект.СчетКонтрагента = СтруктураДанных.СчетКонтрагента;
	ФормаДокумента.Объект.ИННПолучателя = СтруктураДанных.ИННПолучателя;
	ФормаДокумента.Объект.КПППолучателя = СтруктураДанных.КПППолучателя;
	ФормаДокумента.Объект.ТекстПолучателя = СтруктураДанных.НаименованиеПолное;
	ФормаДокумента.НазначениеПлатежа = СтруктураДанных.НазначениеПлатежа;
	
КонецПроцедуры // ПриИзмененииКонтрагентаВПлатежномПоручении()

// Процедура выполняет необходимые действия при изменении счета контрагента
// в шапке документа платежное поручение.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииСчетаКонтрагентаВПлатежномПоручении(ФормаДокумента) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СчетКонтрагента", ФормаДокумента.Объект.СчетКонтрагента);
	СтруктураДанных.Вставить("НазначениеПлатежа");
	
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
	
	ФормаДокумента.НазначениеПлатежа = СтруктураДанных.НазначениеПлатежа;
	
КонецПроцедуры // ПриИзмененииСчетаКонтрагентаВПлатежномПоручении()

// Процедура выполняет необходимые действия при изменении ставки НДС
// в шапке документа платежное поручение.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииСтавкиНДСВПлатежномПоручении(ФормаДокумента) Экспорт
	
	// 1. Определим данные объектов, которые необходимо получить с сервера.
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("СтавкаНДС", ФормаДокумента.Объект.СтавкаНДС);
	СтруктураДанных.Вставить("Ставка");
	
	// 2. Получим данные объектов с сервера.				
	
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
	
	// 3. Присвоим данные, полученные с сервера, реквизитам объекта.
	
	ФормаДокумента.Объект.ЗначениеСтавкиНДС = СтруктураДанных.Ставка;
	ФормаДокумента.Объект.СуммаНДС = РассчитатьСуммуНДС(ФормаДокумента.Объект.СуммаДокумента, Истина, СтруктураДанных.Ставка);
	
КонецПроцедуры // ПриИзмененииСтавкиНДСВПлатежномПоручении()

// ПРОЦЕДУРЫ НАЧАЛА ВЫБОРА РЕКВИЗИТОВ В ТАБЛИЧНОЙ ЧАСТИ

// Процедура выполняет необходимые действия при начале выбора документа
// в табличной части документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//  СтандартнаяОбработка - Булево, флаг стандартной обработки.
//
Процедура ПриНачалеВыбораДокументаВТабличнойЧасти(ФормаДокумента, СтандартнаяОбработка) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	
	
	ЭтоАванс = ОбработкаТабличныхЧастейСервер.ПолучитьПризнакАвансаВидаРасчетов(СтрокаТабличнойЧасти.ВидРасчетов);
	
	Если ЭтоАванс Тогда
		Режим = РежимДиалогаВопрос.ОК;
		Вопрос(НСтр("ru = 'Для вида расчета с признаком ""Аванс"" документом расчетов будет текущий!'"), Режим, 0);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораДокументаВТабличнойЧасти()

// Процедура выполняет необходимые действия при начале выбора вида учета
// в табличной части документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//  СтандартнаяОбработка - Булево, флаг стандартной обработки.
//
Процедура ПриНачалеВыбораВидаУчетаВТабличнойЧасти(ФормаДокумента, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяДокумента"     , ФормаДокумента.ИмяДокумента);
	СтруктураОтбора.Вставить("ИмяТабличнойЧасти", ФормаДокумента.ИмяТабличнойЧасти);
	
	ФормаВыбора = ПолучитьФорму("Справочник.ВидыУчетаТоваров.ФормаВыбора", СтруктураОтбора, ФормаДокумента.ТекущийЭлемент.ТекущийЭлемент);
	
	ФормаВыбора.Открыть();	
	
КонецПроцедуры // ПриНачалеВыбораВидаУчетаВТабличнойЧасти()

// Процедура выполняет необходимые действия при начале выбора статьи затрат
// в табличной части документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//  СтандартнаяОбработка - Булево, флаг стандартной обработки.
//
Процедура ПриНачалеВыбораСтатьиЗатратВТабличнойЧасти(ФормаДокумента, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяДокумента"     , ФормаДокумента.ИмяДокумента);
	СтруктураОтбора.Вставить("ИмяТабличнойЧасти", ФормаДокумента.ИмяТабличнойЧасти);
	
	ФормаВыбора = ПолучитьФорму("Справочник.СтатьиЗатрат.ФормаВыбора", СтруктураОтбора, ФормаДокумента.ТекущийЭлемент.ТекущийЭлемент);
	
	ФормаВыбора.Открыть();	
	
КонецПроцедуры // ПриНачалеВыбораСтатьиЗатратВТабличнойЧасти()

// Процедура выполняет необходимые действия при начале выбора места хранения
// в табличной части документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//  СтандартнаяОбработка - Булево, флаг стандартной обработки.
//
Процедура ПриНачалеВыбораМестаХраненияВТабличнойЧасти(ФормаДокумента, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяДокумента"     , ФормаДокумента.ИмяДокумента);
	СтруктураОтбора.Вставить("ИмяТабличнойЧасти", ФормаДокумента.ИмяТабличнойЧасти);
	
	ФормаВыбора = ПолучитьФорму("Справочник.МестаХранения.ФормаВыбора", СтруктураОтбора, ФормаДокумента.ТекущийЭлемент.ТекущийЭлемент);
	
	ФормаВыбора.Открыть();	
	
КонецПроцедуры // ПриНачалеВыбораМестаХраненияВТабличнойЧасти()

// Процедура выполняет необходимые действия при начале выбора реквизита в
// табличной части параметры товаров.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//  СтандартнаяОбработка - Булево, флаг стандартной обработки.
//
Процедура ПриНачалеВыбораРеквизитаТабличнойЧастиПараметрыТоваров(ФормаДокумента, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПараметрОтбора", ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные.Номенклатура);
	
	ФормаВыбора = ПолучитьФорму("ПланВидовХарактеристик.ПараметрыНоменклатуры.ФормаВыбора", СтруктураОтбора, ФормаДокумента.ТекущийЭлемент.ТекущийЭлемент);
	
	ФормаВыбора.Открыть();	
	
КонецПроцедуры // ПриНачалеВыбораРеквизитаТабличнойЧастиПараметрыТоваров()

// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ТАБЛИЧНЫХ ЧАСТЕЙ

// Процедура выполняет необходимые действия при изменении единицы измерения
// в табличной части документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииЕдиницыИзмеренияВТабличнойЧасти(ФормаДокумента,ИмяТабличнойЧасти = "Состав") Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	// 1. Определим данные объектов, которые необходимо получить с сервера.
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураДанных.Вставить("Коэффициент");
	
	// 2. Получим данные объектов с сервера.				
	
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
	
	// 3. Присвоим данные, полученные с сервера, реквизитам объекта.
	
	СтрокаТабличнойЧасти.Коэффициент = СтруктураДанных.Коэффициент;
	
	Если СтрокаТабличнойЧасти.Свойство("Вес") тогда
		СтруктураДанных = Новый Структура;    
		СтруктураДанных.Вставить("Номенклатура",СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанных.Вставить("ЕдиницаИзмерения",СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		СтруктураДанных.Вставить("Количество",СтрокаТабличнойЧасти.Количество);
		СтруктураДанных.Вставить("ЕдиницаВеса",СтрокаТабличнойЧасти.ЕдиницаВеса);
		СтруктураДанных.Вставить("Вес",СтрокаТабличнойЧасти.Вес);
		ОбработкаТабличныхЧастейСервер.ЗаполнитьВесТовара(СтруктураДанных);
		СтрокаТабличнойЧасти.ЕдиницаВеса = СтруктураДанных.ЕдиницаВеса;  
		СтрокаТабличнойЧасти.Вес = СтруктураДанных.Вес;  
	конецесли;
	
	//РасчитатьКоличествоВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	//РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ФормаДокумента.Объект);
	
КонецПроцедуры // ПриИзмененииЕдиницыИзмеренияВТабличнойЧасти()

// Процедура выполняет необходимые действия при изменении количества единиц
// в табличной части документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииКоличестваВТабличнойЧасти(ТекСтрока, ПроверитьПравоСмотретьСебестоимость = ЛОЖЬ) Экспорт
	
	Если ПроверитьПравоСмотретьСебестоимость Тогда
		Если ОбщегоНазначенияСервер.ЕстьПравоСмотретьСебестоимость() Тогда
			Если ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ВключатьНДСВЦеныКонтрагентов") = Истина Тогда
				РасчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
			Иначе
				РасчитатьСуммуБезНДСВСтрокеТабличнойЧасти(ТекСтрока);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ВключатьНДСВЦеныКонтрагентов") = Истина Тогда
			РасчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
		Иначе
			РасчитатьСуммуБезНДСВСтрокеТабличнойЧасти(ТекСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекСтрока.Свойство("Вес") Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Номенклатура",ТекСтрока.Номенклатура);
		СтруктураДанных.Вставить("ЕдиницаИзмерения",ТекСтрока.ЕдиницаИзмерения);
		СтруктураДанных.Вставить("Количество",ТекСтрока.Количество);
		СтруктураДанных.Вставить("ЕдиницаВеса",ТекСтрока.ЕдиницаВеса);
		СтруктураДанных.Вставить("Вес",ТекСтрока.Вес);
		ОбработкаТабличныхЧастейСервер.ЗаполнитьВесТовара(СтруктураДанных);
		ТекСтрока.ЕдиницаВеса = СтруктураДанных.ЕдиницаВеса;
		ТекСтрока.Вес = СтруктураДанных.Вес;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКоличествоЕдиницВТабличнойЧасти()

// Процедура выполняет необходимые действия при изменении суммы
// в табличной части документа.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииСуммыВТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	Если СтрокаТабличнойЧасти.Свойство("СуммаНДС") Тогда
		СтрокаТабличнойЧасти.СуммаНДС = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,Истина,ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;
	Если СтрокаТабличнойЧасти.Свойство("СуммаБезНДС") Тогда
		СтрокаТабличнойЧасти.СуммаБезНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
	КонецЕсли;
	Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
		СтрокаТабличнойЧасти.Цена = Окр(СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество,2);
	КонецЕсли;
	Если СтрокаТабличнойЧасти.Свойство("ЦенаБезНДС") Тогда
		СтрокаТабличнойЧасти.ЦенаБезНДС = Окр(СтрокаТабличнойЧасти.СуммаБезНДС / СтрокаТабличнойЧасти.Количество,2);
	КонецЕсли;
	Если СтрокаТабличнойЧасти.Свойство("ЦенаУпр") Тогда
		СтрокаТабличнойЧасти.ЦенаУпр = Окр(СтрокаТабличнойЧасти.СуммаУпр / СтрокаТабличнойЧасти.Количество,2);
	КонецЕсли;
	Если СтрокаТабличнойЧасти.Свойство("СуммаНДСУпр") Тогда
		СтрокаТабличнойЧасти.СуммаНДСУпр = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаУпр,Истина,ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;
КонецПроцедуры // ПриИзмененииСуммыВТабличнойЧасти()
Процедура ПриИзмененииСуммыБезНДСВТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	
	СтавкаНДС = ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезНДС * (1 + СтавкаНДС / 100);
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаБезНДС;
	
	СтрокаТабличнойЧасти.Цена = Окр(СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество, 2);
	СтрокаТабличнойЧасти.ЦенаБезНДС = Окр(СтрокаТабличнойЧасти.СуммаБезНДС / СтрокаТабличнойЧасти.Количество, 2);
	
КонецПроцедуры // ПриИзмененииСуммыВТабличнойЧасти()


// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ РАСШИФРОВКА ПЛАТЕЖА / РАСЧЕТОВ

// Процедура выполняет необходимые действия при изменении ставки НДС
// в табличной части документа расшифровка платежа или расшифровка расчетов.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииСтавкиНДСВТабличнойЧастиРасшифровка(ФормаДокумента) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	
	// 1. Определим данные объектов, которые необходимо получить с сервера.
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
	СтруктураДанных.Вставить("Ставка");
	
	// 2. Получим данные объектов с сервера.				
	
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
	
	// 3. Присвоим данные, полученные с сервера, реквизитам объекта.
	
	СтрокаТабличнойЧасти.ЗначениеСтавкиНДС = СтруктураДанных.Ставка;
	
	РасчитатьСуммуНДСВСтрокеТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПриИзмененииСтавкиНДСВТабличнойЧастиРасшифровка()


// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ОПЛАТА ПОСТАВЩИКАМ

// Процедура выполняет необходимые действия при изменении ставки НДС
// в табличной части документа оплата поставщикам.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииСтавкиНДСВТабличнойЧастиОплатаПоставщикам(ФормаДокумента) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	// 1. Определим данные объектов, которые необходимо получить с сервера.
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
	СтруктураДанных.Вставить("Ставка");
	
	// 2. Получим данные объектов с сервера.				
	
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
	
	// 3. Присвоим данные, полученные с сервера, реквизитам объекта.
	
	СтрокаТабличнойЧасти.ЗначениеСтавкиНДС = СтруктураДанных.Ставка;
	
	РасчитатьСуммуНДСВСтрокеТабличнойЧастиОплатаПоставщикам(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПриИзмененииСтавкиНДСВТабличнойЧастиОплатаПоставщикам()

// Процедура выполняет необходимые действия при изменении суммы
// в табличной части документа оплата поставщикам.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииСуммыТабличнойЧастиОплатаПоставщикам(ФормаДокумента) Экспорт
	
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы.ОплатаПоставщикам.ТекущиеДанные;
	РасчитатьСуммуНДСВСтрокеТабличнойЧастиОплатаПоставщикам(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПриИзмененииСуммыТабличнойЧастиОплатаПоставщикам()

// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ВНЕОБОРОТНЫЕ АКТИВЫ

// Процедура выполняет необходимые действия при изменении ставки НДС
// в табличной части внеоборотные активы.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииСтавкиНДСВТабличнойЧастиВнеоборотныеАктивы(ФормаДокумента) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	
	// 1. Определим данные объектов, которые необходимо получить с сервера.
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
	СтруктураДанных.Вставить("Ставка");
	
	// 2. Получим данные объектов с сервера.				
	
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
	
	// 3. Присвоим данные, полученные с сервера, реквизитам объекта.
	
	СтрокаТабличнойЧасти.ЗначениеСтавкиНДС = СтруктураДанных.Ставка;
	
	РасчитатьСуммуНДСВСтрокеТабличнойЧастиВнеоборотныеАктивы(СтрокаТабличнойЧасти);
	
	Если СтрокаТабличнойЧасти.Свойство("Всего") Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЕсли;
	
	
КонецПроцедуры // ПриИзмененииСтавкиНДСВТабличнойЧастиВнеоборотныеАктивы()

// Процедура выполняет необходимые действия при изменении суммы
// в табличной части внеоборотные активы.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииСуммыТабличнойЧастиВнеоборотныеАктивы(ФормаДокумента) Экспорт
	
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	
	РасчитатьСуммуНДСВСтрокеТабличнойЧастиВнеоборотныеАктивы(СтрокаТабличнойЧасти);
	Если СтрокаТабличнойЧасти.Свойство("Всего") Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСуммыТабличнойЧастиВнеоборотныеАктивы()

// Процедура выполняет необходимые действия при изменении суммы НДС
// в табличной части внеоборотные активы.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииСуммыНДСТабличнойЧастиВнеоборотныеАктивы(ФормаДокумента) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Свойство("Всего") Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСуммыНДСТабличнойЧастиВнеоборотныеАктивы()

// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ КУПЛЯ ПРОДАЖА ВАЛЮТЫ

// Процедура выполняет необходимые действия при изменении валюты в табличной
// части купля продажа валют.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииВалютыТабличнойЧастиКупляПродажаВалюты(ФормаДокумента) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы.КупляПродажаВалюты.ТекущиеДанные;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ВалютаПроданная", СтрокаТабличнойЧасти.Валюта);
	СтруктураРеквизитов.Вставить("ВалютаКупленная", СтрокаТабличнойЧасти.КупленнаяВалюта);
	СтруктураРеквизитов.Вставить("Дата"			  , ФормаДокумента.Объект.Дата);
	СтруктураРеквизитов.Вставить("СтруктураВалютаПроданная");
	СтруктураРеквизитов.Вставить("СтруктураВалютаКупленная");
	
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураРеквизитов);
	
	СтрокаТабличнойЧасти.Курс = СтруктураРеквизитов.СтруктураВалютаПроданная.Курс
	/ СтруктураРеквизитов.СтруктураВалютаКупленная.Курс;
	СтрокаТабличнойЧасти.Кратность = СтруктураРеквизитов.СтруктураВалютаПроданная.Кратность
	/ СтруктураРеквизитов.СтруктураВалютаКупленная.Кратность;
	
	РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПриИзмененииВалютыТабличнойЧастиКупляПродажаВалюты()

// Процедура выполняет необходимые действия при изменении суммы в табличной
// части купля продажа валют.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииСуммыТабличнойЧастиКупляПродажаВалюты(ФормаДокумента) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы.КупляПродажаВалюты.ТекущиеДанные;
	РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПриИзмененииСуммыТабличнойЧастиКупляПродажаВалюты()


// Процедура выполняет необходимые действия при изменении курса или кратности
// в табличной части купля продажа валют.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Процедура ПриИзмененииКурсаКратностиТабличнойЧастиКупляПродажаВалюты(ФормаДокумента) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы.КупляПродажаВалюты.ТекущиеДанные;
	РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПРоцедуры // ПриИзмененииКурсаКратностиТабличнойЧастиКупляПродажаВалюты()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ 

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1)
	
	Если (КурсНач = КурсКон) и (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0 или КурсКон = 0 или КратностьНач = 0 или КратностьКон = 0 Тогда
		Сообщить("Обнаружен нулевой курс валюты.");
		Возврат 0;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Процедура создает новый ключ связи для таблиц.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Функция СоздатьНовыйКлючСвязи(ФормаДокумента)
	
	СписокЗначений = Новый СписокЗначений;
	
	ТабличнаяЧасть = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти];
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		СписокЗначений.Добавить(СтрокаТЧ.КлючСвязи);
	КонецЦикла;
	
	Если СписокЗначений.Количество() = 0 Тогда
		КлючСвязи = 1;
	Иначе
		СписокЗначений.СортироватьПоЗначению();
		КлючСвязи = СписокЗначений.Получить(СписокЗначений.Количество() - 1).Значение + 1;
	КонецЕсли;
	
	Возврат КлючСвязи;
	
КонецФункции //  СоздатьНовыйКлючСвязи()

// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНЫХ ЧАСТЕЙ

// Выполняем пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитатьЦеныПоВалютеТабличнойЧасти(ФормаДокумента, ПредыдущаяВалюта)
	
	СтруктураКурсы = ОбщегоНазначения.ПолучитьКурсыВалют(ПредыдущаяВалюта, 
	ФормаДокумента.Объект.ВалютаДокумента, 
	ФормаДокумента.Объект.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти] Цикл
		
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
			СтруктураКурсы.КурсНач, 
			СтруктураКурсы.Курс, 
			СтруктураКурсы.КратностьНач, 
			СтруктураКурсы.Кратность);
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, 
			СтруктураКурсы.КурсНач, 
			СтруктураКурсы.Курс, 
			СтруктураКурсы.КратностьНач, 
			СтруктураКурсы.Кратность);
		КонецЕсли;
		
		РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьЦеныПоВалютеТабличнойЧасти() 

// Функция расчитывает сумму НДС в строке табличной части внеоборотные активы.
//
// Параметры: 
//  СтрокаТабличнойЧасти - ДанныеФормыСтруктура, содержащая строку табличной
//                 части.
//
Процедура РасчитатьСуммуНДСВСтрокеТабличнойЧастиВнеоборотныеАктивы(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма
	- (СтрокаТабличнойЧасти.Сумма)
	/ ((СтрокаТабличнойЧасти.ЗначениеСтавкиНДС + 100) / 100);
	
КонецПроцедуры // РасчитатьСуммуНДСВСтрокеТабличнойЧастиВнеоборотныеАктивы()

// Функция расчитывает сумму НДС в строке табличной части оплата поставщикам.
//
// Параметры: 
//  СтрокаТабличнойЧасти - ДанныеФормыСтруктура, содержащая строку табличной
//                 части.
//
Процедура РасчитатьСуммуНДСВСтрокеТабличнойЧастиОплатаПоставщикам(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма
	- (СтрокаТабличнойЧасти.Сумма)
	/ ((СтрокаТабличнойЧасти.ЗначениеСтавкиНДС + 100) / 100);
	
КонецПроцедуры // РасчитатьСуммуНДСВСтрокеТабличнойЧастиОплатаПоставщикам()

// Функция расчитывает сумму НДС в строке табличной части расшифровка расчетов.
//
// Параметры: 
//  СтрокаТабличнойЧасти - ДанныеФормыСтруктура, содержащая строку табличной
//                 части.
//
Процедура РасчитатьСуммуНДСВСтрокеТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа
	- (СтрокаТабличнойЧасти.СуммаПлатежа)
	/ ((СтрокаТабличнойЧасти.ЗначениеСтавкиНДС + 100) / 100);
	
КонецПроцедуры // РасчитатьСуммуНДСВСтрокеТабличнойЧастиРасшифровкаПлатежа()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры: 
//  СтрокаТабличнойЧасти - ДанныеФормыСтруктура, содержащая строку табличной
//                 части.
//  СуммаВключаетНДС - Булево, флаг включения НДС в сумму.
//
Процедура ПересчитатьЦенуПриИзмененииФлаговНДС(СтрокаТабличнойЧасти, СуммаВключаетНДС)
	
	Если СуммаВключаетНДС Тогда
		СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * (100 + СтрокаТабличнойЧасти.ЗначениеСтавкиНДС)) / 100;
	Иначе
		СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * 100) / (100 + СтрокаТабличнойЧасти.ЗначениеСтавкиНДС);
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммуПриИзмененииФлаговНДС()
Процедура ЗаполнитьСтрокуТабличнойЧастиПоУмолчанию(СтрокаТабличнойЧасти,Элемент,Объект,ИмяСостава="") Экспорт 
	СтруктураДанных = Новый Структура;    
	СтруктураДанных.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	Если Элемент.ПодчиненныеЭлементы.Найти(ИмяСостава+"ЕдиницаИзмерения")<>Неопределено тогда
		СтруктураДанных.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	конецесли;
	Если Элемент.подчиненныеЭлементы.Найти(ИмяСостава+"Коэффициент") <>Неопределено тогда	
		СтруктураДанных.Вставить("Коэффициент",СтрокаТабличнойЧасти.Коэффициент);
	конецесли;
	
	Если Объект.Свойство("Ссылка") 
		И (ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.КорректировкаРеализации") 
		ИЛИ ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
		Если Элемент.подчиненныеЭлементы.Найти(ИмяСостава+"ГруппаСтавкаНДС")<>Неопределено тогда
			СтруктураДанных.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.Номенклатура);
		КонецЕсли;
	Иначе
		Если Элемент.ПОдчиненныеЭлементы.Найти(ИмяСостава+"СтавкаНДС")<>Неопределено тогда
			СтруктураДанных.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.Номенклатура);
		конецесли;
	КонецЕсли;
	
	ЕстьСтруктурнаяЕдиница = неопределено;
	СтруктурнаяЕдиница = Объект.Свойство("СтруктурнаяЕдиница",ЕстьСтруктурнаяЕдиница);
	Если ЕстьСтруктурнаяЕДиница<>Неопределено тогда
		СтруктураДанных.Вставить("Склад", Объект.СтруктурнаяЕдиница);
	Конецесли;
	ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
	Если Элемент.ПодчиненныеЭлементы.Найти(ИмяСостава+"Коэффициент")<>Неопределено тогда	
		СтрокаТабличнойЧасти.Коэффициент		 = СтруктураДанных.Коэффициент;
	Конецесли;
	Если Элемент.ПодчиненныеЭлементы.Найти(ИмяСостава+"ЕдиницаИзмерения")<>Неопределено тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения	 = СтруктураДанных.ЕдиницаИзмерения;
	конецесли;
	
	Если Объект.Свойство("Ссылка")
		И (ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.КорректировкаРеализации") 
		ИЛИ ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
		Если Элемент.подчиненныеЭлементы.Найти(ИмяСостава+"ГруппаСтавкаНДС")<>Неопределено тогда
			СтрокаТабличнойЧасти.СтавкаНДС	 = СтруктураДанных.СтавкаНДС;  
		КонецЕсли;
	Иначе
		Если Элемент.ПОдчиненныеЭлементы.Найти(ИмяСостава+"СтавкаНДС")<>Неопределено тогда
			СтрокаТабличнойЧасти.СтавкаНДС	 = СтруктураДанных.СтавкаНДС;  
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ПОдчиненныеЭлементы.Найти(ИмяСостава+"Склад")<>Неопределено тогда
		СтрокаТабличнойЧасти.Склад	 = СтруктураДанных.Склад;  
	конецесли;
	Если Элемент.ПОдчиненныеЭлементы.Найти(ИмяСостава+"КоэффициентЗамены")<>Неопределено тогда
		СтрокаТабличнойЧасти.КоэффициентЗамены	 = 1;  
	конецесли;
	Если Элемент.ПОдчиненныеЭлементы.Найти(ИмяСостава+"Вес")<>Неопределено тогда
		СтруктураДанных.Вставить("Количество",СтрокаТабличнойЧасти.Количество);
		СтруктураДанных.Вставить("ЕдиницаВеса",СтрокаТабличнойЧасти.ЕдиницаВеса);
		СтруктураДанных.Вставить("Вес",СтрокаТабличнойЧасти.Вес);
		ОбработкаТабличныхЧастейСервер.ЗаполнитьВесТовара(СтруктураДанных);
		СтрокаТабличнойЧасти.ЕдиницаВеса = СтруктураДанных.ЕдиницаВеса;  
		СтрокаТабличнойЧасти.Вес = СтруктураДанных.Вес;  
	конецесли;
КонецПроцедуры

ФУнкция  ЗаполнитьИзПодбора(Форма,Объект,СтрокаПодбора,ЭлементПриемник,СтандартнаяОбработка,Количество = 1,ВыборГрупп = Ложь,ИмяСостава="Состав") экспорт
	
	Если Объект.Свойство("Ссылка") И
		(ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.ПриходнаяНакладная") 
			ИЛИ ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.ПланируемаяПоставка")
			ИЛИ ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
			ПроверитьПравоСмотретьСебестоимость = ИСТИНА;
		Иначе
			ПроверитьПравоСмотретьСебестоимость = ЛОЖЬ;
	КонецЕсли;
	
	ТекСтрока = неопределено;
	СтандартнаяОбработка = Ложь;
	Номенклатура = СтрокаПодбора.Номенклатура;
	если Номенклатура = неопределено тогда
		Возврат неопределено;
	конецесли;
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если НЕ выборГрупп и ОбщегоНазначенияСервер.ПолучитьСвойствоПоссылке(Номенклатура,"Группа") = 1 тогда
			возврат неопределено;
		конецесли;
		Если ОбщегоНазначенияСервер.ПолучитьСвойствоПоссылке(Номенклатура,"Группа") = 0 И НЕ ОбщегоНазначенияСервер.ПолучитьСвойствоПоСсылке(Номенклатура,"Транзакционный") тогда
			состояние("Добавлять можно только товары транзакционного уровня!",,,БиблиотекаКартинок.Предупреждение32);
			возврат неопределено;
		Конецесли;
		Если ОбщегоНазначенияСервер.ПолучитьСвойствоПоссылке(Номенклатура,"УчетПоСоставу") тогда
			СоставНабора = ОбработкаТабличныхЧастейСервер.ПолучитьСоставНабора(Номенклатура);
			Для Каждого Строка Из СоставНабора Цикл
				Форма.Элементы.ПодборНоменклатуры.ТекущаяСтрока = Строка.Номенклатура;
				СтрокаСостава = Форма.Элементы.ПодборНоменклатуры.ДанныеСтроки(Форма.Элементы.ПодборНоменклатуры.ТекущаяСтрока);
				СтрокаСостава = ?(СтрокаСостава = Неопределено,Строка,СтрокаСостава);
				ЗаполнитьИзПодбора(Форма,Объект,СтрокаСостава,ЭлементПриемник,СтандартнаяОбработка,Количество*Строка.Количество,ВыборГрупп,ИмяСостава);
			КонецЦикла;
			возврат неопределено;
		КонецЕсли;
	Иначе
		Попытка
			Если НЕ выборГрупп и ОбщегоНазначенияСервер.ПолучитьСвойствоПоссылке(Номенклатура,"Группа") = 1 тогда
				возврат неопределено;
			конецесли;
		Исключение
			Если НЕ выборГрупп и ОбщегоНазначенияСервер.ПолучитьСвойствоПоссылке(Номенклатура,"ЭтоГруппа") тогда
				возврат неопределено;
			конецесли;
		КонецПопытки;
	КонецЕсли;
	Форма.Модифицированность = Истина;
	Если ЭлементПриемник.подчиненныеЭлементы.Найти(ИмяСостава+"Склад")<>Неопределено тогда
		Если ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.Инвентаризация") Тогда
			Строки = Объект[ИмяСостава].НайтиСтроки(Новый Структура("Номенклатура,Склад", Номенклатура,Форма.ТекСклад));
		Иначе
			Строки = Объект[ИмяСостава].НайтиСтроки(Новый Структура("Номенклатура,Склад", Номенклатура,ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка")));
		КонецЕсли;
	Иначе
		Если ИмяСостава = "НаборЗаписей" Тогда
			Строки = Объект.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		Иначе
			Строки = Объект[ИмяСостава].НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		КонецЕсли;
	КонецЕСли;
	Если Строки.Количество() > 0 Тогда
		ТекСтрока = СТроки[0];
		ОбработкаТабличныхЧастейКлиент.ЗаполнитьСтрокуТабличнойЧастиПоУмолчанию(ТекСтрока,ЭлементПриемник,Объект,ИмяСостава);
		Если Объект.Свойство("Ссылка")
			И (ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.КорректировкаРеализации") 
			ИЛИ ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
			Если ЭлементПриемник.подчиненныеЭлементы.Найти(ИмяСостава+"ГруппаКоличество")<>Неопределено тогда
				ТекСтрока.Количество = 	ТекСтрока.Количество + Количество;
				ПриИзмененииКоличестваВТабличнойЧасти(ТекСтрока,ПроверитьПравоСмотретьСебестоимость);
			КонецЕсли;
		Иначе
			Если ЭлементПриемник.подчиненныеЭлементы.Найти(ИмяСостава+"Количество")<>Неопределено тогда
				ТекСтрока.Количество = 	ТекСтрока.Количество + Количество;
				ПриИзмененииКоличестваВТабличнойЧасти(ТекСтрока,ПроверитьПравоСмотретьСебестоимость);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ИмяСостава = "НаборЗаписей" Тогда
			НоваяСтрока = Объект.Добавить();
		Иначе
			НоваяСтрока = Объект[ИмяСостава].Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодбора);
		Если НоваяСтрока.Свойство("ЦенаБезНДС") И ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ВключатьНДСВЦеныКонтрагентов") = Ложь Тогда
			НоваяСтрока.ЦенаБезНДС = СтрокаПодбора.Цена;
		КонецЕсли;
		
		Если Объект.Свойство("Ссылка")
			И (ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.КорректировкаРеализации") 
			ИЛИ ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
			Если ЭлементПриемник.подчиненныеЭлементы.Найти(ИмяСостава+"ГруппаКоличество")<>Неопределено тогда
				НоваяСтрока.Количество = Количество;
			КонецЕсли;
		Иначе
			Если ЭлементПриемник.подчиненныеЭлементы.Найти(ИмяСостава+"Количество") <>Неопределено тогда
				НоваяСтрока.Количество = Количество;
			конецесли;
		КонецЕсли;
		//{БредовЮГ 2014-11-30 Наряд №0001346141
		Если НоваяСтрока.Свойство("ВидМатрицы") Тогда
			НоваяСтрока.ВидМатрицы = ОбработкаТабличныхЧастейСервер.ПолучитьВидМатрицы(НоваяСтрока.Номенклатура);
		КонецЕсли;
		//БредовЮГ 2014-11-30 Наряд №000134614}
		Если ЭлементПриемник.ПОдчиненныеЭлементы.Найти(ИмяСостава+"Ключ")<>Неопределено тогда
			НоваяСтрока.Ключ = Новый УникальныйИдентификатор();
		конецесли;
		ТекСТрока = НоваяСтрока;
		
		// {ВетровИА 2015-06-04 Наряд 000152249 
		Если ИмяСостава <> ЭлементПриемник.Имя  Тогда
			ИмяСостава = ЭлементПриемник.Имя;
		КонецЕсли;
		// {ВетровИА 2015-06-04 Наряд 000152249
		
		ОбработкаТабличныхЧастейКлиент.ЗаполнитьСтрокуТабличнойЧастиПоУмолчанию(НоваяСтрока,ЭлементПриемник,Объект,ИмяСостава);
		Если СтрокаПодбора.Свойство("Цена")<>Неопределено тогда
			Если Объект.Свойство("Ссылка")
				И (ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.Zотчет")) Тогда
				ТекСтрока.Сумма = ТекСтрока.Количество * СтрокаПодбора.Цена;
				ТекСтрока.СуммаНДС = РассчитатьСуммуНДС(ТекСтрока.Сумма, 
				Истина, 
				ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС));
			Иначе
				ПриИзмененииКоличестваВТабличнойЧасти(ТекСтрока,ПроверитьПравоСмотретьСебестоимость);
			КонецЕсли;
		Конецесли;
	КонецЕсли;
	Возврат ТекСтрока;
конецФУнкции

//popn+
Функция ЗапросКоличества(флЗапрашиватьКоличество, ЗапретДробногоКоличества = НЕОПРЕДЕЛЕНО) Экспорт
	Если флЗапрашиватьКоличество Тогда
		ВыбКоличество = 1;
		Подсказка = "Введите количество ";
		Если ЗапретДробногоКоличества = ИСТИНА Тогда
			Разряды = 0;
		Иначе
			Разряды = 3;
		КонецЕсли;
		Если ВвестиЧисло(ВыбКоличество,Подсказка,15,Разряды) = Ложь Тогда
			ВыбКоличество = 0;
		КонецЕсли;	
	Иначе	
		ВыбКоличество = 1;
	КонецЕсли;
	Возврат ВыбКоличество;
КонецФункции		

Процедура ОтображениеГрупп(Подбор,Флаг) экспорт
	ОчиститьОтборПоГруппе(подбор);
	ОтборПоГруппе = Подбор.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПоГруппе.Использование =не флаг;
	ОтборПоГруппе.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Группа");
	ОтборПогруппе.видСравнения = видсравнениякомпоновкиДанных.Равно;
	ОтборПоГруппе.ПравоеЗначение = 0
конецпроцедуры

Процедура ОчиститьОтборПоГруппе(подбор) экспорт
	сч = подбор.Отбор.Элементы.количество()-1;
	пока сч >=0 цикл                                   		
		ЭлементОтбора = подбор.Отбор.Элементы.Получить(Сч);
		если элементОтбора.левоеЗначение = новый полекомпоновкиДанных("Группа") тогда
			Подбор.Отбор.Элементы.Удалить(элементОтбора);
		конецесли;
		Сч =сч - 1;                                    		
	конеццикла;
КонецПроцедуры

Процедура загрузитьнастройкиподбора(вызывающаяформа,Настройка,ИмяДинамическогоСписка = неопределено) экспорт    
	Если Настройка = неопределено тогда
		возврат;
	конецесли;
	если вызывающаяформа = "" или ВЫзывающаяФорма = неопределено тогда
		возврат;
	конецесли;
	Если ИмяДинамическогоСписка = неопределено тогда
		Имядинамическогосписка = "ПодборНоменклатуры";
	Конецесли;
	настройки = неопределено;
	настройка.свойство("ОтображениеГрупп",Настройки);
	если настройки<>неопределено тогда
		ОтображениеГрупп(вызывающаяФорма[ИмяДинамическогоСписка], настройки);
		Вызывающаяформа.элементы.кнГруппы.пометка = настройки;
	конецесли;
	настройки = неопределено;
	настройка.свойство("РежимПросмотра",Настройки);
	если настройки<>неопределено тогда
		ВызывающаяФорма.Элементы[ИмяДинамическогоСписка].отображение = ОтображениеТаблицы[настройки];
		ВызывающаяФорма.Элементы[ИмяДинамическогоСписка+Настройки].пометка = истина;
		если Настройки<>"Список" тогда
			Вызывающаяформа.элементы.кнГруппы.пометка = истина;
			вызывающаяформа.элементы.кнГруппы.доступность =ложь;
			обработкатабличныхчастейклиент.ОтображениеГрупп(вызывающаяформа[ИмяДинамическогоСписка],истина);		
		иначе
			вызывающаяформа.элементы.кнГруппы.доступность = истина;
		конецесли;
	иначе
		ВызывающаяФорма.Элементы[ИмяДинамическогоСписка].отображение = ОтображениеТаблицы.ИерархическийСписок ;
		ВызывающаяФорма.Элементы[ИмяДинамическогоСписка+"Иерархия"].пометка = истина  ;
		Вызывающаяформа.элементы.кнГруппы.пометка = истина;
		вызывающаяформа.элементы.кнГруппы.доступность = ложь;
		обработкатабличныхчастейклиент.ОтображениеГрупп(вызывающаяформа[ИмяДинамическогоСписка],истина);		
		
		
	конецесли;
	настройки = неопределено;
	настройка.свойство("НачальноеОтображениеДерева",Настройки);
	если настройки<>неопределено тогда
		ВызывающаяФорма.Элементы[ИмяДинамическогоСписка].НачальноеОтображениеДерева = НачальноеОтображениеДерева[настройки];
	конецесли;
Конецпроцедуры

Процедура ОтображениеДинамическогоСпискаДерево(вызывающаяформа,ИмяЭлемента=неопределено) экспорт
	если не значениезаполнено(имяэлемента) тогда
		ИмяЭлемента = "ПОдборНоменклатуры";
	конецесли;
	вызывающаяформа.элементы[ИмяЭлемента+"ИерархическийСписок"].Пометка = ложь;
	вызывающаяформа.элементы[ИмяЭлемента+"дерево"].Пометка = истина;
	вызывающаяформа.элементы[ИмяЭлемента+"Список"].Пометка = ложь;
	вызывающаяформа.Элементы.кнГруппы.пометка=Истина;
	вызывающаяформа.Элементы.кнГруппы.доступность = ложь;
	обработкаТабличныхчастейклиент.ОтображениеГрупп(вызывающаяформа[ИмяЭлемента],Истина);
	вызывающаяформа.элементы[ИмяЭлемента].Отображение=ОтображениеТаблицы.Дерево;
конецпроцедуры

процедура отображениединамическогоспискаиерархия(вызывающаяформа,ИмяЭлемента=неопределено) экспорт
	если не значениезаполнено(имяэлемента) тогда
		ИмяЭлемента = "ПОдборНоменклатуры";
	конецесли;
	вызывающаяформа.элементы[ИмяЭлемента+"ИерархическийСписок"].Пометка = истина;
	вызывающаяформа.элементы[ИмяЭлемента+"дерево"].Пометка = ложь;
	вызывающаяформа.элементы[ИмяЭлемента+"Список"].Пометка = ложь;
	вызывающаяформа.Элементы.кнГруппы.пометка=Истина;
	вызывающаяформа.Элементы.кнГруппы.доступность = ложь;
	обработкаТабличныхчастейклиент.ОтображениеГрупп(вызывающаяформа[ИмяЭлемента],Истина);
	вызывающаяформа.элементы[ИмяЭлемента].Отображение=ОтображениеТаблицы.ИерархическийСписок;
конецпроцедуры

процедура ОтображениеДинамическогоСпискаСписок(вызывающаяформа,ИмяЭлемента=неопределено) экспорт
	если не значениезаполнено(имяэлемента) тогда
		ИмяЭлемента = "ПОдборНоменклатуры";
	конецесли;
	вызывающаяформа.элементы[ИмяЭлемента+"ИерархическийСписок"].Пометка =ложь;
	вызывающаяформа.элементы[ИмяЭлемента+"дерево"].Пометка = ложь;
	вызывающаяформа.элементы[ИмяЭлемента+"Список"].Пометка = истина;
	вызывающаяформа.Элементы.кнГруппы.пометка=Истина;
	вызывающаяформа.Элементы.кнГруппы.доступность = истина;	
	обработкаТабличныхчастейклиент.ОтображениеГрупп(вызывающаяформа[ИмяЭлемента],Истина);
	вызывающаяформа.элементы[ИмяЭлемента].Отображение=ОтображениеТаблицы.Список;
конецпроцедуры

Процедура НайтиВТЧТовар(Номенклатура, Форма, Объект, ИмяТЧ = "Состав", ИмяТаблицыФормы = "Состав", ИмяРеквизита = "Номенклатура") Экспорт
	
	ТекстСообщения = "";
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В списке не найден товар ""НаименованиеТовара"".'");
	Иначе
		Форма.Элементы[ИмяТаблицыФормы].ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		Если Форма.Элементы[ИмяТаблицыФормы].ТекущаяСтрока = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'В отображаемых строках списка не найден товар ""%НаименованиеТовара%"".'");
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеТовара%", Номенклатура);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры
