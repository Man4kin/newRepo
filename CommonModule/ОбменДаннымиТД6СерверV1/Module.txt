Процедура ОбменДанными(Ссылка) Экспорт
	ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисФинансы);
	
	
	Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
	URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
	ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
	ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
	Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
	Прокси.Пользователь = ВебСервис.Имя;
	Прокси.Пароль = ВебСервис.Пароль;
	ВсеОшибки = "";
	КоличествоОшибок = 0;
	КоличествоПакетов = 0;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1);
	Пока ВыборкаИзменений.Следующий() Цикл
		Ошибка = "";
		Объект = ВыборкаИзменений.Получить();
		ТипОбъекта = ТипЗнч(Объект);
		Ушло = Ложь;
		Если ПараметрыСеанса.ЭтоЦентр Тогда
			//Грузим из магазина
			Ушло = Истина;
		Иначе	
			Если ТипОбъекта = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
				ЕстьНулевыеЦены = ОбменДаннымиЦВДСервер.ЕстьНулевыеЦены(Объект.Ссылка);
				Если ЕстьНулевыеЦены  Тогда
					Ушло = Ложь;
				Иначе
					Ушло = ОтправитьПриходнуюНакладную(Объект,Прокси,Ошибка);
				КонецЕсли;	
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
				Если Объект.Возврат Тогда
					Ушло = ОтправитьВозвратнуюПоставщику(Объект,Прокси,Ошибка);
				Иначе
					Ушло = ОтправитьРасходнуюНакладную(Объект,Прокси,Ошибка);
				КонецЕсли;	
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.Инвентаризация") Тогда
				Ушло = ОтправитьИнвентаризацию(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ZОтчет") Тогда
				Ушло = ОтправитьZОтчет(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КоррекцияЗапасов") Тогда
				Ушло = ОтправитьКоррекциюЗапасов(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ВозвратнаяНакладнаяОтПокупателя") Тогда
				Ушло = ОтправитьВозвратнуюОтПокупателя(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПередачаТоваровМеждуФирмами") Тогда
				Ушло = ОтправитьПередачуТоваровМеждуФирмами(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
				Ушло = ОтправитьПриходныйКассовыйОрдер(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
				Ушло = ОтправитьРасходныйКассовыйОрдер(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
				Ушло = ОтправитьАвансовыйОтчет(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ОтчетРеализатора") Тогда
				Ушло = ОтправитьОтчетРеализатора(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ОтчетРеализатораМеждуФирмами") Тогда
				Ушло = ОтправитьОтчетРеализатораМеждуФирмами(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетФактура") Тогда
				Ушло = ОтправитьСчетФактура(Объект,Прокси,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("УдалениеОбъекта") Тогда
				Ушло = ОтправитьУдалениеОбъекта(Объект,Прокси,Ошибка);
			КонецЕсли;	
		КонецЕсли;	
		Если Ушло Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
		КонецЕсли; 
		КоличествоПакетов = КоличествоПакетов + 1;
		Если Ошибка <> "" Тогда
			ВсеОшибки = Ошибка;
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецЕсли;	
	КонецЦикла; 
	Если ВсеОшибки <> "" Тогда
		Сообшение = "Всего ошибок - "+КоличествоОшибок+" из "+КоличествоПакетов+"
		| последняя ошибка:
		|"+ВсеОшибки;
		ВызватьИсключение(Сообшение);
	КонецЕсли;	
КонецПроцедуры

Функция ОтправитьСообщение(Package,Прокси,Имя)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Package,Имя,,,НазначениеТипаXML.Явное);
	Данные = ЗаписьXML.Закрыть();
	Результат = Истина;
	МестоВызова = ?(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр,"center","sh/"+Формат(СтруктурныеЕдиницы.ПолучитьКодТекущейЛокации(),"ЧГ="));
	Попытка
		Результат = Прокси.DataExchange(МестоВызова,Данные);
		Если Результат = Ложь Тогда
			ЗаписьЖурналаРегистрации("WebService ТД6", УровеньЖурналаРегистрации.Ошибка,,,Данные);
			Package = Данные;
		Иначе	
			Package = "";
		КонецЕсли;	
	Исключение
		Package = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"WebService ТД6");
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ОпределитьПрисутствиеАлкоголя(Док) экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокСостав.Номенклатура
	|			ИЗ
	|				Документ."+Док.Метаданные().Имя+".Состав КАК ДокСостав
	|			ГДЕ
	|				ДокСостав.Ссылка = &Ссылка
	|			СГРУППИРОВАТЬ ПО
	|						ДокСостав.Номенклатура)
	|	И НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоКатегорияАлкоголя");
	Запрос.УстановитьПараметр("Ссылка",Док);
	Запрос.УстановитьПараметр("СвойствоКатегорияАлкоголя",ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаВидАлкогольнойПродукции)));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

Функция ОтправитьПриходнуюНакладную(Объект,Прокси,Ошибка)
	//Если НЕ Объект.ОбработанЦВД Тогда
	//	Возврат Истина;
	//КонецЕсли;	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Истина;
	КонецЕсли;	
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_ПриходнаяНакладная");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	//Пакет.Автор = Объект.Автор.Код;
	Пакет.БонуснаяПоставка = Объект.БонуснаяПоставка;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.Грузоотправитель = Объект.Грузоотправитель.Код;
	Пакет.ГрузополучательТип = ?(Объект.Грузополучатель = Неопределено,"",Объект.Грузополучатель.Метаданные().Имя);
	Пакет.Грузополучатель = ?(Объект.Грузополучатель = Неопределено,"",Объект.Грузополучатель.Код);
	Пакет.ДатаДокумента = Объект.ДатаДокумента;
	Пакет.ДатаСФ = Объект.ДатаСФ;
	//Пакет.Комментарий = Объект.Комментарий;
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.НомерДокумента = Объект.НомерДокумента;
	Пакет.НомерСФ = Объект.НомерСФ;
	Пакет.Приемщик = Объект.Приемщик.Код;
	Пакет.Склад = Объект.Склад.Код;
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Пакет.ИтогоВсего = Объект.СуммаИтого;
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(Объект.Ссылка);
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Пакет.ДокОснование = Пакет.Ref;
	КонецЕсли;	
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений; 
	ПечФорма = Документы.ПриходнаяНакладная.ПечатьТОРГ12(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ ПриходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА ПриходнаяНакладнаяСостав.Номенклатура.Код
	|		КОГДА ПриходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(ПриходнаяНакладнаяСостав.СтавкаНДС.Ставка, 0) КАК СтавкаНДС,
	|	ПриходнаяНакладнаяСостав.Ссылка,
	|	СУММА(ПриходнаяНакладнаяСостав.Количество * ПриходнаяНакладнаяСостав.Коэффициент) КАК Количество,
	|	СУММА(ЕСТЬNULL(ОстаткиНоменклатуры.Себестоимость, 0)) КАК Себестоимость,
	|	СУММА(ПриходнаяНакладнаяСостав.Сумма) КАК Сумма,
	|	СУММА(ПриходнаяНакладнаяСостав.Цена) КАК Цена,
	|	СУММА(ПриходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО ПриходнаяНакладнаяСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|ГДЕ
	|	ПриходнаяНакладнаяСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходнаяНакладнаяСостав.Ссылка,
	|	ПриходнаяНакладнаяСостав.Коэффициент,
	|	ПриходнаяНакладнаяСостав.СтавкаНДС.Ставка,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ ПриходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА ПриходнаяНакладнаяСостав.Номенклатура.Код
	|		КОГДА ПриходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ПриходнаяНакладная_Состав");
	ТипМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ПриходнаяНакладная_Материалы");
	
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = "п" ИЛИ Выборка.Номенклатура = "т" Тогда
			ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
			ПакетСостав.СтавкаНДС     = Выборка.СтавкаНДС;
			ПакетСостав.Сумма         = Выборка.Себестоимость;
			ПакетСостав.Себестоимость = Выборка.Себестоимость;
			ПакетСостав.СуммаНДС      = Выборка.СуммаНДС;
			ПакетСостав.ВидНоменклатуры  = Выборка.Номенклатура;
			Пакет.Состав.Добавить(ПакетСостав);
		Иначе
			ПакетМатериалы = ФабрикаXDTO.Создать(ТипМатериалы);
			ПакетМатериалы.Номенклатура     = СокрЛП(Выборка.Номенклатура);
			ПакетМатериалы.Количество       = Выборка.Количество;
			ПакетМатериалы.СтавкаНДС        = Выборка.СтавкаНДС;
			ПакетМатериалы.Цена             = Выборка.Цена;
			ПакетМатериалы.Сумма            = Выборка.Сумма;
			ПакетМатериалы.СуммаНДС         = Выборка.СуммаНДС;
			Пакет.Материалы.Добавить(ПакетМатериалы);
		КонецЕсли;	
	КонецЦикла;
	
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ПриходнаяНакладная","fin","RS_ПриходнаяНакладная");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьZОтчет(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_ZОтчет");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.ИтогоВсего = Объект.СуммаИтого;
	Пакет.ИтогоВсегоНал = Объект.СуммаИтого;
	Пакет.СвободнаяСумма = Объект.Выручка.Итог("СвободнаяСумма");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ZОтчетСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	ZОтчетСостав.Ссылка,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Себестоимость), 0) КАК Себестоимость,
	|	СУММА(ZОтчетСостав.Сумма) КАК Сумма,
	|	СУММА(ZОтчетСостав.СуммаНДС) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ZОтчетСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры
	|ИЗ
	|	Документ.Zотчет.Состав КАК ZОтчетСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО ZОтчетСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|ГДЕ
	|	ZОтчетСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ZОтчетСостав.Ссылка,
	|	ZОтчетСостав.СтавкаНДС.Ставка,
	|	ВЫБОР
	|		КОГДА ZОтчетСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ZОтчет_Состав");
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ZОтчет_ОстаткиНоменклатуры");
	
	
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС     = Выборка.СтавкаНДС;
		ПакетСостав.Себестоимость = Выборка.Себестоимость;
		ПакетСостав.Сумма         = Выборка.Сумма;
		ПакетСостав.СуммаНДС      = Выборка.СуммаНДС;
		ПакетСостав.ВидНоменклатуры      = Выборка.ВидНоменклатуры;
		
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	
	//регистр остатки номенклатуры
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0) КАК СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ,
	|	ДвиженияТМЦ.Комитент,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0)");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	
	Пока Выборка.Следующий() Цикл
		ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
		ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
		ПакетОстаткиНоменклатуры.Комитент = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент)); 
		ПакетОстаткиНоменклатуры.КомитентТип = ОпределитьТипКонтрагента(Выборка.КомитентГуид);//ШиловМВ 09.10.14 №000129809
		ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
		ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
		ПакетОстаткиНоменклатуры.СуммаПродажи          = Выборка.СуммаПродажи;
		ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = Выборка.СуммаНДСПродажи;
		ПакетОстаткиНоменклатуры.ВидНоменклатуры       = Выборка.ВидНоменклатуры;
		ПакетОстаткиНоменклатуры.СтавкаНДС             = Выборка.СтавкаНДС;
		Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
	КонецЦикла;
	
	
	ТипКарты = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ZОтчет_Карты");
	Для Каждого Строка Из Объект.Карты Цикл
		ПакетКарты = ФабрикаXDTO.Создать(ТипКарты);
		ПакетКарты.ТипКарты = Строка(Строка.ТипКарты.УникальныйИдентификатор());
		ПакетКарты.Сумма = Строка.Сумма;
		Пакет.Карты.Добавить(ПакетКарты);
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ZОтчет","fin","RS_ZОтчет");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

функция ОпределитьКонтрагента(Контрагент,Код)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат СокрЛП(Код);
	Иначе
		Если Контрагент = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат Строка(Контрагент.УникальныйИдентификатор());
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	

Функция ОпределитьТипКонтрагента(Контрагент)
	
	
	Если Контрагент=Неопределено ИЛИ Контрагент=NULL  Тогда
		
		Возврат "";
		
	Иначе
		
		Возврат Контрагент.Метаданные().Имя;
		
	КонецЕсли;	
	
КонецФункции	

Функция ОтправитьРасходнуюНакладную(Объект,Прокси,Ошибка)
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Истина;
	КонецЕсли;	
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_РасходнаяНакладная");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.ГрузоотправительТип = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Метаданные().Имя);
	Пакет.Грузоотправитель = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Код);
	Пакет.Грузополучатель = Объект.Грузополучатель.Код;
	Пакет.АдресДоставки = "";
	Пакет.Склад = Объект.Склад.Код;
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Пакет.ИтогоВсего = Объект.СуммаИтого;
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ПечФорма = Документы.РасходнаяНакладная.ПечатьТОРГ13(МассивОбъектов,ОбъектыПечати);
	Иначе	
		ПечФорма = Документы.РасходнаяНакладная.ПечатьТОРГ12(МассивОбъектов,ОбъектыПечати);
	КонецЕсли;	
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(Объект.Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА РасходнаяНакладнаяСостав.Номенклатура.Код
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(РасходнаяНакладнаяСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	РасходнаяНакладнаяСостав.Ссылка,
	|	СУММА(РасходнаяНакладнаяСостав.Количество * РасходнаяНакладнаяСостав.Коэффициент) КАК Количество,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Себестоимость), 0) КАК Себестоимость,
	|	СУММА(РасходнаяНакладнаяСостав.Сумма) КАК Сумма,
	|	СУММА(РасходнаяНакладнаяСостав.Цена) КАК Цена,
	|	СУММА(РасходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО РасходнаяНакладнаяСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|ГДЕ
	|	РасходнаяНакладнаяСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяСостав.Ссылка,
	|	РасходнаяНакладнаяСостав.Коэффициент,
	|	РасходнаяНакладнаяСостав.СтавкаНДС.Ставка,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА РасходнаяНакладнаяСостав.Номенклатура.Код
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_РасходнаяНакладная_Состав");
	ТипМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_РасходнаяНакладная_Материалы");
	
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = "п" или Выборка.Номенклатура = "т"  Тогда
			ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
			ПакетСостав.СтавкаНДС     = Выборка.СтавкаНДС;
			ПакетСостав.Себестоимость = Выборка.Себестоимость;
			ПакетСостав.Сумма         = Выборка.Сумма;
			ПакетСостав.СуммаНДС      = Выборка.СуммаНДС;
			ПакетСостав.ВидНоменклатуры = Выборка.Номенклатура;
			Пакет.Состав.Добавить(ПакетСостав);
		Иначе
			ПакетМатериалы = ФабрикаXDTO.Создать(ТипМатериалы);
			ПакетМатериалы.Номенклатура     = Выборка.Номенклатура;
			ПакетМатериалы.Количество       = Выборка.Количество;
			ПакетМатериалы.СтавкаНДС        = Выборка.СтавкаНДС;
			ПакетМатериалы.Цена             = Выборка.Цена;
			ПакетМатериалы.Сумма            = Выборка.Сумма;
			ПакетМатериалы.СуммаНДС         = Выборка.СуммаНДС;
			Пакет.Материалы.Добавить(ПакетМатериалы);
		КонецЕсли;	
	КонецЦикла;
	
	
	//регистр остатки номенклатуры
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|			ТОГДА ДвиженияТМЦ.Номенклатура.Код
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0) КАК СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|			ТОГДА ДвиженияТМЦ.Номенклатура.Код
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ДвиженияТМЦ.Комитент,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0)");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_РасходнаяНакладная_ОстаткиНоменклатуры");
	ТипОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_РасходнаяНакладная_ОстаткиНоменклатурыМатериалы");
	
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = "п" или Выборка.Номенклатура = "т" Тогда
			ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
			ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
			ПакетОстаткиНоменклатуры.Комитент = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент)); 
			ПакетОстаткиНоменклатуры.КомитентТип = ОпределитьТипКонтрагента(Выборка.КомитентГуид);//ШиловМВ 09.10.14 №000129809
			ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
			ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
			ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
			ПакетОстаткиНоменклатуры.СуммаПродажи          = Выборка.СуммаПродажи;
			ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = Выборка.СуммаНДСПродажи;
			ПакетОстаткиНоменклатуры.ВидНоменклатуры       = Выборка.Номенклатура;
			ПакетОстаткиНоменклатуры.СтавкаНДС             = Выборка.СтавкаНДС;
			Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
		Иначе
			ПакетОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Создать(ТипОстаткиНоменклатурыМатериалы);
			ПакетОстаткиНоменклатурыМатериалы.Номенклатура        = СокрЛП(Выборка.Номенклатура);
			ПакетОстаткиНоменклатурыМатериалы.СтавкаНДС           = Выборка.СтавкаНДС;
			ПакетОстаткиНоменклатурыМатериалы.Количество          = Выборка.Количество;
			ПакетОстаткиНоменклатурыМатериалы.Себестоимость       = Выборка.Сумма;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДС    = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьУпр    = Выборка.СуммаУпр;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДСУпр = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатурыМатериалы.СуммаПродажи        = Выборка.СуммаПродажи;
			ПакетОстаткиНоменклатурыМатериалы.СуммаНДСПродажи     = Выборка.СуммаНДСПродажи;
			Пакет.ОстаткиНоменклатурыМатериалы.Добавить(ПакетОстаткиНоменклатурыМатериалы);
		КонецЕсли;	
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_РасходнаяНакладная","fin","RS_РасходнаяНакладная");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьВозвратнуюПоставщику(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_ВозвратнаяНакладная");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.ГрузоотправительТип = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Метаданные().Имя);
	Пакет.Грузоотправитель = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Код);
	Пакет.ГрузополучательТип = ?(Объект.Грузополучатель = Неопределено,"",Объект.Грузополучатель.Метаданные().Имя);
	Пакет.Грузополучатель = ?(Объект.Грузополучатель = Неопределено,"",Объект.Грузополучатель.Код);
	Пакет.АдресДоставки = "";
	Пакет.Склад = Объект.Склад.Код;
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Пакет.ИтогоВсего = Объект.СуммаИтого;
	Пакет.ТипВозврата = "Поставщику";
	
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.РасходнаяНакладная.ПечатьТОРГ12(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(Объект.Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА РасходнаяНакладнаяСостав.Номенклатура.Код
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(РасходнаяНакладнаяСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	РасходнаяНакладнаяСостав.Ссылка,
	|	СУММА(РасходнаяНакладнаяСостав.Количество * РасходнаяНакладнаяСостав.Коэффициент) КАК Количество,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Себестоимость), 0) КАК Себестоимость,
	|	СУММА(РасходнаяНакладнаяСостав.Сумма) КАК Сумма,
	|	СУММА(РасходнаяНакладнаяСостав.Цена) КАК Цена,
	|	СУММА(РасходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО РасходнаяНакладнаяСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|ГДЕ
	|	РасходнаяНакладнаяСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяСостав.Ссылка,
	|	РасходнаяНакладнаяСостав.Коэффициент,
	|	РасходнаяНакладнаяСостав.СтавкаНДС.Ставка,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА РасходнаяНакладнаяСостав.Номенклатура.Код
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ВозвратнаяНакладная_Состав");
	ТипМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ВозвратнаяНакладная_Материалы");
	
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = "п" или Выборка.Номенклатура = "т"  Тогда
			ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
			ПакетСостав.СтавкаНДС     = Выборка.СтавкаНДС;
			ПакетСостав.Себестоимость = Выборка.Себестоимость;
			ПакетСостав.Сумма         = Выборка.Сумма;
			ПакетСостав.СуммаНДС      = Выборка.СуммаНДС;
			ПакетСостав.СебестоимостьНДС    = 0;
			ПакетСостав.СебестоимостьНДСУпр = 0;
			ПакетСостав.СебестоимостьУпр    = 0;
			ПакетСостав.ВидНоменклатуры    = Выборка.Номенклатура;
			Пакет.Состав.Добавить(ПакетСостав);
		Иначе
			ПакетМатериалы = ФабрикаXDTO.Создать(ТипМатериалы);
			ПакетМатериалы.Номенклатура     = Выборка.Номенклатура;
			ПакетМатериалы.Количество       = Выборка.Количество;
			ПакетМатериалы.СтавкаНДС        = Выборка.СтавкаНДС;
			ПакетМатериалы.Цена             = Выборка.Цена;
			ПакетМатериалы.Сумма            = Выборка.Сумма;
			ПакетМатериалы.СуммаНДС         = Выборка.СуммаНДС;
			Пакет.Материалы.Добавить(ПакетМатериалы);
		КонецЕсли;	
	КонецЦикла;
	
	
	//регистр остатки номенклатуры
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|			ТОГДА ДвиженияТМЦ.Номенклатура.Код
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|			ТОГДА ДвиженияТМЦ.Номенклатура.Код
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ДвиженияТМЦ.Комитент");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ВозвратнаяНакладная_ОстаткиНоменклатуры");
	ТипОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ВозвратнаяНакладная_ОстаткиНоменклатурыМатериалы");
	
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = "п" или Выборка.Номенклатура = "т" Тогда
			ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
			ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
			ПакетОстаткиНоменклатуры.Комитент = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент)); 
			ПакетОстаткиНоменклатуры.КомитентТип = ОпределитьТипКонтрагента(Выборка.КомитентГуид);//ШиловМВ 09.10.14 №000129809
			ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
			ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
			ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
			ПакетОстаткиНоменклатуры.СуммаПродажи          = Выборка.СуммаПродажи;
			ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = Выборка.СуммаНДСПродажи;
			ПакетОстаткиНоменклатуры.ВидНоменклатуры       = Выборка.Номенклатура;
			Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
		Иначе
			ПакетОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Создать(ТипОстаткиНоменклатурыМатериалы);
			ПакетОстаткиНоменклатурыМатериалы.Номенклатура        = СокрЛП(Выборка.Номенклатура);
			ПакетОстаткиНоменклатурыМатериалы.Количество          = Выборка.Количество;
			ПакетОстаткиНоменклатурыМатериалы.Себестоимость       = Выборка.Сумма;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДС    = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьУпр    = Выборка.СуммаУпр;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДСУпр = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатурыМатериалы.СуммаПродажи        = Выборка.СуммаПродажи;
			ПакетОстаткиНоменклатурыМатериалы.СуммаНДСПродажи     = Выборка.СуммаНДСПродажи;
			Пакет.ОстаткиНоменклатурыМатериалы.Добавить(ПакетОстаткиНоменклатурыМатериалы);
		КонецЕсли;	
	КонецЦикла;
	
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ВозвратнаяНакладная","fin","RS_ВозвратнаяНакладная");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьВозвратнуюОтПокупателя(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_ВозвратнаяНакладная");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.ГрузоотправительТип = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Метаданные().Имя);
	Пакет.Грузоотправитель = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Код);
	Пакет.ГрузополучательТип = ?(Объект.Грузополучатель = Неопределено,"",Объект.Грузополучатель.Метаданные().Имя);
	Пакет.Грузополучатель = ?(Объект.Грузополучатель = Неопределено,"",Объект.Грузополучатель.Код);
	Пакет.АдресДоставки = "";
	Пакет.Склад = Объект.Склад.Код;
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Пакет.ИтогоВсего = Объект.СуммаИтого;
	Пакет.ТипВозврата = "ОтПокупателя";
	
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.ВозвратнаяНакладнаяОтПокупателя.ПечатьТОРГ12(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(Объект.Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.Сумма) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура,
	|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК СебестоимостьУпр,
	|	СУММА(ОстаткиНоменклатуры.СуммаНДС) КАК СебестоимостьНДС,
	|	СУММА(ОстаткиНоменклатуры.СуммаНДСУпр) КАК СебестоимостьНДСУпр
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВозвратнаяНакладнаяОтПокупателяСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	ВозвратнаяНакладнаяОтПокупателяСостав.Ссылка,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Себестоимость), 0) КАК Себестоимость,
	|	СУММА(ВозвратнаяНакладнаяОтПокупателяСостав.Сумма) КАК Сумма,
	|	СУММА(ВозвратнаяНакладнаяОтПокупателяСостав.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СебестоимостьУпр), 0) КАК СебестоимостьУпр,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СебестоимостьНДС), 0) КАК СебестоимостьНДС,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.СебестоимостьНДСУпр), 0) КАК СебестоимостьНДСУпр,
	|	ВЫБОР
	|		КОГДА ВозвратнаяНакладнаяОтПокупателяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры
	|ИЗ
	|	Документ.ВозвратнаяНакладнаяОтПокупателя.Состав КАК ВозвратнаяНакладнаяОтПокупателяСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО ВозвратнаяНакладнаяОтПокупателяСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|ГДЕ
	|	ВозвратнаяНакладнаяОтПокупателяСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратнаяНакладнаяОтПокупателяСостав.Ссылка,
	|	ВозвратнаяНакладнаяОтПокупателяСостав.СтавкаНДС.Ставка,
	|	ОстаткиНоменклатуры.СебестоимостьУпр,
	|	ОстаткиНоменклатуры.СебестоимостьНДС,
	|	ОстаткиНоменклатуры.СебестоимостьНДСУпр,
	|	ВЫБОР
	|		КОГДА ВозвратнаяНакладнаяОтПокупателяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ВозвратнаяНакладная_Состав");
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ВозвратнаяНакладная_ОстаткиНоменклатуры");
	
	
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС     = Выборка.СтавкаНДС;
		ПакетСостав.Себестоимость = Выборка.Себестоимость;
		ПакетСостав.Сумма         = Выборка.Сумма;
		ПакетСостав.СуммаНДС      = Выборка.СуммаНДС;
		ПакетСостав.СебестоимостьНДС      = Выборка.СебестоимостьНДС;
		ПакетСостав.СебестоимостьУпр      = Выборка.СебестоимостьУпр;
		ПакетСостав.СебестоимостьНДСУпр   = Выборка.СебестоимостьНДСУпр;
		ПакетСостав.ВидНоменклатуры   = Выборка.ВидНоменклатуры;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	
	//регистр остатки номенклатуры
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0) КАК  СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ,
	|	ДвиженияТМЦ.Комитент,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0)");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	
	Пока Выборка.Следующий() Цикл
		ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
		ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
		ПакетОстаткиНоменклатуры.Комитент = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент)); 
		ПакетОстаткиНоменклатуры.КомитентТип = ОпределитьТипКонтрагента(Выборка.КомитентГуид);//ШиловМВ 09.10.14 №000129809
		ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
		ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
		ПакетОстаткиНоменклатуры.СуммаПродажи          = Выборка.СуммаПродажи;
		ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = Выборка.СуммаНДСПродажи;
		ПакетОстаткиНоменклатуры.ВидНоменклатуры       = Выборка.ВидНоменклатуры;
		ПакетОстаткиНоменклатуры.СтавкаНДС             = Выборка.СтавкаНДС;
		
		Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
	КонецЦикла;
	
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ВозвратнаяНакладная","fin","RS_ВозвратнаяНакладная");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьКоррекциюЗапасов(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_КоррекцияЗапасов");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Склад = Объект.Склад.Код;
	Пакет.ВиновноеЛицо = Строка(Объект.ВиновноеЛицо.УникальныйИдентификатор());
	Пакет.ВидСписания = Объект.ВидСписания.Код;
	Пакет.Оприходование = Объект.Оприходование;
	Пакет.Основание = Объект.Основание;
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(Объект.Ссылка);
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.КоррекцияЗапасов.ПечатьТОРГ16(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КоррекцияЗапасовСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ КоррекцияЗапасовСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА КоррекцияЗапасовСостав.Номенклатура.Код
	|		КОГДА КоррекцияЗапасовСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК Номенклатура,
	|	КоррекцияЗапасовСостав.Ссылка,
	|	СУММА(КоррекцияЗапасовСостав.Количество * КоррекцияЗапасовСостав.Коэффициент) КАК Количество,
	|	СУММА(ОстаткиНоменклатуры.Себестоимость) КАК Себестоимость,
	|	СУММА(КоррекцияЗапасовСостав.Сумма) КАК Сумма,
	|	КоррекцияЗапасовСостав.СуммаНДС,
	|	ЕСТЬNULL(КоррекцияЗапасовСостав.СтавкаНДС.Ставка, 0) КАК СтавкаНДС
	|ИЗ
	|	Документ.КоррекцияЗапасов.Состав КАК КоррекцияЗапасовСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО КоррекцияЗапасовСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|ГДЕ
	|	КоррекцияЗапасовСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КоррекцияЗапасовСостав.Ссылка,
	|	КоррекцияЗапасовСостав.Коэффициент,
	|	ВЫБОР
	|		КОГДА КоррекцияЗапасовСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ КоррекцияЗапасовСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА КоррекцияЗапасовСостав.Номенклатура.Код
	|		КОГДА КоррекцияЗапасовСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ,
	|	КоррекцияЗапасовСостав.СуммаНДС,
	|	КоррекцияЗапасовСостав.СтавкаНДС.Ставка");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_КоррекцияЗапасов_Состав");
	ТипМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_КоррекцияЗапасов_Материалы");
	
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = "т" или Выборка.Номенклатура = "п" Тогда
			ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
			ПакетСостав.Себестоимость = Выборка.Себестоимость;
			ПакетСостав.Сумма         = Выборка.Сумма;
			ПакетСостав.СуммаНДС         = Выборка.СуммаНДС;
			ПакетСостав.СтавкаНДС         = Выборка.СтавкаНДС;
			ПакетСостав.ВидНоменклатуры = Выборка.Номенклатура;
			Пакет.Состав.Добавить(ПакетСостав);
		Иначе
			ПакетМатериалы = ФабрикаXDTO.Создать(ТипМатериалы);
			ПакетМатериалы.Номенклатура     = Выборка.Номенклатура;
			ПакетМатериалы.Количество       = Выборка.Количество;
			ПакетМатериалы.Сумма            = Выборка.Сумма;
			ПакетСостав.СуммаНДС         = Выборка.СуммаНДС;
			ПакетСостав.СтавкаНДС         = Выборка.СтавкаНДС;
			
			Пакет.Материалы.Добавить(ПакетМатериалы);
		КонецЕсли;	
	КонецЦикла;
	
	//регистр остатки номенклатуры
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|			ТОГДА ДвиженияТМЦ.Номенклатура.Код
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|			ТОГДА ДвиженияТМЦ.Номенклатура.Код
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ДвиженияТМЦ.Комитент");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_КоррекцияЗапасов_ОстаткиНоменклатуры");
	ТипОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_КоррекцияЗапасов_ОстаткиНоменклатурыМатериалы");
	
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = "т" или Выборка.Номенклатура = "п" Тогда
			ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
			ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
			ПакетОстаткиНоменклатуры.Комитент = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент)); 
			ПакетОстаткиНоменклатуры.КомитентТип = ОпределитьТипКонтрагента(Выборка.КомитентГуид);//ШиловМВ 09.10.14 №000129809
			ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
			ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
			ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
			ПакетОстаткиНоменклатуры.ВидНоменклатуры   = Выборка.Номенклатура;
			Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
		Иначе
			ПакетОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Создать(ТипОстаткиНоменклатурыМатериалы);
			ПакетОстаткиНоменклатурыМатериалы.Номенклатура        = СокрЛП(Выборка.Номенклатура);
			ПакетОстаткиНоменклатурыМатериалы.Количество          = Выборка.Количество;
			ПакетОстаткиНоменклатурыМатериалы.Себестоимость       = Выборка.Сумма;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДС    = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьУпр    = Выборка.СуммаУпр;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДСУпр = Выборка.СуммаНДС;
			Пакет.ОстаткиНоменклатурыМатериалы.Добавить(ПакетОстаткиНоменклатурыМатериалы);
		КонецЕсли;	
	КонецЦикла;
	
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_КоррекцияЗапасов","fin","RS_КоррекцияЗапасов");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьИнвентаризацию(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_Инвентаризация");
	Результат = истина;
	
	//получим список фирм
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИнвентаризацияСоставПоФирмам.Фирма
	|ИЗ
	|	Документ.Инвентаризация.СоставПоФирмам КАК ИнвентаризацияСоставПоФирмам
	|ГДЕ
	|	ИнвентаризацияСоставПоФирмам.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияСоставПоФирмам.Фирма");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	ВыборкаФирм = Запрос.Выполнить().Выбрать();
	Пока ВыборкаФирм.Следующий() Цикл
		
		спрФирма = ВыборкаФирм.Фирма;
		
		Пакет = ФабрикаXDTO.Создать(ТипДокумента);
		Пакет.DeletionMark = Объект.ПометкаУдаления;
		Пакет.Date = Объект.Дата;
		Пакет.Number = Объект.Номер;
		Пакет.Posted = Объект.Проведен;
		Пакет.Фирма = Строка(спрФирма.УникальныйИдентификатор());
		Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
		Пакет.Склад = 0;
		Пакет.Основание = Объект.Основание;
		Пакет.ВидКоррекцииСписание = Объект.ВидКоррекцииСписание.Код;
		Пакет.ВидКоррекцииОприходование = Объект.ВидКоррекцииОприходование.Код;
		
		МассивОбъектов = новый Массив();
		МассивОбъектов.Добавить(Объект.ссылка);
		ОбъектыПечати=новый СписокЗначений;
		//пока передаем все печатные формы
		ПечФорма = Документы.Инвентаризация.ПечатьИНВ19(МассивОбъектов,ОбъектыПечати);
		Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
		
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СведенияПоИнвентаризации.Количество > 0
		|			ТОГДА &Приход
		|		ИНАЧЕ &расход
		|	КОНЕЦ КАК ВидДвижения,
		|	ВЫБОР
		|		КОГДА СведенияПоИнвентаризации.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
		|			ТОГДА СведенияПоИнвентаризации.Номенклатура.Код
		|		КОГДА СведенияПоИнвентаризации.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
		|			ТОГДА ""п""
		|		ИНАЧЕ ""т""
		|	КОНЕЦ КАК Номенклатура,
		|	&ПустойКонтрагент КАК Комитент,
		|	СУММА(СведенияПоИнвентаризации.Количество - СведенияПоИнвентаризации.КоличествоПересорт) КАК Количество,
		|	СУММА(СведенияПоИнвентаризации.Сумма - СведенияПоИнвентаризации.СуммаПересорт) КАК Сумма,
		|	СУММА(СведенияПоИнвентаризации.СуммаУпр - СведенияПоИнвентаризации.СуммаУпрПересорт) КАК СуммаУпр,
		|	СУММА(СведенияПоИнвентаризации.СуммаНДС - СведенияПоИнвентаризации.СуммаНДСПересорт) КАК СуммаНДС,
		|	СУММА(СведенияПоИнвентаризации.СуммаНДСУпр - СведенияПоИнвентаризации.СуммаНДСУпрПересорт) КАК СуммаНДСУпр,
		|	&СтатусКупляПродажа КАК Статус,
		|	&ПустойКонтрагент КАК КомитентГуид,
		|	ЕСТЬNULL(СведенияПоИнвентаризации.Номенклатура.СтавкаНДС.Ставка, 0) КАК СтавкаНДС
		|ИЗ
		|	РегистрСведений.СведенияПоИнвентаризации КАК СведенияПоИнвентаризации
		|ГДЕ
		|	СведенияПоИнвентаризации.Регистратор = &Регистратор
		|	И СведенияПоИнвентаризации.Количество - СведенияПоИнвентаризации.КоличествоПересорт <> 0
		|	И СведенияПоИнвентаризации.Фирма = &Фирма
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияПоИнвентаризации.Номенклатура,
		|	ВЫБОР
		|		КОГДА СведенияПоИнвентаризации.Количество > 0
		|			ТОГДА &Приход
		|		ИНАЧЕ &расход
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СведенияПоИнвентаризации.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
		|			ТОГДА СведенияПоИнвентаризации.Номенклатура.Код
		|		КОГДА СведенияПоИнвентаризации.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
		|			ТОГДА ""п""
		|		ИНАЧЕ ""т""
		|	КОНЕЦ,
		|	ЕСТЬNULL(СведенияПоИнвентаризации.Номенклатура.СтавкаНДС.Ставка, 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиНоменклатуры.ВидДвижения,
		|	""т"",
		|	ОстаткиНоменклатуры.Комитент.Код,
		|	0,
		|	ВЫБОР
		|		КОГДА ОстаткиНоменклатуры.ВидДвижения = &Расход
		|			ТОГДА -ОстаткиНоменклатуры.Сумма
		|		ИНАЧЕ ОстаткиНоменклатуры.Сумма
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОстаткиНоменклатуры.ВидДвижения = &Расход
		|			ТОГДА -ОстаткиНоменклатуры.СуммаУпр
		|		ИНАЧЕ ОстаткиНоменклатуры.СуммаУпр
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОстаткиНоменклатуры.ВидДвижения = &Расход
		|			ТОГДА -ОстаткиНоменклатуры.СуммаНДС
		|		ИНАЧЕ ОстаткиНоменклатуры.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОстаткиНоменклатуры.ВидДвижения = &Расход
		|			ТОГДА -ОстаткиНоменклатуры.СуммаНДСУпр
		|		ИНАЧЕ ОстаткиНоменклатуры.СуммаНДСУпр
		|	КОНЕЦ,
		|	&СтатусКомиссия,
		|	ОстаткиНоменклатуры.Комитент,
		|	0
		|ИЗ
		|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
		|ГДЕ
		|	ОстаткиНоменклатуры.Статус = &СтатусКомиссия
		|	И ОстаткиНоменклатуры.Регистратор = &Регистратор
		|	И ОстаткиНоменклатуры.Фирма = &Фирма");
		Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
		Запрос.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("Расход",ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("СтатусКомиссия",Перечисления.ТипыДоговоров.Комиссия);
		Запрос.УстановитьПараметр("СтатусКупляПродажа",Перечисления.ТипыДоговоров.КупляПродажа);
		Запрос.УстановитьПараметр("ПустойКонтрагент",Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("Фирма",спрФирма);
		
		ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_Инвентаризация_Состав");
		ТипМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_Инвентаризация_Материалы");
		
		ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_Инвентаризация_ОстаткиНоменклатуры");
		ТипОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_Инвентаризация_ОстаткиНоменклатурыМатериалы");
		
		прчКупляПродажа = Перечисления.ТипыДоговоров.КупляПродажа;
		спрПустойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				//излишки
				Если Выборка.Номенклатура = "т" или  Выборка.Номенклатура = "п" Тогда
					ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
					ПакетСостав.Себестоимость = Выборка.СуммаУпр;
					ПакетСостав.Сумма         = Выборка.Сумма;
					ПакетСостав.СуммаНДС         = Выборка.СуммаНДС;
					ПакетСостав.СтавкаНДС         = Выборка.СтавкаНДС;
					ПакетСостав.Оприходование = Истина;
					ПакетСостав.ВидНоменклатуры = Выборка.Номенклатура;
					Пакет.Состав.Добавить(ПакетСостав);
					
					ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
					ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
					//{{ШиловМВ 09.10.14 №000129809
					Если Выборка.КомитентГуид = спрПустойКонтрагент Тогда
						ПакетОстаткиНоменклатуры.Комитент = Строка(Выборка.Комитент);
					Иначе	
						ПакетОстаткиНоменклатуры.Комитент = Строка(Выборка.КомитентГуид.УникальныйИдентификатор());
						ПакетОстаткиНоменклатуры.КомитентТип = ОпределитьТипКонтрагента(Выборка.КомитентГуид);
					КонецЕсли;	
					//ШиловМВ 09.10.14 №000129809}}
					ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
					ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
					ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
					ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
					ПакетОстаткиНоменклатуры.Оприходование = Истина;
					ПакетОстаткиНоменклатуры.ВидНоменклатуры = Выборка.Номенклатура;
					Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
					
				Иначе
					ПакетМатериалы = ФабрикаXDTO.Создать(ТипМатериалы);
					ПакетМатериалы.Номенклатура     = Выборка.Номенклатура;
					ПакетМатериалы.Количество       = Выборка.Количество;
					ПакетМатериалы.Сумма            = Выборка.СуммаУпр;
					ПакетМатериалы.СуммаНДС         = Выборка.СуммаНДС;
					ПакетМатериалы.СтавкаНДС        = Выборка.СтавкаНДС;
					ПакетМатериалы.Оприходование = Истина;
					Пакет.Материалы.Добавить(ПакетМатериалы);
					
					ПакетОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Создать(ТипОстаткиНоменклатурыМатериалы);
					ПакетОстаткиНоменклатурыМатериалы.Номенклатура        = СокрЛП(Выборка.Номенклатура);
					ПакетОстаткиНоменклатурыМатериалы.Количество          = Выборка.Количество;
					ПакетОстаткиНоменклатурыМатериалы.Себестоимость       = Выборка.Сумма;
					ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДС    = Выборка.СуммаНДС;
					ПакетОстаткиНоменклатурыМатериалы.СебестоимостьУпр    = Выборка.СуммаУпр;
					ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДСУпр = Выборка.СуммаНДС;
					ПакетОстаткиНоменклатурыМатериалы.Оприходование = Истина;
					Пакет.ОстаткиНоменклатурыМатериалы.Добавить(ПакетОстаткиНоменклатурыМатериалы);
					
				КонецЕсли;	
			Иначе	
				//недостачи
				Если Выборка.Номенклатура = "т" или Выборка.Номенклатура = "п" Тогда
					ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
					ПакетСостав.Себестоимость = -Выборка.Сумма;
					ПакетСостав.Сумма         = -Выборка.Сумма;
					ПакетСостав.Оприходование = Ложь;
					ПакетСостав.ВидНоменклатуры = Выборка.Номенклатура;
					Пакет.Состав.Добавить(ПакетСостав);
					
					ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
					ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
					ПакетОстаткиНоменклатуры.Комитент = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент)); 
					ПакетОстаткиНоменклатуры.КомитентТип = ОпределитьТипКонтрагента(Выборка.КомитентГуид);//ШиловМВ 09.10.14 №000129809
					ПакетОстаткиНоменклатуры.Себестоимость         = -Выборка.Сумма;
					ПакетОстаткиНоменклатуры.СебестоимостьУпр      = -Выборка.СуммаУпр;
					ПакетОстаткиНоменклатуры.СебестоимостьНДС      = -Выборка.СуммаНДС;
					ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = -Выборка.СуммаНДСУпр;
					ПакетОстаткиНоменклатуры.Оприходование = Ложь;
					ПакетОстаткиНоменклатуры.ВидНоменклатуры = Выборка.Номенклатура;
					
					Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
					
				Иначе
					ПакетМатериалы = ФабрикаXDTO.Создать(ТипМатериалы);
					ПакетМатериалы.Номенклатура     = Выборка.Номенклатура;
					ПакетМатериалы.Количество       = -Выборка.Количество;
					ПакетМатериалы.Сумма            = -Выборка.Сумма;
					ПакетМатериалы.Оприходование = Ложь;
					Пакет.Материалы.Добавить(ПакетМатериалы);
					
					ПакетОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Создать(ТипОстаткиНоменклатурыМатериалы);
					ПакетОстаткиНоменклатурыМатериалы.Номенклатура        = СокрЛП(Выборка.Номенклатура);
					ПакетОстаткиНоменклатурыМатериалы.Количество          = -Выборка.Количество;
					ПакетОстаткиНоменклатурыМатериалы.Себестоимость       = -Выборка.Сумма;
					ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДС    = -Выборка.СуммаНДС;
					ПакетОстаткиНоменклатурыМатериалы.СебестоимостьУпр    = -Выборка.СуммаУпр;
					ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДСУпр = -Выборка.СуммаНДС;
					ПакетОстаткиНоменклатурыМатериалы.Оприходование = Ложь;
					Пакет.ОстаткиНоменклатурыМатериалы.Добавить(ПакетОстаткиНоменклатурыМатериалы);
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_Инвентаризация","fin","RS_Инвентаризация");
		Результат = Результат + ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
		Ошибка = Ошибка + ","+RibMessages;
		
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ОтправитьПередачуТоваровМеждуФирмами(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_РасходнаяНакладная");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.ГрузоотправительТип = ?(НЕ ЗначениеЗаполнено(Объект.Грузоотправитель),"",Объект.Грузоотправитель.Метаданные().Имя);
	Пакет.Грузоотправитель = ?(НЕ ЗначениеЗаполнено(Объект.Грузоотправитель),"",Объект.Грузоотправитель.Код);
	Пакет.Грузополучатель = ?(НЕ ЗначениеЗаполнено(Объект.Грузополучатель),"",Объект.Грузополучатель.Код);
	Пакет.АдресДоставки = "";
	Пакет.Склад = Объект.Склад.Код;
	Пакет.КонтрагентТип = Объект.ФирмаПолучатель.Метаданные().Имя;
	Пакет.Контрагент = Объект.ФирмаПолучатель.Код;
	Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Пакет.ИтогоВсего = Объект.СуммаИтого;
	
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.ПередачаТоваровМеждуФирмами.ПечатьТОРГ12(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	
	Пакет.Алко = ОпределитьПрисутствиеАлкоголя(Объект.Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатуры.СуммаУпр) КАК Себестоимость,
	|	ОстаткиНоменклатуры.Номенклатура
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА РасходнаяНакладнаяСостав.Номенклатура.Код
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(РасходнаяНакладнаяСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	РасходнаяНакладнаяСостав.Ссылка,
	|	СУММА(РасходнаяНакладнаяСостав.Количество * РасходнаяНакладнаяСостав.Коэффициент) КАК Количество,
	|	ЕСТЬNULL(СУММА(ОстаткиНоменклатуры.Себестоимость), 0) КАК Себестоимость,
	|	СУММА(РасходнаяНакладнаяСостав.Сумма) КАК Сумма,
	|	СУММА(РасходнаяНакладнаяСостав.Цена) КАК Цена,
	|	СУММА(РасходнаяНакладнаяСостав.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуФирмами.Состав КАК РасходнаяНакладнаяСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО РасходнаяНакладнаяСостав.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	|ГДЕ
	|	РасходнаяНакладнаяСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяСостав.Ссылка,
	|	РасходнаяНакладнаяСостав.Коэффициент,
	|	РасходнаяНакладнаяСостав.СтавкаНДС.Ставка,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|				ИЛИ РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|			ТОГДА РасходнаяНакладнаяСостав.Номенклатура.Код
	|		КОГДА РасходнаяНакладнаяСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_РасходнаяНакладная_Состав");
	ТипМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_РасходнаяНакладная_Материалы");
	
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = "т" или Выборка.Номенклатура = "п" Тогда
			ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
			ПакетСостав.СтавкаНДС     = Выборка.СтавкаНДС;
			ПакетСостав.Себестоимость = Выборка.Себестоимость;
			ПакетСостав.Сумма         = Выборка.Сумма;
			ПакетСостав.СуммаНДС      = Выборка.СуммаНДС;
			ПакетСостав.ВидНоменклатуры = Выборка.Номенклатура;
			Пакет.Состав.Добавить(ПакетСостав);
		Иначе
			ПакетМатериалы = ФабрикаXDTO.Создать(ТипМатериалы);
			ПакетМатериалы.Номенклатура     = Выборка.Номенклатура;
			ПакетМатериалы.Количество       = Выборка.Количество;
			ПакетМатериалы.СтавкаНДС        = Выборка.СтавкаНДС;
			ПакетМатериалы.Цена             = Выборка.Цена;
			ПакетМатериалы.Сумма            = Выборка.Сумма;
			ПакетМатериалы.СуммаНДС         = Выборка.СуммаНДС;
			Пакет.Материалы.Добавить(ПакетМатериалы);
		КонецЕсли;	
	КонецЦикла;
	
	
	//регистр остатки номенклатуры
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|			ТОГДА ДвиженияТМЦ.Номенклатура.Код
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи,
	|	ДвиженияТМЦ.Комитент КАК КомитентГуид,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0) КАК СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Статус,
	|	ВЫБОР
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Материал)
	|			ТОГДА ДвиженияТМЦ.Номенклатура.Код
	|		КОГДА ДвиженияТМЦ.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ,
	|	ДвиженияТМЦ.Комитент.Код,
	|	ДвиженияТМЦ.Комитент,
	|	естьnull(ДвиженияТМЦ.СтавкаНДС.Ставка,0)");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипОстаткиНоменклатуры = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_РасходнаяНакладная_ОстаткиНоменклатуры");
	ТипОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_РасходнаяНакладная_ОстаткиНоменклатурыМатериалы");
	
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = "т" или Выборка.Номенклатура = "п" Тогда
			ПакетОстаткиНоменклатуры = ФабрикаXDTO.Создать(ТипОстаткиНоменклатуры);
			ПакетОстаткиНоменклатуры.Статус   = Строка(Выборка.Статус);
			ПакетОстаткиНоменклатуры.Комитент = ОпределитьКонтрагента(Выборка.КомитентГуид,Строка(Выборка.Комитент)); 
			ПакетОстаткиНоменклатуры.КомитентТип = ОпределитьТипКонтрагента(Выборка.КомитентГуид);//ШиловМВ 09.10.14 №000129809
			ПакетОстаткиНоменклатуры.Себестоимость         = Выборка.Сумма;
			ПакетОстаткиНоменклатуры.СебестоимостьУпр      = Выборка.СуммаУпр;
			ПакетОстаткиНоменклатуры.СебестоимостьНДС      = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатуры.СебестоимостьНДСУпр   = Выборка.СуммаНДСУпр;
			ПакетОстаткиНоменклатуры.СуммаПродажи          = Выборка.СуммаПродажи;
			ПакетОстаткиНоменклатуры.СуммаНДСПродажи       = Выборка.СуммаНДСПродажи;
			ПакетОстаткиНоменклатуры.ВидНоменклатуры       = Выборка.Номенклатура;
			ПакетОстаткиНоменклатуры.СтавкаНДС             = Выборка.СтавкаНДС;
			Пакет.ОстаткиНоменклатуры.Добавить(ПакетОстаткиНоменклатуры);
		Иначе
			ПакетОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Создать(ТипОстаткиНоменклатурыМатериалы);
			ПакетОстаткиНоменклатурыМатериалы.Номенклатура        = СокрЛП(Выборка.Номенклатура);
			ПакетОстаткиНоменклатурыМатериалы.СтавкаНДС           = Выборка.СтавкаНДС;
			ПакетОстаткиНоменклатурыМатериалы.Количество          = Выборка.Количество;
			ПакетОстаткиНоменклатурыМатериалы.Себестоимость       = Выборка.Сумма;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДС    = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьУпр    = Выборка.СуммаУпр;
			ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДСУпр = Выборка.СуммаНДС;
			ПакетОстаткиНоменклатурыМатериалы.СуммаПродажи        = Выборка.СуммаПродажи;
			ПакетОстаткиНоменклатурыМатериалы.СуммаНДСПродажи     = Выборка.СуммаНДСПродажи;
			Пакет.ОстаткиНоменклатурыМатериалы.Добавить(ПакетОстаткиНоменклатурыМатериалы);
		КонецЕсли;	
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_РасходнаяНакладная","fin","RS_РасходнаяНакладная");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьПриходныйКассовыйОрдер(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_ПриходныйКассовыйОрдер");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Касса = Объект.Касса.Код;
	Пакет.Основание = Объект.Основание;
	Пакет.Приложение = Объект.Приложение;
	Пакет.ПринятоОт = Объект.ПринятоОт;
	Пакет.Сумма = Объект.Сумма;
	Пакет.СтавкаНДС = Объект.СтавкаНДС.Ставка;
	Пакет.СуммаНДС = Объект.СуммаНДС;
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.КлассификаторДДС = Объект.КлассификаторДДС.Наименование;
	Если Объект.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС.РасчетыСПокупателями Тогда
		Пакет.Аналитика = Строка(Объект.Аналитика.Код);
	ИначеЕсли Объект.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС.РасчетыСПодотчетниками Тогда
		Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
		
	Иначе	
		Пакет.Аналитика = Строка(Объект.Аналитика);
	КонецЕСли;	
	Пакет.ДокументОснование = ?(Объект.ДокументОснование = Неопределено,"",Строка(Объект.ДокументОснование.УникальныйИдентификатор()));
	Пакет.ДокументОснованиеТип = ?(Объект.ДокументОснование = Неопределено,"",Объект.ДокументОснование.Метаданные().Имя);
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.Курс = Объект.Курс;
	Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Иначе
		Пакет.ТипДоговора = "КупляПродажа";
	КонецЕсли;	
	
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ПриходныйКассовыйОрдер","fin","RS_ПриходныйКассовыйОрдер");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьРасходныйКассовыйОрдер(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_РасходныйКассовыйОрдер");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Касса = Объект.Касса.Код;
	Пакет.Основание = Объект.Основание;
	Пакет.Приложение = Объект.Приложение;
	Пакет.Выдать = Объект.Выдать;
	Пакет.Сумма = Объект.Сумма;
	Пакет.СтавкаНДС = Объект.СтавкаНДС.Ставка;
	Пакет.СуммаНДС = Объект.СуммаНДС;
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.КлассификаторДДС = Объект.КлассификаторДДС.Наименование;
	Если Объект.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС.РасчетыСПоставщиками Тогда
		Пакет.Аналитика = Строка(Объект.Аналитика.Код);
	ИначеЕсли Объект.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС.РасчетыСПодотчетниками Тогда
		Пакет.Аналитика = Строка(Объект.Аналитика.УникальныйИдентификатор());
	Иначе	
		Пакет.Аналитика = Строка(Объект.Аналитика);
	КонецЕСли;	
	
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.Курс = Объект.Курс;
	Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Иначе
		Пакет.ТипДоговора = "КупляПродажа";
	КонецЕсли;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_РасходныйКассовыйОрдер","fin","RS_РасходныйКассовыйОрдер");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьАвансовыйОтчет(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_АвансовыйОтчет");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Сотрудник = Строка(Объект.Сотрудник.УникальныйИдентификатор());
	Пакет.КоличествоПриложенныхДокументов = Объект.КоличествоПриложенныхДокументов;
	Пакет.КоличествоПриложенныхЛистов = Объект.КоличествоПриложенныхЛистов;
	Пакет.НазначениеАванса = Объект.НазначениеАванса;
	Пакет.ПредыдущийАванс = Объект.ПредыдущийАванс;
	Пакет.ПерерасходПоПредыдущемуАвансу = Объект.ПерерасходПоПредыдущемуАвансу;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.Курс = Объект.Курс;
	
	ТипАванс = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_АвансовыйОтчет_Авансы");
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_АвансовыйОтчет_Состав");
	
	Для каждого выборка из Объект.Авансы Цикл
		ПакетАвансы = ФабрикаXDTO.Создать(ТипАванс);
		ПакетАвансы.РКО   = Строка(Выборка.РКО.УникальныйИдентификатор());
		ПакетАвансы.Сумма = Выборка.Сумма;
		Пакет.Авансы.Добавить(ПакетАвансы);
	КонецЦикла;
	
	Для каждого выборка из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.ДатаДокументаРасхода   = Выборка.ДатаДокументаРасхода;
		ПакетСостав.НомерДокументаРасхода = Выборка.НомерДокументаРасхода;
		ПакетСостав.НаименованиеДокументаРасхода = Выборка.НаименованиеДокументаРасхода;
		ПакетСостав.СуммаПоОтчету = Выборка.СуммаПоОтчету;
		ПакетСостав.Сумма = Выборка.Сумма;
		ПакетСостав.КлассификаторДДС = Выборка.КлассификаторДДС.Наименование;
		Если Выборка.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС.РасчетыСПоставщиками Тогда
			Если ЗначениеЗаполнено(Выборка.Аналитика) ТОгда 
				ПакетСостав.Аналитика = Выборка.Аналитика.Код;
			КонецЕсли;	
		Иначе
			ПакетСостав.Аналитика = Выборка.Аналитика;
		КонецЕСли;	
		ПакетСостав.Комментарий = Выборка.Комментарий;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_АвансовыйОтчет","fin","RS_АвансовыйОтчет");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьОтчетРеализатора(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_ОтчетРеализатора");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.ТипОтчета = Метаданные.Перечисления.ТипыОтчетаРеализатора.EnumValues.Get(Перечисления.ТипыОтчетаРеализатора.Индекс(Объект.ТипОтчета)).Имя;
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.ОтчетРеализатора.ПечатьОтчетКомитентуОПродажах(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОтчетРеализатораСостав.Сумма) КАК Сумма,
	|	СУММА(ОтчетРеализатораСостав.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ОтчетРеализатораСостав.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(ОтчетРеализатораСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ОтчетРеализатораСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры
	|ИЗ
	|	Документ.ОтчетРеализатора.Состав КАК ОтчетРеализатораСостав
	|ГДЕ
	|	ОтчетРеализатораСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетРеализатораСостав.СтавкаНДС.Ставка,
	|	ВЫБОР
	|		КОГДА ОтчетРеализатораСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ОтчетРеализатора_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС    = Выборка.СтавкаНДС;
		ПакетСостав.СуммаПродажи = Выборка.СуммаПродажи;
		ПакетСостав.Сумма        = Выборка.Сумма;
		ПакетСостав.СуммаНДС     = Выборка.СуммаНДС;
		ПакетСостав.ВидНоменклатуры  = Выборка.ВидНоменклатуры;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ОтчетРеализатора","fin","RS_ОтчетРеализатора");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьОтчетРеализатораМеждуФирмами(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_ОтчетРеализатора");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.ФирмаКомиссионер.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.КонтрагентТип = Объект.ФирмаКомитент.Метаданные().Имя;
	Пакет.Контрагент = Объект.ФирмаКомитент.Код;
	Пакет.ТипОтчета = "Комитенту";
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.ОтчетРеализатораМеждуФирмами.ПечатьОтчетКомитентуОПродажах(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОтчетРеализатораСостав.Сумма) КАК Сумма,
	|	СУММА(ОтчетРеализатораСостав.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ОтчетРеализатораСостав.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(ОтчетРеализатораСостав.СтавкаНДС.Ставка,0) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ОтчетРеализатораСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры
	|ИЗ
	|	Документ.ОтчетРеализатораМеждуФирмами.Состав КАК ОтчетРеализатораСостав
	|ГДЕ
	|	ОтчетРеализатораСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетРеализатораСостав.СтавкаНДС.Ставка,
	|	ВЫБОР
	|		КОГДА ОтчетРеализатораСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_ОтчетРеализатора_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС    = Выборка.СтавкаНДС;
		ПакетСостав.СуммаПродажи = Выборка.СуммаПродажи;
		ПакетСостав.Сумма        = Выборка.Сумма;
		ПакетСостав.СуммаНДС     = Выборка.СуммаНДС;
		ПакетСостав.ВидНоменклатуры  = Выборка.ВидНоменклатуры;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ОтчетРеализатора","fin","RS_ОтчетРеализатора");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьСчетФактура(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentObject_СчетФактура");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.ГрузоотправительТип = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Метаданные().Имя);
	Пакет.Грузоотправитель = ?(Объект.Грузоотправитель = Неопределено,"",Объект.Грузоотправитель.Код);
	Пакет.Грузополучатель = Объект.Грузополучатель.Код;
	Пакет.АдресГрузоотправителя = Объект.АдресГрузоотправителя;
	Пакет.АдресГрузополучателя = Объект.АдресГрузополучателя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.ДокОснование = ?(Объект.ДокОснование = Неопределено,"",Строка(Объект.ДокОснование.УникальныйИдентификатор()));
	Пакет.ДокОснованиеТип = ?(Объект.ДокОснование = Неопределено,"",Объект.ДокОснование.Метаданные().Имя);
	Пакет.СуммаИтого = Объект.СуммаИтого;
	Пакет.СуммаНДСИтого = Объект.СуммаНДСИтого;
	
	
	МассивОбъектов = новый Массив();
	МассивОбъектов.Добавить(Объект.ссылка);
	ОбъектыПечати=новый СписокЗначений;
	ПечФорма = Документы.СчетФактура.ПечатьСЧетФактура(МассивОбъектов,ОбъектыПечати);
	Пакет.ПечатнаяФорма = Новый ХранилищеЗначения(ПечФорма, Новый СжатиеДанных(6));
	
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СчетФактураСостав.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(СчетФактураСостав.Сумма) КАК Сумма,
	|	СУММА(СчетФактураСостав.СуммаНДС) КАК СуммаНДС,
	|	СУММА(СчетФактураСостав.Количество) КАК Себестоимость,
	|	ВЫБОР
	|		КОГДА СчетФактураСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ КАК ВидНоменклатуры
	|ИЗ
	|	Документ.СчетФактура.Состав КАК СчетФактураСостав
	|ГДЕ
	|	СчетФактураСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураСостав.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА СчетФактураСостав.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Продукция)
	|			ТОГДА ""п""
	|		ИНАЧЕ ""т""
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипСостав = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "DocumentTabularSectionRow_СчетФактура_Состав");
	Пока Выборка.Следующий() Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Себестоимость = Выборка.Себестоимость;
		ПакетСостав.ВидНоменклатуры = Выборка.ВидНоменклатуры;
		ПакетСостав.СтавкаНДС = Выборка.СтавкаНДС.Ставка;
		ПакетСостав.Сумма = Выборка.Сумма;
		ПакетСостав.СуммаНДС = Выборка.СуммаНДС;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_СчетФактура","fin","RS_СчетФактура");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции


Функция ОтправитьУдалениеОбъекта(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/td60/RS", "УдалениеОбъекта");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.Тип = ПривестиТип(Объект.Ссылка.Метаданные().Имя,Объект.Ссылка);
	RibMessages = ОбменДаннымиRIBСервер.УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"УдалениеОбъекта","fin","RS_УдалениеОбъекта");
	Результат = ОтправитьСообщение(RibMessages,Прокси,"RibMessages");
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ПривестиТип(Тип,Ссылка)
	Если Тип = "РасходнаяНакладная" Тогда
		Если Ссылка.Возврат Тогда
			Тип = "ВозвратнаяНакладная";
		КонецЕсли;	
	ИначеЕсли Тип = "ВозвратнаяНакладнаяОтПокупателя" Тогда
		Тип = "ВозвратнаяНакладная";
	КонецЕсли;	
	Возврат Тип;
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
//////////////////////процедуры получения данных из Финансов///////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

Процедура ЗаписатьКонтактнуюИнформацию(ТабЧасть,Тип,Вид,Значение)
	
	СтрокаТЧ = ТабЧасть.Найти(Вид,"Вид");
	Если  СтрокаТЧ = неопределено Тогда
		СтрокаТЧ = ТабЧасть.Добавить();
		СтрокаТЧ.Тип = Тип;
		СтрокаТЧ.Вид = Вид;
	КонецЕсли;	
	СтрокаТЧ.Представление = Значение;
	
КонецПроцедуры	

Процедура ЗаписатьОтветственноеЛицо(Нз,ОтветственноеЛицо)
	спрФизЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(ОтветственноеЛицо));
	Если НЕ ЗначениеЗаполнено(спрФизЛицо) Тогда
		Возврат;
	КонецЕсли;	
	нз.Прочитать();
	Если нз.Количество()>0 Тогда
		нз[0].ФизическоеЛицо = спрФизЛицо;
	Иначе
		Запись = нз.Добавить();
		Запись.Период = ТекущаяДата();
		Запись.Организация = нз.Отбор.Организация.Значение;
		Запись.ТипОтветственногоЛица = нз.Отбор.ТипОтветственногоЛица.Значение;
		Запись.ФизическоеЛицо = спрФизЛицо;
	КонецЕсли;	
	нз.Записать();
КонецПроцедуры	

Функция Финансы_Организации(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Справочники.Организации.СоздатьЭлемент();
			Ссылка = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Код = XDTO.Code;
		Объект.Наименование = XDTO.Description;
		Объект.ИНН = XDTO.ИНН;
		Объект.КПП = XDTO.КПП;
		Объект.КодПоОКПО = XDTO.КодПоОКПО;
		Объект.Префикс = XDTO.Префикс; 
		Объект.ПолноеНаименование = XDTO.ПолноеНаименование;
		//popn+
		//Объект.ОсновнойБанковскийСчет = XDTO.ОсновнойБанковскийСчет;
		Объект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ОсновнойБанковскийСчет));;
		//popn-
		//запись контактной информации
		прчТип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Если ЗначениеЗаполнено(XDTO.ЮридическийАдрес) Тогда
			спрВид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			ЗаписатьКонтактнуюИнформацию(Объект.КонтактнаяИнформация,прчТип,спрВид,XDTO.ЮридическийАдрес);
		КонецЕсли;	
		Если ЗначениеЗаполнено(XDTO.ФактическийАдрес) Тогда
			спрВид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			ЗаписатьКонтактнуюИнформацию(Объект.КонтактнаяИнформация,прчТип,спрВид,XDTO.ФактическийАдрес);
		КонецЕсли;
		Если ЗначениеЗаполнено(XDTO.ПочтовыйАдрес) Тогда
			спрВид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
			ЗаписатьКонтактнуюИнформацию(Объект.КонтактнаяИнформация,прчТип,спрВид,XDTO.ПочтовыйАдрес);
		КонецЕсли;
		прчТипТелефон = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если ЗначениеЗаполнено(XDTO.Телефон) Тогда
			спрВид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			ЗаписатьКонтактнуюИнформацию(Объект.КонтактнаяИнформация,прчТипТелефон,спрВид,XDTO.Телефон);
		КонецЕсли;
		//Котлячкова++ 07,10,13
		Объект.ЮрФизЛицо=?(XDTO.ЮрФизЛицо="Юр. лицо",Перечисления.ТипыКонтрагентов.ЮрЛицо,Перечисления.ТипыКонтрагентов.ФизЛицо);
		//Котлячкова--
		Объект.Записать();
		//запишем ответственных лиц организации
		менТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц;
		нзОтветственныеЛица = РегистрыСведений.ОтветственныеЛица.СоздатьНаборЗаписей();
		нзОтветственныеЛица.Отбор.Организация.Установить(Объект.Ссылка);
		Если ЗначениеЗаполнено(XDTO.Руководитель) Тогда 
			нзОтветственныеЛица.Отбор.ТипОтветственногоЛица.Установить(менТипОтветственногоЛица.Руководитель);
			ЗаписатьОтветственноеЛицо(нзОтветственныеЛица,XDTO.Руководитель);
		КонецЕсли;	
		Если ЗначениеЗаполнено(XDTO.ГлавныйБухгалтер) Тогда 
			нзОтветственныеЛица.Отбор.ТипОтветственногоЛица.Установить(менТипОтветственногоЛица.ГлавныйБухгалтер);
			ЗаписатьОтветственноеЛицо(нзОтветственныеЛица,XDTO.ГлавныйБухгалтер);
		КонецЕсли;	
		Если ЗначениеЗаполнено(XDTO.Кассир) Тогда 
			нзОтветственныеЛица.Отбор.ТипОтветственногоЛица.Установить(менТипОтветственногоЛица.Кассир);
			ЗаписатьОтветственноеЛицо(нзОтветственныеЛица,XDTO.Кассир);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_СтатьиДДС(Package) Экспорт
	Результат = Истина;
	Возврат Результат; 
КонецФункции

Функция Финансы_БанковскиеСчета(Package) Экспорт
	Результат = Истина;
	Возврат Результат;
КонецФункции

Функция Финансы_КассыФирмы(Package) Экспорт
	Результат = Истина;
	Возврат Результат;
КонецФункции

Функция Финансы_Контрагенты(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.Контрагенты.НайтиПоКоду(XDTO.Code);
		Если Ссылка.Пустая() Тогда
			Если XDTO.IsFolder Тогда
				Объект = Справочники.Контрагенты.СоздатьГруппу();
				Объект.ЭтоПодразделение = XDTO.ЭтоПодразделение;
			Иначе	
				Объект = Справочники.Контрагенты.СоздатьЭлемент();
			КонецЕсли;	
		Иначе	
			Объект = Ссылка.ПолучитьОбъект();
			Если XDTO.IsFolder Тогда
				Объект.ЭтоПодразделение = XDTO.ЭтоПодразделение;
			КонецЕсли;	
		КонецЕсли;
		Если XDTO.Parent = "" Тогда
			Объект.Родитель = Справочники.Контрагенты.ПустаяСсылка();
		Иначе	
			Родитель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Parent);
			Если НЕ Родитель.ЭтоГруппа Тогда
				Объект = Родитель.ПолучитьОбъект();
				Объект.Код = XDTO.Code;
				Объект.Наименование = XDTO.Description;
				Объект.Записать();
				РодительОбъект = Справочники.Контрагенты.СоздатьГруппу();
				РодительОбъект.Код = XDTO.Parent;
				РодительОбъект.Наименование = XDTO.Description;
				РодительОбъект.ЭтоПодразделение = Истина;
				РодительОбъект.Записать();
				Родитель = РодительОбъект.Ссылка;
			КонецЕсли;	
			Объект.Родитель = Родитель;
		КонецЕсли;	
		Если XDTO.IsFolder Тогда
			Объект.ЭтоПодразделение = XDTO.ЭтоПодразделение;
		КонецЕсли;	
		
		Объект.Код = XDTO.Code;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Если НЕ XDTO.IsFolder Тогда
			Объект.ИНН = XDTO.ИНН;
			Объект.КПП = XDTO.КПП;
			Объект.КодПоОКПО = XDTO.КодПоОКПО;
			Объект.ДоговорПоУмолчанию = XDTO.ДоговорПоУмолчанию;
			Объект.ОсновнойБанковскийСчет = XDTO.ОсновнойБанковскийСчет;
			Объект.Покупатель = XDTO.Покупатель;
			Объект.Поставщик = XDTO.Поставщик;
			Объект.ПолноеНаименование = XDTO.ПолноеНаименование;
			Объект.НеФормироватьСчетаФактурыАвтоматически = XDTO.НеФормироватьСчетаФактурыАвтоматически;
			Объект.Статус = XDTO.Активен;  //++МининНА 2014-11-14	Наряд № 000133009
			//{КотлячковаЕВ 2014-06-19 03:36:32 Наряд № 000119141
			Если XDTO.Установлено("ПротоколРЦ") Тогда
				Объект.ПротоколРЦ = XDTO.ПротоколРЦ;
			КонецЕсли;
			//КотлячковаЕВ 2014-06-19 03:36:32 }
		КонецЕсли;	
		//{БредовЮГ 2014-08-19 Адрес e-mail
		Если ЗначениеЗаполнено(XDTO.WWW) Тогда
			ВидАдреса=Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			КИ=Объект.КонтактнаяИнформация.Найти(ВидАдреса, "Вид");
			Если КИ = Неопределено Тогда
				НоваяСтрока=Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Вид=ВидАдреса;
				НоваяСтрока.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяСтрока.Представление=XDTO.WWW;
			Иначе
				КИ.Представление= XDTO.WWW;
			КонецЕсли;	
		КонецЕсли;
		//БредовЮГ 2014-08-19 Адрес e-mail}
		
		Объект.Записать();	
		//
		////serg
		//	ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;	
		//	СтрокаТЧ = Объект.КонтактнаяИнформация.Найти(ВидАдреса,"Вид");
		//	Если СтрокаТЧ = Неопределено Тогда
		//		СтрокаТЧ = Объект.КонтактнаяИнформация.Добавить();
		//	КонецЕсли;
		//	СтрокаТЧ.Вид = ВидАдреса;
		//	СтрокаТЧ.Представление = XDTO.ЮридическийАдрес;
		//	//---------------------------------------------------------------------
		//	ВидАдреса = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;	
		//	СтрокаТЧ = Объект.КонтактнаяИнформация.Найти(ВидАдреса,"Вид");
		//	Если СтрокаТЧ = Неопределено Тогда
		//		СтрокаТЧ = Объект.КонтактнаяИнформация.Добавить();
		//	КонецЕсли;
		//	СтрокаТЧ.Вид = ВидАдреса;
		//	СтрокаТЧ.Представление = XDTO.ФактическийАдрес;
		//	//----------------------------------------------------------------------
		//	ВидАдреса = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		//	СтрокаТЧ  = Объект.КонтактнаяИнформация.Найти(ВидАдреса,"Вид");
		//	Если СтрокаТЧ = Неопределено Тогда
		//		СтрокаТЧ = Объект.КонтактнаяИнформация.Добавить();
		//	КонецЕсли;
		//	СтрокаТЧ.Вид = ВидАдреса;
		//	СтрокаТЧ.Представление = XDTO.Телефон;
		//	
		//	
		// //serg
		// 
		// 
		//
		//
		////КотлячковаЕВ++
		//ШиловМВ 17.04.14
		Если ЗначениеЗаполнено(XDTO.GLN) Тогда
			Если XDTO.ОператорEDI="ДК" Тогда
				ОператорEDI=Справочники.EDIПровайдеры.ДК;
			ИначеЕсли XDTO.ОператорEDI="Корус" Тогда
				ОператорEDI=Справочники.EDIПровайдеры.Корус;
			ИначеЕсли XDTO.ОператорEDI="Exite" Тогда
				ОператорEDI=Справочники.EDIПровайдеры.Exite;
			КонецЕсли;
			//	Объект.Записать();
			//	
			//	//Запрос = Новый Запрос;
			//	//Запрос.Текст = 
			//	//"ВЫБРАТЬ
			//	//|	EDIПровайдерыПоставщиков.EDIПровайдер,
			//	//|	EDIПровайдерыПоставщиков.GLN
			//	//|ИЗ
			//	//|	РегистрСведений.EDIПровайдерыПоставщиков КАК EDIПровайдерыПоставщиков
			//	//|ГДЕ
			//	//|	EDIПровайдерыПоставщиков.Контрагент = &Контрагент
			//	//|	И EDIПровайдерыПоставщиков.EDIПровайдер <> &EDIПровайдер
			//	//|	И EDIПровайдерыПоставщиков.Основной";
			//	//
			//	//Запрос.УстановитьПараметр("EDIПровайдер",ОператорEDI);
			//	//Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
			//	
			//	//Результат = Запрос.Выполнить();
			//	//	Если Результат.Пустой() Тогда
			//	//		
			ЗаписьСтарая = РегистрыСведений.EDIПровайдерыПоставщиков.СоздатьМенеджерЗаписи();
			ЗаписьСтарая.Контрагент = Объект.Ссылка;
			ЗаписьСтарая.EDIПровайдер = ОператорEDI;
			ЗаписьСтарая.GLN = XDTO.GLN;
			ЗаписьСтарая.Основной = Истина;
			//	ЗаписьСтарая.СпособСинхронизацииТоваров = Перечисления.СпособСинхронизацииТоваров[XDTO.СпособСинхронизацииТоваров];
			ЗаписьСтарая.ORDERS = XDTO.БезЗаказа;
			ЗаписьСтарая.DESADV = XDTO.DESADV;
			ЗаписьСтарая.RECADV = XDTO.RECADV;
			ЗаписьСтарая.RETANN = XDTO.RETANN;
			ЗаписьСтарая.Записать();
			//	//		
			//	//	Иначе
			//	//		
			//	//		
			//	//		ЗаписьСтарая = РегистрыСведений.EDIПровайдерыПоставщиков.СоздатьМенеджерЗаписи();
			//	//		ЗаписьСтарая.Контрагент = Объект.Ссылка;
			//	//		ЗаписьСтарая.EDIПровайдер = XDTO.ОператорEDI;
			//	//		ЗаписьСтарая.GLN = XDTO.GLN;
			//	//		ЗаписьСтарая.Основной = Истина;
			//	//		//ЗаписьСтарая.СпособСинхронизацииТоваров = Перечисления.СпособСинхронизацииТоваров[XDTO.СпособСинхронизацииТоваров];
			//	//		ЗаписьСтарая.ORDERS = XDTO.БезЗаказа;
			//	//		ЗаписьСтарая.DESADV = XDTO.DESADV;
			//	//		ЗаписьСтарая.RECADV = XDTO.RECADV;
			//	//		ЗаписьСтарая.RETANN = XDTO.RETANN;
			//	//		ЗаписьСтарая.Записать();
			//	//		
			//	//	КонецЕсли;
			
		КонецЕсли;	
		////ШиловМВ 17.04.14
		////
		
		//dps+ 000128380
		Если ЗначениеЗаполнено(XDTO.ТипыДоговора) Тогда 
			Для Каждого Строка Из XDTO.ТипыДоговора Цикл
				Запись = РегистрыСведений.Izh_ТипыДоговоровПоУмолчанию.СоздатьМенеджерЗаписи();
				Запись.Период = Строка.Дата;
				Запись.Контрагент = Объект.Ссылка;
				Запись.Фирма = Справочники.Организации.НайтиПоКоду(Строка.Фирма);
				Запись.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.СЕ);
				Если Строка.ТипДоговора = "Купля-продажа" Тогда 
					Запись.ТипДоговора = Перечисления.ТипыДоговоров.КупляПродажа;
				ИначеЕсли Строка.ТипДоговора = "Комиссия" Тогда 
					Запись.ТипДоговора = Перечисления.ТипыДоговоров.Комиссия;
				Иначе	
					Запись.ТипДоговора = Перечисления.ТипыДоговоров.ОтветственноеХранение;
				КонецЕсли;
				Запись.Записать();
			КонецЦикла;
		КонецЕсли;
		//dps-
			
		//Объект.Местный = XDTO.Местный;
		//Объект.ДатаДопСоглашенияАПП = XDTO.ДатаДопСогАПП;
		//Объект.Статус = XDTO.Активен;
		//Объект.Производитель = XDTO.Производитель;
		//Объект.ВремяЗаказа = XDTO.ВремяЗаказа;
		//Объект.МинКолДнейДоставки = XDTO.МинКолДнейДоставки;
		//Объект.ЗаказВРазрезеПротоколов = XDTO.ЗаказВРазрезеПротоколов;
		//Объект.ИзменяетИнформациюОТоваре = XDTO.ИнфоОТоваре;
		//Объект.БезЗаказа = XDTO.БезЗаказа;
		//Объект.Производитель = XDTO.Производитель;
		
		//Котлячкова--
		
		//КонецЕсли;	
		//Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_ФизическиеЛица(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Если XDTO.IsFolder Тогда
				Объект = Справочники.ФизическиеЛица.СоздатьГруппу();
			Иначе	
				Объект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			КонецЕсли;	
			Ссылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Код = XDTO.Code;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Родитель = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Parent));
		Если ЗначениеЗаполнено(XDTO.Пол) Тогда
			Объект.Пол = Перечисления.ПолФизическихЛиц[XDTO.Пол];
		КонецЕсли;	
		Объект.Записать();
		////Котлячкова++ 03,10,2013
		//МенеджерЗаписи = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.Период = ТекущаяДата();
		//МенеджерЗаписи.ВидДокумента = Справочники.ДокументыУдостоверяющиеЛичность.ПаспортРФ;
		//МенеджерЗаписи.Физлицо =Объект.Ссылка;
		//МенеджерЗаписи.Серия = XDTO.ПаспортныеДанныеСерия;
		//МенеджерЗаписи.Номер = XDTO.ПаспортныеДанныеНомер;
		//МенеджерЗаписи.КемВыдан = XDTO.ПаспортныеДанныеКемВыдан;
		//МенеджерЗаписи.КодПодразделения =XDTO.ПаспортныеДанныеКодПодразделения;
		//МенеджерЗаписи.ДатаВыдачи=XDTO.ПаспортныеДанныеДатаВыдачи;
		//МенеджерЗаписи.Записать();
		//
		////Котлячкова--	//ШиловМВ 11.04.13 - отдельная выгрузка пасп.данных
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//popn+
Функция Финансы_ПаспортныеДанныеФизЛиц(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			Набор = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
			Физлицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Физлицо));
			Если Физлицо.Пустая() Тогда
				Package = "Не найдено физ. лицо с ГУИД "+Строка(Строка.Физлицо);
				Возврат Ложь;
			КонецЕсли;	//ШиловМВ 11.04.13 - возможна запись ссылок несуществующих объектов с последующим созданием объекта с тем же ID ссылки!!!
			Набор.Отбор.Физлицо.Установить(Физлицо);
			Запись = Набор.Добавить();
			Запись.Физлицо           = Физлицо;//ШиловМВ 11.04.13 - Строка.Физлицо???
			Запись.Период            = Строка.Period;
			Запись.Серия             = Строка.Серия;
			Запись.Номер             = Строка.Номер;
			Запись.КемВыдан          = Строка.КемВыдан;
			Запись.ДатаВыдачи        = Строка.ДатаВыдачи;
			Запись.КодПодразделения  = Строка.КодПодразделения;
			Запись.ВидДокумента      = Справочники.ДокументыУдостоверяющиеЛичность.НайтиПоНаименованию(Строка.ВидДокумента);
			Набор.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//popn-

Функция Финансы_КредитныеКарты(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.КредитныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.КредитныеКарты.СоздатьЭлемент();
			Ссылка = Справочники.КредитныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Код = XDTO.Code;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_ВидыСписания(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.ВидыСписания.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.ВидыСписания.СоздатьЭлемент();
			Ссылка = Справочники.ВидыСписания.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = XDTO.Description;
		Объект.Код = XDTO.Code;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.ВидКоррекции = Перечисления.Izh_ВидыКоррекций.Получить(Число(XDTO.ТипСписания));
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_УчетнаяПолитикаНалоговыйУчет(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			Набор = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
			Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Организация));
			Набор.Отбор.Организация.Установить(Организация);
			Запись = Набор.Добавить();
			Запись.Период = Строка.Period;
			Запись.Организация = Организация;
			Запись.СхемаНалогообложения = Перечисления.СхемыНалогообложения[Строка.СхемаНалогообложения];
			Запись.ВыпускПродукцииПоПлановымЦенам = Ложь;
			Запись.АвтоматическоеФормированиеСчетаФактуры = Строка.АвтоматическоеФормированиеСчетаФактуры;
			//{БредовЮГ 2015-02-15 Доработки по НДС
			Запись.Izh_ПлательщикНДС = Строка.ПлательщикНДС;
			//БредовЮГ 2015-02-15 Доработки по НДС}
			Набор.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_ДополнительныеРеквизитыОрганизаций_Стар(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыОрганизаций.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Если XDTO.IsFolder Тогда
				Объект = ПланыВидовХарактеристик.ДополнительныеРеквизитыОрганизаций.СоздатьГруппу();
			Иначе	
				Объект = ПланыВидовХарактеристик.ДополнительныеРеквизитыОрганизаций.СоздатьЭлемент();
			КонецЕсли;	
			Ссылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыОрганизаций.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыОрганизаций.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Parent));
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Если НЕ XDTO.IsFolder Тогда
			Если XDTO.ValueType = "Дата" Тогда
				Объект.ТипЗначения = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
			Иначе
				Объект.ТипЗначения = Новый ОписаниеТипов(XDTO.ValueType); 
			КонецЕсли;	
		КонецЕсли;	
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_ДополнительныеРеквизитыКонтрагентов(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(Строка.Контрагент);
			КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
			Если КонтрагентОбъект <> Неопределено Тогда
				Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыКонтрагентов.НайтиПоКоду(Строка.КодСвойства);
				Если Свойство.Пустая() Тогда
					Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыКонтрагентов.СоздатьЭлемент();
					Свойство.Код          = Строка.КодСвойства;
				Иначе
					Свойство = Свойство.ПолучитьОбъект();
				КонецЕсли;
				Свойство.Наименование = Строка.НаименованиеСвойства;
				Попытка 
					Свойство.ТипЗначения = Новый ОписаниеТипов(Строка.ТипЗначенияСвойства);
				Исключение
					Свойство.ТипЗначения = Новый ОписаниеТипов("Строка");
				КонецПопытки;
				Свойство.Записать();
				//++МининНА 2014-08-12 Наряд № 000121740
				Результат=Izh_УправлениеСвойствамиОбъектов.ЗаполнитьДополнительныеРеквизиты(КонтрагентСсылка,Строка.ЗначениеСвойства,Свойство.Ссылка);
				//СтрокаТаблицы = КонтрагентОбъект.ДополнительныеРеквизиты.Найти(Свойство.Ссылка,"Свойство");
				//Если СтрокаТаблицы = Неопределено Тогда
				//	СтрокаТаблицы = КонтрагентОбъект.ДополнительныеРеквизиты.Добавить();
				//КонецЕсли;
				//СтрокаТаблицы.Свойство = Свойство.Ссылка;
				//СтрокаТаблицы.Значение = Строка.ЗначениеСвойства;
				//--МининНА 2014-08-12 Наряд № 000121740
			Иначе
				Package = "Не найден контрагент с ГУИД="+Строка.Контрагент;
				Результат = ЛОЖЬ;
			КонецЕсли;
			КонтрагентОбъект.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Финансы_ДополнительныеРеквизитыОрганизаций(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			ОрганизацияСсылка = Справочники.Организации.НайтиПоКоду(Строка.Организация);
			ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
			Если ОрганизацияОбъект <> Неопределено Тогда
				Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыОрганизаций.НайтиПоКоду(Строка.КодСвойства);
				Если Свойство.Пустая() Тогда
					Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыОрганизаций.СоздатьЭлемент();
					Свойство.Код          = Строка.КодСвойства;
				Иначе
					Свойство = Свойство.ПолучитьОбъект();
				КонецЕсли;
				Свойство.Наименование = Строка.НаименованиеСвойства;
				Попытка 
					Свойство.ТипЗначения = Новый ОписаниеТипов(Строка.ТипЗначенияСвойства);
				Исключение
					Свойство.ТипЗначения = Новый ОписаниеТипов("Строка");
				КонецПопытки;
				Свойство.Записать();
				СтрокаТаблицы = ОрганизацияОбъект.ДополнительныеРеквизиты.Найти(Свойство.Ссылка,"Свойство");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ОрганизацияОбъект.ДополнительныеРеквизиты.Добавить();
				КонецЕсли;
				СтрокаТаблицы.Свойство = Свойство.Ссылка;
				СтрокаТаблицы.Значение = Строка.ЗначениеСвойства;
			Иначе
				Package = "Не найдена организация с кодом="+Строка.Контрагент;
				Результат = ЛОЖЬ;
			КонецЕсли;
			ОрганизацияОбъект.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция Финансы_ДополнительныеРеквизитыСтруктурныхЕдиниц(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			СтруктурнаяЕдиницаСсылка = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.СтруктурнаяЕдиница);
			СтруктурнаяЕдиницаОбъект = СтруктурнаяЕдиницаСсылка.ПолучитьОбъект();
			Если СтруктурнаяЕдиницаОбъект <> Неопределено Тогда
				Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыСтруктурныхЕдиниц.НайтиПоКоду(Строка.КодСвойства);
				Если Свойство.Пустая() Тогда
					Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыСтруктурныхЕдиниц.СоздатьЭлемент();
					Свойство.Код          = Строка.КодСвойства;
				Иначе
					Свойство = Свойство.ПолучитьОбъект();
				КонецЕсли;
				Свойство.Наименование = Строка.НаименованиеСвойства;
				Попытка 
					Свойство.ТипЗначения = Новый ОписаниеТипов(Строка.ТипЗначенияСвойства);
				Исключение
					Свойство.ТипЗначения = Новый ОписаниеТипов("Строка");
				КонецПопытки;
				Свойство.Записать();
				//{КотлячковаЕВ 2014-06-18 09:49:13 Наряд № 000118831
				Результат=Izh_УправлениеСвойствамиОбъектов.ЗаполнитьДополнительныеРеквизиты(СтруктурнаяЕдиницаСсылка,Строка.ЗначениеСвойства,Свойство.Ссылка);
			Иначе                    
				Package = "Не найдена структурная единица с кодом="+Строка.Контрагент;
				Результат = ЛОЖЬ;
			КонецЕсли;
			
			
			// старый код:
			//{	
			//	СтрокаТаблицы = СтруктурнаяЕдиницаОбъект.ДополнительныеРеквизиты.Найти(Свойство.Ссылка,"Свойство");
			//	Если СтрокаТаблицы = Неопределено Тогда
			//		СтрокаТаблицы = СтруктурнаяЕдиницаОбъект.ДополнительныеРеквизиты.Добавить();
			//	КонецЕсли;
			//	СтрокаТаблицы.Свойство = Свойство.Ссылка;
			//	//Шилов М.В. 21.02.14
			//	Если Справочники.ТипВсеСсылки().СодержитТип(Свойство.ТипЗначения.Типы()[0]) Тогда
			//		ТипСпр=Метаданные.НайтиПоТипу(Свойство.ТипЗначения.Типы()[0]).Имя;
			//		Если ТипСпр="ЗначенияСвойствОбъектов" Тогда
			//			СтрокаТаблицы.Значение = Справочники[ТипСпр].НайтиПоКоду(Строка.ЗначениеСвойства,,,Свойство.Ссылка);
			//		Иначе
			//			СтрокаТаблицы.Значение = Справочники[ТипСпр].НайтиПоКоду(Строка.ЗначениеСвойства);
			//		КонецЕсли;
			//		//Шилов М.В. 21.02.14
			//	Иначе
			//		СтрокаТаблицы.Значение = Строка.ЗначениеСвойства;
			//	КонецЕсли;
			//Иначе
			//	Package = "Не найдена структурная единица с кодом="+Строка.Контрагент;
			//	Результат = ЛОЖЬ;
			//КонецЕсли;
			//СтруктурнаяЕдиницаОбъект.Записать();   
			//}
			//КотлячковаЕВ 2014-06-18 09:49:13 }
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция Финансы_ЗначенияСвойствОбъектов(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			Ссылка = Справочники[Строка.ТипОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Объект));
			Объект = Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			Свойство = ПланыВидовХарактеристик[Строка.ТипСвойства].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Свойство));
			СтрокаТаблицы = Объект.ДополнительныеРеквизиты.Найти(Свойство,"Свойство");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = Объект.ДополнительныеРеквизиты.Добавить();
				СтрокаТаблицы.Свойство = Свойство;
			КонецЕсли;	
			СтрокаТаблицы.Значение = Свойство.ТипЗначения.ПривестиЗначение(Строка.Значение);
			Объект.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//{КотлячковаЕВ 2014-06-17 04:28:56 Наряд №
Функция Финансы_ЗначенияСвойств(Package) Экспорт
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Ссылка = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			Ссылка = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = XDTO.Description;
		Объект.Код = XDTO.Code;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		ПВХ=ПланыВидовХарактеристик[XDTO.TypeOwner].НайтиПоКоду(XDTO.Owner);
		Если  ПВХ.Пустая() Тогда
			ПВХ = ПланыВидовХарактеристик[XDTO.TypeOwner].СоздатьЭлемент();
			ПВХ.Код          = XDTO.Owner;
			ПВХ.УстановитьСсылкуНового(Ссылка);
			ПВХ.ТипЗначения = Новый ОписаниеТипов(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
			ПВХ.Записать();
		КонецЕсли;
		Объект.Владелец = ПВХ; 
		Объект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции
//КотлячковаЕВ 2014-06-17 04:28:56 }

Функция ПолучитьИнформациюОбОшибке(Знач ИнформацияОбОшибке,ИмяСобытия = "WebService") Экспорт
	ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Если ПараметрыСеанса.Отладка Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	КонецЕсли;
	Возврат ОписаниеОшибки;
	//Если ИнформацияОбОшибке = Неопределено Тогда
	//	Возврат("");
	//ИначеЕсли НЕ ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
	//	Возврат("Неверный тип параметра ИнформацияОбОшибке в функции ПолучитьИнформациюОбОшибке!");
	//КонецЕсли;
	//ОписаниеИнформацииОбОшибке = "";
	//Сдвиг = "";
	//Пока Не ИнформацияОбОшибке = Неопределено Цикл
	//	ОписаниеИнформацииОбОшибке = ОписаниеИнформацииОбОшибке + "
	//	|" + Сдвиг + ?(ИнформацияОбОшибке.НомерСтроки=0,"","{"  +  ИнформацияОбОшибке.ИмяМодуля + "(" + ИнформацияОбОшибке.НомерСтроки + ")}: ") + ИнформацияОбОшибке.Описание;
	//	ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	//	Сдвиг = Сдвиг + "    ";
	//КонецЦикла;
	//Возврат(СокрЛП(ОписаниеИнформацииОбОшибке));
КонецФункции

Функция ПолучитьОбъектXDTO(Текст) Экспорт
	//Если ПараметрыСеанса.Отладка Тогда
	//	ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Информация,,,Текст);
	//КонецЕсли;	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Текст);
	ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипДанныхXML = Неопределено Тогда
		XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Иначе	
		ПространствоИмен = ТипДанныхXML.URIПространстваИмен;
		ИмяТипа = ТипДанныхXML.ИмяТипа;
		Если НЕ ЗначениеЗаполнено(ПространствоИмен) Тогда
			ПространствоИмен = Метаданные.ПакетыXDTO[ИмяТипа].ПространствоИмен;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИмяТипа) Тогда
			ИмяТипа = ПространствоИмен;
			Пока Найти(ИмяТипа,"/")<>0 Цикл
				ИмяТипа = Сред(ИмяТипа,Найти(ИмяТипа,"/")+1);
			КонецЦикла;	
		КонецЕсли;
		Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
		Если Пакет.КорневыеСвойства.Количество() = 0 Тогда
			Тип = Пакет.Получить(ИмяТипа);
		Иначе	
			Тип = Пакет.КорневыеСвойства.Получить(ИмяТипа).Тип;
		КонецЕсли;	
		XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип);
	КонецЕсли;	
	Возврат XDTO;
КонецФункции

//////////////////////процедуры получения данных из Финансов///////////////////////////
///////////////////////////////////////////////////////////////////////////////////////


