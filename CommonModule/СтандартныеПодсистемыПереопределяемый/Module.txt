// Неинтерактивное обновление данных ИБ при смене версии библиотеки
// Обязательная "точка входа" обновления ИБ в библиотеке.
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления("СтандартныеПодсистемы", ВерсияБиблиотеки(), 
		ОбработчикиОбновления());
	
КонецПроцедуры

// Возвращает номер версии Библиотеки стандартных подсистем.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.0.6.8";
	
КонецФункции

// Возвращает список процедур-обработчиков обновления библиотеки
//
// Возвращаемое значение:
//   Структура - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
Функция ОбработчикиОбновления()
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Подключаются процедуры-обработчики обновления библиотеки
	
	// УправлениеДоступом
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьПоставляемыеПрофилиИГруппыДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьТаблицыРолейПрофилейГруппДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьЗависимостиПравДоступа";
	// Конец УправлениеДоступом
	
	// КонтактнаяИнформация
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.1";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейПереопределяемый.КонтактнаяИнформацияОбновлениеИБ";
	
	
	// ПолучениеФайловИзИнтернета
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.1";
	Обработчик.Процедура = "ПолучениеФайловИзИнтернета.ОбновлениеХранимыхНастроекПрокси";
	// Конец ПолучениеФайловИзИнтернета
	
	
	
	// Валюты
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.9";
	Обработчик.Процедура = "РаботаСКурсамиВалют.ОбновитьФорматХраненияПрописиНаРусскомЯзыке";
	// Конец Валюты
	
	
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает структуру параметров, необходимых для инициализации
// конфигурации на клиенте.
// 
Функция ПараметрыРаботыКлиента() Экспорт
	
	Параметры = Новый Структура();
	
	// СтандартныеПодсистемы
	//Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления", 
	//	ОбновлениеИнформационнойБазы.ПроверитьНевозможностьОбновленияИнформационнойБазы());
	Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы", 
		ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы());
	Параметры.Вставить("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
	
	
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", ЭтоБазоваяВерсияКонфигурации());
	
	УстановитьПривилегированныйРежим(Истина);
	Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Метаданные.Синоним)+" / "+СокрЛП(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница));  //V
	УстановитьПривилегированныйРежим(Ложь);
	
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	// Конец СтандартныеПодсистемы
	
	// ЗавершениеРаботыПользователей
	Параметры.Вставить("ПараметрыБлокировкиСеансов", Новый ФиксированнаяСтруктура(СоединенияИБ.ПараметрыБлокировкиСеансов()));
	// Конец ЗавершениеРаботыПользователей
	
	// ОбновлениеКонфигурации
	//Параметры.Вставить("НастройкиОбновления", 
		//Новый ФиксированнаяСтруктура(ОбновлениеКонфигурации.ПолучитьНастройкиОбновления()));
	// Конец ОбновлениеКонфигурации
	
	// ПолучениеФайловИзИнтернета
	Параметры.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.ПолучитьНастройкуПроксиСервера());
	// Конец ПолучениеФайловИзИнтернета
	
	// РаботаСФайлами
	//Параметры.Вставить("ПерсональныеНастройкиРаботыСФайлами", 
		//Новый ФиксированнаяСтруктура(РаботаСФайлами.ПолучитьПерсональныеНастройкиРаботыСФайламиСервер()));
	 //Конец РаботаСФайлами
	
	// РегламентныеЗадания
	
	//popn+
	//Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
	//	Параметры.Вставить("ПараметрыОткрытияСеансаОбработкиРегламентныхЗаданий", 
	//		Новый ФиксированнаяСтруктура(РегламентныеЗаданияСервер.ПараметрыОткрытияСеансаОбработкиРегламентныхЗаданий(Истина)));
	//КонецЕсли;
	// Конец РегламентныеЗадания
	
	// Для установки параметров инициализации системы можно использовать шаблон:
	//
	// Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
	//
	
	//Возврат Новый ФиксированнаяСтруктура(Параметры);
	Возврат Параметры;
	
КонецФункции

// Возвращает признак, является ли конфигурация базовой.
//
// Пример реализации:
//  Если конфигурации выпускаются парами, то в имени базовой версии
//  может включаться дополнительное слово "Базовая". Тогда логика
//  определения базовой версии выглядит таким образом:
//
//	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт

	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;

КонецФункции
