///////////////////////////////////////////////////////////////////////////////////////
//////////////////////Общие процедуры обмена с RMS/////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьОбъектXDTO(Текст) Экспорт
	//Если ПараметрыСеанса.Отладка Тогда
	//	ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Информация,,,Текст);
	//КонецЕсли;	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Текст);
	ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипДанныхXML = Неопределено Тогда
		XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Иначе	
		ПространствоИмен = ТипДанныхXML.URIПространстваИмен;
		ИмяТипа = ТипДанныхXML.ИмяТипа;
		Если НЕ ЗначениеЗаполнено(ПространствоИмен) Тогда
			ПространствоИмен = Метаданные.ПакетыXDTO[ИмяТипа].ПространствоИмен;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИмяТипа) Тогда
			ИмяТипа = ПространствоИмен;
			Пока Найти(ИмяТипа,"/")<>0 Цикл
				ИмяТипа = Сред(ИмяТипа,Найти(ИмяТипа,"/")+1);
			КонецЦикла;	
		КонецЕсли;
		Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
		Если Пакет.КорневыеСвойства.Количество() = 0 Тогда
			Тип = Пакет.Получить(ИмяТипа);
		Иначе	
			Тип = Пакет.КорневыеСвойства.Получить(ИмяТипа).Тип;
		КонецЕсли;	
		XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип);
	КонецЕсли;	
	Возврат XDTO;
КонецФункции

Функция ПолучитьИнформациюОбОшибке(Знач ИнформацияОбОшибке,ИмяСобытия = "WebService") Экспорт
	ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Если ПараметрыСеанса.Отладка Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	КонецЕсли;
	Возврат ОписаниеОшибки;
	//Если ИнформацияОбОшибке = Неопределено Тогда
	//	Возврат("");
	//ИначеЕсли НЕ ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
	//	Возврат("Неверный тип параметра ИнформацияОбОшибке в функции ПолучитьИнформациюОбОшибке!");
	//КонецЕсли;
	//ОписаниеИнформацииОбОшибке = "";
	//Сдвиг = "";
	//Пока Не ИнформацияОбОшибке = Неопределено Цикл
	//	ОписаниеИнформацииОбОшибке = ОписаниеИнформацииОбОшибке + "
	//	|" + Сдвиг + ?(ИнформацияОбОшибке.НомерСтроки=0,"","{"  +  ИнформацияОбОшибке.ИмяМодуля + "(" + ИнформацияОбОшибке.НомерСтроки + ")}: ") + ИнформацияОбОшибке.Описание;
	//	ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	//	Сдвиг = Сдвиг + "    ";
	//КонецЦикла;
	//Возврат(СокрЛП(ОписаниеИнформацииОбОшибке));
КонецФункции

Функция ПолучитьДатуXDTO(XDTO) Экспорт
	Если XDTO = Неопределено Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	Если ТипЗнч(XDTO) = Тип("Дата") Тогда
		Возврат XDTO;
	КонецЕсли;
	Год = Формат(XDTO.year,"ЧГ=");
	Месяц = ДобавитьСлева(XDTO.month,2,0);
	День = ДобавитьСлева(XDTO.day,2,0);
	Час = ДобавитьСлева(XDTO.hour,2,0);
	Минута = ДобавитьСлева(XDTO.minute,2,0);
	Секунда = ДобавитьСлева(XDTO.second,2,0);
	
	Возврат Дата(Год+Месяц+День+Час+Минута+Секунда);
КонецФункции

Процедура ЗаписьАдресаСтруктурнойЕдиницы(XDTO,ТекущийОбъект) 
	Если XDTO.addr_type = "01" Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы;	
	ИначеЕсли XDTO.addr_type = "02" Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресСтруктурнойЕдиницы;	
	Иначе
		Возврат;
	КонецЕсли;	
	СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Найти(ВидАдреса,"Вид");
	Если СтрокаТЧ = Неопределено Тогда
		СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Добавить();
	КонецЕсли;
	СтрокаТЧ.Вид = ВидАдреса;
	СтрокаТЧ.Представление = XDTO.city+" "+XDTO.add_1;
	Если XDTO.Свойства().Получить("add_2") <> Неопределено Тогда
		СтрокаТЧ.Представление = СтрокаТЧ.Представление + " " + XDTO.add_2;
	КонецЕсли;
	Если XDTO.Свойства().Получить("add_3") <> Неопределено Тогда
		СтрокаТЧ.Представление = СтрокаТЧ.Представление+ " " + XDTO.add_3;
	КонецЕсли;
	Если ВидАдреса = Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы Тогда
		Если XDTO.Свойства().Получить("contact_email") <> Неопределено Тогда
			Вид = Справочники.ВидыКонтактнойИнформации.EmailСтруктурнойЕдиницы;	
			СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Найти(Вид,"Вид");
			Если СтрокаТЧ = Неопределено Тогда
				СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Добавить();
			КонецЕсли;
			СтрокаТЧ.Вид = Вид;
			СтрокаТЧ.Представление = XDTO.contact_email;
		КонецЕсли;	
		
		Если XDTO.Свойства().Получить("contact_phone") <> Неопределено Тогда
			Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы;	
			СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Найти(Вид,"Вид");
			Если СтрокаТЧ = Неопределено Тогда
				СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Добавить();
			КонецЕсли;
			СтрокаТЧ.Вид = Вид;
			СтрокаТЧ.Представление = XDTO.contact_phone;
		КонецЕсли;
		
		Если XDTO.Свойства().Получить("contact_fax") <> Неопределено Тогда
			Вид = Справочники.ВидыКонтактнойИнформации.ФаксСтруктурнойЕдиницы;	
			СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Найти(Вид,"Вид");
			Если СтрокаТЧ = Неопределено Тогда
				СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Добавить();
			КонецЕсли;
			СтрокаТЧ.Вид = Вид;
			СтрокаТЧ.Представление = XDTO.contact_fax;
		КонецЕсли;
		
		Если XDTO.Свойства().Получить("contact_name") <> Неопределено Тогда
			Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияСтруктурнойЕдиницы;	
			СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Найти(Вид,"Вид");
			Если СтрокаТЧ = Неопределено Тогда
				СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Добавить();
			КонецЕсли;
			СтрокаТЧ.Вид = Вид;
			СтрокаТЧ.Представление = XDTO.contact_name;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаписьАдресаКонтрагента(XDTO,ТекущийОбъект)
	Если XDTO.addr_type = "01" Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;	
	ИначеЕсли XDTO.addr_type = "02" Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;	
	Иначе
		Возврат;
	КонецЕсли;	
	СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Найти(ВидАдреса,"Вид");
	Если СтрокаТЧ = Неопределено Тогда
		СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Добавить();
	КонецЕсли;
	СтрокаТЧ.Вид = ВидАдреса;
	СтрокаТЧ.Представление = XDTO.add_1;
	Если XDTO.Свойства().Получить("add_2") <> Неопределено Тогда
		СтрокаТЧ.Представление = СтрокаТЧ.Представление + " " + XDTO.add_2;
	КонецЕсли;
	Если XDTO.Свойства().Получить("add_3") <> Неопределено Тогда
		СтрокаТЧ.Представление = СтрокаТЧ.Представление+ " " + XDTO.add_3;
	КонецЕсли;
	Если ВидАдреса = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
		Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;	
		СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Найти(Вид,"Вид");
		Если СтрокаТЧ = Неопределено Тогда
			СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Добавить();
		КонецЕсли;
		СтрокаТЧ.Вид = Вид;
		СтрокаТЧ.Представление = XDTO.contact_email;
		
		Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;	
		СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Найти(Вид,"Вид");
		Если СтрокаТЧ = Неопределено Тогда
			СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Добавить();
		КонецЕсли;
		СтрокаТЧ.Вид = Вид;
		СтрокаТЧ.Представление = XDTO.contact_phone;
		
		Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;	
		СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Найти(Вид,"Вид");
		Если СтрокаТЧ = Неопределено Тогда
			СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Добавить();
		КонецЕсли;
		СтрокаТЧ.Вид = Вид;
		СтрокаТЧ.Представление = XDTO.contact_fax;
		
		Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;	
		СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Найти(Вид,"Вид");
		Если СтрокаТЧ = Неопределено Тогда
			СтрокаТЧ = ТекущийОбъект.КонтактнаяИнформация.Добавить();
		КонецЕсли;
		СтрокаТЧ.Вид = Вид;
		СтрокаТЧ.Представление = XDTO.contact_name;
	КонецЕсли;	
КонецПроцедуры	

Функция ДобавитьСлева(Стр,КоличествоСимволов,Символ)
	Строка = Стр;
	Если СтрДлина(Строка)>=КоличествоСимволов Тогда
		Возврат Лев(Строка,КоличествоСимволов);
	КонецЕсли;	
	Пока СтрДлина(Строка) < КоличествоСимволов Цикл
		Строка = Строка(Символ) + Строка(Строка);
	КонецЦикла;	
	Возврат Строка;
КонецФункции	

Функция ДобавитьСправа(Стр,КоличествоСимволов,Символ)
	Строка = Стр;
	Если СтрДлина(Строка)>=КоличествоСимволов Тогда
		Возврат Лев(Строка,КоличествоСимволов);
	КонецЕсли;	
	Пока СтрДлина(Строка) < КоличествоСимволов Цикл
		Строка = Строка(Строка) + Строка(Символ);
	КонецЦикла;	
	Возврат Строка;
КонецФункции	

Функция RibData(Дата) Экспорт
	Тип = ФабрикаXDTO.Тип("http://www.oracle.com/retail/integration/payload/RIBDate","RIBDate");
	ПакетДата = ФабрикаXDTO.Создать(Тип);
	
	ПакетДата.year = Год(Дата);
	ПакетДата.month = Месяц(Дата);
	ПакетДата.day = День(Дата);
	ПакетДата.hour = Час(Дата);
	ПакетДата.minute = Минута(Дата);
	ПакетДата.second = Секунда(Дата);
	
	Возврат ПакетДата; 
КонецФункции

Функция ОбъектОтправлен(Объект) Экспорт
	Если Объект.Пустая() Тогда
		Возврат ложь;
	КонецЕсли;
	ИмяОбъекта = Объект.Метаданные().ПолноеИмя();
	Если ИмяОбъекта = "Документ.ТехнологическаяКарта" Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СУММА(ВложенныйЗапрос.ИсходноеКоличество) КАК ИсходноеКоличество,
		|	СУММА(ВложенныйЗапрос.Изменения) КАК Изменения
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(ПродукцияПоЦехам.ТехнологическаяКарта) КАК ИсходноеКоличество,
		|		0 КАК Изменения
		|	ИЗ
		|		РегистрСведений.ПродукцияПоЦехам КАК ПродукцияПоЦехам
		|	ГДЕ
		|		ПродукцияПоЦехам.ТехнологическаяКарта = &ТехнологическаяКарта
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		КОЛИЧЕСТВО(ПродукцияПоЦехам.ТехнологическаяКарта)
		|	ИЗ
		|		РегистрСведений.ПродукцияПоЦехам.Изменения КАК ПродукцияПоЦехам
		|	ГДЕ
		|		ПродукцияПоЦехам.ТехнологическаяКарта = &ТехнологическаяКарта
		|		И ПродукцияПоЦехам.Узел = &Узел) КАК ВложенныйЗапрос");
		Запрос.УстановитьПараметр("ТехнологическаяКарта",Объект.Ссылка);
		Запрос.УстановитьПараметр("Узел",ПланыОбмена.ОбменRIB.НайтиПоКоду(1));
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.ИсходноеКоличество = Выборка.Изменения Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
	Иначе	
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТаблицаИзменений.Узел
		|ИЗ
		|	"+ИмяОбъекта+".Изменения КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.Ссылка = &Ссылка и ТаблицаИзменений.Узел В (&Узел)");
		Запрос.УстановитьПараметр("Ссылка",Объект);
		СписокУзлов = Новый СписокЗначений;
		ОбъектМетаданные = Объект.Метаданные();
		Если ПараметрыСеанса.ЭтоЦентр Тогда
			Если Метаданные.ПланыОбмена.ОбменЦВД.Состав.Содержит(ОбъектМетаданные) Тогда
				СписокУзлов.Добавить(ПланыОбмена.ОбменЦВД.НайтиПоКоду(1));
			Иначе
				Если Метаданные.ПланыОбмена.ОбменRIB.Состав.Содержит(ОбъектМетаданные) Тогда
					Если НЕ ОбменДаннымиОбщийСервер.RIBИсключитьОбъект(Объект.ПолучитьОбъект()) Тогда
						СписокУзлов.Добавить(ПланыОбмена.ОбменRIB.НайтиПоКоду(1));
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		Иначе
			//popn+
			Если ПараметрыСеанса.ИспользованиеЦВД И Метаданные.ПланыОбмена.ОбменЦВД.Состав.Содержит(ОбъектМетаданные) Тогда
				СписокУзлов.Добавить(ПланыОбмена.ОбменЦВД.НайтиПоКоду(1));
			Иначе	
				Если Метаданные.ПланыОбмена.ОбменRIB.Состав.Содержит(ОбъектМетаданные) Тогда
					Если НЕ ОбменДаннымиОбщийСервер.RIBИсключитьОбъект(Объект.ПолучитьОбъект()) Тогда
						СписокУзлов.Добавить(ПланыОбмена.ОбменRIB.НайтиПоКоду(1));
					КонецЕсли;
				КонецЕсли;	
				Если Метаданные.ПланыОбмена.ОбменТД6.Состав.Содержит(ОбъектМетаданные) Тогда
					Если НЕ ОбменДаннымиОбщийСервер.ТД6ИсключитьОбъект(Объект.ПолучитьОбъект()) Тогда
						СписокУзлов.Добавить(ПланыОбмена.ОбменТД6.НайтиПоКоду(1));
					КонецЕсли;
				КонецЕсли;
				Если ИмяОбъекта = "Документ.ПланируемаяПоставка" Тогда 
					Если Объект.ЗаказМагазина И Объект.Контрагент.ЗаказEDI Тогда
						Узел = ОбменДаннымиEDIСервер.ПолучитьУзелРегистрацииEDIКлиент(Объект.Контрагент);
						Если Узел <> Неопределено Тогда
							СписокУзлов.Добавить(Узел);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ИмяОбъекта = "Документ.ПриходнаяНакладная" Тогда 
					Если НЕ Объект.EDIПровайдер.Пустая() И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") И Объект.Контрагент.ПодтверждениеОтгрузкиEDI Тогда	
						Узел = ОбменДаннымиEDIСервер.ПолучитьУзелРегистрацииEDIКлиентПоПровайдеру(Объект.EDIПровайдер);
						Если Узел <> Неопределено Тогда
							СписокУзлов.Добавить(Узел);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ИмяОбъекта = "Документ.ЗаказВнешний" Тогда 
					Если НЕ Объект.EDIПровайдер.Пустая() И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") И Объект.Контрагент.ПодтверждениеЗаказаEDI Тогда	
						Узел = ОбменДаннымиEDIСервер.ПолучитьУзелРегистрацииEDIПоставщик(Объект.EDIПровайдер);
						Если Узел <> Неопределено Тогда
							СписокУзлов.Добавить(Узел);
						КонецЕсли;
					КонецЕсли;	
				ИначеЕсли ИмяОбъекта = "Документ.РасходнаяНакладная" Тогда 
					Если ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ЗаказВнешний") Тогда	
						Узел = ОбменДаннымиEDIСервер.ПолучитьУзелРегистрацииEDIПоставщик(Объект.ДокОснование.EDIПровайдер);
						Если Узел <> Неопределено Тогда
							СписокУзлов.Добавить(Узел);
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		Если СписокУзлов.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;	
		Запрос.УстановитьПараметр("Узел",СписокУзлов);
		Результат = Запрос.Выполнить();
		//{ СИТЕК БрыляковЕЮ 2014-10-22  
		// Исходный текст --> 
		//Если Результат.Пустой() Тогда
		//	Возврат Истина;
		//Иначе
		//	Если Результат.Выгрузить().Количество() = СписокУзлов.Количество() Тогда
		//		Возврат Ложь;
		//	Иначе	
		//		Возврат Истина;
		//	КонецЕсли;
		//КонецЕсли;	
		//Возврат Ложь;
		// <-- Исходный текст 
		Отправлен = (Результат.Пустой() ИЛИ НЕ Результат.Выгрузить().Количество() = СписокУзлов.Количество())
		И РегистрыСведений.Izh_ОтправленныеОбъекты.ОбъектОтправлен(Объект);
		Возврат Отправлен;
		// СИТЕК БрыляковЕЮ 2014-10-22 }
	КонецЕсли;	
КонецФункции

Функция ПолучитьНоменклатуруПоКоду(Код,Справочник = "Номенклатура",СтрНенайденныхКодовТоваров = "") Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник."+Справочник+" КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код";
	Если Справочник = "Номенклатура" Тогда
		Запрос.Текст = Запрос.Текст +"
		|	И (Номенклатура.Группа = &Группа)";
		Запрос.УстановитьПараметр("Группа",0);
		Запрос.УстановитьПараметр("Код",Код);
	Иначе
		Запрос.Текст = Запрос.Текст +"
		|	И НЕ Номенклатура.ЭтоГруппа";
		Запрос.УстановитьПараметр("Код",Код);
	КонецЕсли;			   
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтрНенайденныхКодовТоваров = СтрНенайденныхКодовТоваров + ", " + СокрЛП(Код); 
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции

Функция ПолучитьСтрануТовараИКонтрагента(Номенклатура,Контрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураКонтрагента.Страна.Код КАК Страна
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ГДЕ
	|	НоменклатураКонтрагента.Контрагент = &Контрагент
	|	И НоменклатураКонтрагента.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Контрагент",Контрагент);			   
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);			   
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "RU";
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат СокрЛП(Выборка.Страна);
КонецФункции

Функция ЕстьУзелДляСЕ(СЕ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменРБД.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменРБД КАК ОбменРБД
	|ГДЕ
	|	ОбменРБД.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",СЕ);			   
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции	

Функция ПолучитьГруппуСлужебныеКодыПоКоду(Код)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СлужебныеКоды.Ссылка
	|ИЗ
	|	Справочник.СлужебныеКоды КАК СлужебныеКоды
	|ГДЕ
	|	СлужебныеКоды.ЭтоГруппа
	|	И СлужебныеКоды.Предопределенный
	|	И СлужебныеКоды.Код = &Код";
	Запрос.УстановитьПараметр("Код",Код);			   
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции

Функция ПреобразоватьНомер(Номер)
	НовыйНомер = Номер;
	Для I=1 По СтрДлина(НовыйНомер)+1 Цикл
		Код = КодСимвола(Номер,I);
		Если Код > 57 ИЛИ Код < 48 Тогда
			НовыйНомер = СтрЗаменить(НовыйНомер,Символ(Код),"");
		КонецЕсли;	
	КонецЦикла;	
	Возврат НовыйНомер;
КонецФункции	

Функция ПолучитьКодЛокации(СЕ,Склад = Неопределено)
	Если СЕ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		Если Склад = Неопределено Тогда
			КодЛокации = СЕ.СкладТорговогоЗала.Код
		Иначе
			КодЛокации = Склад.Код;
		КонецЕсли;
	Иначе
		КодЛокации = СЕ.Код;
	КонецЕсли;	
	Возврат Формат(КодЛокации,"ЧГ=");
КонецФункции	

Функция НетИзмененийВКорректировке(Ссылка,ТипДокумента) Экспорт
	
	// BiT ALProzorov 28/07/2015 -->>
	Если Ссылка.Состав.Количество() = 0 Тогда
		Возврат Истина
	КонецЕсли;
	// BiT ALProzorov 28/07/2015 <<--
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Корректировка.Количество = Корректировка.КоличествоДоИзменения
	//{ВетровИА Обращение №0000140050
	|				И Корректировка.Цена = Корректировка.ЦенаДоИзменения
	//ВетровИА Обращение №0000140050}
	|					ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьИзменения
	|ИЗ
	|	Документ."+ТипДокумента+".Состав КАК Корректировка
	|ГДЕ
	|	Корректировка.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	Возврат НЕ ВыборкаДетальныеЗаписи.ЕстьИзменения;
КонецФункции	

//////////////////////Общие процедуры обмена с RMS/////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////
//////////////////////процедуры отправки данных в RMS///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

процедура ОбменДаннымиОтправка() Экспорт
	Выборка = ПланыОбмена.ОбменRIB.Выбрать();
	ЭтотУзел = ПланыОбмена.ОбменRIB.ЭтотУзел();
	Пока Выборка.Следующий() Цикл
		Если ЭтотУзел = Выборка.Ссылка тогда Продолжить; КонецЕсли;
		ОбменДанными(Выборка.Ссылка);	
	КонецЦикла;
КонецПроцедуры

Процедура ОбменДанными(Ссылка) Экспорт
	ЗаписьЖурналаРегистрации("Тестирование",,,,СтрокаСоединенияИнформационнойБазы(),);
	Попытка
		ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
		Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
		URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		Прокси.Пользователь = ВебСервис.Имя;
		Прокси.Пароль = ВебСервис.Пароль;
	Исключение
		Ошибка = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"WebService RIB");
		ВызватьИсключение(Ошибка);
	КонецПопытки;
	ВсеОшибки = "";
	КоличествоОшибок = 0;
	КоличествоПакетов = 0;
	Ошибка = "";
	КодЛокацииПроизводств = "";
	Если СтруктурныеЕдиницы.ЕстьВГруппеТипСЕ(Перечисления.ТипыСтруктурныхЕдиниц.Производство) Тогда
		ОтправитьТехнологическиеКарты(Ссылка,Прокси,Ошибка);
	КонецЕсли;
	Если ПараметрыСеанса.ЭтоЦентр Тогда
		ОтправитьПравилаАвтоЗаказов(Ссылка,Прокси,Ошибка);
	КонецЕсли;	
	Если Ошибка <> "" Тогда
		ВсеОшибки = Ошибка;
		КоличествоОшибок = КоличествоОшибок + 1;
	КонецЕсли;	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1);
	Пока ВыборкаИзменений.Следующий() Цикл
		Ошибка = "";
		Объект = ВыборкаИзменений.Получить();
		ТипОбъекта = ТипЗнч(Объект);
		Ушло = Ложь;
		Если ТипОбъекта = Тип("УдалениеОбъекта") Тогда
			Ушло = Истина;
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
			//ЕстьНулевыеЦены = ОбменДаннымиЦВДСервер.ЕстьНулевыеЦены(Объект.Ссылка);
			//{БредовЮГ 2014-11-18 Наряд №000134205
			//Если НЕ Объект.ОбработанЦВД  Тогда
			//	Ушло = Ложь;
			//Иначе
			//БредовЮГ 2014-11-18 Наряд №000134205}
			Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
				Если ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ПланируемаяПоставка") Тогда
					Ушло = ОтправитьПриходнуюНакладнуюПоЗаказу(Объект,Прокси,Ошибка);
				Иначе	
					Ушло = ОтправитьПриходнуюНакладную(Объект,Прокси,Ошибка);
				КонецЕсли;	
			Иначе
				Ушло = ОтправитьПриходнуюНакладную(Объект,Прокси,Ошибка);
			КонецЕсли;	
			//{БредовЮГ 2014-11-18 Наряд №000134205
			//КонецЕсли;	
			//БредовЮГ 2014-11-18 Наряд №000134205}
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
			Если Объект.Возврат Тогда
				Ушло = ОтправитьВозвратнуюНакладную(Объект,Прокси,Ошибка);
			Иначе
				Ушло = ОтправитьРасходнуюНакладную(Объект,Прокси,Ошибка);
			КонецЕсли;	
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
			//{БредовЮГ 2014-11-18 Наряд №000134205
			//Если НЕ Объект.ОбработанЦВД  Тогда
			//	Ушло = Ложь;
			//Иначе
			//БредовЮГ 2014-11-18 Наряд №000134205}
			Ушло = ОтправитьКорректировкаПоступления(Объект,Прокси,Ошибка);
			//{БредовЮГ 2014-11-18 Наряд №000134205
			//КонецЕсли;	
			//БредовЮГ 2014-11-18 Наряд №000134205}
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
			Ушло = ОтправитьКорректировкаРеализации(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.Инвентаризация") Тогда
			Ушло = ОтправитьИнвентаризацию(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ВозвратнаяНакладнаяОтПокупателя") Тогда
			Ушло = ОтправитьВозвратнаяНакладнаяОтПокупателя(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗапросНаПополнение") Тогда
			Ушло = ОтправитьЗапросНаПополнение(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказВнешний") Тогда   //dps+ 000123958
			Ушло = ОтправитьЗаказВнешний(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ГрафикИнвентаризаций") Тогда
			Ушло = ОтправитьГрафикИнвентаризаций(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КоррекцияЗапасов") Тогда
			Ушло = ОтправитьКоррекцияЗапасов(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.Комплектация") Тогда
			Ушло = ОтправитьКомплектация(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ГотоваяПродукция") Тогда
			Ушло = ОтправитьГотоваяПродукция(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.Перемещение") Тогда
			Ушло = ОтправитьПеремещение(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПланируемаяПоставка") Тогда
			Если Объект.Статус = Перечисления.СтатусыПланируемойПоставки.Утвержден Тогда
				Ушло = ОтправитьПланируемаяПоставка(Объект,Прокси,Ошибка);
			Иначе	
				Ушло = Ложь;
			КонецЕсли;	
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗакрытиеЗаказа") Тогда
			Ушло = ОтправитьЗакрытиеЗаказа(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ZОтчет") Тогда
			Ушло = ОтправитьZОтчет(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ПараметрыСтруктурныхЕдиниц") Тогда
			Ушло = ОтправитьПараметрыСтруктурныхЕдиниц(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ПараметрыЗаказов") Тогда
			Ушло = ОтправитьПараметрыЗаказов(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.EDIПровайдерыПоставщиков") Тогда
			Ушло = ОтправитьEDIПровайдерыПоставщиков(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.Izh_МРЦ") Тогда  //dps+ 15/07/01 131723
			Ушло = ОтправитьМРЦ(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПланПроизводства") Тогда
			Ушло = ОтправитьПланПроизводства(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КалькуляционнаяКарта") Тогда
			Ушло = ОтправитьКалькуляционнаяКарта(Объект,Прокси,Ошибка);
			//{БредовЮГ 2014-12-23 Наряд №000138077 Добавление функции АПМ по выгрузке Ввода остатков			
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ВводОстатков") Тогда
			Ушло = ОтправитьВводОстатков(Объект,Прокси,Ошибка);
			//БредовЮГ 2014-12-23 Наряд №000138077 Добавление функции АПМ по выгрузке Ввода остатков}
		ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ЕдиницыИзмерения") Тогда
			Ушло = ОтправитьЕдиницыИзмерения(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Сертификаты") Тогда
			Ушло = ОтправитьСертификаты(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ДанныеСертификатов") Тогда
			Ушло = ОтправитьДанныеСертификатов(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.КлассификаторЕдиницИзмерения") Тогда
			Ушло = ОтправитьКлассификаторЕдиницИзмерения(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Ингредиенты") Тогда
			Ушло = ОтправитьИнгредиенты(Объект,Прокси,Ошибка,КодЛокацииПроизводств);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КонтрактныеЦены") Тогда
			Ушло = ОтправитьКонтрактныеЦены(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ОстаткиНоменклатуры") Тогда
			Накладная = Объект.Отбор.Регистратор.Значение;
			Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РасходнаяНакладная")
				//{ СИТЕК БрыляковЕЮ 2015-05-27  
				И НЕ (Накладная.Возврат 
				И ТипЗнч(Накладная.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
				)
				// СИТЕК БрыляковЕЮ 2015-05-27 }
				Тогда
				Ушло = ОтправитьРасходнуюНакладнуюКакПриходВЛокацию(Накладная,Прокси,Ошибка);
			Иначе
				Ушло = Истина;
				
				//{ СИТЕК БрыляковЕЮ 2015-05-27  
				Ушло = Ложь;
				// СИТЕК БрыляковЕЮ 2015-05-27 }
				
			КонецЕсли;
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РаспоряжениеНаОтгрузку") Тогда
			Ушло = ОтправитьРаспоряжениеНаОтгрузку(Объект,Прокси,Ошибка);
		ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.СпискиНоменклатуры") Тогда
			Ушло = ОтправитьСпискиНоменклатуры(Объект,Прокси,Ошибка);
		КонецЕсли;
		
		//{ СИТЕК БрыляковЕЮ 2015-05-27  
		Izh_ОбменДаннымиRIB.ОтправитьОбъект(Ссылка, Объект, Прокси, Ошибка);
		// СИТЕК БрыляковЕЮ 2015-05-27 }
		
		Если Ушло = Истина Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
			//{ СИТЕК БрыляковЕЮ 2014-10-22  
			Izh_ОбменДанными.ПометитьКакОтправленный(Объект);
			// СИТЕК БрыляковЕЮ 2014-10-22 }
		КонецЕсли;
		КоличествоПакетов = КоличествоПакетов + 1;
		Если Ошибка <> "" Тогда
			ВсеОшибки = Ошибка;
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецЕсли;	
	КонецЦикла;
	Если ВсеОшибки <> "" Тогда
		Сообшение = "Всего ошибок - "+КоличествоОшибок+" из "+КоличествоПакетов+"
		| последняя ошибка:
		|"+ВсеОшибки;
		ВызватьИсключение(Сообшение);
	КонецЕсли;	
КонецПроцедуры

Функция УпаковатьВСообщение(ДатаПакета,Номер,Пакет,ИмяПакета,Семейство,ТипПакета,Локация = Неопределено) Экспорт
	Если ТипЗнч(Пакет) = Тип("Строка") Тогда
		Данные = Пакет;
	Иначе	
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Пакет,ИмяПакета);
		Данные = ЗаписьXML.Закрыть();
	КонецЕсли;	
	
	Дата = Формат(ДатаПакета,"ДФ=yyyy-MM-dd");
	Час = ДобавитьСлева(Час(ДатаПакета),2,0);
	Минута = ДобавитьСлева(Минута(ДатаПакета),2,0);
	Секунда = ДобавитьСлева(Секунда(ДатаПакета),2,0);
	
	ФорматДаты = Дата+" "+Час+":"+Минута+":"+Секунда+".000";
	
	СоставПакета = Новый Структура;
	СоставПакета.Вставить("id",ИмяПакета+"_"+СокрЛП(Номер));
	СоставПакета.Вставить("family",Семейство);
	СоставПакета.Вставить("messageData",Данные);
	СоставПакета.Вставить("type",ТипПакета);
	ГСЧ = Новый ГенераторСлучайныхЧисел(10);
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(10,99);
	СоставПакета.Вставить("ribmessageID",Семейство+"_pub_1|"+ФорматДаты+"|"+СлучайноеЧисло);
	СоставПакета.Вставить("publishTime",ФорматДаты+" MSD");
	СоставПакета.Вставить("customData","");
	СоставПакета.Вставить("customFlag","F");
	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/rib/RibMessages").КорневыеСвойства;
	RibMessages = КорневыеСвойства.Получить("RibMessages").Тип;
	ПакетRibMessages = ФабрикаXDTO.Создать(RibMessages);
	
	ribMessage = КорневыеСвойства.Получить("ribMessage").Тип;
	ПакетribMessage = ФабрикаXDTO.Создать(ribMessage);
	Для Каждого Свойство Из СоставПакета Цикл
		ПакетribMessage[Свойство.Ключ] = Свойство.Значение;			
	КонецЦикла;
	routingInfo = КорневыеСвойства.Получить("routingInfo").Тип;
	ПакетroutingInfo = ФабрикаXDTO.Создать(routingInfo);
	Если Локация = Неопределено Тогда 
		ПакетroutingInfo.name = "tran_level_ind";
		ПакетroutingInfo.value = "Y";
	Иначе
		ПакетroutingInfo.name = "to_phys_loc";
		ПакетroutingInfo.value = Локация;
	КонецЕсли;	
	ПакетribMessage.routingInfo.Добавить(ПакетroutingInfo);
	
	ПакетRibMessages.ribMessage.Добавить(ПакетribMessage);	
	
	Возврат ПакетRibMessages; 
КонецФункции

Функция ОтправитьСообщение(Package,Прокси) Экспорт
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Package,"RibMessages");
	Данные = ЗаписьXML.Закрыть();
	Результат = Истина;
	МестоВызова = ?(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр,"center","sh/"+Формат(СтруктурныеЕдиницы.ПолучитьКодТекущейЛокации(),"ЧГ="));
	Попытка
		Результат = Прокси.DataExchange(МестоВызова,Данные);
		Package = "";
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"WebService RIB");
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

//{БредовЮГ 2014-12-23 Наряд №000138077 Добавление функции АПМ по выгрузке Ввода остатков
Функция ОтправитьВводОстатков(Объект,Прокси,Ошибка)
	Если Объект.КупленныеТовары.Количество()=0 
		И Объект.ХранимыеТовары.Количество()=0
		И Объект.КомиссионныеТовары.Количество()=0
		И Объект.ТоварыПереданныеНаКомиссию.Количество()=0
		И Объект.РеализованныеТовары.Количество()=0	Тогда
		Возврат Истина;
	КонецЕсли; 
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
	InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
	InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
	ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
	
	ПакетInvAdjustDesc.dc_dest_id = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
	Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
		to_disposition = "UTS";
	Иначе
		to_disposition = "ATS";
	КонецЕсли;
	КодКоррекцииВводОстатков = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодКоррекцииВводОстатков);
	Для Каждого Строка Из Объект.КупленныеТовары Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетInvAdjustDtl.to_disposition = to_disposition;
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = КодКоррекцииВводОстатков;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	
	//{БредовЮГ 2015-01-16 Добавляем в выгрузку остальные табличные части
	Для Каждого Строка Из Объект.КомиссионныеТовары Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетInvAdjustDtl.to_disposition = to_disposition;
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = КодКоррекцииВводОстатков;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ХранимыеТовары Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетInvAdjustDtl.to_disposition = to_disposition;
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = КодКоррекцииВводОстатков;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ТоварыПереданныеНаКомиссию Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетInvAdjustDtl.to_disposition = to_disposition;
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = КодКоррекцииВводОстатков;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.РеализованныеТовары Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетInvAdjustDtl.to_disposition = to_disposition;
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = КодКоррекцииВводОстатков;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	//БредовЮГ 2015-01-16 Добавляем в выгрузку остальные табличные части}
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,"VO"+Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции
//БредовЮГ 2014-12-23 Наряд №000138077 Добавление функции АПМ по выгрузке Ввода остатков}

Процедура ОтправитьТехнологическиеКарты(Узел,Прокси,Ошибка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродукцияПоЦехамИзменения.Склад КАК Склад,
	|	ПродукцияПоЦехамИзменения.Склад.Владелец.Код КАК КодСЕ,
	|	ПродукцияПоЦехамИзменения.ТехнологическаяКарта КАК ТехнологическаяКарта,
	|	ПродукцияПоЦехамИзменения.Склад.Код КАК КодСклада,
	|	МИНИМУМ(ПлановаяСебестоимостьПродукцииСрезПоследних.Регистратор) КАК КалькуляционнаяКарта,
	|	МАКСИМУМ(ПродукцияПоЦехам.ФлагАктивности)
	|ИЗ
	|	РегистрСведений.ПродукцияПоЦехам.Изменения КАК ПродукцияПоЦехамИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановаяСебестоимостьПродукции.СрезПоследних КАК ПлановаяСебестоимостьПродукцииСрезПоследних
	|		ПО ПродукцияПоЦехамИзменения.ТехнологическаяКарта = ПлановаяСебестоимостьПродукцииСрезПоследних.Регистратор.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПродукцияПоЦехам КАК ПродукцияПоЦехам
	|		ПО ПродукцияПоЦехамИзменения.ТехнологическаяКарта = ПродукцияПоЦехам.ТехнологическаяКарта
	|			И ПродукцияПоЦехамИзменения.Склад = ПродукцияПоЦехам.Склад
	|			И ПродукцияПоЦехамИзменения.Продукция = ПродукцияПоЦехам.Продукция
	|ГДЕ
	|	ПродукцияПоЦехамИзменения.Узел = &Узел
	|	И ПродукцияПоЦехамИзменения.ТехнологическаяКарта.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродукцияПоЦехамИзменения.ТехнологическаяКарта,
	|	ПродукцияПоЦехамИзменения.Склад,
	|	ПродукцияПоЦехамИзменения.Склад.Владелец.Код,
	|	ПродукцияПоЦехамИзменения.Склад.Код
	|ИТОГИ ПО
	|	ТехнологическаяКарта,
	|	Склад";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаТехнологическаяКарта = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТипДокументаТК = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_ТехнологическаяКарта");
	ТипСоставТК = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_ТехнологическаяКарта_Состав");
	ТипДокументаИ = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogObject_Ингредиенты");
	ТипСоставИ = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogTabularSectionRow_Ингредиенты_Состав");
	ТипДокументаКК = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_КалькуляционнаяКарта");
	ТипСоставКК = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_КалькуляционнаяКарта_Состав");
	
	Пока ВыборкаТехнологическаяКарта.Следующий() Цикл
		Объект = ВыборкаТехнологическаяКарта.ТехнологическаяКарта;
		ПакетТК = ФабрикаXDTO.Создать(ТипДокументаТК);
		ПакетТК.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
		ПакетТК.DeletionMark = Объект.ПометкаУдаления;
		ПакетТК.Date = Объект.Дата;
		ПакетТК.Number = СокрЛП(Объект.Номер);
		ПакетТК.Posted = Объект.Проведен;
		ПакетТК.Продукция = Объект.Продукция.Код;
		ПакетТК.КоличествоПорций = Объект.КоличествоПорций;
		ПакетТК.НомерПоСправочнику = Объект.НомерПоСправочнику;
		ПакетТК.Автор = Объект.Автор.Наименование;
		ПакетТК.ВидПроизводства = Метаданные.Перечисления.ВидыПроизводства.EnumValues.Get(Перечисления.ВидыПроизводства.Индекс(Объект.ВидПроизводства)).Имя;
		ПакетТК.Описание = Объект.Описание;
		ПакетТК.МассаПорции = Объект.МассаПорции;
		ПакетТК.ВозможнаРазделка = Объект.ВозможнаРазделка;
		ПакетТК.Наименование = Объект.Наименование;
		
		
		Ингредиенты = Новый Массив;
		Для Каждого Строка Из Объект.Состав Цикл
			ПакетСостав = ФабрикаXDTO.Создать(ТипСоставТК);
			ПакетСостав.Номенклатура     					= Формат(Строка.Номенклатура.Код,"ЧГ=");
			ПакетСостав.НоменклатураТип     				= Строка.Номенклатура.Метаданные().Имя;
			Если ПакетСостав.НоменклатураТип = "Ингредиенты" Тогда
				Ингредиенты.Добавить(Строка.Номенклатура);
			КонецЕсли;	
			ПакетСостав.Количество       					= Строка.Количество;
			ПакетСостав.КоличествоНетто       				= Строка.КоличествоНетто;
			ПакетСостав.ЕдиницаИзмерения       				= СокрЛП(Строка.ЕдиницаИзмерения.Наименование);
			ПакетСостав.Коэффициент       					= Строка.Коэффициент;
			//ПакетСостав.ТехнологическаяКарта       			= СокрЛП(Строка.ТехнологическаяКарта.Номер);
			ПакетСостав.КоэффициентРаспределенияЦены        = Строка.КоэффициентРаспределенияЦены;
			ПакетСостав.Белки = Строка.Белки;
			ПакетСостав.Жиры = Строка.Жиры;
			ПакетСостав.Углеводы = Строка.Углеводы;
			ПакетСостав.Калорийность = Строка.Калорийность;
			//popn+
			ПакетСостав.ПроцентСписания = Строка.ПроцентСписания;
			//popn-
			ПакетТК.Состав.Добавить(ПакетСостав);
		КонецЦикла;
		
		КодЛокации = "";
		Результат = Истина;
		ВыборкаСтруктурнаяЕдиница = ВыборкаТехнологическаяКарта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
			КодЛокации = КодЛокации+","+Формат(ВыборкаСтруктурнаяЕдиница.КодСЕ,"ЧГ=");
		КонецЦикла;
		Если Ингредиенты.Количество() > 0 Тогда
			Для Каждого Ингредиент Из Ингредиенты Цикл 
				Пакет = ФабрикаXDTO.Создать(ТипДокументаИ);
				Пакет.IsFolder = Ингредиент.ЭтоГруппа;
				Пакет.Ref = Строка(Ингредиент.Ссылка.УникальныйИдентификатор());
				Пакет.DeletionMark = Ингредиент.ПометкаУдаления;
				Пакет.Parent = Формат(Ингредиент.Родитель.Код,"ЧГ=");
				Пакет.Code = Формат(Ингредиент.Код,"ЧГ=");
				Пакет.Description = Ингредиент.Наименование;
				Если НЕ Ингредиент.ЭтоГруппа Тогда
					Пакет.ТипТовара = Метаданные.Перечисления.ТипыТоваров.EnumValues.Get(Перечисления.ТипыТоваров.Индекс(Ингредиент.ТипТовара)).Имя;
					Пакет.БазоваяЕдиницаИзмерения = Ингредиент.БазоваяЕдиницаИзмерения.Код;
					Пакет.БазоваяЕдиницаИзмеренияНаименование = Ингредиент.БазоваяЕдиницаИзмерения.Наименование;
					Пакет.ДатаСоздания = Ингредиент.ДатаСоздания;
					Для Каждого Строка Из Ингредиент.Состав Цикл
						ПакетСостав = ФабрикаXDTO.Создать(ТипСоставИ);
						ПакетСостав.Номенклатура     					= СокрЛП(Строка.Номенклатура.Код);
						ПакетСостав.КоэффициентЗамены       			= Строка.КоэффициентЗамены;
						Пакет.Состав.Добавить(ПакетСостав);
					КонецЦикла;
				КонецЕсли;	
				RibMessages = УпаковатьВСообщение(ТекущаяДата(),Формат(Ингредиент.Код,"ЧГ="),Пакет,"CatalogObject_Ингредиенты","Ingredients","IngredientsCre",КодЛокации);
				Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
				Ошибка = Ошибка + RibMessages;
			КонецЦикла;
		КонецЕсли;
		Если Результат Тогда
			ВыборкаСклад = ВыборкаТехнологическаяКарта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСклад.Следующий() Цикл
				//отправляем в каждое производство свой пакет из-за склада
				ПакетТК.Склад = Формат(ВыборкаСклад.КодСклада,"ЧГ=");
				ПакетТК.СтруктурнаяЕдиницаСклада = Формат(ВыборкаСклад.КодСЕ,"ЧГ=");
				ПакетТК.ФлагАктивности = ВыборкаСклад.ФлагАктивности;
				RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетТК,"DocumentObject_ТехнологическаяКарта","ProcessMap","ProcessMapCre",Формат(ВыборкаСклад.КодСЕ,"ЧГ="));
				Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
				Ошибка = Ошибка + RibMessages;
			КонецЦикла;	
			КалькуляционнаяКарта = ВыборкаТехнологическаяКарта.КалькуляционнаяКарта;
			Если ЗначениеЗаполнено(КалькуляционнаяКарта) Тогда
				ПакетКК = ФабрикаXDTO.Создать(ТипДокументаКК);
				ПакетКК.Ref = Строка(КалькуляционнаяКарта.Ссылка.УникальныйИдентификатор());
				ПакетКК.DeletionMark = КалькуляционнаяКарта.ПометкаУдаления;
				ПакетКК.Date = КалькуляционнаяКарта.Дата;
				ПакетКК.Number = СокрЛП(КалькуляционнаяКарта.Номер);
				ПакетКК.Posted = КалькуляционнаяКарта.Проведен;
				ПакетКК.Продукция = КалькуляционнаяКарта.Продукция.Код;
				ПакетКК.КоличествоПорций = КалькуляционнаяКарта.КоличествоПорций;
				ПакетКК.НомерПоСправочнику = КалькуляционнаяКарта.НомерПоСправочнику;
				ПакетКК.Автор = КалькуляционнаяКарта.Автор.Наименование;
				//ПакетКК.СтруктурнаяЕдиница = КалькуляционнаяКарта.СтруктурнаяЕдиница.Код;
				ПакетКК.ВидПроизводства = Метаданные.Перечисления.ВидыПроизводства.EnumValues.Get(Перечисления.ВидыПроизводства.Индекс(КалькуляционнаяКарта.ВидПроизводства)).Имя;
				ПакетКК.МассаПорции = КалькуляционнаяКарта.МассаПорции;
				ПакетКК.ДокументОснование = Строка(КалькуляционнаяКарта.ДокументОснование.УникальныйИдентификатор());
				ПакетКК.Фирма = Строка(КалькуляционнаяКарта.Фирма.УникальныйИдентификатор());
				ПакетКК.СебестоимостьПродукции = КалькуляционнаяКарта.СебестоимостьПродукции;
				//popn+
				ПакетКК.СебестоимостьНДСПродукции = КалькуляционнаяКарта.СебестоимостьНДСПродукции;
				//popn-
				Ингредиенты = Новый Массив;
				Для Каждого Строка Из КалькуляционнаяКарта.Состав Цикл
					ПакетСостав = ФабрикаXDTO.Создать(ТипСоставКК);
					ПакетСостав.Номенклатура     					= Формат(Строка.Номенклатура.Код,"ЧГ=");
					ПакетСостав.Количество       					= Строка.Количество;
					ПакетСостав.ЕдиницаИзмерения       				= СокрЛП(Строка.ЕдиницаИзмерения.Наименование);
					ПакетСостав.Коэффициент       					= Строка.Коэффициент;
					ПакетСостав.КоэффициентРаспределенияЦены        = Строка.КоэффициентРаспределенияЦены;
					ПакетСостав.Цена = Строка.Цена;
					ПакетСостав.Сумма = Строка.Сумма;
					//popn+
					ПакетСостав.СтавкаНДС = ?(ЗначениеЗаполнено(Строка.СтавкаНДС),Строка.СтавкаНДС.Ставка,0);
					ПакетСостав.СуммаНДС = Строка.СуммаНДС;
					//popn-
					ПакетСостав.Ингредиент = Формат(Строка.Ингредиент.Код,"ЧГ=");;
					ПакетКК.Состав.Добавить(ПакетСостав);
				КонецЦикла;
				
				RibMessages = УпаковатьВСообщение(КалькуляционнаяКарта.Дата,КалькуляционнаяКарта.Номер,ПакетКК,"DocumentObject_КалькуляционнаяКарта","CostCard","CostCardCre",КодЛокации);
				Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
				Ошибка = Ошибка + RibMessages;
			КонецЕсли;
			ВыборкаСклад = ВыборкаТехнологическаяКарта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСклад.Следующий() Цикл
				Если Результат Тогда
					НаборЗаписей = РегистрыСведений.ПродукцияПоЦехам.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ТехнологическаяКарта.Установить(Объект);
					НаборЗаписей.Отбор.Склад.Установить(ВыборкаСклад.Склад);
					НаборЗаписей.Отбор.Продукция.Установить(Объект.Продукция);
					НаборЗаписей.Прочитать();
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОтправитьПравилаАвтоЗаказов(Узел,Прокси,Ошибка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвтоЗаказПоСтруктурнымЕдиницамИзменения.Правило КАК Правило,
	|	АвтоЗаказПоСтруктурнымЕдиницамИзменения.СтруктурнаяЕдиница.Код КАК КодСЕ,
	|	АвтоЗаказПоСтруктурнымЕдиницамИзменения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА АвтоЗаказПоСтруктурнымЕдиницам.Правило ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПометкаУдаления
	|ИЗ
	|	РегистрСведений.АвтоЗаказПоСтруктурнымЕдиницам.Изменения КАК АвтоЗаказПоСтруктурнымЕдиницамИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АвтоЗаказПоСтруктурнымЕдиницам КАК АвтоЗаказПоСтруктурнымЕдиницам
	|		ПО АвтоЗаказПоСтруктурнымЕдиницамИзменения.Правило = АвтоЗаказПоСтруктурнымЕдиницам.Правило
	|			И АвтоЗаказПоСтруктурнымЕдиницамИзменения.СтруктурнаяЕдиница = АвтоЗаказПоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|ГДЕ
	|	АвтоЗаказПоСтруктурнымЕдиницамИзменения.Узел = &Узел
	|ИТОГИ ПО
	|	Правило,
	|	ПометкаУдаления,
	|	КодСЕ,
	|	СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПравила = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПравила.Следующий() Цикл
		Объект = ВыборкаПравила.Правило;
		ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogObject_ПравилаАвтоЗаказов");
		ПакетСпр = ФабрикаXDTO.Создать(ТипДокумента);
		ПакетСпр.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
		ВыборкаПоТипу = ВыборкаПравила.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоТипу.Следующий() Цикл
			ПакетСпр.DeletionMark = ?(Объект.ПометкаУдаления=Истина,Объект.ПометкаУдаления,ВыборкаПоТипу.ПометкаУдаления);
			Если ЗначениеЗаполнено(Объект.Владелец) Тогда
				ПакетСпр.Owner = Объект.Владелец.Код;
				ПакетСпр.Code = Объект.Код;
				ПакетСпр.Description = Объект.Наименование;
				ПакетСпр.ПоПротоколу = Объект.ПоПротоколу;
				//{БредовЮГ 2015-05-13 Наряд 000149975 от 08.05.2015 9:14:21
				ПакетСпр.Izh_ВариантРасчета = Объект.Izh_ВариантРасчета;
				ПакетСпр.Izh_Менеджер = Строка(Объект.Izh_Менеджер.УникальныйИдентификатор());
				ПакетСпр.Izh_ПредельноеВремяЗаказа = Объект.Izh_ПредельноеВремяЗаказа;
				//БредовЮГ  2015-05-13 Наряд 000149975 от 08.05.2015 9:14:21 } 
				ПакетСпр.Расписание = Объект.Расписание;
				ПакетСпр.ПредставлениеРасписания = Объект.ПредставлениеРасписания;
				ПакетСпр.ПериодРасчета = Объект.ПериодРасчета;
				ПакетСпр.КоэффициентЗаказа = Объект.КоэффициентЗаказа;
				ПакетСпр.СрокПоставки = Объект.СрокПоставки;
				ПакетСпр.ПроцентОкругления = Объект.ПроцентОкругления;
				Если Не Объект.СкладПроизводства.Пустая() Тогда
					ПакетСпр.Склад = Объект.СкладПроизводства.Код;
				КонецЕсли;
				ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogTabularSectionRow_ПравилаАвтоЗаказов_Состав");
				
				Для Каждого Строка Из Объект.Состав Цикл
					ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
					ПакетСостав.Номенклатура     					= Строка.Номенклатура.ПолныйКод();
					ПакетСпр.Состав.Добавить(ПакетСостав);
				КонецЦикла;
			КонецЕсли;
			КодЛокации = "";
			ВыборкаСтруктурнаяЕдиницаКод = ВыборкаПоТипу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтруктурнаяЕдиницаКод.Следующий() Цикл
				КодЛокации = КодЛокации+","+Формат(ВыборкаСтруктурнаяЕдиницаКод.КодСЕ,"ЧГ=");
			КонецЦикла;
			RibMessages = УпаковатьВСообщение(ТекущаяДата(),Формат(Объект.Код,"ЧГ="),ПакетСпр,"CatalogObject_ПравилаАвтоЗаказов","ADRRules","ADRRulesCre",КодЛокации);
			Результат = ОтправитьСообщение(RibMessages,Прокси);
			Ошибка = Ошибка + RibMessages;
		
			Если Результат Тогда
				ВыборкаСтруктурнаяЕдиницаКод = ВыборкаПоТипу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСтруктурнаяЕдиницаКод.Следующий() Цикл
					ВыборкаСтруктурнаяЕдиница = ВыборкаСтруктурнаяЕдиницаКод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
						НаборЗаписей = РегистрыСведений.АвтоЗаказПоСтруктурнымЕдиницам.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Правило.Установить(ВыборкаПоТипу.Правило);
						НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница);
						НаборЗаписей.Прочитать();
						ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ОтправитьКалькуляционнаяКарта(Объект,Прокси,Ошибка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродукцияПоЦехам.Склад КАК Склад,
	|	ПродукцияПоЦехам.Склад.Владелец.Код КАК КодСЕ,
	|	ПродукцияПоЦехам.ТехнологическаяКарта КАК ТехнологическаяКарта,
	|	ПродукцияПоЦехам.Склад.Код КАК КодСклада
	|ИЗ
	|	РегистрСведений.ПродукцияПоЦехам КАК ПродукцияПоЦехам
	|ГДЕ
	|	ПродукцияПоЦехам.ТехнологическаяКарта = &ТехнологическаяКарта
	|ИТОГИ ПО
	|	КодСЕ,
	|	Склад";
	
	Запрос.УстановитьПараметр("ТехнологическаяКарта", Объект.ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;	
	
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_КалькуляционнаяКарта");
	ПакетТК = ФабрикаXDTO.Создать(ТипДокумента);
	ПакетТК.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	ПакетТК.DeletionMark = Объект.ПометкаУдаления;
	ПакетТК.Date = Объект.Дата;
	ПакетТК.Number = СокрЛП(Объект.Номер);
	ПакетТК.Posted = Объект.Проведен;
	ПакетТК.Продукция = Объект.Продукция.Код;
	ПакетТК.КоличествоПорций = Объект.КоличествоПорций;
	ПакетТК.НомерПоСправочнику = Объект.НомерПоСправочнику;
	ПакетТК.Автор = Объект.Автор.Наименование;
	ПакетТК.ВидПроизводства = Метаданные.Перечисления.ВидыПроизводства.EnumValues.Get(Перечисления.ВидыПроизводства.Индекс(Объект.ВидПроизводства)).Имя;
	ПакетТК.МассаПорции = Объект.МассаПорции;
	ПакетТК.ДокументОснование = Строка(Объект.ДокументОснование.УникальныйИдентификатор());
	ПакетТК.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	ПакетТК.СебестоимостьПродукции = Объект.СебестоимостьПродукции;
	//popn+
	ПакетТК.СебестоимостьНДСПродукции = Объект.СебестоимостьНДСПродукции;
	//popn-
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_КалькуляционнаяКарта_Состав");
	
	Ингредиенты = Новый Массив;
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура     					= Формат(Строка.Номенклатура.Код,"ЧГ=");
		ПакетСостав.Количество       					= Строка.Количество;
		ПакетСостав.ЕдиницаИзмерения       				= СокрЛП(Строка.ЕдиницаИзмерения.Наименование);
		ПакетСостав.Коэффициент       					= Строка.Коэффициент;
		ПакетСостав.КоэффициентРаспределенияЦены        = Строка.КоэффициентРаспределенияЦены;
		ПакетСостав.Цена = Строка.Цена;
		ПакетСостав.Сумма = Строка.Сумма;
		//popn+
		ПакетСостав.СтавкаНДС = ?(ЗначениеЗаполнено(Строка.СтавкаНДС),Строка.СтавкаНДС.Ставка,0);
		ПакетСостав.СуммаНДС = Строка.СуммаНДС;
		//popn-
		ПакетСостав.Ингредиент = Формат(Строка.Ингредиент.Код,"ЧГ=");;
		ПакетТК.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	КодЛокации = "";
	Результат = Истина;
	ВыборкаСтруктурнаяЕдиница = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		КодЛокации = КодЛокации+","+Формат(ВыборкаСтруктурнаяЕдиница.КодСЕ,"ЧГ=");
	КонецЦикла;
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетТК,"DocumentObject_КалькуляционнаяКарта","CostCard","CostCardCre",КодЛокации);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции	

Функция ОтправитьСертификаты(Объект,Прокси,Ошибка)
	
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogObject_Сертификаты");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Description = Объект.Наименование;
	Пакет.ДатаС = Объект.ДатаС;
	Пакет.ДатаПо = Объект.ДатаПо;
	Пакет.ОрганСертификации = Строка(Объект.ОрганСертификации.УникальныйИдентификатор());
	Пакет.Содержание = Объект.Содержание;
	Пакет.Производитель = Объект.Производитель.Код;
	Пакет.Страна = Объект.Страна.Код;
	Пакет.Комментарий = Объект.Комментарий;
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),Формат(Объект.Наименование,"ЧГ="),Пакет,"CatalogObject_Сертификаты","Certificates","CertificatesCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Возврат Результат;
	
КонецФункции	

Функция ОтправитьДанныеСертификатов(Объект,Прокси,Ошибка)
	
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "InformationRegisterRecord_ДанныеСертификатов");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "InformationRegisterRecord_ДанныеСертификатов_Состав");
	
	Если Объект.Количество() = 0 Тогда
		НоменклатураИзОтбора = Объект.Отбор.Номенклатура.Значение;
		СертификатИзОтбора = Объект.Отбор.Сертификат.Значение;
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура = НоменклатураИзОтбора;
		ПакетСостав.Сертификат = СертификатИзОтбора.Код;
		ПакетСостав.Значение = "";
		Пакет.Состав.Добавить(ПакетСостав);
	Иначе
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура = Объект[0].Номенклатура;
		ПакетСостав.Сертификат = Объект[0].Сертификат.Код;
		ПакетСостав.Значение = Строка(Объект[0].Значение.УникальныйИдентификатор());
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЕсли;
	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),"",Пакет,"InformationRegisterRecord_ДанныеСертификатов","CertificatesData","CertificatesDataCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
	
КонецФункции	

Функция ОтправитьКлассификаторЕдиницИзмерения(Объект,Прокси,Ошибка)
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogObject_КлассификаторЕдиницИзмерения");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Description = Объект.Наименование;
	Пакет.Code = Объект.Код;
	Пакет.ПолноеНаименование = Объект.ПолноеНаименование;
	Пакет.МладшаяЕдиница = ?(Объект.МладшаяЕдиница.Пустая(), 0, Объект.МладшаяЕдиница.Код);
	Пакет.Коэффициент = Объект.Коэффициент;
	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),Формат(Объект.Наименование,"ЧГ="),Пакет,"CatalogObject_КлассификаторЕдиницИзмерения","MeasureUnit","MeasureUnitCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Возврат Результат;
	
КонецФункции

Функция ОтправитьКонтрактныеЦены(Объект,Прокси,Ошибка)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/XCostChgDesc").КорневыеСвойства;
	XCostChgDesc = КорневыеСвойства.Получить("XCostChgDesc").Тип;
	XCostChgHrDtl = КорневыеСвойства.Получить("XCostChgHrDtl").Тип;
	Результат = Истина;
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетXCostChgDesc = ФабрикаXDTO.Создать(XCostChgDesc);
		ПакетXCostChgDesc.item = СокрЛП(Строка.Номенклатура.Код);
		ПакетXCostChgDesc.supplier = Формат(Объект.Контрагент.Код,"ЧГ=");
		ПакетXCostChgDesc.origin_country_id = ПолучитьСтрануТовараИКонтрагента(Строка.Номенклатура,Объект.Контрагент);
		ПакетXCostChgDesc.unit_cost = Строка.Цена;
		ПакетXCostChgDesc.recalc_ord_ind = "Y";
		ПакетXCostChgDesc.currency_code = Объект.Валюта.Наименование;
		ПакетXCostChgDesc.hier_level = "";
		RibMessages = УпаковатьВСообщение(ТекущаяДата(),"CC"+Строка.Номенклатура.Код,ПакетXCostChgDesc,"XCostChgDesc","XCostChg","Xcostchgmod");
		Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
		Ошибка = Ошибка + RibMessages;
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ОтправитьИнгредиенты(Объект,Прокси,Ошибка,КодЛокации)
	Если КодЛокации = "" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Владелец.Код КАК КодСЕ
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.ВидСклада = &ВидСклада
		|
		|СГРУППИРОВАТЬ ПО
		|	Склады.Владелец.Код";
		Запрос.УстановитьПараметр("ВидСклада", Перечисления.ВидыСкладов.Производство);
		
		МассивРезультата = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодСЕ");
		Если МассивРезультата.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;	
		Для Каждого Строка Из МассивРезультата Цикл
			КодЛокации = КодЛокации+","+Формат(Строка,"ЧГ=");
		КонецЦикла;
	КонецЕсли;	
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogObject_Ингредиенты");
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogTabularSectionRow_Ингредиенты_Состав");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.IsFolder = Объект.ЭтоГруппа;
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Parent = Формат(Объект.Родитель.Код,"ЧГ=");
	Пакет.Code = Формат(Объект.Код,"ЧГ=");
	Пакет.Description = Объект.Наименование;
	Если НЕ Объект.ЭтоГруппа Тогда
		Пакет.ТипТовара = Метаданные.Перечисления.ТипыТоваров.EnumValues.Get(Перечисления.ТипыТоваров.Индекс(Объект.ТипТовара)).Имя;
		Пакет.БазоваяЕдиницаИзмерения = Объект.БазоваяЕдиницаИзмерения.Код;
		Пакет.БазоваяЕдиницаИзмеренияНаименование = Объект.БазоваяЕдиницаИзмерения.Наименование;
		Пакет.ДатаСоздания = Объект.ДатаСоздания;
		Для Каждого Строка Из Объект.Состав Цикл
			ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
			ПакетСостав.Номенклатура     					= СокрЛП(Строка.Номенклатура.Код);
			ПакетСостав.КоэффициентЗамены       			= Строка.КоэффициентЗамены;
			Пакет.Состав.Добавить(ПакетСостав);
		КонецЦикла;
	КонецЕсли;	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),Формат(Объект.Код,"ЧГ="),Пакет,"CatalogObject_Ингредиенты","Ingredients","IngredientsCre",КодЛокации);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Возврат Результат;
КонецФункции

Функция ПолучитьОсновногоКонтрагента(Продукция,ТекущаяСебестоимость) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураКонтрагента.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ВключатьНДСВЦеныКонтрагентов.Значение = ИСТИНА
	|			ТОГДА НоменклатураКонтрагента.Цена
	|		ИНАЧЕ НоменклатураКонтрагента.Цена * (100 + НоменклатураКонтрагента.Номенклатура.СтавкаНДС.Ставка) / 100
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
	|	Константа.ВключатьНДСВЦеныКонтрагентов КАК ВключатьНДСВЦеныКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагента.Номенклатура = &Номенклатура
	|	И НоменклатураКонтрагента.ОсновнойПоставщик";
	
	Запрос.УстановитьПараметр("Номенклатура", Продукция);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	ТекущаяСебестоимость = ВыборкаДетальныеЗаписи.Цена;
	Возврат ВыборкаДетальныеЗаписи.Контрагент;
КонецФункции

Функция ОтправитьПриходнуюНакладную(Объект,Прокси,Ошибка)
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;
	Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		Если ТипЗнч(Объект.Грузоотправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			Если Объект.Грузоотправитель.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает Тогда
				Результат = ОтправитьПриходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка);
			Иначе
				Результат = ОтправитьПриходнуюНакладнуюКакПриход(Объект,Прокси,Ошибка);
				Если ЕстьРасхожденияВКоличествеПрихода(Объект) Тогда
					Результат = ОтправитьПриходнуюНакладнуюКакКорректировкаРеализации(Объект,Прокси,Ошибка);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Результат = ОтправитьПриходнуюНакладнуюКакПриход(Объект,Прокси,Ошибка);
		КонецЕсли;
	Иначе
		Если ТипЗнч(Объект.Грузоотправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			Если Объект.Грузоотправитель.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает Тогда
				Если ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
					Результат = ОтправитьВозвратнаяНакладнаяОтПокупателяКакPOSU(Объект,Ошибка);
				Иначе
					Результат = ОтправитьПриходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка);
				КонецЕсли;
			Иначе
				Результат = ОтправитьПриходнуюНакладнуюКакПриход(Объект,Прокси,Ошибка);
				Если ЕстьРасхожденияВКоличествеПрихода(Объект) Тогда
					Результат = ОтправитьПриходнуюНакладнуюКакКорректировкаРеализации(Объект,Прокси,Ошибка);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Результат = ОтправитьПриходнуюНакладнуюКакПриход(Объект,Прокси,Ошибка);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ЕстьРасхожденияВКоличествеПрихода(Объект)
	Результат = Ложь;
	Для каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество <> Строка.КоличествоПоДокументу Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции	

Функция ОтправитьПриходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
	InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
	InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
	ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
	
	ПакетInvAdjustDesc.dc_dest_id = ПолучитьКодЛокации(Объект.Грузоотправитель);
	to_disposition = "ATS";
	КодКоррекцииТрансфер = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодКоррекцииТрансфер);
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетInvAdjustDtl.to_disposition = to_disposition;
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = КодКоррекцииТрансфер;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,"PN"+Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/XTsfDesc").КорневыеСвойства;
	XTsfDesc = КорневыеСвойства.Получить("XTsfDesc").Тип;
	XTsfDtl = КорневыеСвойства.Получить("XTsfDtl").Тип;
	ПакетXTsfDesc = ФабрикаXDTO.Создать(XTsfDesc);
	Если НЕ ЗначениеЗаполнено(Объект.НомерRMS) Тогда
		//{ СИТЕК БрыляковЕЮ 2015-04-30  
		Izh_ОбменДанными.УстановитьОбменДаннымиЗагрузка(Объект);
		// СИТЕК БрыляковЕЮ 2015-04-30 }
		Объект.НомерRMS = Прокси.getNewTransferNumber();
		Объект.Записать();
	КонецЕсли;	
	ПакетXTsfDesc.tsf_no = Объект.НомерRMS;
	ПакетXTsfDesc.from_loc_type = ?(Объект.Грузоотправитель.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
	ПакетXTsfDesc.from_loc = ПолучитьКодЛокации(Объект.Грузоотправитель);
	ПакетXTsfDesc.to_loc_type = ?(Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
	ПакетXTsfDesc.to_loc = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
	//ПакетXTsfDesc.delivery_date = RibData(Объект.Дата);
	ПакетXTsfDesc.tsf_type = "AIP";
	//ПакетXTsfDesc.tsf_type = "EG";
	
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ПакетXTsfDtl = ФабрикаXDTO.Создать(XTsfDtl);
		ПакетXTsfDtl.item = СокрЛП(Строка.Номенклатура.Код);
		ПакетXTsfDtl.tsf_qty = Строка.Количество*Строка.Коэффициент;
		ПакетXTsfDtl.supp_pack_size = Строка.Коэффициент;
		//ПакетXTsfDtl.inv_status = "0";
		//ПакетXTsfDtl.unit_cost = Строка.Цена;
		
		ПакетXTsfDesc.XTsfDtl.Добавить(ПакетXTsfDtl);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетXTsfDesc,"XTsfDesc","XTsf","XTsfCre");
	Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ASNOutDesc").КорневыеСвойства;
	ASNOutDesc = КорневыеСвойства.Получить("ASNOutDesc").Тип;
	ASNOutCtn = КорневыеСвойства.Получить("ASNOutCtn").Тип;
	ASNOutDistro = КорневыеСвойства.Получить("ASNOutDistro").Тип;
	ASNOutItem = КорневыеСвойства.Получить("ASNOutItem").Тип;
	ПакетASNOutDesc = ФабрикаXDTO.Создать(ASNOutDesc);
	ПакетASNOutDesc.to_location = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
	ПакетASNOutDesc.from_location = Формат(Объект.Грузоотправитель.Код,"ЧГ=");
	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
	//	ПакетASNOutDesc.asn_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
	//Иначе
	//ПакетASNOutDesc.asn_nbr = СокрЛП(Объект.Номер)+Сред(Год(Объект.Дата),3);
	//КонецЕсли;	
	ПакетASNOutDesc.asn_nbr = Объект.НомерRMS;
	ПакетASNOutDesc.asn_type = "C";
	ПакетASNOutDesc.container_qty = "1";
	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
	//	ПакетASNOutDesc.bol_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
	//Иначе
	ПакетASNOutDesc.bol_nbr = Объект.НомерRMS;
	//КонецЕсли;	
	ПакетASNOutDesc.shipment_date = RibData(Объект.Дата);
	ПакетASNOutDesc.ship_address1 = "";
	ПакетASNOutDesc.ship_address2 = "";
	ПакетASNOutDesc.ship_address3 = "";
	ПакетASNOutDesc.ship_address4 = "";
	ПакетASNOutDesc.ship_address5 = "";
	ПакетASNOutDesc.ship_city = "";
	ПакетASNOutDesc.ship_state = "";
	ПакетASNOutDesc.ship_zip = "";
	ПакетASNOutDesc.ship_country_id = СокрЛП(Объект.Грузоотправитель.Страна.Код);
	ПакетASNOutDesc.trailer_nbr = "";
	ПакетASNOutDesc.seal_nbr = "";
	ПакетASNOutDesc.carrier_code = "";
	ПакетASNOutDesc.transshipment_nbr = "";
	
	
	ПакетASNOutDistro = ФабрикаXDTO.Создать(ASNOutDistro);
	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
	//	ПакетASNOutDistro.distro_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
	//Иначе
	ПакетASNOutDistro.distro_nbr = Объект.НомерRMS;
	//КонецЕсли;	
	ПакетASNOutDistro.distro_doc_type = "T";
	ПакетASNOutDistro.customer_order_nbr = ""; 
	ПакетASNOutDistro.consumer_direct = ""; 
	
	ПакетASNOutCtn = ФабрикаXDTO.Создать(ASNOutCtn);
	final_location = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
	ПакетASNOutCtn.final_location = final_location;
	ПакетASNOutCtn.container_id = "0";
	ПакетASNOutCtn.container_weight = "0";
	ПакетASNOutCtn.container_length = "0";
	ПакетASNOutCtn.container_width = "0";
	ПакетASNOutCtn.container_height = "0";
	ПакетASNOutCtn.container_cube = "0";
	ПакетASNOutCtn.expedite_flag = "N"; 
	ПакетASNOutCtn.rma_nbr = ""; 
	ПакетASNOutCtn.tracking_nbr = ""; 
	ПакетASNOutCtn.freight_charge = "0";
	ПакетASNOutCtn.master_container_id = ""; 
	
	from_disposition = "ATS";
	
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ПакетASNOutItem = ФабрикаXDTO.Создать(ASNOutItem);
		ПакетASNOutItem.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетASNOutItem.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетASNOutItem.final_location = final_location;
		ПакетASNOutItem.priority_level = "0";
		ПакетASNOutItem.order_line_nbr = "0";
		ПакетASNOutItem.container_qty = "1";
		ПакетASNOutItem.lot_nbr = ""; 
		ПакетASNOutItem.from_disposition = from_disposition; 
		ПакетASNOutItem.to_disposition = ""; 
		ПакетASNOutItem.voucher_number = ""; 
		
		ПакетASNOutCtn.ASNOutItem.Добавить(ПакетASNOutItem);
	КонецЦикла;
	ПакетASNOutDistro.ASNOutCtn.Добавить(ПакетASNOutCtn);
	ПакетASNOutDesc.ASNOutDistro.Добавить(ПакетASNOutDistro);
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетASNOutDesc,"ASNOutDesc","ASNOut","ASNOutCre");
	Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьПриходнуюНакладнуюКакПриход(Объект,Прокси,Ошибка)
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/XOrderDesc").КорневыеСвойства;
		XOrderDesc = КорневыеСвойства.Получить("XOrderDesc").Тип;
		XOrderDtl = КорневыеСвойства.Получить("XOrderDtl").Тип;
		ПакетXOrderDesc = ФабрикаXDTO.Создать(XOrderDesc);
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерRMS) Тогда
			Объект.НомерRMS = Прокси.getNewOrderNumber();
			//{ СИТЕК БрыляковЕЮ 2015-04-30  
			Izh_ОбменДанными.УстановитьОбменДаннымиЗагрузка(Объект);
			// СИТЕК БрыляковЕЮ 2015-04-30 }
			Объект.Записать();
		КонецЕсли;
		
		ПакетXOrderDesc.order_no = Объект.НомерRMS;
		ПакетXOrderDesc.supplier = Формат(Объект.Контрагент.Код,"ЧГ=");
		ПакетXOrderDesc.currency_code = Объект.Валюта.Наименование;
		ПакетXOrderDesc.terms = "1";
		//ПакетXOrderDesc.not_before_date = RibData(Объект.ДатаПоставкиОт);
		//ПакетXOrderDesc.not_after_date = RibData(Объект.ДатаПоставкиДо);
		ПакетXOrderDesc.status = "A";
		ПакетXOrderDesc.exchange_rate = Объект.Курс;
		ПакетXOrderDesc.include_on_ord_ind = "N";
		ПакетXOrderDesc.written_date = RibData(Объект.Дата);
		ПакетXOrderDesc.orig_ind = "7";
		ПакетXOrderDesc.edi_po_ind = "N";
		ПакетXOrderDesc.pre_mark_ind = "N";
		ПакетXOrderDesc.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетXOrderDesc.comment_desc = Объект.Номер;
		
		location = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
		Для Каждого Строка Из Объект.Состав Цикл
			Если Строка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			ПакетXOrderDtl = ФабрикаXDTO.Создать(XOrderDtl);
			ПакетXOrderDtl.item = СокрЛП(Строка.Номенклатура.Код);
			ПакетXOrderDtl.location = location;
			ПакетXOrderDtl.unit_cost = ПолучитьЦенуДляОтправки(Строка);
			ПакетXOrderDtl.origin_country_id = ПолучитьСтрануТовараИКонтрагента(Строка.Номенклатура,Объект.Контрагент);
			ПакетXOrderDtl.supp_pack_size = Строка.Коэффициент;
			ПакетXOrderDtl.qty_ordered = Строка.Количество*Строка.Коэффициент;
			ПакетXOrderDtl.location_type = ?(Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
			ПакетXOrderDtl.cancel_ind = "N";
			ПакетXOrderDtl.reinstate_ind = "N";
			ПакетXOrderDesc.XOrderDtl.Добавить(ПакетXOrderDtl);
		КонецЦикла;
		
		RibMessages = УпаковатьВСообщение(Объект.Дата,ПакетXOrderDesc.order_no,ПакетXOrderDesc,"XOrderDesc","XOrder","XOrderCre");
		Результат = ОтправитьСообщение(RibMessages,Прокси);
		Ошибка = RibMessages;
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ReceiptDesc").КорневыеСвойства;
	ReceiptDesc = КорневыеСвойства.Получить("ReceiptDesc").Тип;
	Receipt = КорневыеСвойства.Получить("Receipt").Тип;
	ReceiptDtl = КорневыеСвойства.Получить("ReceiptDtl").Тип;
	ПакетReceiptDesc = ФабрикаXDTO.Создать(ReceiptDesc);
	ПакетReceiptDesc.appt_nbr = "0";
	ПакетReceipt = ФабрикаXDTO.Создать(Receipt);
	
	ПакетReceipt.dc_dest_id = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
	ПакетReceipt.po_nbr = Объект.НомерRMS;
	Если ТипЗнч(Объект.Грузоотправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ПакетReceipt.document_type = "T";
		//ПакетReceipt.asn_nbr = СОкрЛП(Объект.Номер);
		ПакетReceipt.asn_nbr = Объект.НомерRMS;
	Иначе
		ПакетReceipt.document_type = "P";
	КонецЕсли;
	ПакетReceipt.receipt_type = "SK";
	Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
		to_disposition = "UTS";
	Иначе
		to_disposition = "ATS";
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПакетReceiptDtl = ФабрикаXDTO.Создать(ReceiptDtl);
		ПакетReceiptDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетReceiptDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетReceiptDtl.receipt_xactn_type = "R";
		ПакетReceiptDtl.receipt_date = RibData(Объект.Дата);
		ПакетReceiptDtl.receipt_nbr = Объект.Номер;
		ПакетReceiptDtl.dest_id = "";
		ПакетReceiptDtl.container_id = "0";
		
		//ПакетReceiptDtl.distro_nbr = "0";
		//ПакетReceiptDtl.distro_doc_type = "";
		ПакетReceiptDtl.to_disposition = to_disposition;
		//ПакетReceiptDtl.from_disposition = ""; 
		//ПакетReceiptDtl.to_wip = ""; 
		//ПакетReceiptDtl.from_wip = ""; 
		//ПакетReceiptDtl.to_trouble = ""; 
		//ПакетReceiptDtl.from_trouble = ""; 
		ПакетReceiptDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		
		
		
		Если НЕ ТипЗнч(Объект.Грузоотправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			ПакетReceiptDtl.unit_cost = ПолучитьЦенуДляОтправки(Строка);
			ПакетReceiptDtl.shipped_qty = Строка.КоличествоПоДокументу*Строка.Коэффициент;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Вес) И ЗначениеЗаполнено(Строка.ЕдиницаВеса) Тогда
			ПакетReceiptDtl.weight = Строка.Вес;
			ПакетReceiptDtl.weight_uom = Строка.ЕдиницаВеса.Наименование;
		КонецЕсли;
		ПакетReceipt.ReceiptDtl.Добавить(ПакетReceiptDtl);
	КонецЦикла;
	
	ПакетReceiptDesc.Receipt.Добавить(ПакетReceipt);
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетReceiptDesc,"ReceiptDesc","Receiving","ReceiptCre");
	Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьПриходнуюНакладнуюПоЗаказу(Объект,Прокси,Ошибка)
	Если Объект.Состав.Итог("Количество")=0 Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.НомерRMS) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДокОснование.НомерRMS) Тогда
			Возврат Ложь;
		Иначе
			Если Найти(Объект.ДокОснование.НомерRMS,"-")>0 Тогда
				Объект.НомерRMS = Сред(Объект.ДокОснование.НомерRMS,Найти(Объект.ДокОснование.НомерRMS,"-")+1);
			Иначе
				Объект.НомерRMS = Сред(Объект.ДокОснование.НомерRMS,3);
			КонецЕсли;
			//{ СИТЕК БрыляковЕЮ 2015-04-30  
			Izh_ОбменДанными.УстановитьОбменДаннымиЗагрузка(Объект);
			// СИТЕК БрыляковЕЮ 2015-04-30 }
			Объект.Записать();
		КонецЕсли;
	КонецЕсли;
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ReceiptDesc").КорневыеСвойства;
	ReceiptDesc = КорневыеСвойства.Получить("ReceiptDesc").Тип;
	Receipt = КорневыеСвойства.Получить("Receipt").Тип;
	ReceiptDtl = КорневыеСвойства.Получить("ReceiptDtl").Тип;
	ПакетReceiptDesc = ФабрикаXDTO.Создать(ReceiptDesc);
	ПакетReceiptDesc.appt_nbr = "0";
	ПакетReceipt = ФабрикаXDTO.Создать(Receipt);
	
	ПакетReceipt.dc_dest_id = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
	ПакетReceipt.po_nbr = Объект.НомерRMS;
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ПакетReceipt.document_type = "T";
		//ПакетReceipt.asn_nbr = СокрЛП(Объект.НомерДокумента);
	Иначе
		ПакетReceipt.document_type = "P";
	КонецЕсли;
	ПакетReceipt.receipt_type = "SK";
	Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
		to_disposition = "UTS";
	Иначе
		to_disposition = "ATS";
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПакетReceiptDtl = ФабрикаXDTO.Создать(ReceiptDtl);
		ПакетReceiptDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетReceiptDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетReceiptDtl.receipt_xactn_type = "R";
		ПакетReceiptDtl.receipt_date = RibData(Объект.Дата);
		ПакетReceiptDtl.receipt_nbr = Объект.Номер;
		//ПакетReceiptDtl.dest_id = "";
		ПакетReceiptDtl.container_id = "0";
		//ПакетReceiptDtl.distro_nbr = "0";
		//ПакетReceiptDtl.distro_doc_type = "";
		ПакетReceiptDtl.to_disposition = to_disposition;
		//ПакетReceiptDtl.from_disposition = ""; 
		//ПакетReceiptDtl.to_wip = ""; 
		//ПакетReceiptDtl.from_wip = ""; 
		//ПакетReceiptDtl.to_trouble = ""; 
		//ПакетReceiptDtl.from_trouble = ""; 
		ПакетReceiptDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		
		
		Если НЕ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			ПакетReceiptDtl.unit_cost = ПолучитьЦенуДляОтправки(Строка);
			ПакетReceiptDtl.shipped_qty = Строка.КоличествоПоДокументу*Строка.Коэффициент;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Вес) И ЗначениеЗаполнено(Строка.ЕдиницаВеса) Тогда
			ПакетReceiptDtl.weight = Строка.Вес;
			ПакетReceiptDtl.weight_uom = Строка.ЕдиницаВеса.Наименование;
		КонецЕсли;
		ПакетReceipt.ReceiptDtl.Добавить(ПакетReceiptDtl);
	КонецЦикла;
	
	ПакетReceiptDesc.Receipt.Добавить(ПакетReceipt);
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетReceiptDesc,"ReceiptDesc","Receiving","ReceiptCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьПриходнуюНакладнуюКакКорректировкаРеализации(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_КорректировкаРеализации");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.РежимКорректировки = "СогласованноеИзменение";
	
	
	Пакет.ДокументРеализации = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.ДокументРеализацииТип = "РасходнаяНакладная";
	
	
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.ТипКорректировки = "КорректировкаРеализации";
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_КорректировкаРеализации_Состав");
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС            = Строка.СтавкаНДС.Ставка;
		
		ПакетСостав.Количество           = Строка.Количество;
		ПакетСостав.Сумма                = ПолучитьСуммуДляОтправки(Строка);
		ПакетСостав.СуммаНДС             = Строка.СуммаНДС;
		
		ПакетСостав.Номенклатура  = СокрЛП(Строка.Номенклатура.Код);
		ПакетСостав.ЕдиницаИзмерения  = СокрЛП(Строка.ЕдиницаИзмерения.Наименование);
		ПакетСостав.Коэффициент  = Строка.Коэффициент;
		ПакетСостав.Цена                 = ПолучитьЦенуДляОтправки(Строка);
		
		ПакетСостав.Вес  = Строка.Вес;
		ПакетСостав.ЕдиницаВеса  = СокрЛП(Строка.ЕдиницаВеса.Наименование);
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	Если ТипЗнч(Объект.Грузоотправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Локация = Объект.Грузоотправитель;
	Иначе
		Локация = Объект.Контрагент;
	КонецЕсли;	
	
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_КорректировкаРеализации","MovementAdj","MovementAdjCre",Формат(Локация.Код,"ЧГ="));
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	Возврат Результат;
КонецФункции


Функция ОтправитьКорректировкаПоступления(Объект,Прокси,Ошибка)
	Если НетИзмененийВКорректировке(Объект.Ссылка,"КорректировкаПоступления") Тогда
		Возврат Истина;
	КонецЕсли;	
	ДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Если НЕ ЗначениеЗаполнено(ДокументПоступления.НомерRMS) Тогда
			Возврат Ложь;
		КонецЕсли;	
		КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ReceiptDesc").КорневыеСвойства;
		ReceiptDesc = КорневыеСвойства.Получить("ReceiptDesc").Тип;
		Receipt = КорневыеСвойства.Получить("Receipt").Тип;
		ReceiptDtl = КорневыеСвойства.Получить("ReceiptDtl").Тип;
		ПакетReceiptDesc = ФабрикаXDTO.Создать(ReceiptDesc);
		ПакетReceiptDesc.appt_nbr = "0";
		ПакетReceipt = ФабрикаXDTO.Создать(Receipt);
		
		
		
		ПакетReceipt.dc_dest_id = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
		ПакетReceipt.po_nbr = ДокументПоступления.НомерRMS;
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			ПакетReceipt.document_type = "T";
			//ПакетReceipt.asn_nbr = СокрЛП(Объект.НомерДокумента);
			ПакетReceipt.asn_nbr = ДокументПоступления.НомерRMS;
		Иначе
			ПакетReceipt.document_type = "P";
		КонецЕсли;
		ПакетReceipt.receipt_type = "SK";
		Если ДокументПоступления.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
			to_disposition = "UTS";
		Иначе
			to_disposition = "ATS";
		КонецЕсли;	
		
		Для Каждого Строка Из Объект.Состав Цикл
			Если Строка.Количество - Строка.КоличествоДоИзменения = 0 Тогда
				Продолжить;
			КонецЕсли;	
			ПакетReceiptDtl = ФабрикаXDTO.Создать(ReceiptDtl);
			ПакетReceiptDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
			//ПакетReceiptDtl.unit_qty = ?(Строка.Количество - Строка.КоличествоДоИзменения > 0,Строка.Количество - Строка.КоличествоДоИзменения,Строка.КоличествоДоИзменения - Строка.Количество);
			ПакетReceiptDtl.unit_qty = Строка.Количество*Строка.Коэффициент - Строка.КоличествоДоИзменения*Строка.Коэффициент;
			ПакетReceiptDtl.receipt_xactn_type = "A";
			ПакетReceiptDtl.receipt_date = RibData(ДокументПоступления.Дата);
			ПакетReceiptDtl.receipt_nbr = ДокументПоступления.Номер;
			//ПакетReceiptDtl.dest_id = "";
			ПакетReceiptDtl.container_id = "0";
			//ПакетReceiptDtl.distro_nbr = "0";
			//ПакетReceiptDtl.distro_doc_type = "";
			ПакетReceiptDtl.to_disposition = to_disposition;
			//Если Строка.Количество - Строка.КоличествоДоИзменения > 0 Тогда
			//	ПакетReceiptDtl.to_disposition = to_disposition;
			//Иначе
			//	ПакетReceiptDtl.from_disposition = to_disposition; 
			//КонецЕсли;	
			//ПакетReceiptDtl.from_disposition = ""; 
			//ПакетReceiptDtl.to_wip = ""; 
			//ПакетReceiptDtl.from_wip = ""; 
			//ПакетReceiptDtl.to_trouble = ""; 
			//ПакетReceiptDtl.from_trouble = ""; 
			ПакетReceiptDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
			
			
			Если НЕ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				ПакетReceiptDtl.unit_cost = Строка.Цена;
				//ПакетReceiptDtl.shipped_qty = Строка.КоличествоПоДокументу*Строка.Коэффициент;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Вес) И ЗначениеЗаполнено(Строка.ЕдиницаВеса) Тогда
				ПакетReceiptDtl.weight = Строка.Вес;
				ПакетReceiptDtl.weight_uom = Строка.ЕдиницаВеса.Наименование;
			КонецЕсли;	
			ПакетReceipt.ReceiptDtl.Добавить(ПакетReceiptDtl);
		КонецЦикла;
		
		ПакетReceiptDesc.Receipt.Добавить(ПакетReceipt);
		
		RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетReceiptDesc,"ReceiptDesc","Receiving","ReceiptMod");
		Результат = ОтправитьСообщение(RibMessages,Прокси);
		Ошибка = RibMessages;
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ВозвратнаяНакладнаяОтПокупателя") Тогда
		Дата = Формат(Объект.Дата,"ДФ=yyyyMMdd");
		Час = ДобавитьСлева(Час(Объект.Дата),2,0);
		Минута = ДобавитьСлева(Минута(Объект.Дата),2,0);
		Секунда = ДобавитьСлева(Секунда(Объект.Дата),2,0);
		
		ФорматДаты = Дата+Час+Минута+Секунда;
		
		стрИмяФайла = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), "VN"+ПреобразоватьНомер(Объект.Номер)+ФорматДаты+"POSUpld_"+Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="));
		Текст = Новый ЗаписьТекста(стрИмяФайла,КодировкаТекста.ANSI,"",,"");
		
		НомерСтроки = 1;
		
		ВерсияRMS = Константы.ВерсияRMS.Получить();
		
		ВалютаУчета = СокрЛП(Объект.СтруктурнаяЕдиница.Валюта.Наименование);
		
		//FHEAD
		Текст.ЗаписатьСтроку("FHEAD");
		Текст.ЗаписатьСтроку(ДобавитьСлева("1",10,0));//Number(10)	Задается внешней системой	ID текущей строки файла.	Y	Справа/0
		Текст.ЗаписатьСтроку("POSU");//Char(4)	RTLG	Идентифицирует файл как «Oracle Retail TLOG».	Y	Слева/Пробел
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Дата создания	Дата и время создания файла внешней  системой (YYYYMMDDHHMMSS).	Y	Слева/None
		Текст.ЗаписатьСтроку(ДобавитьСправа(СтрЗаменить(Формат(Объект.СтруктурнаяЕдиница.Код,"ЧРГ=','"),",",""),10," "));//Char(10)	Задается внешней системой	Идентификатор склада или магазина имагазина	Y	Слева/None
		Текст.ЗаписатьСтроку("Y");//Char(1)	vat include indicator from location- dummy
		Текст.ЗаписатьСтроку("0001");//Number(4)	vat region	from location - dummy
		Текст.ЗаписатьСтроку(ВалютаУчета);//Char(3)	currency code from location - dummy
		Текст.ЗаписатьСтроку("2",Символ(10));//Number(1)	currency retail decimals from location - dummy
		
		Для Каждого СтрокаСостава Из Объект.Состав Цикл
			Если СтрокаСостава.Количество - СтрокаСостава.КоличествоДоИзменения = 0 Тогда
				Продолжить;
			КонецЕсли;	
			НомерСтроки = НомерСтроки + 1;
			Текст.ЗаписатьСтроку("THEAD");
			Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
			Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Transaction date	Дата POS- транзакции  (YYYYMMDDHHMMSS).	Y	Слева/None
			Текст.ЗаписатьСтроку("ITM");//Char(3) item type - REF or ITM - dummy
			Если Найти(СтрокаСостава.Номенклатура.Код,"У")>0 Тогда 
				Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.Номенклатура.Код),24," "));//Char(25)	Идентификатор товара	Идентификатор продаваемого товара.	N	Слева/Пробел
			Иначе
				Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.Номенклатура.Код),25," "));//Char(25)	Идентификатор товара	Идентификатор продаваемого товара.	N	Слева/Пробел
			КонецЕсли;	
			dept = ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,3).Код;
			Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(Сред(dept,Найти(dept,":")+1)),4,"0"));//Number(4)	Идентификатор департамента к которому принадлежит товар. Заполняется программой saimptlog. 	N	Справа/Blank
			Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,2).Код),4,"0"));//Number(4)	Класс товара	Класс продаваемого или возвращаемого товара. Нет требует заполнения ретейлером, заполняется модулем Oracle Retail sales audit.
			Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,1).Код),4,"0"));//Number(4)	Подкласс товара	Подкласс продаваемого или возвращаемого товара. Не требует заполнения ретейлером, populated заполняется модулем Oracle Retail sales audit.
			Если СтрокаСостава.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Набор ИЛИ СтрокаСостава.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.НаборПоставщика Тогда
				Набор = "Y";
			Иначе
				Набор = "N";
			КонецЕсли;	
			Текст.ЗаписатьСтроку(Набор);//Char(1)	pack indicator from item - dummy
			Текст.ЗаписатьСтроку("1");//Number (1)	item level from item - dummy
			Текст.ЗаписатьСтроку("1");//Number (1)	transaction level from item - dummy
			Текст.ЗаписатьСтроку(ДобавитьСправа("",6," "));//Char (6)	wastage type from item - dummy
			Текст.ЗаписатьСтроку(ДобавитьСправа("",12,"0"));//Number (12)	wastage percent - dummy
			Текст.ЗаписатьСтроку("R");//Char(1)	Значение из списка «SASI» code_type.	Статус товара в транзакции, V - аннулирован, S - продан, R -  возвращен.	Y	Слева/Пробел
			Текст.ЗаписатьСтроку("N");//Char(1)	Значение из списка «YSNO» code type.	Указывает, является ли товар частью прямой поставки (drop shipment)	Y	Слева/None
			Количество = СтрокаСостава.Количество - СтрокаСостава.КоличествоДоИзменения;
			Количество = ?(Количество>0,Количество,-Количество);
			Текст.ЗаписатьСтроку(СтрЗаменить(Формат(Количество,"ЧЦ=12; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=00000000,0000; ЧВН="),",",""));//Number(12)		Количество проданных товаров, 4 цифры после запятой.	Y	Справа/0
			Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование),4," "));//Char(4)		Единица измерения проданного товара 	Y	Слева/None
			Знак = ?(СтрокаСостава.Количество - СтрокаСостава.КоличествоДоИзменения>0,"P","N");
			Текст.ЗаписатьСтроку(Знак);//Char(1)	Значение из списка «SIGN» code_type.	Знак количества	Y	Слева/None
			Сумма = СтрокаСостава.Сумма - СтрокаСостава.СуммаДоИзменения;
			Сумма = ?(Сумма>0,Сумма,-Сумма);
			Текст.ЗаписатьСтроку(СтрЗаменить(Формат(Сумма,"ЧЦ=20; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=0000000000000000,0000; ЧВН="),",",""));//Number(20)		Total sales value  с 4 значащими цифрами после запятой. Заполняется ретейлером для TOTAL транзакций, Заполняется Oracle Retail Sales Audit для SALE, RETURN транзакций.	Y если транзакция
			Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Last date time midified. (YYYYMMDDHHMMSS) - dummy
			Текст.ЗаписатьСтроку("N");//Char(1)	Допустимые значения: ‘Y’,’N’	Указывает, является ли товар «catchweight» (полученный вес) 		Слева/None
			Текст.ЗаписатьСтроку(ДобавитьСлева("",12," "));//Number (12)	total weight (if catchweight item ind = Y) - dummy
			Если ВерсияRMS >= 13.2 Тогда
				Текст.ЗаписатьСтроку(" ");//Char(1)	tran type for ReSA A,D,NULL  - dummy
				СуммаНДС = СтрокаСостава.СуммаНДС - СтрокаСостава.СуммаНДСДоИзменения;
				СуммаНДС = ?(СуммаНДС>0,СуммаНДС,-СуммаНДС);
				Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СуммаНДС,"ЧЦ=20; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=0000000000000000,0000; ЧВН="),",",""),Символ(10));//Number(20)		Total TAX value  с 4 значащими цифрами после запятой. Заполняется ретейлером для TOTAL транзакций, Заполняется Oracle Retail Sales Audit для SALE, RETURN транзакций.	Y если транзакция
			Иначе	
				Текст.ЗаписатьСтроку(" ",Символ(10));//Char(1)	tran type for ReSA A,D,NULL  - dummy
			КонецЕсли;
			
			//НомерСтроки = НомерСтроки + 1;
			//Текст.ЗаписатьСтроку("TDETL");
			//Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
			//Текст.ЗаписатьСтроку("");//Char(6)	code for the promotion type from code_detail where code_type='PRMT'
			//Текст.ЗаписатьСтроку("");//Number (10)	promotion number - dummy
			//Текст.ЗаписатьСтроку("");//Number (12)	Sales quantity sold for this type of promotion (4 decimals)
			//Текст.ЗаписатьСтроку("");//Number (20)	Sales value for this type of promotion (4 decimals)
			//Текст.ЗаписатьСтроку("");//Number (20)	Discount value for this type of promotion (4 decimals)
			//Текст.ЗаписатьСтроку("");//Number (10)	Promotion component. Links the promotion to additional pricing attributes (4 decimals)
			
			//TTAIL
			НомерСтроки = НомерСтроки + 1;
			Текст.ЗаписатьСтроку("TTAIL");
			Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
			Текст.ЗаписатьСтроку(ДобавитьСлева(0,6,0),Символ(10));//Number(6)		Number of T_DETL records in this transaction set. Количество записей в текущей транзакции (только записи между trans head & tail)		
		КонецЦикла;	
		//FTAIL
		НомерСтроки = НомерСтроки + 1;
		Текст.ЗаписатьСтроку("FTAIL");
		Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки	Y	Справа/0
		Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки-2,"ЧГ="),10,0),Символ(10));//Number(10)		Количество транзакций в текущем файле (только записи между file head & tail)	Y	Справа/0
		Текст.ЗаписатьСтроку("",Символ(10));
		Текст.Закрыть();
		Результат = Истина;
		Попытка
			FTP = Константы.FTPRMS.Получить();
			ПроксиСервер = Константы.НастройкаПроксиСервера.Получить().Получить();
			
			Если Найти(FTP.URL,"://") Тогда
				URL = Сред(FTP.URL,Найти(FTP.URL,"://")+3);
			Иначе
				URL = FTP.URL;
			КонецЕсли;	
			
			Соединение = Новый FTPСоединение(URL, FTP.Порт, FTP.Имя, FTP.Пароль, ПроксиСервер, FTP.ПасссивныйРежим, FTP.Таймаут);
			Соединение.УстановитьТекущийКаталог(FTP.ИмяКаталога);
			//Если Соединение.НайтиФайлы("pos").Количество() = 0 Тогда
			//	Соединение.СоздатьКаталог("pos");
			//КонецЕсли;	
			//Соединение.УстановитьТекущийКаталог("pos");
			стрИмяФайлаПриемника = "POSU_"+Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=")+"_VN"+ПреобразоватьНомер(Объект.Номер)+"_"+ФорматДаты+".DAT";
			
			Соединение.Записать(стрИмяФайла, стрИмяФайлаПриемника);
			
			Соединение = Неопределено;
		Исключение
			Результат = Ложь;
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		Результат = Истина;
	КонецЕсли;	
	Возврат Результат;
КонецФункции

Функция ОтправитьКорректировкаРеализации(Объект,Прокси,Ошибка)
	Если НетИзмененийВКорректировке(Объект.Ссылка,"КорректировкаРеализации") Тогда
		Возврат Истина;
	КонецЕсли;
	Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		//ЗаписатьНомерТрансфера(Объект,Прокси);
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			Если Объект.Контрагент.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает Тогда
				Результат = ОтправитьКорректировкаРеализацииКакТрансфер(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьКорректировкаРеализацииКакПриход(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьКорректировкаРеализацииКакКоррекцияЗапасов(Объект,Прокси,Ошибка);
			Иначе
				Результат = ОтправитьКорректировкаРеализацииКакТрансфер(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьКорректировкаРеализацииКакПриход(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьКорректировкаРеализацииКакКорректировкуПриемки(Объект,Прокси,Ошибка);
			КонецЕсли;	
		Иначе
			Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница.ОптоваяЛокация) Тогда
				Объект.Контрагент = Объект.СтруктурнаяЕдиница.ОптоваяЛокация;
				Результат = ОтправитьКорректировкаРеализацииКакПриход(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьКорректировкаРеализацииКакPSU(Объект,Прокси,Ошибка);
			Иначе
				Ошибка = "Не указана структурная единица опта!";
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			Если Объект.Контрагент.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает Тогда
				Результат = ОтправитьКорректировкаРеализацииКакТрансфер(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьКорректировкаРеализацииКакПриход(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьКорректировкаРеализацииКакКоррекцияЗапасов(Объект,Прокси,Ошибка);
			Иначе
				Результат = ОтправитьКорректировкаРеализацииКакТрансфер(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьКорректировкаРеализацииКакПриход(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьКорректировкаРеализацииКакКорректировкуПриемки(Объект,Прокси,Ошибка);
			КонецЕсли;	
		Иначе
			Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница.ОптоваяЛокация) Тогда
				Объект.Контрагент = Объект.СтруктурнаяЕдиница.ОптоваяЛокация;
				Результат = ОтправитьКорректировкаРеализацииКакПриход(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьКорректировкаРеализацииКакPSU(Объект,Прокси,Ошибка);
			Иначе
				Объект.Контрагент = Объект.СтруктурнаяЕдиница;
				Результат = ОтправитьКорректировкаРеализацииКакPSU(Объект,Прокси,Ошибка);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ОтправитьКорректировкаРеализацииКакPSU(Объект,Прокси,Ошибка)
	//Если (ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") И Объект.Контрагент.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает) ИЛИ
	//	ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
	Дата = Формат(Объект.Дата,"ДФ=yyyyMMdd");
	Час = ДобавитьСлева(Час(Объект.Дата),2,0);
	Минута = ДобавитьСлева(Минута(Объект.Дата),2,0);
	Секунда = ДобавитьСлева(Секунда(Объект.Дата),2,0);
	
	ФорматДаты = Дата+Час+Минута+Секунда;
	
	стрИмяФайла = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), "RN"+ПреобразоватьНомер(Объект.Номер)+ФорматДаты+"POSUpld_"+Формат(Объект.Контрагент.Код,"ЧГ="));
	Текст = Новый ЗаписьТекста(стрИмяФайла,КодировкаТекста.ANSI,"",,"");
	
	НомерСтроки = 1;
	
	ВерсияRMS = Константы.ВерсияRMS.Получить();
	
	ВалютаУчета = СокрЛП(Объект.СтруктурнаяЕдиница.Валюта.Наименование);
	
	//Y BEGIN	
	//FHEAD
	Текст.ЗаписатьСтроку("FHEAD");
	Текст.ЗаписатьСтроку(ДобавитьСлева("1",10,0));//Number(10)	Задается внешней системой	ID текущей строки файла.	Y	Справа/0
	Текст.ЗаписатьСтроку("POSU");//Char(4)	RTLG	Идентифицирует файл как «Oracle Retail TLOG».	Y	Слева/Пробел
	Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Дата создания	Дата и время создания файла внешней  системой (YYYYMMDDHHMMSS).	Y	Слева/None
	Текст.ЗаписатьСтроку(ДобавитьСправа(СтрЗаменить(Формат(Объект.Контрагент.Код,"ЧРГ=','"),",",""),10," "));//Char(10)	Задается внешней системой	Идентификатор склада или магазина имагазина	Y	Слева/None
	Текст.ЗаписатьСтроку("Y");//Char(1)	vat include indicator from location- dummy
	Текст.ЗаписатьСтроку("0001");//Number(4)	vat region	from location - dummy
	Текст.ЗаписатьСтроку(ВалютаУчета);//Char(3)	currency code from location - dummy
	Текст.ЗаписатьСтроку("2",Символ(10));//Number(1)	currency retail decimals from location - dummy
	
	Для Каждого СтрокаСостава Из Объект.Состав Цикл
		НомерСтроки = НомерСтроки + 1;
		Текст.ЗаписатьСтроку("THEAD");
		Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Transaction date	Дата POS- транзакции  (YYYYMMDDHHMMSS).	Y	Слева/None
		Текст.ЗаписатьСтроку("ITM");//Char(3) item type - REF or ITM - dummy
		Если Найти(СтрокаСостава.Номенклатура.Код,"У")>0 Тогда 
			Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.Номенклатура.Код),24," "));//Char(25)	Идентификатор товара	Идентификатор продаваемого товара.	N	Слева/Пробел
		Иначе
			Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.Номенклатура.Код),25," "));//Char(25)	Идентификатор товара	Идентификатор продаваемого товара.	N	Слева/Пробел
		КонецЕсли;	
		dept = ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,3).Код;
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(Сред(dept,Найти(dept,":")+1)),4,"0"));//Number(4)	Идентификатор департамента к которому принадлежит товар. Заполняется программой saimptlog. 	N	Справа/Blank
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,2).Код),4,"0"));//Number(4)	Класс товара	Класс продаваемого или возвращаемого товара. Нет требует заполнения ретейлером, заполняется модулем Oracle Retail sales audit.
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,1).Код),4,"0"));//Number(4)	Подкласс товара	Подкласс продаваемого или возвращаемого товара. Не требует заполнения ретейлером, populated заполняется модулем Oracle Retail sales audit.
		Если СтрокаСостава.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Набор ИЛИ СтрокаСостава.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.НаборПоставщика Тогда
			Набор = "Y";
		Иначе
			Набор = "N";
		КонецЕсли;	
		Текст.ЗаписатьСтроку(Набор);//Char(1)	pack indicator from item - dummy
		Текст.ЗаписатьСтроку("1");//Number (1)	item level from item - dummy
		Текст.ЗаписатьСтроку("1");//Number (1)	transaction level from item - dummy
		Текст.ЗаписатьСтроку(ДобавитьСправа("",6," "));//Char (6)	wastage type from item - dummy
		Текст.ЗаписатьСтроку(ДобавитьСправа("",12,"0"));//Number (12)	wastage percent - dummy
		Текст.ЗаписатьСтроку("S");//Char(6)	Значение из списка «SASI» code_type.	Статус товара в транзакции, V - аннулирован, S - продан, R -  возвращен.	Y	Слева/Пробел
		Текст.ЗаписатьСтроку("N");//Char(1)	Значение из списка «YSNO» code type.	Указывает, является ли товар частью прямой поставки (drop shipment)	Y	Слева/None
		
		Количество = СтрокаСостава.Количество - СтрокаСостава.КоличествоДоИзменения;
		Количество = ?(Количество>0,Количество,-Количество);
		Текст.ЗаписатьСтроку(СтрЗаменить(Формат(Количество,"ЧЦ=12; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=00000000,0000; ЧВН="),",",""));//Number(12)		Количество проданных товаров, 4 цифры после запятой.	Y	Справа/0
		Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование),4," "));//Char(4)		Единица измерения проданного товара 	Y	Слева/None
		Знак = ?(СтрокаСостава.Количество - СтрокаСостава.КоличествоДоИзменения>0,"P","N");
		Текст.ЗаписатьСтроку(Знак);//Char(1)	Значение из списка «SIGN» code_type.	Знак количества	Y	Слева/None
		Сумма = СтрокаСостава.Сумма - СтрокаСостава.СуммаДоИзменения;
		Сумма = ?(Сумма>0,Сумма,-Сумма);
		Текст.ЗаписатьСтроку(СтрЗаменить(Формат(Сумма,"ЧЦ=20; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=0000000000000000,0000; ЧВН="),",",""));//Number(20)		Total sales value  с 4 значащими цифрами после запятой. Заполняется ретейлером для TOTAL транзакций, Заполняется Oracle Retail Sales Audit для SALE, RETURN транзакций.	Y если транзакция
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Last date time midified. (YYYYMMDDHHMMSS) - dummy
		Текст.ЗаписатьСтроку("N");//Char(1)	Допустимые значения: ‘Y’,’N’	Указывает, является ли товар «catchweight» (полученный вес) 		Слева/None
		Текст.ЗаписатьСтроку(ДобавитьСлева("",12," "));//Number (12)	total weight (if catchweight item ind = Y) - dummy
		Если ВерсияRMS >= 13.2 Тогда
			Текст.ЗаписатьСтроку(" ");//Char(1)	tran type for ReSA A,D,NULL  - dummy
			СуммаНДС = СтрокаСостава.СуммаНДС - СтрокаСостава.СуммаНДСДоИзменения;
			СуммаНДС = ?(СуммаНДС>0,СуммаНДС,-СуммаНДС);
			Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СуммаНДС,"ЧЦ=20; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=0000000000000000,0000; ЧВН="),",",""),Символ(10));//Number(20)		Total TAX value  с 4 значащими цифрами после запятой. Заполняется ретейлером для TOTAL транзакций, Заполняется Oracle Retail Sales Audit для SALE, RETURN транзакций.	Y если транзакция
		Иначе	
			Текст.ЗаписатьСтроку(" ",Символ(10));//Char(1)	tran type for ReSA A,D,NULL  - dummy
		КонецЕсли;
		
		//НомерСтроки = НомерСтроки + 1;
		//Текст.ЗаписатьСтроку("TDETL");
		//Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		//Текст.ЗаписатьСтроку("");//Char(6)	code for the promotion type from code_detail where code_type='PRMT'
		//Текст.ЗаписатьСтроку("");//Number (10)	promotion number - dummy
		//Текст.ЗаписатьСтроку("");//Number (12)	Sales quantity sold for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (20)	Sales value for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (20)	Discount value for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (10)	Promotion component. Links the promotion to additional pricing attributes (4 decimals)
		
		//TTAIL
		НомерСтроки = НомерСтроки + 1;
		Текст.ЗаписатьСтроку("TTAIL");
		Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		Текст.ЗаписатьСтроку(ДобавитьСлева(0,6,0),Символ(10));//Number(6)		Number of T_DETL records in this transaction set. Количество записей в текущей транзакции (только записи между trans head & tail)		
	КонецЦикла;	
	//FTAIL
	НомерСтроки = НомерСтроки + 1;
	Текст.ЗаписатьСтроку("FTAIL");
	Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки	Y	Справа/0
	Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки - 2,10,0),Символ(10));//Number(10)		Количество транзакций в текущем файле (только записи между file head & tail)	Y	Справа/0
	Текст.ЗаписатьСтроку("",Символ(10));
	Текст.Закрыть();
	Результат = Истина;
	Попытка
		FTP = Константы.FTPRMS.Получить();
		ПроксиСервер = Константы.НастройкаПроксиСервера.Получить().Получить();
		
		Если Найти(FTP.URL,"://") Тогда
			URL = Сред(FTP.URL,Найти(FTP.URL,"://")+3);
		Иначе
			URL = FTP.URL;
		КонецЕсли;	
		
		Соединение = Новый FTPСоединение(URL, FTP.Порт, FTP.Имя, FTP.Пароль, ПроксиСервер, FTP.ПасссивныйРежим, FTP.Таймаут);
		Соединение.УстановитьТекущийКаталог(FTP.ИмяКаталога);
		//Если Соединение.НайтиФайлы("pos").Количество() = 0 Тогда
		//	Соединение.СоздатьКаталог("pos");
		//КонецЕсли;	
		//Соединение.УстановитьТекущийКаталог("pos");
		
		//popn+
		//стрИмяФайлаПриемника = "POSU_"+Формат(Объект.Контрагент.Код,"ЧГ=")+"_RN"+ПреобразоватьНомер(Объект.Номер)+"_"+ФорматДаты+".DAT";
		//ДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Истина);
		//КодЛокации = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,ДокументРеализации.Склад);
		//стрИмяФайлаПриемника = "POSU_"+Формат(КодЛокации,"ЧГ=")+"_RN"+ПреобразоватьНомер(Объект.Номер)+"_"+ФорматДаты+".DAT";
		стрИмяФайлаПриемника = "POSU_"+Формат(Объект.Контрагент.Код,"ЧГ=")+"_RN"+ПреобразоватьНомер(Объект.Номер)+"_"+ФорматДаты+".DAT";
		//popn-
		
		Соединение.Записать(стрИмяФайла, стрИмяФайлаПриемника);
		
		Соединение = Неопределено;
	Исключение
		Результат = Ложь;
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ОтправитьКорректировкаРеализацииКакТрансфер(Объект,Прокси,Ошибка)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/XTsfDesc").КорневыеСвойства;
	XTsfDesc = КорневыеСвойства.Получить("XTsfDesc").Тип;
	XTsfDtl = КорневыеСвойства.Получить("XTsfDtl").Тип;
	ПакетXTsfDesc = ФабрикаXDTO.Создать(XTsfDesc);
	//Если НЕ ЗначениеЗаполнено(Объект.НомерRMS) Тогда
	//	Объект.НомерRMS = Прокси.getNewTransferNumber();
	//	Объект.Записать();
	//КонецЕсли;	
	ДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Истина);
	
	ПакетXTsfDesc.tsf_no = ДокументРеализации.НомерRMS;
	ПакетXTsfDesc.from_loc_type = ?(Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
	ПакетXTsfDesc.from_loc = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,ДокументРеализации.Склад);
	ПакетXTsfDesc.to_loc_type = ?(Объект.Контрагент.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
	ПакетXTsfDesc.to_loc = ПолучитьКодЛокации(Объект.Контрагент);
	ПакетXTsfDesc.delivery_date = RibData(Объект.Дата);
	ПакетXTsfDesc.tsf_type = "AIP";
	ПакетXTsfDesc.status = "A";
	ПакетXTsfDesc.user_id = Сред(Объект.Автор.Наименование,0,15);
	ПакетXTsfDesc.comment_desc = Объект.Номер;
	
	//Для Каждого Строка Из Объект.Состав Цикл
	//	ПакетXTsfDtl = ФабрикаXDTO.Создать(XTsfDtl);
	//	ПакетXTsfDtl.item = СокрЛП(Строка.Номенклатура.Код);
	//	ПакетXTsfDtl.tsf_qty = Строка.Количество*Строка.Коэффициент;
	//	ПакетXTsfDtl.supp_pack_size = Строка.Коэффициент;
	//	//ПакетXTsfDtl.inv_status = "0";
	//	//ПакетXTsfDtl.unit_cost = Строка.Цена;
	//	
	//	ПакетXTsfDesc.XTsfDtl.Добавить(ПакетXTsfDtl);
	//КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетXTsfDesc,"XTsfDesc","XTsf","XTsfMod");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьКорректировкаРеализацииКакПриход(Объект,Прокси,Ошибка)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ReceiptDesc").КорневыеСвойства;
	ReceiptDesc = КорневыеСвойства.Получить("ReceiptDesc").Тип;
	Receipt = КорневыеСвойства.Получить("Receipt").Тип;
	ReceiptDtl = КорневыеСвойства.Получить("ReceiptDtl").Тип;
	ПакетReceiptDesc = ФабрикаXDTO.Создать(ReceiptDesc);
	ПакетReceiptDesc.appt_nbr = "0";
	ПакетReceipt = ФабрикаXDTO.Создать(Receipt);
	
	ДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Истина);
	
	ПакетReceipt.dc_dest_id = Формат(Объект.Контрагент.Код,"ЧГ=");
	ПакетReceipt.po_nbr = ДокументРеализации.НомерRMS;
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ПакетReceipt.document_type = "T";
		//ПакетReceipt.asn_nbr = СокрЛП(Объект.НомерДокумента);
		ПакетReceipt.asn_nbr = ДокументРеализации.НомерRMS;
	Иначе
		ПакетReceipt.document_type = "P";
	КонецЕсли;
	ПакетReceipt.receipt_type = "SK";
	Если ДокументРеализации.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
		to_disposition = "UTS";
	Иначе
		to_disposition = "ATS";
	КонецЕсли;	
	
	Для Каждого Строка Из Объект.Состав Цикл
		//{ВетровИА Обращение №0000140050
		Если (Строка.Количество = Строка.КоличествоДоИзменения ) 
			И (Строка.Цена = Строка.ЦенаДоИзменения)  Тогда
		//ВетровИА Обращение №0000140050}	
				Продолжить;
		КонецЕсли;	
		ПакетReceiptDtl = ФабрикаXDTO.Создать(ReceiptDtl);
		ПакетReceiptDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		//ПакетReceiptDtl.unit_qty = ?(Строка.Количество - Строка.КоличествоДоИзменения > 0,Строка.Количество - Строка.КоличествоДоИзменения,Строка.КоличествоДоИзменения - Строка.Количество);
		ПакетReceiptDtl.unit_qty = Строка.Количество*Строка.Коэффициент - Строка.КоличествоДоИзменения*Строка.Коэффициент;
		ПакетReceiptDtl.receipt_xactn_type = "A";
		ПакетReceiptDtl.receipt_date = RibData(ДокументРеализации.Дата);
		ПакетReceiptDtl.receipt_nbr = ДокументРеализации.Номер;
		//ПакетReceiptDtl.dest_id = "";
		ПакетReceiptDtl.container_id = "0";
		//ПакетReceiptDtl.distro_nbr = "0";
		//ПакетReceiptDtl.distro_doc_type = "";
		ПакетReceiptDtl.to_disposition = to_disposition;
		//Если Строка.Количество - Строка.КоличествоДоИзменения > 0 Тогда
		//	ПакетReceiptDtl.to_disposition = to_disposition;
		//Иначе
		//	ПакетReceiptDtl.from_disposition = to_disposition; 
		//КонецЕсли;	
		//ПакетReceiptDtl.from_disposition = ""; 
		//ПакетReceiptDtl.to_wip = ""; 
		//ПакетReceiptDtl.from_wip = ""; 
		//ПакетReceiptDtl.to_trouble = ""; 
		//ПакетReceiptDtl.from_trouble = ""; 
		ПакетReceiptDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		
		
		Если НЕ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			ПакетReceiptDtl.unit_cost = Строка.Цена;
			//ПакетReceiptDtl.shipped_qty = Строка.КоличествоПоДокументу*Строка.Коэффициент;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Вес) И ЗначениеЗаполнено(Строка.ЕдиницаВеса) Тогда
			ПакетReceiptDtl.weight = Строка.Вес;
			ПакетReceiptDtl.weight_uom = Строка.ЕдиницаВеса.Наименование;
		КонецЕсли;	
		ПакетReceipt.ReceiptDtl.Добавить(ПакетReceiptDtl);
	КонецЦикла;
	
	ПакетReceiptDesc.Receipt.Добавить(ПакетReceipt);
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетReceiptDesc,"ReceiptDesc","Receiving","ReceiptCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьКорректировкаРеализацииКакКоррекцияЗапасов(Объект,Прокси,Ошибка)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
	InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
	InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
	ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
	
	ДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Истина);
	ПакетInvAdjustDesc.dc_dest_id = ПолучитьКодЛокации(Объект.Контрагент);
	to_disposition = "ATS";
	КодКоррекцииТрансфер = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодКоррекцииТрансфер);
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетInvAdjustDtl.to_disposition = to_disposition;
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = КодКоррекцииТрансфер;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,"PN"+Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьКорректировкаРеализацииКакКорректировкуПриемки(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_КорректировкаРеализации");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = Объект.Номер;
	Пакет.Posted = Объект.Проведен;
	
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Комментарий = Объект.Комментарий;
	Пакет.РежимКорректировки = Метаданные.Перечисления.РежимыКорректировок.EnumValues.Get(Перечисления.РежимыКорректировок.Индекс(Объект.РежимКорректировки)).Имя;
	
	
	ДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации,Истина);
	Пакет.ДокументРеализации = Строка(ДокументРеализации.УникальныйИдентификатор());
	Пакет.ДокументРеализацииТип = Объект.ДокументРеализации.Метаданные().Имя;
	
	
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	Пакет.ТипКорректировки = "КорректировкаПоступления";
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_КорректировкаРеализации_Состав");
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.СтавкаНДС            = Строка.СтавкаНДС.Ставка;
		ПакетСостав.СтавкаНДСДоИзменения = Строка.СтавкаНДСДоИзменения.Ставка;
		
		ПакетСостав.Количество                 = Строка.Количество;
		ПакетСостав.КоличествоДоИзменения      = Строка.КоличествоДоИзменения;
		ПакетСостав.КоличествоДоКорректировки  = Строка.КоличествоДоКорректировки;
		
		ПакетСостав.Сумма                = Строка.Сумма;
		ПакетСостав.СуммаДоИзменения     = Строка.СуммаДоИзменения;
		ПакетСостав.СуммаДоКорректировки = Строка.СуммаДоКорректировки;
		ПакетСостав.СуммаНДС                = Строка.СуммаНДС;
		ПакетСостав.СуммаНДСДоИзменения     = Строка.СуммаНДСДоИзменения;
		ПакетСостав.СуммаНДСДоКорректировки = Строка.СуммаНДСДоКорректировки;
		ПакетСостав.Номенклатура  = СокрЛП(Строка.Номенклатура.Код);
		ПакетСостав.ЕдиницаИзмерения  = СокрЛП(Строка.ЕдиницаИзмерения.Наименование);
		ПакетСостав.Коэффициент  = Строка.Коэффициент;
		ПакетСостав.Цена                 = Строка.Цена;
		ПакетСостав.ЦенаДоИзменения      = Строка.ЦенаДоИзменения;
		ПакетСостав.ЦенаДоКорректировки  = Строка.ЦенаДоКорректировки;
		ПакетСостав.Вес  = Строка.Вес;
		ПакетСостав.ЕдиницаВеса  = СокрЛП(Строка.ЕдиницаВеса.Наименование);
		ПакетСостав.ЕстьВДокументеРеализации  = Строка.ЕстьВДокументеРеализации;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_КорректировкаРеализации","MovementAdj","MovementAdjCre",Формат(Объект.Контрагент.Код,"ЧГ="));
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьКорректировкаРеализацииКакASNOutMod(Объект,Прокси,Ошибка)//???
	ДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Истина);
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ASNOutDesc").КорневыеСвойства;
	ASNOutDesc = КорневыеСвойства.Получить("ASNOutDesc").Тип;
	ASNOutCtn = КорневыеСвойства.Получить("ASNOutCtn").Тип;
	ASNOutDistro = КорневыеСвойства.Получить("ASNOutDistro").Тип;
	ASNOutItem = КорневыеСвойства.Получить("ASNOutItem").Тип;
	ПакетASNOutDesc = ФабрикаXDTO.Создать(ASNOutDesc);
	ПакетASNOutDesc.to_location = Формат(Объект.Контрагент.Код,"ЧГ=");
	//ПакетASNOutDesc.from_location = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,ДокументРеализации.Склад);
	ПакетASNOutDesc.from_location = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
	//	ПакетASNOutDesc.asn_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
	//Иначе
	//ПакетASNOutDesc.asn_nbr = СокрЛП(Объект.Номер)+Сред(Год(Объект.Дата),3);
	//КонецЕсли;	
	ПакетASNOutDesc.asn_nbr = ДокументРеализации.НомерRMS;
	ПакетASNOutDesc.asn_type = "C";
	ПакетASNOutDesc.container_qty = "1";
	ПакетASNOutDesc.bol_nbr = ДокументРеализации.НомерRMS;
	ПакетASNOutDesc.shipment_date = RibData(Объект.Дата);
	ПакетASNOutDesc.ship_address1 = ДокументРеализации.АдресДоставки;
	ПакетASNOutDesc.ship_address2 = "";
	ПакетASNOutDesc.ship_address3 = "";
	ПакетASNOutDesc.ship_address4 = "";
	ПакетASNOutDesc.ship_address5 = "";
	ПакетASNOutDesc.ship_city = "";
	ПакетASNOutDesc.ship_state = "";
	ПакетASNOutDesc.ship_zip = "";
	ПакетASNOutDesc.ship_country_id = СокрЛП(Объект.СтруктурнаяЕдиница.Страна.Код);
	ПакетASNOutDesc.trailer_nbr = "";
	ПакетASNOutDesc.seal_nbr = "";
	ПакетASNOutDesc.carrier_code = "";
	ПакетASNOutDesc.transshipment_nbr = "";
	
	
	ПакетASNOutDistro = ФабрикаXDTO.Создать(ASNOutDistro);
	ПакетASNOutDistro.distro_nbr = ДокументРеализации.НомерRMS;
	ПакетASNOutDistro.distro_doc_type = "T";
	ПакетASNOutDistro.customer_order_nbr = ""; 
	ПакетASNOutDistro.consumer_direct = ""; 
	
	final_location = ПолучитьКодЛокации(Объект.Контрагент);
	ПакетASNOutCtn = ФабрикаXDTO.Создать(ASNOutCtn);
	ПакетASNOutCtn.final_location = final_location;
	ПакетASNOutCtn.container_id = "0";
	ПакетASNOutCtn.container_weight = "0";
	ПакетASNOutCtn.container_length = "0";
	ПакетASNOutCtn.container_width = "0";
	ПакетASNOutCtn.container_height = "0";
	ПакетASNOutCtn.container_cube = "0";
	ПакетASNOutCtn.expedite_flag = "N"; 
	ПакетASNOutCtn.rma_nbr = ""; 
	ПакетASNOutCtn.tracking_nbr = ""; 
	ПакетASNOutCtn.freight_charge = "0";
	ПакетASNOutCtn.master_container_id = ""; 
	
	Если ДокументРеализации.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
		from_disposition = "UTS";
	Иначе
		from_disposition = "ATS";
	КонецЕсли;	
	
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетASNOutItem = ФабрикаXDTO.Создать(ASNOutItem);
		ПакетASNOutItem.item_id = СокрЛП(Строка.Номенклатура.Код);
		Количество = Строка.Количество - Строка.КоличествоДоИзменения;
		Количество = ?(Количество>0,Количество,-Количество);
		ПакетASNOutItem.unit_qty = Количество*Строка.Коэффициент;
		ПакетASNOutItem.final_location = final_location;
		ПакетASNOutItem.priority_level = "0";
		ПакетASNOutItem.order_line_nbr = "0";
		ПакетASNOutItem.container_qty = "1";
		ПакетASNOutItem.lot_nbr = ""; 
		ПакетASNOutItem.from_disposition = from_disposition; 
		ПакетASNOutItem.to_disposition = ""; 
		ПакетASNOutItem.voucher_number = ""; 
		
		ПакетASNOutCtn.ASNOutItem.Добавить(ПакетASNOutItem);
	КонецЦикла;
	ПакетASNOutDistro.ASNOutCtn.Добавить(ПакетASNOutCtn);
	ПакетASNOutDesc.ASNOutDistro.Добавить(ПакетASNOutDistro);
	ПакетASNOutDesc.comments = Объект.Номер;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетASNOutDesc,"ASNOutDesc","ASNOut","ASNOutMod");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьВозвратнуюНакладную(Объект,Прокси,Ошибка)
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/RTVDesc").КорневыеСвойства;
	RTVDesc = КорневыеСвойства.Получить("RTVDesc").Тип;
	RTVDtl = КорневыеСвойства.Получить("RTVDtl").Тип;
	ПакетRTVDesc = ФабрикаXDTO.Создать(RTVDesc);
	
	ПакетRTVDesc.dc_dest_id = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
	//{КотлячковаЕВ 2014-05-08 08:21:32 Наряд № 000115427
	ПакетRTVDesc.rtv_id = ПреобразоватьНомер(Объект.Номер);
	//ПакетRTVDesc.rtv_id = ПреобразоватьНомер(Объект.Номер)+Формат(Объект.Дата,"ДФ=yy");
	//КотлячковаЕВ 2014-05-08 08:21:32 }
	ПакетRTVDesc.rtn_auth_nbr = 0;
	ПакетRTVDesc.vendor_nbr = Формат(Объект.Контрагент.Код,"ЧГ=");
	ПакетRTVDesc.ship_address1 = Объект.АдресДоставки;
	ПакетRTVDesc.comments = Объект.Номер;
	Если ЗначениеЗаполнено(Объект.ДокОснование) И ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.РаспоряжениеНаОтгрузку") Тогда
		ПакетRTVDesc.rtv_order_no = Формат(Число(Объект.ДокОснование.Номер),"ЧГ=");
	КонецЕсли;	
	Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
		from_disposition = "UTS";
	Иначе
		from_disposition = "ATS";
	КонецЕсли;	
	ПакетRTVDesc.from_disposition = from_disposition;
	ПакетRTVDesc.creation_ts = RibData(Объект.Дата);
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетRTVDtl = ФабрикаXDTO.Создать(RTVDtl);
		ПакетRTVDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетRTVDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетRTVDtl.unit_cost = Строка.Цена;
		Если ЗначениеЗаполнено(Строка.Вес) И ЗначениеЗаполнено(Строка.ЕдиницаВеса) Тогда
			ПакетRTVDtl.weight = Строка.Вес;
			ПакетRTVDtl.weight_uom = Строка.ЕдиницаВеса.Наименование;
		КонецЕсли;	
		ПакетRTVDtl.from_disposition = from_disposition;
		ПакетRTVDesc.RTVDtl.Добавить(ПакетRTVDtl);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетRTVDesc,"RTVDesc","RTV","RTVCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьРасходнуюНакладную(Объект,Прокси,Ошибка)
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		ЗаписатьНомерТрансфера(Объект,Прокси);
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			Если Объект.Контрагент.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает Тогда
				Результат = ОтправитьРасходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка);
			Иначе
				Результат = ОтправитьРасходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка);
				//Результат = Результат И ОтправитьРасходнуюНакладнуюКакПриходВЛокацию(Объект,Прокси,Ошибка);
			КонецЕсли;	
		Иначе
			Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница.ОптоваяЛокация) Тогда
				Объект.Контрагент = Объект.СтруктурнаяЕдиница.ОптоваяЛокация;
				Результат = ОтправитьРасходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьРасходнуюНакладнуюКакPSU(Объект,Прокси,Ошибка);
			Иначе
				Ошибка = "Не указана структурная единица опта!";
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
	Иначе	
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			Если Объект.Контрагент.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает Тогда
				Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница.ОптоваяЛокация) Тогда
					ЗаписатьНомерТрансфера(Объект,Прокси);
					Объект.Контрагент = Объект.СтруктурнаяЕдиница.ОптоваяЛокация;
					Результат = ОтправитьРасходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка);
					Результат = Результат И ОтправитьРасходнуюНакладнуюКакPSU(Объект,Прокси,Ошибка);
				Иначе	
					Объект.Контрагент = Объект.СтруктурнаяЕдиница;
					Результат = ОтправитьРасходнуюНакладнуюКакPSU(Объект,Прокси,Ошибка);
				КонецЕсли;	
			ИначеЕсли Объект.Контрагент.РежимРаботы = Перечисления.РежимРаботыСЕ.Транслятор Тогда
				ЗаписатьНомерТрансфера(Объект,Прокси);
				Результат = ОтправитьРасходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка);
			Иначе
				ЗаписатьНомерТрансфера(Объект,Прокси);
				Результат = ОтправитьРасходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка);
				//Результат = Результат И ОтправитьРасходнуюНакладнуюКакПриходВЛокацию(Объект,Прокси,Ошибка);
			КонецЕсли;	
		Иначе
			Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница.ОптоваяЛокация) Тогда
				ЗаписатьНомерТрансфера(Объект,Прокси);
				Объект.Контрагент = Объект.СтруктурнаяЕдиница.ОптоваяЛокация;
				Результат = ОтправитьРасходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка);
				Результат = Результат И ОтправитьРасходнуюНакладнуюКакPSU(Объект,Прокси,Ошибка);
			Иначе	
				Объект.Контрагент = Объект.СтруктурнаяЕдиница;
				Результат = ОтправитьРасходнуюНакладнуюКакPSU(Объект,Прокси,Ошибка);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ЗаписатьНомерТрансфера(Объект,Прокси)
	Если Не ЗначениеЗаполнено(Объект.НомерRMS) Тогда
		Объект.НомерRMS = Прокси.getNewTransferNumber();
		//{ СИТЕК БрыляковЕЮ 2015-04-30  
		Izh_ОбменДанными.УстановитьОбменДаннымиЗагрузка(Объект);
		// СИТЕК БрыляковЕЮ 2015-04-30 }
		Объект.Записать();
	КонецЕсли;
КонецПроцедуры	

Функция ОтправитьРасходнуюНакладнуюКакТрансфер(Объект,Прокси,Ошибка)
	Если ТипЗнч(Объект.ДокОснование) <> Тип("ДокументСсылка.РаспоряжениеНаОтгрузку") Тогда
		КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/XTsfDesc").КорневыеСвойства;
		XTsfDesc = КорневыеСвойства.Получить("XTsfDesc").Тип;
		XTsfDtl = КорневыеСвойства.Получить("XTsfDtl").Тип;
		ПакетXTsfDesc = ФабрикаXDTO.Создать(XTsfDesc);
		
		ПакетXTsfDesc.tsf_no = Объект.НомерRMS;
		ПакетXTsfDesc.from_loc_type = ?(Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
		ПакетXTsfDesc.from_loc = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
		ПакетXTsfDesc.to_loc_type = ?(Объект.Контрагент.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
		ПакетXTsfDesc.to_loc = ПолучитьКодЛокации(Объект.Контрагент);
		//ПакетXTsfDesc.delivery_date = RibData(Объект.Дата);
		ПакетXTsfDesc.tsf_type = "AIP";
		//ПакетXTsfDesc.tsf_type = "EG";
		ПакетXTsfDesc.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетXTsfDesc.comment_desc = Объект.Номер;
		
		Для Каждого Строка Из Объект.Состав Цикл
			ПакетXTsfDtl = ФабрикаXDTO.Создать(XTsfDtl);
			ПакетXTsfDtl.item = СокрЛП(Строка.Номенклатура.Код);
			ПакетXTsfDtl.tsf_qty = Строка.Количество*Строка.Коэффициент;
			ПакетXTsfDtl.supp_pack_size = Строка.Коэффициент;
			//ПакетXTsfDtl.inv_status = "0";
			//ПакетXTsfDtl.unit_cost = Строка.Цена;
			
			ПакетXTsfDesc.XTsfDtl.Добавить(ПакетXTsfDtl);
		КонецЦикла;
		
		RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетXTsfDesc,"XTsfDesc","XTsf","XTsfCre");
		Результат1 = ОтправитьСообщение(RibMessages,Прокси);
		Ошибка = RibMessages;
	Иначе	
		//КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/SOStatusDesc").КорневыеСвойства;
		//SOStatusDesc = КорневыеСвойства.Получить("SOStatusDesc").Тип;
		//SOStatusDtl = КорневыеСвойства.Получить("SOStatusDtl").Тип;
		//ПакетSOStatusDesc = ФабрикаXDTO.Создать(SOStatusDesc);
		//
		//ПакетSOStatusDesc.distro_nbr = СокрЛП(Объект.ДокОснование.Номер);
		////ПакетSOStatusDesc.dc_dest_id = Формат(Объект.Контрагент.Код,"ЧГ=");
		//ПакетSOStatusDesc.dc_dest_id = Формат(Объект.Контрагент.Код,"ЧГ=");
		//ПакетSOStatusDesc.distro_document_type = "T";
		//Для Каждого Строка Из Объект.Состав Цикл
		//	ПакетSOStatusDtl = ФабрикаXDTO.Создать(SOStatusDtl);
		//	ПакетSOStatusDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		//	ПакетSOStatusDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		//	ПакетSOStatusDtl.dest_id = Формат(Объект.Контрагент.Код,"ЧГ=");
		//	//ПакетSOStatusDtl.dest_id = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
		//	ПакетSOStatusDtl.status = "SR";
		//	ПакетSOStatusDesc.SOStatusDtl.Добавить(ПакетSOStatusDtl);
		//КонецЦикла;
		
		//RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетSOStatusDesc,"SOStatusDesc","SOStatus","SOStatusCre");
		//Результат1 = ОтправитьСообщение(RibMessages,Прокси);
		//Ошибка = RibMessages;
		Результат1 = Истина;
		Ошибка = "";
	КонецЕсли;	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ASNOutDesc").КорневыеСвойства;
	ASNOutDesc = КорневыеСвойства.Получить("ASNOutDesc").Тип;
	ASNOutCtn = КорневыеСвойства.Получить("ASNOutCtn").Тип;
	ASNOutDistro = КорневыеСвойства.Получить("ASNOutDistro").Тип;
	ASNOutItem = КорневыеСвойства.Получить("ASNOutItem").Тип;
	ПакетASNOutDesc = ФабрикаXDTO.Создать(ASNOutDesc);
	ПакетASNOutDesc.to_location = Формат(Объект.Контрагент.Код,"ЧГ=");
	ПакетASNOutDesc.from_location = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
	//	ПакетASNOutDesc.asn_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
	//Иначе
	//ПакетASNOutDesc.asn_nbr = СокрЛП(Объект.Номер)+Сред(Год(Объект.Дата),3);
	//КонецЕсли;	
	ПакетASNOutDesc.asn_nbr = Объект.НомерRMS;
	ПакетASNOutDesc.asn_type = "C";
	ПакетASNOutDesc.container_qty = "1";
	ПакетASNOutDesc.bol_nbr = Объект.НомерRMS;
	ПакетASNOutDesc.shipment_date = RibData(Объект.Дата);
	ПакетASNOutDesc.ship_address1 = Объект.АдресДоставки;
	ПакетASNOutDesc.ship_address2 = "";
	ПакетASNOutDesc.ship_address3 = "";
	ПакетASNOutDesc.ship_address4 = "";
	ПакетASNOutDesc.ship_address5 = "";
	ПакетASNOutDesc.ship_city = "";
	ПакетASNOutDesc.ship_state = "";
	ПакетASNOutDesc.ship_zip = "";
	ПакетASNOutDesc.ship_country_id = СокрЛП(Объект.СтруктурнаяЕдиница.Страна.Код);
	ПакетASNOutDesc.trailer_nbr = "";
	ПакетASNOutDesc.seal_nbr = "";
	ПакетASNOutDesc.carrier_code = "";
	ПакетASNOutDesc.transshipment_nbr = "";
	
	
	ПакетASNOutDistro = ФабрикаXDTO.Создать(ASNOutDistro);
	ПакетASNOutDistro.distro_nbr = Объект.НомерRMS;
	ПакетASNOutDistro.distro_doc_type = "T";
	ПакетASNOutDistro.customer_order_nbr = ""; 
	ПакетASNOutDistro.consumer_direct = ""; 
	
	final_location = ПолучитьКодЛокации(Объект.Контрагент);
	ПакетASNOutCtn = ФабрикаXDTO.Создать(ASNOutCtn);
	ПакетASNOutCtn.final_location = final_location;
	ПакетASNOutCtn.container_id = "0";
	ПакетASNOutCtn.container_weight = "0";
	ПакетASNOutCtn.container_length = "0";
	ПакетASNOutCtn.container_width = "0";
	ПакетASNOutCtn.container_height = "0";
	ПакетASNOutCtn.container_cube = "0";
	ПакетASNOutCtn.expedite_flag = "N"; 
	ПакетASNOutCtn.rma_nbr = ""; 
	ПакетASNOutCtn.tracking_nbr = ""; 
	ПакетASNOutCtn.freight_charge = "0";
	ПакетASNOutCtn.master_container_id = ""; 
	
	Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
		from_disposition = "UTS";
	Иначе
		from_disposition = "ATS";
	КонецЕсли;	
	
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетASNOutItem = ФабрикаXDTO.Создать(ASNOutItem);
		ПакетASNOutItem.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетASNOutItem.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетASNOutItem.final_location = final_location;
		ПакетASNOutItem.priority_level = "0";
		ПакетASNOutItem.order_line_nbr = "0";
		ПакетASNOutItem.container_qty = "1";
		ПакетASNOutItem.lot_nbr = ""; 
		ПакетASNOutItem.from_disposition = from_disposition; 
		ПакетASNOutItem.to_disposition = ""; 
		ПакетASNOutItem.voucher_number = ""; 
		
		ПакетASNOutCtn.ASNOutItem.Добавить(ПакетASNOutItem);
	КонецЦикла;
	ПакетASNOutDistro.ASNOutCtn.Добавить(ПакетASNOutCtn);
	ПакетASNOutDesc.ASNOutDistro.Добавить(ПакетASNOutDistro);
	ПакетASNOutDesc.comments = Объект.Номер;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетASNOutDesc,"ASNOutDesc","ASNOut","ASNOutCre");
	Результат2 = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	Возврат Результат1 И Результат2;
КонецФункции

Функция ОтправитьРасходнуюНакладнуюКакПриходВЛокацию(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_РасходнаяНакладная");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
	//	Пакет.Number = СокрЛП(Объект.ДокОснование.Номер);
	//Иначе
	Пакет.Number = СокрЛП(Объект.Номер);
	//КонецЕсли;	
	Пакет.Posted = Объект.Проведен;
	Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Валюта = Объект.Валюта.Код;
	Пакет.КурсВалютыДоговора = Объект.Курс;
	Пакет.Кратность = Объект.Кратность;
	Пакет.ГрузоотправительТип = ?(ЗначениеЗаполнено(Объект.Грузоотправитель) = Ложь,"",Объект.Грузоотправитель.Метаданные().Имя);
	Пакет.Грузоотправитель = ?(ЗначениеЗаполнено(Объект.Грузоотправитель) = Ложь,"",Объект.Грузоотправитель.Код);
	Пакет.ГрузополучательТип = ?(ЗначениеЗаполнено(Объект.Грузополучатель) = Ложь,"",Объект.Грузополучатель.Метаданные().Имя);
	Пакет.Грузополучатель = ?(ЗначениеЗаполнено(Объект.Грузополучатель) = Ложь,"",Объект.Грузополучатель.Код);
	Пакет.АдресДоставки = "";
	Пакет.Склад = Объект.Склад.Код;
	Пакет.КонтрагентТип = Объект.Контрагент.Метаданные().Имя;
	Пакет.Контрагент = Объект.Контрагент.Код;
	//Пакет.ТипДоговора = Метаданные.Перечисления.ТипыДоговоров.EnumValues.Get(Перечисления.ТипыДоговоров.Индекс(Объект.ТипДоговора)).Имя;
	Пакет.ИтогоВсего = Объект.СуммаИтого;
	Пакет.НомерRMS = Объект.НомерRMS;
	
	//popn+
	Если ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ЗаказВнешний") 
		И ТипЗнч(Объект.ДокОснование.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
		Тогда
		Пакет.ДокОснование = Строка(Объект.ДокОснование.УникальныйИдентификатор());
	Иначе
		Пакет.ДокОснование = Строка(Документы.ЗаказВнешний.ПустаяСсылка().УникальныйИдентификатор());
	КонецЕсли;
	//popn-
	
	ТипМатериалы = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_РасходнаяНакладная_Материалы");
	
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетМатериалы = ФабрикаXDTO.Создать(ТипМатериалы);
		ПакетМатериалы.Номенклатура     = СокрЛП(Строка.Номенклатура.Код);
		ПакетМатериалы.ЕдиницаИзмерения     = СокрЛП(Строка.ЕдиницаИзмерения.Наименование);
		ПакетМатериалы.Количество       = Строка.Количество;
		ПакетМатериалы.СтавкаНДС        = Строка.СтавкаНДС.Ставка;
		ПакетМатериалы.Цена             = Строка.Цена;
		ПакетМатериалы.Сумма            = Строка.Сумма;
		ПакетМатериалы.СуммаНДС         = Строка.СуммаНДС;
		Пакет.Материалы.Добавить(ПакетМатериалы);
	КонецЦикла;
	
	
	//регистр остатки номенклатуры
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ДвиженияТМЦ.Сумма) КАК Сумма,
	|	ДвиженияТМЦ.Номенклатура.Код КАК Номенклатура,
	|	СУММА(ДвиженияТМЦ.Количество) КАК Количество,
	|	СУММА(ДвиженияТМЦ.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияТМЦ.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДвиженияТМЦ.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	ДвиженияТМЦ.Комитент.Код КАК Комитент,
	|	ДвиженияТМЦ.Статус,
	|	СУММА(ДвиженияТМЦ.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(ДвиженияТМЦ.СуммаНДСПродажи) КАК СуммаНДСПродажи
	|ИЗ
	|	РегистрНакопления.ДвиженияТМЦ КАК ДвиженияТМЦ
	|ГДЕ
	|	ДвиженияТМЦ.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияТМЦ.Комитент,
	|	ДвиженияТМЦ.Статус,
	|	ДвиженияТМЦ.Номенклатура.Код");
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_РасходнаяНакладная_ОстаткиНоменклатурыМатериалы");
	
	
	Пока Выборка.Следующий() Цикл
		ПакетОстаткиНоменклатурыМатериалы = ФабрикаXDTO.Создать(ТипОстаткиНоменклатурыМатериалы);
		ПакетОстаткиНоменклатурыМатериалы.Номенклатура        = СокрЛП(Выборка.Номенклатура);
		ПакетОстаткиНоменклатурыМатериалы.Количество          = Выборка.Количество;
		ПакетОстаткиНоменклатурыМатериалы.Себестоимость       = Выборка.Сумма;
		ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДС    = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатурыМатериалы.СебестоимостьУпр    = Выборка.СуммаУпр;
		ПакетОстаткиНоменклатурыМатериалы.СебестоимостьНДСУпр = Выборка.СуммаНДС;
		ПакетОстаткиНоменклатурыМатериалы.СуммаПродажи        = Выборка.СуммаПродажи;
		ПакетОстаткиНоменклатурыМатериалы.СуммаНДСПродажи     = Выборка.СуммаНДСПродажи;
		Пакет.ОстаткиНоменклатурыМатериалы.Добавить(ПакетОстаткиНоменклатурыМатериалы);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер+"-1",Пакет,"DocumentObject_РасходнаяНакладная","Movement","MovementCre",Формат(Объект.Контрагент.Код,"ЧГ="));
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьРасходнуюНакладнуюКакPSU(Объект,Прокси,Ошибка)
	Дата = Формат(Объект.Дата,"ДФ=yyyyMMdd");
	Час = ДобавитьСлева(Час(Объект.Дата),2,0);
	Минута = ДобавитьСлева(Минута(Объект.Дата),2,0);
	Секунда = ДобавитьСлева(Секунда(Объект.Дата),2,0);
	
	ФорматДаты = Дата+Час+Минута+Секунда;
	
	//Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
	//	Локация = Объект.Контрагент;
	//Иначе
	Локация = Объект.Контрагент;
	//КонецЕсли;	
	
	стрИмяФайла = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), "RN"+ПреобразоватьНомер(Объект.Номер)+ФорматДаты+"POSUpld_"+Формат(Локация.Код,"ЧГ="));
	Текст = Новый ЗаписьТекста(стрИмяФайла,КодировкаТекста.ANSI,"",,"");
	
	НомерСтроки = 1;
	
	ВерсияRMS = Константы.ВерсияRMS.Получить();
	
	ВалютаУчета = СокрЛП(Объект.СтруктурнаяЕдиница.Валюта.Наименование);
	
	//Y BEGIN	
	//FHEAD
	Текст.ЗаписатьСтроку("FHEAD");
	Текст.ЗаписатьСтроку(ДобавитьСлева("1",10,0));//Number(10)	Задается внешней системой	ID текущей строки файла.	Y	Справа/0
	Текст.ЗаписатьСтроку("POSU");//Char(4)	RTLG	Идентифицирует файл как «Oracle Retail TLOG».	Y	Слева/Пробел
	Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Дата создания	Дата и время создания файла внешней  системой (YYYYMMDDHHMMSS).	Y	Слева/None
	Текст.ЗаписатьСтроку(ДобавитьСправа(СтрЗаменить(Формат(Локация.Код,"ЧРГ=','"),",",""),10," "));//Char(10)	Задается внешней системой	Идентификатор склада или магазина имагазина	Y	Слева/None
	Текст.ЗаписатьСтроку("Y");//Char(1)	vat include indicator from location- dummy
	Текст.ЗаписатьСтроку("0001");//Number(4)	vat region	from location - dummy
	Текст.ЗаписатьСтроку(ВалютаУчета);//Char(3)	currency code from location - dummy
	Текст.ЗаписатьСтроку("2",Символ(10));//Number(1)	currency retail decimals from location - dummy
	
	Для Каждого СтрокаСостава Из Объект.Состав Цикл
		НомерСтроки = НомерСтроки + 1;
		Текст.ЗаписатьСтроку("THEAD");
		Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Transaction date	Дата POS- транзакции  (YYYYMMDDHHMMSS).	Y	Слева/None
		Текст.ЗаписатьСтроку("ITM");//Char(3) item type - REF or ITM - dummy
		Если Найти(СтрокаСостава.Номенклатура.Код,"У")>0 Тогда 
			Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.Номенклатура.Код),24," "));//Char(25)	Идентификатор товара	Идентификатор продаваемого товара.	N	Слева/Пробел
		Иначе
			Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.Номенклатура.Код),25," "));//Char(25)	Идентификатор товара	Идентификатор продаваемого товара.	N	Слева/Пробел
		КонецЕсли;	
		dept = ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,3).Код;
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(Сред(dept,Найти(dept,":")+1)),4,"0"));//Number(4)	Идентификатор департамента к которому принадлежит товар. Заполняется программой saimptlog. 	N	Справа/Blank
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,2).Код),4,"0"));//Number(4)	Класс товара	Класс продаваемого или возвращаемого товара. Нет требует заполнения ретейлером, заполняется модулем Oracle Retail sales audit.
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,1).Код),4,"0"));//Number(4)	Подкласс товара	Подкласс продаваемого или возвращаемого товара. Не требует заполнения ретейлером, populated заполняется модулем Oracle Retail sales audit.
		Если СтрокаСостава.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Набор ИЛИ СтрокаСостава.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.НаборПоставщика Тогда
			Набор = "Y";
		Иначе
			Набор = "N";
		КонецЕсли;	
		Текст.ЗаписатьСтроку(Набор);//Char(1)	pack indicator from item - dummy
		Текст.ЗаписатьСтроку("1");//Number (1)	item level from item - dummy
		Текст.ЗаписатьСтроку("1");//Number (1)	transaction level from item - dummy
		Текст.ЗаписатьСтроку(ДобавитьСправа("",6," "));//Char (6)	wastage type from item - dummy
		Текст.ЗаписатьСтроку(ДобавитьСправа("",12,"0"));//Number (12)	wastage percent - dummy
		Текст.ЗаписатьСтроку("S");//Char(6)	Значение из списка «SASI» code_type.	Статус товара в транзакции, V - аннулирован, S - продан, R -  возвращен.	Y	Слева/Пробел
		Текст.ЗаписатьСтроку("N");//Char(1)	Значение из списка «YSNO» code type.	Указывает, является ли товар частью прямой поставки (drop shipment)	Y	Слева/None
		Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СтрокаСостава.Количество,"ЧЦ=12; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=00000000,0000; ЧВН="),",",""));//Number(12)		Количество проданных товаров, 4 цифры после запятой.	Y	Справа/0
		Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование),4," "));//Char(4)		Единица измерения проданного товара 	Y	Слева/None
		Текст.ЗаписатьСтроку("P");//Char(1)	Значение из списка «SIGN» code_type.	Знак количества	Y	Слева/None
		Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СтрокаСостава.Сумма,"ЧЦ=20; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=0000000000000000,0000; ЧВН="),",",""));//Number(20)		Total sales value  с 4 значащими цифрами после запятой. Заполняется ретейлером для TOTAL транзакций, Заполняется Oracle Retail Sales Audit для SALE, RETURN транзакций.	Y если транзакция
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Last date time midified. (YYYYMMDDHHMMSS) - dummy
		Текст.ЗаписатьСтроку("N");//Char(1)	Допустимые значения: ‘Y’,’N’	Указывает, является ли товар «catchweight» (полученный вес) 		Слева/None
		Текст.ЗаписатьСтроку(ДобавитьСлева("",12," "));//Number (12)	total weight (if catchweight item ind = Y) - dummy
		Если ВерсияRMS >= 13.2 Тогда
			Текст.ЗаписатьСтроку(" ");//Char(1)	tran type for ReSA A,D,NULL  - dummy
			Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СтрокаСостава.СуммаНДС,"ЧЦ=20; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=0000000000000000,0000; ЧВН="),",",""),Символ(10));//Number(20)		Total TAX value  с 4 значащими цифрами после запятой. Заполняется ретейлером для TOTAL транзакций, Заполняется Oracle Retail Sales Audit для SALE, RETURN транзакций.	Y если транзакция
		Иначе	
			Текст.ЗаписатьСтроку(" ",Символ(10));//Char(1)	tran type for ReSA A,D,NULL  - dummy
		КонецЕсли;
		
		//НомерСтроки = НомерСтроки + 1;
		//Текст.ЗаписатьСтроку("TDETL");
		//Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		//Текст.ЗаписатьСтроку("");//Char(6)	code for the promotion type from code_detail where code_type='PRMT'
		//Текст.ЗаписатьСтроку("");//Number (10)	promotion number - dummy
		//Текст.ЗаписатьСтроку("");//Number (12)	Sales quantity sold for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (20)	Sales value for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (20)	Discount value for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (10)	Promotion component. Links the promotion to additional pricing attributes (4 decimals)
		
		//TTAIL
		НомерСтроки = НомерСтроки + 1;
		Текст.ЗаписатьСтроку("TTAIL");
		Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		Текст.ЗаписатьСтроку(ДобавитьСлева(0,6,0),Символ(10));//Number(6)		Number of T_DETL records in this transaction set. Количество записей в текущей транзакции (только записи между trans head & tail)		
	КонецЦикла;	
	//FTAIL
	НомерСтроки = НомерСтроки + 1;
	Текст.ЗаписатьСтроку("FTAIL");
	Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки	Y	Справа/0
	Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки - 2,10,0),Символ(10));//Number(10)		Количество транзакций в текущем файле (только записи между file head & tail)	Y	Справа/0
	Текст.ЗаписатьСтроку("",Символ(10));
	Текст.Закрыть();
	Результат = Истина;
	Попытка
		FTP = Константы.FTPRMS.Получить();
		ПроксиСервер = Константы.НастройкаПроксиСервера.Получить().Получить();
		
		Если Найти(FTP.URL,"://") Тогда
			URL = Сред(FTP.URL,Найти(FTP.URL,"://")+3);
		Иначе
			URL = FTP.URL;
		КонецЕсли;	
		
		Соединение = Новый FTPСоединение(URL, FTP.Порт, FTP.Имя, FTP.Пароль, ПроксиСервер, FTP.ПасссивныйРежим, FTP.Таймаут);
		Соединение.УстановитьТекущийКаталог(FTP.ИмяКаталога);
		//Если Соединение.НайтиФайлы("pos").Количество() = 0 Тогда
		//	Соединение.СоздатьКаталог("pos");
		//КонецЕсли;	
		//Соединение.УстановитьТекущийКаталог("pos");
		стрИмяФайлаПриемника = "POSU_"+Формат(Локация.Код,"ЧГ=")+"_RN"+ПреобразоватьНомер(Объект.Номер)+"_"+ФорматДаты+".DAT";
		
		Соединение.Записать(стрИмяФайла, стрИмяФайлаПриемника);
		
		Соединение = Неопределено;
	Исключение
		Результат = Ложь;
		Ошибка = Ошибка + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ОтправитьZОтчет(Объект,Прокси,Ошибка)
	Если НЕ Объект.СтруктурнаяЕдиница.РежимРаботы = Перечисления.РежимРаботыСЕ.Транслятор Тогда
		Возврат Истина;
	КонецЕсли;	
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	Дата = Формат(Объект.Дата,"ДФ=yyyyMMdd");
	Час = ДобавитьСлева(Час(Объект.Дата),2,0);
	Минута = ДобавитьСлева(Минута(Объект.Дата),2,0);
	Секунда = ДобавитьСлева(Секунда(Объект.Дата),2,0);
	
	ФорматДаты = Дата+Час+Минута+Секунда;
	
	стрИмяФайла = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), "Z"+ПреобразоватьНомер(Объект.Номер)+ФорматДаты+"POSUpld_"+Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="));
	Текст = Новый ЗаписьТекста(стрИмяФайла,КодировкаТекста.ANSI,"",,"");
	
	НомерСтроки = 1;
	
	ВерсияRMS = Константы.ВерсияRMS.Получить();
	
	ВалютаУчета = СокрЛП(Объект.СтруктурнаяЕдиница.Валюта.Наименование);
	
	//Y BEGIN	
	//FHEAD
	Текст.ЗаписатьСтроку("FHEAD");
	Текст.ЗаписатьСтроку(ДобавитьСлева("1",10,0));//Number(10)	Задается внешней системой	ID текущей строки файла.	Y	Справа/0
	Текст.ЗаписатьСтроку("POSU");//Char(4)	RTLG	Идентифицирует файл как «Oracle Retail TLOG».	Y	Слева/Пробел
	Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Дата создания	Дата и время создания файла внешней  системой (YYYYMMDDHHMMSS).	Y	Слева/None
	Текст.ЗаписатьСтроку(ДобавитьСправа(СтрЗаменить(Формат(Объект.СтруктурнаяЕдиница.Код,"ЧРГ=','"),",",""),10," "));//Char(10)	Задается внешней системой	Идентификатор склада или магазина имагазина	Y	Слева/None
	Текст.ЗаписатьСтроку("Y");//Char(1)	vat include indicator from location- dummy
	Текст.ЗаписатьСтроку("0001");//Number(4)	vat region	from location - dummy
	Текст.ЗаписатьСтроку(ВалютаУчета);//Char(3)	currency code from location - dummy
	Текст.ЗаписатьСтроку("2",Символ(10));//Number(1)	currency retail decimals from location - dummy
	
	Для Каждого СтрокаСостава Из Объект.Состав Цикл
		НомерСтроки = НомерСтроки + 1;
		Текст.ЗаписатьСтроку("THEAD");
		Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Transaction date	Дата POS- транзакции  (YYYYMMDDHHMMSS).	Y	Слева/None
		Текст.ЗаписатьСтроку("ITM");//Char(3) item type - REF or ITM - dummy
		Если Найти(СтрокаСостава.Номенклатура.Код,"У")>0 Тогда 
			Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.Номенклатура.Код),24," "));//Char(25)	Идентификатор товара	Идентификатор продаваемого товара.	N	Слева/Пробел
		Иначе
			Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.Номенклатура.Код),25," "));//Char(25)	Идентификатор товара	Идентификатор продаваемого товара.	N	Слева/Пробел
		КонецЕсли;	
		dept = ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,3).Код;
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(Сред(dept,Найти(dept,":")+1)),4,"0"));//Number(4)	Идентификатор департамента к которому принадлежит товар. Заполняется программой saimptlog. 	N	Справа/Blank
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,2).Код),4,"0"));//Number(4)	Класс товара	Класс продаваемого или возвращаемого товара. Нет требует заполнения ретейлером, заполняется модулем Oracle Retail sales audit.
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,1).Код),4,"0"));//Number(4)	Подкласс товара	Подкласс продаваемого или возвращаемого товара. Не требует заполнения ретейлером, populated заполняется модулем Oracle Retail sales audit.
		Если СтрокаСостава.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Набор ИЛИ СтрокаСостава.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.НаборПоставщика Тогда
			Набор = "Y";
		Иначе
			Набор = "N";
		КонецЕсли;	
		Текст.ЗаписатьСтроку(Набор);//Char(1)	pack indicator from item - dummy
		Текст.ЗаписатьСтроку("1");//Number (1)	item level from item - dummy
		Текст.ЗаписатьСтроку("1");//Number (1)	transaction level from item - dummy
		Текст.ЗаписатьСтроку(ДобавитьСправа("",6," "));//Char (6)	wastage type from item - dummy
		Текст.ЗаписатьСтроку(ДобавитьСправа("",12,"0"));//Number (12)	wastage percent - dummy
		Текст.ЗаписатьСтроку("S");//Char(6)	Значение из списка «SASI» code_type.	Статус товара в транзакции, V - аннулирован, S - продан, R -  возвращен.	Y	Слева/Пробел
		Текст.ЗаписатьСтроку("N");//Char(1)	Значение из списка «YSNO» code type.	Указывает, является ли товар частью прямой поставки (drop shipment)	Y	Слева/None
		Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СтрокаСостава.Количество,"ЧЦ=12; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=00000000,0000; ЧВН="),",",""));//Number(12)		Количество проданных товаров, 4 цифры после запятой.	Y	Справа/0
		Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование),4," "));//Char(4)		Единица измерения проданного товара 	Y	Слева/None
		Текст.ЗаписатьСтроку("P");//Char(1)	Значение из списка «SIGN» code_type.	Знак количества	Y	Слева/None
		Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СтрокаСостава.Сумма,"ЧЦ=20; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=0000000000000000,0000; ЧВН="),",",""));//Number(20)		Total sales value  с 4 значащими цифрами после запятой. Заполняется ретейлером для TOTAL транзакций, Заполняется Oracle Retail Sales Audit для SALE, RETURN транзакций.	Y если транзакция
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Last date time midified. (YYYYMMDDHHMMSS) - dummy
		Текст.ЗаписатьСтроку("N");//Char(1)	Допустимые значения: ‘Y’,’N’	Указывает, является ли товар «catchweight» (полученный вес) 		Слева/None
		Текст.ЗаписатьСтроку(ДобавитьСлева("",12," "));//Number (12)	total weight (if catchweight item ind = Y) - dummy
		Если ВерсияRMS >= 13.2 Тогда
			Текст.ЗаписатьСтроку(" ");//Char(1)	tran type for ReSA A,D,NULL  - dummy
			Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СтрокаСостава.СуммаНДС,"ЧЦ=20; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=0000000000000000,0000; ЧВН="),",",""),Символ(10));//Number(20)		Total TAX value  с 4 значащими цифрами после запятой. Заполняется ретейлером для TOTAL транзакций, Заполняется Oracle Retail Sales Audit для SALE, RETURN транзакций.	Y если транзакция
		Иначе	
			Текст.ЗаписатьСтроку(" ",Символ(10));//Char(1)	tran type for ReSA A,D,NULL  - dummy
		КонецЕсли;
		//НомерСтроки = НомерСтроки + 1;
		//Текст.ЗаписатьСтроку("TDETL");
		//Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		//Текст.ЗаписатьСтроку("");//Char(6)	code for the promotion type from code_detail where code_type='PRMT'
		//Текст.ЗаписатьСтроку("");//Number (10)	promotion number - dummy
		//Текст.ЗаписатьСтроку("");//Number (12)	Sales quantity sold for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (20)	Sales value for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (20)	Discount value for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (10)	Promotion component. Links the promotion to additional pricing attributes (4 decimals)
		
		//TTAIL
		НомерСтроки = НомерСтроки + 1;
		Текст.ЗаписатьСтроку("TTAIL");
		Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		Текст.ЗаписатьСтроку(ДобавитьСлева(0,6,0),Символ(10));//Number(6)		Number of T_DETL records in this transaction set. Количество записей в текущей транзакции (только записи между trans head & tail)		
	КонецЦикла;	
	//FTAIL
	НомерСтроки = НомерСтроки + 1;
	Текст.ЗаписатьСтроку("FTAIL");
	Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки	Y	Справа/0
	Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки-2,"ЧГ="),10,0),Символ(10));//Number(10)		Количество транзакций в текущем файле (только записи между file head & tail)	Y	Справа/0
	Текст.ЗаписатьСтроку("",Символ(10));
	Текст.Закрыть();
	Результат = Истина;
	Попытка
		FTP = Константы.FTPRMS.Получить();
		ПроксиСервер = Константы.НастройкаПроксиСервера.Получить().Получить();
		
		Если Найти(FTP.URL,"://") Тогда
			URL = Сред(FTP.URL,Найти(FTP.URL,"://")+3);
		Иначе
			URL = FTP.URL;
		КонецЕсли;	
		
		Соединение = Новый FTPСоединение(URL, FTP.Порт, FTP.Имя, FTP.Пароль, ПроксиСервер, FTP.ПасссивныйРежим, FTP.Таймаут);
		Соединение.УстановитьТекущийКаталог(FTP.ИмяКаталога);
		//Если Соединение.НайтиФайлы("pos").Количество() = 0 Тогда
		//	Соединение.СоздатьКаталог("pos");
		//КонецЕсли;	
		//Соединение.УстановитьТекущийКаталог("pos");
		стрИмяФайлаПриемника = "POSU_"+Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=")+"_Z"+ПреобразоватьНомер(Объект.Номер)+"_"+ФорматДаты+".DAT";
		
		Соединение.Записать(стрИмяФайла, стрИмяФайлаПриемника);
		
		Соединение = Неопределено;
	Исключение
		Результат = Ложь;
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьГруппуПоУровню(Номенклатура,Уровень)
	Родитель = Номенклатура.Родитель;
	Уровень = Уровень - 1;
	Пока Родитель.Группа = 0 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;	
	Пока Уровень <> 0 Цикл
		Родитель = Родитель.Родитель;
		Уровень = Уровень - 1;
	КонецЦикла;	
	Возврат Родитель;
КонецФункции	

Функция ОтправитьИнвентаризацию(Объект,Прокси,Ошибка)
	//по запросу http://jira.apm-it.ru:8080/browse/RS-31
	//Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	ИнвентаризацияСостав.Склад
	//		|ИЗ
	//		|	Документ.Инвентаризация.Состав КАК ИнвентаризацияСостав
	//		|ГДЕ
	//		|	ИнвентаризацияСостав.Ссылка = &Ссылка
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	ИнвентаризацияСостав.Склад";
	
	//	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	//	Результат = Запрос.Выполнить();
	
	//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		Результат = ОтправитьИнвентаризациюПоСкладу(Объект,Прокси,Ошибка,ВыборкаДетальныеЗаписи.Склад);
	//	КонецЦикла;
	//Иначе
	Результат = ОтправитьИнвентаризациюПоСкладу(Объект,Прокси,Ошибка);
	//КонецЕсли;	
	Возврат Результат;
КонецФункции

Функция ОтправитьИнвентаризациюПоСкладу(Объект,Прокси,Ошибка,Склад = Неопределено)
	Если Объект.ТипПередачиРезультатов = Перечисления.ТипыПередачиРезультатовИнвентаризации.ИзлишкиНедостачи Тогда
		КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
		InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
		InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
		ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
		
		ПакетInvAdjustDesc.dc_dest_id = ?(Склад = Неопределено,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="),Формат(Склад.Код,"ЧГ="));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СведенияПоИнвентаризации.Количество > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Приход,
		|	СведенияПоИнвентаризации.Номенклатура.Код КАК Номенклатура,
		|	СУММА(СведенияПоИнвентаризации.Количество) КАК Количество,
		|	СведенияПоИнвентаризации.Склад.ВидЗапасов КАК ВидЗапасов
		|ИЗ
		|	РегистрСведений.СведенияПоИнвентаризации КАК СведенияПоИнвентаризации
		|ГДЕ
		|	СведенияПоИнвентаризации.Регистратор = &Регистратор";
		Если Склад <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И СведенияПоИнвентаризации.Склад = &Склад";
			Запрос.УстановитьПараметр("Склад",Склад);
		КонецЕсли;	
		Запрос.Текст = Запрос.Текст + "
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияПоИнвентаризации.Номенклатура,
		|	ВЫБОР
		|		КОГДА СведенияПоИнвентаризации.Количество > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	СведенияПоИнвентаризации.Номенклатура.Код,
		|	СведенияПоИнвентаризации.Склад.ВидЗапасов";
		Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Возврат Истина;	
		КонецЕсли;	
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;	
			ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
			ПакетInvAdjustDtl.item_id = СокрЛП(Выборка.Номенклатура);
			ПакетInvAdjustDtl.unit_qty = Выборка.Количество;
			Если Выборка.Приход Тогда
				Если Выборка.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
					ПакетInvAdjustDtl.to_disposition = "UTS";
				Иначе
					ПакетInvAdjustDtl.to_disposition = "ATS";
				КонецЕсли;
				adjustment_reason_code = Объект.ВидКоррекцииОприходование.Код;
			Иначе
				Если Выборка.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
					ПакетInvAdjustDtl.from_disposition = "UTS";
				Иначе
					ПакетInvAdjustDtl.from_disposition = "ATS";
				КонецЕсли;
				adjustment_reason_code = Объект.ВидКоррекцииСписание.Код;
			КонецЕсли;	
			ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
			ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
			ПакетInvAdjustDtl.adjustment_reason_code = adjustment_reason_code;
			//Если ЗначениеЗаполнено(Выборка.Вес) И ЗначениеЗаполнено(Выборка.ЕдиницаВеса) Тогда
			//	ПакетInvAdjustDtl.weight = Выборка.Вес;
			//	ПакетInvAdjustDtl.weight_uom = Выборка.ЕдиницаВеса;
			//КонецЕсли;	
			ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
		КонецЦикла;
		
		RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
		Результат = ОтправитьСообщение(RibMessages,Прокси);
		Ошибка = RibMessages;
	Иначе
		КодСклада = ?(Склад = Неопределено,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="),Формат(Склад.Код,"ЧГ="));
		
		Дата = Формат(Объект.Дата,"ДФ=yyyyMMdd");
		Час = ДобавитьСлева(Час(Объект.Дата),2,0);
		Минута = ДобавитьСлева(Минута(Объект.Дата),2,0);
		Секунда = ДобавитьСлева(Секунда(Объект.Дата),2,0);
		
		ФорматДаты = Дата+Час+Минута+Секунда;
		
		стрИмяФайла = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), "STKU_"+КодСклада+"_"+ФорматДаты+".1");
		Текст = Новый ЗаписьТекста(стрИмяФайла,КодировкаТекста.ANSI,"",,"");
		
		НомерСтроки = 1;
		
		
		//FHEAD
		Текст.ЗаписатьСтроку("FHEAD");
		Текст.ЗаписатьСтроку(ДобавитьСлева("1",10,0));//Number(10)	Задается внешней системой	ID текущей строки файла.	Y	Справа/0
		Текст.ЗаписатьСтроку("STKU");//Char(4)	RTLG	Идентифицирует файл как «Oracle Retail TLOG».	Y	Слева/Пробел
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Дата создания	Дата и время создания файла внешней  системой (YYYYMMDDHHMMSS).	Y	Слева/None
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Бизнес-дата 	Бизнес-дата транзакции. (YYYYMMDD).	Y	Слева/None
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПреобразоватьНомер(Объект.ДокОснование.НомерRMS)),8,0));
		Текст.ЗаписатьСтроку(?(Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S"));//Char(1)
		Текст.ЗаписатьСтроку(ДобавитьСправа(КодСклада,10," "),Символ(10));//Char(10)	Задается внешней системой	Идентификатор склада или магазина имагазина	Y	Слева/None
		
		
		Для Каждого СтрокаСостава Из Объект.Состав Цикл
			//FDETL
			НомерСтроки = НомерСтроки + 1;
			Текст.ЗаписатьСтроку("FDETL");
			Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
			Текст.ЗаписатьСтроку("ITM");//Char(3)
			Текст.ЗаписатьСтроку(ДобавитьСправа(СтрокаСостава.Номенклатура.Код,25," "));//Char(25)	Идентификатор товара	Идентификатор  товара.	N	Слева/Пробел
			Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СтрокаСостава.Количество,"ЧЦ=12; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=00000000,0000; ЧВН="),",",""));//Number(12)		Количество  товаров, 4 цифры после запятой.	Y	Справа/0
			Текст.ЗаписатьСтроку(ДобавитьСправа(КодСклада,150," "),Символ(10));//Char(150)
		КонецЦикла;
		
		//FTAIL
		НомерСтроки = НомерСтроки + 1;
		Текст.ЗаписатьСтроку("FTAIL");
		Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки	Y	Справа/0
		Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки - 2,"ЧГ="),10,0),Символ(10));//Number(10)		Количество транзакций в текущем файле (только записи между file head & tail)	Y	Справа/0
		
		
		Текст.Закрыть();
		Результат = Истина;
		Попытка
			FTP = Константы.FTPRMS.Получить();
			ПроксиСервер = Константы.НастройкаПроксиСервера.Получить().Получить();
			
			Если Найти(FTP.URL,"://") Тогда
				URL = Сред(FTP.URL,Найти(FTP.URL,"://")+3);
			Иначе
				URL = FTP.URL;
			КонецЕсли;	
			
			Соединение = Новый FTPСоединение(URL, FTP.Порт, FTP.Имя, FTP.Пароль, ПроксиСервер, FTP.ПасссивныйРежим, FTP.Таймаут);
			Соединение.УстановитьТекущийКаталог(FTP.ИмяКаталога);
			//Если Соединение.НайтиФайлы("STKU").Количество() = 0 Тогда
			//	Соединение.СоздатьКаталог("STKU");
			//КонецЕсли;	
			//Соединение.УстановитьТекущийКаталог("STKU");
			стрИмяФайлаПриемника = "STKU_"+КодСклада+"_"+ПреобразоватьНомер(Объект.Номер)+"_"+ФорматДаты+".DAT";
			
			Соединение.Записать(стрИмяФайла, стрИмяФайлаПриемника);
			
			Соединение = Неопределено;
		Исключение
			Результат = Ложь;
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

Функция ОтправитьВозвратнаяНакладнаяОтПокупателя(Объект,Прокси,Ошибка)
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		//ЗаписатьНомерТрансфера(Объект,Прокси);
		Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница.ОптоваяЛокация) Тогда
			Результат = ОтправитьВозвратнаяНакладнаяОтПокупателяКакТрансфер(Объект,Прокси,Ошибка,Объект.СтруктурнаяЕдиница.ОптоваяЛокация);
		Иначе
			Ошибка = "Не указана структурная единица опта!";
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Результат = ОтправитьВозвратнаяНакладнаяОтПокупателяКакPOSU(Объект,Ошибка);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ОтправитьВозвратнаяНакладнаяОтПокупателяКакТрансфер(Объект,Прокси,Ошибка,Контрагент)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
	InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
	InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
	ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
	
	ПакетInvAdjustDesc.dc_dest_id = ПолучитьКодЛокации(Контрагент);
	to_disposition = "ATS";
	КодКоррекцииТрансфер = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодКоррекцииТрансфер);
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетInvAdjustDtl.to_disposition = to_disposition;
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = КодКоррекцииТрансфер;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,"PN"+Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/XTsfDesc").КорневыеСвойства;
	XTsfDesc = КорневыеСвойства.Получить("XTsfDesc").Тип;
	XTsfDtl = КорневыеСвойства.Получить("XTsfDtl").Тип;
	ПакетXTsfDesc = ФабрикаXDTO.Создать(XTsfDesc);
	Если НЕ ЗначениеЗаполнено(Объект.НомерRMS) Тогда
		Объект.НомерRMS = Прокси.getNewTransferNumber();
		//{ СИТЕК БрыляковЕЮ 2015-04-30  
		Izh_ОбменДанными.УстановитьОбменДаннымиЗагрузка(Объект);
		// СИТЕК БрыляковЕЮ 2015-04-30 }
		Объект.Записать();
	КонецЕсли;	
	ПакетXTsfDesc.tsf_no = Объект.НомерRMS;
	ПакетXTsfDesc.from_loc_type = ?(Контрагент.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
	ПакетXTsfDesc.from_loc = ПолучитьКодЛокации(Контрагент);
	ПакетXTsfDesc.to_loc_type = ?(Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
	ПакетXTsfDesc.to_loc = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
	//ПакетXTsfDesc.delivery_date = RibData(Объект.Дата);
	ПакетXTsfDesc.tsf_type = "AIP";
	//ПакетXTsfDesc.tsf_type = "EG";
	
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ПакетXTsfDtl = ФабрикаXDTO.Создать(XTsfDtl);
		ПакетXTsfDtl.item = СокрЛП(Строка.Номенклатура.Код);
		ПакетXTsfDtl.tsf_qty = Строка.Количество*Строка.Коэффициент;
		ПакетXTsfDtl.supp_pack_size = Строка.Коэффициент;
		//ПакетXTsfDtl.inv_status = "0";
		//ПакетXTsfDtl.unit_cost = Строка.Цена;
		
		ПакетXTsfDesc.XTsfDtl.Добавить(ПакетXTsfDtl);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетXTsfDesc,"XTsfDesc","XTsf","XTsfCre");
	Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ASNOutDesc").КорневыеСвойства;
	ASNOutDesc = КорневыеСвойства.Получить("ASNOutDesc").Тип;
	ASNOutCtn = КорневыеСвойства.Получить("ASNOutCtn").Тип;
	ASNOutDistro = КорневыеСвойства.Получить("ASNOutDistro").Тип;
	ASNOutItem = КорневыеСвойства.Получить("ASNOutItem").Тип;
	ПакетASNOutDesc = ФабрикаXDTO.Создать(ASNOutDesc);
	ПакетASNOutDesc.to_location = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
	ПакетASNOutDesc.from_location = Формат(Контрагент.Код,"ЧГ=");
	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
	//	ПакетASNOutDesc.asn_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
	//Иначе
	//ПакетASNOutDesc.asn_nbr = СокрЛП(Объект.Номер)+Сред(Год(Объект.Дата),3);
	//КонецЕсли;	
	ПакетASNOutDesc.asn_nbr = Объект.НомерRMS;
	ПакетASNOutDesc.asn_type = "C";
	ПакетASNOutDesc.container_qty = "1";
	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
	//	ПакетASNOutDesc.bol_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
	//Иначе
	ПакетASNOutDesc.bol_nbr = Объект.НомерRMS;
	//КонецЕсли;	
	ПакетASNOutDesc.shipment_date = RibData(Объект.Дата);
	ПакетASNOutDesc.ship_address1 = "";
	ПакетASNOutDesc.ship_address2 = "";
	ПакетASNOutDesc.ship_address3 = "";
	ПакетASNOutDesc.ship_address4 = "";
	ПакетASNOutDesc.ship_address5 = "";
	ПакетASNOutDesc.ship_city = "";
	ПакетASNOutDesc.ship_state = "";
	ПакетASNOutDesc.ship_zip = "";
	ПакетASNOutDesc.ship_country_id = СокрЛП(Контрагент.Страна.Код);
	ПакетASNOutDesc.trailer_nbr = "";
	ПакетASNOutDesc.seal_nbr = "";
	ПакетASNOutDesc.carrier_code = "";
	ПакетASNOutDesc.transshipment_nbr = "";
	
	
	ПакетASNOutDistro = ФабрикаXDTO.Создать(ASNOutDistro);
	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
	//	ПакетASNOutDistro.distro_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
	//Иначе
	ПакетASNOutDistro.distro_nbr = Объект.НомерRMS;
	//КонецЕсли;	
	ПакетASNOutDistro.distro_doc_type = "T";
	ПакетASNOutDistro.customer_order_nbr = ""; 
	ПакетASNOutDistro.consumer_direct = ""; 
	
	final_location = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
	ПакетASNOutCtn = ФабрикаXDTO.Создать(ASNOutCtn);
	ПакетASNOutCtn.final_location = final_location;
	ПакетASNOutCtn.container_id = "0";
	ПакетASNOutCtn.container_weight = "0";
	ПакетASNOutCtn.container_length = "0";
	ПакетASNOutCtn.container_width = "0";
	ПакетASNOutCtn.container_height = "0";
	ПакетASNOutCtn.container_cube = "0";
	ПакетASNOutCtn.expedite_flag = "N"; 
	ПакетASNOutCtn.rma_nbr = ""; 
	ПакетASNOutCtn.tracking_nbr = ""; 
	ПакетASNOutCtn.freight_charge = "0";
	ПакетASNOutCtn.master_container_id = ""; 
	
	from_disposition = "ATS";
	
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ПакетASNOutItem = ФабрикаXDTO.Создать(ASNOutItem);
		ПакетASNOutItem.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетASNOutItem.unit_qty = Строка.Количество*Строка.Коэффициент;
		ПакетASNOutItem.final_location = final_location;
		ПакетASNOutItem.priority_level = "0";
		ПакетASNOutItem.order_line_nbr = "0";
		ПакетASNOutItem.container_qty = "1";
		ПакетASNOutItem.lot_nbr = ""; 
		ПакетASNOutItem.from_disposition = from_disposition; 
		ПакетASNOutItem.to_disposition = ""; 
		ПакетASNOutItem.voucher_number = ""; 
		
		ПакетASNOutCtn.ASNOutItem.Добавить(ПакетASNOutItem);
	КонецЦикла;
	ПакетASNOutDistro.ASNOutCtn.Добавить(ПакетASNOutCtn);
	ПакетASNOutDesc.ASNOutDistro.Добавить(ПакетASNOutDistro);
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетASNOutDesc,"ASNOutDesc","ASNOut","ASNOutCre");
	Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = Ошибка + RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьВозвратнаяНакладнаяОтПокупателяКакPOSU(Объект,Ошибка)
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	Дата = Формат(Объект.Дата,"ДФ=yyyyMMdd");
	Час = ДобавитьСлева(Час(Объект.Дата),2,0);
	Минута = ДобавитьСлева(Минута(Объект.Дата),2,0);
	Секунда = ДобавитьСлева(Секунда(Объект.Дата),2,0);
	
	ФорматДаты = Дата+Час+Минута+Секунда;
	
	стрИмяФайла = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), "VN"+ПреобразоватьНомер(Объект.Номер)+ФорматДаты+"POSUpld_"+Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="));
	Текст = Новый ЗаписьТекста(стрИмяФайла,КодировкаТекста.ANSI,"",,"");
	
	НомерСтроки = 1;
	
	ВерсияRMS = Константы.ВерсияRMS.Получить();
	
	ВалютаУчета = СокрЛП(Объект.СтруктурнаяЕдиница.Валюта.Наименование);
	//FHEAD
	Текст.ЗаписатьСтроку("FHEAD");
	Текст.ЗаписатьСтроку(ДобавитьСлева("1",10,0));//Number(10)	Задается внешней системой	ID текущей строки файла.	Y	Справа/0
	Текст.ЗаписатьСтроку("POSU");//Char(4)	RTLG	Идентифицирует файл как «Oracle Retail TLOG».	Y	Слева/Пробел
	Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Дата создания	Дата и время создания файла внешней  системой (YYYYMMDDHHMMSS).	Y	Слева/None
	Текст.ЗаписатьСтроку(ДобавитьСправа(СтрЗаменить(Формат(Объект.СтруктурнаяЕдиница.Код,"ЧРГ=','"),",",""),10," "));//Char(10)	Задается внешней системой	Идентификатор склада или магазина имагазина	Y	Слева/None
	Текст.ЗаписатьСтроку("Y");//Char(1)	vat include indicator from location- dummy
	Текст.ЗаписатьСтроку("0001");//Number(4)	vat region	from location - dummy
	Текст.ЗаписатьСтроку(ВалютаУчета);//Char(3)	currency code from location - dummy
	Текст.ЗаписатьСтроку("2",Символ(10));//Number(1)	currency retail decimals from location - dummy
	
	Для Каждого СтрокаСостава Из Объект.Состав Цикл
		НомерСтроки = НомерСтроки + 1;
		Текст.ЗаписатьСтроку("THEAD");
		Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Transaction date	Дата POS- транзакции  (YYYYMMDDHHMMSS).	Y	Слева/None
		Текст.ЗаписатьСтроку("ITM");//Char(3) item type - REF or ITM - dummy
		Если Найти(СтрокаСостава.Номенклатура.Код,"У")>0 Тогда 
			Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.Номенклатура.Код),24," "));//Char(25)	Идентификатор товара	Идентификатор продаваемого товара.	N	Слева/Пробел
		Иначе
			Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.Номенклатура.Код),25," "));//Char(25)	Идентификатор товара	Идентификатор продаваемого товара.	N	Слева/Пробел
		КонецЕсли;	
		dept = ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,3).Код;
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(Сред(dept,Найти(dept,":")+1)),4,"0"));//Number(4)	Идентификатор департамента к которому принадлежит товар. Заполняется программой saimptlog. 	N	Справа/Blank
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,2).Код),4,"0"));//Number(4)	Класс товара	Класс продаваемого или возвращаемого товара. Нет требует заполнения ретейлером, заполняется модулем Oracle Retail sales audit.
		Текст.ЗаписатьСтроку(ДобавитьСлева(СокрЛП(ПолучитьГруппуПоУровню(СтрокаСостава.Номенклатура,1).Код),4,"0"));//Number(4)	Подкласс товара	Подкласс продаваемого или возвращаемого товара. Не требует заполнения ретейлером, populated заполняется модулем Oracle Retail sales audit.
		Если СтрокаСостава.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Набор ИЛИ СтрокаСостава.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.НаборПоставщика Тогда
			Набор = "Y";
		Иначе
			Набор = "N";
		КонецЕсли;	
		Текст.ЗаписатьСтроку(Набор);//Char(1)	pack indicator from item - dummy
		Текст.ЗаписатьСтроку("1");//Number (1)	item level from item - dummy
		Текст.ЗаписатьСтроку("1");//Number (1)	transaction level from item - dummy
		Текст.ЗаписатьСтроку(ДобавитьСправа("",6," "));//Char (6)	wastage type from item - dummy
		Текст.ЗаписатьСтроку(ДобавитьСправа("",12,"0"));//Number (12)	wastage percent - dummy
		Текст.ЗаписатьСтроку("R");//Char(1)	Значение из списка «SASI» code_type.	Статус товара в транзакции, V - аннулирован, S - продан, R -  возвращен.	Y	Слева/Пробел
		Текст.ЗаписатьСтроку("N");//Char(1)	Значение из списка «YSNO» code type.	Указывает, является ли товар частью прямой поставки (drop shipment)	Y	Слева/None
		Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СтрокаСостава.Количество,"ЧЦ=12; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧВН="),",",""));//Number(12)		Количество проданных товаров, 4 цифры после запятой.	Y	Справа/0
		Текст.ЗаписатьСтроку(ДобавитьСправа(СокрЛП(СтрокаСостава.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование),4," "));//Char(4)		Единица измерения проданного товара 	Y	Слева/None
		Текст.ЗаписатьСтроку("P");//Char(1)	Значение из списка «SIGN» code_type.	Знак количества	Y	Слева/None
		Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СтрокаСостава.Сумма,"ЧЦ=20; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧВН="),",",""));//Number(20)		Total sales value  с 4 значащими цифрами после запятой. Заполняется ретейлером для TOTAL транзакций, Заполняется Oracle Retail Sales Audit для SALE, RETURN транзакций.	Y если транзакция
		Текст.ЗаписатьСтроку(ФорматДаты);//Char(14)	Last date time midified. (YYYYMMDDHHMMSS) - dummy
		Текст.ЗаписатьСтроку("N");//Char(1)	Допустимые значения: ‘Y’,’N’	Указывает, является ли товар «catchweight» (полученный вес) 		Слева/None
		Текст.ЗаписатьСтроку(ДобавитьСлева("",12," "));//Number (12)	total weight (if catchweight item ind = Y) - dummy
		Если ВерсияRMS >= 13.2 Тогда
			Текст.ЗаписатьСтроку(" ");//Char(1)	tran type for ReSA A,D,NULL  - dummy
			Текст.ЗаписатьСтроку(СтрЗаменить(Формат(СтрокаСостава.СуммаНДС,"ЧЦ=20; ЧДЦ=4; ЧРД=,; ЧРГ=,; ЧН=0000000000000000,0000; ЧВН="),",",""),Символ(10));//Number(20)		Total TAX value  с 4 значащими цифрами после запятой. Заполняется ретейлером для TOTAL транзакций, Заполняется Oracle Retail Sales Audit для SALE, RETURN транзакций.	Y если транзакция
		Иначе	
			Текст.ЗаписатьСтроку(" ",Символ(10));//Char(1)	tran type for ReSA A,D,NULL  - dummy
		КонецЕсли;
		//НомерСтроки = НомерСтроки + 1;
		//Текст.ЗаписатьСтроку("TDETL");
		//Текст.ЗаписатьСтроку(ДобавитьСлева(НомерСтроки,10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		//Текст.ЗаписатьСтроку("");//Char(6)	code for the promotion type from code_detail where code_type='PRMT'
		//Текст.ЗаписатьСтроку("");//Number (10)	promotion number - dummy
		//Текст.ЗаписатьСтроку("");//Number (12)	Sales quantity sold for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (20)	Sales value for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (20)	Discount value for this type of promotion (4 decimals)
		//Текст.ЗаписатьСтроку("");//Number (10)	Promotion component. Links the promotion to additional pricing attributes (4 decimals)
		
		//TTAIL
		НомерСтроки = НомерСтроки + 1;
		Текст.ЗаписатьСтроку("TTAIL");
		Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки.	Y	Справа/0
		Текст.ЗаписатьСтроку(ДобавитьСлева(0,6,0),Символ(10));//Number(6)		Number of T_DETL records in this transaction set. Количество записей в текущей транзакции (только записи между trans head & tail)		
	КонецЦикла;	
	//FTAIL
	НомерСтроки = НомерСтроки + 1;
	Текст.ЗаписатьСтроку("FTAIL");
	Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки,"ЧГ="),10,0));//Number(10)	Задается внешней системой	ID текущей строки	Y	Справа/0
	Текст.ЗаписатьСтроку(ДобавитьСлева(Формат(НомерСтроки-2,"ЧГ="),10,0),Символ(10));//Number(10)		Количество транзакций в текущем файле (только записи между file head & tail)	Y	Справа/0
	Текст.ЗаписатьСтроку("",Символ(10));
	Текст.Закрыть();
	Результат = Истина;
	Попытка
		FTP = Константы.FTPRMS.Получить();
		ПроксиСервер = Константы.НастройкаПроксиСервера.Получить().Получить();
		
		Если Найти(FTP.URL,"://") Тогда
			URL = Сред(FTP.URL,Найти(FTP.URL,"://")+3);
		Иначе
			URL = FTP.URL;
		КонецЕсли;	
		
		Соединение = Новый FTPСоединение(URL, FTP.Порт, FTP.Имя, FTP.Пароль, ПроксиСервер, FTP.ПасссивныйРежим, FTP.Таймаут);
		Соединение.УстановитьТекущийКаталог(FTP.ИмяКаталога);
		//Если Соединение.НайтиФайлы("pos").Количество() = 0 Тогда
		//	Соединение.СоздатьКаталог("pos");
		//КонецЕсли;	
		//Соединение.УстановитьТекущийКаталог("pos");
		стрИмяФайлаПриемника = "POSU_"+Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=")+"_VN"+ПреобразоватьНомер(Объект.Номер)+"_"+ФорматДаты+".DAT";
		
		Соединение.Записать(стрИмяФайла, стрИмяФайлаПриемника);
		
		Соединение = Неопределено;
	Исключение
		Результат = Ложь;
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ОтправитьГрафикИнвентаризаций(Объект,Прокси,Ошибка)
	Если Объект.ТипПередачиРезультатов = Перечисления.ТипыПередачиРезультатовИнвентаризации.ИзлишкиНедостачи Тогда
		Возврат Истина;
	КонецЕсли;	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/StkCountSchDesc").КорневыеСвойства;
	StkCountSchDesc = КорневыеСвойства.Получить("StkCountSchDesc").Тип;
	StkCountSchProd = КорневыеСвойства.Получить("StkCountSchProd").Тип;
	StkCountSchLoc = КорневыеСвойства.Получить("StkCountSchLoc").Тип;
	ПакетStkCountSchDesc = ФабрикаXDTO.Создать(StkCountSchDesc);
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерRMS) Тогда
		Объект.НомерRMS = Прокси.getNextCycleCountNumber();
		//{ СИТЕК БрыляковЕЮ 2015-04-30  
		Izh_ОбменДанными.УстановитьОбменДаннымиЗагрузка(Объект);
		// СИТЕК БрыляковЕЮ 2015-04-30 }
		Объект.Записать();
	КонецЕсли;	
	ПакетStkCountSchDesc.cycle_count = Объект.НомерRMS;
	ПакетStkCountSchDesc.cycle_count_desc = Объект.Номер;
	ПакетStkCountSchDesc.location_type = ?(Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
	ПакетStkCountSchDesc.stocktake_date = RibData(Объект.ДатаИнвентаризации);
	ПакетStkCountSchDesc.stocktake_type = "B";
	Если Объект.Состав.Количество() = 0 Тогда
		ПакетStkCountSchProd = ФабрикаXDTO.Создать(StkCountSchProd);
		ПакетStkCountSchProd.dept = -1;
		ПакетStkCountSchDesc.StkCountSchProd.Добавить(ПакетStkCountSchProd);
	Иначе	
		Для Каждого Строка Из Объект.Состав Цикл
			ПакетStkCountSchProd = ФабрикаXDTO.Создать(StkCountSchProd);
			ПакетStkCountSchProd.dept = Сред(Строка.Департамент.Код,Найти(Строка.Департамент.Код,":")+1);
			Если ЗначениеЗаполнено(Строка.Класс) Тогда
				ПакетStkCountSchProd.class = СокрЛП(Строка.Класс.Код);
			КонецЕсли;	
			Если ЗначениеЗаполнено(Строка.ПодКласс) Тогда
				ПакетStkCountSchProd.subclass = СокрЛП(Строка.ПодКласс.Код);
			КонецЕсли;	
			ПакетStkCountSchDesc.StkCountSchProd.Добавить(ПакетStkCountSchProd);
		КонецЦикла;
	КонецЕсли;
	Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		Для Каждого Строка Из Объект.Склады Цикл
			ПакетStkCountSchLoc = ФабрикаXDTO.Создать(StkCountSchLoc);
			ПакетStkCountSchLoc.location = Формат(Строка.Склад.Код,"ЧГ=");
			ПакетStkCountSchDesc.StkCountSchLoc.Добавить(ПакетStkCountSchLoc);
		КонецЦикла;	
	Иначе
		ПакетStkCountSchLoc = ФабрикаXDTO.Создать(StkCountSchLoc);
		ПакетStkCountSchLoc.location = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
		ПакетStkCountSchDesc.StkCountSchLoc.Добавить(ПакетStkCountSchLoc);
	КонецЕсли;	
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетStkCountSchDesc,"StkCountSchDesc","StkCountSch","StkCountSchCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьЗаказВнешний(Объект,Прокси,Ошибка)       //dps+ 000123958
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_ЗапросНаПополнение");
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_ЗапросНаПополнение_Состав");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.ДатаПоставкиОт = Объект.ДатаПоставкиОт; 
	Пакет.ДатаПоставкиДо = Объект.ДатаПоставкиДо;
	Пакет.Number = СокрЛП(Объект.Номер);
	Пакет.Posted = Объект.Проведен;
	Пакет.Склад = Формат(Объект.Склад.Код,"ЧГ=");
	Пакет.СтруктурнаяЕдиница = Формат(Объект.Контрагент.Код,"ЧГ=");
	Пакет.Контрагент = Формат(Объект.Контрагент.Код,"ЧГ=");
	Пакет.Комментарий = Объект.Комментарий;
	
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура     					= Формат(Строка.Номенклатура.Код,"ЧГ=");
		ПакетСостав.Количество       					= Строка.Количество;
		ПакетСостав.ЕдиницаИзмерения       				= СокрЛП(Строка.ЕдиницаИзмерения.Наименование);
		ПакетСостав.Коэффициент       					= Строка.Коэффициент;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ЗапросНаПополнение","CID","RS_ЗапросНаПополнение",Формат(Объект.Контрагент.Код,"ЧГ="));
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьЗапросНаПополнение(Объект,Прокси,Ошибка)
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.СкладПроизводства) Тогда
		ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_ЗаказВнешний");
		ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_ЗаказВнешний_Состав");
		Пакет = ФабрикаXDTO.Создать(ТипДокумента);
		Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
		Пакет.DeletionMark = Объект.ПометкаУдаления;
		Пакет.Date = Объект.Дата;
		//dps+   07.08.14 000123562
		Пакет.ДатаПоставкиОт = Объект.ДатаПоставкиОт; 
		Пакет.ДатаПоставкиДо = Объект.ДатаПоставкиДо;
		//dps-
		Пакет.Number = СокрЛП(Объект.Номер);
		Пакет.Posted = Объект.Проведен;
		Пакет.Склад = Формат(Объект.СкладПроизводства.Код,"ЧГ=");
		Пакет.СтруктурнаяЕдиница = Формат(Объект.СкладПроизводства.Владелец.Код,"ЧГ=");
		Пакет.Контрагент = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
		Пакет.Комментарий = Объект.Комментарий;
		//{ВетровИА 22.04.2015 Наряд №000148502
		Пакет.Фирма = Строка(Объект.Фирма.УникальныйИдентификатор());
		// ВетровИА 22.04.2015 Наряд №000148502}
		Для Каждого Строка Из Объект.Состав Цикл
			ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
			ПакетСостав.Номенклатура     					= Формат(Строка.Номенклатура.Код,"ЧГ=");
			ПакетСостав.Количество       					= Строка.Количество;
			ПакетСостав.ЕдиницаИзмерения       				= СокрЛП(Строка.ЕдиницаИзмерения.Наименование);
			ПакетСостав.Коэффициент       					= Строка.Коэффициент;
			ПакетСостав.ДатаПоставки = Строка.ДатаПоставки;
			Пакет.Состав.Добавить(ПакетСостав);
		КонецЦикла;
		RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ЗаказВнешний","InvReqStore","InvReqStoreCre",Формат(Объект.СкладПроизводства.Владелец.Код,"ЧГ="));
	Иначе
		КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvReqDesc").КорневыеСвойства;
		InvReqDesc = КорневыеСвойства.Получить("InvReqDesc").Тип;
		InvReqItem = КорневыеСвойства.Получить("InvReqItem").Тип;
		ПакетInvReqDesc = ФабрикаXDTO.Создать(InvReqDesc);
		
		ПакетInvReqDesc.store = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
		//{КотлячковаЕВ 2014-05-08 08:19:58 Наряд № 000115427
		ПакетInvReqDesc.request_id = ПреобразоватьНомер(Объект.Номер);
		//ПакетInvReqDesc.request_id = ПреобразоватьНомер(Объект.Номер)+Формат(Объект.Дата,"ДФ=yy");
		
		//КотлячковаЕВ 2014-05-08 08:19:58 }
		ПакетInvReqDesc.request_type = "SO";
		
		Для Каждого Строка Из Объект.Состав Цикл
			ПакетInvReqItem = ФабрикаXDTO.Создать(InvReqItem);
			ПакетInvReqItem.item = СокрЛП(Строка.Номенклатура.Код);
			ПакетInvReqItem.qty_rqst = Строка.Количество;
			ПакетInvReqItem.uop = СокрЛП(Строка.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование);
			ПакетInvReqItem.need_date = RibData(Строка.ДатаПоставки);
			ПакетInvReqDesc.InvReqItem.Добавить(ПакетInvReqItem);
		КонецЦикла;
		
		RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетInvReqDesc,"InvReqDesc","InvReq","InvReqCre");
	КонецЕсли;	
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьКоррекцияЗапасов(Объект,Прокси,Ошибка)
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
	InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
	InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
	ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
	
	ПакетInvAdjustDesc.dc_dest_id = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
	Если Объект.Оприходование Тогда
		Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
			to_disposition = "UTS";
		Иначе
			to_disposition = "ATS";
		КонецЕсли;
		from_disposition = Неопределено;
	Иначе
		Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
			from_disposition = "UTS";
		Иначе
			from_disposition = "ATS";
		КонецЕсли;
		to_disposition = Неопределено;
	КонецЕсли;	
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		Если from_disposition <> Неопределено Тогда
			ПакетInvAdjustDtl.from_disposition = from_disposition;
		КонецЕсли;	
		Если to_disposition <> Неопределено Тогда
			ПакетInvAdjustDtl.to_disposition = to_disposition;
		КонецЕсли;	
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = Объект.ВидСписания.Код;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,"KZ"+Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьКомплектация(Объект,Прокси,Ошибка)
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
	InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
	InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
	ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
	
	ПакетInvAdjustDesc.dc_dest_id = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
	
	Если Объект.Разукомплектация Тогда
		Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
			from_disposition = "UTS";
		Иначе
			from_disposition = "ATS";
		КонецЕсли;
		to_disposition = Неопределено;
	Иначе
		Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
			to_disposition = "UTS";
		Иначе
			to_disposition = "ATS";
		КонецЕсли;
		from_disposition = Неопределено;
	КонецЕсли;	
	ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
	ПакетInvAdjustDtl.item_id = СокрЛП(Объект.Комплект.Код);
	ПакетInvAdjustDtl.unit_qty = Объект.Количество;
	Если from_disposition <> Неопределено Тогда
		ПакетInvAdjustDtl.from_disposition = from_disposition;
	КонецЕсли;	
	Если to_disposition <> Неопределено Тогда
		ПакетInvAdjustDtl.to_disposition = to_disposition;
	КонецЕсли;	
	ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
	ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
	ПакетInvAdjustDtl.adjustment_reason_code = Объект.ВидСписания.Код;
	ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
		ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
		//а здесь наоборот
		Если to_disposition <> Неопределено Тогда
			ПакетInvAdjustDtl.from_disposition = to_disposition;
		КонецЕсли;	
		Если from_disposition <> Неопределено Тогда
			ПакетInvAdjustDtl.to_disposition = from_disposition;
		КонецЕсли;	
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = Объект.ВидСписания.Код;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,"K"+Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьПеремещение(Объект,Прокси,Ошибка)
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
		InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
		InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
		ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
		
		ПакетInvAdjustDesc.dc_dest_id = Объект.Склад.Код;
		Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
			from_disposition = "UTS";
		Иначе
			from_disposition = "ATS";
		КонецЕсли;	
		Для Каждого Строка Из Объект.Состав Цикл
			Если Строка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;	
			ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
			ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
			ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
			ПакетInvAdjustDtl.from_disposition = from_disposition;
			ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
			ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
			ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
		КонецЦикла;
		
		RibMessages = УпаковатьВСообщение(Объект.Дата,"P1"+Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
		Результат = ОтправитьСообщение(RibMessages,Прокси);
		Ошибка = RibMessages;
		
		
		ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
		
		ПакетInvAdjustDesc.dc_dest_id = Объект.СкладПолучатель.Код;
		Если Объект.СкладПолучатель.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
			to_disposition = "UTS";
		Иначе
			to_disposition = "ATS";
		КонецЕсли;	
		Для Каждого Строка Из Объект.Состав Цикл
			ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
			ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
			ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
			ПакетInvAdjustDtl.to_disposition = to_disposition;
			ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
			ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
			ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
		КонецЦикла;
		
		RibMessages = УпаковатьВСообщение(Объект.Дата,"P2"+Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
		Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
		Ошибка = Ошибка + RibMessages;
	Иначе	
		КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
		InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
		InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
		ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
		
		ПакетInvAdjustDesc.dc_dest_id = Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ=");
		Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
			from_disposition = "UTS";
		Иначе
			from_disposition = "ATS";
		КонецЕсли;	
		Если Объект.СкладПолучатель.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
			to_disposition = "UTS";
		Иначе
			to_disposition = "ATS";
		КонецЕсли;	
		Для Каждого Строка Из Объект.Состав Цикл
			Если Строка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;	
			ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
			ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
			ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
			ПакетInvAdjustDtl.from_disposition = from_disposition;
			ПакетInvAdjustDtl.to_disposition = to_disposition;
			ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
			ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
			ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
		КонецЦикла;
		
		RibMessages = УпаковатьВСообщение(Объект.Дата,"P"+Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
		Результат = ОтправитьСообщение(RibMessages,Прокси);
		Ошибка = RibMessages;
	КонецЕсли;	
	Возврат Результат;
КонецФункции

Функция ОтправитьПланируемаяПоставка(Объект,Прокси,Ошибка)
	Если НЕ Объект.ЗаказМагазина Тогда
		Возврат Истина;
	КонецЕсли;
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/XOrderDesc").КорневыеСвойства;
	XOrderDesc = КорневыеСвойства.Получить("XOrderDesc").Тип;
	XOrderDtl = КорневыеСвойства.Получить("XOrderDtl").Тип;
	ПакетXOrderDesc = ФабрикаXDTO.Создать(XOrderDesc);
	
	location = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
	Если НЕ ЗначениеЗаполнено(Объект.НомерRMS) Тогда
		Объект.НомерRMS = "PO"+СокрЛП(location)+"-"+Прокси.getNewOrderNumber();
		//{ СИТЕК БрыляковЕЮ 2015-04-30  
		Izh_ОбменДанными.УстановитьОбменДаннымиЗагрузка(Объект);
		// СИТЕК БрыляковЕЮ 2015-04-30 }
		Объект.Записать();
	КонецЕсли;
	Если Найти(Объект.НомерRMS,"-")>0 Тогда
		ПакетXOrderDesc.order_no = Сред(Объект.НомерRMS,Найти(Объект.НомерRMS,"-")+1);
	Иначе
		ПакетXOrderDesc.order_no = Сред(Объект.НомерRMS,3);
	КонецЕсли;
	
	ПакетXOrderDesc.supplier = Формат(Объект.Контрагент.Код,"ЧГ=");
	ПакетXOrderDesc.currency_code = Объект.Валюта.Наименование;
	ПакетXOrderDesc.terms = "1";
	ПакетXOrderDesc.not_before_date = RibData(Объект.ДатаПоставкиОт);
	ПакетXOrderDesc.not_after_date = RibData(Объект.ДатаПоставкиДо);
	ПакетXOrderDesc.status = "A";
	ПакетXOrderDesc.exchange_rate = Объект.Курс;
	ПакетXOrderDesc.include_on_ord_ind = "N";
	ПакетXOrderDesc.written_date = RibData(Объект.Дата);
	ПакетXOrderDesc.orig_ind = "7";
	ПакетXOrderDesc.edi_po_ind = "N";
	ПакетXOrderDesc.pre_mark_ind = "N";
	ПакетXOrderDesc.user_id = Сред(Объект.Автор.Наименование,0,15);
	ПакетXOrderDesc.comment_desc = Объект.Номер;
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетXOrderDtl = ФабрикаXDTO.Создать(XOrderDtl);
		ПакетXOrderDtl.item = СокрЛП(Строка.Номенклатура.Код);
		ПакетXOrderDtl.location = location;
		ПакетXOrderDtl.unit_cost = ПолучитьЦенуДляОтправки(Строка);
		ПакетXOrderDtl.origin_country_id = ПолучитьСтрануТовараИКонтрагента(Строка.Номенклатура,Объект.Контрагент);
		ПакетXOrderDtl.supp_pack_size = Строка.Коэффициент;
		ПакетXOrderDtl.qty_ordered = Строка.Количество*Строка.Коэффициент;
		ПакетXOrderDtl.location_type = ?(Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
		ПакетXOrderDtl.cancel_ind = "N";
		ПакетXOrderDtl.reinstate_ind = "N";
		ПакетXOrderDesc.XOrderDtl.Добавить(ПакетXOrderDtl);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,ПакетXOrderDesc.order_no,ПакетXOrderDesc,"XOrderDesc","XOrder","XOrderCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьЗакрытиеЗаказа(Объект,Прокси,Ошибка)
	Если НЕ Объект.ДокОснование.ЗаказМагазина Тогда
		Возврат Истина;
	КонецЕсли;	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/XOrderDesc").КорневыеСвойства;
	XOrderDesc = КорневыеСвойства.Получить("XOrderDesc").Тип;
	XOrderDtl = КорневыеСвойства.Получить("XOrderDtl").Тип;
	ПакетXOrderDesc = ФабрикаXDTO.Создать(XOrderDesc);
	
	
	Если Найти(Объект.ДокОснование.НомерRMS,"-")>0 Тогда
		ПакетXOrderDesc.order_no = Сред(Объект.ДокОснование.НомерRMS,Найти(Объект.ДокОснование.НомерRMS,"-")+1);
	Иначе	
		ПакетXOrderDesc.order_no = Сред(Объект.ДокОснование.НомерRMS,3);
	КонецЕсли;	
	ПакетXOrderDesc.supplier = Формат(Объект.ДокОснование.Контрагент.Код,"ЧГ=");
	ПакетXOrderDesc.currency_code = Объект.ДокОснование.Валюта.Наименование;
	ПакетXOrderDesc.terms = "1";
	ПакетXOrderDesc.not_before_date = RibData(Объект.ДокОснование.ДатаПоставкиОт);
	ПакетXOrderDesc.not_after_date = RibData(Объект.ДокОснование.ДатаПоставкиДо);
	ПакетXOrderDesc.status = "C";
	ПакетXOrderDesc.exchange_rate = Объект.ДокОснование.Курс;
	ПакетXOrderDesc.include_on_ord_ind = "N";
	ПакетXOrderDesc.written_date = RibData(Объект.Дата);
	ПакетXOrderDesc.orig_ind = "7";
	ПакетXOrderDesc.edi_po_ind = "N";
	ПакетXOrderDesc.pre_mark_ind = "N";
	ПакетXOrderDesc.user_id = Сред(Объект.Автор.Наименование,0,15);
	ПакетXOrderDesc.comment_desc = Объект.ДокОснование.Номер;
	RibMessages = УпаковатьВСообщение(Объект.Дата,ПакетXOrderDesc.order_no,ПакетXOrderDesc,"XOrderDesc","XOrder","XOrderMod");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьПараметрыСтруктурныхЕдиниц(Объект,Прокси,Ошибка)
	Если Объект.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	Если Объект[0].СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр Тогда
		Возврат Истина;
	КонецЕсли;
	Если Объект[0].СтруктурнаяЕдиница.ЭтоГруппа Тогда
		Возврат Истина;
	КонецЕсли;	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/StorePath").КорневыеСвойства;
	StorePath = КорневыеСвойства.Получить("StorePath").Тип;
	ПакетStorePath = ФабрикаXDTO.Создать(StorePath);
	ПакетStorePath.location = Формат(Объект[0].СтруктурнаяЕдиница.Код,"ЧГ=");
	Если Объект[0].Свойство = ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПутьПубликацииВебСервисов Тогда
		ПакетStorePath.path = СокрЛП(Объект[0].Значение);
		ПакетStorePath.user = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПользовательВебСервисов,Объект[0].СтруктурнаяЕдиница);
		ПакетStorePath.pass = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПарольВебСервисов,Объект[0].СтруктурнаяЕдиница);
	ИначеЕсли Объект[0].Свойство = ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПользовательВебСервисов Тогда
		ПакетStorePath.path = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПутьПубликацииВебСервисов,Объект[0].СтруктурнаяЕдиница);
		ПакетStorePath.user = СокрЛП(Объект[0].Значение);
		ПакетStorePath.pass = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПарольВебСервисов,Объект[0].СтруктурнаяЕдиница);
	ИначеЕсли Объект[0].Свойство = ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПарольВебСервисов Тогда
		ПакетStorePath.path = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПутьПубликацииВебСервисов,Объект[0].СтруктурнаяЕдиница);
		ПакетStorePath.user = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПользовательВебСервисов,Объект[0].СтруктурнаяЕдиница);
		ПакетStorePath.pass = СокрЛП(Объект[0].Значение);
	Иначе	
		Возврат Истина;
	КонецЕсли;
	ПакетStorePath.path = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(ПакетStorePath.path,"ws/RMS?wsdl");
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),Объект[0].СтруктурнаяЕдиница.Наименование,ПакетStorePath,"StorePath","StorePath","StorePathCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьПараметрыЗаказов(Объект,Прокси,Ошибка)
	Если Объект.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "InformationRegisterRecord_ПараметрыЗаказов");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "InformationRegisterRecord_ПараметрыЗаказов_Состав");
	ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
	ПакетСостав.Номенклатура = Объект[0].Номенклатура.ПолныйКод();
	ПакетСостав.СтруктурнаяЕдиница = Объект[0].СтруктурнаяЕдиница.Код;
	ПакетСостав.СтраховойЗапас = Объект[0].СтраховойЗапас;
	ПакетСостав.МаксимальноеОтклонение = Объект[0].МаксимальноеОтклонение;
	ПакетСостав.МинимальноеОтклонение = Объект[0].МинимальноеОтклонение;
	Пакет.Состав.Добавить(ПакетСостав);
	
	//Если Объект[0].Номенклатура.Группа = 1 Тогда
	//	КодЛокации = "";	
	//Иначе
	//{БредовЮГ 2015-03-16 Наряд 000144173 от 05.03.2015 13:12:02
	//КодЛокации = Формат(Объект[0].СтруктурнаяЕдиница.Код,"ЧГ=");	
	КодЛокации = "center";       // отправляем только в центр
	//БредовЮГ 2015-03-16 Наряд 000144173 от 05.03.2015 13:12:02}
	//КонецЕсли;	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),Формат(Объект[0].Номенклатура.Код,"ЧГ="),Пакет,"InformationRegisterRecord_ПараметрыЗаказов","CID","RS_OptionsOrdersCre",КодЛокации);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции	

Функция ОтправитьEDIПровайдерыПоставщиков(Объект,Прокси,Ошибка)
	Если Объект.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "InformationRegisterRecord_EDIПровайдерыПоставщиков");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "InformationRegisterRecord_EDIПровайдерыПоставщиков_Состав");
	ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
	ПакетСостав.ТипКонтрагента = Объект[0].Контрагент.Метаданные().Имя;
	ПакетСостав.Контрагент = Формат(Объект[0].Контрагент.Код,"ЧГ=");
	ПакетСостав.EDIПровайдер = Формат(Объект[0].EDIПровайдер.Код,"ЧГ=");
	ПакетСостав.GLN = Объект[0].GLN;
	ПакетСостав.Основной = Объект[0].Основной;
	Пакет.Состав.Добавить(ПакетСостав);
	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),Формат(Объект[0].Контрагент.Код,"ЧГ="),Пакет,"InformationRegisterRecord_EDIПровайдерыПоставщиков","VendorEDI","VendorEDICre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции	

Функция ОтправитьМРЦ(Объект,Прокси,Ошибка)       //dps+ 131723 15/07/01
	
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыНоменклатуры.СтруктурнаяЕдиница.Код КАК КодСЕ
	|ИЗ
	|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|ГДЕ
	|	СтатусыНоменклатуры.Номенклатура = &Номенклатура
	|	И СтатусыНоменклатуры.СтруктурнаяЕдиница.РежимРаботы <> &РежимРаботы";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект[0].Номенклатура);
	Запрос.УстановитьПараметр("РежимРаботы", Перечисления.РежимРаботыСЕ.НеРаботает);
	
	МассивРезультата = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодСЕ");
	
	КодЛокации = "";
	Для Каждого Строка Из МассивРезультата Цикл
		КодЛокации = КодЛокации+","+Формат(Строка,"ЧГ=");
	КонецЦикла;
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "InformationRegisterRecord_МРЦ");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "InformationRegisterRecord_МРЦ_Состав");
	ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
	ПакетСостав.Период = Объект[0].Период;
	ПакетСостав.Номенклатура = Объект[0].Номенклатура.Код;
	ПакетСостав.МРЦ = Формат(Объект[0].МинимальнаяРозничнаяЦена,"ЧГ=");
	ПакетСостав.МПЦПроизв = Формат(Объект[0].МинимальнаяПриходнаяЦенаПроизводителя,"ЧГ=");
	ПакетСостав.МПЦПоставщика = Формат(Объект[0].МинимальнаяПриходнаяЦенаПоставщика,"ЧГ=");
	Пакет.Состав.Добавить(ПакетСостав);
	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),Формат(Объект[0].Номенклатура.Код,"ЧГ="),Пакет,"InformationRegisterRecord_МРЦ","CID","MRCCre",КодЛокации);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции	

Функция ОтправитьПланПроизводства(Объект,Прокси,Ошибка)
	Если Объект.Состав.Количество() = 0 Тогда
		Возврат ложь;
	КонецЕсли;	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentObject_ПланПроизводства");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Date = Объект.Дата;
	Пакет.Number = СокрЛП(Объект.Номер);
	Пакет.Posted = Объект.Проведен;
	Пакет.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница.Код;
	Пакет.Склад = Объект.Склад.Код;
	Пакет.СтруктурнаяЕдиницаСклада = Объект.Склад.Владелец.Код;
	
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_ПланПроизводства_Состав");
	
	
	Для Каждого Строка Из Объект.Состав Цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.Номенклатура = СокрЛП(Строка.Номенклатура.Код);
		ПакетСостав.ЕдиницаИзмерения = СокрЛП(Строка.ЕдиницаИзмерения.Наименование);
		ПакетСостав.Коэффициент = Строка.Коэффициент;
		ПакетСостав.Понедельник = Строка.Понедельник;
		ПакетСостав.Вторник = Строка.Вторник;
		ПакетСостав.Среда = Строка.Среда;
		ПакетСостав.Четверг = Строка.Четверг;
		ПакетСостав.Пятница = Строка.Пятница;
		ПакетСостав.Суббота = Строка.Суббота;
		ПакетСостав.Воскресенье = Строка.Воскресенье;
		ПакетСостав.Ключ = Строка.Ключ;
		ПакетСостав.Итого = Строка.Итого;
		Пакет.Состав.Добавить(ПакетСостав);
	КонецЦикла;
	
	ТипРаспределение = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "DocumentTabularSectionRow_ПланПроизводства_Распределение");
	
	
	Для Каждого Строка Из Объект.Распределение Цикл
		ПакетРаспределение = ФабрикаXDTO.Создать(ТипРаспределение);
		ПакетРаспределение.Номенклатура = СокрЛП(Строка.Номенклатура.Код);
		ПакетРаспределение.СтруктурнаяЕдиница = СокрЛП(Строка.СтруктурнаяЕдиница.Код);
		ПакетРаспределение.ЕдиницаИзмерения = СокрЛП(Строка.ЕдиницаИзмерения.Наименование);
		ПакетРаспределение.Коэффициент = Строка.Коэффициент;
		ПакетРаспределение.Понедельник = Строка.Понедельник;
		ПакетРаспределение.Вторник = Строка.Вторник;
		ПакетРаспределение.Среда = Строка.Среда;
		ПакетРаспределение.Четверг = Строка.Четверг;
		ПакетРаспределение.Пятница = Строка.Пятница;
		ПакетРаспределение.Суббота = Строка.Суббота;
		ПакетРаспределение.Воскресенье = Строка.Воскресенье;
		ПакетРаспределение.Ключ = Строка.Ключ;
		ПакетРаспределение.Итого = Строка.Итого;
		Пакет.Распределение.Добавить(ПакетРаспределение);
	КонецЦикла;
	
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,Пакет,"DocumentObject_ПланПроизводства","ProductionPlan","ProductionPlanCre",Объект.Склад.Владелец.Код);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьГотоваяПродукция(Объект,Прокси,Ошибка)
	Если Объект.Состав.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
	InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
	InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
	ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
	
	ПакетInvAdjustDesc.dc_dest_id = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
	
	//Если Объект.ВидПроизводства = Перечисления.ВидыПроизводства.Приготовление Тогда
	Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
		to_disposition = "UTS";
	Иначе
		to_disposition = "ATS";
	КонецЕсли;
	from_disposition = Неопределено;
	//Иначе
	//	Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
	//		from_disposition = "UTS";
	//	Иначе
	//		from_disposition = "ATS";
	//	КонецЕсли;
	//	to_disposition = Неопределено;
	//КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНоменклатуры.Количество,
	|	ОстаткиНоменклатуры.ВидДвижения,
	|	ОстаткиНоменклатуры.Номенклатура.Код КАК КодНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|ГДЕ
	|	ОстаткиНоменклатуры.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	КодКоррекцииГотоваяПродукцияПриход = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодКоррекцииГотоваяПродукцияПриход);
	КодКоррекцииГотоваяПродукцияРасход = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодКоррекцииГотоваяПродукцияРасход);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
		ПакетInvAdjustDtl.item_id = СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры);
		ПакетInvAdjustDtl.unit_qty = ВыборкаДетальныеЗаписи.Количество;
		
		Если ВыборкаДетальныеЗаписи.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			Если from_disposition <> Неопределено Тогда
				ПакетInvAdjustDtl.from_disposition = from_disposition;
			КонецЕсли;	
			Если to_disposition <> Неопределено Тогда
				ПакетInvAdjustDtl.to_disposition = to_disposition;
			КонецЕсли;
			adjustment_reason_code = КодКоррекцииГотоваяПродукцияПриход;
		Иначе	
			//а здесь наоборот
			Если to_disposition <> Неопределено Тогда
				ПакетInvAdjustDtl.from_disposition = to_disposition;
			КонецЕсли;	
			Если from_disposition <> Неопределено Тогда
				ПакетInvAdjustDtl.to_disposition = from_disposition;
			КонецЕсли;	
			adjustment_reason_code = КодКоррекцииГотоваяПродукцияРасход;
		КонецЕсли;	
		ПакетInvAdjustDtl.user_id = Сред(Объект.Автор.Наименование,0,15);
		ПакетInvAdjustDtl.create_date = RibData(Объект.Дата);
		ПакетInvAdjustDtl.adjustment_reason_code = adjustment_reason_code;
		ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
	КонецЦикла;
	
	RibMessages = УпаковатьВСообщение(Объект.Дата,"ГП"+Объект.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьЕдиницыИзмерения(Объект,Прокси,Ошибка)
	Запрос = Новый Запрос;
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыНоменклатуры.СтруктурнаяЕдиница.Код КАК КодСЕ
		|ИЗ
		|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
		|ГДЕ
		|	СтатусыНоменклатуры.Номенклатура = &Номенклатура
		|	И СтатусыНоменклатуры.СтруктурнаяЕдиница.РежимРаботы = &РежимРаботы
		|	И СтатусыНоменклатуры.СтруктурнаяЕдиница.Код <> &Код";
		Запрос.УстановитьПараметр("Номенклатура", Объект.Владелец);
		Запрос.УстановитьПараметр("РежимРаботы", Перечисления.РежимРаботыСЕ.Продуктив);
		Запрос.УстановитьПараметр("Код", СтруктурныеЕдиницы.ПолучитьКодТекущейЛокации());
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Владелец.Код КАК КодСЕ
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.ВидСклада = &ВидСклада
		|	И Склады.Владелец.РежимРаботы = &РежимРаботы
		|	И Склады.Владелец.Код <> &Код
		|
		|СГРУППИРОВАТЬ ПО
		|	Склады.Владелец.Код";
		Запрос.УстановитьПараметр("ВидСклада", Перечисления.ВидыСкладов.Производство);
		Запрос.УстановитьПараметр("РежимРаботы", Перечисления.РежимРаботыСЕ.Продуктив);
		Запрос.УстановитьПараметр("Код", СтруктурныеЕдиницы.ПолучитьКодТекущейЛокации());
	КонецЕсли;	
	
	
	МассивРезультата = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодСЕ");
	Если МассивРезультата.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	КодЛокации = "";
	Для Каждого Строка Из МассивРезультата Цикл
		КодЛокации = КодЛокации+","+Формат(Строка,"ЧГ=");
	КонецЦикла;
	
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemUOMDesc").КорневыеСвойства;
	ItemUOMDesc = КорневыеСвойства.Получить("ItemUOMDesc").Тип;
	ПакетItemUOMDesc = ФабрикаXDTO.Создать(ItemUOMDesc);
	
	ПакетItemUOMDesc.item = СокрЛП(Объект.Владелец.Код);
	ПакетItemUOMDesc.item_type = СокрЛП(Объект.Владелец.Метаданные().Имя);
	ПакетItemUOMDesc.uom = СокрЛП(Объект.Наименование);
	ПакетItemUOMDesc.uom_type = СокрЛП(Объект.ЕдиницаПоКлассификатору.Наименование);
	ПакетItemUOMDesc.uom_conv_factor = Объект.Коэффициент;
	ПакетItemUOMDesc.supplier = Объект.Контрагент.Код;
	//ПакетItemUOMDesc.width = Объект.Длина;
	//ПакетItemUOMDesc.height = Объект.Высота;
	//ПакетItemUOMDesc.weight = Объект.Глубина;
	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),СокрЛП(Объект.Наименование)+СокрЛП(Объект.Владелец.Код),ПакетItemUOMDesc,"ItemUOMDesc","ItemUOM","ItemUOMcre",КодЛокации);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Ошибка = RibMessages;
	Возврат Результат;
КонецФункции

Функция ОтправитьРаспоряжениеНаОтгрузку(Объект,Прокси,Ошибка)
	//Если Объект.Состав.Количество()=0 Тогда
	//	Возврат Истина;
	//КонецЕсли;	
	//КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/XAllocDesc").КорневыеСвойства;
	//XAllocDesc = КорневыеСвойства.Получить("XAllocDesc").Тип;
	//XAllocDtl = КорневыеСвойства.Получить("XAllocDtl").Тип;
	//ПакетXAllocDesc = ФабрикаXDTO.Создать(XAllocDesc);
	//
	//location = ПолучитьКодЛокации(Объект.СтруктурнаяЕдиница,Объект.Склад);
	//Если НЕ ЗначениеЗаполнено(Объект.НомерRMS) Тогда
	//	Объект.НомерRMS = "PO"+СокрЛП(location)+"-"+Прокси.getNewOrderNumber();
	//	Объект.Записать();
	//КонецЕсли;	
	//Если Найти(Объект.НомерRMS,"-")>0 Тогда
	//	ПакетXOrderDesc.order_no = Сред(Объект.НомерRMS,Найти(Объект.НомерRMS,"-")+1);
	//Иначе	
	//	ПакетXOrderDesc.order_no = Сред(Объект.НомерRMS,3);
	//КонецЕсли;	
	//
	//ПакетXOrderDesc.supplier = Формат(Объект.Контрагент.Код,"ЧГ=");
	//ПакетXOrderDesc.currency_code = Объект.Валюта.Наименование;
	//ПакетXOrderDesc.terms = "1";
	//ПакетXOrderDesc.not_before_date = RibData(Объект.ДатаПоставкиОт);
	//ПакетXOrderDesc.not_after_date = RibData(Объект.ДатаПоставкиДо);
	//ПакетXOrderDesc.status = "A";
	//ПакетXOrderDesc.exchange_rate = Объект.Курс;
	//ПакетXOrderDesc.include_on_ord_ind = "N";
	//ПакетXOrderDesc.written_date = RibData(Объект.Дата);
	//ПакетXOrderDesc.orig_ind = "7";
	//ПакетXOrderDesc.edi_po_ind = "N";
	//ПакетXOrderDesc.pre_mark_ind = "N";
	//ПакетXOrderDesc.user_id = Сред(Объект.Автор.Наименование,0,15);
	//ПакетXOrderDesc.comment_desc = Объект.Номер;
	//Для Каждого Строка Из Объект.Состав Цикл
	//	ПакетXOrderDtl = ФабрикаXDTO.Создать(XOrderDtl);
	//	ПакетXOrderDtl.item = СокрЛП(Строка.Номенклатура.Код);
	//	ПакетXOrderDtl.location = location;
	//	ПакетXOrderDtl.unit_cost = Строка.Цена;
	//	ПакетXOrderDtl.origin_country_id = ПолучитьСтрануТовараИКонтрагента(Строка.Номенклатура,Объект.Контрагент);
	//	ПакетXOrderDtl.supp_pack_size = Строка.Коэффициент;
	//	ПакетXOrderDtl.qty_ordered = Строка.Количество*Строка.Коэффициент;
	//	ПакетXOrderDtl.location_type = ?(Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад,"W","S");
	//	ПакетXOrderDtl.cancel_ind = "N";
	//	ПакетXOrderDtl.reinstate_ind = "N";
	//	ПакетXOrderDesc.XOrderDtl.Добавить(ПакетXOrderDtl);
	//КонецЦикла;
	
	//RibMessages = УпаковатьВСообщение(Объект.Дата,Объект.Номер,ПакетXOrderDesc,"XOrderDesc","XOrder","XOrderCre");
	//Результат = ОтправитьСообщение(RibMessages,Прокси);
	//Ошибка = RibMessages;
	//Возврат Результат;
КонецФункции

Функция ОтправитьСпискиНоменклатуры(Объект,Прокси,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogObject_СпискиНоменклатуры");
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogTabularSectionRow_СпискиНоменклатуры_Состав");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.IsFolder = Объект.ЭтоГруппа;
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Parent = Строка(Объект.Родитель.УникальныйИдентификатор());
	//Пакет.Code = Формат(Объект.Код,"ЧГ=");
	Пакет.Description = Объект.Наименование;
	Если НЕ Объект.ЭтоГруппа Тогда
		Пакет.Автор = Строка(Объект.Автор.УникальныйИдентификатор());
		Пакет.РазрешитьРедактировать = Объект.РазрешитьРедактировать;
		Пакет.СозданВЦентре = Объект.СозданВЦентре;
		Для Каждого Строка Из Объект.Состав Цикл
			ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
			ПакетСостав.Номенклатура     					= СокрЛП(Строка.Номенклатура.Код);
			Пакет.Состав.Добавить(ПакетСостав);
		КонецЦикла;
	КонецЕсли;	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),Формат(Объект.Код,"ЧГ="),Пакет,"CatalogObject_СпискиНоменклатуры","ListsItems","ListsItemsCre");
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Возврат Результат;
КонецФункции


// Возвращает цену документов в зависимости от того, включает ли цена НДС или нет.
Функция ПолучитьЦенуДляОтправки(Строка)
	Перем Цена;
	Если Константы.ВключатьНДСВЦеныКонтрагентов.Получить() Тогда
		Цена = Строка.Цена;
	Иначе
		Цена = Строка.ЦенаБезНДС;
	КонецЕсли;
	Возврат Цена;
КонецФункции

// Возвращает сумму документов в зависимости от того, включается ли НДС в стоимость или нет.
Функция ПолучитьСуммуДляОтправки(Строка)
	Перем Сумма;
	Если Константы.ВключатьНДСВЦеныКонтрагентов.Получить() Тогда
		Сумма = Строка.Сумма;
	Иначе
		Сумма = Строка.СуммаБезНДС;
	КонецЕсли;
	Возврат Сумма;
КонецФункции

//////////////////////процедуры отправки данных в RMS///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////
//////////////////////процедуры получения данных из RMS////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////


Процедура ОбменДаннымиПолучение() Экспорт
	Попытка
		ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
		Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
		URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		Прокси.Пользователь = ВебСервис.Имя;
		Прокси.Пароль = ВебСервис.Пароль;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка,
		|	СтруктурныеЕдиницы.Код,
		|	ПараметрыСтруктурныхЕдиниц.Значение КАК Логин,
		|	ЕСТЬNULL(ПараметрыСтруктурныхЕдиниц2.Значение,0) КАК Размер,
		|	ЕСТЬNULL(ПараметрыСтруктурныхЕдиниц1.Значение, &Пусто) КАК Пароль
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыСтруктурныхЕдиниц КАК ПараметрыСтруктурныхЕдиниц
		|		ПО (ПараметрыСтруктурныхЕдиниц.СтруктурнаяЕдиница = СтруктурныеЕдиницы.Ссылка)
		|			И (ПараметрыСтруктурныхЕдиниц.Свойство = &Логин)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыСтруктурныхЕдиниц КАК ПараметрыСтруктурныхЕдиниц1
		|		ПО (ПараметрыСтруктурныхЕдиниц1.СтруктурнаяЕдиница = СтруктурныеЕдиницы.Ссылка)
		|			И (ПараметрыСтруктурныхЕдиниц1.Свойство = &Пароль)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыСтруктурныхЕдиниц КАК ПараметрыСтруктурныхЕдиниц2
		|		ПО (ПараметрыСтруктурныхЕдиниц2.СтруктурнаяЕдиница = СтруктурныеЕдиницы.Ссылка)
		|			И (ПараметрыСтруктурныхЕдиниц2.Свойство = &Размер)
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка В ИЕРАРХИИ(&Ссылка)
		|	И НЕ СтруктурныеЕдиницы.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("Логин", ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПользовательВебСервисов);
		Запрос.УстановитьПараметр("Пароль", ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПарольВебСервисов);
		Запрос.УстановитьПараметр("Размер", ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.РазмерПолучаемогоПакета);
		Запрос.УстановитьПараметр("Пусто", "");
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Ошибка = "";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МестоВызова = ?(ВыборкаДетальныеЗаписи.Ссылка = Справочники.СтруктурныеЕдиницы.Центр,"center","sh/"+Формат(ВыборкаДетальныеЗаписи.Код,"ЧГ="));
			Тип = Прокси.ФабрикаXDTO.Тип("http://apm/integration", "getDocs");
			Пакет = Прокси.ФабрикаXDTO.Создать(Тип);
			Пакет.channel = МестоВызова;
			Пакет.login = ВыборкаДетальныеЗаписи.Логин;
			Пакет.password = ВыборкаДетальныеЗаписи.Пароль;
			Пакет.packetSize = ВыборкаДетальныеЗаписи.Размер;
			
			I = 0;
			Пока I < 2000 Цикл
				Попытка
					Array = Прокси.getDocs(Пакет);
					КоличествоПакетов = Array.result.Количество();
					Если КоличествоПакетов = 0 Тогда
						Прервать;
					КонецЕсли;
					I = I + КоличествоПакетов;
					Результат = ПолучениеДанныхRMSМассивомПриВызовеИзRS(Прокси,Array,ВыборкаДетальныеЗаписи.Код,МестоВызова,ВыборкаДетальныеЗаписи.Логин,ВыборкаДетальныеЗаписи.Пароль);
					Прокси.updateDocStatus(Результат);
				Исключение
					Ошибка = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"WebService RIB");
				КонецПопытки;
			КонецЦикла;	
		КонецЦикла;
	Исключение
		Ошибка = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"WebService RIB");
		ВызватьИсключение(Ошибка);
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьЗапросНаПополнение(XDTO)
	Попытка
		Ссылка = Документы.ЗапросНаПополнение.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ЗапросНаПополнение.СоздатьДокумент();
			Ссылка = Документы.ЗапросНаПополнение.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Дата = XDTO.Date; 
		//Объект.Контрагент = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.Контрагент);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.СкладПроизводства = Справочники.Склады.НайтиПоКоду(XDTO.Склад,,,Объект.СтруктурнаяЕдиница.РЦПоУмолчанию);
		//Объект.Фирма = Объект.СтруктурнаяЕдиница.Организация;
		Объект.Комментарий = XDTO.Комментарий+" "+XDTO.Number; 
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		//Объект.ДатаДокумента  = XDTO.Date; 
		Объект.ДатаПоставкиОт  = XDTO.ДатаПоставкиОт;
		Объект.ДатаПоставкиДо  = XDTO.ДатаПоставкиДо;
		Объект.Состав.Очистить();
		
		Для Каждого Строка Из XDTO.Состав Цикл                                 
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура =  ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
			КонецЕсли;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15,10,05
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Количество = Строка.Количество;
		КонецЦикла;
		Объект.ДополнительныеСвойства.Вставить("НеРегистрироватьВRIB",Истина);
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
		Izh_ОбменДанными.НеРегистрироватьВRIB(Объект, Ложь);
		// СИТЕК БрыляковЕЮ 2015-05-06 }
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции


Функция ПолучениеДанныхRMS(Family, Type, Package, Location = 0,Прокси = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Family = "CID" Тогда
		Попытка
			Если ПараметрыСеанса.Отладка Тогда
				ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Информация,,,Package);
			КонецЕсли;
			RSCrypto = ИнициализацияRSCrypto.Инициализация();
			
			Если RSCrypto.Error <> "" Тогда
				ВызватьИсключение(RSCrypto.Error);
			КОнецЕсли;
			
			Package = RSCrypto.Decrypt(Package);
			XDTO = ПолучитьОбъектXDTO(Package);
			
			//ЧтениеXML = Новый ЧтениеXML;
			//ЧтениеXML.УстановитьСтроку(Package);
			//ЧтениеXML.ПервоеОбъявление();
			//ЧтениеXML.Прочитать();
			//ТипПакета = ЧтениеXML.Имя;
			//XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			
			//++МининНА 15-02-24 в шине статус complite, а по факту не выгружено. Решение АПМ.
			//https://jira.apm-it.ru:8443/browse/MILAN-761
			//Если Type = "RS_ПриходнаяНакладная" Тогда
			//	ОбменДаннымиЦВДСервер.ЗагрузитьПриходнаяНакладная(XDTO);	
			//ИначеЕсли Type = "RS_ЗапросНаПополнение" Тогда
			//	ПолучитьЗапросНаПополнение(XDTO);
			//ИначеЕсли Type = "RS_КорректировкаПоступления" Тогда
			//	ОбменДаннымиЦВДСервер.ЗагрузитьКорректировкаПоступления(XDTO);
			//ИначеЕсли Type = "RS_РегистрацияСчетФактуры" Тогда
			//	ОбменДаннымиЦВДСервер.ЗагрузитьРегистрацияСчетФактуры(XDTO);
			//ИначеЕсли Type = "RS_АктПриемки" Тогда
			//	ОбменДаннымиЦВДСервер.ЗагрузитьАктПриеки(XDTO);
			//ИначеЕсли Type = "RS_УдалениеОбъекта" Тогда
			//	ОбменДаннымиЦВДСервер.ЗагрузитьУдалениеОбъекта(XDTO);	
			//КонецЕсли;	
			//Результат = Истина;
			
			Результат = Истина;
			Если Type = "RS_ПриходнаяНакладная" Тогда
				Результат = ОбменДаннымиЦВДСервер.ЗагрузитьПриходнаяНакладная(XDTO,Package);	
			ИначеЕсли Type = "RS_ЗапросНаПополнение" Тогда
				Результат = ПолучитьЗапросНаПополнение(XDTO);
			ИначеЕсли Type = "RS_КорректировкаПоступления" Тогда
				Результат = ОбменДаннымиЦВДСервер.ЗагрузитьКорректировкаПоступления(XDTO,Package);
			ИначеЕсли Type = "RS_РегистрацияСчетФактуры" Тогда
				Результат = ОбменДаннымиЦВДСервер.ЗагрузитьРегистрацияСчетФактуры(XDTO,Package);
			ИначеЕсли Type = "RS_АктПриемки" Тогда
				Результат = ОбменДаннымиЦВДСервер.ЗагрузитьАктПриеки(XDTO);
			ИначеЕсли Type = "RS_OptionsOrdersCre" Тогда
				Результат = OptionsOrdersCre(XDTO);
			ИначеЕсли Type = "MRCCre" Тогда      //dps+ 15/07/01 131723
				Результат = MRCCre(XDTO);
			ИначеЕсли Type = "RS_УдалениеОбъекта" Тогда
				Результат = ОбменДаннымиЦВДСервер.ЗагрузитьУдалениеОбъекта(XDTO,Package);	
			//++БИТ БВО 2015-11-02
			ИначеЕсли Type = "RS_РасходнаяНакладная" Тогда
				Результат = ОбменДаннымиЦВДСервер.ЗагрузитьРасходнаяНакладная(XDTO,Package);	
			//--БИТ БВО 2015-11-02
				//{ СИТЕК БрыляковЕЮ 2015-05-08  
			Иначе
				Результат = Izh_ОбменДаннымиRIB.ПринятьОбъект(XDTO, Type, Package);
				// СИТЕК БрыляковЕЮ 2015-05-08 }
				
			КонецЕсли;		
			//--МининНА 15-02-24 в шине статус complite, а по факту не выгружено. Решение АПМ.
			//https://jira.apm-it.ru:8443/browse/MILAN-761
		Исключение
			Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
			Результат = Ложь;
		КонецПопытки;
	Иначе
		Результат = DataExchange(Family, Type, Package, Location, Прокси);
	КонецЕсли;	
	Если Результат = Истина Тогда
		Package = "";
	КонецЕсли;	
	Возврат Результат; 
КонецФункции


Функция ПолучениеДанныхRMSМассивом(Array) Экспорт
	Тип = ФабрикаXDTO.Тип("http://www.oracle.com/retail/integration/payload/RMS", "packetDataExchangeResponse");
	Пакет = ФабрикаXDTO.Создать(Тип);
	Прокси = Неопределено;
	Для каждого Строка Из Array.request Цикл
		Результат = ПолучениеДанныхRMS(Строка.Family, Строка.Type, Строка.Package, Строка.Location, Прокси);
		Пакет.response.Добавить(Строка.Package);
	КонецЦикла;
	Возврат Пакет; 
КонецФункции

Функция ПолучениеДанныхRMSМассивомПриВызовеИзRS(Прокси,Array,Location,channel,login,password) Экспорт
	Тип = Прокси.ФабрикаXDTO.Тип("http://apm/integration", "updateDocStatus");
	ТипСостав = Прокси.ФабрикаXDTO.Тип("http://apm/integration", "esbDocStatus");
	Пакет = Прокси.ФабрикаXDTO.Создать(Тип);
	Пакет.channel = channel;
	Пакет.login = login;
	Пакет.password = password;
	Для каждого Строка Из Array.result Цикл
		Результат = ПолучениеДанныхRMS(Строка.Family, Строка.Type, Строка.data, Location, Прокси);
		ПакетСостав = Прокси.ФабрикаXDTO.Создать(ТипСостав);
		ПакетСостав.docId = Строка.docId;
		ПакетСостав.sentCounter = Строка.sentCounter;
		ПакетСостав.errorText = Строка.data;
		Пакет.docStatus.Добавить(ПакетСостав);
	КонецЦикла;
	Возврат Пакет; 
КонецФункции


Функция DataExchange(Family, Type, Package, Location, Proxy) Экспорт
	Попытка
		Если ПараметрыСеанса.Отладка Тогда
			ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Информация,,Family+" - "+Type,);
		КонецЕсли;
		RSCrypto = ИнициализацияRSCrypto.Инициализация();
		
		Если RSCrypto.Error <> "" Тогда
			ВызватьИсключение(RSCrypto.Error);
		КОнецЕсли;
		
		Package = RSCrypto.Decrypt(Package);	
		
		Если ПараметрыСеанса.Отладка Тогда
			ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Информация,,Family+" - "+Type,Package);
		КонецЕсли;
		
		Если Family = "stockorder" ИЛИ Family = "Order" ИЛИ Family = "ADRRules" Тогда
			ИмяФункции = Type+"(Package,Location)";
		ИначеЕсли Type = "ItemLocCre" ИЛИ Family = "Items" Тогда
			ИмяФункции = Type+"(Package,Proxy)";
		Иначе
			ИмяФункции = Type+"(Package)";
		КонецЕсли;	
		Результат = Вычислить(ИмяФункции);
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции



//////////////////////////////Stores/////////////////////////////////

Функция StoreCre(Package,Режим = "Cre")
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Код = &Код
		|	И НЕ СтруктурныеЕдиницы.ЭтоГруппа
		|
		|ДЛЯ ИЗМЕНЕНИЯ";
		
		Запрос.УстановитьПараметр("Код", XDTO.store);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Если Режим = "Mod" И НЕ ПараметрыСеанса.ЭтоЦентр Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена структурная единица с кодом ""%1"".'"),"%1",Формат(XDTO.store,"ЧГ=")));
			КонецЕсли;	
			СпрСтруктурныеЕдиницы = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент();
			СпрСтруктурныеЕдиницы.Код = XDTO.store;
			СпрСтруктурныеЕдиницы.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает;
		Иначе
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
			СпрСтруктурныеЕдиницы = СтруктурнаяЕдиница.ПолучитьОбъект();
			СпрСтруктурныеЕдиницы.ПометкаУдаления = Ложь;
		КонецЕсли;	
		СпрСтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин;
		СпрСтруктурныеЕдиницы.Наименование = XDTO.store_name;
		СпрСтруктурныеЕдиницы.Наименование3 = XDTO.store_name3;
		СпрСтруктурныеЕдиницы.Наименование10 = XDTO.store_name10;
		СпрСтруктурныеЕдиницы.Класс = XDTO.store_class;
		СпрСтруктурныеЕдиницы.ОбщаяПлощадь = XDTO.total_square_ft;
		СпрСтруктурныеЕдиницы.ТорговаяПлощадь = XDTO.selling_square_ft;
		СпрСтруктурныеЕдиницы.Формат = Справочники.ФорматыСтруктурныхЕдиниц.НайтиПоКоду(XDTO.store_format);
		СпрСтруктурныеЕдиницы.Валюта = Справочники.Валюты.НайтиПоНаименованию(XDTO.currency_code);
		Если ЗначениеЗаполнено(XDTO.transfer_zone) Тогда
			ЗонаПеремещения = Справочники.ЗоныПеремещений.НайтиПоКоду(XDTO.transfer_zone);
			Если ЗонаПеремещения.Пустая() И ПараметрыСеанса.ЭтоЦентр Тогда
				ЗонаПеремещенияОбъект = Справочники.ЗоныПеремещений.СоздатьЭлемент();
				ЗонаПеремещенияОбъект.Код = XDTO.transfer_zone;
				ЗонаПеремещенияОбъект.Наименование = XDTO.description;
				ЗонаПеремещенияОбъект.Записать();
				ЗонаПеремещения = ЗонаПеремещенияОбъект.Ссылка;
			КонецЕсли;	
			СпрСтруктурныеЕдиницы.ЗонаПеремещения = ЗонаПеремещения;
		КонецЕсли;	
		СпрСтруктурныеЕдиницы.ДатаОткрытия = ПолучитьДатуXDTO(XDTO.store_open_date);
		СпрСтруктурныеЕдиницы.ДатаЗакрытия = ПолучитьДатуXDTO(XDTO.store_close_date);
		СпрСтруктурныеЕдиницы.КоличествоДнейДоЗакрытия = XDTO.stop_order_days;
		СпрСтруктурныеЕдиницы.КоличествоДнейДоОткрытия = XDTO.start_order_days;
		СпрСтруктурныеЕдиницы.РЦПоУмолчанию = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.default_wh);
		//СпрСтруктурныеЕдиницы.Организация = Справочники.Организации.НайтиПоКоду(XDTO.org_unit_id);
		
		country_id = XDTO.country_id;
		Для Каждого СтрокаАдреса Из XDTO.AddrDesc Цикл
			ЗаписьАдресаСтруктурнойЕдиницы(СтрокаАдреса,СпрСтруктурныеЕдиницы);	
			Если НЕ ЗначениеЗаполнено(country_id) Тогда
				country_id = СтрокаАдреса.country_id;
			КонецЕсли;	
		КонецЦикла;	
		СпрСтруктурныеЕдиницы.Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(country_id);
		Если ЗначениеЗаполнено(XDTO.duns_number) И ЗначениеЗаполнено(XDTO.duns_loc) Тогда
			СпрСтруктурныеЕдиницы.GLN = XDTO.duns_number + XDTO.duns_loc;
		КонецЕсли;	
		СпрСтруктурныеЕдиницы.Записать();
		//Если ПараметрыСеанса.ЭтоЦентр Тогда
		//	Узел = ЕстьУзелДляСЕ(СпрСтруктурныеЕдиницы.Ссылка);
		//	Если Узел = Ложь Тогда
		//		НовыйУзел = ПланыОбмена.ОбменРБД.СоздатьУзел();
		//		НовыйУзел.Код = СпрСтруктурныеЕдиницы.Код;
		//		НовыйУзел.Наименование = СпрСтруктурныеЕдиницы.Наименование;
		//		НовыйУзел.СтруктурнаяЕдиница = СпрСтруктурныеЕдиницы.Ссылка;
		//		НовыйУзел.Записать();
		//		струкПараметры = Новый Структура;
		//		струкПараметры.Вставить("БизнесПроцесс", БизнесПроцессы.НоваяСтруктурнаяЕдиница);
		//		струкПараметры.Вставить("Основание", СпрСтруктурныеЕдиницы.Ссылка);
		//		струкПараметры.Вставить("Удалять", Истина); 
		//		струкПараметры.Вставить("Искать", Истина);
		//		БП = УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
		//	ИначеЕсли СокрЛП(Узел.Наименование)<>СпрСтруктурныеЕдиницы.Наименование Тогда
		//		НовыйУзел = Узел.ПолучитьОбъект();
		//		НовыйУзел.Наименование = СпрСтруктурныеЕдиницы.Наименование;
		//		НовыйУзел.Записать();
		//	КонецЕсли;
		//КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция StoreMod(Package)
	Возврат StoreCre(Package,"Mod");
КонецФункции

Функция storedtlcre(Package)
	Возврат StoreCre(Package);
КонецФункции

Функция storedtlmod(Package)
	Возврат StoreCre(Package,"Mod");
КонецФункции

Функция StoreDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.store);
		Если НЕ СтруктурнаяЕдиница.Пустая() Тогда
			СтруктурнаяЕдиница.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////Warehouses/////////////////////////////////

Функция whcre(Package,Режим = "Cre")
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		//Если XDTO.stockholding_ind = "Y" Тогда
		//	Возврат Истина;
		//КонецЕсли;
		Если XDTO.wh = XDTO.physical_wh Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница
			|ИЗ
			|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
			|ГДЕ
			|	СтруктурныеЕдиницы.Код = &Код
			|	И НЕ СтруктурныеЕдиницы.ЭтоГруппа
			|
			|ДЛЯ ИЗМЕНЕНИЯ";
			
			Запрос.УстановитьПараметр("Код", XDTO.wh);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Если Режим = "Mod" Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена структурная единица с кодом ""%1"".'"),"%1",Формат(XDTO.wh,"ЧГ=")));
				КонецЕсли;	
				СпрСтруктурныеЕдиницы = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент();
				СпрСтруктурныеЕдиницы.Код = XDTO.wh;
				СпрСтруктурныеЕдиницы.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает;
			Иначе
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
				СпрСтруктурныеЕдиницы = СтруктурнаяЕдиница.ПолучитьОбъект();
				СпрСтруктурныеЕдиницы.ПометкаУдаления = Ложь;
			КонецЕсли;	
			СпрСтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
			СпрСтруктурныеЕдиницы.Наименование = XDTO.wh_name;
			СпрСтруктурныеЕдиницы.Валюта = Справочники.Валюты.НайтиПоНаименованию(XDTO.currency_code);
			country_id = XDTO.country_id;
			Для Каждого СтрокаАдреса Из XDTO.AddrDesc Цикл
				ЗаписьАдресаСтруктурнойЕдиницы(СтрокаАдреса,СпрСтруктурныеЕдиницы);	
				Если НЕ ЗначениеЗаполнено(country_id) Тогда
					country_id = СтрокаАдреса.country_id;
				КонецЕсли;	
			КонецЦикла;	
			СпрСтруктурныеЕдиницы.Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(country_id);
			Если ЗначениеЗаполнено(XDTO.duns_number) И ЗначениеЗаполнено(XDTO.duns_loc) Тогда
				СпрСтруктурныеЕдиницы.GLN = XDTO.duns_number + XDTO.duns_loc;
			КонецЕсли;	
			СпрСтруктурныеЕдиницы.Записать();
			//Если ПараметрыСеанса.ЭтоЦентр Тогда
			//	Узел = ЕстьУзелДляСЕ(СпрСтруктурныеЕдиницы.Ссылка);
			//	Если Узел = Ложь Тогда
			//		НовыйУзел = ПланыОбмена.ОбменРБД.СоздатьУзел();
			//		НовыйУзел.Код = СпрСтруктурныеЕдиницы.Код;
			//		НовыйУзел.Наименование = СпрСтруктурныеЕдиницы.Наименование;
			//		НовыйУзел.СтруктурнаяЕдиница = СпрСтруктурныеЕдиницы.Ссылка;
			//		НовыйУзел.Записать();
			//		струкПараметры = Новый Структура;
			//		струкПараметры.Вставить("БизнесПроцесс", БизнесПроцессы.НоваяСтруктурнаяЕдиница);
			//		струкПараметры.Вставить("Основание", СпрСтруктурныеЕдиницы.Ссылка);
			//		струкПараметры.Вставить("Удалять", Истина); 
			//		струкПараметры.Вставить("Искать", Истина);
			//		БП = УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
			//	ИначеЕсли СокрЛП(Узел.Наименование)<>СпрСтруктурныеЕдиницы.Наименование Тогда
			//		НовыйУзел = Узел.ПолучитьОбъект();
			//		НовыйУзел.Наименование = СпрСтруктурныеЕдиницы.Наименование;
			//		НовыйУзел.Записать();
			//	КонецЕсли;
			//КонецЕсли;
		Иначе
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.physical_wh);
			Склад = Справочники.Склады.НайтиПоКоду(XDTO.wh,,,СтруктурнаяЕдиница);
			Если Склад.Пустая() Тогда
				Если Режим = "Mod" Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена склад с кодом ""%1"".'"),"%1",Формат(XDTO.wh,"ЧГ=")));
				КонецЕсли;	
				СпрСклад = Справочники.Склады.СоздатьЭлемент();
				СпрСклад.Код = XDTO.wh;
			Иначе
				СпрСклад = Склад.ПолучитьОбъект();
				СпрСклад.ПометкаУдаления = Ложь;
			КонецЕсли;	
			СпрСклад.Владелец = СтруктурнаяЕдиница;
			СпрСклад.Наименование = XDTO.wh_name;
			СпрСклад.ВидСклада = Перечисления.ВидыСкладов.Оптовый;
			СпрСклад.ВидЗапасов = Перечисления.ВидыЗапасов.Продаваемые;
			СпрСклад.Записать();
		КонецЕсли;	
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция whdtlcre(Package)
	Возврат whcre(Package,"Mod");
КонецФункции

Функция whdtldel(Package)
	Возврат whdel(Package);
КонецФункции


Функция whmod(Package)
	Возврат whcre(Package,"Mod");
КонецФункции

Функция whdtlmod(Package)
	Возврат whcre(Package);
КонецФункции

Функция whdel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.wh);
		Если НЕ СтруктурнаяЕдиница.Пустая() Тогда
			СтруктурнаяЕдиница.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////Vendor/////////////////////////////////

Функция VendorHdrCre(Package,КонтрагентСсылка = Неопределено,НовыйКонтрагент = Ложь)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("VendorHdrDesc") <> Неопределено Тогда
			XDTO = XDTO.VendorHdrDesc;
		КонецЕсли;
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
		Если КонтрагентСсылка.Пустая() Тогда
			Если ПараметрыСеанса.ИспользоватьПодразделенияПоставщиков И НЕ ЗначениеЗаполнено(XDTO.supplier_parent) Тогда
				СпрКонтрагенты = Справочники.Контрагенты.СоздатьГруппу();
				СпрКонтрагенты.ЭтоПодразделение = Истина;
			Иначе
				СпрКонтрагенты = Справочники.Контрагенты.СоздатьЭлемент();
				НовыйКонтрагент = Истина;
			КонецЕсли;	
			СпрКонтрагенты.Код = XDTO.supplier;
		Иначе
			СпрКонтрагенты = КонтрагентСсылка.ПолучитьОбъект();
			СпрКонтрагенты.ПометкаУдаления = Ложь;
			Если ПараметрыСеанса.ИспользоватьПодразделенияПоставщиков И НЕ ЗначениеЗаполнено(XDTO.supplier_parent) Тогда
				СпрКонтрагенты.ЭтоПодразделение = Истина;
			КонецЕсли;	
		КонецЕсли;
		Если ПараметрыСеанса.ИспользоватьПодразделенияПоставщиков И ЗначениеЗаполнено(XDTO.supplier_parent) Тогда
			СпрКонтрагенты.Родитель = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier_parent);
			Если СпрКонтрагенты.Родитель.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена группа контрагентов с кодом ""%1"".'"),"%1",Формат(XDTO.supplier_parent,"ЧГ=")));
			КонецЕсли;
		КонецЕсли;
		СпрКонтрагенты.Наименование = XDTO.sup_name;
		Если НЕ СпрКонтрагенты.ЭтоГруппа Тогда
			СпрКонтрагенты.Поставщик = Истина;
			СпрКонтрагенты.Статус = ?(XDTO.sup_status = "A",Истина,Ложь);
			СпрКонтрагенты.КонтрольКачества = XDTO.qc_ind;
			СпрКонтрагенты.ПроцентКачества = XDTO.qc_pct;
			СпрКонтрагенты.Валюта = Справочники.Валюты.НайтиПоНаименованию(XDTO.currency_code);
			СпрКонтрагенты.ВозвратыРазрешены = ?(XDTO.ret_allow_ind = "Y",Истина,Ложь);
			СпрКонтрагенты.МинимальнаяСуммаВозврата = XDTO.ret_min_dol_amt;
			СпрКонтрагенты.ЗаказEDI = ?(XDTO.edi_po_ind = "Y",Истина,Ложь);
			СпрКонтрагенты.ИзменениеЗаказаEDI = ?(XDTO.edi_po_chg = "Y",Истина,Ложь);
			СпрКонтрагенты.ПодтверждениеЗаказаEDI = ?(XDTO.edi_po_confirm = "Y",Истина,Ложь);
			СпрКонтрагенты.ПодтверждениеОтгрузкиEDI = ?(XDTO.edi_asn = "Y",Истина,Ложь);
			Если XDTO.edi_sales_rpt_freq = "D" Тогда
				СпрКонтрагенты.ЧастотаОтчетаПоПродажамEDI = Перечисления.ЧастотаОтчетаПоПродажам.Ежедневно;
			ИначеЕсли XDTO.edi_sales_rpt_freq = "W" Тогда
				СпрКонтрагенты.ЧастотаОтчетаПоПродажамEDI = Перечисления.ЧастотаОтчетаПоПродажам.Еженедельно;
			КонецЕсли;	
			СпрКонтрагенты.ДоступностьТоваровEDI = ?(XDTO.edi_supp_available_ind = "Y",Истина,Ложь);
			СпрКонтрагенты.НеПлательщикНДС = ?(XDTO.vat_region = 2,Истина,Ложь);
			СпрКонтрагенты.РазрешенаЧастичнаяПоставка = ?(XDTO.backorder_ind = "Y",Истина,Ложь);
			СпрКонтрагенты.РазрешенаПрямаяПоставка = ?(XDTO.dsd_supplier_ind = "Y",Истина,Ложь);
			СпрКонтрагенты.Комментарий = XDTO.comment_desc;
			Если ЗначениеЗаполнено(XDTO.duns_number) И ЗначениеЗаполнено(XDTO.duns_loc) Тогда
				СпрКонтрагенты.GLN = XDTO.duns_number + XDTO.duns_loc;
			КонецЕсли;	
		КонецЕсли;	
		Результат = Истина;
		СпрКонтрагенты.Записать();
		КонтрагентСсылка = СпрКонтрагенты.Ссылка;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция VendorHdrMod(Package)
	Возврат VendorHdrCre(Package);
КонецФункции

Функция VendorCre(Package)
	Пакет1 = Package;
	Пакет2 = Package;
	Пакет3 = Package;
	НовыйКонтрагент = Ложь;
	КонтрагентСсылка = Неопределено;
	Результат1 = VendorHdrCre(Пакет1,КонтрагентСсылка,НовыйКонтрагент);
	Package = ?(Результат1 = Ложь,Пакет1,"");
	Результат2 = VendorAddrCre(Пакет2);
	Package = Package+?(Результат2 = Ложь,"
	|"+Пакет2,"");
	Результат3 = VendorOUDesc(Пакет3,КонтрагентСсылка,НовыйКонтрагент);
	Package = Package+?(Результат3 = Ложь,"
	|"+Пакет3,"");
	Возврат Результат1 И Результат2 И Результат3;
КонецФункции

Функция VendorDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
		Результат = Истина;
		Если НЕ Контрагент.Пустая() Тогда
			Контрагент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
			Для Каждого Строка из XDTO.VendorOURef Цикл
				ФирмаСсылка = Справочники.Организации.НайтиПоКоду(Строка.org_unit_id);
				Если НЕ ФирмаСсылка.Пустая() Тогда
					НаборЗаписей = РегистрыСведений.СвязьФирмИКонтрагентов.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
					НаборЗаписей.Отбор.Фирма.Установить(ФирмаСсылка);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция VendorAddrCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("VendorAddrDesc") <> Неопределено Тогда
			XDTO = XDTO.VendorAddrDesc;
		КонецЕсли;
		КонтрагентСсылка = Неопределено;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			Для каждого Строка Из XDTO Цикл
				КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(Строка.key_value_1);
				Если КонтрагентСсылка.Пустая() Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена контрагент с кодом ""%1"".'"),"%1",Строка.key_value_1));
				КонецЕсли;	
				СпрКонтрагенты = КонтрагентСсылка.ПолучитьОбъект();
				ЗаписьАдресаКонтрагента(Строка,СпрКонтрагенты);
			КонецЦикла;	
		Иначе
			КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(XDTO.key_value_1);
			Если КонтрагентСсылка.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена контрагент с кодом ""%1"".'"),"%1",XDTO.key_value_1));
			КонецЕсли;	
			СпрКонтрагенты = КонтрагентСсылка.ПолучитьОбъект();
			ЗаписьАдресаКонтрагента(XDTO,СпрКонтрагенты);
		КонецЕсли;	
		Результат = Истина;
		Если КонтрагентСсылка <> Неопределено Тогда
			СпрКонтрагенты.Записать();
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция VendorAddrMod(Package)
	Возврат VendorAddrCre(Package);
КонецФункции

Функция VendorAddrDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("VendorAddrRef") <> Неопределено Тогда
			XDTO = XDTO.VendorAddrRef;
		КонецЕсли;
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
		Если КонтрагентСсылка.Пустая() Тогда
			Возврат Истина;
		КонецЕсли;	
		СпрКонтрагенты = КонтрагентСсылка.ПолучитьОбъект();
		
		Если XDTO.addr_type = "01" Тогда
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;	
		ИначеЕсли XDTO.addr_type = "02" Тогда
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;	
		Иначе
			Возврат Истина;
		КонецЕсли;	
		СтрокаТЧ = СпрКонтрагенты.КонтактнаяИнформация.Найти(ВидАдреса,"Вид");
		Если НЕ СтрокаТЧ = Неопределено Тогда
			СпрКонтрагенты.КонтактнаяИнформация.Удалить(СтрокаТЧ);
		КонецЕсли;
		Если ВидАдреса = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;	
			СтрокаТЧ = СпрКонтрагенты.КонтактнаяИнформация.Найти(Вид,"Вид");
			Если НЕ СтрокаТЧ = Неопределено Тогда
				СпрКонтрагенты.КонтактнаяИнформация.Удалить(СтрокаТЧ);
			КонецЕсли;
			
			Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;	
			СтрокаТЧ = СпрКонтрагенты.КонтактнаяИнформация.Найти(Вид,"Вид");
			Если НЕ СтрокаТЧ = Неопределено Тогда
				СпрКонтрагенты.КонтактнаяИнформация.Удалить(СтрокаТЧ);
			КонецЕсли;
			
			Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;	
			СтрокаТЧ = СпрКонтрагенты.КонтактнаяИнформация.Найти(Вид,"Вид");
			Если НЕ СтрокаТЧ = Неопределено Тогда
				СпрКонтрагенты.КонтактнаяИнформация.Удалить(СтрокаТЧ);
			КонецЕсли;
			
			Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;	
			СтрокаТЧ = СпрКонтрагенты.КонтактнаяИнформация.Найти(Вид,"Вид");
			Если НЕ СтрокаТЧ = Неопределено Тогда
				СпрКонтрагенты.КонтактнаяИнформация.Удалить(СтрокаТЧ);
			КонецЕсли;
		КонецЕсли;	
		Результат = Истина;
		СпрКонтрагенты.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция VendorOUDesc(Package,КонтрагентСсылка,НовыйКонтрагент)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("VendorOUDesc") <> Неопределено Тогда
			XDTO = XDTO.VendorOUDesc;
		КонецЕсли;	
		ЗапускатьБП = Ложь;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			НоменклатураСсылка = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Запись = РегистрыСведений.СвязьФирмИКонтрагентов.СоздатьМенеджерЗаписи();
				Запись.Контрагент = КонтрагентСсылка;
				ФирмаСсылка = Справочники.Организации.НайтиПоКоду(Строка.org_unit_id);
				Если ФирмаСсылка.Пустая() Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена организация с кодом ""%1"".'"),"%1",Строка.org_unit_id));
				КонецЕсли;
				Запись.Фирма = ФирмаСсылка;
				Запись.Записать();
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СтруктурныеЕдиницы.Ссылка
				|ИЗ
				|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
				|ГДЕ
				|	СтруктурныеЕдиницы.Ссылка В(&Ссылка)
				|	И СтруктурныеЕдиницы.Организация = &Организация";
				
				Запрос.УстановитьПараметр("Организация", ФирмаСсылка);
				Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
				
				Результат = Запрос.Выполнить();
				Если НЕ Результат.Пустой() Тогда
					ЗапускатьБП = Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Запись = РегистрыСведений.СвязьФирмИКонтрагентов.СоздатьМенеджерЗаписи();
			Запись.Контрагент = КонтрагентСсылка;
			ФирмаСсылка = Справочники.Организации.НайтиПоКоду(XDTO.org_unit_id);
			Если ФирмаСсылка.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена организация с кодом ""%1"".'"),"%1",XDTO.org_unit_id));
			КонецЕсли;
			Запись.Фирма = ФирмаСсылка;
			Запись.Записать();
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтруктурныеЕдиницы.Ссылка
			|ИЗ
			|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
			|ГДЕ
			|	СтруктурныеЕдиницы.Ссылка В(&Ссылка)
			|	И СтруктурныеЕдиницы.Организация = &Организация";
			
			Запрос.УстановитьПараметр("Организация", ФирмаСсылка);
			Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ЗапускатьБП = Истина;
			КонецЕсли;
		КонецЕсли;	
		Результат = Истина;
		Если НовыйКонтрагент И ЗапускатьБП = Истина тогда
			струкПараметры = Новый Структура;
			струкПараметры.Вставить("БизнесПроцесс", БизнесПроцессы.НовыйКонтрагент);
			струкПараметры.Вставить("Основание", КонтрагентСсылка);
			струкПараметры.Вставить("Удалять", Истина); 
			струкПараметры.Вставить("Искать", Истина);
			БП = УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
		Конецесли;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция VendorOUCre(Package)
	Возврат VendorCre(Package);
КонецФункции

Функция VendorOUDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
		Результат = Истина;
		Если НЕ Контрагент.Пустая() Тогда
			Для Каждого Строка из XDTO.VendorOURef Цикл
				ФирмаСсылка = Справочники.Организации.НайтиПоКоду(Строка.org_unit_id);
				Если НЕ ФирмаСсылка.Пустая() Тогда
					НаборЗаписей = РегистрыСведений.СвязьФирмИКонтрагентов.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
					НаборЗаписей.Отбор.Фирма.Установить(ФирмаСсылка);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////UDA/////////////////////////////////

Функция UDAHdrCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(XDTO.uda_id,"ЧГ="));
		Если РеквизитНоменклатуры.Пустая() Тогда
			ОбъектРеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.СоздатьЭлемент();
			ОбъектРеквизитНоменклатуры.Код = Формат(XDTO.uda_id,"ЧГ=");
		Иначе
			ОбъектРеквизитНоменклатуры = РеквизитНоменклатуры.ПолучитьОбъект();
			ОбъектРеквизитНоменклатуры.ПометкаУдаления = Ложь;
		КонецЕсли;
		ОбъектРеквизитНоменклатуры.ЕдиничноеЗначение = ?(XDTO.single_value_ind = "Y",Истина,Ложь);
		Если XDTO.display_type = "LV" Тогда
			//popn+
			Если Формат(XDTO.uda_id,"ЧГ=") = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаВидАлкогольнойПродукции) Тогда
				ОбъектРеквизитНоменклатуры.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукции");
			ИначеЕсли Формат(XDTO.uda_id,"ЧГ=") = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаПроизводитель) Тогда
				ОбъектРеквизитНоменклатуры.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
			Иначе
				ОбъектРеквизитНоменклатуры.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов");
			КонецЕсли;
			//ОбъектРеквизитНоменклатуры.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов");
			//popn-
		Иначе	
			Если XDTO.data_type = "DATE" Тогда
				ОбъектРеквизитНоменклатуры.ТипЗначения = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ИначеЕсли XDTO.data_type = "ALPHA" Тогда
				ОбъектРеквизитНоменклатуры.ТипЗначения = Новый ОписаниеТипов("Строка");
			Иначе
				ОбъектРеквизитНоменклатуры.ТипЗначения = Новый ОписаниеТипов("Число");
			КонецЕсли;	
		КонецЕсли;	
		ОбъектРеквизитНоменклатуры.Наименование = XDTO.uda_desc;
		ОбъектРеквизитНоменклатуры.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция UDAHdrMod(Package)
	Возврат UDAHdrCre(Package);
КонецФункции

Функция UDAHdrDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(XDTO.uda_id,"ЧГ="));
		Результат = Истина;
		Если НЕ РеквизитНоменклатуры.Пустая() Тогда
			РеквизитНоменклатуры.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция UDAValCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(XDTO.uda_id,"ЧГ="));
		Если РеквизитНоменклатуры.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена ПВХ ДополнительныеРеквизитыНоменклатуры с кодом ""%1"".'"),"%1",Формат(XDTO.uda_id,"ЧГ=")));
		КонецЕсли;
		//popn+
		Если Формат(XDTO.uda_id,"ЧГ=") =ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаВидАлкогольнойПродукции) Тогда
			ЗначениеРеквизитаСсылка = Справочники.КлассификаторАлкогольнойПродукции.НайтиПоКоду(XDTO.uda_value);
			Если ЗначениеРеквизитаСсылка.Пустая() Тогда
				ЗначениеРеквизитаОбъект = Справочники.КлассификаторАлкогольнойПродукции.СоздатьЭлемент();
				ЗначениеРеквизитаОбъект.Код = XDTO.uda_value;
				ЗначениеРеквизитаОбъект.Наименование = XDTO.uda_value_desc;
				ЗначениеРеквизитаОбъект.ПолноеНаименование = СокрЛП(XDTO.uda_value)+" "+XDTO.uda_value_desc;
			Иначе
				ЗначениеРеквизитаОбъект = ЗначениеРеквизитаСсылка.ПолучитьОбъект();
				ЗначениеРеквизитаОбъект.Наименование = XDTO.uda_value_desc;
				ЗначениеРеквизитаОбъект.ПолноеНаименование = СокрЛП(XDTO.uda_value)+" "+XDTO.uda_value_desc;
				ЗначениеРеквизитаОбъект.ПометкаУдаления = Ложь;
			КонецЕсли;
		ИначеЕсли Формат(XDTO.uda_id,"ЧГ=") =ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаПроизводитель) Тогда
			Код = Сред(XDTO.uda_value_desc,Найти(XDTO.uda_value_desc,"_")+1);
			Наименование = Сред(XDTO.uda_value_desc,0,Найти(XDTO.uda_value_desc,"_")-1);
			ЗначениеРеквизитаСсылка = Справочники.Контрагенты.НайтиПоКоду(Код);
			Если ЗначениеРеквизитаСсылка.Пустая() Тогда
				ЗначениеРеквизитаОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				ЗначениеРеквизитаОбъект.Код = Код;
				ЗначениеРеквизитаОбъект.Наименование = Наименование;
				ЗначениеРеквизитаОбъект.ПолноеНаименование = XDTO.uda_value_desc;
				ЗначениеРеквизитаОбъект.Производитель = ИСТИНА;
			Иначе
				ЗначениеРеквизитаОбъект = ЗначениеРеквизитаСсылка.ПолучитьОбъект();
				ЗначениеРеквизитаОбъект.ПометкаУдаления = Ложь;
			КонецЕсли;
		Иначе
			ЗначениеРеквизитаСсылка = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду(XDTO.uda_value,,,РеквизитНоменклатуры);
			Если ЗначениеРеквизитаСсылка.Пустая() Тогда
				ЗначениеРеквизитаОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
				ЗначениеРеквизитаОбъект.Код = XDTO.uda_value;
				ЗначениеРеквизитаОбъект.Владелец = РеквизитНоменклатуры;
			Иначе
				ЗначениеРеквизитаОбъект = ЗначениеРеквизитаСсылка.ПолучитьОбъект();
				ЗначениеРеквизитаОбъект.ПометкаУдаления = Ложь;
			КонецЕсли;
			ЗначениеРеквизитаОбъект.Наименование = XDTO.uda_value_desc;
		КонецЕсли;
		//ЗначениеРеквизитаСсылка = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду(XDTO.uda_value,,,РеквизитНоменклатуры);
		//Если ЗначениеРеквизитаСсылка.Пустая() Тогда
		//	ЗначениеРеквизитаОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		//	ЗначениеРеквизитаОбъект.Код = XDTO.uda_value;
		//	ЗначениеРеквизитаОбъект.Владелец = РеквизитНоменклатуры;
		//Иначе
		//	ЗначениеРеквизитаОбъект = ЗначениеРеквизитаСсылка.ПолучитьОбъект();
		//	ЗначениеРеквизитаОбъект.ПометкаУдаления = Ложь;
		//КонецЕсли;
		//ЗначениеРеквизитаОбъект.Наименование = XDTO.uda_value_desc;
		//popn-
		Результат = Истина;
		ЗначениеРеквизитаОбъект.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция UDAValMod(Package)
	Возврат UDAValCre(Package);
КонецФункции

Функция UDAValDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(XDTO.uda_id,"ЧГ="));
		Если РеквизитНоменклатуры.Пустая() Тогда
			Возврат Истина;
		КонецЕсли;
		ЗначениеРеквизитаСсылка = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду(XDTO.uda_value,,,РеквизитНоменклатуры);
		Результат = Истина;
		Если НЕ ЗначениеРеквизитаСсылка.Пустая() Тогда
			ЗначениеРеквизитаСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////Differentiators/////////////////////////////////

Функция DiffCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		ХарактеристикаНоменклатуры = ПланыВидовХарактеристик.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_type);
		Если ХарактеристикаНоменклатуры.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена ПВХ Характеристика номенклатуры с кодом ""%1"".'"),"%1",XDTO.diff_type));
		КонецЕсли;
		ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_id,,,ХарактеристикаНоменклатуры.Ссылка);
		Если ХарактеристикаСсылка.Пустая() Тогда
			ОбъектХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			ОбъектХарактеристика.Владелец = ХарактеристикаНоменклатуры.Ссылка;
			ОбъектХарактеристика.Код = XDTO.diff_id;
		Иначе
			ОбъектХарактеристика = ХарактеристикаСсылка.ПолучитьОбъект();
			ОбъектХарактеристика.ПометкаУдаления = Ложь;
		КонецЕсли;
		ОбъектХарактеристика.Наименование = XDTO.diff_desc;
		
		Результат = Истина;
		ОбъектХарактеристика.Записать();
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция DiffMod(Package)
	Возврат DiffCre(Package);
КонецФункции

Функция DiffDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_id);
		Результат = Истина;
		Если НЕ Характеристика.Пустая() Тогда
			Характеристика.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////SeedData/////////////////////////////////

Функция CodeDtlCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.code_type = "CASN" ИЛИ XDTO.code_type = "INRN" ИЛИ XDTO.code_type = "PALN" Тогда
			СпрЕдиница = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(XDTO.code,Истина);
			Если СпрЕдиница.Пустая() Тогда
				СпрЕдиница = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
				СпрЕдиница.Наименование = XDTO.code;
			Иначе	
				СпрЕдиница = СпрЕдиница.ПолучитьОбъект();
			КонецЕсли;
			СпрЕдиница.ПолноеНаименование = XDTO.code_desc;
			СпрЕдиница.Записать();
		Иначе
			СлужебныеКодыГруппа = ПолучитьГруппуСлужебныеКодыПоКоду(XDTO.code_type);
			Если СлужебныеКодыГруппа = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;	
			СлужебныеКодыСсылка = Справочники.СлужебныеКоды.НайтиПоКоду(XDTO.code,,СлужебныеКодыГруппа);
			Если СлужебныеКодыСсылка.Пустая() Тогда
				СлужебныеКодыОбъект = Справочники.СлужебныеКоды.СоздатьЭлемент();
				СлужебныеКодыОбъект.Код = XDTO.code;
				СлужебныеКодыОбъект.Родитель = СлужебныеКодыГруппа;
			Иначе
				СлужебныеКодыОбъект = СлужебныеКодыСсылка.ПолучитьОбъект();
				СлужебныеКодыОбъект.ПометкаУдаления = Ложь;
			КонецЕсли;	
			СлужебныеКодыОбъект.Наименование = XDTO.code_desc;
			СлужебныеКодыОбъект.Записать();
		КонецЕсли;	
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция CodeDtlMod(Package)
	Возврат CodeDtlCre(Package);
КонецФункции

Функция CodeDtlDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		СлужебныеКодыГруппа = ПолучитьГруппуСлужебныеКодыПоКоду(XDTO.code_type);
		СлужебныеКодыСсылка = Справочники.СлужебныеКоды.НайтиПоКоду(XDTO.code,,СлужебныеКодыГруппа);
		Если НЕ СлужебныеКодыСсылка.Пустая() Тогда
			СлужебныеКодыСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция CodeHdrCre(Package)
	Возврат Истина;
КонецФункции

Функция CodeHdrMod(Package)
	Возврат CodeHdrCre(Package);
КонецФункции

Функция CodeHdrDel(Package)
	Возврат Истина;
КонецФункции

Функция DiffTypeCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		ХарактеристикаНоменклатуры = ПланыВидовХарактеристик.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_type);
		Если ХарактеристикаНоменклатуры.Пустая() Тогда
			ОбъектХарактеристикаНоменклатуры = ПланыВидовХарактеристик.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			ОбъектХарактеристикаНоменклатуры.Код = XDTO.diff_type;
		Иначе
			ОбъектХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.ПолучитьОбъект();
			ОбъектХарактеристикаНоменклатуры.ПометкаУдаления = Ложь;
		КонецЕсли;
		ОбъектХарактеристикаНоменклатуры.Наименование = XDTO.diff_type_desc;
		ОбъектХарактеристикаНоменклатуры.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция DiffTypeMod(Package)
	Возврат DiffTypeCre(Package);
КонецФункции

Функция DiffTypeDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		ХарактеристикаНоменклатуры = ПланыВидовХарактеристик.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_type);
		Если НЕ ХарактеристикаНоменклатуры.Пустая() Тогда
			ХарактеристикаНоменклатуры.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////SeedObject/////////////////////////////////

Функция CountryCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		СтранаСсылка = Справочники.КлассификаторСтранМира.НайтиПоКоду(XDTO.country_id[0]);
		Если СтранаСсылка.Пустая() Тогда
			СтранаОбъект = Справочники.КлассификаторСтранМира.СоздатьЭлемент();
			СтранаОбъект.Код = XDTO.country_id[0];
		Иначе
			СтранаОбъект = СтранаСсылка.ПолучитьОбъект();
			СтранаОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;	
		СтранаОбъект.Наименование = XDTO.country_desc[0];
		СтранаОбъект.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция CountryMod(Package)
	Возврат CountryCre(Package);
КонецФункции

Функция CountryDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		СтранаСсылка = Справочники.КлассификаторСтранМира.НайтиПоКоду(XDTO.country_id);
		Если НЕ СтранаСсылка.Пустая() Тогда
			СтранаСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция CurrrateCre(Package)
	Возврат Истина; 
КонецФункции

Функция CurrrateMod(Package)
	Возврат CurrrateCre(Package); 
КонецФункции

Функция CurrrateDel(Package)
	Возврат Истина; 
КонецФункции

//////////////////////////////MerchandisingHierarchy/////////////////////////////////

Функция DivisionCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		НоменклатураСсылка = Справочники.Номенклатура.НайтиПоКоду("1:"+Формат(XDTO.division,"ЧГ="));
		Если НоменклатураСсылка.Пустая() Тогда
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.Код = "1:"+Формат(XDTO.division,"ЧГ=");
		Иначе
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			НоменклатураОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		НоменклатураОбъект.Наименование = XDTO.div_name;
		НоменклатураОбъект.Группа = 1;
		НоменклатураОбъект.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция DivisionMod(Package)
	Возврат DivisionCre(Package);
КонецФункции

Функция DivisionDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду("1:"+Формат(XDTO.division,"ЧГ="));
		Если НЕ Номенклатура.Пустая() Тогда
			Номенклатура.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция GroupCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		division = Справочники.Номенклатура.НайтиПоКоду("1:"+Формат(XDTO.division,"ЧГ="));
		Если division.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден дивизион с кодом ""%1"".'"),"%1",Формат(XDTO.division,"ЧГ=")));
		КонецЕсли;
		НоменклатураСсылка = Справочники.Номенклатура.НайтиПоКоду("2:"+Формат(XDTO.group_no,"ЧГ="));
		Если НоменклатураСсылка.Пустая() Тогда
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.Код = "2:"+Формат(XDTO.group_no,"ЧГ=");
		Иначе
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			НоменклатураОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		НоменклатураОбъект.Родитель = division;
		НоменклатураОбъект.Наименование = XDTO.group_name;
		НоменклатураОбъект.Группа = 1;
		НоменклатураОбъект.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция GroupMod(Package)
	Возврат GroupCre(Package);
КонецФункции

Функция GroupDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду("2:"+Формат(XDTO.group_no,"ЧГ="));
		Если НЕ Номенклатура.Пустая() Тогда
			Номенклатура.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция DeptCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Group = Справочники.Номенклатура.НайтиПоКоду("2:"+Формат(XDTO.group_no,"ЧГ="));
		Если Group.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена группа с кодом ""%1"".'"),"%1",Формат(XDTO.group_no,"ЧГ=")));
		КонецЕсли;
		НоменклатураСсылка = Справочники.Номенклатура.НайтиПоКоду("3:"+Формат(XDTO.dept,"ЧГ="));
		Если НоменклатураСсылка.Пустая() Тогда
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.Код = "3:"+Формат(XDTO.dept,"ЧГ=");
		Иначе
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			НоменклатураОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		НоменклатураОбъект.Родитель = Group;
		НоменклатураОбъект.Наименование = XDTO.dept_name;
		НоменклатураОбъект.Группа = 1;
		НоменклатураОбъект.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция DeptMod(Package)
	Возврат deptcre(Package);
КонецФункции

Функция DeptDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду("3:"+Формат(XDTO.dept,"ЧГ="));
		Если НЕ Номенклатура.Пустая() Тогда
			Номенклатура.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ClassCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Департамент = Справочники.Номенклатура.НайтиПоКоду("3:"+Формат(XDTO.dept,"ЧГ="));
		Если Департамент.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден департамент с кодом ""%1"".'"),"%1",Формат(XDTO.dept,"ЧГ=")));
		КонецЕсли;
		НоменклатураСсылка = Справочники.Номенклатура.НайтиПоКоду(Формат(XDTO.class,"ЧГ="),,Департамент.Ссылка);
		Если НоменклатураСсылка.Пустая() Тогда
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.Код = Формат(XDTO.class,"ЧГ=");
			НоменклатураОбъект.Родитель = Департамент;
		Иначе
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			НоменклатураОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		НоменклатураОбъект.Наименование = XDTO.class_name;
		НоменклатураОбъект.Группа = 1;
		НоменклатураОбъект.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ClassMod(Package)
	Возврат classcre(Package);
КонецФункции

Функция ClassDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Департамент = Справочники.Номенклатура.НайтиПоКоду("3:"+Формат(XDTO.dept,"ЧГ="));
		Если Департамент.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден департамент с кодом ""%1"".'"),"%1",Формат(XDTO.dept,"ЧГ=")));
		КонецЕсли;
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Формат(XDTO.class,"ЧГ="),,Департамент.Ссылка);
		Если НЕ Номенклатура.Пустая() Тогда
			Номенклатура.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция SubclassCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Департамент = Справочники.Номенклатура.НайтиПоКоду("3:"+Формат(XDTO.dept,"ЧГ="));
		Если Департамент.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден департамент с кодом ""%1"".'"),"%1",Формат(XDTO.dept,"ЧГ=")));
		КонецЕсли;
		Класс = Справочники.Номенклатура.НайтиПоКоду(Формат(XDTO.class,"ЧГ="),,Департамент.Ссылка);
		Если Класс.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена класс с кодом ""%1"".'"),"%1",Формат(XDTO.class,"ЧГ=")));
		КонецЕсли;	
		НоменклатураСсылка = Справочники.Номенклатура.НайтиПоКоду(Формат(XDTO.subclass,"ЧГ="),,Класс.Ссылка);
		Если НоменклатураСсылка.Пустая() Тогда
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.Код = Формат(XDTO.subclass,"ЧГ=");
			НоменклатураОбъект.Родитель = Класс;
		Иначе
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			НоменклатураОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		НоменклатураОбъект.Наименование = XDTO.subclass_name;
		НоменклатураОбъект.Группа = 1;
		НоменклатураОбъект.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция SubclassMod(Package)
	Возврат subclasscre(Package);
КонецФункции

Функция SubclassDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Департамент = Справочники.Номенклатура.НайтиПоКоду("3:"+Формат(XDTO.dept,"ЧГ="));
		Если Департамент.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден департамент с кодом ""%1"".'"),"%1",Формат(XDTO.dept,"ЧГ=")));
		КонецЕсли;
		Класс = Справочники.Номенклатура.НайтиПоКоду(Формат(XDTO.class,"ЧГ="),,Департамент.Ссылка);
		Если Класс.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена класс с кодом ""%1"".'"),"%1",Формат(XDTO.class,"ЧГ=")));
		КонецЕсли;	
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Формат(XDTO.subclass,"ЧГ="),,Класс.Ссылка);
		Если НЕ Номенклатура.Пустая() Тогда
			Номенклатура.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции




//////////////////////////////Items/////////////////////////////////

Функция ItemHdrCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		НоваяНоменклатура = Ложь;
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemHdrDesc") <> Неопределено Тогда
			XDTO = XDTO.ItemHdrDesc;
		КонецЕсли;
		Департамент = Справочники.Номенклатура.НайтиПоКоду("3:"+Формат(XDTO.dept,"ЧГ="));
		Если Департамент.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден департамент с кодом ""%1"".'"),"%1",Формат(XDTO.dept,"ЧГ=")));
		КонецЕсли;
		Если XDTO.Свойства().Получить("class") <> Неопределено Тогда
			Класс = Справочники.Номенклатура.НайтиПоКоду(Формат(XDTO.class,"ЧГ="),,Департамент.Ссылка);
			Если Класс.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден класс с кодом ""%1"".'"),"%1",Формат(XDTO.class,"ЧГ=")));
			КонецЕсли;	
		КонецЕсли;
		ПодКласс = Неопределено;
		Если XDTO.Свойства().Получить("subclass") <> Неопределено Тогда
			ПодКласс = Справочники.Номенклатура.НайтиПоКоду(Формат(XDTO.subclass,"ЧГ="),,Класс.Ссылка);
			Если ПодКласс.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден подкласс с кодом ""%1"".'"),"%1",Формат(XDTO.subclass,"ЧГ=")));
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(XDTO.item_parent) Тогда
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если НоменклатураСсылка = Неопределено Тогда
				СпрНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
				СпрНоменклатура.Код = XDTO.item;
				СпрНоменклатура.ДатаСоздания = ТекущаяДата();
				НоваяНоменклатура = Истина;
			Иначе
				СпрНоменклатура = НоменклатураСсылка.ПолучитьОбъект();
				СпрНоменклатура.ПометкаУдаления = Ложь;
			КонецЕсли;
			СпрНоменклатура.Родитель = ПодКласс.Ссылка;
		Иначе
			РодительскийТовар = ПолучитьНоменклатуруПоКоду(XDTO.item_parent);
			Если РодительскийТовар = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар родитель с кодом ""%1"".'"),"%1",XDTO.item_parent));
			КонецЕсли;	
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если НоменклатураСсылка = Неопределено Тогда
				СпрНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
				СпрНоменклатура.Код = XDTO.item;
				СпрНоменклатура.ДатаСоздания = ТекущаяДата();
				НоваяНоменклатура = Истина;
			Иначе
				СпрНоменклатура = НоменклатураСсылка.ПолучитьОбъект();
				СпрНоменклатура.ПометкаУдаления = Ложь;
			КонецЕсли;
			СпрНоменклатура.Родитель = РодительскийТовар.Ссылка;
		КонецЕсли;	
		СпрНоменклатура.Характеристика1 = ПланыВидовХарактеристик.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_1_type);
		СпрНоменклатура.ЗначениеХарактеристики1 = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_1,,,СпрНоменклатура.Характеристика1);
		СпрНоменклатура.Характеристика2 = ПланыВидовХарактеристик.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_2_type);
		СпрНоменклатура.ЗначениеХарактеристики2 = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_2,,,СпрНоменклатура.Характеристика2);
		СпрНоменклатура.Характеристика3 = ПланыВидовХарактеристик.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_3_type);
		СпрНоменклатура.ЗначениеХарактеристики3 = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_3,,,СпрНоменклатура.Характеристика3);
		СпрНоменклатура.Характеристика4 = ПланыВидовХарактеристик.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_4_type);
		СпрНоменклатура.ЗначениеХарактеристики4 = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(XDTO.diff_4,,,СпрНоменклатура.Характеристика4);
		
		//{БредовЮГ 2015-04-23 Наряд 000148853 от 23.04.2015 14:22:14
		//СпрНоменклатура.Наименование = XDTO.short_desc;
		//СпрНоменклатура.ПолноеНаименование = XDTO.item_desc;
		СпрНоменклатура.Наименование = XDTO.item_desc;
		СпрНоменклатура.ПолноеНаименование = XDTO.short_desc;
		//БредовЮГ  2015-04-23 Наряд 000148853 от 23.04.2015 14:22:14 } 
		
		СпрНоменклатура.ФлагОсновногоШК = ?(XDTO.primary_ref_item_ind = "Y",Истина,Ложь);
		СпрНоменклатура.ТипКода = Справочники.СлужебныеКоды.НайтиПоКоду(XDTO.item_number_type,,Справочники.СлужебныеКоды.UPCT);
		СпрНоменклатура.ФорматPLU = XDTO.format_id;
		СпрНоменклатура.ПрефиксPLU = Формат(XDTO.prefix, "");	//в случае 0, преобразуется в пустую строку
		//СпрНоменклатура.ЭтикеткиПоставщика = Справочники.СлужебныеКоды.НайтиПоКоду(XDTO.retail_label_value,,Справочники.СлужебныеКоды.RTLT);
		СпрНоменклатура.ТемператураХранения = Справочники.СлужебныеКоды.НайтиПоКоду(XDTO.handling_temp,,Справочники.СлужебныеКоды.HTMP);
		СпрНоменклатура.ПараметрыПрочности = Справочники.СлужебныеКоды.НайтиПоКоду(XDTO.handling_sensitivity,,Справочники.СлужебныеКоды.HSEN);
		СпрНоменклатура.НормаУбыли = XDTO.waste_pct;
		СпрНоменклатура.ПростойНабор = ?(XDTO.simple_pack_ind = "Y",Истина,Ложь);
		СпрНоменклатура.Комментарии = XDTO.comments;
		
		
		Если XDTO.tran_level = XDTO.item_level Тогда
			СпрНоменклатура.Транзакционный = Истина;
		КонецЕсли;	
		
		
		СпрНоменклатура.БазоваяЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(XDTO.standard_uom);
		
		
		СпрНоменклатура.Взвешиваемый = ?(XDTO.catch_weight_ind = "Y",Истина,Ложь);
		СпрНоменклатура.Продаваемый = ?(XDTO.sellable_ind = "Y",Истина,Ложь);
		СпрНоменклатура.Заказываемый = ?(XDTO.orderable_ind = "Y",Истина,Ложь);
		СпрНоменклатура.Учитываемый = ?(XDTO.inventory_ind = "Y",Истина,Ложь);
		
		Если ВходитВГруппу(ПодКласс,ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыПроизводство)) Тогда
			СпрНоменклатура.ВидТовара = Перечисления.ВидыТоваров.Продукция;
		ИначеЕсли ВходитВГруппу(ПодКласс,ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыТара)) Тогда
			СпрНоменклатура.ВидТовара = Перечисления.ВидыТоваров.Тара;
		Иначе	
			Если XDTO.pack_ind = "Y" Тогда
				Если XDTO.pack_type = "V" Тогда
					СпрНоменклатура.ВидТовара = Перечисления.ВидыТоваров.НаборПоставщика;
				Иначе
					СпрНоменклатура.ВидТовара = Перечисления.ВидыТоваров.Набор;
				КонецЕсли;
				СпрНоменклатура.УчетПоСоставу = XDTO.order_as_type = "E";
			Иначе
				Если СпрНоменклатура.Продаваемый И СпрНоменклатура.Учитываемый И СпрНоменклатура.Заказываемый Тогда
					СпрНоменклатура.ВидТовара = Перечисления.ВидыТоваров.Товар;
					//ИначеЕсли НЕ СпрНоменклатура.Продаваемый И СпрНоменклатура.Учитываемый И СпрНоменклатура.Заказываемый Тогда
					//	СпрНоменклатура.ВидТовара = Перечисления.ВидыТоваров.Ингредиент;
				ИначеЕсли СпрНоменклатура.Продаваемый И НЕ СпрНоменклатура.Учитываемый И СпрНоменклатура.Заказываемый Тогда
					СпрНоменклатура.ВидТовара = Перечисления.ВидыТоваров.Услуга;
				ИначеЕсли СпрНоменклатура.Продаваемый И НЕ СпрНоменклатура.Учитываемый И НЕ СпрНоменклатура.Заказываемый Тогда
					СпрНоменклатура.ВидТовара = Перечисления.ВидыТоваров.Услуга;
				ИначеЕсли (НЕ СпрНоменклатура.Продаваемый И СпрНоменклатура.Учитываемый И СпрНоменклатура.Заказываемый)
					ИЛИ ВходитВГруппу(ПодКласс,ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодГруппыМатериалы)) Тогда
					СпрНоменклатура.ВидТовара = Перечисления.ВидыТоваров.Материал;
					//ИначеЕсли СпрНоменклатура.Продаваемый И СпрНоменклатура.Учитываемый И НЕ СпрНоменклатура.Заказываемый Тогда
					//	СпрНоменклатура.ВидТовара = Перечисления.ВидыТоваров.Продукция;
				Иначе
					ВызватьИсключение(НСтр("ru = 'Не найден вид товара.'"));
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если СокрЛП(СпрНоменклатура.ТипКода.Код) = "PLU" ИЛИ СокрЛП(СпрНоменклатура.ТипКода.Код) = "VPLU" ИЛИ СпрНоменклатура.Взвешиваемый Тогда
			СпрНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Весовой;
		Иначе	
			СпрНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Штучный;
		КонецЕсли;	
		СпрНоменклатура.Записать();
		
		ЗаписатьНаименованияУДочернихТоваров(СпрНоменклатура.Ссылка);
		
		Единица = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(СпрНоменклатура.Ссылка, Истина, Истина);
		
		Если НоваяНоменклатура И (СпрНоменклатура.Транзакционный Или СпрНоменклатура.ТипТовара = Перечисления.ТипыТоваров.Весовой) Тогда
			струкПараметры = Новый Структура;
			струкПараметры.Вставить("БизнесПроцесс", БизнесПроцессы.НоваяНоменклатура);
			струкПараметры.Вставить("Основание", СпрНоменклатура.Ссылка);
			струкПараметры.Вставить("Удалять", Истина); 
			струкПараметры.Вставить("Искать", Истина);
			БП = УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
		Конецесли;
		//{КотлячковаЕВ 2014-05-30 01:01:59 Наряд №00017564
		Если МодификацияПакета = Неопределено Тогда
			Результат = ОтправитьПакетыМодификации(СпрНоменклатура.Ссылка,Package,"ItemHdrDesc","Items","ItemHdrCre",Истина,Прокси);
		Иначе	
			Результат = ОтправитьПакетыМодификации(СпрНоменклатура.Ссылка,Package,"ItemHdrDesc","Items","ItemHdrMod",Истина,Прокси);
		КонецЕсли;
		//КотлячковаЕВ 2014-05-30 01:01:59 }
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Процедура ЗаписатьНаименованияУДочернихТоваров(Родитель)
	Наименование = Родитель.Наименование;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СпрОбъект.Наименование = Наименование;
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры	


Функция ItemHdrMod(Package,Прокси = Неопределено)
	Возврат ItemHdrCre(Package,Прокси,Истина);
КонецФункции

Функция ItemCre(Package,Прокси = Неопределено)
	Пакет1 = Package;
	Пакет2 = Package;
	Пакет3 = Package;
	Пакет4 = Package;
	Пакет5 = Package;
	Пакет6 = Package;
	Пакет7 = Package;
	Пакет8 = Package;
	Пакет9 = Package;
	Пакет10 = Package;
	Пакет11 = Package;
	
	Результат1 = ItemHdrCre(Пакет1,Прокси,Неопределено);
	Package = ?(Результат1 = Ложь,Пакет1,"");
	
	Результат2 = ItemSupCre(Пакет2,Прокси,Неопределено);
	Package = Package+?(Результат2 = Ложь,"
	|"+Пакет2,"");
	
	Результат3 = ItemUDALOVCre(Пакет3,Прокси,Неопределено);
	Package = Package+?(Результат3 = Ложь,"
	|"+Пакет3,"");
	
	Результат4 = ItemUDAFFCre(Пакет4,Прокси,Неопределено);
	Package = Package+?(Результат4 = Ложь,"
	|"+Пакет4,"");
	
	Результат5 = ItemUDADateCre(Пакет5,Прокси,Неопределено);
	Package = Package+?(Результат5 = Ложь,"
	|"+Пакет5,"");
	
	Результат6 = ItemBOMCre(Пакет6,Прокси,Неопределено);
	Package = Package+?(Результат6 = Ложь,"
	|"+Пакет6,"");
	
	Результат7 = ItemImageCre(Пакет7,Прокси,Неопределено);
	Package = Package+?(Результат7 = Ложь,"
	|"+Пакет7,"");
	
	Результат8 = ItemUPCCre(Пакет8,Прокси,Неопределено);
	Package = Package+?(Результат8 = Ложь,"
	|"+Пакет8,"");
	
	Результат9 = ItemSupCtyCre(Пакет9,Прокси,Неопределено);
	Package = Package+?(Результат9 = Ложь,"
	|"+Пакет9,"");
	
	Результат10 = ISCDimCre(Пакет10,Прокси,Неопределено);
	Package = Package+?(Результат10 = Ложь,"
	|"+Пакет10,"");
	
	Результат11 = ItemTcktCre(Пакет11,Прокси,Неопределено);
	Package = Package+?(Результат11 = Ложь,"
	|"+Пакет11,"");
	
	Возврат Результат1 И Результат2 И Результат3 И Результат4 И Результат5 И Результат6 И Результат7 И Результат8 И Результат9 И Результат10 И Результат11;
КонецФункции

Функция ItemDel(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemRef") <> Неопределено Тогда
			XDTO = XDTO.ItemRef;
		КонецЕсли;
		Номенклатура = ПолучитьНоменклатуруПоКоду(XDTO.Item);
		Если Номенклатура <> Неопределено Тогда
			Номенклатура.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Истина);
			Результат = ОтправитьПакетыУдаления(Номенклатура,Package,"ItemRef","Items","ItemDel",Прокси)
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemSupCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemSupDesc") <> Неопределено Тогда
			XDTO = XDTO.ItemSupDesc;
		КонецЕсли;	
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			НоменклатураСсылка = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Запись = РегистрыСведений.НоменклатураКонтрагента.СоздатьМенеджерЗаписи();
				КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(Строка.supplier);
				Если КонтрагентСсылка.Пустая() Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден контрагент с кодом ""%1"".'"),"%1",Строка.supplier));
				КонецЕсли;
				Запись.Контрагент = КонтрагентСсылка;
				Если НоменклатураСсылка = Неопределено Тогда
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
					КонецЕсли;
				КонецЕсли;
				Запись.Номенклатура = НоменклатураСсылка;
				Запись.Прочитать();
				Запись.Контрагент = КонтрагентСсылка;
				Запись.Номенклатура = НоменклатураСсылка;
				Запись.ОсновнойПоставщик = ?(Строка.primary_supp_ind = "Y",Истина,Ложь);
				Запись.Артикул = Строка.vpn;
				Запись.Упаковка = Строка.inner_name;
				Запись.Ящик = Строка.case_name;
				Запись.Палета = Строка.pallet_name;
				Запись.ДатаПрекращенияПоставок = ПолучитьДатуXDTO(Строка.supp_discontinue_date);
				ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Упаковка,Запись.КоэффициентУпаковки);
				ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Ящик,Запись.КоэффициентЯщика);
				ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Палета,Запись.КоэффициентПалетыСлой*Запись.КоэффициентПалетыВысота*Запись.КоэффициентЯщика);
				Запись.Записать();
			КонецЦикла;
		Иначе
			Если XDTO.Свойства().Получить("supplier") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Запись = РегистрыСведений.НоменклатураКонтрагента.СоздатьМенеджерЗаписи();
			КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
			Если КонтрагентСсылка.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден контрагент с кодом ""%1"".'"),"%1",XDTO.supplier));
			КонецЕсли;
			Запись.Контрагент = КонтрагентСсылка;
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
			КонецЕсли;
			Запись.Номенклатура = НоменклатураСсылка;
			Запись.Прочитать();
			Запись.Контрагент = КонтрагентСсылка;
			Запись.Номенклатура = НоменклатураСсылка;
			Запись.ОсновнойПоставщик = ?(XDTO.primary_supp_ind = "Y",Истина,Ложь);
			Запись.Артикул = XDTO.vpn;
			Запись.Упаковка = XDTO.inner_name;
			Запись.Ящик = XDTO.case_name;
			Запись.Палета = XDTO.pallet_name;
			Запись.ДатаПрекращенияПоставок = ПолучитьДатуXDTO(XDTO.supp_discontinue_date);
			ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Упаковка,Запись.КоэффициентУпаковки);
			ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Ящик,Запись.КоэффициентЯщика);
			ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Палета,Запись.КоэффициентПалетыСлой*Запись.КоэффициентПалетыВысота*Запись.КоэффициентЯщика);
			Запись.Записать();
		КонецЕсли;	
		Результат = Истина;
		Если МодификацияПакета = Неопределено Тогда
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemSupDesc","Items","ItemSupCre",Истина,Прокси);
		Иначе	
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemSupDesc","Items","ItemSupMod",Истина,Прокси);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemSupMod(Package,Прокси = Неопределено)
	Возврат ItemSupCre(Package,Прокси,Истина); 
КонецФункции

Функция ItemSupDel(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
		Номенклатура = ПолучитьНоменклатуруПоКоду(XDTO.item);
		Если НЕ ЗначениеЗаполнено(Контрагент) И Номенклатура = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;	
		НаборЗаписей = РегистрыСведений.НоменклатураКонтрагента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		Результат = ОтправитьПакетыУдаления(Номенклатура,Package,"ItemSupRef","Items","ItemSupDel",Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ISCMfrCre(Package,Прокси = Неопределено)
	Возврат Истина; 
КонецФункции

Функция ISCMfrMod(Package,Прокси = Неопределено)
	Возврат Истина; 
КонецФункции

Функция ISCMfrDel(Package,Прокси = Неопределено)
	Возврат Истина; 
КонецФункции

Функция ItemSupCtyCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemSupCtyDesc") <> Неопределено Тогда
			XDTO = XDTO.ItemSupCtyDesc;
		КонецЕсли;	
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			НоменклатураСсылка = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Если Строка.primary_country_ind <> "Y" Тогда
					Продолжить;
				КонецЕсли;	
				Запись = РегистрыСведений.НоменклатураКонтрагента.СоздатьМенеджерЗаписи();
				КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(Строка.supplier);
				Если КонтрагентСсылка.Пустая() Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден контрагент с кодом ""%1"".'"),"%1",Строка.supplier));
				КонецЕсли;
				Запись.Контрагент = КонтрагентСсылка;
				Если НоменклатураСсылка = Неопределено Тогда
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
					КонецЕсли;
				КонецЕсли;
				Запись.Номенклатура = НоменклатураСсылка;
				Запись.Прочитать();
				Запись.Контрагент = КонтрагентСсылка;
				Запись.Номенклатура = НоменклатураСсылка;
				Запись.Цена = Строка.unit_cost;
				Запись.МинимальныйЗаказ = Строка.min_order_qty;
				Запись.МаксимальныйЗаказ = Строка.max_order_qty;
				Запись.СрокПоставки = Строка.lead_time;
				Запись.ОсновнойПоставщик = ?(Строка.primary_supp_ind = "Y",Истина,Ложь);
				Запись.ЕдиницаЗаказа = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(Строка.default_uop);
				Если ЗначениеЗаполнено(Строка.tolerance_type) Тогда
					Запись.ТипОтклонения = ?(Строка.tolerance_type = "A",Перечисления.ТипыОтклонений.Единица,Перечисления.ТипыОтклонений.Процент);
				КонецЕсли;	
				Запись.ОтклонениеВесаПлюс = Строка.max_tolerance;
				Запись.ОтклонениеВесаМинус = Строка.min_tolerance;
				Запись.Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(Строка.origin_country_id);
				Запись.КоэффициентУпаковки = Строка.inner_pack_size;
				Запись.КоэффициентЯщика = Строка.supp_pack_size;
				Запись.КоэффициентПалетыСлой = Строка.ti;
				Запись.КоэффициентПалетыВысота = Строка.hi;
				Запись.ВариантОкругления = Строка.round_lvl;
				
				ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Упаковка,Запись.КоэффициентУпаковки);
				ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Ящик,Запись.КоэффициентЯщика);
				ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Палета,Запись.КоэффициентПалетыСлой*Запись.КоэффициентПалетыВысота*Запись.КоэффициентЯщика);
				Запись.Записать();
			КонецЦикла;
		Иначе
			Если XDTO.Свойства().Получить("supplier") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Если XDTO.primary_country_ind <> "Y" Тогда
				Возврат Истина;
			КонецЕсли;	
			Запись = РегистрыСведений.НоменклатураКонтрагента.СоздатьМенеджерЗаписи();
			КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
			Если КонтрагентСсылка.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден контрагент с кодом ""%1"".'"),"%1",XDTO.supplier));
			КонецЕсли;
			Запись.Контрагент = КонтрагентСсылка;
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
			КонецЕсли;
			Запись.Номенклатура = НоменклатураСсылка;
			Запись.Прочитать();
			Запись.Контрагент = КонтрагентСсылка;
			Запись.Номенклатура = НоменклатураСсылка;
			Запись.Цена = XDTO.unit_cost;
			Запись.МинимальныйЗаказ = XDTO.min_order_qty;
			Запись.МаксимальныйЗаказ = XDTO.max_order_qty;
			Запись.СрокПоставки = XDTO.lead_time;
			Запись.ОсновнойПоставщик = ?(XDTO.primary_supp_ind = "Y",Истина,Ложь);
			Запись.ЕдиницаЗаказа = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(XDTO.default_uop);
			Если ЗначениеЗаполнено(XDTO.tolerance_type) Тогда
				Запись.ТипОтклонения = ?(XDTO.tolerance_type = "A",Перечисления.ТипыОтклонений.Единица,Перечисления.ТипыОтклонений.Процент);
			КонецЕсли;	
			Запись.ОтклонениеВесаПлюс = XDTO.max_tolerance;
			Запись.ОтклонениеВесаМинус = XDTO.min_tolerance;
			Запись.Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(XDTO.origin_country_id);
			Запись.КоэффициентУпаковки = XDTO.inner_pack_size;
			Запись.КоэффициентЯщика = XDTO.supp_pack_size;
			Запись.КоэффициентПалетыСлой = XDTO.ti;
			Запись.КоэффициентПалетыВысота = XDTO.hi;
			Запись.ВариантОкругления = XDTO.round_lvl;
			
			ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Упаковка,Запись.КоэффициентУпаковки);
			ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Ящик,Запись.КоэффициентЯщика);
			ЗаписатьЕдиницуИзмерения(КонтрагентСсылка,НоменклатураСсылка,Запись.Палета,Запись.КоэффициентПалетыСлой*Запись.КоэффициентПалетыВысота*Запись.КоэффициентЯщика);
			Запись.Записать();
		КонецЕсли;	
		Результат = Истина;
		Если МодификацияПакета = Неопределено Тогда
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemSupCtyDesc","Items","ItemSupCtyCre",Истина,Прокси);
		Иначе	
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemSupCtyDesc","Items","ItemSupCtyMod",Истина,Прокси);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Процедура ЗаписатьЕдиницуИзмерения(Контрагент,Номенклатура,Единица,Коэффициент)
	Если ЗначениеЗаполнено(Единица) И ЗначениеЗаполнено(Коэффициент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕдиницыИзмерения.Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец = &Владелец
		|	И ЕдиницыИзмерения.Контрагент = &Контрагент
		|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Наименование", Единица);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			спрЕд = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			спрЕд.Владелец = Номенклатура;
			спрЕд.Контрагент = Контрагент;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			спрЕд = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		спрЕд.ЕдиницаПоКлассификатору = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(Единица);
		спрЕд.Наименование = спрЕд.ЕдиницаПоКлассификатору.Наименование;
		спрЕд.Коэффициент = Коэффициент;
		спрЕд.ОбменДанными.Загрузка = Истина;
		спрЕд.Записать();
	КонецЕсли;	
КонецПроцедуры	

Функция ItemSupCtyMod(Package,Прокси = Неопределено)
	Возврат ItemSupCtyCre(Package,Прокси,Истина);
КонецФункции

Функция ItemSupCtyDel(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
		Номенклатура = ПолучитьНоменклатуруПоКоду(XDTO.item);
		Если НЕ ЗначениеЗаполнено(Контрагент) И Номенклатура = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;	
		НаборЗаписей = РегистрыСведений.НоменклатураКонтрагента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		Результат = ОтправитьПакетыУдаления(Номенклатура,Package,"ItemSupCtyRef","Items","ItemSupCtyDel",Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemUDALOVCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemUDALOVDesc") <> Неопределено Тогда
			XDTO = XDTO.ItemUDALOVDesc;
		КонецЕсли;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			НоменклатураСсылка = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Если НоменклатураСсылка = Неопределено Тогда
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
					Иначе		
						НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
					КонецЕсли;
				КонецЕсли;
				РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(Строка.uda_id,"ЧГ="));
				Если РеквизитНоменклатуры.Пустая() Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден доп реквизит с кодом ""%1"".'"),"%1",Формат(Строка.uda_id,"ЧГ=")));
				КонецЕсли;
				//popn+
				Если Формат(Строка.uda_id,"ЧГ=") = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаВидАлкогольнойПродукции) Тогда
					ЗначениеРеквизита = Справочники.КлассификаторАлкогольнойПродукции.НайтиПоКоду(Строка.uda_value);
				ИначеЕсли Формат(Строка.uda_id,"ЧГ=") = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаПроизводитель) Тогда
					ЗначениеРеквизита = Справочники.Контрагенты.НайтиПоКоду(Строка.uda_value);
				Иначе
					ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду(Строка.uda_value,,,РеквизитНоменклатуры);
				КонецЕсли;
				Если ЗначениеРеквизита.Пустая() Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдено значение доп реквизита с кодом ""%1"".'"),"%1",Строка.uda_value));
				КонецЕсли;
				//ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду(Строка.uda_value,,,РеквизитНоменклатуры);
				//Если ЗначениеРеквизита.Пустая() Тогда
				//	ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдено значение доп реквизита с кодом ""%1"".'"),"%1",Строка.uda_value));
				//КонецЕсли;
				//popn-
				Отбор = Новый Структура;
				Отбор.Вставить("Свойство",РеквизитНоменклатуры);
				Если НЕ РеквизитНоменклатуры.ЕдиничноеЗначение Тогда
					Отбор.Вставить("Значение",ЗначениеРеквизита);
				КонецЕсли;	
				СтрокиТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.НайтиСтроки(Отбор);
				Если СтрокиТаблицы.Количество() = 0 Тогда
					СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
				Иначе
					Если РеквизитНоменклатуры.ЛокальноеРедактирование Тогда
						Возврат Истина;
					КонецЕсли;	
					СтрокаТаблицы = СтрокиТаблицы[0];
				КонецЕсли;
				СтрокаТаблицы.Свойство = РеквизитНоменклатуры;
				СтрокаТаблицы.Значение = ЗначениеРеквизита;
			КонецЦикла;	
		Иначе		
			Если XDTO.Свойства().Получить("item") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
			КонецЕсли;
			РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(XDTO.uda_id,"ЧГ="));
			Если РеквизитНоменклатуры.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден доп реквизит с кодом ""%1"".'"),"%1",Формат(XDTO.uda_id,"ЧГ=")));
			КонецЕсли;
			//popn+
			Если Формат(XDTO.uda_id,"ЧГ=") = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаВидАлкогольнойПродукции) Тогда
				ЗначениеРеквизита = Справочники.КлассификаторАлкогольнойПродукции.НайтиПоКоду(XDTO.uda_value);
			ИначеЕсли Формат(XDTO.uda_id,"ЧГ=") = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаПроизводитель) Тогда
				ЗначениеРеквизита = Справочники.Контрагенты.НайтиПоКоду(XDTO.uda_value);	
			Иначе
				ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду(XDTO.uda_value,,,РеквизитНоменклатуры);
			КонецЕсли;
			Если ЗначениеРеквизита.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдено значение доп реквизита с кодом ""%1"".'"),"%1",XDTO.uda_value));
			КонецЕсли;
			//ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду(XDTO.uda_value,,,РеквизитНоменклатуры);
			//Если ЗначениеРеквизита.Пустая() Тогда
			//	ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдено значение доп реквизита с кодом ""%1"".'"),"%1",XDTO.uda_value));
			//КонецЕсли;
			//popn-
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			Отбор = Новый Структура;
			Отбор.Вставить("Свойство",РеквизитНоменклатуры);
			Если НЕ РеквизитНоменклатуры.ЕдиничноеЗначение Тогда
				Отбор.Вставить("Значение",ЗначениеРеквизита);
			КонецЕсли;	
			СтрокиТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.НайтиСтроки(Отбор);
			Если СтрокиТаблицы.Количество() = 0 Тогда
				СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
			Иначе
				Если РеквизитНоменклатуры.ЛокальноеРедактирование Тогда
					Возврат Истина;
				КонецЕсли;	
				СтрокаТаблицы = СтрокиТаблицы[0];
			КонецЕсли;
			СтрокаТаблицы.Свойство = РеквизитНоменклатуры;
			СтрокаТаблицы.Значение = ЗначениеРеквизита;
		КонецЕсли;	
		Если НоменклатураОбъект <> Неопределено Тогда
			НоменклатураОбъект.Записать();
		КонецЕсли;	
		Результат = Истина;
		Если МодификацияПакета = Неопределено Тогда
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemUDALOVDesc","Items","ItemUDALOVCre",Истина,Прокси);
		Иначе	
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemUDALOVDesc","Items","ItemUDALOVMod",Истина,Прокси);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemUDALOVMod(Package,Прокси = Неопределено)
	Возврат ItemUDALOVCre(Package,Прокси,Истина);
КонецФункции

Функция ItemUDALOVDel(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
		Если НоменклатураСсылка = Неопределено Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
		КонецЕсли;
		РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(XDTO.uda_id,"ЧГ="));
		Если РеквизитНоменклатуры.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден доп реквизит с кодом ""%1"".'"),"%1",Формат(XDTO.uda_id,"ЧГ=")));
		КонецЕсли;
		Если Формат(XDTO.uda_id,"ЧГ=") = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаВидАлкогольнойПродукции) Тогда
			ЗначениеРеквизита = Справочники.КлассификаторАлкогольнойПродукции.НайтиПоКоду(XDTO.uda_value);
		ИначеЕсли Формат(XDTO.uda_id,"ЧГ=") = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаПроизводитель) Тогда
			ЗначениеРеквизита = Справочники.Контрагенты.НайтиПоКоду(XDTO.uda_value);
		Иначе
			ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду(XDTO.uda_value,,,РеквизитНоменклатуры);
		КонецЕсли;
		Если ЗначениеРеквизита.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдено значение доп реквизита с кодом ""%1"".'"),"%1",XDTO.uda_value));
		КонецЕсли;
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		Отбор = Новый Структура;
		Отбор.Вставить("Свойство",РеквизитНоменклатуры);
		Отбор.Вставить("Значение",ЗначениеРеквизита);
		СтрокиТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.НайтиСтроки(Отбор);
		Если СтрокиТаблицы.Количество() > 0 Тогда
			Если РеквизитНоменклатуры.ЛокальноеРедактирование Тогда
				Возврат Истина;
			КонецЕсли;	
			НоменклатураОбъект.ДополнительныеРеквизиты.Удалить(СтрокиТаблицы[0]);
		КонецЕсли;
		НоменклатураОбъект.Записать();
		Результат = ОтправитьПакетыУдаления(НоменклатураОбъект.Ссылка,Package,"ItemUDALOVRef","Items","ItemUDALOVDel",Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemUDAFFCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemUDAFFDesc") <> Неопределено Тогда
			XDTO = XDTO.ItemUDAFFDesc;
		КонецЕсли;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			НоменклатураСсылка = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Если НоменклатураСсылка = Неопределено Тогда
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
					Иначе		
						НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
					КонецЕсли;
				КонецЕсли;
				РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(Строка.uda_id,"ЧГ="));
				Если РеквизитНоменклатуры.Пустая() Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден доп реквизит с кодом ""%1"".'"),"%1",Формат(Строка.uda_id,"ЧГ=")));
				КонецЕсли;
				СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(РеквизитНоменклатуры,"Свойство");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
				Иначе	
					Если РеквизитНоменклатуры.ЛокальноеРедактирование Тогда
						Возврат Истина;
					КонецЕсли;	
				КонецЕсли;
				СтрокаТаблицы.Свойство = РеквизитНоменклатуры;
				СтрокаТаблицы.Значение = Строка.uda_text;
			КонецЦикла;	
		Иначе		
			Если XDTO.Свойства().Получить("item") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
			КонецЕсли;
			РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(XDTO.uda_id,"ЧГ="));
			Если РеквизитНоменклатуры.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден доп реквизит с кодом ""%1"".'"),"%1",Формат(XDTO.uda_id,"ЧГ=")));
			КонецЕсли;
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(РеквизитНоменклатуры,"Свойство");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
			Иначе
				Если РеквизитНоменклатуры.ЛокальноеРедактирование Тогда
					Возврат Истина;
				КонецЕсли;	
			КонецЕсли;
			СтрокаТаблицы.Свойство = РеквизитНоменклатуры;
			СтрокаТаблицы.Значение = XDTO.uda_text;
		КонецЕсли;	
		Если НоменклатураОбъект <> Неопределено Тогда
			НоменклатураОбъект.Записать();
		КонецЕсли;	
		Результат = Истина;
		Если МодификацияПакета = Неопределено Тогда
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemUDAFFDesc","Items","ItemUDAFFCre",Истина,Прокси);
		Иначе	
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemUDAFFDesc","Items","ItemUDAFFMod",Истина,Прокси);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemUDAFFMod(Package,Прокси = Неопределено)
	Возврат ItemUDAFFCre(Package,Прокси,Истина);
КонецФункции

Функция ItemUDAFFDel(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
		Если НоменклатураСсылка = Неопределено Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
		КонецЕсли;
		РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(XDTO.uda_id,"ЧГ="));
		Если РеквизитНоменклатуры.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден доп реквизит с кодом ""%1"".'"),"%1",Формат(XDTO.uda_id,"ЧГ=")));
		КонецЕсли;
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(РеквизитНоменклатуры,"Свойство");
		Если СтрокаТаблицы <> Неопределено Тогда
			НоменклатураОбъект.ДополнительныеРеквизиты.Удалить(СтрокаТаблицы);
		Иначе
			Если РеквизитНоменклатуры.ЛокальноеРедактирование Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;
		НоменклатураОбъект.Записать();
		Результат = ОтправитьПакетыУдаления(НоменклатураОбъект.Ссылка,Package,"ItemUDAFFRef","Items","ItemUDAFFDel",Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemUDADateCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemUDADateDesc") <> Неопределено Тогда
			XDTO = XDTO.ItemUDADateDesc;
		КонецЕсли;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			НоменклатураСсылка = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Если НоменклатураСсылка = Неопределено Тогда
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
					Иначе		
						НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
					КонецЕсли;
				КонецЕсли;	
				РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(Строка.uda_id,"ЧГ="));
				Если РеквизитНоменклатуры.Пустая() Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден доп реквизит с кодом ""%1"".'"),"%1",Формат(Строка.uda_id,"ЧГ=")));
				КонецЕсли;
				СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(РеквизитНоменклатуры,"Свойство");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
				Иначе
					Если РеквизитНоменклатуры.ЛокальноеРедактирование Тогда
						Возврат Истина;
					КонецЕсли;	
				КонецЕсли;
				СтрокаТаблицы.Свойство = РеквизитНоменклатуры;
				СтрокаТаблицы.Значение = ПолучитьДатуXDTO(Строка.uda_date);
			КонецЦикла;	
		Иначе	
			Если XDTO.Свойства().Получить("item") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
			КонецЕсли;
			РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(XDTO.uda_id,"ЧГ="));
			Если РеквизитНоменклатуры.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден доп реквизит с кодом ""%1"".'"),"%1",Формат(XDTO.uda_id,"ЧГ=")));
			КонецЕсли;
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(РеквизитНоменклатуры,"Свойство");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
			Иначе
				Если РеквизитНоменклатуры.ЛокальноеРедактирование Тогда
					Возврат Истина;
				КонецЕсли;	
			КонецЕсли;
			СтрокаТаблицы.Свойство = РеквизитНоменклатуры;
			СтрокаТаблицы.Значение = ПолучитьДатуXDTO(XDTO.uda_date);
		КонецЕсли;	
		Если НоменклатураОбъект <> Неопределено Тогда
			НоменклатураОбъект.Записать();
		КонецЕсли;	
		Результат = Истина;
		Если МодификацияПакета = Неопределено Тогда
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemUDADateDesc","Items","ItemUDADateCre",Истина,Прокси);
		Иначе	
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemUDADateDesc","Items","ItemUDADateMod",Истина,Прокси);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemUDADateMod(Package,Прокси = Неопределено)
	Возврат ItemUDADateCre(Package,Прокси,Истина);
КонецФункции

Функция ItemUDADateDel(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
		Если НоменклатураСсылка = Неопределено Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
		КонецЕсли;
		РеквизитНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Формат(XDTO.uda_id,"ЧГ="));
		Если РеквизитНоменклатуры.Пустая() Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден доп реквизит с кодом ""%1"".'"),"%1",Формат(XDTO.uda_id,"ЧГ=")));
		КонецЕсли;
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		СтрокаТаблицы = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(РеквизитНоменклатуры,"Свойство");
		Если СтрокаТаблицы <> Неопределено Тогда
			НоменклатураОбъект.ДополнительныеРеквизиты.Удалить(СтрокаТаблицы);
		Иначе
			Если РеквизитНоменклатуры.ЛокальноеРедактирование Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;
		НоменклатураОбъект.Записать();
		Результат = ОтправитьПакетыУдаления(НоменклатураОбъект.Ссылка,Package,"ItemUDADateRef","Items","ItemUDADateDel",Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemBOMCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemBOMDesc") <> Неопределено Тогда
			XDTO = XDTO.ItemBOMDesc;
		КонецЕсли;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			НоменклатураСсылка = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Если НоменклатураСсылка = Неопределено Тогда
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.pack_no);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.pack_no));
					Иначе		
						НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
						НоменклатураОбъект.СоставНабора.Очистить();
					КонецЕсли;
				КонецЕсли;	
				Компонент = ПолучитьНоменклатуруПоКоду(Строка.item);
				Если Компонент = Неопределено Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
				Иначе		
					СтрокаСостава = НоменклатураОбъект.СоставНабора.Добавить();
					СтрокаСостава.Компонент = Компонент;
					СтрокаСостава.Количество = Строка.pack_qty;
				КонецЕсли;
			КонецЦикла;
		Иначе	
			Если XDTO.Свойства().Получить("pack_no") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.pack_no);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.pack_no));
			Иначе		
				НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
				НоменклатураОбъект.СоставНабора.Очистить();
			КонецЕсли;
			Компонент = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если Компонент = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
			Иначе		
				СтрокаСостава = НоменклатураОбъект.СоставНабора.Добавить();
				СтрокаСостава.Компонент = Компонент;
				СтрокаСостава.Количество = XDTO.pack_qty;
			КонецЕсли;
		КонецЕсли;	
		Если НоменклатураОбъект <> Неопределено Тогда
			НоменклатураОбъект.Записать();
		КонецЕсли;	
		Результат = Истина;
		Если МодификацияПакета = Неопределено Тогда
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemBOMDesc","Items","ItemBOMCre",Истина,Прокси);
		Иначе	
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemBOMDesc","Items","ItemBOMMod",Истина,Прокси);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemBOMMod(Package,Прокси = Неопределено)
	Возврат ItemBOMCre(Package,Прокси,Истина);
КонецФункции

Функция ItemBOMDel(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemBOMRef") <> Неопределено Тогда
			XDTO = XDTO.ItemBOMRef;
		КонецЕсли;
		НоменклатураОбъект = Неопределено;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			Номенклатура = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Если Номенклатура = Неопределено Тогда
					Номенклатура = ПолучитьНоменклатуруПоКоду(Строка.pack_no);
					Если Номенклатура = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.pack_no));
					Иначе		
						НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
					КонецЕсли;
				КонецЕсли;	
				Компонент = ПолучитьНоменклатуруПоКоду(Строка.item);
				Если Компонент = Неопределено Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
				Иначе		
					СтрокаСостава = НоменклатураОбъект.СоставНабора.Найти(Компонент,"Компонент");
					Если СтрокаСостава <> Неопределено Тогда
						НоменклатураОбъект.СоставНабора.Удалить(СтрокаСостава);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;	
		Иначе
			Если XDTO.Свойства().Получить("pack_no") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Номенклатура = ПолучитьНоменклатуруПоКоду(XDTO.pack_no);
			Если Номенклатура = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.pack_no));
			Иначе		
				НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
			КонецЕсли;
			Компонент = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если Компонент = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
			Иначе		
				СтрокаСостава = НоменклатураОбъект.СоставНабора.Найти(Компонент,"Компонент");
				Если СтрокаСостава <> Неопределено Тогда
					НоменклатураОбъект.СоставНабора.Удалить(СтрокаСостава);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		Если НоменклатураОбъект <> Неопределено Тогда
			НоменклатураОбъект.Записать();
		КонецЕсли;	
		Результат = ОтправитьПакетыУдаления(НоменклатураОбъект.Ссылка,Package,"ItemBOMRef","Items","ItemBOMDel",Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemImageCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemImageDesc") <> Неопределено Тогда
			XDTO = XDTO.ItemImageDesc;
		КонецЕсли;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			НоменклатураСсылка = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Если НоменклатураСсылка = Неопределено Тогда
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
					Иначе	
						НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
					КонецЕсли;
				КонецЕсли;	
				Если НоменклатураСсылка <> Неопределено Тогда
					СтрокаСостава = НоменклатураОбъект.Изображения.Добавить();
					СтрокаСостава.Путь = Строка.image_addr;
					СтрокаСостава.Файл = Строка.image_name;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если XDTO.Свойства().Получить("item") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.Item));
			Иначе	
				НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			КонецЕсли;
			СтрокаСостава = НоменклатураОбъект.Изображения.Добавить();
			СтрокаСостава.Путь = XDTO.image_addr;
			СтрокаСостава.Файл = XDTO.image_name;
		КонецЕсли;	
		Если НоменклатураОбъект <> Неопределено Тогда
			НоменклатураОбъект.Записать();
		КонецЕсли;	
		Результат = Истина;
		Если МодификацияПакета = Неопределено Тогда
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemImageDesc","Items","ItemImageCre",Истина,Прокси);
		Иначе	
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemImageDesc","Items","ItemImageMod",Истина,Прокси);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemImageMod(Package,Прокси = Неопределено)
	Возврат ItemImageCre(Package,Прокси,Истина);
КонецФункции

Функция ItemImageDel(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemImageRef") <> Неопределено Тогда
			XDTO = XDTO.ItemImageRef;
		КонецЕсли;
		НоменклатураОбъект = Неопределено;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			Номенклатура = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Если Номенклатура = Неопределено Тогда
					Номенклатура = ПолучитьНоменклатуруПоКоду(Строка.item);
					Если Номенклатура = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Item));
					Иначе	
						НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
					КонецЕсли;
				КонецЕсли;	
				СтрокаИзображения = НоменклатураОбъект.Изображения.Найти(Строка.image_name,"Файл");
				Если СтрокаИзображения <> Неопределено Тогда
					НоменклатураОбъект.Изображения.Удалить(СтрокаИзображения);
				КонецЕсли;	
			КонецЦикла;	
		Иначе
			Если XDTO.Свойства().Получить("item") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			СпрНоменклатура = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если СпрНоменклатура = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.Item));
			Иначе	
				НоменклатураОбъект = СпрНоменклатура.ПолучитьОбъект();
			КонецЕсли;
			СтрокаИзображения = НоменклатураОбъект.Изображения.Найти(XDTO.image_name,"Файл");
			Если СтрокаИзображения <> Неопределено Тогда
				Номенклатура.Изображения.Удалить(СтрокаИзображения);
			КонецЕсли;	
		КонецЕсли;	
		Если НоменклатураОбъект <> Неопределено Тогда
			НоменклатураОбъект.Записать();
		КонецЕсли;	
		Результат = ОтправитьПакетыУдаления(НоменклатураОбъект.Ссылка,Package,"ItemImageRef","Items","ItemImageDel",Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemTcktCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemTcktDesc") <> Неопределено Тогда
			XDTO = XDTO.ItemTcktDesc;
		КонецЕсли;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			НоменклатураСсылка = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Если ПараметрыСеанса.ЭтоЦентр Тогда
					ШаблонЦенника = Справочники.ШаблоныЦенников.НайтиПоКоду(Строка.ticket_type_id);
					Если ШаблонЦенника.Пустая() Тогда
						СпрШаблонЦенника = Справочники.ШаблоныЦенников.СоздатьЭлемент();
						СпрШаблонЦенника.Код = Строка.ticket_type_id;
						СпрШаблонЦенника.Наименование = "Шаблон ценника №"+СокрЛП(Строка.ticket_type_id);
						СпрШаблонЦенника.ОбменДанными.Загрузка = Истина;
						СпрШаблонЦенника.Записать();
					КонецЕсли;	
				КонецЕсли;	
				Запись = РегистрыСведений.ЦенникиНоменклатуры.СоздатьМенеджерЗаписи();
				Если НоменклатураСсылка = Неопределено Тогда
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
					КонецЕсли;
				КонецЕсли;
				Запись.Номенклатура = НоменклатураСсылка;
				Запись.ШаблонЦенника = Строка.ticket_type_id;
				Запись.Записать();
			КонецЦикла;
		Иначе	
			Если XDTO.Свойства().Получить("item") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Если ПараметрыСеанса.ЭтоЦентр Тогда
				ШаблонЦенника = Справочники.ШаблоныЦенников.НайтиПоКоду(XDTO.ticket_type_id);
				Если ШаблонЦенника.Пустая() Тогда
					СпрШаблонЦенника = Справочники.ШаблоныЦенников.СоздатьЭлемент();
					СпрШаблонЦенника.Код = XDTO.ticket_type_id;
					СпрШаблонЦенника.Наименование = "Шаблон ценника №"+СокрЛП(XDTO.ticket_type_id);
					СпрШаблонЦенника.ОбменДанными.Загрузка = Истина;
					СпрШаблонЦенника.Записать();
				КонецЕсли;	
			КонецЕсли;	
			Запись = РегистрыСведений.ЦенникиНоменклатуры.СоздатьМенеджерЗаписи();
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
			КонецЕсли;
			Запись.Номенклатура = НоменклатураСсылка;
			Запись.ШаблонЦенника = XDTO.ticket_type_id;
			Запись.Записать();
		КонецЕсли;	
		Результат = Истина;
		Если МодификацияПакета = Неопределено Тогда
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemTcktDesc","Items","ItemTcktCre",Истина,Прокси);
		Иначе	
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ItemTcktDesc","Items","ItemTcktMod",Истина,Прокси);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ItemTcktDel(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Номенклатура = ПолучитьНоменклатуруПоКоду(XDTO.item);
		Если Номенклатура = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;	
		НаборЗаписей = РегистрыСведений.ЦенникиНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ШаблонЦенника.Установить(XDTO.ticket_type_id);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		Результат = ОтправитьПакетыУдаления(Номенклатура,Package,"ItemTcktRef","Items","ItemTcktDel",Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemVATUpdate(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Для Каждого Строка из XDTO.vat_item Цикл
			СпрНоменклатура = ПолучитьНоменклатуруПоКоду(Строка.item);
			Если СпрНоменклатура = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
			Иначе	
				Номенклатура = СпрНоменклатура.ПолучитьОбъект();
			КонецЕсли;
			Если Номенклатура <> Неопределено Тогда
				СтавкаСсылка = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.vatRate));
				Если СтавкаСсылка.Пустая() Тогда
					СтавкаОбъект = Справочники.СтавкиНДС.СоздатьЭлемент();
					СтавкаОбъект.Ставка = Строка.vatRate;
					СтавкаОбъект.Наименование = "" + СокрЛП(Строка.vatRate) + "%";
					СтавкаОбъект.Записать();
					СтавкаСсылка = СтавкаОбъект.Ссылка;
				КонецЕсли;	
				Номенклатура.СтавкаНДС = СтавкаСсылка;
				Номенклатура.Записать();
			КонецЕсли;	
		КонецЦикла;
		Результат = ОтправитьПакетыМодификации(Номенклатура.Ссылка,Package,"ItemVATDesc","VAT","ItemVATUpdate",Истина,Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemVATMod(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Для Каждого Строка из XDTO.ExtOfVATItem Цикл
			СпрНоменклатура = ПолучитьНоменклатуруПоКоду(Строка.item);
			Если СпрНоменклатура = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
			Иначе	
				Номенклатура = СпрНоменклатура.ПолучитьОбъект();
			КонецЕсли;
			Если Номенклатура <> Неопределено Тогда
				СтавкаСсылка = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.vat_Rate));
				Если СтавкаСсылка.Пустая() Тогда
					СтавкаОбъект = Справочники.СтавкиНДС.СоздатьЭлемент();
					СтавкаОбъект.Ставка = Строка.vat_Rate;
					СтавкаОбъект.Наименование = "" + СокрЛП(Строка.vat_Rate) + "%";
					СтавкаОбъект.Записать();
					СтавкаСсылка = СтавкаОбъект.Ссылка;
				КонецЕсли;	
				Номенклатура.СтавкаНДС = СтавкаСсылка;
				Номенклатура.Записать();
			КонецЕсли;	
		КонецЦикла;
		Результат = ОтправитьПакетыМодификации(Номенклатура.Ссылка,Package,"ExtOfVATDesc","ExtOfVAT","ItemVATMod",Истина,Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции


Функция ItemUPCCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ItemUPCDesc") <> Неопределено Тогда
			XDTO = XDTO.ItemUPCDesc;
		КонецЕсли;
		РодительскийТовар = Неопределено;
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			Для Каждого Строка из XDTO Цикл
				РодительскийТовар = ПолучитьНоменклатуруПоКоду(Строка.item_parent);
				Если РодительскийТовар = Неопределено Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар родитель с кодом ""%1"".'"),"%1",Строка.item_parent));
				КонецЕсли;	
				НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item_id);
				Если НоменклатураСсылка = Неопределено Тогда
					СпрНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
					СпрНоменклатура.Код = Строка.item_id;
					СпрНоменклатура.ДатаСоздания = ТекущаяДата();
					НоваяНоменклатура = Истина;
				Иначе
					СпрНоменклатура = НоменклатураСсылка.ПолучитьОбъект();
					СпрНоменклатура.ПометкаУдаления = Ложь;
				КонецЕсли;
				СпрНоменклатура.Родитель = РодительскийТовар.Ссылка;
				ЗаполнитьЗначенияСвойств(СпрНоменклатура,РодительскийТовар,,"Владелец,Родитель,Код,ДатаСоздания");
				СпрНоменклатура.ФорматPLU = Строка.format_id;
				СпрНоменклатура.ПрефиксPLU = Формат(Строка.prefix, "");	//в случае 0, преобразуется в пустую строку
				СпрНоменклатура.ТипКода = Справочники.СлужебныеКоды.НайтиПоКоду(Строка.item_number_type,,Справочники.СлужебныеКоды.UPCT);
				СпрНоменклатура.Транзакционный = ложь;
				СпрНоменклатура.ФлагОсновногоШК = ?(Строка.primary_ref_item_ind = "Y",Истина,Ложь);
				СпрНоменклатура.Записать();
			КонецЦикла;	
		Иначе
			РодительскийТовар = ПолучитьНоменклатуруПоКоду(XDTO.item_parent);
			Если РодительскийТовар = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар родитель с кодом ""%1"".'"),"%1",XDTO.item_parent));
			КонецЕсли;	
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item_id);
			Если НоменклатураСсылка = Неопределено Тогда
				СпрНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
				СпрНоменклатура.Код = XDTO.item_id;
				СпрНоменклатура.ДатаСоздания = ТекущаяДата();
				НоваяНоменклатура = Истина;
			Иначе
				СпрНоменклатура = НоменклатураСсылка.ПолучитьОбъект();
				СпрНоменклатура.ПометкаУдаления = Ложь;
			КонецЕсли;
			СпрНоменклатура.Родитель = РодительскийТовар.Ссылка;
			ЗаполнитьЗначенияСвойств(СпрНоменклатура,РодительскийТовар,,"Владелец,Родитель,Код,ДатаСоздания");
			СпрНоменклатура.ФорматPLU = XDTO.format_id;
			СпрНоменклатура.ПрефиксPLU = Формат(XDTO.prefix, "");	//в случае 0, преобразуется в пустую строку;
			СпрНоменклатура.ТипКода = Справочники.СлужебныеКоды.НайтиПоКоду(XDTO.item_number_type,,Справочники.СлужебныеКоды.UPCT);
			СпрНоменклатура.Транзакционный = ложь;
			СпрНоменклатура.ФлагОсновногоШК = ?(XDTO.primary_ref_item_ind = "Y",Истина,Ложь);
			СпрНоменклатура.Записать();
		КонецЕсли;	
		//Единица = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(СпрНоменклатура.Ссылка, Истина);
		
		//Если НоваяНоменклатура тогда
		//	струкПараметры = Новый Структура;
		//	струкПараметры.Вставить("БизнесПроцесс", БизнесПроцессы.НоваяНоменклатура);
		//	струкПараметры.Вставить("Основание", СпрНоменклатура.Ссылка);
		//	струкПараметры.Вставить("Удалять", Истина); 
		//	струкПараметры.Вставить("Искать", Истина);
		//	БП = УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
		//Конецесли;
		Результат = Истина;
		Если РодительскийТовар <> Неопределено Тогда
			Если РодительскийТовар.Транзакционный Тогда
				НоменклатураМодификации = РодительскийТовар;
			Иначе
				НоменклатураМодификации = РодительскийТовар.Родитель;
			КонецЕсли;	
			Если МодификацияПакета = Неопределено Тогда
				Результат = ОтправитьПакетыМодификации(НоменклатураМодификации,Package,"ItemUPCDesc","Items","ItemUPCCre",Истина,Прокси);
			Иначе		
				Результат = ОтправитьПакетыМодификации(НоменклатураМодификации,Package,"ItemUPCDesc","Items","ItemUPCMod",Истина,Прокси);
			КонецЕсли;	
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemUPCMod(Package,Прокси = Неопределено)
	Возврат ItemUPCCre(Package,Прокси,Истина);
КонецФункции

Функция ItemUPCDel(Package,Прокси = Неопределено)
	Возврат ItemDel(Package,Прокси); 
КонецФункции

Функция ISCDimCre(Package,Прокси = Неопределено,МодификацияПакета = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.Свойства().Получить("ISCDimDesc") <> Неопределено Тогда
			XDTO = XDTO.ISCDimDesc;
		КонецЕсли;	
		Если Тип(XDTO) = Тип("СписокXDTO") Тогда
			НоменклатураСсылка = Неопределено;
			Для Каждого Строка из XDTO Цикл
				Если НоменклатураСсылка = Неопределено Тогда
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
					КонецЕсли;
				КонецЕсли;
				КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(Строка.supplier);
				Если КонтрагентСсылка.Пустая() Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден контрагент с кодом ""%1"".'"),"%1",Строка.supplier));
				КонецЕсли;
				ЕдиницаИзмеренияСсылка = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(Строка.dim_object,Строка.object_desc);
				
				Запись = РегистрыСведений.МассогабаритныеХарактеристики.СоздатьМенеджерЗаписи();
				Запись.Контрагент = КонтрагентСсылка;
				Запись.Номенклатура = НоменклатураСсылка;
				Запись.ЕдиницаИзмерения = ЕдиницаИзмеренияСсылка;
				Запись.Прочитать();
				Запись.Контрагент = КонтрагентСсылка;
				Запись.Номенклатура = НоменклатураСсылка;
				Запись.ЕдиницаИзмерения = ЕдиницаИзмеренияСсылка;
				Запись.Ширина = Строка.width;
				Запись.Длина = Строка.length;
				Запись.Высота = Строка.height;
				Запись.Брутто = Строка.weight;
				Запись.Нетто = Строка.net_weight;
				Запись.ЕдиницаВеса = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(Строка.weight_uom);
				Запись.ЕдиницаГабаритов = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(Строка.lwh_uom);
				Запись.Записать();
			КонецЦикла;
		Иначе	
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.item));
			КонецЕсли;
			КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
			Если КонтрагентСсылка.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден контрагент с кодом ""%1"".'"),"%1",XDTO.supplier));
			КонецЕсли;
			ЕдиницаИзмеренияСсылка = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(XDTO.dim_object,XDTO.object_desc);
			
			Запись = РегистрыСведений.МассогабаритныеХарактеристики.СоздатьМенеджерЗаписи();
			Запись.Контрагент = КонтрагентСсылка;
			Запись.Номенклатура = НоменклатураСсылка;
			Запись.ЕдиницаИзмерения = ЕдиницаИзмеренияСсылка;
			Запись.Прочитать();
			Запись.Контрагент = КонтрагентСсылка;
			Запись.Номенклатура = НоменклатураСсылка;
			Запись.ЕдиницаИзмерения = ЕдиницаИзмеренияСсылка;
			Запись.Ширина = XDTO.width;
			Запись.Длина = XDTO.length;
			Запись.Высота = XDTO.height;
			Запись.Брутто = XDTO.weight;
			Запись.Нетто = XDTO.net_weight;
			Запись.ЕдиницаВеса = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(XDTO.weight_uom);
			Запись.ЕдиницаГабаритов = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(XDTO.lwh_uom);
			Запись.Записать();
		КонецЕсли;	
		Результат = Истина;
		Если МодификацияПакета = Неопределено Тогда
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ISCDimDesc","Items","ISCDimCre",Истина,Прокси);
		Иначе	
			Результат = ОтправитьПакетыМодификации(НоменклатураСсылка,Package,"ISCDimDesc","Items","ISCDimMod",Истина,Прокси);
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ISCDimMod(Package,Прокси = Неопределено)
	Возврат ISCDimCre(Package,Прокси,Истина);
КонецФункции

Функция ISCDimDel(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Номенклатура = ПолучитьНоменклатуруПоКоду(XDTO.item);
		Если Номенклатура = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;	
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
		Если КонтрагентСсылка.Пустая() Тогда
			Возврат Истина;
		КонецЕсли;
		ЕдиницаИзмеренияСсылка = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(XDTO.dim_object);
		НаборЗаписей = РегистрыСведений.МассогабаритныеХарактеристики.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.ЕдиницаИзмерения.Установить(ЕдиницаИзмеренияСсылка);
		НаборЗаписей.Отбор.Контрагент.Установить(КонтрагентСсылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		Результат = ОтправитьПакетыУдаления(Номенклатура,Package,"ISCDimRef","Items","ISCDimDel",Прокси);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemUOMCre(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		СпрНоменклатура = ПолучитьНоменклатуруПоКоду(XDTO.item,	XDTO.item_type);
		Если СпрНоменклатура = Неопределено Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден "+XDTO.item_type+" с кодом ""%1"".'"),"%1",XDTO.item));
		КонецЕсли;
		Если ЗначениеЗаполнено(XDTO.supplier) И СокрЛП(XDTO.supplier) <> "0" Тогда
			КонтрагентСсылка = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
			Если КонтрагентСсылка.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена контрагент с кодом ""%1"".'"),"%1",XDTO.supplier));
			КонецЕсли;
		Иначе
			КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Наименование = &Наименование
		|	И ЕдиницыИзмерения.Владелец = &Владелец
		|	И ЕдиницыИзмерения.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("Наименование", XDTO.uom);
		Запрос.УстановитьПараметр("Владелец", СпрНоменклатура);
		Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		//СпрЕдиницаИзмеренияСсылка = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(XDTO.uom,истина,,СпрНоменклатура);
		СпрЕдиницаИзмеренияСсылка = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(XDTO.uom,СпрНоменклатура); //dps+ 15,10,05
		Если Выборка.Следующий() Тогда
			СпрЕдиница = Выборка.Ссылка.ПолучитьОбъект();
			СпрЕдиница.ПометкаУдаления = Ложь;
		Иначе
			СпрЕдиница = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			СпрЕдиница.Владелец = СпрНоменклатура;
		КонецЕсли;
		СпрЕдиница.ЕдиницаПоКлассификатору = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(XDTO.uom_type);
		СпрЕдиница.Наименование = XDTO.uom;
		СпрЕдиница.Коэффициент = XDTO.uom_conv_factor;
		СпрЕдиница.Контрагент = КонтрагентСсылка;
		//СпрЕдиница.Длина = XDTO.width;
		//СпрЕдиница.Высота = XDTO.height;
		//СпрЕдиница.Глубина = XDTO.weight;
		СпрЕдиница.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции


Функция ОтправитьПакетыМодификации(Номенклатура,Package,ИмяПакета,Семейство,ТипПакета,МодификацияПакета,Прокси)
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		Возврат Истина;
	КонецЕсли;
	Если ПараметрыСеанса.НеИспользоватьТоварнуюМаршрутизацию Тогда
		Возврат Истина;
	КонецЕсли;
	Если МодификацияПакета <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыНоменклатуры.СтруктурнаяЕдиница.Код КАК КодСЕ
		|ИЗ
		|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
		|ГДЕ
		|	СтатусыНоменклатуры.Номенклатура = &Номенклатура
		|	И СтатусыНоменклатуры.СтруктурнаяЕдиница.РежимРаботы <> &РежимРаботы";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("РежимРаботы", Перечисления.РежимРаботыСЕ.НеРаботает);
		
		МассивРезультата = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодСЕ");
		Если МассивРезультата.Найти("1") = Неопределено Тогда  //dps R3-13 чтоб все статусы шли в WH.
			МассивРезультата.Добавить("1");     
		КонецЕсли;
		Если ОтправитьПакетыВФинансы(Номенклатура, ТипПакета) Тогда
			МассивРезультата.Добавить("Fin");
		КонецЕсли;	
	Иначе
		//значит это пакет в финансы
		МассивРезультата = Новый Массив;
		МассивРезультата.Добавить("Fin");
	КонецЕсли;
	Если МассивРезультата.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Попытка
		Если Прокси = Неопределено Тогда
			ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
			Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
			URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
			ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
			ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
			Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
			Прокси.Пользователь = ВебСервис.Имя;
			Прокси.Пароль = ВебСервис.Пароль;
		КонецЕсли;	
		КодЛокации = "";
		Для Каждого Строка Из МассивРезультата Цикл
			КодЛокации = КодЛокации+","+Формат(Строка,"ЧГ=");
		КонецЦикла;
		RibMessages = УпаковатьВСообщение(ТекущаяДата(),Номенклатура.Код,Package,ИмяПакета,Семейство,ТипПакета,КодЛокации);
		Результат = ОтправитьСообщение(RibMessages,Прокси);
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции	

Функция ОтправитьПакетыУдаления(Номенклатура,Package,ИмяПакета,Семейство,ТипПакета,Прокси)
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		Возврат Истина;
	КонецЕсли;
	Если ПараметрыСеанса.НеИспользоватьТоварнуюМаршрутизацию Тогда
		Возврат Истина;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыНоменклатуры.СтруктурнаяЕдиница.Код КАК КодСЕ
	|ИЗ
	|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|ГДЕ
	|	СтатусыНоменклатуры.Номенклатура = &Номенклатура
	|	И СтатусыНоменклатуры.СтруктурнаяЕдиница.РежимРаботы <> &РежимРаботы";
	
	Если Номенклатура.Транзакционный Тогда
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Иначе
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура.Родитель);
	КонецЕсли;
	Запрос.УстановитьПараметр("РежимРаботы", Перечисления.РежимРаботыСЕ.НеРаботает);
	
	МассивРезультата = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодСЕ");
	Если ОтправитьПакетыВФинансы(Номенклатура, ТипПакета) Тогда
		МассивРезультата.Добавить("Fin");
	КонецЕсли;
	
	Попытка
		Если Прокси = Неопределено Тогда
			ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
			Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
			URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
			ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
			ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
			Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
			Прокси.Пользователь = ВебСервис.Имя;
			Прокси.Пароль = ВебСервис.Пароль;
		КонецЕсли;	
		КодЛокации = "";
		Для Каждого Строка Из МассивРезультата Цикл
			КодЛокации = КодЛокации+","+Формат(Строка,"ЧГ=");
		КонецЦикла;
		RibMessages = УпаковатьВСообщение(ТекущаяДата(),Номенклатура.Код,Package,ИмяПакета,Семейство,ТипПакета,КодЛокации);
		Результат = ОтправитьСообщение(RibMessages,Прокси);
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции	

Функция ОтправитьПакетыВФинансы(Номенклатура, ТипПакета)
	Если ТипПакета = "ItemHdrCre" 
		ИЛИ ТипПакета = "ItemHdrMod"
		ИЛИ ТипПакета = "ItemCre"
		ИЛИ ТипПакета = "ItemDel"
		ИЛИ ТипПакета = "ItemVATUpdate" Тогда
		//{КотлячковаЕВ 2014-06-03 12:58:46 Наряд №000117841
		//Если Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Услуга Или Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Материал Тогда
		//	Возврат Истина;
		//КонецЕсли;
		//КотлячковаЕВ 2014-06-03 12:58:46 }
	КонецЕсли;	
	Возврат Ложь;
КонецФункции	

Функция ВходитВГруппу(ПодКласс,КодГруппы)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				Номенклатура.Ссылка
	|			ИЗ
	|				Справочник.Номенклатура КАК Номенклатура
	|			ГДЕ
	|				Номенклатура.Код = &Код)
	|	И Номенклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПодКласс);
	Запрос.УстановитьПараметр("Код", КодГруппы);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции	

//////////////////////////////ItemLocation/////////////////////////////////

Функция ItemLocCre(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.Item);
		Если НоменклатураСсылка = Неопределено Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.Item));
		КонецЕсли;
		Если ПараметрыСеанса.ЭтоЦентр И Прокси = Неопределено Тогда
			ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
			
			Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
			URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
			ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
			ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
			Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
			Прокси.Пользователь = ВебСервис.Имя;
			Прокси.Пароль = ВебСервис.Пароль;
		КонецЕсли;
		КодЛокации = "";
		Результат = Истина;
		Для Каждого Строка Из XDTO.ItemLocPhys Цикл
			СтруктурнаяЕдиницаСсылка = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.physical_loc);
			Если СтруктурнаяЕдиницаСсылка.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена СЕ с кодом ""%1"".'"),"%1",Строка.physical_loc));
			КонецЕсли;
			Для Каждого Строка1 Из Строка.ItemLocVirt Цикл
				Если СокрЛП(Строка1.status) = "I" Тогда
					Статус = Перечисления.СтатусыТоваров.НеАктивный;
				ИначеЕсли СокрЛП(Строка1.status) = "C" Тогда
					Статус = Перечисления.СтатусыТоваров.СнятыйСПроизводства;
				ИначеЕсли СокрЛП(Строка1.status) = "D" Тогда
					Статус = Перечисления.СтатусыТоваров.Удаленный;
				ИначеЕсли СокрЛП(Строка1.status) = "A" Тогда
					Статус = Перечисления.СтатусыТоваров.Активный;
				Иначе
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден Статус товара ""%1"".'"),"%1",Строка1.status));
				КонецЕсли;
				//++БИТ БВО
				ОснПоставщик 	= Неопределено;
				КодПоставщика	= СтрЗаменить(СокрЛП(Строка1.primary_supp), " ", "");
				Если КодПоставщика <> "" Тогда
					ОснПоставщик = Справочники.Контрагенты.НайтиПоКоду(Число(КодПоставщика));
					Если НЕ ЗначениеЗаполнено(ОснПоставщик) Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден Основной поставщик товара (контрагент) по коду: ""%1"".'"),"%1",КодПоставщика));
					КонецЕсли;				
				КонецЕсли;								
				//--БИТ БВО
				Если Строка1.loc_type <> "S" И Строка1.loc_type <> "W" Тогда
					Продолжить;
				КонецЕсли;	
				Если НЕ(ПараметрыСеанса.ЭтоЦентр ИЛИ ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад) И НЕ СтруктурныеЕдиницы.КодПринадлежитТекущейГруппеСЕ(Число(Строка.physical_loc)) Тогда
					//Если НЕ ПараметрыСеанса.ЭтоЦентр И НЕ СтруктурныеЕдиницы.КодПринадлежитТекущейГруппеСЕ(Число(Строка.physical_loc)) Тогда
					Продолжить;
				КонецЕсли;	
				Запись = РегистрыСведений.СтатусыНоменклатуры.СоздатьМенеджерЗаписи();
				Запись.Номенклатура = НоменклатураСсылка;
				Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиницаСсылка;
				Запись.Статус = Статус;
				//++БИТ БВО
				Запись.ОсновнойПоставщик = ОснПоставщик;
				//--БИТ БВО
				//dps+ 14/07/08 наряд000120536
				Если Статус =  Перечисления.СтатусыТоваров.Активный Тогда 
					Запись.ДатаДобавления = ТекущаяДата();
				КонецЕсли;
				//dps-
				//++БИТ БВО
				//Запись.Записать();
				Запись.Записать(Истина);
				//--БИТ БВО
				
				//Если ЗначениеЗаполнено(Строка1.selling_unit_retail) Тогда	kons
				//	//бпПустая = БизнесПроцессы.НоваяЦена.ПустаяСсылка();
				//	//АктивностьЗаписи = НЕ УправлениеБизнесПроцессамиСервер.БизнесПроцессРазрешен(бпПустая);
				//	МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				//	МенеджерЗаписи.Период = ТекущаяДата();
				//	МенеджерЗаписи.СтруктурнаяЕдиница = СтруктурнаяЕдиницаСсылка;
				//	МенеджерЗаписи.Номенклатура = НоменклатураСсылка;
				//	МенеджерЗаписи.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка1.selling_uom,,,НоменклатураСсылка);
				//	МенеджерЗаписи.Цена = Строка1.selling_unit_retail;
				//	МенеджерЗаписи.Валюта = СтруктурнаяЕдиницаСсылка.Валюта;
				//	МенеджерЗаписи.АктивностьЗаписи = Истина;
				//	МенеджерЗаписи.Записать();
				//	
				//	//Если АктивностьЗаписи = Ложь Тогда
				//	//	СтрукПараметры = Новый Структура;
				//	//	СтрукОснование = Новый Структура;
				//	//	струкПараметры.Вставить("Удалять", Ложь); 
				//	//	струкПараметры.Вставить("Искать", Ложь);
				//	//	СтрукПараметры.Вставить("БизнесПроцесс",БизнесПроцессы.НоваяЦена);
				//	//	СтрукПараметры.Вставить("СтруктурнаяЕдиница",СтруктурнаяЕдиницаСсылка);
				//	//	СтрукОснование.Вставить("Основание",МенеджерЗаписи.Период);
				//	//	струкПараметры.Вставить("ТочкаМаршрута", БизнесПроцессы.НоваяЦена.ТочкиМаршрута.ПечатьЦенников);
				//	//	ТЗСостав = Новый ТаблицаЗначений;
				//	//	ТЗСостав.Колонки.Добавить("Номенклатура");
				//	//	ТЗСостав.Колонки.Добавить("ЕдиницаИзмерения");
				//	//	ТЗСостав.Колонки.Добавить("ID");
				//	//	ТЗСостав.Колонки.Добавить("Цена");
				//	//	НоваяСтрока = ТЗСостав.Добавить();
				//	//	ЗаполнитьЗначенияСвойств(НоваяСтрока,МенеджерЗаписи);
				//	//	СтрукОснование.Вставить("Состав",ТЗСостав);
				//	//	СтрукПараметры.Вставить("Основание",СтрукОснование);
				//	//	УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
				//	//Конецесли;
				//КонецЕсли;	
				
			КонецЦикла;	
			Если СтруктурнаяЕдиницаСсылка.РежимРаботы <> Перечисления.РежимРаботыСЕ.НеРаботает Тогда
				КодЛокации = КодЛокации+","+Формат(Строка.physical_loc,"ЧГ=");
			КонецЕсли;	
		КонецЦикла;	
		//Отправка товара в магазин
		Если ПараметрыСеанса.ЭтоЦентр И КодЛокации <> "" Тогда
			//и финансы
			Если (НоменклатураСсылка.ВидТовара = Перечисления.ВидыТоваров.Услуга Или НоменклатураСсылка.ВидТовара = Перечисления.ВидыТоваров.Материал)Тогда
				КодЛокацииСфинансами = КодЛокации+",Fin";
			Иначе	
				КодЛокацииСфинансами = КодЛокации;
			КонецЕсли;	
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	(Номенклатура.Родитель = &Ссылка
			|			ИЛИ Номенклатура.Родитель.Родитель = &Ссылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Номенклатура.Родитель КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Родитель.Группа = &Группа
			|	И Номенклатура.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Номенклатура.Родитель.Родитель КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Родитель.Родитель.Группа = &Группа
			|	И Номенклатура.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура.Ссылка ИЕРАРХИЯ";
			
			Запрос.УстановитьПараметр("Группа", 0);
			Запрос.УстановитьПараметр("Ссылка", НоменклатураСсылка);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = ОтправитьНоменклатуру(ВыборкаДетальныеЗаписи.Номенклатура,КодЛокацииСфинансами,Прокси);
			КонецЦикла;
			Если НЕ НоменклатураСсылка.СтавкаНДС.Пустая() Тогда
				Результат = ОтправитьСтавкуНДС(НоменклатураСсылка.Код,КодЛокацииСфинансами,НоменклатураСсылка.СтавкаНДС.Ставка,Прокси);
			КонецЕсли;
			ОтправитьИнгредиентыДляОбновления(НоменклатураСсылка.Код,КодЛокации,Прокси);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕдиницыИзмерения.Ссылка
			|ИЗ
			|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
			|ГДЕ
			|	ЕдиницыИзмерения.Владелец = &Владелец
			|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору <> &ЕдиницаПоКлассификатору";
			
			Запрос.УстановитьПараметр("Владелец", НоменклатураСсылка);
			Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору", НоменклатураСсылка.БазоваяЕдиницаИзмерения);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = ОтправитьЕдиницуИзмерения(ВыборкаДетальныеЗаписи.Ссылка,КодЛокации,Прокси);
			КонецЦикла;
			//Результат = ОтправитьТоварЛокация(XDTO.Item,Строка.physical_loc,Строка1.status,Строка1.loc_type,Прокси);
			RibMessages = УпаковатьВСообщение(ТекущаяДата(),НоменклатураСсылка.Код,Package,"ItemLocDesc","ItemLoc","ItemLocCre",КодЛокации);
			Результат = ОтправитьСообщение(RibMessages,Прокси);
		КонецЕсли;	
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemLocMod(Package,Прокси = Неопределено)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.Item);
		Если НоменклатураСсылка = Неопределено Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.Item));
		КонецЕсли;
		//++Минин 2015-07-28 0000133635
		Если ПараметрыСеанса.ЭтоЦентр И Прокси = Неопределено Тогда
			ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
			
			Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
			URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
			ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
			ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
			Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
			Прокси.Пользователь = ВебСервис.Имя;
			Прокси.Пароль = ВебСервис.Пароль;
		КонецЕсли;
		//Минин 2015-07-28 0000133635
		
		КодЛокации = "1";
		Для Каждого Строка Из XDTO.ItemLocPhys Цикл
			СтруктурнаяЕдиницаСсылка = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.physical_loc);
			Если СтруктурнаяЕдиницаСсылка.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена СЕ с кодом ""%1"".'"),"%1",Строка.physical_loc));
			КонецЕсли;
			Для Каждого Строка1 Из Строка.ItemLocVirt Цикл
				Если СокрЛП(Строка1.status) = "I" Тогда
					Статус = Перечисления.СтатусыТоваров.НеАктивный;
				ИначеЕсли СокрЛП(Строка1.status) = "C" Тогда
					Статус = Перечисления.СтатусыТоваров.СнятыйСПроизводства;
				ИначеЕсли СокрЛП(Строка1.status) = "D" Тогда
					Статус = Перечисления.СтатусыТоваров.Удаленный;
				ИначеЕсли СокрЛП(Строка1.status) = "A" Тогда
					Статус = Перечисления.СтатусыТоваров.Активный;
				Иначе
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден Статус товара ""%1"".'"),"%1",Строка1.status));
				КонецЕсли;				
				Если Строка1.loc_type <> "S" И Строка1.loc_type <> "W" Тогда
					Продолжить;
				КонецЕсли;	
				//++БИТ БВО
				ОснПоставщик 	= Неопределено;
				КодПоставщика	= СтрЗаменить(СокрЛП(Строка1.primary_supp), " ", "");
				Если КодПоставщика <> "" Тогда
					ОснПоставщик = Справочники.Контрагенты.НайтиПоКоду(Число(КодПоставщика));
					Если НЕ ЗначениеЗаполнено(ОснПоставщик) Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден Основной поставщик товара (контрагент) по коду: ""%1"".'"),"%1",КодПоставщика));
					КонецЕсли;
				КонецЕсли;												
				//--БИТ БВО
				Если НЕ(ПараметрыСеанса.ЭтоЦентр ИЛИ ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад) И НЕ СтруктурныеЕдиницы.КодПринадлежитТекущейГруппеСЕ(Число(Строка.physical_loc)) Тогда
					Продолжить;
				КонецЕсли;	
				Запись = РегистрыСведений.СтатусыНоменклатуры.СоздатьМенеджерЗаписи();
				Запись.Номенклатура = НоменклатураСсылка;
				Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиницаСсылка;
				Запись.Статус = Статус;
				//++БИТ БВО
				Запись.ОсновнойПоставщик = ОснПоставщик;
				//--БИТ БВО
				//dps+ 14/07/08 наряд000120536
				Если Статус =  Перечисления.СтатусыТоваров.Активный Тогда 
					Запись.ДатаДобавления = ТекущаяДата();
				ИначеЕсли Статус =  Перечисления.СтатусыТоваров.НеАктивный Тогда 
					ЗапросСН = Новый Запрос;
					ЗапросСН.Текст = " ВЫБРАТЬ
					|	СтатусыНоменклатуры.Статус
					|ИЗ
					|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
					|ГДЕ
					|	СтатусыНоменклатуры.Номенклатура = &Номенклатура
					|	И СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
					ЗапросСН.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
					ЗапросСН.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаСсылка);
					ВыборкаСН = ЗапросСН.Выполнить().Выбрать();
					Если ВыборкаСН.Следующий() Тогда 
						Если ВыборкаСН.Статус = Перечисления.СтатусыТоваров.Активный Тогда 
							Запись.ДатаДобавления = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//dps-
				//++БИТ БВО
				//Запись.Записать();
				Запись.Записать(Истина);
				//--БИТ БВО
			КонецЦикла;	
			Если СтруктурнаяЕдиницаСсылка.РежимРаботы <> Перечисления.РежимРаботыСЕ.НеРаботает Тогда
				КодЛокации = КодЛокации+","+Формат(Строка.physical_loc,"ЧГ=");
			КонецЕсли;	
		КонецЦикла;	
		//оправим фефе
		Если ПараметрыСеанса.ЭтоЦентр  Тогда
			//Результат = ОтправитьТоварЛокация(XDTO.Item,Строка.physical_loc,Строка1.status,Строка1.loc_type,Прокси);
			RibMessages = УпаковатьВСообщение(ТекущаяДата(),НоменклатураСсылка.Код,Package,"ItemLocDesc","ItemLoc","ItemLocMod",КодЛокации);
			Результат = ОтправитьСообщение(RibMessages,Прокси);
		КонецЕсли;	
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemLocDel(Package)
	//Попытка
	//	XDTO = ПолучитьОбъектXDTO(Package);
	//	Результат = Истина;
	//	НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.Item);
	//	Если НоменклатураСсылка = Неопределено Тогда
	//		ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.Item));
	//	КонецЕсли;
	//	Для Каждого Строка Из XDTO.ItemLocPhysRef Цикл
	//		СтруктурнаяЕдиницаСсылка = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.physical_loc);
	//		Если СтруктурнаяЕдиницаСсылка.Пустая() Тогда
	//			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена СЕ с кодом ""%1"".'"),"%1",Строка.physical_loc));
	//		КонецЕсли;
	//		Набор = РегистрыСведений.СтатусыНоменклатуры.СоздатьНаборЗаписей();
	//		Набор.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	//		Набор.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиницаСсылка);
	//		Набор.Прочитать();
	//		Набор.Очистить();
	//		Набор.Записать();
	//	КонецЦикла;	
	//	Результат = Истина;
	//Исключение
	//	Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
	//	Результат = Ложь;
	//КонецПопытки;
	//Возврат Результат; 
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.Item);
		Если НоменклатураСсылка = Неопределено Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.Item));
		КонецЕсли;
		//Если ПараметрыСеанса.ЭтоЦентр Тогда
		//	ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
		
		//	Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
		//	URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		//	ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		//	ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		//	Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		//	Прокси.Пользователь = ВебСервис.Имя;
		//	Прокси.Пароль = ВебСервис.Пароль;
		//КонецЕсли;
		//КодЛокации = "";
		Результат = Истина;
		Статус = Перечисления.СтатусыТоваров.Удаленный;
		Для Каждого Строка Из XDTO.ItemLocPhysRef Цикл
			СтруктурнаяЕдиницаСсылка = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.physical_loc);
			Для Каждого Строка1 Из Строка.ItemLocVirtRef Цикл
				Если НЕ ПараметрыСеанса.ЭтоЦентр И НЕ СтруктурныеЕдиницы.КодПринадлежитТекущейГруппеСЕ(Число(Строка.physical_loc)) Тогда
					Продолжить;
				КонецЕсли;	
				Запись = РегистрыСведений.СтатусыНоменклатуры.СоздатьМенеджерЗаписи();
				Запись.Номенклатура = НоменклатураСсылка;
				Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиницаСсылка;
				Запись.Статус = Статус;
				Запись.Записать();
			КонецЦикла;	
			//Если СтруктурнаяЕдиницаСсылка.РежимРаботы <> Перечисления.РежимРаботыСЕ.НеРаботает Тогда
			//	КодЛокации = КодЛокации+","+Формат(Строка.physical_loc,"ЧГ=");
			//КонецЕсли;	
		КонецЦикла;	
		//Отправка товара в магазин
		//Если ПараметрыСеанса.ЭтоЦентр И КодЛокации <> "" Тогда
		//	RibMessages = УпаковатьВСообщение(ТекущаяДата(),НоменклатураСсылка.Код,Package,"ItemLocRef","ItemLoc","ItemLocDel",КодЛокации);
		//	Результат = ОтправитьСообщение(RibMessages,Прокси);
		//КонецЕсли;	
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ItemLocReplMod(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(XDTO.Item);
		Если НоменклатураСсылка = Неопределено Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.Item));
		КонецЕсли;
		//Если ПараметрыСеанса.ЭтоЦентр Тогда
		//	ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
		
		//	Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
		//	URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		//	ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		//	ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		//	Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		//	Прокси.Пользователь = ВебСервис.Имя;
		//	Прокси.Пароль = ВебСервис.Пароль;
		//КонецЕсли;	
		Результат = Истина;
		Для Каждого Строка Из XDTO.ItemLocPhys Цикл
			Для Каждого Строка1 Из Строка.ItemLocVirtRepl Цикл
				Запись = РегистрыСведений.МетодыПополнения.СоздатьМенеджерЗаписи();
				Запись.Период = ПолучитьДатуXDTO(Строка1.next_delivery_date);
				Если НЕ ЗначениеЗаполнено(Запись.Период) Тогда
					Запись.Период = Дата('2000.01.01');
				КонецЕсли;	
				Запись.Номенклатура = НоменклатураСсылка;
				СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.physical_loc);
				Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				Если Строка1.repl_method <> Неопределено Тогда
					Запись.МетодПополнения = Перечисления.МетодыПополнения[Строка1.repl_method];
				КонецЕсли;
				Запись.ОсновнойПоставщик = Справочники.Контрагенты.НайтиПоКоду(Строка1.primary_repl_supplier);
				Запись.Записать();
				//Отправка данных в магазин
				//Если ПараметрыСеанса.ЭтоЦентр И СтруктурнаяЕдиница.РежимРаботы <> Перечисления.РежимРаботыСЕ.НеРаботает Тогда
				//	Результат = ОтравитьМетодыПополнения(Запись.Период,XDTO.Item,Строка.physical_loc,Строка1.repl_method,Строка1.primary_repl_supplier,Строка1.loc_type,Прокси);
				//КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;		
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ОтправитьНоменклатуру(НоменклатураСсылка,КодЛокации,Прокси)
	ItemDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemDesc").КорневыеСвойства.Получить("ItemDesc").Тип;
	ПакетItemDesc = ФабрикаXDTO.Создать(ItemDesc);
	ItemHdrDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemHdrDesc").КорневыеСвойства.Получить("ItemHdrDesc").Тип;
	ПакетItemHdrDesc = ФабрикаXDTO.Создать(ItemHdrDesc);
	Родитель = НоменклатураСсылка;
	Пока Родитель.Группа <> 1 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;	
	subclass = Родитель;
	ПакетItemHdrDesc.subclass = СокрЛП(subclass.Код);
	ПакетItemHdrDesc.sub_name = СокрЛП(subclass.Наименование);
	class = subclass.Родитель;
	ПакетItemHdrDesc.class = СокрЛП(class.Код);
	ПакетItemHdrDesc.class_name = СокрЛП(class.Наименование);
	dept = class.Родитель.Код;
	ПакетItemHdrDesc.dept = Сред(dept,Найти(dept,":")+1);
	ПакетItemHdrDesc.dept_name = СокрЛП(class.Родитель.Наименование);
	Если НоменклатураСсылка.Родитель.Группа <> 1 Тогда
		ПакетItemHdrDesc.item_parent = НоменклатураСсылка.Родитель.Код;
	КонецЕсли;
	
	ПакетItemHdrDesc.item = НоменклатураСсылка.Код;
	ПакетItemHdrDesc.diff_1_type = СокрЛП(НоменклатураСсылка.Характеристика1.Код);
	ПакетItemHdrDesc.diff_1 = СокрЛП(НоменклатураСсылка.ЗначениеХарактеристики1.Код);
	ПакетItemHdrDesc.diff_2_type = СокрЛП(НоменклатураСсылка.Характеристика2.Код);
	ПакетItemHdrDesc.diff_2 = СокрЛП(НоменклатураСсылка.ЗначениеХарактеристики2.Код);
	ПакетItemHdrDesc.diff_3_type = СокрЛП(НоменклатураСсылка.Характеристика3.Код);
	ПакетItemHdrDesc.diff_3 = СокрЛП(НоменклатураСсылка.ЗначениеХарактеристики3.Код);
	ПакетItemHdrDesc.diff_4_type = СокрЛП(НоменклатураСсылка.Характеристика4.Код);
	ПакетItemHdrDesc.diff_4 = СокрЛП(НоменклатураСсылка.ЗначениеХарактеристики4.Код);
	//{БредовЮГ 2015-04-23 Наряд 000148853 от 23.04.2015 14:22:14
	//ПакетItemHdrDesc.short_desc = СокрЛП(НоменклатураСсылка.Наименование);
	//ПакетItemHdrDesc.item_desc = СокрЛП(НоменклатураСсылка.ПолноеНаименование);
	ПакетItemHdrDesc.short_desc = СокрЛП(НоменклатураСсылка.ПолноеНаименование);
	ПакетItemHdrDesc.item_desc = СокрЛП(НоменклатураСсылка.Наименование);
	//БредовЮГ 2015-04-23 Наряд 000148853 от 23.04.2015 14:22:14}
	
	ПакетItemHdrDesc.primary_ref_item_ind = ?(НоменклатураСсылка.ФлагОсновногоШК,"Y","N");
	
	ПакетItemHdrDesc.item_number_type = НоменклатураСсылка.ТипКода.Код;
	Если ЗначениеЗаполнено(НоменклатураСсылка.ФорматPLU) Тогда
		ПакетItemHdrDesc.format_id = СокрЛП(НоменклатураСсылка.ФорматPLU);
	КонецЕсли;	
	ПакетItemHdrDesc.prefix = ?(ПустаяСтрока(НоменклатураСсылка.ПрефиксPLU), 0, Число(НоменклатураСсылка.ПрефиксPLU));
	//ПакетItemHdrDesc.retail_label_value = ?(НоменклатураСсылка.ЭтикеткиПоставщика.Код = "",0,НоменклатураСсылка.ЭтикеткиПоставщика.Код);
	ПакетItemHdrDesc.handling_temp = СокрЛП(НоменклатураСсылка.ТемператураХранения.Код);
	ПакетItemHdrDesc.handling_sensitivity = СокрЛП(НоменклатураСсылка.ПараметрыПрочности.Код);
	ПакетItemHdrDesc.waste_pct = НоменклатураСсылка.НормаУбыли;
	ПакетItemHdrDesc.simple_pack_ind = ?(НоменклатураСсылка.ПростойНабор,"Y","N");
	ПакетItemHdrDesc.comments = НоменклатураСсылка.Комментарии;
	ПакетItemHdrDesc.item_level = НоменклатураСсылка.Уровень()-4;
	ПакетItemHdrDesc.tran_level = ?(НоменклатураСсылка.Транзакционный,НоменклатураСсылка.Уровень()-4,0);
	
	ПакетItemHdrDesc.standard_uom = СокрЛП(НоменклатураСсылка.БазоваяЕдиницаИзмерения.Наименование);
	ПакетItemHdrDesc.catch_weight_ind = ?(НоменклатураСсылка.Взвешиваемый,"Y","N");
	ПакетItemHdrDesc.sellable_ind = ?(НоменклатураСсылка.Продаваемый,"Y","N");
	ПакетItemHdrDesc.orderable_ind = ?(НоменклатураСсылка.Заказываемый,"Y","N");
	ПакетItemHdrDesc.inventory_ind = ?(НоменклатураСсылка.Учитываемый,"Y","N");
	
	
	Если НоменклатураСсылка.ВидТовара = Перечисления.ВидыТоваров.НаборПоставщика Тогда
		ПакетItemHdrDesc.pack_ind = "Y";
		ПакетItemHdrDesc.pack_type = "V";
	ИначеЕсли НоменклатураСсылка.ВидТовара = Перечисления.ВидыТоваров.Набор Тогда
		ПакетItemHdrDesc.pack_ind = "Y";
	КонецЕсли;	
	ПакетItemHdrDesc.order_as_type = ?(НоменклатураСсылка.УчетПоСоставу,"E","");
	ПакетItemDesc.ItemHdrDesc = ПакетItemHdrDesc;
	
	
	ItemSupCtyDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemSupCtyDesc").КорневыеСвойства.Получить("ItemSupCtyDesc").Тип;
	ItemSupDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemSupDesc").КорневыеСвойства.Получить("ItemSupDesc").Тип;
	Набор = РегистрыСведений.НоменклатураКонтрагента.СоздатьНаборЗаписей();
	Набор.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	Набор.Прочитать();
	Для Каждого Запись Из Набор Цикл
		ПакетItemSupCtyDesc = ФабрикаXDTO.Создать(ItemSupCtyDesc);
		ПакетItemSupCtyDesc.Item = НоменклатураСсылка.Код;
		ПакетItemSupCtyDesc.supplier = Запись.Контрагент.Код;
		ПакетItemSupCtyDesc.primary_supp_ind = ?(Запись.ОсновнойПоставщик,"Y","N");
		ПакетItemSupCtyDesc.primary_country_ind = "Y";
		ПакетItemSupCtyDesc.unit_cost = Запись.Цена;
		ПакетItemSupCtyDesc.lead_time = Запись.СрокПоставки;
		ПакетItemSupCtyDesc.supp_pack_size = Запись.КоэффициентЯщика;
		ПакетItemSupCtyDesc.inner_pack_size = Запись.КоэффициентУпаковки;
		ПакетItemSupCtyDesc.round_lvl = Запись.ВариантОкругления;
		ПакетItemSupCtyDesc.min_order_qty = Запись.МинимальныйЗаказ;
		ПакетItemSupCtyDesc.max_order_qty = Запись.МаксимальныйЗаказ;
		ПакетItemSupCtyDesc.default_uop = СокрЛП(Запись.ЕдиницаЗаказа.Наименование);
		ПакетItemSupCtyDesc.ti = Запись.КоэффициентПалетыСлой;
		ПакетItemSupCtyDesc.hi = Запись.КоэффициентПалетыВысота;
		ПакетItemSupCtyDesc.tolerance_type = ?(Запись.ТипОтклонения = Перечисления.ТипыОтклонений.Единица,"A","P");
		ПакетItemSupCtyDesc.max_tolerance = Запись.ОтклонениеВесаПлюс;
		ПакетItemSupCtyDesc.min_tolerance = Запись.ОтклонениеВесаМинус;
		ПакетItemSupCtyDesc.origin_country_id = СокрЛП(Запись.Страна.Код);
		ПакетItemDesc.ItemSupCtyDesc.Добавить(ПакетItemSupCtyDesc);
		
		ПакетItemSupDesc = ФабрикаXDTO.Создать(ItemSupDesc);
		ПакетItemSupDesc.Item = НоменклатураСсылка.Код;
		ПакетItemSupDesc.supplier = Запись.Контрагент.Код;
		ПакетItemSupDesc.primary_supp_ind = ?(Запись.ОсновнойПоставщик,"Y","N");
		ПакетItemSupDesc.vpn = Запись.Артикул;
		ПакетItemSupDesc.inner_name = Запись.Упаковка;
		ПакетItemSupDesc.case_name = Запись.Ящик;
		ПакетItemSupDesc.pallet_name = Запись.Палета;
		ПакетItemDesc.ItemSupDesc.Добавить(ПакетItemSupDesc);
	КонецЦикла;
	
	ItemUDALOVDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemUDALOVDesc").КорневыеСвойства.Получить("ItemUDALOVDesc").Тип;
	ItemUDAFFDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemUDAFFDesc").КорневыеСвойства.Получить("ItemUDAFFDesc").Тип;
	ItemUDADateDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemUDADateDesc").КорневыеСвойства.Получить("ItemUDADateDesc").Тип;
	
	Для Каждого Строка Из НоменклатураСсылка.ДополнительныеРеквизиты Цикл
		Если ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
			ПакетItemUDALOVDesc = ФабрикаXDTO.Создать(ItemUDALOVDesc);
			ПакетItemUDALOVDesc.Item = НоменклатураСсылка.Код;
			ПакетItemUDALOVDesc.uda_id = Строка.Свойство.Код;
			ПакетItemUDALOVDesc.uda_value = Строка.Значение.Код;
			ПакетItemDesc.ItemUDALOVDesc.Добавить(ПакетItemUDALOVDesc);
			//popn+
		ИначеЕсли ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.КлассификаторАлкогольнойПродукции") Тогда
			ПакетItemUDALOVDesc = ФабрикаXDTO.Создать(ItemUDALOVDesc);
			ПакетItemUDALOVDesc.Item = НоменклатураСсылка.Код;
			ПакетItemUDALOVDesc.uda_id = Строка.Свойство.Код;
			ПакетItemUDALOVDesc.uda_value = Строка.Значение.Код;
			ПакетItemDesc.ItemUDALOVDesc.Добавить(ПакетItemUDALOVDesc);
		ИначеЕсли ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПакетItemUDALOVDesc = ФабрикаXDTO.Создать(ItemUDALOVDesc);
			ПакетItemUDALOVDesc.Item = НоменклатураСсылка.Код;
			ПакетItemUDALOVDesc.uda_id = Строка.Свойство.Код;
			ПакетItemUDALOVDesc.uda_value = Строка.Значение.Код;
			ПакетItemDesc.ItemUDALOVDesc.Добавить(ПакетItemUDALOVDesc);
			//popn-
		ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Дата") Тогда	
			ПакетItemUDADateDesc = ФабрикаXDTO.Создать(ItemUDADateDesc);
			ПакетItemUDADateDesc.Item = НоменклатураСсылка.Код;
			ПакетItemUDADateDesc.uda_id = Строка.Свойство.Код;
			ПакетItemUDADateDesc.uda_date = RibData(Строка.Значение);
			ПакетItemDesc.ItemUDADateDesc.Добавить(ПакетItemUDADateDesc);
		Иначе
			ПакетItemUDAFFDesc = ФабрикаXDTO.Создать(ItemUDAFFDesc);
			ПакетItemUDAFFDesc.Item = НоменклатураСсылка.Код;
			ПакетItemUDAFFDesc.uda_id = Строка.Свойство.Код;
			ПакетItemUDAFFDesc.uda_text = Строка.Значение;
			ПакетItemDesc.ItemUDAFFDesc.Добавить(ПакетItemUDAFFDesc);
		КонецЕсли;	
	КонецЦикла;
	
	ItemBOMDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemBOMDesc").КорневыеСвойства.Получить("ItemBOMDesc").Тип;
	
	Для Каждого Строка Из НоменклатураСсылка.СоставНабора Цикл
		ПакетItemBOMDesc = ФабрикаXDTO.Создать(ItemBOMDesc);
		ПакетItemBOMDesc.Item = Строка.Компонент.Код;
		ПакетItemBOMDesc.pack_no = НоменклатураСсылка.Код;
		ПакетItemBOMDesc.pack_qty = Строка.Количество;
		ПакетItemDesc.ItemBOMDesc.Добавить(ПакетItemBOMDesc);
	КонецЦикла;
	
	ItemImageDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemImageDesc").КорневыеСвойства.Получить("ItemImageDesc").Тип;
	
	Для Каждого Строка Из НоменклатураСсылка.Изображения Цикл
		ПакетItemImageDesc = ФабрикаXDTO.Создать(ItemImageDesc);
		ПакетItemImageDesc.Item = НоменклатураСсылка.Код;
		ПакетItemImageDesc.image_addr = Строка.Путь;
		ПакетItemImageDesc.image_name = Строка.Файл;
		ПакетItemDesc.ItemImageDesc.Добавить(ПакетItemImageDesc);
	КонецЦикла;
	
	
	ItemTcktDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemTcktDesc").КорневыеСвойства.Получить("ItemTcktDesc").Тип;
	Набор = РегистрыСведений.ЦенникиНоменклатуры.СоздатьНаборЗаписей();
	Набор.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	Набор.Прочитать();
	Для Каждого Запись Из Набор Цикл
		ПакетItemTcktDesc = ФабрикаXDTO.Создать(ItemTcktDesc);
		ПакетItemTcktDesc.Item = НоменклатураСсылка.Код;
		ПакетItemTcktDesc.ticket_type_id = Запись.ШаблонЦенника;
		ПакетItemDesc.ItemTcktDesc.Добавить(ПакетItemTcktDesc);
	КонецЦикла;
	
	ISCDimDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ISCDimDesc").КорневыеСвойства.Получить("ISCDimDesc").Тип;
	Набор = РегистрыСведений.МассогабаритныеХарактеристики.СоздатьНаборЗаписей();
	Набор.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	Набор.Прочитать();
	Для Каждого Запись Из Набор Цикл
		ПакетISCDimDesc = ФабрикаXDTO.Создать(ISCDimDesc);
		ПакетISCDimDesc.Item = Запись.Номенклатура.Код;
		ПакетISCDimDesc.supplier = Запись.Контрагент.Код;
		ПакетISCDimDesc.origin_country = ПолучитьСтрануТовараИКонтрагента(Запись.Номенклатура,Запись.Контрагент);
		ПакетISCDimDesc.dim_object = Запись.ЕдиницаИзмерения.Наименование;
		ПакетISCDimDesc.object_desc = Запись.ЕдиницаИзмерения.ПолноеНаименование;
		ПакетISCDimDesc.width = Запись.Ширина;
		ПакетISCDimDesc.length = Запись.Длина;
		ПакетISCDimDesc.height = Запись.Высота;
		ПакетISCDimDesc.weight = Запись.Брутто;
		ПакетISCDimDesc.net_weight = Запись.Нетто;
		ПакетISCDimDesc.weight_uom = Запись.ЕдиницаВеса.Наименование;
		ПакетISCDimDesc.lwh_uom = Запись.ЕдиницаГабаритов.Наименование;
		ПакетItemDesc.ISCDimDesc.Добавить(ПакетISCDimDesc);
	КонецЦикла;
	
	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),НоменклатураСсылка.Код,ПакетItemDesc,"ItemDesc","Items","ItemCre",КодЛокации);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Возврат Результат;
КонецФункции	

Функция ОтправитьТоварЛокация(КодНоменклатуры,КодЛокации,Статус,ТипЛокации,Прокси)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemLocDesc").КорневыеСвойства;
	ItemLocDesc = КорневыеСвойства.Получить("ItemLocDesc").Тип;
	ПакетItemLocDesc = ФабрикаXDTO.Создать(ItemLocDesc);
	ПакетItemLocDesc.Item = КодНоменклатуры;
	
	ItemLocPhys = КорневыеСвойства.Получить("ItemLocPhys").Тип;
	ПакетItemLocPhys = ФабрикаXDTO.Создать(ItemLocPhys);
	ПакетItemLocPhys.physical_loc = КодЛокации;
	ItemLocVirt = КорневыеСвойства.Получить("ItemLocVirt").Тип;
	ПакетItemLocVirt = ФабрикаXDTO.Создать(ItemLocVirt);
	ПакетItemLocVirt.status = Статус;
	ПакетItemLocVirt.loc = КодЛокации;
	ПакетItemLocVirt.loc_type = ТипЛокации;
	ПакетItemLocPhys.ItemLocVirt.Добавить(ПакетItemLocVirt);
	
	
	ПакетItemLocDesc.ItemLocPhys.Добавить(ПакетItemLocPhys);
	
	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),КодНоменклатуры,ПакетItemLocDesc,"ItemLocDesc","ItemLoc","ItemLocCre",КодЛокации);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Возврат Результат;
КонецФункции

Функция ОтправитьСтавкуНДС(КодНоменклатуры,КодЛокации,Ставка,Прокси)
	ItemVATDesc = ФабрикаXDTO.Тип("http://www.oracle.com/retail/integration/payload/ItemVATDesc", "ItemVATDesc");
	Vat_item_type = ФабрикаXDTO.Тип("http://www.oracle.com/retail/integration/payload/ItemVATDesc", "vat_item_type");
	ПакетItemVATDesc = ФабрикаXDTO.Создать(ItemVATDesc);
	ПакетVat_item_type = ФабрикаXDTO.Создать(Vat_item_type);
	ПакетVat_item_type.item = КодНоменклатуры;
	ПакетVat_item_type.vatRate = Ставка;
	ПакетItemVATDesc.vat_item.Добавить(ПакетVat_item_type);
	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),КодНоменклатуры,ПакетItemVATDesc,"ItemVATDesc","VAT","ItemVATUpdate",КодЛокации);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Возврат Результат;
КонецФункции

Функция ОтравитьМетодыПополнения(Период,КодНоменклатуры,КодЛокации,Метод,ОсновнойПоставщик,ТипЛокации,Прокси)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemLocDesc").КорневыеСвойства;
	ItemLocDesc = КорневыеСвойства.Получить("ItemLocDesc").Тип;
	ПакетItemLocDesc = ФабрикаXDTO.Создать(ItemLocDesc);
	ПакетItemLocDesc.Item = КодНоменклатуры;
	
	ItemLocPhys = КорневыеСвойства.Получить("ItemLocPhys").Тип;
	ПакетItemLocPhys = ФабрикаXDTO.Создать(ItemLocPhys);
	ПакетItemLocPhys.physical_loc = КодЛокации;
	ItemLocVirtRepl = КорневыеСвойства.Получить("ItemLocVirtRepl").Тип;
	ПакетItemLocVirtRepl = ФабрикаXDTO.Создать(ItemLocVirtRepl);
	ПакетItemLocVirtRepl.loc = КодЛокации;
	ПакетItemLocVirtRepl.loc_type = ТипЛокации;
	Если НЕ ПустаяСтрока(ОсновнойПоставщик) Тогда
		ПакетItemLocVirtRepl.primary_repl_supplier = ОсновнойПоставщик;
	КонецЕсли;	
	Если Метод <> Неопределено Тогда
		ПакетItemLocVirtRepl.repl_method = Метод;
	КонецЕсли;	
	ПакетItemLocVirtRepl.next_delivery_date = RibData(Период);
	ПакетItemLocPhys.ItemLocVirtRepl.Добавить(ПакетItemLocVirtRepl);
	
	
	ПакетItemLocDesc.ItemLocPhys.Добавить(ПакетItemLocPhys);
	
	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),КодНоменклатуры,ПакетItemLocDesc,"ItemLocDesc","ItemLoc","ItemLocReplMod",КодЛокации);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Возврат Результат;
КонецФункции

Функция ОтправитьИнгредиентыДляОбновления(КодНоменклатуры,КодЛокации,Прокси)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнгредиентыСостав.Ссылка КАК Ингредиент
	|ИЗ
	|	РегистрСведений.ПродукцияПоЦехам КАК ПродукцияПоЦехам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТехнологическаяКарта.Состав КАК ТехнологическаяКартаСостав
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ингредиенты.Состав КАК ИнгредиентыСостав
	|			ПО ТехнологическаяКартаСостав.Номенклатура = ИнгредиентыСостав.Ссылка.Ссылка
	|		ПО ПродукцияПоЦехам.ТехнологическаяКарта = ТехнологическаяКартаСостав.Ссылка
	|ГДЕ
	|	ИнгредиентыСостав.Номенклатура.Код = &Номенклатура
	|	И ПродукцияПоЦехам.Склад.Владелец.Код = &СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнгредиентыСостав.Ссылка";
	
	Запрос.УстановитьПараметр("Номенклатура", КодНоменклатуры);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", КодЛокации);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ТипДокумента = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogObject_Ингредиенты");
	ТипСостав = ФабрикаXDTO.Тип("http://apm-consult.ru/RS", "CatalogTabularSectionRow_Ингредиенты_Состав");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Пакет = ФабрикаXDTO.Создать(ТипДокумента);
		Пакет.IsFolder = ВыборкаДетальныеЗаписи.Ингредиент.ЭтоГруппа;
		Пакет.Ref = Строка(ВыборкаДетальныеЗаписи.Ингредиент.Ссылка.УникальныйИдентификатор());
		Пакет.DeletionMark = ВыборкаДетальныеЗаписи.Ингредиент.ПометкаУдаления;
		Пакет.Parent = Формат(ВыборкаДетальныеЗаписи.Ингредиент.Родитель.Код,"ЧГ=");
		Пакет.Code = Формат(ВыборкаДетальныеЗаписи.Ингредиент.Код,"ЧГ=");
		Пакет.Description = ВыборкаДетальныеЗаписи.Ингредиент.Наименование;
		Если НЕ ВыборкаДетальныеЗаписи.Ингредиент.ЭтоГруппа Тогда
			Пакет.ТипТовара = Метаданные.Перечисления.ТипыТоваров.EnumValues.Get(Перечисления.ТипыТоваров.Индекс(ВыборкаДетальныеЗаписи.Ингредиент.ТипТовара)).Имя;
			Пакет.БазоваяЕдиницаИзмерения = ВыборкаДетальныеЗаписи.Ингредиент.БазоваяЕдиницаИзмерения.Код;
			Пакет.БазоваяЕдиницаИзмеренияНаименование = ВыборкаДетальныеЗаписи.Ингредиент.БазоваяЕдиницаИзмерения.Наименование;
			Пакет.ДатаСоздания = ВыборкаДетальныеЗаписи.Ингредиент.ДатаСоздания;
			Для Каждого Строка Из ВыборкаДетальныеЗаписи.Ингредиент.Состав Цикл
				ПакетСостав = ФабрикаXDTO.Создать(ТипСостав);
				ПакетСостав.Номенклатура     					= СокрЛП(Строка.Номенклатура.Код);
				ПакетСостав.КоэффициентЗамены       			= Строка.КоэффициентЗамены;
				Пакет.Состав.Добавить(ПакетСостав);
			КонецЦикла;
		КонецЕсли;	
		RibMessages = УпаковатьВСообщение(ТекущаяДата(),Формат(ВыборкаДетальныеЗаписи.Ингредиент.Код,"ЧГ="),Пакет,"CatalogObject_Ингредиенты","Ingredients","IngredientsCre",КодЛокации);
		Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ОтправитьЕдиницуИзмерения(Объект,КодЛокации,Прокси)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ItemUOMDesc").КорневыеСвойства;
	ItemUOMDesc = КорневыеСвойства.Получить("ItemUOMDesc").Тип;
	ПакетItemUOMDesc = ФабрикаXDTO.Создать(ItemUOMDesc);
	
	ПакетItemUOMDesc.item = СокрЛП(Объект.Владелец.Код);
	ПакетItemUOMDesc.item_type = СокрЛП(Объект.Владелец.Метаданные().Имя);
	ПакетItemUOMDesc.uom = СокрЛП(Объект.Наименование);
	ПакетItemUOMDesc.uom_type = СокрЛП(Объект.ЕдиницаПоКлассификатору.Наименование);
	ПакетItemUOMDesc.uom_conv_factor = Объект.Коэффициент;
	ПакетItemUOMDesc.supplier = Объект.Контрагент.Код;
	//ПакетItemUOMDesc.width = Объект.Длина;
	//ПакетItemUOMDesc.height = Объект.Высота;
	//ПакетItemUOMDesc.weight = Объект.Глубина;
	
	RibMessages = УпаковатьВСообщение(ТекущаяДата(),СокрЛП(Объект.Наименование)+СокрЛП(Объект.Владелец.Код),ПакетItemUOMDesc,"ItemUOMDesc","ItemUOM","ItemUOMcre",КодЛокации);
	Результат = ОтправитьСообщение(RibMessages,Прокси);
	Возврат Результат;
КонецФункции



//////////////////////////////RTVRequest/////////////////////////////////

Функция RtvReqCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		ДатаДокумента = ПолучитьДатуXDTO(XDTO.creation_date);
		РаспоряжениеНаОтгрузкуСсылка = Документы.РаспоряжениеНаОтгрузку.НайтиПоНомеру(XDTO.rtv_order_no,ДатаДокумента);
		Если РаспоряжениеНаОтгрузкуСсылка.Пустая() Тогда
			ДокРаспоряжениеНаОтгрузку = Документы.РаспоряжениеНаОтгрузку.СоздатьДокумент();
			ДокРаспоряжениеНаОтгрузку.Номер = XDTO.rtv_order_no;
			ДокРаспоряжениеНаОтгрузку.Дата = ДатаДокумента;
			ДокРаспоряжениеНаОтгрузку.Автор = ПараметрыСеанса.ТекущийПользователь;
		Иначе
			ДокРаспоряжениеНаОтгрузку = РаспоряжениеНаОтгрузкуСсылка.ПолучитьОбъект();
			ДокРаспоряжениеНаОтгрузку.Состав.Очистить();
		КонецЕсли;
		ДокРаспоряжениеНаОтгрузку.Получатель = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
		ДокРаспоряжениеНаОтгрузку.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.loc);
		ДокРаспоряжениеНаОтгрузку.АдресДоставки = XDTO.ship_to_addr_line1;
		ДокРаспоряжениеНаОтгрузку.Комментарий = XDTO.comment_desc;
		
		Для Каждого Строка Из XDTO.RTVReqDtl Цикл
			НоваяСтрока = ДокРаспоряжениеНаОтгрузку.Состав.Добавить();
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.Item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Item));
			КонецЕсли;
			НоваяСтрока.Номенклатура = НоменклатураСсылка;
			НоваяСтрока.Количество = Строка.rtv_qty;
			НоваяСтрока.Цена = Строка.unit_cost;
			НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура, Истина);
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			НоваяСтрока.СуммаНДС = ОбработкаТабличныхЧастейСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,Истина,ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		КонецЦикла;	
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
		Izh_ОбменДанными.НеРегистрироватьВRIB(ДокРаспоряжениеНаОтгрузку, Ложь);
		// СИТЕК БрыляковЕЮ 2015-05-06 }
		ДокРаспоряжениеНаОтгрузку.Записать(РежимЗаписиДокумента.Проведение);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция RtvReqMod(Package)
	Возврат RtvReqCre(Package);
КонецФункции

Функция RtvReqDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		РаспоряжениеНаОтгрузкуСсылка = Документы.РаспоряжениеНаОтгрузку.НайтиПоНомеру(XDTO.rtv_order_no);
		Если НЕ РаспоряжениеНаОтгрузкуСсылка.Пустая() Тогда
			РаспоряжениеНаОтгрузкуСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция RtvReqDtlCre(Package)
	Возврат RtvReqCre(Package);
КонецФункции

Функция RtvReqDtlMod(Package)
	Возврат RtvReqCre(Package);
КонецФункции

Функция RtvReqDtlDel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		РаспоряжениеНаОтгрузкуСсылка = Документы.РаспоряжениеНаОтгрузку.НайтиПоНомеру(XDTO.rtv_order_no);
		Если НЕ РаспоряжениеНаОтгрузкуСсылка.Пустая() Тогда
			ДокРаспоряжениеНаОтгрузку = РаспоряжениеНаОтгрузкуСсылка.ПолучитьОбъект();
			Для Каждого Строка Из XDTO.RTVReqDtlRef Цикл
				Номенклатура = ПолучитьНоменклатуруПоКоду(Строка.item);
				НайденнаяСтрока = ДокРаспоряжениеНаОтгрузку.Состав.Найти(Номенклатура,"Номенклатура");
				Если НайденнаяСтрока <> Неопределено Тогда
					ДокРаспоряжениеНаОтгрузку.Состав.Удалить(НайденнаяСтрока);
				КонецЕсли;	
			КонецЦикла;
			//{ СИТЕК БрыляковЕЮ 2015-05-06  
			Izh_ОбменДанными.НеРегистрироватьВRIB(ДокРаспоряжениеНаОтгрузку, Ложь);
			// СИТЕК БрыляковЕЮ 2015-05-06 }
			ДокРаспоряжениеНаОтгрузку.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////StockOrders/////////////////////////////////

Функция socre(Package,Location)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		//Если XDTO.order_type = "AUTOMATIC" Тогда
		//	Возврат Истина;
		//КонецЕсли;	
		Если XDTO.SODtlDesc.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;	
		ДатаДокумента = ПолучитьДатуXDTO(XDTO.pick_not_before_date);
		
		Если Число(XDTO.dc_dest_id) = Число(Location) Тогда
			РасходнаяНакладнаяСсылка = Документы.РасходнаяНакладная.НайтиПоРеквизиту("НомерRMS",Число(XDTO.distro_nbr));
			Если РасходнаяНакладнаяСсылка.Пустая() Тогда
				РаспоряжениеНаОтгрузкуСсылка = Документы.РаспоряжениеНаОтгрузку.НайтиПоНомеру(XDTO.distro_nbr);
				Если РаспоряжениеНаОтгрузкуСсылка.Пустая() Тогда
					ДокРаспоряжениеНаОтгрузку = Документы.РаспоряжениеНаОтгрузку.СоздатьДокумент();
					ДокРаспоряжениеНаОтгрузку.Номер = XDTO.distro_nbr;
					ДокРаспоряжениеНаОтгрузку.Дата = ДатаДокумента;
					ДокРаспоряжениеНаОтгрузку.Автор = ПараметрыСеанса.ТекущийПользователь;
				Иначе
					ДокРаспоряжениеНаОтгрузку = РаспоряжениеНаОтгрузкуСсылка.ПолучитьОбъект();
					ДокРаспоряжениеНаОтгрузку.Состав.Очистить();
				КонецЕсли;
				
				ДокРаспоряжениеНаОтгрузку.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.dc_dest_id);
				ДокРаспоряжениеНаОтгрузку.АдресДоставки = XDTO.ship_address_desc;//bill_address_desc; //ship_address_desc
				ДокРаспоряжениеНаОтгрузку.Комментарий = XDTO.message;
				ДокРаспоряжениеНаОтгрузку.ДатаОтгрузки = ПолучитьДатуXDTO(XDTO.ship_date);
				ДокРаспоряжениеНаОтгрузку.НомерЗаказа = XDTO.po_nbr;
				
				Для Каждого Строка Из XDTO.SODtlDesc Цикл
					Получатель = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.dest_id);
					НоваяСтрока = ДокРаспоряжениеНаОтгрузку.Состав.Добавить();
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item_id);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item_id));
					КонецЕсли;
					НоваяСтрока.Номенклатура = НоменклатураСсылка;
					НоваяСтрока.Количество = Строка.requested_unit_qty;
					НоваяСтрока.Цена = Строка.retail_price;
					//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.selling_uom,,,НоваяСтрока.Номенклатура);
					НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура, Истина);
					НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
					НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
					НоваяСтрока.СуммаНДС = ОбработкаТабличныхЧастейСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,Истина,ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				КонецЦикла;
				ДокРаспоряжениеНаОтгрузку.Получатель = Получатель;
				//{ СИТЕК БрыляковЕЮ 2015-05-06  
				Izh_ОбменДанными.НеРегистрироватьВRIB(ДокРаспоряжениеНаОтгрузку, Ложь);
				// СИТЕК БрыляковЕЮ 2015-05-06 }
				ДокРаспоряжениеНаОтгрузку.Записать(РежимЗаписиДокумента.Проведение);
				ДокОснование = ДокРаспоряжениеНаОтгрузку.Ссылка;
				НомерRMS = ДокОснование.Номер;
			Иначе	
				Получатель = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.SODtlDesc[0].dest_id);
				ДокОснование = РасходнаяНакладнаяСсылка;
				НомерRMS = ДокОснование.НомерRMS;
			КонецЕсли;	
			Результат = Истина;
			Если Получатель.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает Тогда
				Если ДокОснование.Состав.Итог("Количество")=0 Тогда
					Возврат Истина;
				КонецЕсли;	
				ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
				
				Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
				URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
				ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
				ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
				Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
				Прокси.Пользователь = ВебСервис.Имя;
				Прокси.Пароль = ВебСервис.Пароль;
				
				//Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РаспоряжениеНаОтгрузку") Тогда
				//	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ASNOutDesc").КорневыеСвойства;
				//	ASNOutDesc = КорневыеСвойства.Получить("ASNOutDesc").Тип;
				//	ASNOutCtn = КорневыеСвойства.Получить("ASNOutCtn").Тип;
				//	ASNOutDistro = КорневыеСвойства.Получить("ASNOutDistro").Тип;
				//	ASNOutItem = КорневыеСвойства.Получить("ASNOutItem").Тип;
				//	ПакетASNOutDesc = ФабрикаXDTO.Создать(ASNOutDesc);
				//	ПакетASNOutDesc.to_location = Формат(Получатель.Код,"ЧГ=");
				//	ПакетASNOutDesc.from_location = Формат(ДокОснование.СтруктурнаяЕдиница.Код,"ЧГ=");
				//	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
				//	//	ПакетASNOutDesc.asn_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
				//	//Иначе
				//		//ПакетASNOutDesc.asn_nbr = СокрЛП(Объект.Номер)+Сред(Год(Объект.Дата),3);
				//	//КонецЕсли;	
				//	ПакетASNOutDesc.asn_nbr = НомерRMS;
				//	ПакетASNOutDesc.asn_type = "C";
				//	ПакетASNOutDesc.container_qty = "1";
				//	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
				//	//	ПакетASNOutDesc.bol_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
				//	//Иначе
				//		ПакетASNOutDesc.bol_nbr = НомерRMS;
				//	//КонецЕсли;	
				//	ПакетASNOutDesc.shipment_date = RibData(ДокОснование.Дата);
				//	ПакетASNOutDesc.ship_address1 = "";
				//	ПакетASNOutDesc.ship_address2 = "";
				//	ПакетASNOutDesc.ship_address3 = "";
				//	ПакетASNOutDesc.ship_address4 = "";
				//	ПакетASNOutDesc.ship_address5 = "";
				//	ПакетASNOutDesc.ship_city = "";
				//	ПакетASNOutDesc.ship_state = "";
				//	ПакетASNOutDesc.ship_zip = "";
				//	ПакетASNOutDesc.ship_country_id = СокрЛП(ДокОснование.СтруктурнаяЕдиница.Страна.Код);
				//	ПакетASNOutDesc.trailer_nbr = "";
				//	ПакетASNOutDesc.seal_nbr = "";
				//	ПакетASNOutDesc.carrier_code = "";
				//	ПакетASNOutDesc.transshipment_nbr = "";
				
				//	
				//	ПакетASNOutDistro = ФабрикаXDTO.Создать(ASNOutDistro);
				//	//Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
				//	//	ПакетASNOutDistro.distro_nbr = ПреобразоватьНомер(Объект.ДокОснование.Номер);
				//	//Иначе
				//		ПакетASNOutDistro.distro_nbr = НомерRMS;
				//	//КонецЕсли;	
				//	ПакетASNOutDistro.distro_doc_type = "T";
				//	ПакетASNOutDistro.customer_order_nbr = ""; 
				//	ПакетASNOutDistro.consumer_direct = ""; 
				
				//	ПакетASNOutCtn = ФабрикаXDTO.Создать(ASNOutCtn);
				//	ПакетASNOutCtn.final_location = ПолучитьКодЛокации(Получатель);
				//	ПакетASNOutCtn.container_id = "0";
				//	ПакетASNOutCtn.container_weight = "0";
				//	ПакетASNOutCtn.container_length = "0";
				//	ПакетASNOutCtn.container_width = "0";
				//	ПакетASNOutCtn.container_height = "0";
				//	ПакетASNOutCtn.container_cube = "0";
				//	ПакетASNOutCtn.expedite_flag = ""; 
				//	ПакетASNOutCtn.rma_nbr = ""; 
				//	ПакетASNOutCtn.tracking_nbr = ""; 
				//	ПакетASNOutCtn.freight_charge = "0";
				//	ПакетASNOutCtn.master_container_id = ""; 
				//	
				//	from_disposition = "ATS";
				//	
				//	Для Каждого Строка Из ДокОснование.Состав Цикл
				//		Если Строка.Количество = 0 Тогда
				//			Продолжить;
				//		КонецЕсли;	
				//		ПакетASNOutItem = ФабрикаXDTO.Создать(ASNOutItem);
				//		ПакетASNOutItem.item_id = СокрЛП(Строка.Номенклатура.Код);
				//		ПакетASNOutItem.unit_qty = Строка.Количество*Строка.Коэффициент;
				//		ПакетASNOutItem.final_location = ПолучитьКодЛокации(Получатель);
				//		ПакетASNOutItem.priority_level = "0";
				//		ПакетASNOutItem.order_line_nbr = "0";
				//		ПакетASNOutItem.container_qty = "1";
				//		ПакетASNOutItem.lot_nbr = ""; 
				//		ПакетASNOutItem.from_disposition = from_disposition; 
				//		ПакетASNOutItem.to_disposition = ""; 
				//		ПакетASNOutItem.voucher_number = ""; 
				//		
				//		ПакетASNOutCtn.ASNOutItem.Добавить(ПакетASNOutItem);
				//	КонецЦикла;
				//	ПакетASNOutDistro.ASNOutCtn.Добавить(ПакетASNOutCtn);
				//	ПакетASNOutDesc.ASNOutDistro.Добавить(ПакетASNOutDistro);
				
				//	RibMessages = УпаковатьВСообщение(ДокОснование.Дата,ДокОснование.Номер,ПакетASNOutDesc,"ASNOutDesc","ASNOut","ASNOutCre");
				//	Результат = ОтправитьСообщение(RibMessages,Прокси);
				//КонецЕсли;	
				
				
				КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ReceiptDesc").КорневыеСвойства;
				ReceiptDesc = КорневыеСвойства.Получить("ReceiptDesc").Тип;
				Receipt = КорневыеСвойства.Получить("Receipt").Тип;
				ReceiptDtl = КорневыеСвойства.Получить("ReceiptDtl").Тип;
				ПакетReceiptDesc = ФабрикаXDTO.Создать(ReceiptDesc);
				ПакетReceiptDesc.appt_nbr = "0";
				ПакетReceipt = ФабрикаXDTO.Создать(Receipt);
				
				ПакетReceipt.dc_dest_id = Формат(Получатель.Код,"ЧГ=");
				ПакетReceipt.po_nbr = НомерRMS;
				ПакетReceipt.document_type = "T";
				
				//ПакетReceipt.asn_nbr = СокрЛП(ДокОснование.Номер);
				ПакетReceipt.asn_nbr = НомерRMS;
				
				ПакетReceipt.receipt_type = "SK";
				//Если Объект.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
				//	to_disposition = "UTS";
				//Иначе
				to_disposition = "ATS";
				//КонецЕсли;	
				
				Для Каждого Строка Из ДокОснование.Состав Цикл
					Если Строка.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;	
					ПакетReceiptDtl = ФабрикаXDTO.Создать(ReceiptDtl);
					ПакетReceiptDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
					ПакетReceiptDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
					ПакетReceiptDtl.receipt_xactn_type = "R";
					ПакетReceiptDtl.receipt_date = RibData(ДокОснование.Дата);
					ПакетReceiptDtl.receipt_nbr = ДокОснование.Номер;
					//ПакетReceiptDtl.dest_id = "";
					ПакетReceiptDtl.container_id = "0";
					//ПакетReceiptDtl.distro_nbr = "0";
					//ПакетReceiptDtl.distro_doc_type = "";
					ПакетReceiptDtl.to_disposition = to_disposition;
					//ПакетReceiptDtl.from_disposition = ""; 
					//ПакетReceiptDtl.to_wip = ""; 
					//ПакетReceiptDtl.from_wip = ""; 
					//ПакетReceiptDtl.to_trouble = ""; 
					//ПакетReceiptDtl.from_trouble = ""; 
					ПакетReceiptDtl.user_id = Сред(ДокОснование.Автор.Наименование,0,15);
					
					//Если ЗначениеЗаполнено(Строка.Вес) И ЗначениеЗаполнено(Строка.ЕдиницаВеса) Тогда
					//	ПакетReceiptDtl.weight = Строка.Вес;
					//	ПакетReceiptDtl.weight_uom = Строка.ЕдиницаВеса.Наименование;
					//КонецЕсли;	
					ПакетReceipt.ReceiptDtl.Добавить(ПакетReceiptDtl);
				КонецЦикла;
				
				ПакетReceiptDesc.Receipt.Добавить(ПакетReceipt);
				
				RibMessages = УпаковатьВСообщение(ДокОснование.Дата,ДокОснование.Номер,ПакетReceiptDesc,"ReceiptDesc","Receiving","ReceiptCre");
				Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
				
				Если Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.dc_dest_id).ОптоваяЛокация <> Получатель Тогда
					КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/InvAdjustDesc").КорневыеСвойства;
					InvAdjustDesc = КорневыеСвойства.Получить("InvAdjustDesc").Тип;
					InvAdjustDtl = КорневыеСвойства.Получить("InvAdjustDtl").Тип;
					ПакетInvAdjustDesc = ФабрикаXDTO.Создать(InvAdjustDesc);
					
					ПакетInvAdjustDesc.dc_dest_id = Формат(Получатель.Код,"ЧГ=");
					from_disposition = "ATS";
					КодКоррекцииТрансфер = ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодКоррекцииТрансфер);
					Для Каждого Строка Из ДокОснование.Состав Цикл
						Если Строка.Количество = 0 Тогда
							Продолжить;
						КонецЕсли;	
						ПакетInvAdjustDtl = ФабрикаXDTO.Создать(InvAdjustDtl);
						ПакетInvAdjustDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
						ПакетInvAdjustDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
						ПакетInvAdjustDtl.from_disposition = from_disposition;
						ПакетInvAdjustDtl.user_id = Сред(ДокОснование.Автор.Наименование,0,15);
						ПакетInvAdjustDtl.create_date = RibData(ДокОснование.Дата);
						ПакетInvAdjustDtl.adjustment_reason_code = КодКоррекцииТрансфер;
						ПакетInvAdjustDesc.InvAdjustDtl.Добавить(ПакетInvAdjustDtl);
					КонецЦикла;
					
					RibMessages = УпаковатьВСообщение(ДокОснование.Дата,"PN"+ДокОснование.Номер,ПакетInvAdjustDesc,"InvAdjustDesc","InvAdjust","InvAdjustCre");
					Результат = Результат И ОтправитьСообщение(RibMessages,Прокси);
				КонецЕсли;	
			КонецЕсли;	
		Иначе
			Если Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Location).ОптоваяЛокация = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.dc_dest_id) Тогда
				ПриходнаяНакладнаяСсылка = Документы.ВозвратнаяНакладнаяОтПокупателя.НайтиПоРеквизиту("НомерRMS",Число(XDTO.distro_nbr));
			Иначе	
				ПриходнаяНакладнаяСсылка = Документы.ПриходнаяНакладная.НайтиПоРеквизиту("НомерRMS",Число(XDTO.distro_nbr));
			КонецЕсли;	
			Если ПриходнаяНакладнаяСсылка.Пустая() Тогда
				ПланируемаяПоставкаСсылка = Документы.ПланируемаяПоставка.НайтиПоРеквизиту("НомерRMS","SO"+XDTO.distro_nbr);
				Если ПланируемаяПоставкаСсылка.Пустая() Тогда
					ДокПланируемаяПоставка = Документы.ПланируемаяПоставка.СоздатьДокумент();
					//ДокПланируемаяПоставка.Номер = XDTO.distro_nbr;
					ДокПланируемаяПоставка.Дата = ДатаДокумента;
					ДокПланируемаяПоставка.Автор = ПараметрыСеанса.ТекущийПользователь;
					ДокПланируемаяПоставка.НомерRMS = "SO"+XDTO.distro_nbr;
				Иначе
					ДокПланируемаяПоставка= ПланируемаяПоставкаСсылка.ПолучитьОбъект();
					ДокПланируемаяПоставка.Состав.Очистить();
				КонецЕсли;
				ДокПланируемаяПоставка.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Location);
				ДокПланируемаяПоставка.Фирма = ДокПланируемаяПоставка.СтруктурнаяЕдиница.Организация;
				ДокПланируемаяПоставка.Автор = ПараметрыСеанса.ТекущийПользователь;
				ДокПланируемаяПоставка.Контрагент = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.dc_dest_id);
				//ДокПланируемаяПоставка.РекламнаяАкция = Документы.НазначениеРекламнойАкции.НайтиПоНомеру(XDTO.promotion,ДатаДокумента);
				//ДокПланируемаяПоставка.КонтрольКачества = ?(XDTO.qc_ind = "Y",Истина,Ложь);
				//ДокПланируемаяПоставка.ДатаПоставкиОт = ПолучитьДатуXDTO(XDTO.pick_not_before_date);
				//ДокПланируемаяПоставка.ДатаПоставкиДо = ПолучитьДатуXDTO(XDTO.pick_not_after_date);
				//ДокПланируемаяПоставка.Комментарий = XDTO.comment_desc;
				//ДокПланируемаяПоставка.Валюта = Справочники.Валюты.НайтиПоНаименованию(XDTO.currency_code);
				//ДокПланируемаяПоставка.Курс = XDTO.exchange_rate;
				Если XDTO.Свойства().Получить("currency_code") = Неопределено Тогда
					ДокПланируемаяПоставка.Валюта = ДокПланируемаяПоставка.СтруктурнаяЕдиница.Валюта;
				Иначе	
					ДокПланируемаяПоставка.Валюта = Справочники.Валюты.НайтиПоНаименованию(XDTO.currency_code);
				КонецЕсли;	
				СтруктураКурса = РаботаСКурсамиВалют.ЗаполнитьДанныеКурсаДляВалюты(ДокПланируемаяПоставка.Валюта);
				ДокПланируемаяПоставка.Курс = СтруктураКурса.Курс;
				ДокПланируемаяПоставка.Кратность = СтруктураКурса.Кратность;
				
				Если XDTO.Свойства().Получить("ship_address_desc") <> Неопределено Тогда
					Если ЗначениеЗаполнено(XDTO.ship_address_desc) Тогда
						ДокПланируемаяПоставка.Поставщик = Справочники.Контрагенты.НайтиПоКоду(XDTO.ship_address_desc);
					КонецЕсли;	
				КонецЕсли;	
				
				КодТекущейСЕ = ДокПланируемаяПоставка.СтруктурнаяЕдиница.Код;
				Для Каждого Строка Из XDTO.SODtlDesc Цикл
					Если Число(Строка.dest_id) <> КодТекущейСЕ Тогда
						Продолжить;
					КонецЕсли;	
					НоваяСтрока = ДокПланируемаяПоставка.Состав.Добавить();
					НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item_id);
					Если НоменклатураСсылка = Неопределено Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item_id));
					КонецЕсли;
					НоваяСтрока.Номенклатура = НоменклатураСсылка;
					//НоваяСтрока.Артикул = АвтоЗаказ.ПолучитьАртикул(ДокПланируемаяПоставка.Контрагент,НоваяСтрока.Номенклатура);
					НоваяСтрока.Количество = Строка.requested_unit_qty;
					НоваяСтрока.Цена = Строка.retail_price;
					//НоваяСтрока.Коэффициент = Строка.supp_pack_size;
					НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура, Истина);
					НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
					НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
					НоваяСтрока.СуммаНДС = ОбработкаТабличныхЧастейСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,Истина,ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				КонецЦикла;
				Если ДокПланируемаяПоставка.Состав.Количество() > 0 Тогда
					//{ СИТЕК БрыляковЕЮ 2015-05-06  
					Izh_ОбменДанными.НеРегистрироватьВRIB(ДокПланируемаяПоставка, Ложь);
					// СИТЕК БрыляковЕЮ 2015-05-06 }
					ДокПланируемаяПоставка.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			Иначе
				Отправитель = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.dc_dest_id);
				Если Отправитель.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает Тогда
					Если ПриходнаяНакладнаяСсылка.Состав.Итог("Количество")=0 Тогда
						Возврат Истина;
					КонецЕсли;	
					ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRMS);
					
					Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
					URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
					ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
					ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
					Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
					Прокси.Пользователь = ВебСервис.Имя;
					Прокси.Пароль = ВебСервис.Пароль;
					КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/ReceiptDesc").КорневыеСвойства;
					ReceiptDesc = КорневыеСвойства.Получить("ReceiptDesc").Тип;
					Receipt = КорневыеСвойства.Получить("Receipt").Тип;
					ReceiptDtl = КорневыеСвойства.Получить("ReceiptDtl").Тип;
					ПакетReceiptDesc = ФабрикаXDTO.Создать(ReceiptDesc);
					ПакетReceiptDesc.appt_nbr = "0";
					ПакетReceipt = ФабрикаXDTO.Создать(Receipt);
					
					ПакетReceipt.dc_dest_id = Формат(ПриходнаяНакладнаяСсылка.СтруктурнаяЕдиница.Код,"ЧГ=");
					ПакетReceipt.po_nbr = ПриходнаяНакладнаяСсылка.НомерRMS;
					ПакетReceipt.document_type = "T";
					//ПакетReceipt.asn_nbr = СокрЛП(ПриходнаяНакладнаяСсылка.Номер);
					ПакетReceipt.asn_nbr = ПриходнаяНакладнаяСсылка.НомерRMS;
					ПакетReceipt.receipt_type = "SK";
					Если ПриходнаяНакладнаяСсылка.Склад.ВидЗапасов = Перечисления.ВидыЗапасов.НеПродаваемые Тогда
						to_disposition = "UTS";
					Иначе
						to_disposition = "ATS";
					КонецЕсли;	
					
					Для Каждого Строка Из ПриходнаяНакладнаяСсылка.Состав Цикл
						Если Строка.Количество = 0 Тогда
							Продолжить;
						КонецЕсли;	
						ПакетReceiptDtl = ФабрикаXDTO.Создать(ReceiptDtl);
						ПакетReceiptDtl.item_id = СокрЛП(Строка.Номенклатура.Код);
						ПакетReceiptDtl.unit_qty = Строка.Количество*Строка.Коэффициент;
						ПакетReceiptDtl.receipt_xactn_type = "R";
						ПакетReceiptDtl.receipt_date = RibData(ПриходнаяНакладнаяСсылка.Дата);
						ПакетReceiptDtl.receipt_nbr = ПриходнаяНакладнаяСсылка.Номер;
						//ПакетReceiptDtl.dest_id = "";
						ПакетReceiptDtl.container_id = "0";
						//ПакетReceiptDtl.distro_nbr = "0";
						//ПакетReceiptDtl.distro_doc_type = "";
						ПакетReceiptDtl.to_disposition = to_disposition;
						//ПакетReceiptDtl.from_disposition = ""; 
						//ПакетReceiptDtl.to_wip = ""; 
						//ПакетReceiptDtl.from_wip = ""; 
						//ПакетReceiptDtl.to_trouble = ""; 
						//ПакетReceiptDtl.from_trouble = ""; 
						ПакетReceiptDtl.user_id = Сред(ПриходнаяНакладнаяСсылка.Автор.Наименование,0,15);
						
						Если ТипЗнч(ПриходнаяНакладнаяСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
							Если ЗначениеЗаполнено(Строка.Вес) И ЗначениеЗаполнено(Строка.ЕдиницаВеса) Тогда
								ПакетReceiptDtl.weight = Строка.Вес;
								ПакетReceiptDtl.weight_uom = Строка.ЕдиницаВеса.Наименование;
							КонецЕсли;	
						КонецЕсли;	
						ПакетReceipt.ReceiptDtl.Добавить(ПакетReceiptDtl);
					КонецЦикла;
					
					ПакетReceiptDesc.Receipt.Добавить(ПакетReceipt);
					
					RibMessages = УпаковатьВСообщение(ПриходнаяНакладнаяСсылка.Дата,ПриходнаяНакладнаяСсылка.Номер,ПакетReceiptDesc,"ReceiptDesc","Receiving","ReceiptCre");
					Результат = ОтправитьСообщение(RibMessages,Прокси);
				Иначе
					СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Location);
					Если СтруктурнаяЕдиница.РежимРаботы = Перечисления.РежимРаботыСЕ.Транслятор И НЕ ПриходнаяНакладнаяСсылка.Проведен Тогда
						Если Константы.ФлагЗапретаТовародвижения.Получить() Тогда
							ВызватьИсключение("Установлен запрет товародвижения!");
						КонецЕсли;	
						ПриходнаяНакладнаяОбъект = ПриходнаяНакладнаяСсылка.ПолучитьОбъект();
						//{ СИТЕК БрыляковЕЮ 2015-05-06  
						Izh_ОбменДанными.НеРегистрироватьВRIB(ПриходнаяНакладнаяОбъект, Ложь);
						// СИТЕК БрыляковЕЮ 2015-05-06 }
						ПриходнаяНакладнаяОбъект.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			Результат = Истина;
		КонецЕсли;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция sohdrmod(Package,Location)
	Возврат socre(Package,Location);
КонецФункции

Функция sohdrdel(Package,Location)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если Число(XDTO.dc_dest_id) = Число(Location) Тогда
			ДокСсылка = Документы.РаспоряжениеНаОтгрузку.НайтиПоНомеру(XDTO.distro_nbr);
		Иначе
			ДокСсылка = Документы.ПланируемаяПоставка.НайтиПоРеквизиту("НомерRMS","SO"+XDTO.distro_nbr);
		КонецЕсли;	
		Результат = Истина;
		Если НЕ ДокСсылка.Пустая() Тогда
			ДокСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция sodtlcre(Package,Location)
	Возврат socre(Package,Location);
КонецФункции

Функция sodtlmod(Package,Location)
	Возврат socre(Package,Location);
КонецФункции

Функция sodtldel(Package,Location)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если Число(XDTO.dc_dest_id) = Число(Location) Тогда
			ДокументСсылка = Документы.РаспоряжениеНаОтгрузку.НайтиПоНомеру(XDTO.distro_nbr);
		Иначе
			ДокументСсылка = Документы.ПланируемаяПоставка.НайтиПоРеквизиту("НомерRMS","SO"+XDTO.distro_nbr);
		КонецЕсли;	
		Если НЕ ДокументСсылка.Пустая() Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			Для Каждого Строка Из XDTO.SODtlRef Цикл
				Номенклатура = ПолучитьНоменклатуруПоКоду(Строка.item_id);
				НайденнаяСтрока = ДокументОбъект.Состав.Найти(Номенклатура,"Номенклатура");
				Если НайденнаяСтрока <> Неопределено Тогда
					ДокументОбъект.Состав.Удалить(НайденнаяСтрока);
				КонецЕсли;	
			КонецЦикла;
			//{ СИТЕК БрыляковЕЮ 2015-05-06  
			Izh_ОбменДанными.НеРегистрироватьВRIB(ДокументОбъект, Ложь);
			// СИТЕК БрыляковЕЮ 2015-05-06 }
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////PurchaseOrder/////////////////////////////////

Функция POCre(Package,Location)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		ДатаДокумента = ПолучитьДатуXDTO(XDTO.not_before_date);
		ПланируемаяПоставкаСсылка = Документы.ПланируемаяПоставка.НайтиПоРеквизиту("НомерRMS","PO"+СокрЛП(Location)+"-"+XDTO.order_no);
		Если ПланируемаяПоставкаСсылка.Пустая() Тогда
			ДокПланируемаяПоставка = Документы.ПланируемаяПоставка.СоздатьДокумент();
			//ДокПланируемаяПоставка.Номер = XDTO.order_no;
			ДокПланируемаяПоставка.Дата = ДатаДокумента;
			ДокПланируемаяПоставка.Автор = ПараметрыСеанса.ТекущийПользователь;
			ДокПланируемаяПоставка.НомерRMS = "PO"+СокрЛП(Location)+"-"+XDTO.order_no;
		Иначе
			ДокПланируемаяПоставка= ПланируемаяПоставкаСсылка.ПолучитьОбъект();
		КонецЕсли;
		ДокПланируемаяПоставка.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Location);
		ДокПланируемаяПоставка.Фирма = ДокПланируемаяПоставка.СтруктурнаяЕдиница.Организация;
		ДокПланируемаяПоставка.Контрагент = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
		
		ДокПланируемаяПоставка.ПромоАкция = XDTO.promotion;
		ДокПланируемаяПоставка.КонтрольКачества = ?(XDTO.qc_ind = "Y",Истина,Ложь);
		ДокПланируемаяПоставка.ДатаПоставкиОт = ДатаДокумента;
		ДокПланируемаяПоставка.ДатаПоставкиДо = ПолучитьДатуXDTO(XDTO.not_after_date);
		ДокПланируемаяПоставка.Комментарий = XDTO.comment_desc;
		ДокПланируемаяПоставка.Валюта = Справочники.Валюты.НайтиПоНаименованию(XDTO.currency_code);
		//ДокПланируемаяПоставка.Курс = XDTO.exchange_rate;
		СтруктураКурса = РаботаСКурсамиВалют.ЗаполнитьДанныеКурсаДляВалюты(ДокПланируемаяПоставка.Валюта);
		ДокПланируемаяПоставка.Курс = СтруктураКурса.Курс;
		ДокПланируемаяПоставка.Кратность = СтруктураКурса.Кратность;
		Если XDTO.status = "W" Тогда
			ДокПланируемаяПоставка.Статус = Перечисления.СтатусыПланируемойПоставки.Черновик;
		ИначеЕсли XDTO.status = "A" Тогда	
			ДокПланируемаяПоставка.Статус = Перечисления.СтатусыПланируемойПоставки.Утвержден;
		ИначеЕсли XDTO.status = "C" Тогда	
			ДокПланируемаяПоставка.Статус = Перечисления.СтатусыПланируемойПоставки.Закрыт;
		Иначе
			ДокПланируемаяПоставка.Статус = Перечисления.СтатусыПланируемойПоставки.НаРассмотрении;
		КонецЕсли;	
		БезНДС = Справочники.СтавкиНДС.БезНДС;
		КодТекущейСЕ = ДокПланируемаяПоставка.СтруктурнаяЕдиница.Код;
		Если ДокПланируемаяПоставка.Статус <> Перечисления.СтатусыПланируемойПоставки.Закрыт Тогда
			ДокПланируемаяПоставка.Состав.Очистить();
			Для Каждого Строка Из XDTO.PODtl Цикл
				Если Строка.physical_location <> КодТекущейСЕ Тогда
					Продолжить;
				КонецЕсли;	
				НоваяСтрока = ДокПланируемаяПоставка.Состав.Добавить();
				НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
				Если НоменклатураСсылка = Неопределено Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
				КонецЕсли;
				НоваяСтрока.Номенклатура = НоменклатураСсылка;
				НоваяСтрока.Артикул = АвтоЗаказ.ПолучитьАртикул(ДокПланируемаяПоставка.Контрагент,НоваяСтрока.Номенклатура);
				НоваяСтрока.Количество = Строка.physical_qty_ordered;
				НоваяСтрока.Цена = Строка.unit_cost;
				//НоваяСтрока.Коэффициент = Строка.supp_pack_size;
				НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура, Истина);
				НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
				Если ДокПланируемаяПоставка.Контрагент.НеПлательщикНДС Тогда
					НоваяСтрока.СтавкаНДС = БезНДС;
				Иначе	
					НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
				КонецЕсли;	
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				НоваяСтрока.СуммаНДС = ОбработкаТабличныхЧастейСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,Истина,ОбщегоНазначенияСервер.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			КонецЦикла;	
		КонецЕсли;	
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
		Izh_ОбменДанными.НеРегистрироватьВRIB(ДокПланируемаяПоставка, Ложь);
		// СИТЕК БрыляковЕЮ 2015-05-06 }
		ДокПланируемаяПоставка.Записать(РежимЗаписиДокумента.Проведение);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеЗаказа.Ссылка
		|ИЗ
		|	Документ.ЗакрытиеЗаказа КАК ЗакрытиеЗаказа
		|ГДЕ
		|	ЗакрытиеЗаказа.ДокОснование = &ДокОснование
		|	И ЗакрытиеЗаказа.Проведен";
		
		Запрос.УстановитьПараметр("ДокОснование", ПланируемаяПоставкаСсылка);
		
		Результат = Запрос.Выполнить();
		
		Если XDTO.status = "C" Тогда
			Если Результат.Пустой() Тогда
				ЗакрытиеЗаказа = Документы.ЗакрытиеЗаказа.СоздатьДокумент();
				ЗакрытиеЗаказа.ИнициализироватьДокумент();
				ЗакрытиеЗаказа.Дата = ТекущаяДата();
				ЗакрытиеЗаказа.ДокОснование = ДокПланируемаяПоставка.Ссылка;
				//{ СИТЕК БрыляковЕЮ 2015-05-06  
				Izh_ОбменДанными.НеРегистрироватьВRIB(ЗакрытиеЗаказа, Ложь);
				// СИТЕК БрыляковЕЮ 2015-05-06 }
				
				ЗакрытиеЗаказа.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Иначе
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗакрытиеЗаказа = Выборка.Ссылка.ПолучитьОбъект();
				//{ СИТЕК БрыляковЕЮ 2015-05-06  
				Izh_ОбменДанными.НеРегистрироватьВRIB(ЗакрытиеЗаказа, Ложь);
				// СИТЕК БрыляковЕЮ 2015-05-06 }
				ЗакрытиеЗаказа.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;	
		КонецЕсли;	
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция POHdrMod(Package,Location)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		ДатаДокумента = ПолучитьДатуXDTO(XDTO.not_before_date);
		ПланируемаяПоставкаСсылка = Документы.ПланируемаяПоставка.НайтиПоРеквизиту("НомерRMS","PO"+СокрЛП(Location)+"-"+XDTO.order_no);
		Если ПланируемаяПоставкаСсылка.Пустая() Тогда
			ДокПланируемаяПоставка = Документы.ПланируемаяПоставка.СоздатьДокумент();
			//ДокПланируемаяПоставка.Номер = XDTO.order_no;
			ДокПланируемаяПоставка.Дата = ДатаДокумента;
			ДокПланируемаяПоставка.Автор = ПараметрыСеанса.ТекущийПользователь;
			ДокПланируемаяПоставка.НомерRMS = "PO"+СокрЛП(Location)+"-"+XDTO.order_no;
		Иначе
			ДокПланируемаяПоставка= ПланируемаяПоставкаСсылка.ПолучитьОбъект();
		КонецЕсли;
		ДокПланируемаяПоставка.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Location);
		ДокПланируемаяПоставка.Контрагент = Справочники.Контрагенты.НайтиПоКоду(XDTO.supplier);
		
		ДокПланируемаяПоставка.ПромоАкция = XDTO.promotion;
		ДокПланируемаяПоставка.КонтрольКачества = ?(XDTO.qc_ind = "Y",Истина,Ложь);
		ДокПланируемаяПоставка.ДатаПоставкиОт = ДатаДокумента;
		ДокПланируемаяПоставка.ДатаПоставкиДо = ПолучитьДатуXDTO(XDTO.not_after_date);
		ДокПланируемаяПоставка.Комментарий = XDTO.comment_desc;
		ДокПланируемаяПоставка.Валюта = Справочники.Валюты.НайтиПоНаименованию(XDTO.currency_code);
		//ДокПланируемаяПоставка.Курс = XDTO.exchange_rate;
		СтруктураКурса = РаботаСКурсамиВалют.ЗаполнитьДанныеКурсаДляВалюты(ДокПланируемаяПоставка.Валюта);
		ДокПланируемаяПоставка.Курс = СтруктураКурса.Курс;
		ДокПланируемаяПоставка.Кратность = СтруктураКурса.Кратность;
		Если XDTO.status = "W" Тогда
			ДокПланируемаяПоставка.Статус = Перечисления.СтатусыПланируемойПоставки.Черновик;
		ИначеЕсли XDTO.status = "A" Тогда	
			ДокПланируемаяПоставка.Статус = Перечисления.СтатусыПланируемойПоставки.Утвержден;
		ИначеЕсли XDTO.status = "C" Тогда	
			ДокПланируемаяПоставка.Статус = Перечисления.СтатусыПланируемойПоставки.Закрыт;
		Иначе
			ДокПланируемаяПоставка.Статус = Перечисления.СтатусыПланируемойПоставки.НаРассмотрении;
		КонецЕсли;	
		
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
		Izh_ОбменДанными.НеРегистрироватьВRIB(ДокПланируемаяПоставка, Ложь);
		// СИТЕК БрыляковЕЮ 2015-05-06 }
		
		ДокПланируемаяПоставка.Записать(РежимЗаписиДокумента.Проведение);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеЗаказа.Ссылка
		|ИЗ
		|	Документ.ЗакрытиеЗаказа КАК ЗакрытиеЗаказа
		|ГДЕ
		|	ЗакрытиеЗаказа.ДокОснование = &ДокОснование
		|	И ЗакрытиеЗаказа.Проведен";
		
		Запрос.УстановитьПараметр("ДокОснование", ПланируемаяПоставкаСсылка);
		
		Результат = Запрос.Выполнить();
		
		Если XDTO.status = "C" Тогда
			Если Результат.Пустой() Тогда
				ЗакрытиеЗаказа = Документы.ЗакрытиеЗаказа.СоздатьДокумент();
				ЗакрытиеЗаказа.ИнициализироватьДокумент();
				ЗакрытиеЗаказа.Дата = ТекущаяДата();
				ЗакрытиеЗаказа.ДокОснование = ДокПланируемаяПоставка.Ссылка;
				//{ СИТЕК БрыляковЕЮ 2015-05-06  
				Izh_ОбменДанными.НеРегистрироватьВRIB(ЗакрытиеЗаказа, Ложь);
				// СИТЕК БрыляковЕЮ 2015-05-06 }
				ЗакрытиеЗаказа.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ЗакрытиеЗаказа = Выборка.Ссылка.ПолучитьОбъект();
					//{ СИТЕК БрыляковЕЮ 2015-05-06  
					Izh_ОбменДанными.НеРегистрироватьВRIB(ЗакрытиеЗаказа, Ложь);
					// СИТЕК БрыляковЕЮ 2015-05-06 }
					
					ЗакрытиеЗаказа.Записать(РежимЗаписиДокумента.Проведение);
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция PODel(Package,Location)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		ПланируемаяПоставкаСсылка = Документы.ПланируемаяПоставка.НайтиПоРеквизиту("НомерRMS","PO"+СокрЛП(Location)+"-"+XDTO.order_no);
		Если НЕ ПланируемаяПоставкаСсылка.Пустая() Тогда
			ПланируемаяПоставкаСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция PODtlCre(Package,Location)
	Возврат POCre(Package,Location);
КонецФункции

Функция PODtlMod(Package,Location)
	Возврат POCre(Package,Location);
КонецФункции

Функция PODtlDel(Package,Location)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		ДокументСсылка = Документы.ПланируемаяПоставка.НайтиПоРеквизиту("НомерRMS","PO"+СокрЛП(Location)+"-"+XDTO.order_no);
		Если НЕ ДокументСсылка.Пустая() Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			Для Каждого Строка Из XDTO.PODtlRef Цикл
				Номенклатура = ПолучитьНоменклатуруПоКоду(Строка.item);
				НайденнаяСтрока = ДокументОбъект.Состав.Найти(Номенклатура,"Номенклатура");
				Если НайденнаяСтрока <> Неопределено Тогда
					ДокументОбъект.Состав.Удалить(НайденнаяСтрока);
				КонецЕсли;	
			КонецЦикла;
			//{ СИТЕК БрыляковЕЮ 2015-05-06  
			Izh_ОбменДанными.НеРегистрироватьВRIB(ДокументОбъект, Ложь);
			// СИТЕК БрыляковЕЮ 2015-05-06 }
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////Ingredients/////////////////////////////////

Функция IngredientsCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Ссылка = Справочники.Ингредиенты.НайтиПоКоду(XDTO.Code);
		Если Ссылка.Пустая() Тогда
			Если XDTO.IsFolder Тогда
				Объект = Справочники.Ингредиенты.СоздатьГруппу();
			Иначе
				Объект = Справочники.Ингредиенты.СоздатьЭлемент();
			КонецЕсли;	
			//Ссылка = Справочники.Ингредиенты.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			//Объект.УстановитьСсылкуНового(Ссылка);
			Объект.Родитель = Справочники.Ингредиенты.НайтиПоКоду(XDTO.Parent);
			Объект.Код = XDTO.Code;
		Иначе	
			Объект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Если НЕ Объект.ЭтоГруппа Тогда
			Объект.ТипТовара = Перечисления.ТипыТоваров[XDTO.ТипТовара];
			Объект.БазоваяЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуКлассификатора(XDTO.БазоваяЕдиницаИзмеренияНаименование);
			Объект.ДатаСоздания = XDTO.ДатаСоздания;
			Если XDTO.Состав.Количество() > 0 Тогда
				Объект.Состав.Очистить();
			КонецЕсли;	
			Для Каждого Строка Из XDTO.Состав Цикл
				Номенклатура = ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					НоваяСтрока = Объект.Состав.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура;
					НоваяСтрока.КоэффициентЗамены = Строка.КоэффициентЗамены;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		Объект.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////Certificates/////////////////////////////////

Функция CertificatesCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Ссылка = Справочники.Сертификаты.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Справочники.Сертификаты.СоздатьЭлемент();
			Ссылка = Справочники.Сертификаты.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.ДатаС = XDTO.ДатаС;
		Объект.ДатаПо = XDTO.ДатаПо;
		Объект.Комментарий = XDTO.Комментарий;		
		Объект.Содержание = XDTO.Содержание;
		Объект.ОрганСертификации = Справочники.ОрганыСертификации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ОрганСертификации));
		Объект.Производитель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Производитель);
		Объект.Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(XDTO.Страна);
		Объект.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////CertificatesData/////////////////////////////////

Функция CertificatesDataCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			НаборЗаписей = РегистрыСведений.ДанныеСертификатов.СоздатьНаборЗаписей();
			Номенклатура = Строка.Номенклатура;
			Сертификат   = ПланыВидовХарактеристик.Сертификаты.НайтиПоКоду(Строка.Сертификат);
			НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
			НаборЗаписей.Отбор.Сертификат.Установить(Сертификат);
			Если ЗначениеЗаполнено(Строка.Значение) Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Номенклатура = Номенклатура;
				Запись.Сертификат = Сертификат;
				Запись.Значение   = Справочники.Сертификаты.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Значение));
			Иначе
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЦикла;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////MeasureUnit/////////////////////////////////

Функция MeasureUnitCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(XDTO.Code);
		Если Ссылка.Пустая() Тогда 
			Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			Объект.Код = XDTO.Code;
		Иначе	
			Объект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.ПолноеНаименование = XDTO.ПолноеНаименование;
		Объект.МладшаяЕдиница = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(XDTO.МладшаяЕдиница);
		Объект.Коэффициент = XDTO.Коэффициент;
		Объект.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////ProductionPlan/////////////////////////////////

Функция ProductionPlanCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Ссылка = Документы.ПланПроизводства.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ПланПроизводства.СоздатьДокумент();
			Ссылка = Документы.ПланПроизводства.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Дата = XDTO.Date; 
		Объект.Номер = XDTO.Number;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад,,,Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиницаСклада));
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура =  ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
			КонецЕсли;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения, НоваяСтрока.Номенклатура); //dps+ 15,10,05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Понедельник = Строка.Понедельник;
			НоваяСтрока.Вторник = Строка.Вторник;
			НоваяСтрока.Среда = Строка.Среда;
			НоваяСтрока.Четверг = Строка.Четверг;
			НоваяСтрока.Пятница = Строка.Пятница;
			НоваяСтрока.Суббота = Строка.Суббота;
			НоваяСтрока.Воскресенье = Строка.Воскресенье;
			НоваяСтрока.Ключ = Строка.Ключ;
			НоваяСтрока.Итого = Строка.Итого;
		КонецЦикла;
		
		Объект.Распределение.Очистить();
		Для Каждого Строка Из XDTO.Распределение Цикл
			НоваяСтрока = Объект.Распределение.Добавить();
			НоваяСтрока.Номенклатура =  ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
			КонецЕсли;
			НоваяСтрока.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.СтруктурнаяЕдиница);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения, НоваяСтрока.Номенклатура); //dps+ 15,10,05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Понедельник = Строка.Понедельник;
			НоваяСтрока.Вторник = Строка.Вторник;
			НоваяСтрока.Среда = Строка.Среда;
			НоваяСтрока.Четверг = Строка.Четверг;
			НоваяСтрока.Пятница = Строка.Пятница;
			НоваяСтрока.Суббота = Строка.Суббота;
			НоваяСтрока.Воскресенье = Строка.Воскресенье;
			НоваяСтрока.Ключ = Строка.Ключ;
			НоваяСтрока.Итого = Строка.Итого;
		КонецЦикла;
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
		Izh_ОбменДанными.НеРегистрироватьВRIB(Объект, Ложь);
		// СИТЕК БрыляковЕЮ 2015-05-06 }
		
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции


//////////////////////////////ProcessMap/////////////////////////////////

Функция ProcessMapCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Ссылка = Документы.ТехнологическаяКарта.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ТехнологическаяКарта.СоздатьДокумент();
			Ссылка = Документы.ТехнологическаяКарта.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Дата = XDTO.Date; 
		Объект.Номер = XDTO.Number;
		Объект.Продукция =  ПолучитьНоменклатуруПоКоду(XDTO.Продукция);
		Если НЕ ЗначениеЗаполнено(Объект.Продукция) Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.Продукция));
		КонецЕсли;
		
		Объект.КоличествоПорций = XDTO.КоличествоПорций;
		Объект.НомерПоСправочнику = XDTO.НомерПоСправочнику;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.ВидПроизводства = Перечисления.ВидыПроизводства[XDTO.ВидПроизводства];
		Объект.Описание = XDTO.Описание;
		Объект.МассаПорции = XDTO.МассаПорции;
		Объект.ВозможнаРазделка = XDTO.ВозможнаРазделка;
		Объект.Наименование = XDTO.Наименование;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура =  ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,Строка.НоменклатураТип);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
			КонецЕсли;
			НоваяСтрока.Код =  НоваяСтрока.Номенклатура.Код;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.КоличествоНетто = Строка.КоличествоНетто;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения, НоваяСтрока.Номенклатура); //dps+ 15,10,05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.КоэффициентРаспределенияЦены = Строка.КоэффициентРаспределенияЦены;
			НоваяСтрока.Белки = Строка.Белки;
			НоваяСтрока.Жиры = Строка.Жиры;
			НоваяСтрока.Углеводы = Строка.Углеводы;
			НоваяСтрока.Калорийность = Строка.Калорийность;
			//popn+
			НоваяСтрока.ПроцентСписания = Строка.ПроцентСписания;
			//popn-
		КонецЦикла;
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
		Izh_ОбменДанными.НеРегистрироватьВRIB(Объект, Ложь);
		// СИТЕК БрыляковЕЮ 2015-05-06 }
		
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		НаборЗаписей = РегистрыСведений.ПродукцияПоЦехам.СоздатьНаборЗаписей();
		Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад,,,Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиницаСклада));
		НаборЗаписей.Отбор.Склад.Установить(Склад);
		НаборЗаписей.Отбор.ТехнологическаяКарта.Установить(Объект.Ссылка);
		НаборЗаписей.Отбор.Продукция.Установить(Объект.Продукция);
		Запись = НаборЗаписей.Добавить();
		Запись.Склад = Склад;
		Запись.ТехнологическаяКарта = Объект.Ссылка;
		Запись.Продукция = Объект.Продукция;
		Запись.ФлагАктивности = XDTO.ФлагАктивности;
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		НаборЗаписей.ОбменДанными.Получатели.Очистить();
		НаборЗаписей.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции


//////////////////////////////CostCard/////////////////////////////////

Функция CostCardCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Ссылка = Документы.КалькуляционнаяКарта.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.КалькуляционнаяКарта.СоздатьДокумент();
			Ссылка = Документы.КалькуляционнаяКарта.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Дата = XDTO.Date; 
		Объект.Номер = XDTO.Number;
		Объект.Продукция =  ПолучитьНоменклатуруПоКоду(XDTO.Продукция);
		Если НЕ ЗначениеЗаполнено(Объект.Продукция) Тогда
			ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",XDTO.Продукция));
		КонецЕсли;
		
		Объект.КоличествоПорций = XDTO.КоличествоПорций;
		Объект.НомерПоСправочнику = XDTO.НомерПоСправочнику;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		//Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.ВидПроизводства = Перечисления.ВидыПроизводства[XDTO.ВидПроизводства];
		Объект.МассаПорции = XDTO.МассаПорции;
		Объект.ДокументОснование = Документы.ТехнологическаяКарта.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ДокументОснование));
		Объект.Фирма = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Фирма));
		Объект.СебестоимостьПродукции = XDTO.СебестоимостьПродукции;
		//popn+
		Объект.СебестоимостьНДСПродукции = XDTO.СебестоимостьНДСПродукции;
		//popn-
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура =  ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
			КонецЕсли;
			НоваяСтрока.Количество = Строка.Количество;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения, НоваяСтрока.Номенклатура); //dps+ 15,10,05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.КоэффициентРаспределенияЦены = Строка.КоэффициентРаспределенияЦены;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.Сумма = Строка.Сумма;
			//popn+
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			//popn-
			Если ЗначениеЗаполнено(Строка.Ингредиент) Тогда
				НоваяСтрока.Ингредиент =  ПолучитьНоменклатуруПоКоду(Строка.Ингредиент,"Ингредиенты");
			КонецЕсли;	
		КонецЦикла;
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Объект.ОбменДанными.Получатели.Очистить();
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
		Izh_ОбменДанными.НеРегистрироватьВRIB(Объект, Ложь);
		// СИТЕК БрыляковЕЮ 2015-05-06 }
		
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции


//////////////////////////////Movement/////////////////////////////////

Функция MovementCre(Package)
	Попытка
		ЭтоНовыйДокумент = ЛОЖЬ;
		XDTO = ПолучитьОбъектXDTO(Package);
		Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ПриходнаяНакладная.СоздатьДокумент();
			Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
			ЭтоНовыйДокумент = ИСТИНА;
		КонецЕсли;
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Если ЗначениеЗаполнено(XDTO.ГрузополучательТип) И ЗначениеЗаполнено(XDTO.Грузополучатель) Тогда
			Объект.Грузополучатель = Справочники[XDTO.ГрузополучательТип].НайтиПоКоду(XDTO.Грузополучатель);
		КонецЕсли;	
		Объект.Дата = XDTO.Date; 
		Объект.ДатаДокумента = XDTO.Date;
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.Контрагент);
		
		Попытка
			Объект.Контрагент = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Фирма));
		Исключение
			Объект.Контрагент = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		КонецПопытки;
		
		Если ЭтоНовыйДокумент Тогда
			Объект.Склад = Объект.СтруктурнаяЕдиница.СкладТорговогоЗала;
			
			//{++ ВетровИА 30.03.2015 Наряд №000145348}
			МассивНоменклатуры = Новый Массив;
			МассивНоменклатуры.Добавить(ПолучитьНоменклатуруПоКоду(XDTO.Материалы[0].Номенклатура));
			тзРезультат = РегистрыСведений.Перепродажа.ПравилаПерепродажи(МассивНоменклатуры, Объект.СтруктурнаяЕдиница, Объект.Контрагент, Объект.Дата);	
			
			Если тзРезультат.Количество() <> 0 Тогда
				Если Объект.Фирма = тзРезультат[0].ФирмаПолучатель Тогда
					Объект.ТипДоговора = Перечисления.ТипыДоговоров.КупляПродажа;
				Иначе	
					Объект.Фирма = тзРезультат[0].ФирмаПолучатель;
					Объект.ТипДоговора = тзРезультат[0].ТипДоговора;
				КонецЕсли;	
			Иначе	
				Объект.Фирма = Объект.СтруктурнаяЕдиница.Организация;
			КонецЕсли;
			
			//{-- ВетровИА 30.03.2015 Наряд №000145348}
		КонецЕсли;
		
		
		Объект.Грузоотправитель = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.ДокОснование = Документы.ЗапросНаПополнение.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ДокОснование));
		Объект.Курс = XDTO.КурсВалютыДоговора;
		Объект.Кратность = XDTO.Кратность;
		Объект.НомерДокумента = XDTO.Number;
		Объект.НомерRMS = XDTO.НомерRMS;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Материалы Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура =  ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
			КонецЕсли;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения, НоваяСтрока.Номенклатура); //dps+ 15,10,05
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.КоличествоПоДокументу = Строка.Количество;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Цена = Строка.Цена;
		КонецЦикла;
		
		Объект.ОстаткиНоменклатуры.Очистить();
		Для Каждого Строка Из XDTO.ОстаткиНоменклатурыМатериалы Цикл
			НоваяСтрока = Объект.ОстаткиНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура =  ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
			КонецЕсли;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Сумма = Строка.Себестоимость;
			НоваяСтрока.СуммаНДС = Строка.СебестоимостьНДС;
			НоваяСтрока.СуммаУпр = Строка.СебестоимостьУпр;
			НоваяСтрока.СуммаНДСУпр = Строка.СебестоимостьНДСУпр;
		КонецЦикла;
		
		Если ЭтоНовыйДокумент Тогда
			Объект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			//{ СИТЕК БрыляковЕЮ 2015-05-06  
			Izh_ОбменДанными.НеРегистрироватьВRIB(Объект, Ложь);
			// СИТЕК БрыляковЕЮ 2015-05-06 }
			Если Объект.Проведен Тогда
				Объект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
		
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////MovementAdj/////////////////////////////////

Функция MovementAdjCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Если XDTO.ТипКорректировки = "КорректировкаПоступления" Тогда
			Ссылка = Документы.КорректировкаПоступления.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект = Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда 
				Объект = Документы.КорректировкаПоступления.СоздатьДокумент();
				Ссылка = Документы.КорректировкаПоступления.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
				Объект.УстановитьСсылкуНового(Ссылка);
			КонецЕсли;
			Объект.Дата = XDTO.Date; 
			Объект.ДокументПоступления = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.ДокументРеализации));
			Объект.НомерДокумента = Объект.ДокументПоступления.НомерДокумента; 
			Объект.ДатаДокумента = Объект.ДокументПоступления.ДатаДокумента; 
			Объект.НомерСФ = Объект.ДокументПоступления.НомерСФ; 
			Объект.ДатаСФ = Объект.ДокументПоступления.ДатаСФ; 
			
			Объект.Контрагент = Объект.ДокументПоступления.Контрагент; 
			
			Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.Контрагент);
			Объект.Фирма = Объект.СтруктурнаяЕдиница.Организация;
			Объект.Комментарий = XDTO.Комментарий; 
			Объект.РежимКорректировки = Перечисления.РежимыКорректировок[XDTO.РежимКорректировки]; 
			Если Объект.РежимКорректировки = Перечисления.РежимыКорректировок.СогласованноеИзменение Тогда
				Объект.ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
			Иначе
				Объект.ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
			КонецЕсли;
			
			Объект.Состав.Очистить();
			Для Каждого Строка Из XDTO.Состав Цикл
				НоваяСтрока = Объект.Состав.Добавить();
				НоваяСтрока.Номенклатура =  ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
				КонецЕсли;
				//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,,,НоваяСтрока.Номенклатура);
				НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения, НоваяСтрока.Номенклатура); //dps+ 15,10,05
				НоваяСтрока.Коэффициент = Строка.Коэффициент;
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.КоличествоДоИзменения = Строка.КоличествоДоИзменения;
				НоваяСтрока.КоличествоДоКорректировки = Строка.КоличествоДоКорректировки;
				НоваяСтрока.Сумма = Строка.Сумма;
				НоваяСтрока.СуммаДоИзменения = Строка.СуммаДоИзменения;
				НоваяСтрока.СуммаДоКорректировки = Строка.СуммаДоКорректировки;
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.СтавкаНДС));
				НоваяСтрока.СтавкаНДСДоИзменения = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.СтавкаНДСДоИзменения));
				НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
				НоваяСтрока.СуммаНДСДоИзменения = Строка.СуммаНДСДоИзменения;
				НоваяСтрока.СуммаНДСДоКорректировки = Строка.СуммаНДСДоКорректировки;
				НоваяСтрока.Цена = Строка.Цена;
				НоваяСтрока.ЦенаДоИзменения = Строка.ЦенаДоИзменения;
				НоваяСтрока.ЦенаДоКорректировки = Строка.ЦенаДоКорректировки;
				НоваяСтрока.Вес = Строка.Вес;
				//НоваяСтрока.ЕдиницаВеса = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаВеса,,,НоваяСтрока.Номенклатура);
				НоваяСтрока.ЕдиницаВеса = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаВеса, НоваяСтрока.Номенклатура); //dps+ 15,10,05
				НоваяСтрока.ЕстьВДокументеПоступления = Строка.ЕстьВДокументеРеализации;
			КонецЦикла;
		Иначе
			ДокументРеализации = Документы.РасходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КорректировкаРеализации.Ссылка
			|ИЗ
			|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|ГДЕ
			|	КорректировкаРеализации.ДокументРеализации = &ДокументРеализации
			|	И КорректировкаРеализации.Дата = &Дата
			|	И КорректировкаРеализации.Проведен";
			
			Запрос.УстановитьПараметр("Дата", XDTO.Date);
			Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Объект = Документы.КорректировкаРеализации.СоздатьДокумент();
				Объект.Дата = XDTO.Date;
				Объект.РежимКорректировки = Перечисления.РежимыКорректировок[XDTO.РежимКорректировки]; 
			Иначе	
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
				Объект = Ссылка.ПолучитьОбъект();
				Объект.Состав.Очистить();
			КонецЕсли;
			Объект.ОбработкаЗаполнения(ДокументРеализации,Истина); 
			Объект.ФлагЗагрузки = Истина;
			Для Каждого Строка Из XDTO.Состав Цикл
				Номенклатура =  ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
				Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
				КонецЕсли;
				НоваяСтрока = Объект.Состав.Найти(Номенклатура,"Номенклатура");
				Если НоваяСтрока = Неопределено Тогда
					НоваяСтрока = Объект.Состав.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура;
					//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,,,НоваяСтрока.Номенклатура);
					НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения, НоваяСтрока.Номенклатура); //dps+ 15,10,05
					НоваяСтрока.Коэффициент = Строка.Коэффициент;
					НоваяСтрока.ЕстьВДокументеРеализации = Ложь;
				КонецЕсли;	
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.Сумма = Строка.Сумма;
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.СтавкаНДС));
				НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
				НоваяСтрока.Цена = Строка.Цена;
				НоваяСтрока.Вес = Строка.Вес;
				//НоваяСтрока.ЕдиницаВеса = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаВеса,,,НоваяСтрока.Номенклатура);
				НоваяСтрока.ЕдиницаВеса = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаВеса,НоваяСтрока.Номенклатура);//dps+ 15,10,05
			КонецЦикла;
		КонецЕсли;	
		//{ СИТЕК БрыляковЕЮ 2015-05-06  
		Izh_ОбменДанными.НеРегистрироватьВRIB(Объект, Ложь);
		// СИТЕК БрыляковЕЮ 2015-05-06 }
		
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////OptionsOrders/////////////////////////////////

Функция OptionsOrdersCre(XDTO)
	Попытка
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			Запись = РегистрыСведений.ПараметрыЗаказов.СоздатьМенеджерЗаписи();
			Номенклатура =  Справочники.Номенклатура.НайтиПоКоду(Строка.Номенклатура,Истина);
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
			КонецЕсли;
			Запись.Номенклатура = Номенклатура;
			Запись.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Строка.СтруктурнаяЕдиница);
			Запись.СтраховойЗапас = Строка.СтраховойЗапас;
			Запись.МаксимальноеОтклонение = Строка.МаксимальноеОтклонение;
			Запись.МинимальноеОтклонение = Строка.МинимальноеОтклонение;
			Запись.Записать();
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции


//////////////////////////////VendorEDI/////////////////////////////////

Функция VendorEDICre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.Состав Цикл
			НаборЗаписей = РегистрыСведений.EDIПровайдерыПоставщиков.СоздатьНаборЗаписей();
			Контрагент = Справочники[Строка.ТипКонтрагента].НайтиПоКоду(Строка.Контрагент);
			EDIПровайдер = Справочники.EDIПровайдеры.НайтиПоКоду(Строка.EDIПровайдер);
			НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
			НаборЗаписей.Отбор.EDIПровайдер.Установить(EDIПровайдер);
			Запись = НаборЗаписей.Добавить();
			Запись.Контрагент = Контрагент;
			Запись.EDIПровайдер = EDIПровайдер;
			Запись.GLN = Строка.GLN;
			Запись.Основной = Строка.Основной;
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			НаборЗаписей.ОбменДанными.Получатели.Очистить();
			НаборЗаписей.Записать();
		КонецЦикла;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////Регистр сведений Izh_МРЦ/////////////////////////////////

Функция MRCCre(XDTO)                                                          //dps+ 15/07/01 131723
	Попытка
		Результат = Истина;
		Для Каждого СтрокаКоллекции Из XDTO.Состав Цикл
			Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(СтрокаКоллекции.Номенклатура));
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",СтрокаКоллекции.Номенклатура));
			КонецЕсли;
			Запись = РегистрыСведений.Izh_МРЦ.СоздатьМенеджерЗаписи();
			Запись.Период = СтрокаКоллекции.Период;
			Запись.Номенклатура = Номенклатура;
			Запись.МинимальнаяРозничнаяЦена = СтрокаКоллекции.МРЦ;
			Запись.МинимальнаяПриходнаяЦенаПоставщика = СтрокаКоллекции.МПЦПоставщика;
			Запись.МинимальнаяПриходнаяЦенаПроизводителя = СтрокаКоллекции.МПЦПроизв;
			Запись.Записать();
		КонецЦикла;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////InvReq производство/////////////////////////////////

//{БредовЮГ 2015-09-07 Наряд
Функция СоздатьТипизированнуюТЗ()
	тзВозврата = Новый ТаблицаЗначений;
	тзВозврата.Колонки.Добавить("Код",Новый ОписаниеТипов("Строка"));
	тзВозврата.Колонки.Добавить("ЕдиницаИзмеренияСтрока",Новый ОписаниеТипов("Строка"));
	тзВозврата.Колонки.Добавить("Коэффициент",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	тзВозврата.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	тзВозврата.Колонки.Добавить("ДатаПоставки",Новый ОписаниеТипов("Дата"));
	Возврат тзВозврата;
КонецФункции

Функция ПроверитьЗаказНаОстатки(XDTO,РеквизитыШапки)
	тзТабличнаяЧасть = СоздатьТипизированнуюТЗ();
	Для Каждого СтрокаКоллекции из XDTO.Состав Цикл
		НоваяСтрока = тзТабличнаяЧасть.Добавить();
		НоваяСтрока.Код = СтрокаКоллекции.Номенклатура; 		
		НоваяСтрока.ЕдиницаИзмеренияСтрока = СтрокаКоллекции.ЕдиницаИзмерения;
		НоваяСтрока.Количество = СтрокаКоллекции.Количество;
		НоваяСтрока.ДатаПоставки = СтрокаКоллекции.ДатаПоставки;
	КонецЦикла;	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТЗДанные.Код КАК СТРОКА(20)) КАК Код,
	|	ВЫРАЗИТЬ(ТЗДанные.ЕдиницаИзмеренияСтрока КАК СТРОКА(3)) КАК ЕдиницаИзмеренияСтрока,
	|	ТЗДанные.Количество КАК Количество,
	|	ТЗДанные.ДатаПоставки КАК ДатаПоставки
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	&тзДанные КАК ТЗДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.Код,
	|	ВТДанные.ЕдиницаИзмеренияСтрока,
	|	ВТДанные.Количество,
	|	ВТДанные.ДатаПоставки,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПоследних.Izh_ПлательщикНДС, ИСТИНА)
	|			ТОГДА Номенклатура.СтавкаНДС
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДС
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТДанные.Код = Номенклатура.Код,
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(, Организация = &Фирма) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатура.Код,
	|	ВТНоменклатура.Количество,
	|	ВТНоменклатура.ДатаПоставки,
	|	ВТНоменклатура.Номенклатура,
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
	|	ВТНоменклатура.СтавкаНДС,
	|	ВТНоменклатура.ЕдиницаИзмеренияСтрока
	|ПОМЕСТИТЬ ВТИтоговыеДанные
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ВТНоменклатура.Номенклатура = ЕдиницыИзмерения.Владелец
	|			И ВТНоменклатура.ЕдиницаИзмеренияСтрока = ЕдиницыИзмерения.Наименование
	|			И (НЕ ЕдиницыИзмерения.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтоговыеДанные.Код,
	|	ВТИтоговыеДанные.Количество КАК КоличествоЗаказа,
	|	ВТИтоговыеДанные.ДатаПоставки,
	|	ВТИтоговыеДанные.Номенклатура,
	|	ВТИтоговыеДанные.ЕдиницаИзмерения,
	|	ВТИтоговыеДанные.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ВТИтоговыеДанные.СтавкаНДС,
	|	ВТИтоговыеДанные.ЕдиницаИзмеренияСтрока,
	|	ВЫБОР
	|		КОГДА &Фруктовый
	|			ТОГДА ВТИтоговыеДанные.Количество
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТИтоговыеДанные.Количество <= ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0)
	|					ТОГДА ВТИтоговыеДанные.Количество
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0) < 0
	|							ТОГДА 0
	|						ИНАЧЕ ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &Фруктовый
	|				ТОГДА ВТИтоговыеДанные.Количество
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТИтоговыеДанные.Количество <= ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0)
	|						ТОГДА ВТИтоговыеДанные.Количество
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0) < 0
	|								ТОГДА 0
	|							ИНАЧЕ ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0)
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ * 100 / ВТИтоговыеДанные.Количество КАК ЧИСЛО(15, 1)) КАК ПроцентЗаказа,
	|	ВЫБОР
	|		КОГДА &Фруктовый
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТИтоговыеДанные.Количество <= ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК НехватаетОстатка,
	|	ВЫБОР
	|		КОГДА &Фруктовый
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТИтоговыеДанные.Количество <= ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0)
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0) < 0
	|							ТОГДА ВТИтоговыеДанные.Количество
	|						ИНАЧЕ ВТИтоговыеДанные.Количество - ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоНехватки,
	|	ЕСТЬNULL(ВложенныйЗапрос.Значение, """") КАК АдресТовара,
	//++Минин 2015-10-12 0000141309
	|	ВТИтоговыеДанные.Номенклатура.Родитель.Родитель.Код КАК Класс
	//--Минин 2015-10-12 0000141309
	|ИЗ
	|	ВТИтоговыеДанные КАК ВТИтоговыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|				,
	|				Номенклатура В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							А.Номенклатура
	|						ИЗ
	|							ВТИтоговыеДанные КАК А)
	|					И Фирма = &Фирма
	|					И МестоХранения = &Склад) КАК ОстаткиНоменклатурыОстатки
	|		ПО ВТИтоговыеДанные.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДопРеквизиты.Значение КАК Значение,
	|			ДопРеквизиты.Ссылка КАК Номенклатура
	|		ИЗ
	|			Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДопРеквизиты
	|		ГДЕ
	|			ДопРеквизиты.Ссылка В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						А.Номенклатура
	|					ИЗ
	|						ВТИтоговыеДанные КАК А)
	|			И ДопРеквизиты.Свойство = &ПВХАдресТовара) КАК ВложенныйЗапрос
	|		ПО ВТИтоговыеДанные.Номенклатура = ВложенныйЗапрос.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	АдресТовара");
	Запрос.УстановитьПараметр("тзДанные",тзТабличнаяЧасть);
	Запрос.УстановитьПараметр("ПВХАдресТовара",ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьСлужебноеЗначение(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаАдресТовара)));
	Запрос.УстановитьПараметр("Фирма",РеквизитыШапки.Фирма);
	Запрос.УстановитьПараметр("Фруктовый",РеквизитыШапки.Фруктовый); // по фруктам остатки не смотрим
	Запрос.УстановитьПараметр("Склад",РеквизитыШапки.Склад);
	РезультатЗапроса = Запрос.Выполнить();
	тзТабличнаяЧасть = РезультатЗапроса.Выгрузить();
	//++Минин 0000143979 2015-10-30
	тзТабличнаяЧасть = ЗаполнитьЦены(тзТабличнаяЧасть,РеквизитыШапки.Фирма);
	//--Минин 0000143979 2015-10-30
	//{{ШиловМВ 09.12.2014 №000134380 п.2
	тзТабличнаяЧасть.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	тзТабличнаяЧасть.Колонки.Добавить("СортАдрес",Новый ОписаниеТипов("Строка"));
	тзТабличнаяЧасть.Колонки.Добавить("Вес",Новый ОписаниеТипов("Число"));
	Разработка_Ижтрейдинг_Сервер.ЗаполнитьIzh_АдресаНоменклатуры(тзТабличнаяЧасть);
	Разработка_Ижтрейдинг_Сервер.ЗаполнитьВесТовара(тзТабличнаяЧасть);
	Если РеквизитыШапки.Фруктовый Тогда
		тзТабличнаяЧасть.Сортировать("Класс,Вес Убыв");
	КонецЕсли;
	Возврат тзТабличнаяЧасть;
	
КонецФункции


//++Минин 0000143979 2015-10-30
Функция ЗаполнитьЦены(тз,Фирма)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ",тз);
	Запрос.УстановитьПараметр("Фирма",Фирма);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	|	А.Код,
	|	А.КоличествоЗаказа,
	|	А.ДатаПоставки,
	|	А.Номенклатура,
	|	А.ЕдиницаИзмерения,
	|	А.Коэффициент,
	|	А.СтавкаНДС,
	|	А.ЕдиницаИзмеренияСтрока,
	|	А.Количество,
	|	А.ПроцентЗаказа,
	|	А.НехватаетОстатка,
	|	А.КоличествоНехватки,
	|	А.АдресТовара,
	|	А.Класс
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК А
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыЗакупочныеСрезПоследних.Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатурыЗакупочныеСрезПоследних.Цена, 0) КАК ЦенаЗакуп
	|ПОМЕСТИТЬ ВТЦеныЗакупочные
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыЗакупочные.СрезПоследних(
	|			,
	|			(Номенклатура,ЕдиницаИзмерения) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						А.Номенклатура,
	|						А.ЕдиницаИзмерения
	|					ИЗ
	|						ТЗ КАК А)
	|				И Фирма = &Фирма) КАК ЦеныНоменклатурыЗакупочныеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НоменклатураКонтрагента.Цена, 0) КАК ЦенаПротокола,
	|	НоменклатураКонтрагента.Номенклатура,
	|	НоменклатураКонтрагента.ЕдиницаЗаказа
	|ПОМЕСТИТЬ ВТЦеныПротокола
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ГДЕ
	|	НоменклатураКонтрагента.ОсновнойПоставщик
	|	И (НоменклатураКонтрагента.ДатаПрекращенияПоставок > &Дата
	|			ИЛИ НоменклатураКонтрагента.ДатаПрекращенияПоставок = ДАТАВРЕМЯ(1, 1, 1))
	|	И НоменклатураКонтрагента.Номенклатура В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				А.Номенклатура
	|			ИЗ
	|				ТЗ КАК А)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЗ.Код,
	|	ТЗ.КоличествоЗаказа,
	|	ТЗ.ДатаПоставки,
	|	ТЗ.Номенклатура,
	|	ТЗ.ЕдиницаИзмерения,
	|	ТЗ.Коэффициент,
	|	ТЗ.СтавкаНДС,
	|	ТЗ.ЕдиницаИзмеренияСтрока,
	|	ТЗ.Количество,
	|	ТЗ.ПроцентЗаказа,
	|	ТЗ.НехватаетОстатка,
	|	ТЗ.КоличествоНехватки,
	|	ТЗ.АдресТовара КАК АдресТовара,
	|	ТЗ.Класс,
	|	ВЫБОР
	|		КОГДА ВТЦеныПротокола.ЦенаПротокола > 0
	|			ТОГДА ВТЦеныПротокола.ЦенаПротокола
	|		ИНАЧЕ ВТЦеныЗакупочные.ЦенаЗакуп
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	ТЗ КАК ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныЗакупочные КАК ВТЦеныЗакупочные
	|		ПО ТЗ.Номенклатура = ВТЦеныЗакупочные.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныПротокола КАК ВТЦеныПротокола
	|		ПО ТЗ.Номенклатура = ВТЦеныПротокола.Номенклатура
	|			И ТЗ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = ВТЦеныПротокола.ЕдиницаЗаказа
	|
	|УПОРЯДОЧИТЬ ПО
	|	АдресТовара";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
//--Минин 0000143979 2015-10-30
	
Функция InvReqStoreCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Ссылка = Документы.ЗаказВнешний.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ЗаказВнешний.СоздатьДокумент();
			Ссылка = Документы.ЗаказВнешний.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		Иначе
			ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Информация,,,"InvReqStoreCre: Заказ уже загружался, повторная загрузка невозможна : "+XDTO.Number);
			Возврат Истина; // БредовЮГ повторно никогда не загружаем 
		КонецЕсли;
		РеквизитыШапки = Новый Структура("Фирма,Дата,СтруктурнаяЕдиница,Контрагент,Фруктовый,Склад,Комментарий,Автор,НомерДокумента,ДатаДокумента,ДатаПоставкиОт,ДатаПоставкиДо");
		РеквизитыШапки.Дата = ТекущаяДата();
		РеквизитыШапки.Контрагент = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.Контрагент);
		РеквизитыШапки.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		РеквизитыШапки.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад,,,РеквизитыШапки.СтруктурнаяЕдиница);
		РеквизитыШапки.Фруктовый = РеквизитыШапки.Склад.ТипСклада = Перечисления.ТипыСкладов.Фруктовый;
		
		//{ВетровИА 22.04.2015 Наряд №000148502
		ФирмаПродажи = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Фирма) ); 
		МассивНоменклатуры = Новый Массив;
		МассивНоменклатуры.Добавить(ПолучитьНоменклатуруПоКоду(XDTO.Состав[0].Номенклатура));
		Отбор = Новый Структура("ФирмаПолучатель", ФирмаПродажи);
		тзРезультат = РегистрыСведений.Перепродажа.ПравилаПерепродажи(МассивНоменклатуры, РеквизитыШапки.Контрагент, , РеквизитыШапки.Дата, Отбор);	
		Если тзРезультат.Количество() <> 0 Тогда 
			РеквизитыШапки.Фирма = тзРезультат[0].ФирмаОтправитель;
		Иначе	
			РеквизитыШапки.Фирма = РеквизитыШапки.СтруктурнаяЕдиница.Организация;
		КонецЕсли;
		//ВетровИА 22.04.2015 Наряд №000148502}
		
		РеквизитыШапки.Комментарий = XDTO.Комментарий; 
		РеквизитыШапки.Автор = ПараметрыСеанса.ТекущийПользователь;
		РеквизитыШапки.НомерДокумента = XDTO.Number; 
		РеквизитыШапки.ДатаДокумента  = ТекущаяДата();
		РеквизитыШапки.ДатаПоставкиОт  = XDTO.ДатаПоставкиОт;
		РеквизитыШапки.ДатаПоставкиДо  = XDTO.ДатаПоставкиДо;
		
		АдресПолучателя = "";
		УчетнаяЗапись = ЭлектроннаяПочта.ПолучитьСистемнуюУчетнуюЗапись();
		Если ТипЗнч(РеквизитыШапки.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			АдресПолучателя = УправлениеКонтактнойИнформациейСервер.ПолучитьКонтактнуюИнформацияОбъекта(РеквизитыШапки.Контрагент,Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
		ИначеЕсли ТипЗнч(РеквизитыШапки.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда	
			АдресПолучателя = УправлениеКонтактнойИнформациейСервер.ПолучитьКонтактнуюИнформацияОбъекта(РеквизитыШапки.Контрагент,Справочники.ВидыКонтактнойИнформации.EmailСтруктурнойЕдиницы);
		КонецЕсли;
		Если ПустаяСтрока(АдресПолучателя) Тогда
			ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Ошибка,,,"InvReqStoreCre: Не указан e-mail у "+РеквизитыШапки.Контрагент);
		КонецЕсли;	
		
		// Проверяем , если дата поставки до меньше текущей даты, тогда не загружаем заказ, пишем на почту магазину, что время поставки истекло.
		Если ЗначениеЗаполнено(РеквизитыШапки.ДатаПоставкиДо) И НачалоДня(РеквизитыШапки.Дата)>НачалоДня(РеквизитыШапки.ДатаПоставкиДо) Тогда
			Если ЗначениеЗаполнено(АдресПолучателя) Тогда
				ПараметрыПисьма = Новый Структура;
				ПараметрыПисьма.Вставить("Тема", НСтр("ru = 'sklad_ВШОтчет: "+РеквизитыШапки.НомерДокумента+"'"));
				ПараметрыПисьма.Вставить("Тело", НСтр("ru = 'Дата загрузки заявки ("+Формат(РеквизитыШапки.Дата,"ДЛФ=DDT")+") позже ,чем дата поставки ("+Формат(РеквизитыШапки.ДатаПоставкиДо,"ДЛФ=DDT")+") , заказ не обработан!'"));
				ПараметрыПисьма.Вставить("Кому", АдресПолучателя);
				Попытка
					ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
				Исключение
					ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Ошибка,,,"InvReqStoreCre: Не удалось отправить письмо на адрес : "+АдресПолучателя+"("+ОписаниеОшибки()+")");
				КонецПопытки;
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;	
		МассивДокументов = Новый Массив;
		тзТабличнаяЧасть = ПроверитьЗаказНаОстатки(XDTO,РеквизитыШапки);
		ЗаполнитьЗначенияСвойств(Объект,РеквизитыШапки);
		СтруктураКонстант = Разработка_Ижтрейдинг_Сервер.ПолучитьЗначениеКонстанты("ЗагрузкаЗаказаПоставщика",);		
		Для Каждого СтрокаТЗ из тзТабличнаяЧасть Цикл
			Если СтрокаТЗ.Количество=0 Тогда Продолжить; КонецЕсли;
			НоваяСтрока = Объект.Состав.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
			//++Минин 0000143979 2015-10-30
			Izh_ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			//--Минин 0000143979 2015-10-30
		КонецЦикла;
		Если Объект.Состав.Количество() <> 0 Тогда
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			//{ СИТЕК БрыляковЕЮ 2015-05-06  
			Izh_ОбменДанными.НеРегистрироватьВRIB(Объект, Ложь);
			// СИТЕК БрыляковЕЮ 2015-05-06 }
			МассивДокументов.Добавить(Объект);
			// резервируем товар
			Если НЕ РеквизитыШапки.Фруктовый Тогда
				ДокОбъектПеремещение = Документы.Перемещение.СоздатьДокумент();
				ДокОбъектПеремещение.Дата = РеквизитыШапки.Дата + 1;
				ДокОбъектПеремещение.Заполнить(Объект.Ссылка);
				Если СтруктураКонстант<>Неопределено И СтруктураКонстант.Свойство("СкладРезерва") Тогда
					ДокОбъектПеремещение.СкладПолучатель = 	СтруктураКонстант.СкладРезерва;
				КонецЕсли;	
				ДокОбъектПеремещение.Записать(РежимЗаписиДокумента.Проведение);
				МассивДокументов.Добавить(ДокОбъектПеремещение);
			КонецЕсли;
		КонецЕсли;
		ТекстПисьма = Разработка_Ижтрейдинг_Сервер.СформироватьТекстДляПисьма(тзТабличнаяЧасть,МассивДокументов,РеквизитыШапки);
		Если ЗначениеЗаполнено(АдресПолучателя) Тогда
			АдресСклада = "";
			Если РеквизитыШапки.Фруктовый Тогда
				АдресСклада = Izh_ОбщегоНазначенияСервер.ПолучитьСлужебноеЗначение(ПланыВидовХарактеристик.СлужебныеЗначения.ЭлектронныйАдресФРОВ);		
			Иначе
				АдресСклада = Izh_ОбщегоНазначенияСервер.ПолучитьСлужебноеЗначение(ПланыВидовХарактеристик.СлужебныеЗначения.ЭлектронныйАдресСклада);		
			КонецЕсли;
			ПараметрыПисьма = Новый Структура;
			ПараметрыПисьма.Вставить("Тема", НСтр("ru = 'sklad_ВШОтчет: "+РеквизитыШапки.НомерДокумента+"'"));
			ПараметрыПисьма.Вставить("Тело", НСтр("ru = '"+ТекстПисьма+"'"));
			ПараметрыПисьма.Вставить("Кому", АдресПолучателя+?(ПустаяСтрока(АдресСклада),"",","+АдресСклада));
			Попытка
				ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
			Исключение
				ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Ошибка,,,"InvReqStoreCre: Не удалось отправить письмо на адрес : "+АдресПолучателя+"("+ОписаниеОшибки()+")");			
			КонецПопытки;
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////RegularPriceChange/////////////////////////////////

Функция regprcchgcre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.location);
		БПНоваяЦенаРазрешен = УправлениеБизнесПроцессамиСервер.БизнесПроцессРазрешен(БизнесПроцессы.НоваяЦена.ПустаяСсылка());
		сткДопРеквизитыБП = УправлениеБизнесПроцессамиСервер.ПолучитьДопРеквизитыНастройкиБизнеснесПроцесса(БизнесПроцессы.НоваяЦена.ПустаяСсылка());
		
		// kostyl' begin
		SpecialID = 9999999999;
		IsSpecialPackage = Undefined;	// !!! если Истина, то всегда делаем запись в регистре, всегда пытаемся создать БП !!!
		// kostyl' end
		
		тзДанные = Новый ТаблицаЗначений;	//сюда читаем пакет
		тзДанные.Колонки.Добавить("ID", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		тзДанные.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
		тзДанные.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя), ));
		//тзДанные.Колонки.Добавить("БылоИзменениеЦены", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0)));	//1-читаем, 0-игнорируем (selling_retail_changed_ind)
		тзДанные.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2)));
		тзДанные.Колонки.Добавить("ЕдиницаИзмеренияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(25)));
		тзДанные.Колонки.Добавить("ВалютаНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
		
		тзСостав = Новый ТаблицаЗначений;	//сюда пишем состав для бп
		тзСостав.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя), ));
		тзСостав.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		тзСостав.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		тзСостав.Колонки.Добавить("ID", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		тзСостав.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2)));
		
		Для Каждого сRegPrcChgDtl Из XDTO.RegPrcChgDtl Цикл
			//Если сRegPrcChgDtl.selling_retail_changed_ind = 1 Тогда	//03.02.14 теперь читаем все
			сДанные = тзДанные.Добавить();
			сДанные.ID = сRegPrcChgDtl.price_change_id;
			сДанные.НоменклатураКод = сRegPrcChgDtl.item;
			сДанные.Период = ПолучитьДатуXDTO(сRegPrcChgDtl.effective_date);
			сДанные.Цена = сRegPrcChgDtl.selling_unit_retail;
			сДанные.ЕдиницаИзмеренияНаименование = сRegPrcChgDtl.selling_uom;
			сДанные.ВалютаНаименование = сRegPrcChgDtl.selling_currency;
			
			// kostyl' begin
			Если IsSpecialPackage = Undefined Тогда	//по первой записи определяем "спецпакет"
				Если сДанные.ID = SpecialID Тогда
					IsSpecialPackage = True;
					сткДопРеквизитыБП.ВариантСозданияБП = Перечисления.ВариантыСозданияБПНоваяЦена.ПоПакету;
				Иначе
					IsSpecialPackage = False;
				КонецЕсли;
			КонецЕсли;
			// kostyl' end
			//КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("тзДанные", тзДанные);
		//++БИТ БВО 2015-06-16 Значение группы устанавливается в регистре "Служебные значения"
		//Запрос.УстановитьПараметр("ГруппаСигареты", ПланыВидовХарактеристик.СлужебныеЗначения.ГруппаСигареты);
		Запрос.УстановитьПараметр("ГруппаСигареты", Справочники.Номенклатура.НайтиПоКоду(Izh_ОбщегоНазначенияСервер.ПолучитьСлужебноеЗначение(ПланыВидовХарактеристик.СлужебныеЗначения.ГруппаСигареты)));  
		//--БИТ БВО 2015-06-16
		Запрос.Текст =
		"ВЫБРАТЬ
		|	тзДанные.ID,
		|	тзДанные.НоменклатураКод,
		|	тзДанные.Период,
		|	тзДанные.Цена,
		|	тзДанные.ЕдиницаИзмеренияНаименование,
		|	тзДанные.ВалютаНаименование
		|ПОМЕСТИТЬ тзДанные
		|ИЗ
		|	&тзДанные КАК тзДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.Ссылка КАК Номенклатура,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ID,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Валюта,
		|	ВложенныйЗапрос.НоменклатураКод,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ВалютаНаименование,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатуры.ID ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьТакаяЦена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыДействующие.MaxID ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДействующаяЦена,
		|	ВложенныйЗапрос.Сигареты
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК Ссылка,
		|		ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
		|		Валюты.Ссылка КАК Валюта,
		|		тзДанные.ID КАК ID,
		|		тзДанные.НоменклатураКод КАК НоменклатураКод,
		|		тзДанные.Период КАК Период,
		|		тзДанные.Цена КАК Цена,
		|		тзДанные.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
		|		тзДанные.ВалютаНаименование КАК ВалютаНаименование,
		|		ВЫБОР
		|			КОГДА НомСигареты.Ссылка ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК Сигареты
		|	ИЗ
		|		тзДанные КАК тзДанные
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|			ПО тзДанные.НоменклатураКод = Номенклатура.Код
		|				И (Номенклатура.Группа = 0)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
		|			ПО тзДанные.ВалютаНаименование = Валюты.Наименование
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|			ПО тзДанные.ЕдиницаИзмеренияНаименование = ЕдиницыИзмерения.Наименование
		|				И (Номенклатура.Ссылка = ЕдиницыИзмерения.Владелец)
		|				И (ЕдиницыИзмерения.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		//{БредовЮГ 2015-09-06 Исправление, розн. цена грузится и на помеченные на удаление единицы измерения, из за чего происходит дублирование розничных цен
		|				И (НЕ ЕдиницыИзмерения.ПометкаУдаления)
		//БредовЮГ  2015-09-06 Исправление, розн. цена грузится и на помеченные на удаление единицы измерения, из за чего происходит дублирование розничных цен } 
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НомСигареты
		|			ПО (тзДанные.НоменклатураКод = НомСигареты.Код)
		|				И (НомСигареты.Ссылка В ИЕРАРХИИ (&ГруппаСигареты))) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ВложенныйЗапрос.Период = ЦеныНоменклатуры.Период
		|			И ВложенныйЗапрос.Ссылка = ЦеныНоменклатуры.Номенклатура
		|			И ВложенныйЗапрос.ЕдиницаИзмерения = ЦеныНоменклатуры.ЕдиницаИзмерения
		|			И (ЦеныНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
		|			И ВложенныйЗапрос.ID = ЦеныНоменклатуры.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЦеныНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|			ВложенныйЗапрос.Ссылка КАК Номенклатура,
		|			ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|			МАКСИМУМ(ЦеныНоменклатуры.ID) КАК MaxID
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Номенклатура.Ссылка КАК Ссылка,
		|				ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
		|				тзДанные.ID КАК ID,
		|				тзДанные.Период КАК Период
		|			ИЗ
		|				тзДанные КАК тзДанные
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|					ПО тзДанные.НоменклатураКод = Номенклатура.Код
		|						И (Номенклатура.Группа = 0)
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|					ПО тзДанные.ЕдиницаИзмеренияНаименование = ЕдиницыИзмерения.Наименование
		|						И (Номенклатура.Ссылка = ЕдиницыИзмерения.Владелец)
		//{БредовЮГ 2015-09-06 Исправление, розн. цена грузится и на помеченные на удаление единицы измерения, из за чего происходит дублирование розничных цен
		|						И (НЕ ЕдиницыИзмерения.ПометкаУдаления)
		//БредовЮГ  2015-09-06 Исправление, розн. цена грузится и на помеченные на удаление единицы измерения, из за чего происходит дублирование розничных цен } 
		|) КАК ВложенныйЗапрос
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|				ПО ВложенныйЗапрос.Ссылка = ЦеныНоменклатуры.Номенклатура
		|					И ВложенныйЗапрос.ЕдиницаИзмерения = ЦеныНоменклатуры.ЕдиницаИзмерения
		|					И ВложенныйЗапрос.Период <= ЦеныНоменклатуры.Период
		|					И (ЦеныНоменклатуры.Период <= &ТекущаяДата)
		|					И ВложенныйЗапрос.ID <= ЦеныНоменклатуры.ID
		|		ГДЕ
		|			ЦеныНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			И ЦеныНоменклатуры.АктивностьЗаписи = ИСТИНА
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЦеныНоменклатуры.СтруктурнаяЕдиница,
		|			ВложенныйЗапрос.Ссылка,
		|			ВложенныйЗапрос.ЕдиницаИзмерения) КАК ЦеныНоменклатурыДействующие
		|		ПО ВложенныйЗапрос.Ссылка = ЦеныНоменклатурыДействующие.Номенклатура
		|			И ВложенныйЗапрос.ЕдиницаИзмерения = ЦеныНоменклатурыДействующие.ЕдиницаИзмерения
		|			И (ЦеныНоменклатурыДействующие.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Выборка.НоменклатураКод));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена единица измерения с наименованием ""%1"" у номенклатуры "+Выборка.НоменклатураКод+".'"),"%1",Выборка.ЕдиницаИзмеренияНаименование));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Выборка.Валюта) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена валюта с наименованием ""%1"" у номенклатуры "+Выборка.НоменклатураКод+".'"),"%1",Выборка.ВалютаНаименование));
			КонецЕсли;
			//Если Выборка.ЕстьТакаяЦена = Ложь Тогда
			Если Выборка.ЕстьТакаяЦена = Ложь Or IsSpecialPackage = True Тогда	// kostyl' edition
				МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = Выборка.Период;
				МенеджерЗаписи.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				МенеджерЗаписи.Номенклатура = Выборка.Номенклатура;
				МенеджерЗаписи.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				МенеджерЗаписи.Цена = Выборка.Цена;
				МенеджерЗаписи.Валюта = Выборка.Валюта;
				МенеджерЗаписи.ID = Выборка.ID;
				//МенеджерЗаписи.АктивностьЗаписи = Не БПНоваяЦенаРазрешен Или Выборка.ЕстьДействующаяЦена;
				МенеджерЗаписи.АктивностьЗаписи = Не БПНоваяЦенаРазрешен ИЛИ Выборка.Сигареты Или Выборка.ЕстьДействующаяЦена And IsSpecialPackage = False;	// kostyl' edition   +//dps+ 15/06/01 сигареты сразу активная цена 
				МенеджерЗаписи.Записать();
			КонецЕсли;	
			
			//Если БПНоваяЦенаРазрешен И Не Выборка.ЕстьДействующаяЦена И Не Выборка.ЕстьТакаяЦена Тогда
			Если БПНоваяЦенаРазрешен И (Не Выборка.ЕстьДействующаяЦена И Не Выборка.ЕстьТакаяЦена Or IsSpecialPackage = True) Тогда	// kostyl' edition
				сСостав = тзСостав.Добавить();
				ЗаполнитьЗначенияСвойств(сСостав, МенеджерЗаписи);
			Конецесли;
		КонецЦикла;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции
Функция regprcchgcre_old(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		бпПустая = БизнесПроцессы.НоваяЦена.ПустаяСсылка();
		СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.location);
		АктивностьЗаписи = НЕ УправлениеБизнесПроцессамиСервер.БизнесПроцессРазрешен(бпПустая);
		Для Каждого Строка Из XDTO.RegPrcChgDtl Цикл
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.selling_unit_retail) Тогда
				//ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.selling_uom,,,НоменклатураСсылка);
				ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.selling_uom,НоменклатураСсылка); //dps 15.10.05
				Если ЕстьЗаписьВРегистреЦеныНоменклатуры(СтруктурнаяЕдиница,НоменклатураСсылка,ЕдиницаИзмерения,Строка.price_change_id) Тогда
					Продолжить;
				КонецЕсли;	
				МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = ПолучитьДатуXDTO(Строка.effective_date);
				МенеджерЗаписи.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				МенеджерЗаписи.Номенклатура = НоменклатураСсылка;
				МенеджерЗаписи.ЕдиницаИзмерения = ЕдиницаИзмерения;
				МенеджерЗаписи.Цена = Строка.selling_unit_retail;
				МенеджерЗаписи.Валюта = Справочники.Валюты.НайтиПоНаименованию(Строка.selling_currency);
				МенеджерЗаписи.ID = Строка.price_change_id;
				МенеджерЗаписи.АктивностьЗаписи = АктивностьЗаписи;
				МенеджерЗаписи.Записать();
			КонецЕсли;	
			Если ЗначениеЗаполнено(Строка.multi_unit_retail) Тогда
				//ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.multi_selling_uom,,,НоменклатураСсылка);
				ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.multi_selling_uom,НоменклатураСсылка); //dps 15.10.05
				Если ЕстьЗаписьВРегистреЦеныНоменклатуры(СтруктурнаяЕдиница,НоменклатураСсылка,ЕдиницаИзмерения,Строка.price_change_id) Тогда
					Продолжить;
				КонецЕсли;	
				МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = ПолучитьДатуXDTO(Строка.effective_date);
				МенеджерЗаписи.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				МенеджерЗаписи.Номенклатура = НоменклатураСсылка;
				МенеджерЗаписи.ЕдиницаИзмерения = ЕдиницаИзмерения;
				МенеджерЗаписи.Цена = Строка.multi_unit_retail;
				МенеджерЗаписи.Валюта = Справочники.Валюты.НайтиПоНаименованию(Строка.multi_unit_retail_currency);
				МенеджерЗаписи.ID = Строка.price_change_id;
				МенеджерЗаписи.Количество = Строка.multi_units;
				МенеджерЗаписи.АктивностьЗаписи = АктивностьЗаписи;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			//Если АктивностьЗаписи = Ложь Тогда
			//	СтрукПараметры = Новый Структура;
			//	СтрукОснование = Новый Структура;
			//	струкПараметры.Вставить("Удалять", Ложь); 
			//	струкПараметры.Вставить("Искать", Ложь);
			//	СтрукПараметры.Вставить("БизнесПроцесс",БизнесПроцессы.НоваяЦена);
			//	СтрукПараметры.Вставить("СтруктурнаяЕдиница",СтруктурнаяЕдиница);
			//	СтрукОснование.Вставить("Основание",МенеджерЗаписи.Период);
			//	струкПараметры.Вставить("ТочкаМаршрута", БизнесПроцессы.НоваяЦена.ТочкиМаршрута.ПечатьЦенников);
			//	ТЗСостав = Новый ТаблицаЗначений;
			//	ТЗСостав.Колонки.Добавить("Номенклатура");
			//	ТЗСостав.Колонки.Добавить("ЕдиницаИзмерения");
			//	ТЗСостав.Колонки.Добавить("ID");
			//	ТЗСостав.Колонки.Добавить("Цена");
			//	НоваяСтрока = ТЗСостав.Добавить();
			//	ЗаполнитьЗначенияСвойств(НоваяСтрока,МенеджерЗаписи);
			//	СтрукОснование.Вставить("Состав",ТЗСостав);
			//	СтрукПараметры.Вставить("Основание",СтрукОснование);
			//	УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
			//Конецесли;
		КонецЦикла;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция regprcchgmod(Package)
	Возврат regprcchgcre(Package);
КонецФункции

Функция regprcchgdel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Для Каждого Строка Из XDTO.RegPrcChgDtlRef Цикл
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
			КонецЕсли;
			ID = Строка.price_change_id;
			НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ID.Установить(ID); 
			НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка); 
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЦикла;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////ClearancePriceChange/////////////////////////////////

Функция clrprcchgcre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		бпПустая = БизнесПроцессы.НоваяРаспродажа.ПустаяСсылка();
		АктивностьЗаписи = НЕ УправлениеБизнесПроцессамиСервер.БизнесПроцессРазрешен(бпПустая);
		СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.location);
		Для Каждого Строка Из XDTO.ClrPrcChgDtl Цикл
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item));
			КонецЕсли;
			//ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.selling_uom,,,НоменклатураСсылка);
			ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.selling_uom,НоменклатураСсылка); //dps 15,10,05
			Если ЕстьЗаписьВРегистреЦеныНоменклатуры(СтруктурнаяЕдиница,НоменклатураСсылка,ЕдиницаИзмерения,Строка.clearance_id) Тогда
				Продолжить;
			КонецЕсли;	
			МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ПолучитьДатуXDTO(Строка.effective_date);
			МенеджерЗаписи.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			МенеджерЗаписи.Номенклатура = НоменклатураСсылка;
			МенеджерЗаписи.ЕдиницаИзмерения = ЕдиницаИзмерения;
			МенеджерЗаписи.Цена = Строка.selling_unit_retail;
			МенеджерЗаписи.Валюта = Справочники.Валюты.НайтиПоНаименованию(Строка.selling_currency);
			МенеджерЗаписи.ID = Строка.clearance_id;
			МенеджерЗаписи.IDВосстановления = Строка.reset_clearance_id;
			МенеджерЗаписи.АктивностьЗаписи = АктивностьЗаписи;
			МенеджерЗаписи.Записать();
			
			Если АктивностьЗаписи = Ложь И МенеджерЗаписи.ID <> МенеджерЗаписи.IDВосстановления Тогда
				СтрукПараметры = Новый Структура;
				СтрукОснование = Новый Структура;
				струкПараметры.Вставить("Удалять", Ложь); 
				струкПараметры.Вставить("Искать", Ложь);
				СтрукПараметры.Вставить("БизнесПроцесс",БизнесПроцессы.НоваяРаспродажа);
				СтрукПараметры.Вставить("СтруктурнаяЕдиница",СтруктурнаяЕдиница);
				СтрукОснование.Вставить("Основание",МенеджерЗаписи.Период);
				струкПараметры.Вставить("ТочкаМаршрута", БизнесПроцессы.НоваяРаспродажа.ТочкиМаршрута.ОповеститьОНачале);
				ТЗСостав = Новый ТаблицаЗначений;
				ТЗСостав.Колонки.Добавить("Номенклатура");
				ТЗСостав.Колонки.Добавить("ЕдиницаИзмерения");
				ТЗСостав.Колонки.Добавить("ID");
				ТЗСостав.Колонки.Добавить("Цена");
				НоваяСтрока = ТЗСостав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,МенеджерЗаписи);
				СтрукОснование.Вставить("Состав",ТЗСостав);
				СтрукПараметры.Вставить("Основание",СтрукОснование);
				УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
			Конецесли;
		КонецЦикла;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция clrprcchgmod(Package)
	Возврат clrprcchgcre(Package);
КонецФункции

Функция clrprcchgdel(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Строка Из XDTO.ClrPrcChgDtlRef Цикл
			НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Строка.item[0]);
			Если НоменклатураСсылка = Неопределено Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.item[0]));
			КонецЕсли;
			ID = Строка.clearance_id[0];
			НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ID.Установить(ID); 
			НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка); 
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЦикла;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////MULTIBUYPROMO/////////////////////////////////

Функция MULTIBUYPROMOCRE(Package, МодификацияПромо = Ложь)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		
		СтруктураПромоИдентификаторы = Новый Структура;
		СтруктураПромоИдентификаторы.Вставить("IDПромо", XDTO.promo_id);
		СтруктураПромоИдентификаторы.Вставить("IDКомпоненты", XDTO.promo_comp_id);	//нет необходимости держать в измерении регистра
		//СтруктураПромоИдентификаторы.Вставить("IDГруппы", );
		СтруктураПромоИдентификаторы.Вставить("IDДеталей", XDTO.promo_dtl_id);
		
		ДатаНачала = ПолучитьДатуXDTO(XDTO.start_date);
		ДатаОкончания = ПолучитьДатуXDTO(XDTO.end_date);
		Основание = XDTO.promo_dtl_id;
		Название = XDTO.promo_name;
		бпПустая = БизнесПроцессы.НоваяПромоАкция.ПустаяСсылка();
		БизнесПроцессРазрешен = УправлениеБизнесПроцессамиСервер.БизнесПроцессРазрешен(бпПустая);
		
		//ПромоАкции{
		мСтруктурныеЕдиницы = Новый Массив;	//для которых сделаем записи промо акций
		Для Каждого Локация Из XDTO.LocationList Цикл
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Локация.location);
			Если СтруктурнаяЕдиница.Пустая() Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найдена структурная единица с кодом ""%1"".'"),"%1", Локация.location));
			КонецЕсли;
			//для Не МодификацияПромо необходимо проверить в случае повторного получения того же пакета Cre или при досылки заблудшего товара Cre
			Если Не МодификацияПромо И ПромоАкцияЗавершена(СтруктураПромоИдентификаторы, СтруктурнаяЕдиница) Тогда
				//	Продолжить;
			Иначе//	при любых других обстоятельствах делаем запись/перезапись
				мСтруктурныеЕдиницы.Добавить(СтруктурнаяЕдиница);
				
				МенеджерЗаписи = РегистрыСведений.ПромоАкции.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураПромоИдентификаторы);
				МенеджерЗаписи.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				МенеджерЗаписи.ДатаНачала = ДатаНачала;
				МенеджерЗаписи.ДатаОкончания = ДатаОкончания;
				МенеджерЗаписи.Название = Название;
				МенеджерЗаписи.ОписаниеПромо = XDTO.promo_description;
				МенеджерЗаписи.ОписаниеКомпонента = XDTO.promo_comp_desc;
				МенеджерЗаписи.ТипКомпонента = XDTO.promo_comp_type;
				//МенеджерЗаписи.ОписаниеДеталей = Деталь.description;
				МенеджерЗаписи.Пакет = Новый ХранилищеЗначения(Package, Новый СжатиеДанных());
				МенеджерЗаписи.ФлагНачала = Не БизнесПроцессРазрешен;
				МенеджерЗаписи.ФлагОкончания = Ложь;
				МенеджерЗаписи.ТипПокупателя = XDTO.customer_type_id;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
		//ПромоАкции}
		
		//ПромоАкцииНоменклатура и заодно ПромоАкцииПороги{
		тзНоменклатура = Новый ТаблицаЗначений;
		тзНоменклатура.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
		тзПростыеЦены = Новый ТаблицаЗначений;
		тзПростыеЦены.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
		тзПростыеЦены.Колонки.Добавить("СтруктурнаяЕдиницаКод", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
		тзПростыеЦены.Колонки.Добавить("ЕдиницаИзмеренияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(25)));
		тзПростыеЦены.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2)));
		тзПороги = Новый ТаблицаЗначений;
		НомерПорога = 0;
		Для Каждого Группа Из XDTO.ListGroup Цикл
			Для Каждого Деталь Из Группа.ListDtl Цикл
				Для Каждого Номенклатура Из Деталь.ItemList Цикл
					//ЗаписьНоменклатурыПромоАкции(XDTO,Группа,Деталь,Номенклатура);
					сНоменклатура = тзНоменклатура.Добавить();
					сНоменклатура.НоменклатураКод = Номенклатура.item_num;
				КонецЦикла;
				//НомерПорога = 0;
				Для Каждого Порог Из Деталь.DiscountLadder Цикл
					НомерПорога = НомерПорога + 1;
					ЗаписьПороговПромоАкции(XDTO,Группа,Деталь,Порог,НомерПорога);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		Для Каждого ПростаяЦена Из XDTO.ItemLocSimpleRetail Цикл
			сПростыеЦены = тзПростыеЦены.Добавить();
			сПростыеЦены.НоменклатураКод = ПростаяЦена.item_num;
			сПростыеЦены.СтруктурнаяЕдиницаКод = ПростаяЦена.location;
			сПростыеЦены.ЕдиницаИзмеренияНаименование = ПростаяЦена.selling_uom;
			сПростыеЦены.Цена = ПростаяЦена.selling_retail;
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("тзНоменклатура", тзНоменклатура);
		Запрос.УстановитьПараметр("тзПростыеЦены", тзПростыеЦены);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	тзНоменклатура.НоменклатураКод
		|ПОМЕСТИТЬ тзНоменклатура
		|ИЗ
		|	&тзНоменклатура КАК тзНоменклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тзПростыеЦены.НоменклатураКод,
		|	тзПростыеЦены.СтруктурнаяЕдиницаКод,
		|	тзПростыеЦены.Цена,
		|	тзПростыеЦены.ЕдиницаИзмеренияНаименование
		|ПОМЕСТИТЬ тзПростыеЦены
		|ИЗ
		|	&тзПростыеЦены КАК тзПростыеЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тзНоменклатура.НоменклатураКод,
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
		|	тзПростыеЦены.Цена
		|ИЗ
		|	тзНоменклатура КАК тзНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО тзНоменклатура.НоменклатураКод = Номенклатура.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ тзПростыеЦены КАК тзПростыеЦены
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|			ПО тзПростыеЦены.СтруктурнаяЕдиницаКод = СтруктурныеЕдиницы.Код
		|				И (СтруктурныеЕдиницы.Ссылка В ИЕРАРХИИ (&СтруктурнаяЕдиница))
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура1
		|			ПО тзПростыеЦены.НоменклатураКод = Номенклатура1.Код
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|			ПО тзПростыеЦены.ЕдиницаИзмеренияНаименование = ЕдиницыИзмерения.Наименование
		|				И (Номенклатура1.Ссылка = ЕдиницыИзмерения.Владелец)
		|				И (ЕдиницыИзмерения.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		//{БредовЮГ 2015-09-06 Исправление, акции грузятся и на помеченные на удаление единицы измерения, из за чего происходит дублирование акций
		|				И (НЕ ЕдиницыИзмерения.ПометкаУдаления)
		//БредовЮГ  2015-09-06 Исправление, акции грузятся и на помеченные на удаление единицы измерения, из за чего происходит дублирование акций } 
		|		ПО тзНоменклатура.НоменклатураКод = тзПростыеЦены.НоменклатураКод";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Номенклатура = Null Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1", Выборка.НоменклатураКод));
			КонецЕсли;
			МенеджерЗаписи = РегистрыСведений.ПромоАкцииНоменклатура.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураПромоИдентификаторы);
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		//ПромоАкцииНоменклатура}
		
		Если БизнесПроцессРазрешен Тогда
			Для каждого СтруктурнаяЕдиница Из мСтруктурныеЕдиницы Цикл
				СтрукПараметры = Новый Структура;
				СтрукОснование = Новый Структура;
				струкПараметры.Вставить("Удалять", Истина); 
				струкПараметры.Вставить("Искать", Истина);
				СтрукПараметры.Вставить("БизнесПроцесс",БизнесПроцессы.НоваяПромоАкция);
				струкПараметры.Вставить("ТочкаМаршрута", БизнесПроцессы.НоваяПромоАкция.ТочкиМаршрута.ОповеститьОНачале);
				СтрукПараметры.Вставить("СтруктурнаяЕдиница",СтруктурнаяЕдиница);
				СтрукОснование.Вставить("ДатаНачала",ДатаНачала);
				СтрукОснование.Вставить("ДатаОкончания",ДатаОкончания);
				СтрукОснование.Вставить("Основание",Основание);
				СтрукОснование.Вставить("Название",Название);
				СтрукПараметры.Вставить("Основание",СтрукОснование);
				УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
			КонецЦикла;
		Конецесли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция MULTIBUYPROMOMOD(Package)
	Возврат MULTIBUYPROMOCRE(Package, Истина);
КонецФункции

Функция MULTIBUYPROMODEL(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Результат = Истина;
		Для Каждого Группа Из XDTO.ListGroupRef Цикл
			Для Каждого Деталь Из Группа.ListDtlRef Цикл
				Если Деталь.ItemListRef.Количество() > 0 Тогда
					Для Каждого Номенклатура Из Деталь.ItemListRef Цикл
						УдалитьПромоАкции(XDTO,Группа,Деталь,Номенклатура);
					КонецЦикла;	
				Иначе
					УдалитьПромоАкции(XDTO,Группа,Деталь);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////ADRRules/////////////////////////////////

Функция ADRRulesCre(Package,Location)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	АвтоЗаказ.Ссылка,
		|	АвтоЗаказ.Завершен,
		|	АвтоЗаказ.Дата
		|ИЗ
		|	БизнесПроцесс.АвтоЗаказ КАК АвтоЗаказ
		|ГДЕ
		|	АвтоЗаказ.ИдентификаторПравила = &ИдентификаторПравила");
		Запрос.УстановитьПараметр("ИдентификаторПравила",СокрЛП(XDTO.Ref));
		РезультатЗапроса = Запрос.Выполнить();
		тзРезультат = РезультатЗапроса.Выгрузить();
		Результат = Истина;
		МассивСтрокНеЗавершенные = тзРезультат.НайтиСтроки(Новый Структура("Завершен",Ложь));
		тзНеЗавершенные = тзРезультат.Скопировать(МассивСтрокНеЗавершенные,);
		
		МассивСтрокЗавершенные = тзРезультат.НайтиСтроки(Новый Структура("Завершен",Истина));
		тзЗавершенные = тзРезультат.Скопировать(МассивСтрокЗавершенные,);
		
		тзЗавершенные.Сортировать("Дата Убыв");
		тзНеЗавершенные.Сортировать("Дата Возр");
		Результат = Истина;
		Если тзНеЗавершенные.Количество()=0  Тогда // нет б/п незавершенных и переданный обьект не помечен на удаление, создаем новый и заполняем расписание
			Если  XDTO.DeletionMark  Тогда 
				Если тзЗавершенные.Количество()>0 Тогда
					ПерваяСсылка =  тзЗавершенные[0].Ссылка;
					УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(ПерваяСсылка.РегламентноеЗадание);
					ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
					Если ТекущееРегламентноеЗадание <> Неопределено Тогда 
						ТекущееРегламентноеЗадание.Удалить();
					КонецЕсли;
				КонецЕсли;
			Иначе 	
				Объект = БизнесПроцессы.АвтоЗаказ.СоздатьБизнесПроцесс();
				Объект.Централизованный = Истина;
				Объект.ПометкаУдаления = XDTO.DeletionMark;
				//{БредовЮГ 2015-03-20 Наряд 000145565 от 20.03.2015 13:04:45
				Объект.ПоПротоколу = XDTO.ПоПротоколу;
				//БредовЮГ 2015-03-20 Наряд 000145565 от 20.03.2015 13:04:45}
				//{БредовЮГ 2015-05-13 Наряд 000149975 от 08.05.2015 9:14:21
				Объект.Izh_ВариантРасчета = XDTO.Izh_ВариантРасчета;
				УникальныйИдентификаторМенеджер = Новый УникальныйИдентификатор(XDTO.Izh_Менеджер);
				Объект.Izh_Менеджер = Справочники.Пользователи.ПолучитьСсылку(УникальныйИдентификаторМенеджер);
				Объект.Izh_ПредельноеВремяЗаказа = XDTO.Izh_ПредельноеВремяЗаказа;
				//БредовЮГ  2015-05-13 Наряд 000149975 от 08.05.2015 9:14:21 } 
				Объект.Наименование = XDTO.Description;
				Объект.ИдентификаторПравила = СокрЛП(XDTO.Ref);
				Если ЗначениеЗаполнено(XDTO.Склад) Тогда
					Объект.СкладПроизводства = Справочники.Склады.НайтиПоКоду(XDTO.Склад,,XDTO.Owner);
					Объект.Поставщик = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.Owner);
				Иначе	
					Объект.Поставщик = Справочники.Контрагенты.НайтиПоКоду(XDTO.Owner);
				КонецЕсли;	
				Объект.ПредставлениеРасписания = XDTO.ПредставлениеРасписания; 
				Объект.ПериодРасчета = XDTO.ПериодРасчета; 
				Объект.КоэффициентЗаказа = XDTO.КоэффициентЗаказа; 
				Объект.СрокПоставки = XDTO.СрокПоставки; 
				Объект.ПроцентОкругления = XDTO.ПроцентОкругления;
				Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Location);
				Объект.ФильтрНоменклатуры.Очистить();
				Для Каждого Строка Из XDTO.Состав Цикл
					Номенклатура =  Справочники.Номенклатура.НайтиПоКоду(Строка.Номенклатура,Истина);
					Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
						Продолжить;
					КонецЕсли;	
					НоваяСтрока = Объект.ФильтрНоменклатуры.Добавить();
					НоваяСтрока.Номенклатура =  Номенклатура;
				КонецЦикла;
				
				//Если Объект.ФильтрНоменклатуры.Количество() = 0 Тогда
				//	Возврат Истина;
				//КонецЕсли;	
				
				Объект.Записать();
				ТекущееРегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание("АвтоЗаказ");
				ТекущееРегламентноеЗадание.Использование = Истина;
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(Объект.Ссылка);
				ТекущееРегламентноеЗадание.Параметры = МассивПараметров;
				// {ВетровИА 16.09.2015 Обращение №0000139579.
				ТекущееРегламентноеЗадание.Наименование = Лев("Авто заказ "+Объект.Поставщик + " ("+XDTO.Description+")", 120);
				// ВетровИА 16.09.2015 Обращение №0000139579.}
				ТекущееРегламентноеЗадание.Записать();
				Объект.РегламентноеЗадание = Строка(ТекущееРегламентноеЗадание.УникальныйИдентификатор);
				Расписание = XDTO.Расписание.Получить();
				РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(Строка(ТекущееРегламентноеЗадание.УникальныйИдентификатор),Расписание);
				Объект.ПредставлениеРасписания = Расписание;     
				Объект.Записать();
			КонецЕсли;
		Иначе
			Если XDTO.DeletionMark Тогда // завершаем все незавершенные б/п и удаляем регл.задание 
				Для Каждого СтрокаТЗ из тзНеЗавершенные Цикл
					Ошибка = "";
					Результат = УправлениеБизнесПроцессамиСервер.ЗавершитьБизнесПроцессНаСервере(СтрокаТЗ.Ссылка,Ошибка);	
					Если НЕ Результат Тогда
						Package = ПолучитьИнформациюОбОшибке(Ошибка);
						Результат = Ложь;
					КонецЕсли;
				КонецЦикла;
				УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(тзРезультат[0].Ссылка.РегламентноеЗадание);
				ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
				Если ТекущееРегламентноеЗадание <> Неопределено Тогда 
					ТекущееРегламентноеЗадание.Удалить();
				КонецЕсли;
			Иначе
				Для Каждого СтрокаТЗ из тзНеЗавершенные Цикл
					Объект = СтрокаТЗ.Ссылка.ПолучитьОбъект();
					//Если XDTO.Owner = Неопределено Тогда
					//	Объект.Удалить();
					//	Продолжить;
					//КонецЕсли;	
					
					Объект.ПометкаУдаления = XDTO.DeletionMark;
					Объект.Наименование = XDTO.Description;
					Объект.ИдентификаторПравила = СокрЛП(XDTO.Ref);
					Если ЗначениеЗаполнено(XDTO.Склад) Тогда
						Объект.СкладПроизводства = Справочники.Склады.НайтиПоКоду(XDTO.Склад,,XDTO.Owner);
						Объект.Поставщик = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.Owner);
					Иначе	
						Объект.Поставщик = Справочники.Контрагенты.НайтиПоКоду(XDTO.Owner);
					КонецЕсли;	
					Объект.ПредставлениеРасписания = XDTO.ПредставлениеРасписания; 
					Объект.ПериодРасчета = XDTO.ПериодРасчета; 
					//{БредовЮГ 2015-03-20 Наряд 000145565 от 20.03.2015 13:04:45
					Объект.ПоПротоколу = XDTO.ПоПротоколу; 
					//БредовЮГ 2015-03-20 Наряд 000145565 от 20.03.2015 13:04:45}
					//{БредовЮГ 2015-05-13 Наряд 000149975 от 08.05.2015 9:14:21
					Объект.Izh_ВариантРасчета = XDTO.Izh_ВариантРасчета;
					УникальныйИдентификаторМенеджер = Новый УникальныйИдентификатор(XDTO.Izh_Менеджер);
					Объект.Izh_Менеджер = Справочники.Пользователи.ПолучитьСсылку(УникальныйИдентификаторМенеджер);
					Объект.Izh_ПредельноеВремяЗаказа = XDTO.Izh_ПредельноеВремяЗаказа;
					//БредовЮГ  2015-05-13 Наряд 000149975 от 08.05.2015 9:14:21 } 
					
					Объект.КоэффициентЗаказа = XDTO.КоэффициентЗаказа; 
					Объект.СрокПоставки = XDTO.СрокПоставки; 
					Объект.ПроцентОкругления = XDTO.ПроцентОкругления;
					Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Location);
					Объект.ФильтрНоменклатуры.Очистить();
					Для Каждого Строка Из XDTO.Состав Цикл
						Номенклатура =  Справочники.Номенклатура.НайтиПоКоду(Строка.Номенклатура,Истина);
						Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
							Продолжить;
						КонецЕсли;	
						НоваяСтрока = Объект.ФильтрНоменклатуры.Добавить();
						НоваяСтрока.Номенклатура =  Номенклатура;
					КонецЦикла;
					
					//Если Объект.ФильтрНоменклатуры.Количество() = 0 Тогда
					//	Продолжить;
					//КонецЕсли;
					Объект.Записать();
				КонецЦикла;
				Если ПустаяСтрока(Объект.РегламентноеЗадание) Тогда
					Если НЕ Объект.ПометкаУдаления Тогда
						ТекущееРегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание("АвтоЗаказ");
						ТекущееРегламентноеЗадание.Использование = Истина;
						МассивПараметров = Новый Массив;
						МассивПараметров.Добавить(Объект.Ссылка);
						ТекущееРегламентноеЗадание.Параметры = МассивПараметров;
						// {ВетровИА 16.09.2015 Обращение №0000139579. 
						ТекущееРегламентноеЗадание.Наименование = Лев("Авто заказ " + Объект.Поставщик + " (" + XDTO.Description + ")", 120);
						// ВетровИА 16.09.2015 Обращение №0000139579.}
						ТекущееРегламентноеЗадание.Записать();
						Объект.РегламентноеЗадание = Строка(ТекущееРегламентноеЗадание.УникальныйИдентификатор);
					КонецЕсли;
				КонецЕсли;
				УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(Объект.РегламентноеЗадание);
				ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
				Если ТекущееРегламентноеЗадание <> Неопределено Тогда
					// {ВетровИА 16.09.2015 Обращение №0000139579. 
					ТекущееРегламентноеЗадание.Наименование = Лев("Авто заказ " + Объект.Поставщик + " (" + XDTO.Description + ")", 120);
					// ВетровИА 16.09.2015 Обращение №0000139579.}
					ТекущееРегламентноеЗадание.Записать();
					Расписание = XDTO.Расписание.Получить();
					РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(Строка(ТекущееРегламентноеЗадание.УникальныйИдентификатор),Расписание);
					Объект.ПредставлениеРасписания = Расписание;     //???
					Объект.Записать();
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

//////////////////////////////ListsItems/////////////////////////////////

Функция ListsItemsCre(Package)
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Ссылка = Справочники.СпискиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Если XDTO.IsFolder Тогда
				Объект = Справочники.СпискиНоменклатуры.СоздатьГруппу();
			Иначе
				Объект = Справочники.СпискиНоменклатуры.СоздатьЭлемент();
			КонецЕсли;	
			Ссылка = Справочники.СпискиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Если ЗначениеЗаполнено(XDTO.Parent) Тогда
			Объект.Родитель = Справочники.СпискиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Parent));
		КонецЕсли;	
		Объект.Наименование = XDTO.Description;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Если НЕ Объект.ЭтоГруппа Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
				Объект.Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Автор));
			КонецЕсли;	
			Объект.РазрешитьРедактировать = XDTO.РазрешитьРедактировать;
			Объект.СозданВЦентре = XDTO.СозданВЦентре;
			Если XDTO.Состав.Количество() > 0 Тогда
				Объект.Состав.Очистить();
			КонецЕсли;	
			Для Каждого Строка Из XDTO.Состав Цикл
				Номенклатура = ПолучитьНоменклатуруПоКоду(Строка.Номенклатура);
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					НоваяСтрока = Объект.Состав.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		Объект.Записать();
		Результат = Истина;
	Исключение
		Package = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции





//Процедура ЗаписьПромоАкции(Промо,Группа,Деталь,Package,АктивностьЗаписи)
Процедура ЗаписьПромоАкции(Промо ,Группа,Деталь,Package,АктивностьЗаписи)
	МенеджерЗаписи = РегистрыСведений.ПромоАкции.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаНачала = ПолучитьДатуXDTO(Промо.start_date);
	МенеджерЗаписи.ДатаОкончания = ПолучитьДатуXDTO(Промо.end_date);
	МенеджерЗаписи.IDПромо = Промо.promo_id;
	МенеджерЗаписи.IDКомпоненты = Промо.promo_comp_id;
	МенеджерЗаписи.IDДеталей = Деталь.promo_dtl_id;
	//МенеджерЗаписи.IDГруппы = Группа.listgroup_id;
	МенеджерЗаписи.Название = Промо.promo_name;
	МенеджерЗаписи.ОписаниеПромо = Промо.promo_description;
	МенеджерЗаписи.ОписаниеКомпонента = Промо.promo_comp_desc;
	МенеджерЗаписи.ТипКомпонента = Промо.promo_comp_type;
	МенеджерЗаписи.ТипПокупателя = Промо.customer_type_id;
	МенеджерЗаписи.ОписаниеДеталей = Деталь.description;
	МенеджерЗаписи.Пакет = Новый ХранилищеЗначения(Package, Новый СжатиеДанных());
	МенеджерЗаписи.ФлагНачала = АктивностьЗаписи;
	МенеджерЗаписи.ФлагОкончания = Ложь;
	МенеджерЗаписи.Записать();
КонецПроцедуры

Процедура ЗаписьПромоАкцииПакеты(Промо,Package,АктивностьЗаписи)
	МенеджерЗаписи = РегистрыСведений.ПромоАкцииПакеты.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаНачала = ПолучитьДатуXDTO(Промо.start_date);
	МенеджерЗаписи.ДатаОкончания = ПолучитьДатуXDTO(Промо.end_date);
	МенеджерЗаписи.IDПромо = Промо.promo_id;
	МенеджерЗаписи.IDКомпоненты = Промо.promo_comp_id;
	МенеджерЗаписи.Пакет = Новый ХранилищеЗначения(Package, Новый СжатиеДанных());
	МенеджерЗаписи.ФлагНачала = АктивностьЗаписи;
	МенеджерЗаписи.ФлагОкончания = Ложь;
	МенеджерЗаписи.Записать();
КонецПроцедуры

Процедура ЗаписьНоменклатурыПромоАкции(Промо,Группа,Деталь,Номенклатура)
	МенеджерЗаписи = РегистрыСведений.ПромоАкцииНоменклатура.СоздатьМенеджерЗаписи();
	НоменклатураСсылка = ПолучитьНоменклатуруПоКоду(Номенклатура.item_num);
	Если НоменклатураСсылка = Неопределено Тогда
		ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Номенклатура.item_num));
	КонецЕсли;
	МенеджерЗаписи.Номенклатура = НоменклатураСсылка;
	Для Каждого Строка Из Промо.ItemLocSimpleRetail Цикл
		Если Строка.item_num = Номенклатура.item_num И СтруктурныеЕдиницы.КодПринадлежитТекущейГруппеСЕ(Строка.location) Тогда
			//МенеджерЗаписи.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.selling_uom,,,МенеджерЗаписи.Номенклатура);
			МенеджерЗаписи.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.selling_uom,МенеджерЗаписи.Номенклатура); //dps 15,10,05
			МенеджерЗаписи.Цена = Число(Строка.selling_retail);
		КонецЕсли;	
	КонецЦикла;
	МенеджерЗаписи.IDПромо = Промо.promo_id;
	МенеджерЗаписи.IDКомпоненты = Промо.promo_comp_id;
	МенеджерЗаписи.IDДеталей = Деталь.promo_dtl_id;
	//МенеджерЗаписи.IDГруппы = Группа.listgroup_id;
	МенеджерЗаписи.Записать();
КонецПроцедуры

Процедура ЗаписьПороговПромоАкции(Промо,Группа,Деталь,Порог,НомерПорога)
	МенеджерЗаписи = РегистрыСведений.ПромоАкцииПороги.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.IDПромо = Промо.promo_id;
	МенеджерЗаписи.IDКомпоненты = Промо.promo_comp_id;
	МенеджерЗаписи.IDДеталей = Промо.promo_dtl_id;
	//МенеджерЗаписи.IDГруппы = Группа.listgroup_id;
	МенеджерЗаписи.IDПорога = НомерПорога;
	Если Порог.chg_type = 0 Тогда
		МенеджерЗаписи.ТипПромо = Перечисления.ТипыИзмененияПромо.ПроцентСкидки;
		МенеджерЗаписи.Значение = Порог.chg_percent;
	ИначеЕсли Порог.chg_type = 1 Тогда
		МенеджерЗаписи.ТипПромо = Перечисления.ТипыИзмененияПромо.СуммаСкидки;
		МенеджерЗаписи.Значение = Порог.chg_amt;
		МенеджерЗаписи.Валюта = Справочники.Валюты.НайтиПоНаименованию(Порог.chg_currency);
	ИначеЕсли Порог.chg_type = 2 Тогда
		МенеджерЗаписи.ТипПромо = Перечисления.ТипыИзмененияПромо.ФиксированнаяЦена;
		МенеджерЗаписи.Значение = Порог.chg_amt;
		МенеджерЗаписи.Валюта = Справочники.Валюты.НайтиПоНаименованию(Порог.chg_currency);
	ИначеЕсли Порог.chg_type = -1 Тогда
		МенеджерЗаписи.ТипПромо = Перечисления.ТипыИзмененияПромо.БезИзменения;
	ИначеЕсли Порог.chg_type = 4 Тогда
		МенеджерЗаписи.ТипПромо = Перечисления.ТипыИзмененияПромо.Исключить;
	ИначеЕсли Порог.chg_type = 6 Тогда
		МенеджерЗаписи.ТипПромо = Перечисления.ТипыИзмененияПромо.СамыйДешевыйБесплатно;
	КонецЕсли;	
	Если Порог.qual_type = 1 Тогда
		МенеджерЗаписи.ТипПорога = Перечисления.ТипыПорога.Сумма;
	ИначеЕсли Порог.qual_type = 2 Тогда
		МенеджерЗаписи.ТипПорога = Перечисления.ТипыПорога.Количество;
	Иначе	
		МенеджерЗаписи.ТипПорога = Перечисления.ТипыПорога.Все;
	КонецЕсли;	
	МенеджерЗаписи.ЗначениеПорога = Порог.qual_value;
	МенеджерЗаписи.Записать();
КонецПроцедуры

Процедура УдалитьПромоАкции(Промо,Группа = Неопределено,Деталь = Неопределено,Номенклатура = Неопределено)
	НаборЗаписей = РегистрыСведений.ПромоАкции.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.IDПромо.Установить(Промо.promo_id);
	НаборЗаписей.Отбор.IDКомпоненты.Установить(Промо.promo_comp_id);
	//Если Группа <> Неопределено Тогда
	//	НаборЗаписей.Отбор.IDГруппы.Установить(Группа.listgroup_id);
	//КонецЕсли;	
	//Если Деталь <> Неопределено Тогда
	НаборЗаписей.Отбор.IDДеталей.Установить(Промо.promo_dtl_id);
	//КонецЕсли;	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	НаборЗаписей = РегистрыСведений.ПромоАкцииНоменклатура.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.IDПромо.Установить(Промо.promo_id);
	НаборЗаписей.Отбор.IDКомпоненты.Установить(Промо.promo_comp_id);
	//Если Группа <> Неопределено Тогда
	//	НаборЗаписей.Отбор.IDГруппы.Установить(Группа.listgroup_id);
	//КонецЕсли;	
	//Если Деталь <> Неопределено Тогда
	НаборЗаписей.Отбор.IDДеталей.Установить(Промо.promo_dtl_id);
	//КонецЕсли;	
	Если Номенклатура <> Неопределено Тогда
		НаборЗаписей.Отбор.Номенклатура.Установить(ПолучитьНоменклатуруПоКоду(Номенклатура.item_num));
	КонецЕсли;	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	НаборЗаписей = РегистрыСведений.ПромоАкцииПороги.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.IDПромо.Установить(Промо.promo_id);
	НаборЗаписей.Отбор.IDКомпоненты.Установить(Промо.promo_comp_id);
	//Если Группа <> Неопределено Тогда
	//	НаборЗаписей.Отбор.IDГруппы.Установить(Группа.listgroup_id);
	//КонецЕсли;	
	//Если Деталь <> Неопределено Тогда
	НаборЗаписей.Отбор.IDДеталей.Установить(Промо.promo_dtl_id);
	//КонецЕсли;	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры

Функция ЕстьЗаписьВРегистреЦеныНоменклатуры(СтруктурнаяЕдиница,Номенклатура,ЕдиницаИзмерения,ID)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Номенклатура = &Номенклатура
	|	И ЦеныНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ЦеныНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	И ЦеныНоменклатуры.ID = &ID";
	
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции	

Функция ЕстьЗаписьВРегистреПромоАкции(XDTO,Группа,Деталь)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПромоАкции.ДатаНачала
	|ИЗ
	|	РегистрСведений.ПромоАкции КАК ПромоАкции
	|ГДЕ
	|	ПромоАкции.IDПромо = &IDПромо
	|	И ПромоАкции.IDКомпоненты = &IDКомпоненты
	|	И ПромоАкции.IDГруппы = &IDГруппы
	|	И ПромоАкции.IDДеталей = &IDДеталей";
	
	Запрос.УстановитьПараметр("IDПромо", XDTO.promo_id);
	Запрос.УстановитьПараметр("IDКомпоненты", XDTO.promo_comp_id);
	Запрос.УстановитьПараметр("IDГруппы", Группа.listgroup_id);
	Запрос.УстановитьПараметр("IDДеталей", Деталь.listdtl_id);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции	

Функция ПромоАкцияЗавершена(СтруктураПромоИдентификаторы, СтруктурнаяЕдиница)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПромоАкции.ФлагОкончания
	|ИЗ
	|	РегистрСведений.ПромоАкции КАК ПромоАкции
	|ГДЕ
	|	ПромоАкции.IDПромо = &IDПромо
	|	И ПромоАкции.IDКомпоненты = &IDКомпоненты
	|	И ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	//|	И ПромоАкции.IDГруппы = &IDГруппы
	|	И ПромоАкции.IDДеталей = &IDДеталей";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("IDПромо", СтруктураПромоИдентификаторы.IDПромо);
	Запрос.УстановитьПараметр("IDКомпоненты", СтруктураПромоИдентификаторы.IDКомпоненты);
	//Запрос.УстановитьПараметр("IDГруппы", СтруктураПромоИдентификаторы.IDГруппы);
	Запрос.УстановитьПараметр("IDДеталей", СтруктураПромоИдентификаторы.IDДеталей);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Рез = Ложь;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Рез = Выборка.ФлагОкончания;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции	

Функция ЕстьЗаписьВРегистреПромоАкцииПакеты(XDTO)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПромоАкции.ДатаНачала
	|ИЗ
	|	РегистрСведений.ПромоАкцииПакеты КАК ПромоАкции
	|ГДЕ
	|	ПромоАкции.IDПромо = &IDПромо
	|	И ПромоАкции.IDКомпоненты = &IDКомпоненты";
	
	Запрос.УстановитьПараметр("IDПромо", XDTO.promo_id);
	Запрос.УстановитьПараметр("IDКомпоненты", XDTO.promo_comp_id);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции	


//////////////////////процедуры получения данных из RMS////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////
//////////////////////процедуры получения данных из Финансов///////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВерсиюОбменаФинансы()
	
	ВерсияОбмена = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВерсияОбменаФинансы);
	
	Если НЕ ЗначениеЗаполнено(ВерсияОбмена) Тогда
		ВерсияОбмена = Константы.ВерсияОбменаФинансы.Получить();
	КонецЕсли;	
	
	Возврат ВерсияОбмена;
	
КонецФункции

Функция Финансы_Организации(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_Организации(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_Организации(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_СтатьиДДС(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_СтатьиДДС(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_СтатьиДДС(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_БанковскиеСчета(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_БанковскиеСчета(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_БанковскиеСчета(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_КассыФирмы(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_КассыФирмы(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_КассыФирмы(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_Контрагенты(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_Контрагенты(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_Контрагенты(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_ФизическиеЛица(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_ФизическиеЛица(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_ФизическиеЛица(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

//popn+
Функция Финансы_ПаспортныеДанныеФизЛиц(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_ПаспортныеДанныеФизЛиц(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_ПаспортныеДанныеФизЛиц(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции
//popn-

Функция Финансы_КредитныеКарты(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_КредитныеКарты(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_КредитныеКарты(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_ВидыСписания(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_ВидыСписания(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_ВидыСписания(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_УчетнаяПолитикаНалоговыйУчет(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_УчетнаяПолитикаНалоговыйУчет(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_УчетнаяПолитикаНалоговыйУчет(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_ДополнительныеРеквизитыОрганизаций(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_ДополнительныеРеквизитыОрганизаций(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_ДополнительныеРеквизитыОрганизаций(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_ДополнительныеРеквизитыСтруктурныхЕдиниц(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_ДополнительныеРеквизитыСтруктурныхЕдиниц(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_ДополнительныеРеквизитыСтруктурныхЕдиниц(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_ДополнительныеРеквизитыКонтрагентов(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_ДополнительныеРеквизитыКонтрагентов(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_ДополнительныеРеквизитыКонтрагентов(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция Финансы_ЗначенияСвойствОбъектов(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		Результат = ОбменДаннымиТД6СерверV2.Финансы_ЗначенияСвойствОбъектов(Package);	
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_ЗначенияСвойствОбъектов(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

//{КотлячковаЕВ 2014-06-18 08:56:10 Наряд № 000118830
Функция Финансы_ЗначенияСвойств(Package)
	ВерсияОбмена = ПолучитьВерсиюОбменаФинансы();
	Если ВерсияОбмена = Перечисления.ВерсииОбменаФинансы.v2 Тогда
		//++Минин 0000122542 2015-04-10 В RS версия обмена V2. Тк всегда ложь, то свойства не попадали.
		//Результат =  Ложь;
		Результат = ОбменДаннымиТД6СерверV2.Финансы_ЗначенияСвойств(Package);	
		//++Минин 0000122542 2015-04-10 В RS версия обмена V2. Тк всегда ложь, то свойства не попадали.
	Иначе
		Результат = ОбменДаннымиТД6СерверV1.Финансы_ЗначенияСвойств(Package);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

//КотлячковаЕВ 2014-06-18 08:56:10 }

Функция VendorOUMod(Package)
	Возврат VendorCre(Package);
КонецФункции

//////////////////////процедуры получения данных из Финансов///////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
