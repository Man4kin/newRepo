Процедура ОбменДанными(Ссылка) Экспорт
	Результат = Истина;
	Попытка
		FTP = Константы.FTPRMS.Получить();
		Прокси = Константы.НастройкаПроксиСервера.Получить().Получить();
		Соединение = Новый FTPСоединение(FTP.URL, FTP.Порт, FTP.Имя, FTP.Пароль, Прокси, FTP.ПасссивныйРежим, FTP.Таймаут);
		Каталог = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(FTP.ИмяКаталога,"ORDM");
		//Если Соединение.НайтиФайлы(Каталог).Количество() = 0 Тогда
		//	Соединение.СоздатьКаталог(Каталог);
		//КонецЕсли;	
		Соединение.УстановитьТекущийКаталог(Каталог);
	Исключение
		Ошибка = ОписаниеОшибки();
		ВызватьИсключение(Ошибка);
	КонецПопытки;
	
	ВсеОшибки = "";
	МагазинВсеОтправлено = истина;
	
	если ПараметрыСеанса.ЭтоЦентр тогда
		// обмен для центра
		ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/RS/ORDM", "Packets");
		Пакеты = ФабрикаXDTO.Создать(ТипДокумента);
		
		КоличествоПакетов = 0;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Метаданные.ПланыВидовХарактеристик.Сертификаты);
		МассивТипов.Добавить(Метаданные.Справочники.Сертификаты);
		МассивТипов.Добавить(Метаданные.РегистрыСведений.ДанныеСертификатов);
		
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1,МассивТипов);
		Пока ВыборкаИзменений.Следующий() Цикл
			Ошибка = "";
			Объект = ВыборкаИзменений.Получить();
			ТипОбъекта = ТипЗнч(Объект);
			Ушло = Ложь;
			Если ТипОбъекта = Тип("ПланВидовХарактеристикОбъект.Сертификаты") Тогда
				КоличествоПакетов = КоличествоПакетов + 1;
				Ушло = ОтправитьСертификаты(Объект,Пакеты,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ДанныеСертификатов") Тогда
				КоличествоПакетов = КоличествоПакетов + 1;
				Ушло = ОтправитьДанныеСертификатов(Объект,Пакеты,Ошибка);
			ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Сертификаты") Тогда
				КоличествоПакетов = КоличествоПакетов + 1;
				Ушло = ОтправитьСправочникСертификаты(Объект,Пакеты,Ошибка);
			Иначе	
				Ушло = Ложь;
			КонецЕсли;	
			Если Ушло Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
			КонецЕсли; 
		КонецЦикла;
		Если КоличествоПакетов <> 0 Тогда
			Результат = ОтправитьСообщение(Пакеты,Соединение,"Packets_Certifications");
			ВсеОшибки = Пакеты;
		КонецЕсли;
		Пакеты = ФабрикаXDTO.Создать(ТипДокумента);
		КоличествоПакетов = 0;
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1,Метаданные.Справочники.ККМ);
		Пока ВыборкаИзменений.Следующий() Цикл
			Ошибка = "";
			Объект = ВыборкаИзменений.Получить();
			Ушло = Ложь;
			КоличествоПакетов = КоличествоПакетов + 1;
			Ушло = ОтправитьККМ(Объект,Пакеты,Ошибка);
			Если Ушло Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
			КонецЕсли; 
		КонецЦикла;
		Если КоличествоПакетов <> 0 Тогда
			Результат = ОтправитьСообщение(Пакеты,Соединение,"Packets_POS");
			ВсеОшибки = Пакеты;
		КонецЕсли;
		Пакеты = ФабрикаXDTO.Создать(ТипДокумента);
		КоличествоПакетов = 0;
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1,Метаданные.Справочники.ПерсоналККМ);
		Пока ВыборкаИзменений.Следующий() Цикл
			Ошибка = "";
			Объект = ВыборкаИзменений.Получить();
			Ушло = Ложь;
			КоличествоПакетов = КоличествоПакетов + 1;
			Ушло = ОтправитьПерсоналККМ(Объект,Пакеты,Ошибка);
			Если Ушло Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
			КонецЕсли; 
		КонецЦикла;
		Если КоличествоПакетов <> 0 Тогда
			Результат = ОтправитьСообщение(Пакеты,Соединение,"Packets_PersonnelPOS");
			ВсеОшибки = Пакеты;
		КонецЕсли;
		Пакеты = ФабрикаXDTO.Создать(ТипДокумента);
		КоличествоПакетов = 0;
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1,Метаданные.Справочники.КредитныеКарты);
		Пока ВыборкаИзменений.Следующий() Цикл
			Ошибка = "";
			Объект = ВыборкаИзменений.Получить();
			Ушло = Ложь;
			КоличествоПакетов = КоличествоПакетов + 1;
			Ушло = ОтправитьКредитныеКарты(Объект,Пакеты,Ошибка);
			Если Ушло Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
			КонецЕсли; 
		КонецЦикла;
		Если КоличествоПакетов <> 0 Тогда
			Результат = ОтправитьСообщение(Пакеты,Соединение,"Packets_FormsOfPayment");
			ВсеОшибки = Пакеты;
		КонецЕсли;
		
	иначе
		// обмен для магазина
		// отправка цен активированных через БП "НоваяЦена" в ORDM
		ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/RS/ORDM", "Out1_PriceChange");
		
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1,Метаданные.БизнесПроцессы.НоваяЦена);
		
		пока ВыборкаИзменений.Следующий() цикл
			
			Запрос = новый Запрос;
		
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЦеныНоменклатуры.Период КАК Период,
			               |	ЦеныНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
			               |	ЦеныНоменклатуры.Номенклатура,
			               |	ЦеныНоменклатуры.ЕдиницаИзмерения,
			               |	ЦеныНоменклатуры.ID КАК ID,
			               |	ЦеныПоБизнесПроцессу.СсылкаБП КАК СсылкаБП,
			               |	ЦеныНоменклатуры.Цена,
			               |	ЦеныНоменклатуры.Валюта
			               |ИЗ
			               |	(ВЫБРАТЬ
			               |		НоваяЦенаСостав.Номенклатура КАК Номенклатура,
			               |		НоваяЦенаСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			               |		НоваяЦенаСостав.ID КАК ID,
			               |		НоваяЦенаСостав.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
			               |		НоваяЦенаСостав.Ссылка КАК СсылкаБП
			               |	ИЗ
			               |		БизнесПроцесс.НоваяЦена.Состав КАК НоваяЦенаСостав
			               |	ГДЕ
			               |		НоваяЦенаСостав.Ссылка = &Ссылка) КАК ЦеныПоБизнесПроцессу
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			               |		ПО ЦеныПоБизнесПроцессу.Номенклатура = ЦеныНоменклатуры.Номенклатура
			               |			И ЦеныПоБизнесПроцессу.ЕдиницаИзмерения = ЦеныНоменклатуры.ЕдиницаИзмерения
			               |			И ЦеныПоБизнесПроцессу.ID = ЦеныНоменклатуры.ID
			               |			И ЦеныПоБизнесПроцессу.СтруктурнаяЕдиница = ЦеныНоменклатуры.СтруктурнаяЕдиница
			               |ГДЕ
			               |	ЦеныНоменклатуры.АктивностьЗаписи = ИСТИНА
			               |ИТОГИ ПО
			               |	Период,
			               |	СтруктурнаяЕдиница,
			               |	ID,
			               |	СсылкаБП";
						   
			Объект = ВыборкаИзменений.Получить();
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаПоПериоду = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			пока ВыборкаПоПериоду.Следующий() цикл
			
				ВыборкаПоСЕ = ВыборкаПоПериоду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
				пока ВыборкаПоСЕ.Следующий() цикл
			
				    ВыборкаПоID = ВыборкаПоСЕ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					пока ВыборкаПоID.Следующий() цикл
						
						ВыборкаПоБП = ВыборкаПоID.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						пока ВыборкаПоБП.Следующий() цикл
							
							ВыборкаПоЗаписям = ВыборкаПоБП.Выбрать();
							
							СтрЗаголовок = новый Структура;
							СтрЗаголовок.Вставить("Период",ВыборкаПоID.Период);
							СтрЗаголовок.Вставить("СтруктурнаяЕдиница",ВыборкаПоID.СтруктурнаяЕдиница);
							СтрЗаголовок.Вставить("ID",ВыборкаПоID.ID);
							СтрЗаголовок.Вставить("ДатаАктивации",УправлениеБизнесПроцессамиСервер.ДатаЗавершенияБизнесПроцесса(Объект.Ссылка));
								
							ПакетЦены = ФабрикаXDTO.Создать(ТипДокумента);
								
							СформироватьПакетЦеныНоменклатуры(СтрЗаголовок,ВыборкаПоЗаписям,ПакетЦены);
								
							Ушло = ОтправитьСообщение(ПакетЦены,Соединение,"Packets_PriceList");
							
							если Ушло тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
							иначе	
								МагазинВсеОтправлено = ложь;
							конецесли;
							
						конеццикла;
					конеццикла;
				конеццикла;		   
			конеццикла;
			
		конеццикла;

	конецесли;
	
	Соединение = Неопределено;
	если ПараметрыСеанса.ЭтоЦентр тогда
		Если ВсеОшибки <> "" Тогда
			ВызватьИсключение(ВсеОшибки);
		КонецЕсли;	
	иначе
		если не МагазинВсеОтправлено тогда
			ВызватьИсключение("Не все пакеты с активацией цен были отправлены!");
		конецесли;	
	конецесли;	
	
КонецПроцедуры
 
Функция ОтправитьСообщение(Package,Соединение,Имя)
	ДатаТекущая = ТекущаяДата();
	Дата = Формат(ДатаТекущая,"ДФ=yyyyMMdd");
	Час = ДобавитьСлева(Час(ДатаТекущая),2,0);
	Минута = ДобавитьСлева(Минута(ДатаТекущая),2,0);
	Секунда = ДобавитьСлева(Секунда(ДатаТекущая),2,0);

	ФорматДаты = Дата+Час+Минута+Секунда;
	
	ЗаписьXML = Новый ЗаписьXML;
	стрИмяФайла = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), Имя+"_"+ФорматДаты+".xml");
	стрИмяФайлаПриемника = Имя+"_"+ФорматДаты+".xml";
	ЗаписьXML.ОткрытьФайл(стрИмяФайла);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Package,Имя,,,НазначениеТипаXML.Явное);
	ЗаписьXML.Закрыть();
	
	Результат = Истина;
	Попытка
		Соединение.Записать(стрИмяФайла, стрИмяФайлаПриемника);
		Package = "";
	Исключение
		Package = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"Обмен ORDM");
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ОтправитьСертификаты(Объект,Пакеты,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/RS/ORDM", "ChartOfCharacteristicTypesObject_Сертификаты");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.IsFolder = Объект.ЭтоГруппа;
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Parent = Строка(Объект.Родитель.УникальныйИдентификатор());
	Пакет.Code = Объект.Код;
	Пакет.Description = Объект.Наименование;
	Пакет.ValueType = Строка(Объект.ТипЗначения);
	Пакеты.Packet.Добавить(Пакет);
	Возврат Истина;
КонецФункции

Функция ОтправитьСправочникСертификаты(Объект,Пакеты,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/RS/ORDM", "CatalogObject_Сертификаты");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Description = Объект.Наименование;
	Пакет.ДатаС = Объект.ДатаС;
	Пакет.ДатаПо = Объект.ДатаПо;
	Пакет.ОрганСертификации = Объект.ОрганСертификации.Наименование;
	Пакет.Содержание = Объект.Содержание;
	Пакет.Производитель = Объект.Производитель.Код;
	Пакет.Description = Объект.Страна.Наименование;
	Пакет.Комментарий = Объект.Комментарий;
	Пакеты.Packet.Добавить(Пакет);
	Возврат Истина;
КонецФункции

Функция ОтправитьДанныеСертификатов(Объект,Пакеты,Ошибка)
	Если Объект.Количество() > 0 Тогда
		ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/RS/ORDM", "InformationRegisterRecord_ДанныеСертификатов");
		Пакет = ФабрикаXDTO.Создать(ТипДокумента);
		Пакет.Номенклатура = Объект[0].Номенклатура;
		Пакет.Сертификат = Строка(Объект[0].Сертификат.УникальныйИдентификатор());
		Пакет.Значение = Строка(Объект[0].Значение.УникальныйИдентификатор());
		Пакеты.Packet.Добавить(Пакет);
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ОтправитьККМ(Объект,Пакеты,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/RS/ORDM", "CatalogObject_ККМ");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Owner = Формат(Объект.Владелец.Код,"ЧГ=");
	Пакет.Code = Формат(Объект.Код,"ЧГ=");
	Пакет.Description = Объект.Наименование;
	Пакеты.Packet.Добавить(Пакет);
	Возврат Истина;
КонецФункции

Функция ОтправитьПерсоналККМ(Объект,Пакеты,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/RS/ORDM", "CatalogObject_ПерсоналККМ");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Code = Объект.Сотрудник.Код;
	Пакет.ФИО = Объект.Сотрудник.Наименование;
	Пакеты.Packet.Добавить(Пакет);
	Возврат Истина;
КонецФункции

Функция ОтправитьКредитныеКарты(Объект,Пакеты,Ошибка)
	ТипДокумента = ФабрикаXDTO.Тип("http://1c-astor.ru/RS/ORDM", "CatalogObject_КредитныеКарты");
	Пакет = ФабрикаXDTO.Создать(ТипДокумента);
	Пакет.Ref = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Пакет.DeletionMark = Объект.ПометкаУдаления;
	Пакет.Code = Формат(Объект.Код,"ЧГ=");
	Пакет.Description = Объект.Наименование;
	Пакеты.Packet.Добавить(Пакет);
	Возврат Истина;
КонецФункции

процедура СформироватьПакетЦеныНоменклатуры(СтрПараметрыПакета,ВыборкаЦен,Пакет)
	
	Пакет.doc_num = СтрПараметрыПакета.ID;
	Пакет.obj_type = 1;
	Пакет.obj_code = СтрПараметрыПакета.СтруктурнаяЕдиница.Код;
	Пакет.doc_date = СтрПараметрыПакета.Период;
	Пакет.price_date = СтрПараметрыПакета.ДатаАктивации;
	Пакет.mode = "N";
	
	ТипЦенаНоменклатуры = ФабрикаXDTO.Тип("http://1c-astor.ru/RS/ORDM", "Out1_PriceChange_price_list");
	
	пока ВыборкаЦен.Следующий() цикл
		ПакетСостав = ФабрикаXDTO.Создать(ТипЦенаНоменклатуры);
		ПакетСостав.price_sale = ВыборкаЦен.Цена;
		ПакетСостав.gds_code =  ВыборкаЦен.Номенклатура.Код;
		ПакетСостав.corr_num_line = СтрПараметрыПакета.ID;
		Пакет.price_list.Добавить(ПакетСостав);
	конеццикла;	
	
конецпроцедуры

Функция ДобавитьСлева(Стр,КоличествоСимволов,Символ)
	Строка = Стр;
	Если СтрДлина(Строка)>=КоличествоСимволов Тогда
		Возврат Лев(Строка,КоличествоСимволов);
	КонецЕсли;	
	Пока СтрДлина(Строка) < КоличествоСимволов Цикл
		Строка = Строка(Символ) + Строка(Строка);
	КонецЦикла;	
	Возврат Строка;
КонецФункции	

Процедура ЗарегистрироватьВОбменахСправочник(Объект, Отказ) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если ПараметрыСеанса.ЭтоЦентр Тогда
		Выборка = ПланыОбмена.ОбменORDM.Выбрать();
		ЭтотУзел = ПланыОбмена.ОбменORDM.ЭтотУзел();
		Пока Выборка.Следующий() Цикл
			Узел = Выборка.Ссылка;
			Если Узел = ЭтотУзел Тогда
				Продолжить;
			КонецЕсли;
			ПланыОбмена.ЗарегистрироватьИзменения(Узел,Объект);	
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры
