Функция ПолучитьОбъектXDTO(Текст) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Текст);
	ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипДанныхXML = Неопределено Тогда
		XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Иначе	
		ПространствоИмен = ТипДанныхXML.URIПространстваИмен;
		ИмяТипа = ТипДанныхXML.ИмяТипа;
		Если НЕ ЗначениеЗаполнено(ПространствоИмен) Тогда
			ПространствоИмен = Метаданные.ПакетыXDTO[ИмяТипа].ПространствоИмен;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИмяТипа) Тогда
			ИмяТипа = ПространствоИмен;
			Пока Найти(ИмяТипа,"/")<>0 Цикл
				ИмяТипа = Сред(ИмяТипа,Найти(ИмяТипа,"/")+1);
			КонецЦикла;	
		КонецЕсли;
		Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
		Если Пакет.КорневыеСвойства.Количество() = 0 Тогда
			Тип = Пакет.Получить(ИмяТипа);
		Иначе	
			Тип = Пакет.КорневыеСвойства.Получить(ИмяТипа).Тип;
		КонецЕсли;	
		XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип);
	КонецЕсли;	
	Возврат XDTO;
КонецФункции

Функция Получение(Package) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	XDTO = ПолучитьОбъектXDTO(Package);
	//Прочитаем, что прислали
	МассивКодов = Новый Массив; //Список кодов
	Результат = Ложь;
	Попытка
		Для Каждого СтрокаСостава Из XDTO.Состав Цикл
			МассивКодов.Добавить(СтрокаСостава.Номенклатура);
		КонецЦикла;	
		
		//Получим остатки
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ОстаткиНоменклатурыОстатки.МестоХранения.Код, ЗаказыИсходящиеОстатки.ПоДокументу.Склад.Код) КАК Склад,
		|	ЕСТЬNULL(ОстаткиНоменклатурыОстатки.Номенклатура.Код, ЗаказыИсходящиеОстатки.Номенклатура.Код) КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(ЗаказыИсходящиеОстатки.КоличествоОстаток, 0) КАК ВПутиРЦ
		|ИЗ
		|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(&Дата, Номенклатура.Код В (&СписокКодов)) КАК ОстаткиНоменклатурыОстатки
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыИсходящие.Остатки(
		|				&Дата,
		|				Номенклатура.Код В (&СписокКодов)
		|					И (ПоДокументу.ДатаПоставкиДо МЕЖДУ &ТекДата И &Дата)) КАК ЗаказыИсходящиеОстатки
		|		ПО ОстаткиНоменклатурыОстатки.Номенклатура = ЗаказыИсходящиеОстатки.Номенклатура";
		
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		Запрос.УстановитьПараметр("Дата", XDTO.Дата);
		Запрос.УстановитьПараметр("СписокКодов", МассивКодов);
		
		Результат = Запрос.Выполнить();
		Товары=Результат.Выгрузить();
		//Результат с остатками упакуем в обратный параметр
		PackageТип=ФабрикаXDTO.Тип("http://1c-astor.ru/Rests","ЗаказНаРЦ");
		Package_СоставТип=ФабрикаXDTO.Тип("http://1c-astor.ru/Rests","Состав_ЗаказНаРЦ");
		
		Данные=ФабрикаXDTO.Создать(PackageТип);
		Для Каждого СтрокаТовары Из Товары Цикл
			СтрокаСостав=ФабрикаXDTO.Создать(Package_СоставТип);
			СтрокаСостав.Номенклатура=СтрокаТовары.Номенклатура;
			СтрокаСостав.Склад=СтрокаТовары.Склад;
			СтрокаСостав.Количество=СтрокаТовары.КоличествоОстаток;
			СтрокаСостав.ВПутиРЦ=СтрокаТовары.ВПутиРЦ;
			Данные.Состав.Добавить(СтрокаСостав);
		КонецЦикла;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Данные,"ЗаказНаРЦ");
		Package = ЗаписьXML.Закрыть();
		Результат = Истина;			
	Исключение
		ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция Оправка(Товары, СтруктурнаяЕдиница, ДатаОт) Экспорт
	ТипСтрока=Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипЧисло=Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(20,4));
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Код",ТипСтрока);
	ТаблицаНоменклатуры.Колонки.Добавить("Количество",ТипЧисло);
	ТаблицаНоменклатуры.Колонки.Добавить("КодСклада",ТипЧисло);
	ТаблицаНоменклатуры.Колонки.Добавить("ВПутиРЦ",ТипЧисло);
	
	PackageТип=ФабрикаXDTO.Тип("http://1c-astor.ru/Rests","ЗаказНаРЦ");
	Package_СоставТип=ФабрикаXDTO.Тип("http://1c-astor.ru/Rests","Состав_ЗаказНаРЦ");
	Данные=ФабрикаXDTO.Создать(PackageТип);
	Данные.Дата = ДатаОт;
	Для Каждого СтрокаТовары Из Товары Цикл
		СтрокаСостав=ФабрикаXDTO.Создать(Package_СоставТип);
		СтрокаСостав.Номенклатура=СтрокаТовары.Номенклатура.Код;
		СтрокаСостав.Склад=0;
		СтрокаСостав.Количество=0;
		СтрокаСостав.ВПутиРЦ=0;
		Данные.Состав.Добавить(СтрокаСостав);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Данные,"ЗаказНаРЦ");
	Package = ЗаписьXML.Закрыть();
	
	Попытка
		ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRests,СтруктурнаяЕдиница);
		Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
		URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		Прокси.Пользователь = ВебСервис.Имя;
		Прокси.Пароль = ВебСервис.Пароль;
		Результат = Прокси.SendData(Package);
		
		XDTO = ПолучитьОбъектXDTO(Package);
		//Прочитаем, что прислали
		Для Каждого СтрокаСостава Из XDTO.Состав Цикл
			СтрокаТаблицы=ТаблицаНоменклатуры.Добавить();
			СтрокаТаблицы.Код=СтрокаСостава.Номенклатура;
			СтрокаТаблицы.Количество=СтрокаСостава.Количество;
			СтрокаТаблицы.ВПутиРЦ=СтрокаСостава.ВПутиРЦ;
			СтрокаТаблицы.КодСклада=СтрокаСостава.Склад;
		КонецЦикла;	
		
		Если Результат Тогда
			Возврат  ТаблицаНоменклатуры;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		ВызватьИсключение "Возникла ошибка при получении остатков с РЦ , повторите позднее ("+ОписаниеОшибки()+")";
	КонецПопытки;
	Возврат ТаблицаНоменклатуры;
КонецФункции


//{БредовЮГ 2015-04-16 Наряд 000147443 от 09.04.2015 13:53:18
// {БредовЮГ 2015-04-16 Наряд 000147443 от 09.04.2015 13:53:18
//
// Параметры:
//  Package	 - 	 - 
// Возвращаемое значение:
//   - 
Функция ОбработкаЗапроса_ReceiveRegisterRecords(Package) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		XDTO = ПолучитьОбъектXDTO(Package);
		Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад,,,СтруктурнаяЕдиница);
		ДатаНачала = XDTO.ДатаНачала;
		ДатаОкончания = XDTO.ДатаОкончания;
		МассивКодов = Новый Массив;
		Для Каждого СтрокаСостава из XDTO.Состав Цикл
			МассивКодов.Добавить(СтрокаСостава.Номенклатура);	
		КонецЦикла;
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ОстаткиНоменклатурыОстаткиИОбороты.Фирма.Код КАК Фирма,
		|	ОстаткиНоменклатурыОстаткиИОбороты.Номенклатура.Код КАК Номенклатура,
		
		|	ЕстьNULL(ОстаткиНоменклатурыОстаткиИОбороты.Регистратор.Представление,"""") КАК Регистратор,
		|	ОстаткиНоменклатурыОстаткиИОбороты.КоличествоНачальныйОстаток КАК НачальныйОстаток,
		|	ОстаткиНоменклатурыОстаткиИОбороты.КоличествоПриход КАК Приход,
		|	ОстаткиНоменклатурыОстаткиИОбороты.КоличествоРасход КАК Расход,
		|	ОстаткиНоменклатурыОстаткиИОбороты.КоличествоКонечныйОстаток КАК КонечныйОстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиНоменклатуры.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Движения,
		|				МестоХранения = &Склад
		|				И Номенклатура.Код В (&МассивКодов)) КАК ОстаткиНоменклатурыОстаткиИОбороты");
		Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
		Запрос.УстановитьПараметр("Склад",Склад);
		Запрос.УстановитьПараметр("МассивКодов",МассивКодов);
		РезультатЗапроса = Запрос.Выполнить();
		
		PackageТип=ФабрикаXDTO.Тип("http://1c-astor.ru/Rests","РезультатОтчета");
		Package_СоставТип=ФабрикаXDTO.Тип("http://1c-astor.ru/Rests","РезультатОтчета_Состав");
		Данные=ФабрикаXDTO.Создать(PackageТип);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаСостав=ФабрикаXDTO.Создать(Package_СоставТип);
				ЗаполнитьЗначенияСвойств(СтрокаСостав,Выборка);
				Данные.Состав.Добавить(СтрокаСостав);
			КонецЦикла;
		КонецЕсли;
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Данные,"РезультатОтчета");
		Package = ЗаписьXML.Закрыть();
		Результат = Истина;			
	Исключение
		ЗаписьЖурналаРегистрации("WebService",УровеньЖурналаРегистрации.Ошибка,Метаданные.WebСервисы.Rests,,ОписаниеОшибки());
	КонецПопытки;
	Возврат Результат; 
КонецФункции

// Функция - Отправка запроса receive register records
//
// Параметры:
//  ДатаНачала			 Дата - 	 - 
//  ДатаОкончания		 Дата - 	 - 
//  Фирма				 СправочникСсылка.Фирма - 	 - 
//  Склад				 СправочникСсылка.Склад - 	 - 
//  СтруктурнаяЕдиница	 СправочникСсылка.СтруктурнаяЕдиница - 	 - 
//  МассивНоменклатуры	 Массив - 	 - 
// Возвращаемое значение:
//   - 
Функция ОтправкаЗапроса_ReceiveRegisterRecords(ДатаНачала,ДатаОкончания,Фирма,Склад,СтруктурнаяЕдиница,МассивНоменклатуры) Экспорт
	ТипСтрока=Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипЧисло=Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(15,3));
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Фирма",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНоменклатуры.Колонки.Добавить("Регистратор",ТипСтрока);
	ТаблицаНоменклатуры.Колонки.Добавить("НачальныйОстаток",ТипЧисло);
	ТаблицаНоменклатуры.Колонки.Добавить("Приход",ТипЧисло);
	ТаблицаНоменклатуры.Колонки.Добавить("Расход",ТипЧисло);
	ТаблицаНоменклатуры.Колонки.Добавить("КонечныйОстаток",ТипЧисло);
	
	PackageТип=ФабрикаXDTO.Тип("http://1c-astor.ru/Rests","ПараметрыОтчета");
	Package_СоставТип=ФабрикаXDTO.Тип("http://1c-astor.ru/Rests","ПараметрыОтчета_Состав");
	Данные=ФабрикаXDTO.Создать(PackageТип);
	Данные.Фирма = Фирма.Код;
	Данные.Склад = Склад.Код;
	Данные.СтруктурнаяЕдиница = СтруктурнаяЕдиница.Код;
	Данные.ДатаНачала = ДатаНачала;
	Данные.ДатаОкончания = ДатаОкончания;
	Для Каждого СтрокаМассива Из МассивНоменклатуры Цикл
		СтрокаСостав=ФабрикаXDTO.Создать(Package_СоставТип);
		СтрокаСостав.Номенклатура=СтрокаМассива.Код;
		Данные.Состав.Добавить(СтрокаСостав);
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Данные,"ПараметрыОтчета");
	Package = ЗаписьXML.Закрыть();
	
	Попытка
		ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисRests,СтруктурнаяЕдиница);
		Определение = Новый WSОпределения(ВебСервис.URL,ВебСервис.Имя,ВебСервис.Пароль);
		URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		Прокси.Пользователь = ВебСервис.Имя;
		Прокси.Пароль = ВебСервис.Пароль;
		Результат = Прокси.ReceiveRegisterRecords(Package);
		Если Результат Тогда
			XDTO = ПолучитьОбъектXDTO(Package);
			Для Каждого СтрокаСостава Из XDTO.Состав Цикл
				СтрокаТаблицы=ТаблицаНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаСостава);
				СтрокаТаблицы.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрокаСостава.Номенклатура);
				СтрокаТаблицы.Фирма = Справочники.Организации.НайтиПоКоду(СтрокаСостава.Фирма);
			КонецЦикла;	
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("WebService", УровеньЖурналаРегистрации.Ошибка,Метаданные.WebСервисы.Rests,,ОписаниеОшибки());
	КонецПопытки;
	Возврат ТаблицаНоменклатуры;
КонецФункции
//БредовЮГ  2015-04-16 Наряд 000147443 от 09.04.2015 13:53:18 } 

