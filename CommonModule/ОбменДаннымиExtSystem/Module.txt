Процедура ПолучениеДанныхExtSystem() Экспорт
	ПутьКаталога = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПутьКаталогаExtSystem);
	
	Если НЕ ЗначениеЗаполнено(ПутьКаталога) Тогда
		Возврат;
	КонецЕсли;
	флСоздаватьФайлПротокола = Истина;
	ТекстДок = Новый ТекстовыйДокумент;
	СоздатьКаталог(ПутьКаталога+"\Загруженные");
	НайденныеФайлы = НайтиФайлы(ПутьКаталога, "*.xml");
	Тз=Новый ТаблицаЗначений;
	Тз.Колонки.Добавить("Файл");
	Тз.Колонки.Добавить("ФайлПолноеИмя");
	Тз.Колонки.Добавить("ВремяИзменения");
	Для каждого Файл Из НайденныеФайлы Цикл
		Если ВРЕГ(Файл.Расширение) <> ".XML" Тогда
			Продолжить;
		КонецЕсли;
		Строки = Тз.Добавить();
		Строки.Файл           = Файл;
		Строки.ФайлПолноеИмя  = Файл.ПолноеИмя;
		Строки.ВремяИзменения = Файл.ПолучитьВремяИзменения();	
	КонецЦикла;
	Тз.Сортировать("ВремяИзменения Возр");
	
	
	Для каждого СтрокаТз Из Тз Цикл
		
		Если ПараметрыСеанса.Отладка Тогда
			ЗаписьЖурналаРегистрации("ExtSystem", УровеньЖурналаРегистрации.Информация,,СтрокаТз.ФайлПолноеИмя);
		КонецЕсли;	
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(СтрокаТз.ФайлПолноеИмя);
		ЧтениеXML.Прочитать();
		ТипПакета = ЧтениеXML.Имя;
		Попытка
			XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ФабрикаXDTO.Тип("http://1c-astor.ru/ExtSystem",ТипПакета));
		Исключение
			стрОшибка = ОписаниеОшибки();
			Если ПараметрыСеанса.Отладка  Тогда
				ЗаписьЖурналаРегистрации("ExtSystem", УровеньЖурналаРегистрации.Информация,,СтрокаТз.ФайлПолноеИмя,стрОшибка);
			КонецЕсли;
			стрСообщение = "Ошибка при загрузке из файла: "+СтрокаТз.ФайлПолноеИмя+": "+стрОшибка;
			Сообщить(стрСообщение,СтатусСообщения.Важное);
			Если флСоздаватьФайлПротокола Тогда
				ТекстДок.ДобавитьСтроку(стрСообщение);
			КонецЕсли;
			Продолжить;
		КонецПопытки;
		
		Если ТипПакета = "DocumentObject.Zотчет" Тогда
			Результат = ЗагрузитьDocumentObjectZотчет(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.АвансовыйОтчет" Тогда
			Результат = ЗагрузитьDocumentObjectАвансовыйОтчет(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.ВводОстатков" Тогда
			Результат = ЗагрузитьDocumentObjectВводОстатков(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.ВозвратнаяНакладнаяОтПокупателя" Тогда
			Результат = ЗагрузитьDocumentObjectВозвратнаяНакладнаяОтПокупателя(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.ЗапросНаПополнение" Тогда
			Результат = ЗагрузитьDocumentObjectЗапросНаПополнение(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.Инвентаризация" Тогда
			Результат = ЗагрузитьDocumentObjectИнвентаризация(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.Комплектация" Тогда
			Результат = ЗагрузитьDocumentObjectКомплектация(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.КоррекцияЗапасов" Тогда
			Результат = ЗагрузитьDocumentObjectКоррекцияЗапасов(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.ОтчетРеализатора" Тогда
			Результат = ЗагрузитьDocumentObjectОтчетРеализатора(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.ОтчетРеализатораМеждуФирмами" Тогда
			Результат = ЗагрузитьDocumentObjectОтчетРеализатораМеждуФирмами(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.ПередачаТоваровМеждуФирмами" Тогда
			Результат = ЗагрузитьDocumentObjectПередачаТоваровМеждуФирмами(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.Перемещение" Тогда
			Результат = ЗагрузитьDocumentObjectПеремещение(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.ПриходнаяНакладная" Тогда
			Результат = ЗагрузитьDocumentObjectПриходнаяНакладная(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.ПриходныйКассовыйОрдер" Тогда
			Результат = ЗагрузитьDocumentObjectПриходныйКассовыйОрдер(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.РасходнаяНакладная" Тогда
			Результат = ЗагрузитьDocumentObjectРасходнаяНакладная(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.РасходныйКассовыйОрдер" Тогда
			Результат = ЗагрузитьDocumentObjectРасходныйКассовыйОрдер(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.СчетФактура" Тогда
			Результат = ЗагрузитьDocumentObjectСчетФактура(XDTO);
		ИначеЕсли ТипПакета = "DocumentObject.ПриходОтСЕ" Тогда
			Результат = ЗагрузитьDocumentObjectПриходОтСЕ(XDTO); 
		ИначеЕсли ТипПакета = "DocumentObject.ПланируемаяПоставка77" Тогда
			Результат = ЗагрузитьDocumentObjectПланируемаяПоставка(XDTO);
		Иначе
			ЗаписьЖурналаРегистрации("ExtSystem", УровеньЖурналаРегистрации.Ошибка,,СтрокаТз.ФайлПолноеИмя,"Тип объекта неопределен: "+ТипПакета);
			стрСообщение = "Ошибка при загрузке из файла: "+СтрокаТз.ФайлПолноеИмя+": тип объекта неопределен: "+ТипПакета; 
			Сообщить(стрСообщение,СтатусСообщения.Важное);
			Если флСоздаватьФайлПротокола Тогда
				ТекстДок.ДобавитьСтроку(стрСообщение);
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		
		Если Результат Тогда
			ЗаписьЖурналаРегистрации("ExtSystem", УровеньЖурналаРегистрации.Информация,,СтрокаТз.ФайлПолноеИмя,XDTO);
			Сообщить("Загружен объект: "+XDTO+" из файла: "+СтрокаТз.ФайлПолноеИмя);
			ЧтениеXML.Закрыть();
			ПереместитьФайл(СтрокаТз.ФайлПолноеИмя,СтрокаТз.Файл.Путь+"\Загруженные\"+СтрокаТз.Файл.Имя);
		Иначе
			стрСообщение = "Ошибка при загрузке из файла: "+СтрокаТз.ФайлПолноеИмя+"
			|   "+XDTO;
			Сообщить(стрСообщение,СтатусСообщения.Важное);
			ЗаписьЖурналаРегистрации("ExtSystem", УровеньЖурналаРегистрации.Ошибка,,СтрокаТз.ФайлПолноеИмя,XDTO);
			Если флСоздаватьФайлПротокола Тогда
				ТекстДок.ДобавитьСтроку(СтрЗаменить(стрСообщение,Символы.ПС," "));
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Если флСоздаватьФайлПротокола Тогда
		Если ТекстДок.КоличествоСтрок() > 0 Тогда
			Попытка 
				ТекстДок.Записать(ПутьКаталога+"\Протокол загрузки ExtSystem_"+СтрЗаменить(Строка(ТекущаяДата()),":","_")+".txt");
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры


Функция ЗагрузитьDocumentObjectZотчет(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.Zотчет.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.Zотчет.СоздатьДокумент();
			Ссылка = Документы.Zотчет.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.ИдентификаторSMSБазы = XDTO.ИдентификаторSMSБазы;
		Объект.ЗапретМодификацииSMS = XDTO.ЗапретМодификацииSMS;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.СуммаИтого = XDTO.СуммаИтого;
		Объект.СуммаНДСИтого = XDTO.СуммаНДСИтого;
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.Выручка.Очистить();
		Для Каждого Строка Из XDTO.Выручка Цикл
			НоваяСтрока = Объект.Выручка.Добавить();
			НоваяСтрока.ПОС = ПолучитьККМ(Строка.ПОС, Объект);
			НоваяСтрока.Смена = Строка.Смена;
			НоваяСтрока.ДатаСмены = Строка.ДатаСмены;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.НомерСменыSMS = Строка.НомерСменыSMS;
			НоваяСтрока.СуммаНал = Строка.СуммаНал;
			НоваяСтрока.СвободнаяСумма = Строка.СвободнаяСумма;
			НоваяСтрока.ИдентификаторСменыSMS = Строка.ИдентификаторСменыSMS;
		КонецЦикла;
		
		Объект.Карты.Очистить();
		Для Каждого Строка Из XDTO.Карты Цикл
			НоваяСтрока = Объект.Карты.Добавить();
			НоваяСтрока.ТипКарты = Справочники.КредитныеКарты.НайтиПоКоду(Строка.ТипКарты);
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Склад = Справочники.Склады.НайтиПоКоду(Строка.Склад);
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
		
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ЗагрузитьDocumentObjectАвансовыйОтчет(XDTO) Экспорт
	Попытка
		Ссылка = Документы.АвансовыйОтчет.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.АвансовыйОтчет.СоздатьДокумент();
			Ссылка = Документы.АвансовыйОтчет.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.ФизическиеЛица.НайтиПоКоду(XDTO.Автор);
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Объект.КоличествоПриложенныхДокументов = XDTO.КоличествоПриложенныхДокументов;
		Объект.КоличествоПриложенныхЛистов = XDTO.КоличествоПриложенныхЛистов;
		Объект.НазначениеАванса = XDTO.НазначениеАванса;
		Объект.ПредыдущийАванс = XDTO.ПредыдущийАванс;
		Объект.ПерерасходПоПредыдущемуАвансу = XDTO.ПерерасходПоПредыдущемуАвансу;
		Объект.Сотрудник = Справочники.ФизическиеЛица.НайтиПоКоду(XDTO.Сотрудник);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.ИтогоСумма = XDTO.ИтогоСумма;
		Объект.Курс = XDTO.Курс;
		Объект.Кратность = XDTO.Кратность;
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.Авансы.Очистить();
		Для Каждого Строка Из XDTO.Авансы Цикл
			НоваяСтрока = Объект.Авансы.Добавить();
			НоваяСтрока.РКО = Строка.РКО;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.ДатаДокументаРасхода = Строка.ДатаДокументаРасхода;
			НоваяСтрока.НомерДокументаРасхода = Строка.НомерДокументаРасхода;
			НоваяСтрока.НаименованиеДокументаРасхода = Строка.НаименованиеДокументаРасхода;
			НоваяСтрока.СуммаПоОтчету = Строка.СуммаПоОтчету;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС[Строка.КлассификаторДДС];
			Попытка
				НоваяСтрока.Аналитика = Справочники[НоваяСтрока.КлассификаторДДС.ТипЗначения.ПривестиЗначение().Метаданные().Имя].НайтиПоКоду(Строка.Аналитика);
			Исключение
			КонецПопытки;	
			НоваяСтрока.Комментарий = Строка.Комментарий;
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectВводОстатков(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.ВводОстатков.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ВводОстатков.СоздатьДокумент();
			Ссылка = Документы.ВводОстатков.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.ТипОстатков = Перечисления.ТипыОстатков[XDTO.ТипОстатков];
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.КупленныеТовары.Очистить();
		Для Каждого Строка Из XDTO.КупленныеТовары Цикл
			НоваяСтрока = Объект.КупленныеТовары.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.СуммаУпр = Строка.СуммаУпр;
			НоваяСтрока.СуммаНДСУпр = Строка.СуммаНДСУпр;
		КонецЦикла;
		
		Объект.ДенежныеСредства.Очистить();
		Для Каждого Строка Из XDTO.ДенежныеСредства Цикл
			НоваяСтрока = Объект.ДенежныеСредства.Добавить();
			НоваяСтрока.ДенежнаяЯчейка = Справочники[Строка.ТипДенежнойЯчейки].НайтиПоКоду(Строка.ДенежнаяЯчейка);
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
		
		Объект.КомиссионныеТовары.Очистить();
		Для Каждого Строка Из XDTO.КомиссионныеТовары Цикл
			НоваяСтрока = Объект.КомиссионныеТовары.Добавить();
			НоваяСтрока.Комитент = Справочники.Контрагенты.НайтиПоКоду(Строка.Комитент);
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СуммаУпр = Строка.СуммаУпр;
		КонецЦикла;
		
		Объект.ХранимыеТовары.Очистить();
		Для Каждого Строка Из XDTO.ХранимыеТовары Цикл
			НоваяСтрока = Объект.ХранимыеТовары.Добавить();
			НоваяСтрока.Контрагент = Справочники.Контрагенты.НайтиПоКоду(Строка.Контрагент);
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СуммаУпр = Строка.СуммаУпр;
		КонецЦикла;
		
		Объект.ТоварыПереданныеНаКомиссию.Очистить();
		Для Каждого Строка Из XDTO.ТоварыПереданныеНаКомиссию Цикл
			НоваяСтрока = Объект.ТоварыПереданныеНаКомиссию.Добавить();
			НоваяСтрока.Контрагент = Справочники.Контрагенты.НайтиПоКоду(Строка.Контрагент);
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.СуммаУпр = Строка.СуммаУпр;
			НоваяСтрока.СуммаНДСУпр = Строка.СуммаНДСУпр;
			НоваяСтрока.СуммаПродажи = Строка.СуммаПродажи;
			НоваяСтрока.СуммаНДСПродажи = Строка.СуммаНДСПродажи;
		КонецЦикла;
		
		Объект.РеализованныеТовары.Очистить();
		Для Каждого Строка Из XDTO.РеализованныеТовары Цикл
			НоваяСтрока = Объект.РеализованныеТовары.Добавить();
			НоваяСтрока.Комитент = Справочники.Контрагенты.НайтиПоКоду(Строка.Комитент);
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СуммаПродажи = Строка.СуммаПродажи;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДСПродажи = Строка.СуммаНДСПродажи;
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectВозвратнаяНакладнаяОтПокупателя(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.ВозвратнаяНакладнаяОтПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ВозвратнаяНакладнаяОтПокупателя.СоздатьДокумент();
			Ссылка = Документы.ВозвратнаяНакладнаяОтПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.Контрагент = Справочники.Контрагенты.НайтиПоКоду(XDTO.Контрагент);
		Объект.ТипДоговора = Перечисления.ТипыДоговоров[XDTO.ТипДоговора];
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Грузополучатель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Грузополучатель);
		Объект.АдресДоставки = XDTO.АдресДоставки;
		Объект.Грузоотправитель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Грузоотправитель);
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Комментарий = XDTO.Комментарий;
		Объект.Основание = XDTO.Основание;
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Объект.Курс = XDTO.Курс;
		Объект.Кратность = XDTO.Кратность;
		Объект.СуммаИтого = XDTO.СуммаИтого;
		Объект.СуммаНДСИтого = XDTO.СуммаНДСИтого;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.ДокОснование = ПолучитьДокОснование(Строка.ДокОснование,Строка.ДокОснованиеТип);
			НоваяСтрока.СебестоимостьЦена = Строка.СебестоимостьЦена;
			НоваяСтрока.СебестоимостьСумма = Строка.СебестоимостьСумма;
			НоваяСтрока.СебестоимостьНДС = Строка.СебестоимостьНДС;
			НоваяСтрока.СебестоимостьЦенаУпр = Строка.СебестоимостьЦенаУпр;
			НоваяСтрока.СебестоимостьСуммаУпр = Строка.СебестоимостьСуммаУпр;
			НоваяСтрока.СебестоимостьНДСУпр = Строка.СебестоимостьНДСУпр;
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectЗапросНаПополнение(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.ЗапросНаПополнение.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ЗапросНаПополнение.СоздатьДокумент();
			Ссылка = Документы.ЗапросНаПополнение.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.ДатаПоставки = Строка.ДатаПоставки;
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectИнвентаризация(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.Инвентаризация.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.Инвентаризация.СоздатьДокумент();
			Ссылка = Документы.Инвентаризация.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Основание = XDTO.Основание;
		Объект.ТолькоТаблица = XDTO.ТолькоТаблица;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Количество = Строка.Количество;
			//НоваяСтрока.КоличествоУчет = Строка.КоличествоУчет;
			НоваяСтрока.Вес = Строка.Вес;
			НоваяСтрока.ЕдиницаВеса = Справочники.ЕдиницыИзмерения.НайтиПоКоду(Строка.ЕдиницаВеса);
			НоваяСтрока.Склад = Справочники.Склады.НайтиПоКоду(Строка.Склад);
		КонецЦикла;
		
		Объект.Пересортица.Очистить();
		Для Каждого Строка Из XDTO.Пересортица Цикл
			НоваяСтрока = Объект.Пересортица.Добавить();
			НоваяСтрока.Номенклатура1 = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура1,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Номенклатура2 = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура2,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Склад = Справочники.Склады.НайтиПоКоду(Строка.Склад);
		КонецЦикла;
		
		Объект.СоставПоФирмам.Очистить();
		Для Каждого Строка Из XDTO.СоставПоФирмам Цикл
			НоваяСтрока = Объект.СоставПоФирмам.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.ЦенаИзлишка = Строка.ЦенаИзлишка;
			НоваяСтрока.КоличествоУчет = Строка.КоличествоУчет;
			НоваяСтрока.Вес = Строка.Вес;
			НоваяСтрока.ЕдиницаВеса = Справочники.ЕдиницыИзмерения.НайтиПоКоду(Строка.ЕдиницаВеса);
			НоваяСтрока.ЦенаИзлишкаУпр = Строка.ЦенаИзлишкаУпр;
			НоваяСтрока.Склад = Справочники.Склады.НайтиПоКоду(Строка.Склад);
			НоваяСтрока.Фирма = Справочники.Организации.НайтиПоКоду(Строка.Фирма);
		КонецЦикла;
		
		Объект.ПересортицаПоФирмам.Очистить();
		Для Каждого Строка Из XDTO.ПересортицаПоФирмам Цикл
			НоваяСтрока = Объект.ПересортицаПоФирмам.Добавить();
			НоваяСтрока.Номенклатура1 = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура1,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Номенклатура2 = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура2,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Склад = Справочники.Склады.НайтиПоКоду(Строка.Склад);
			НоваяСтрока.Фирма = Справочники.Организации.НайтиПоКоду(Строка.Фирма);
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectКомплектация(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.Комплектация.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.Комплектация.СоздатьДокумент();
			Ссылка = Документы.Комплектация.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		Объект.Основание = XDTO.Основание;
		Объект.ВидСписания = Справочники.ВидыСписания.НайтиПоКоду(XDTO.ВидСписания);
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.Разукомплектация = XDTO.Разукомплектация;
		Объект.Комплект = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(XDTO.Комплект,,СтрНенайденныхКодовТоваров);
		Объект.Количество = XDTO.Количество;
		//Объект.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(XDTO.ЕдиницаИзмерения,Истина,,Объект.Комплект);
		Объект.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(XDTO.ЕдиницаИзмерения,Объект.Комплект); //dps+ 15.10.05
		Объект.Коэффициент = XDTO.Коэффициент;
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.ЦенаУпр = Строка.ЦенаУпр;
			НоваяСтрока.СуммаУпр = Строка.СуммаУпр;
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectКоррекцияЗапасов(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.КоррекцияЗапасов.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.КоррекцияЗапасов.СоздатьДокумент();
			Ссылка = Документы.КоррекцияЗапасов.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		Объект.Основание = XDTO.Основание;
		Объект.ВиновноеЛицо = Справочники.ФизическиеЛица.НайтиПоКоду(XDTO.ВиновноеЛицо);
		Объект.ВидСписания = Справочники.ВидыСписания.НайтиПоКоду(XDTO.ВидСписания);
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.Оприходование = XDTO.Оприходование;
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectОтчетРеализатора(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.ОтчетРеализатора.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ОтчетРеализатора.СоздатьДокумент();
			Ссылка = Документы.ОтчетРеализатора.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Контрагент = Справочники.Контрагенты.НайтиПоКоду(XDTO.Контрагент);
		Объект.ТипОтчета = XDTO.ТипОтчета;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(XDTO.СтавкаНДС));
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Объект.Курс = XDTO.Курс;
		Объект.Кратность = XDTO.Кратность;
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.КоличествоОст = Строка.КоличествоОст;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.ПоДокументу = ПолучитьДокОснование(Строка.ПоДокументу,Строка.ПоДокументуТип);;
			НоваяСтрока.ЦенаПродажи = Строка.ЦенаПродажи;
			НоваяСтрока.СуммаПродажи = Строка.СуммаПродажи;
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectОтчетРеализатораМеждуФирмами(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.ОтчетРеализатораМеждуФирмами.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ОтчетРеализатораМеждуФирмами.СоздатьДокумент();
			Ссылка = Документы.ОтчетРеализатораМеждуФирмами.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.ФирмаКомитент = Справочники.Организации.НайтиПоКоду(XDTO.ФирмаКомитент);
		Объект.ФирмаКомиссионер = Справочники.Организации.НайтиПоКоду(XDTO.ФирмаКомиссионер);
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(XDTO.СтавкаНДС));
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Объект.Курс = XDTO.Курс;
		Объект.Кратность = XDTO.Кратность;
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.КоличествоОст = Строка.КоличествоОст;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.ПоДокументу = Строка.ПоДокументу;
			НоваяСтрока.ЦенаПродажи = Строка.ЦенаПродажи;
			НоваяСтрока.СуммаПродажи = Строка.СуммаПродажи;
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectПередачаТоваровМеждуФирмами(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.ПередачаТоваровМеждуФирмами.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ПередачаТоваровМеждуФирмами.СоздатьДокумент();
			Ссылка = Документы.ПередачаТоваровМеждуФирмами.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.БонуснаяПоставка = XDTO.БонуснаяПоставка;
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Объект.Грузоотправитель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Грузоотправитель);
		Объект.Грузополучатель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Грузополучатель);
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.ФирмаПолучатель = Справочники.Организации.НайтиПоКоду(XDTO.ФирмаПолучатель);
		Объект.Кратность = XDTO.Кратность;
		Объект.Курс = XDTO.Курс;
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Комментарий = XDTO.Комментарий;
		Объект.ТипДоговора = Перечисления.ТипыДоговоров[XDTO.ТипДоговора];
		Объект.Возврат = XDTO.Возврат;
		Объект.СуммаИтого = XDTO.СуммаИтого;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectПеремещение(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.Перемещение.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.Перемещение.СоздатьДокумент();
			Ссылка = Документы.Перемещение.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		Объект.СкладПолучатель = Справочники.Склады.НайтиПоКоду(XDTO.СкладПолучатель);
		Объект.Основание = XDTO.Основание;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Количество = Строка.Количество;
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectПриходнаяНакладная(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ПриходнаяНакладная.СоздатьДокумент();
			Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Загружен = Истина;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.БонуснаяПоставка = XDTO.БонуснаяПоставка;
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Объект.Грузоотправитель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Грузоотправитель);
		Если Не XDTO.ГрузополучательТип = "" Тогда
			Объект.Грузополучатель = Справочники[XDTO.ГрузополучательТип].НайтиПоКоду(XDTO.Грузополучатель);
		КонецЕсли;
		Объект.ДатаДокумента = XDTO.ДатаДокумента;
		Объект.ДатаСФ = XDTO.ДатаСФ;
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Контрагент = Справочники[XDTO.КонтрагентТип].НайтиПоКоду(XDTO.Контрагент);
		Объект.Курс = XDTO.Курс;
		Объект.НомерДокумента = XDTO.НомерДокумента;
		Объект.НомерСФ = XDTO.НомерСФ;
		Объект.Приемщик = Справочники.ФизическиеЛица.НайтиПоКоду(XDTO.Приемщик);
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.Комментарий = XDTO.Комментарий;
		Если Не XDTO.ТипДоговора = "" Тогда
			Объект.ТипДоговора = Перечисления.ТипыДоговоров[XDTO.ТипДоговора];
		КонецЕсли;
		Объект.Кратность = XDTO.Кратность;
		Объект.СуммаИтого = XDTO.СуммаИтого;
		Объект.СуммаНДСИтого = XDTO.СуммаНДСИтого;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.КоличествоПоДокументу = Строка.КоличествоПоДокументу;
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
			НоваяСтрока.Вес = Строка.Вес;
			НоваяСтрока.ЕдиницаВеса = Справочники.ЕдиницыИзмерения.НайтиПоКоду(Строка.ЕдиницаВеса);
		КонецЦикла;
		
		Объект.ОстаткиНоменклатуры.Очистить();
		Для Каждого Строка Из XDTO.ОстаткиНоменклатуры Цикл
			НоваяСтрока = Объект.ОстаткиНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Комитент = Справочники.Контрагенты.НайтиПоКоду(Строка.Комитент);
			НоваяСтрока.СуммаУпр = Строка.СуммаУпр;
			НоваяСтрока.СуммаНДСУпр = Строка.СуммаНДСУпр;
		КонецЦикла;
		Объект.ОбработанЦВД = XDTO.ОбработанЦВД;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ЗагрузитьDocumentObjectПриходныйКассовыйОрдер(XDTO) Экспорт
	Попытка
		Ссылка = Документы.ПриходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			Ссылка = Документы.ПриходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.Касса = Справочники.КассыФирмы.НайтиПоКоду(XDTO.Касса);
		Объект.Основание = XDTO.Основание;
		Объект.Приложение = XDTO.Приложение;
		Объект.ПринятоОт = XDTO.ПринятоОт;
		Объект.Сумма = XDTO.Сумма;
		Объект.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(XDTO.СтавкаНДС));
		Объект.СуммаНДС = XDTO.СуммаНДС;
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Комментарий = XDTO.Комментарий;
		Объект.ДокументОснование = XDTO.ДокументОснование;
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Объект.Курс = XDTO.Курс;
		Объект.Кратность = XDTO.Кратность;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.ТипДоговора = Перечисления.ТипыДоговоров[XDTO.ТипДоговора];
		Объект.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС[XDTO.КлассификаторДДС];
		Попытка
			Объект.Аналитика = Справочники[Объект.КлассификаторДДС.ТипЗначения.ПривестиЗначение().Метаданные().Имя].НайтиПоКоду(XDTO.Аналитика);
		Исключение
		КонецПопытки;	
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectРасходнаяНакладная(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.РасходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.РасходнаяНакладная.СоздатьДокумент();
			Ссылка = Документы.РасходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Загружен = Истина;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Объект.Курс = XDTO.Курс;
		Объект.Контрагент = Справочники[XDTO.КонтрагентТип].НайтиПоКоду(XDTO.Контрагент);
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.Основание = XDTO.Основание;
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Грузополучатель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Грузополучатель);
		Объект.АдресДоставки = XDTO.АдресДоставки;
		Объект.Грузоотправитель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Грузоотправитель);
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Комментарий = XDTO.Комментарий;
		Объект.Возврат = XDTO.Возврат;
		Объект.Кратность = XDTO.Кратность;
		Если Не XDTO.ТипДоговора = "" Тогда
			Объект.ТипДоговора = Перечисления.ТипыДоговоров[XDTO.ТипДоговора];
		КонецЕсли;
		Объект.СуммаИтого = XDTO.СуммаИтого;
		Объект.СуммаНДСИтого = XDTO.СуммаНДСИтого;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Вес = Строка.Вес;
			НоваяСтрока.ЕдиницаВеса = Справочники.ЕдиницыИзмерения.НайтиПоКоду(Строка.ЕдиницаВеса);
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectРасходныйКассовыйОрдер(XDTO) Экспорт
	Попытка
		Ссылка = Документы.РасходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			Ссылка = Документы.РасходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.Выдать = XDTO.Выдать;
		Объект.Касса = Справочники.КассыФирмы.НайтиПоКоду(XDTO.Касса);
		Объект.Основание = XDTO.Основание;
		Объект.ПоДокументу = XDTO.ПоДокументу;
		Объект.Приложение = XDTO.Приложение;
		Объект.Сумма = XDTO.Сумма;
		Объект.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(XDTO.СтавкаНДС));
		Объект.СуммаНДС = XDTO.СуммаНДС;
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Комментарий = XDTO.Комментарий;
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Объект.Курс = XDTO.Курс;
		Объект.Кратность = XDTO.Кратность;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.ТипДоговора = Перечисления.ТипыДоговоров[XDTO.ТипДоговора];
		Объект.КлассификаторДДС = ПланыВидовХарактеристик.КлассификаторДДС[XDTO.КлассификаторДДС];
		Попытка
			Объект.Аналитика = Справочники[Объект.КлассификаторДДС.ТипЗначения.ПривестиЗначение().Метаданные().Имя].НайтиПоКоду(XDTO.Аналитика);
		Исключение
		КонецПопытки;	
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ЗагрузитьDocumentObjectСчетФактура(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.СчетФактура.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.СчетФактура.СоздатьДокумент();
			Ссылка = Документы.СчетФактура.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.Номер = XDTO.Number;
		Объект.Контрагент = Справочники.Контрагенты.НайтиПоКоду(XDTO.Контрагент);
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(XDTO.СтруктурнаяЕдиница);
		Объект.Грузоотправитель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Грузоотправитель);
		Объект.Грузополучатель = Справочники.Контрагенты.НайтиПоКоду(XDTO.Грузополучатель);
		Объект.НомерПлатежноРасчетногоДокумента = XDTO.НомерПлатежноРасчетногоДокумента;
		Объект.ДатаПлатежноРасчетногоДокумента = XDTO.ДатаПлатежноРасчетногоДокумента;
		Объект.АдресГрузоотправителя = XDTO.АдресГрузоотправителя;
		Объект.АдресГрузополучателя = XDTO.АдресГрузополучателя;
		Если Не ПустаяСтрока(XDTO.ДокОснование) Тогда
			ДокОснование = ПолучитьДокОснование(XDTO.ДокОснование,XDTO.ДокОснованиеТип);
			Если ДокОснование = Неопределено Тогда
				ВызватьИсключение("Не найден ДокОснование " + XDTO.ДокОснованиеТип + " с кодом " + XDTO.ДокОснование);
			Иначе
				Объект.ДокОснование = ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.СуммаИтого = XDTO.СуммаИтого;
		Объект.СуммаНДСИтого = XDTO.СуммаНДСИтого;
		Объект.Комментарий = XDTO.Комментарий;
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.Номенклатура,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.Количество;
			//НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Строка.ЕдиницаИзмерения,Истина,,НоваяСтрока.Номенклатура);
			НоваяСтрока.ЕдиницаИзмерения = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию(Строка.ЕдиницаИзмерения,НоваяСтрока.Номенклатура); //dps+ 15.10.05
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.НомерГТД = Строка.НомерГТД;
			НоваяСтрока.Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(Строка.Страна);
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
		Объект.Записать(?(XDTO.Posted, РежимЗаписиДокумента.Проведение, ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись)));
		
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = "Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+"
			|Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат; 
КонецФункции

Функция ПолучитьДокОснование(ДокОснование,ДокОснованиеТип)
	Попытка 
		Ссылка = Документы[ДокОснованиеТип].ПолучитьСсылку(Новый УникальныйИдентификатор(ДокОснование));
	Исключение	
		Возврат Неопределено;
	Конецпопытки;	
	Если Лев(Строка(Ссылка),18) = "<Объект не найден>" Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Ссылка;
КонецФункции	

Функция ПолучитьККМ(КодККМ, ZотчетОбъект)
	
	ККМСсылка = Справочники.ККМ.НайтиПоКоду(КодККМ, , , ZотчетОбъект.СтруктурнаяЕдиница);
	Если Не ЗначениеЗаполнено(ККМСсылка) Тогда
		НовыйККМ = Справочники.ККМ.СоздатьЭлемент();
		НовыйККМ.Владелец = ZотчетОбъект.СтруктурнаяЕдиница;
		НовыйККМ.Наименование = "ККМ №";
		НовыйККМ.ТипККМ = Перечисления.ТипыККМ.Автоматизированная;
		НовыйККМ.Фирма = ZотчетОбъект.Фирма;
		Попытка
			НовыйККМ.Записать();
			ККМСсылка = НовыйККМ.Ссылка;
		Исключение
			Ошибка = ОписаниеОшибки();
			ККМСсылка = Справочники.ККМ.ПустаяСсылка();
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ККМСсылка;
	
КонецФункции // ПолучитьККМ()


Функция ПолучитьЦеныДляПН(ДатаДок,Фирма,Номенклатура)		// Шилов М.В. 03.02.14
	Результат=Новый Структура("Цена, ЦенаНДС, ЦенаУпр, ЦенаНДСУпр", 0, 0, 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатурыОстатки.КоличествоОстаток <> 0
	|			ТОГДА ОстаткиНоменклатурыОстатки.СуммаОстаток / ОстаткиНоменклатурыОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатурыОстатки.КоличествоОстаток <> 0
	|			ТОГДА ОстаткиНоменклатурыОстатки.СуммаУпрОстаток / ОстаткиНоменклатурыОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаУпр,
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатурыОстатки.КоличествоОстаток <> 0
	|			ТОГДА ОстаткиНоменклатурыОстатки.СуммаНДСОстаток / ОстаткиНоменклатурыОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаНДС,
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатурыОстатки.КоличествоОстаток <> 0
	|			ТОГДА ОстаткиНоменклатурыОстатки.СуммаНДСУпрОстаток / ОстаткиНоменклатурыОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаНДСУпр
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			&Период,
	|			Номенклатура = &Номенклатура
	|				И Фирма = &Фирма) КАК ОстаткиНоменклатурыОстатки";
	Запрос.УстановитьПараметр("Период", ДатаДок);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Фирма", Фирма);
	
	ЗапросВыполнен = Запрос.Выполнить();
	Если Не ЗапросВыполнен.Пустой() Тогда
		ЗапросВыборка=ЗапросВыполнен.Выбрать();
		ЗапросВыборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, ЗапросВыборка);
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция ПолучитьЦеныЗакупкиДляПН(ДатаДок,Фирма,Номенклатура)		// Шилов М.В. 04.02.14
	Результат=Новый Структура("Цена, ЦенаНДС, ЦенаУпр, ЦенаНДСУпр", 0, 0, 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыЗакупочныеСрезПоследних.Цена,
	|	ЦеныНоменклатурыЗакупочныеСрезПоследних.ЦенаУпр,
	|	ЦеныНоменклатурыЗакупочныеСрезПоследних.СуммаНДС КАК ЦенаНДС,
	|	ЦеныНоменклатурыЗакупочныеСрезПоследних.СуммаНДСУпр КАК ЦенаНДСУпр
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыЗакупочные.СрезПоследних(
	|			&Период,
	|			Номенклатура = &Номенклатура
	|				И Фирма = &Фирма) КАК ЦеныНоменклатурыЗакупочныеСрезПоследних";
	Запрос.УстановитьПараметр("Период", ДатаДок);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Фирма", Фирма);
	
	ЗапросВыполнен = Запрос.Выполнить();
	Если Не ЗапросВыполнен.Пустой() Тогда
		ЗапросВыборка=ЗапросВыполнен.Выбрать();
		ЗапросВыборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, ЗапросВыборка);
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция ПолучитьЦеныПоставщикаДляПН(Номенклатура)		// Шилов М.В. 06.02.14
	Результат=Новый Структура("Цена, ЦенаНДС, ЦенаУпр, ЦенаНДСУпр", 0, 0, 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	НоменклатураКонтрагента.Цена КАК Цена,
	|	НоменклатураКонтрагента.Цена КАК ЦенаУпр
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ГДЕ
	|	НоменклатураКонтрагента.ОсновнойПоставщик
	|	И НоменклатураКонтрагента.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ЗапросВыполнен = Запрос.Выполнить();
	Если Не ЗапросВыполнен.Пустой() Тогда
		ЗапросВыборка=ЗапросВыполнен.Выбрать();
		ЗапросВыборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, ЗапросВыборка);
		Результат.ЦенаНДС=Результат.Цена*Номенклатура.СтавкаНДС.Ставка/(100+Номенклатура.СтавкаНДС.Ставка);
		Результат.ЦенаНДСУпр=Результат.ЦенаУпр*Номенклатура.СтавкаНДС.Ставка/(100+Номенклатура.СтавкаНДС.Ставка);
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

//{Бредов обмен из первой базы возврат из магазина и заказ магазина
Функция ЗагрузитьDocumentObjectПриходОтСЕ(XDTO) Экспорт
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Если XDTO.DeletionMark = Истина Тогда
				Возврат Истина;
			КонецЕсли;
			Объект = Документы.ПриходнаяНакладная.СоздатьДокумент();
			Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		Иначе
			Если Объект.Проведен Тогда  // если документ уже загружен и проведен, тогда уже не грузим изменения
				Возврат Истина;	
			КонецЕсли;
			Если XDTO.DeletionMark = Истина и Объект.ПометкаУдаления Тогда  // если документ уже загружен и помечен на удаление, тогда уже не грузим изменения
				Возврат Истина;	
			КонецЕсли;

			
		КонецЕсли;
		Объект.Загружен = Истина;
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = КонецДня(XDTO.Date);
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоКоду(XDTO.Автор);
		Объект.БонуснаяПоставка = XDTO.БонуснаяПоставка;
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Если Не XDTO.ГрузоотправительТип = "" Тогда
			Объект.Грузоотправитель = Справочники[XDTO.ГрузоотправительТип].НайтиПоКоду(XDTO.Грузоотправитель);
		КонецЕсли;
		Объект.ДатаДокумента = XDTO.ДатаДокумента;
		КонтрагентСсылка = Справочники[XDTO.КонтрагентТип].НайтиПоКоду(XDTO.Контрагент);
		Если КонтрагентСсылка.Пустая() Тогда
			ВызватьИсключение("Не найдена СЕ с кодом "+XDTO.Контрагент);
		КонецЕсли;	
		Объект.Контрагент = КонтрагентСсылка;
		Объект.Курс = XDTO.Курс;
		Объект.НомерДокумента = XDTO.НомерДокумента;
		Объект.Идентификатор77 = XDTO.Идентификатор77;
		// Склад оставили пустым, т.к. незнаем, на какой склад пришло, будут проставлять руками МУАХАХАХАХА
		//СкладСсылка = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		//Если СкладСсылка.Пустая() Тогда
		//	ЕстьОшибки = Истина;	
		//	ТекстОшибок = ТекстОшибок + ", Не найден склад с кодом "+XDTO.Склад;
		//КонецЕсли;
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		Объект.СтруктурнаяЕдиница = ПланыОбмена.ОбменРБД.ЭтотУзел().СтруктурнаяЕдиница;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		Объект.Комментарий = XDTO.Комментарий;
		Если Не XDTO.ТипДоговора = "" Тогда
			Объект.ТипДоговора = Перечисления.ТипыДоговоров[XDTO.ТипДоговора];
		КонецЕсли;
		Объект.Кратность = XDTO.Кратность;
		Объект.СуммаИтого = XDTO.СуммаИтого;
		Объект.СуммаНДСИтого = XDTO.СуммаНДСИтого;
		
		Объект.Состав.Очистить();
		Если ТипЗнч(XDTO.Состав) = Тип("СписокXDTO") Тогда
			Для Каждого Строка Из XDTO.Состав Цикл
				НоваяСтрока = Объект.Состав.Добавить();
				НоваяСтрока.Номенклатура = НайтиНоменклатуру(Строка.Номенклатура,Строка.НоменклатураRMS,СтрНенайденныхКодовТоваров);
				//спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("EA",,,НоваяСтрока.Номенклатура);	
				спрЕдиница = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию("EA",НоваяСтрока.Номенклатура); //dps+ 15.10.05
				Если спрЕдиница.Пустая() Тогда
					//спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("KG",,,НоваяСтрока.Номенклатура);		
					спрЕдиница = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию("KG",НоваяСтрока.Номенклатура); //dps+ 15.10.05
				КонецЕсли;
				Если спрЕдиница.Пустая() Тогда
					спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("Коэффициент",Строка.Коэффициент,,НоваяСтрока.Номенклатура);
				КонецЕсли;
				//ШиловМВ 06.06.14 №000118122
				//Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЦенаПротокола) Тогда
				//	НоваяСтрока.ЦенаПротокола = Разработка_Ижтрейдинг_Сервер.ПолучитьЦенуНоменклатуры_Общепит(НоваяСтрока.Номенклатура);
				//КонецЕсли;
				//ШиловМВ 06.06.14
				НоваяСтрока.ЕдиницаИзмерения = спрЕдиница;
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.КоличествоПоДокументу = Строка.КоличествоПоДокументу;
				НоваяСтрока.Коэффициент = Строка.Коэффициент;
				НоваяСтрока.Цена = Строка.Цена;
				НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
				НоваяСтрока.Сумма = Строка.Сумма;
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
			КонецЦикла;
		ИначеЕсли ТипЗнч(XDTO.Состав) = Тип("ОбъектXDTO") Тогда
			Строка=XDTO.Состав;
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = НайтиНоменклатуру(Строка.Номенклатура,Строка.НоменклатураRMS,СтрНенайденныхКодовТоваров);
			//спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("EA",,,НоваяСтрока.Номенклатура);	
			спрЕдиница = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию("EA",НоваяСтрока.Номенклатура); //dps+ 15.10.05
			Если спрЕдиница.Пустая() Тогда
				//спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("KG",,,НоваяСтрока.Номенклатура);		
				спрЕдиница = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию("KG",НоваяСтрока.Номенклатура); //dps+ 15.10.05
			КонецЕсли;
			Если спрЕдиница.Пустая() Тогда
				спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("Коэффициент",Строка.Коэффициент,,НоваяСтрока.Номенклатура);
			КонецЕсли;
			//ШиловМВ 06.06.14 №000118122
			//Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЦенаПротокола) Тогда
			//	НоваяСтрока.ЦенаПротокола = Разработка_Ижтрейдинг_Сервер.ПолучитьЦенуНоменклатуры_Общепит(НоваяСтрока.Номенклатура);
			//КонецЕсли;
			//ШиловМВ 06.06.14
			НоваяСтрока.ЕдиницаИзмерения = спрЕдиница;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.КоличествоПоДокументу = Строка.КоличествоПоДокументу;
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
			
		КонецЕсли;
		//ШиловМВ 06.06.14 №000118122
		Разработка_Ижтрейдинг_Сервер.ПолучитьЦеныПоставщика(Объект.Состав,Объект.Дата,"ЦенаПротокола");
		//ШиловМВ 06.06.14
		
		Объект.ОстаткиНоменклатуры.Очистить();
		Если ТипЗнч(XDTO.ОстаткиНоменклатуры) = Тип("СписокXDTO") Тогда
			
			Для Каждого Строка Из XDTO.ОстаткиНоменклатуры Цикл
				НоваяСтрока = Объект.ОстаткиНоменклатуры.Добавить();
				НоваяСтрока.Номенклатура =  НайтиНоменклатуру(Строка.Номенклатура,Строка.НоменклатураRMS,СтрНенайденныхКодовТоваров);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
				КонецЕсли;
				//спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("EA",,,НоваяСтрока.Номенклатура);					//
				спрЕдиница = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию("EA",НоваяСтрока.Номенклатура); //dps+ 15.10.05
				Если спрЕдиница.Пустая() Тогда																					//
					//спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("KG",,,НоваяСтрока.Номенклатура);				//
					спрЕдиница = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию("KG",НоваяСтрока.Номенклатура); //dps+ 15.10.05
				КонецЕсли;                                                                                   	                //
				НоваяСтрока.Количество = Строка.Количество;                                                                     
				Цены=ПолучитьЦеныДляПН(Объект.Дата,Объект.Фирма,НоваяСтрока.Номенклатура);										//
				Если Цены.Цена=0 и Цены.ЦенаНДС=0 и Цены.ЦенаУпр=0 и Цены.ЦенаНДСУпр=0 Тогда                                    //
					Цены=ПолучитьЦеныЗакупкиДляПН(Объект.Дата,Объект.Фирма,НоваяСтрока.Номенклатура);   						//
				КонецЕсли;                                                                                                      // Шилов М.В. 06.02.14
				Если Цены.Цена=0 и Цены.ЦенаНДС=0 и Цены.ЦенаУпр=0 и Цены.ЦенаНДСУпр=0 Тогда                                    //
					Цены=ПолучитьЦеныПоставщикаДляПН(НоваяСтрока.Номенклатура);                                                 //
				КонецЕсли;                                                                                                      //
				НоваяСтрока.Сумма = Цены.Цена*НоваяСтрока.Количество;															//                                      
				НоваяСтрока.СуммаНДС = Цены.ЦенаНДС*НоваяСтрока.Количество;														// 
				НоваяСтрока.СуммаУпр = Цены.ЦенаУпр*НоваяСтрока.Количество;														//
				НоваяСтрока.СуммаНДСУпр = Цены.ЦенаНДСУпр*НоваяСтрока.Количество;												//
			КонецЦикла;
		ИначеЕсли ТипЗнч(XDTO.ОстаткиНоменклатуры) = Тип("ОбъектXDTO") Тогда
			Строка=XDTO.ОстаткиНоменклатуры;
			НоваяСтрока = Объект.ОстаткиНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура =  НайтиНоменклатуру(Строка.Номенклатура,Строка.НоменклатураRMS,СтрНенайденныхКодовТоваров);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Не найден товар с кодом ""%1"".'"),"%1",Строка.Номенклатура));
			КонецЕсли;
			//спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("EA",,,НоваяСтрока.Номенклатура);					//
			спрЕдиница = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию("EA",НоваяСтрока.Номенклатура); //dps+ 15.10.05
			Если спрЕдиница.Пустая() Тогда																					//
				//спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("KG",,,НоваяСтрока.Номенклатура);				//
				спрЕдиница = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию("KG",НоваяСтрока.Номенклатура); //dps+ 15.10.05
			КонецЕсли;                                                                                   	                //
			НоваяСтрока.Количество = Строка.Количество;                                                                     
			Цены=ПолучитьЦеныДляПН(Объект.Дата,Объект.Фирма,НоваяСтрока.Номенклатура);										//
			Если Цены.Цена=0 и Цены.ЦенаНДС=0 и Цены.ЦенаУпр=0 и Цены.ЦенаНДСУпр=0 Тогда                                    //
				Цены=ПолучитьЦеныЗакупкиДляПН(Объект.Дата,Объект.Фирма,НоваяСтрока.Номенклатура);   						//
			КонецЕсли;                                                                                                      // Шилов М.В. 06.02.14
			Если Цены.Цена=0 и Цены.ЦенаНДС=0 и Цены.ЦенаУпр=0 и Цены.ЦенаНДСУпр=0 Тогда                                    //
				Цены=ПолучитьЦеныПоставщикаДляПН(НоваяСтрока.Номенклатура);                                                 //
			КонецЕсли;                                                                                                      //
			НоваяСтрока.Сумма = Цены.Цена*НоваяСтрока.Количество;															//                                      
			НоваяСтрока.СуммаНДС = Цены.ЦенаНДС*НоваяСтрока.Количество;														// 
			НоваяСтрока.СуммаУпр = Цены.ЦенаУпр*НоваяСтрока.Количество;														//
			НоваяСтрока.СуммаНДСУпр = Цены.ЦенаНДСУпр*НоваяСтрока.Количество;				
		КонецЕсли;
		
		Объект.ОбработанЦВД = XDTO.ОбработанЦВД;
		XDTO = Строка(Объект);
		Если НЕ ПустаяСтрока(СтрНенайденныхКодовТоваров) Тогда
			ВызватьИсключение("Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров));
		Иначе
			Объект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		Результат = Истина;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ЗагрузитьDocumentObjectПланируемаяПоставка(XDTO) Экспорт
	Попытка
		НомерДокумента = "";
		ЕстьОшибки = Ложь;
		ТекстОшибок = "";
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.ПланируемаяПоставка.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			Объект = Документы.ПланируемаяПоставка.СоздатьДокумент();
			Ссылка = Документы.ПланируемаяПоставка.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Ref));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		//{БредовЮГ 2013-08-29 добавил номер документа в схему и в код, для EDI
		НомерДокумента = XDTO.Number;
		//БредовЮГ 2013-08-29 добавил номер документа в схему и в код, для EDI}
		Объект.ПометкаУдаления = XDTO.DeletionMark;
		Объект.Дата = XDTO.Date;
		Объект.ДатаПоставкиОт = XDTO.ДатаПоставкиОт;
		Объект.ДатаПоставкиДо = XDTO.ДатаПоставкиДо;
		Объект.СтруктурнаяЕдиница = ПланыОбмена.ОбменРБД.ЭтотУзел().СтруктурнаяЕдиница;
		//{МининНА 2014-07-25 10:36:54 Наряд № 000122369 
		КонтрагентСсылка = ПолучитьКонтрагента(XDTO.КонтрагентТип,XDTO.Контрагент);
		//МининНА 2014-07-25 10:36:54 Наряд № 000122369} 
		Если КонтрагентСсылка.Пустая() Тогда
			ТекстОшибок = ТекстОшибок + "Не найден контрагент с кодом "+XDTO.Контрагент;
			ЕстьОшибки = Истина;
		КонецЕсли;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.Контрагент = КонтрагентСсылка;
		Объект.Комментарий = XDTO.Комментарий;
		Объект.Валюта = Справочники.Валюты.НайтиПоКоду(XDTO.Валюта);
		Объект.Склад = Справочники.Склады.НайтиПоКоду(XDTO.Склад);
		Объект.Курс = XDTO.Курс;
		Объект.Кратность = XDTO.Кратность;
		Объект.СуммаИтого = XDTO.СуммаИтого;
		Объект.СуммаНДСИтого = XDTO.СуммаНДСИтого;
		Объект.ЗаказМагазина = XDTO.ЗаказМагазина;
		Объект.Фирма = Справочники.Организации.НайтиПоКоду(XDTO.Фирма);
		
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Состав Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = НайтиНоменклатуру(Строка.Номенклатура,Строка.НоменклатураRMS,СтрНенайденныхКодовТоваров);
			//спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("EA",,,НоваяСтрока.Номенклатура);	
			спрЕдиница = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию("EA",НоваяСтрока.Номенклатура); //dps+ 15.10.05
			Если спрЕдиница.Пустая() Тогда
				//спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("KG",,,НоваяСтрока.Номенклатура);		
				спрЕдиница = Izh_ОбщегоНазначения.ПолучитьЕдиницуИзмеренияПоНаименованию("KG",НоваяСтрока.Номенклатура); //dps+ 15.10.05
			КонецЕсли;
			Если спрЕдиница.Пустая() Тогда
				спрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("Коэффициент",Строка.Коэффициент,,НоваяСтрока.Номенклатура);
			КонецЕсли;
			НоваяСтрока.ЕдиницаИзмерения = спрЕдиница;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Коэффициент = Строка.Коэффициент;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Число(Строка.СтавкаНДС));
		КонецЦикла;
		Если НЕ ЕстьОшибки И Не ПустаяСтрока(СтрНенайденныхКодовТоваров) Тогда
			Объект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		XDTO = Строка(Объект);
		Если НЕ ПустаяСтрока(СтрНенайденныхКодовТоваров) Тогда
			ВызватьИсключение("Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров));
		Иначе
			Объект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		//{БредовЮГ 2013-08-29 добавил номер документа в схему и в код, для EDI
		НаборЗаписей = РегистрыСведений.Izh_СтатусEDIСообщений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = Объект.Ссылка;
		НоваяЗапись.НомерEDIЗаказа = НомерДокумента;
		НоваяЗапись.Статус = Перечисления.СтатусыEDIСообщений.Отправлен;
		НаборЗаписей.Записать();
		//БредовЮГ 2013-08-29 добавил номер документа в схему и в код, для EDI}
		
		Результат = Истина;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция НайтиНоменклатуру(ВходящийКод,ВходящийКодRMS,СтрНенайденныхКодовТоваров)
	спрНоменклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(ВходящийКод));
	Если спрНоменклатура.Пустая() Тогда
		спрНоменклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(ВходящийКодRMS));
	КонецЕсли;
	Если спрНоменклатура.Пустая() Тогда
		СтрНенайденныхКодовТоваров = СтрНенайденныхКодовТоваров + ", " + СокрЛП(ВходящийКод)+" ("+ВходящийКодRMS+")"; 
	КонецЕсли;
	Возврат спрНоменклатура;	
КонецФункции

Функция ИзСтрокиВДату(СтрДата)
	стрДата_ = СокрЛП(СтрЗаменить(стрДата,".",""));
	стрДата_ = СокрЛП(СтрЗаменить(стрДата_,"-",""));
	стрДата_ = СокрЛП(СтрЗаменить(стрДата_,":",""));
	стрДата_ = СокрЛП(СтрЗаменить(стрДата_,"T",""));
	Попытка
		датДата=Дата(стрДата_);
		
		Возврат датДата;
	Исключение
		Возврат Дата('00010101');
	КонецПопытки;
КонецФункции

//{МининНА 2014-07-25 10:36:54 Наряд № 000122369 
Функция ПолучитьКонтрагента(КонтрагентТип,Контрагент)
	Если ВРег(КонтрагентТип) = ВРег("СтруктурныеЕдиницы") Тогда 
		Возврат Справочники[КонтрагентТип].НайтиПоКоду(Контрагент);
	ИначеЕсли ВРег(КонтрагентТип) = ВРег("Контрагенты") Тогда
		Текстусловия = "";
		Запрос = Новый Запрос;
		Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() и ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
			СпрКонтрагент = Справочники.Контрагенты.НайтиПоКоду(Контрагент);		
			Запрос.УстановитьПараметр("ВходящийПараметр",СпрКонтрагент);
			ТекстУсловия = "	Контрагенты.Ссылка В ИЕРАРХИИ (&ВходящийПараметр)
							|	И Контрагенты.ПротоколРЦ И Контрагенты.Статус ";
		Иначе
			ТекстУсловия = "	Контрагенты.Код = &ВходящийПараметр ";
			Запрос.УстановитьПараметр("ВходящийПараметр",Число(Контрагент));
		КонецЕсли;	
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		| 	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ "+ТекстУсловия;
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда 
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			Возврат Результат.Выгрузить()[0].Ссылка;
		КонецЕсли;
	Иначе 
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
КонецФункции
//МининНА 2014-07-25 10:36:54 Наряд № 000122369} 
