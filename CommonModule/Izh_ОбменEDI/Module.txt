
// Загрузка/Выгрузка документов
Процедура ПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт
	//тест3
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
Конецпроцедуры

Функция ОпределитьИмяФайла(ОператорEDI,ВидДокумантаEDI)
	Если НЕ ЗначениеЗаполнено(ОператорEDI) Тогда
		Возврат "";
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	EDIПровайдерыИменаДокументов.ИмяФайла КАК Имя
		|ИЗ
		|	Справочник.EDIПровайдеры.ИменаДокументов КАК EDIПровайдерыИменаДокументов
		|ГДЕ
		|	EDIПровайдерыИменаДокументов.Ссылка = &Ссылка
		|	И EDIПровайдерыИменаДокументов.Документ = &Документ";

	Запрос.УстановитьПараметр("Документ", ВидДокумантаEDI);
	Запрос.УстановитьПараметр("Ссылка", ОператорEDI);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат  СокрЛП(ВыборкаДетальныеЗаписи.Имя);
	
КонецФункции

Функция ОтправитьORDERS(Объект) Экспорт
	СсылкаДокумента=Объект.Ссылка;
	Если ТипЗнч(СсылкаДокумента.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ОтменитьРегистрацию(Объект);
		Возврат Истина;
	КонецЕсли;		
	Данные = Новый Соответствие;
	ОператорEDI=ПолучитьEDIПрвайдера(СсылкаДокумента.Контрагент);
	ДокВид=СсылкаДокумента.Метаданные().Имя;
	//Если ОператорEDI=Справочники.EDIПровайдеры.Exite Тогда
	//	ДокВид="ORDERS"
	//КонецЕсли;
	//++Котлячкова ЕВ 03,02,15 Ошибки обмена EDI в магазине
	ДокВид=ОпределитьИмяФайла(ОператорEDI,Перечисления.Izh_ВидыEDIДокументов.ORDERS);
	//--Котлячкова ЕВ 03,02,15 Ошибки обмена EDI в магазине
	//++Котлячкова ЕВ 10,01,15 Ошибки обмена EDI в магазине
	Каталог=КаталогВыгрузки(Каталог, СсылкаДокумента.Контрагент, "ORDERS");
	//--Котлячкова ЕВ 10,01,15 Ошибки обмена EDI в магазине
	//{ СИТЕК БрыляковЕЮ 2015-01-03  
	ТекущийСтатус = РегистрыСведений.Izh_ДокументыEDI.ПолучитьПоследнее(, Новый Структура("Документ", Объект.Ссылка));
	УжеОтправлен = (ТекущийСтатус.ОтправленРаз >= 1);
	// СИТЕК БрыляковЕЮ 2015-01-03 }
	
	ИмяФайла=Каталог+ДокВид+"_"+СсылкаДокумента.Номер+"_"+Формат(СсылкаДокумента.Дата,"ДФ=yyyyMMdd")+".xml";
	Данные.Вставить("ИмяФайла",ИмяФайла);
	Данные.Вставить("НомерСообщения",СсылкаДокумента.УникальныйИдентификатор());
	Данные.Вставить("НомерДокумента",СсылкаДокумента.Номер);
	//{ СИТЕК БрыляковЕЮ 2015-01-03  
	// Исходный текст -->
	//Данные.Вставить("ФункцияСообщения","9");
	// <-- Исходный текст 
	Данные.Вставить("ФункцияСообщения", ?(УжеОтправлен, "5", "9"));
	// СИТЕК БрыляковЕЮ 2015-01-03 }
	Данные.Вставить("ДатаДокумента",СсылкаДокумента.Дата);
	Данные.Вставить("ФорматДатыДокумента","102");
	Данные.Вставить("ДатаПоставки",СсылкаДокумента.ДатаПоставкиДо);
	Данные.Вставить("ФорматДатыПоставки","102");
	Данные.Вставить("Соглашение",Строка(СсылкаДокумента.Фирма.Префикс)+"-"+Строка(Формат(СсылкаДокумента.Контрагент.Код,"ЧГ=")));
	Данные.Вставить("GLNПоставщика",НайтиGLN(СсылкаДокумента.Контрагент,"Контрагенты"));
	Данные.Вставить("GLNПокупателя",НайтиGLN(СсылкаДокумента.Фирма,"Организации"));
	Данные.Вставить("GLNПлательщика",""); //Судя по всему для предоплаты - у нас такой инф-ии нет
	Данные.Вставить("GLNМестаДоставки",НайтиGLN(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница,"СтруктурныеЕдиницы"));
	Данные.Вставить("ИДМестаДоставки",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.Код);
	Данные.Вставить("GLNКомуВыставленСчет",""); //Судя по всему для предоплаты - у нас такой инф-ии нет
	Данные.Вставить("Валюта",?(СсылкаДокумента.Валюта.Код="810","RUB",""));
	Данные.Вставить("ТабличнаяЧасть",ЗаполнитьТЗ(СсылкаДокумента));
	Данные.Вставить("ОбщаяСумма",СсылкаДокумента.СуммаИтого);
	
	ОбработкаЗагрузки=Обработки.Izh_Выгрузка.Создать();
	
	Результат=ОбработкаЗагрузки.ВыгрузитьORDERS(Данные);
	
	Если Результат<> Истина тогда
		Сообщить("Не удалось загрузить файл ");
		Возврат Ложь;
	Иначе
		ОтменитьРегистрацию(Объект);
		//{ СИТЕК БрыляковЕЮ 2014-12-29  
		// Исходный текст --> 
		//ЗафиксироватьВРегистре(Объект,СсылкаДокумента.Номер,Перечисления.СтатусыEDIСообщений.Доставлен);
		// <-- Исходный текст 
		ЗафиксироватьВРегистре(Объект, Объект.Номер, Перечисления.СтатусыEDIСообщений.Выгружен);
		// СИТЕК БрыляковЕЮ 2014-12-29 }
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//++Котлячкова ЕВ 10,01,15 Ошибки обмена EDI в магазине
Функция НайтиПровайдераКонтрагента(Контрагент,Вид)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EDIПровайдерыПоставщиков.EDIПровайдер  как EDIПровайдер
	|ИЗ
	|	РегистрСведений.EDIПровайдерыПоставщиков КАК EDIПровайдерыПоставщиков
	|ГДЕ
	|	EDIПровайдерыПоставщиков.Контрагент = &Контрагент
	|	И EDIПровайдерыПоставщиков.Основной
	|	И EDIПровайдерыПоставщиков.Контрагент ССЫЛКА Справочник."+Вид;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.EDIПровайдеры.ПустаяСсылка() ;
	Иначе
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.EDIПровайдер;
	КонецЕсли;
	
КонецФункции


Функция КаталогВыгрузки(Каталог, Контрагент, Вид)
	Каталог=ПолучитьКаталог();
	Каталог= Каталог + "\Outbox\";
	ПроверитьСуществованиеКаталога(Каталог);
	EDIПровайдер=НайтиПровайдераКонтрагента(Контрагент,"Контрагенты");
	Если EDIПровайдер=Справочники.EDIПровайдеры.Exite или EDIПровайдер=Справочники.EDIПровайдеры.Корус Тогда
		ГЛНПолучателя = НайтиGLNЦОДа();
        
	Иначе
		ГЛНПолучателя = НайтиGLN(Контрагент,"Контрагенты");
    КонецЕсли;
	Каталог= Каталог + ГЛНПолучателя+"\";
	ПроверитьСуществованиеКаталога(Каталог);
	Каталог= Каталог + Вид+"\";
	ПроверитьСуществованиеКаталога(Каталог);
	
	Возврат Каталог;	
КонецФункции

Функция НайтиGLNЦОДа()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EDIПровайдерыПоставщиков.GLN
	|ИЗ
	|	РегистрСведений.EDIПровайдерыПоставщиков КАК EDIПровайдерыПоставщиков
	|ГДЕ
	|	EDIПровайдерыПоставщиков.Контрагент = &Контрагент
	|	И EDIПровайдерыПоставщиков.Контрагент ССЫЛКА Справочник.СтруктурныеЕдиницы";
	
	Запрос.УстановитьПараметр("Контрагент", Справочники.СтруктурныеЕдиницы.Центр);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат СокрЛП(ВыборкаДетальныеЗаписи.GLN);
	КонецЕсли;
	
КонецФункции
//--Котлячкова ЕВ 10,01,15 Ошибки обмена EDI в магазине

Функция ОтправитьRECADV(Объект,АктПриемки)
	СсылкаДокумента=АктПриемки.Ссылка;
	Данные = Новый Соответствие;
	
	Если ТипЗнч(СсылкаДокумента.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ОтменитьРегистрацию(Объект);
		Возврат Истина;
	КонецЕсли;		
	Данные = Новый Соответствие;
	ОператорEDI=ПолучитьEDIПрвайдера(СсылкаДокумента.Контрагент);
	ДокВид=СсылкаДокумента.Метаданные().Имя;
	ДокВид=ОпределитьИмяФайла(ОператорEDI,Перечисления.Izh_ВидыEDIДокументов.RECADV);
	Каталог=КаталогВыгрузки(Каталог, СсылкаДокумента.Контрагент, "RECADV");
	ИмяФайла=Каталог+ДокВид+"_"+СсылкаДокумента.Номер+"_"+Формат(СсылкаДокумента.Дата,"ДФ=yyyyMMdd")+".xml";

	ГЛНПоставщика = НайтиGLN(СсылкаДокумента.Контрагент,"Контрагенты");	
	Данные.Вставить("ИмяФайла",ИмяФайла);
	Данные.Вставить("НомерСообщения",СсылкаДокумента.УникальныйИдентификатор());
	Данные.Вставить("НомерДокумента",СсылкаДокумента.Номер);
	Данные.Вставить("ДатаДокумента",СсылкаДокумента.Дата);
	Данные.Вставить("НомерЗаказа",?(ЗначениеЗаполнено(НомерЗаказаПоДокументу(СсылкаДокумента)),НомерЗаказаПоДокументу(СсылкаДокумента),НомерЗаказаПоДокументу(СсылкаДокумента.ДокОснование)));
	Данные.Вставить("ДатаЗаказа",?(ЗначениеЗаполнено(СсылкаДокумента.ДокОснование),СсылкаДокумента.ДокОснование.Дата,Дата(0001,01,01)));
	Данные.Вставить("НомерНакладной",СсылкаДокумента.НомерДокумента);
	Данные.Вставить("ДатаНакладной",СсылкаДокумента.ДатаДокумента);
	Данные.Вставить("ФункцияСообщения","9");
	Данные.Вставить("ФорматДатыДокумента","102");
	Данные.Вставить("ДатаПоставки",СсылкаДокумента.ДатаДокумента);
	Данные.Вставить("ФорматДатыПоставки","102");
	Данные.Вставить("Соглашение","");
	Данные.Вставить("GLNПоставщика",ГЛНПоставщика);
	Данные.Вставить("GLNПокупателя",НайтиGLN(СсылкаДокумента.Фирма,"Организации"));
	Данные.Вставить("GLNПлательщика",""); //Судя по всему для предоплаты - у нас такой инф-ии нет
	Данные.Вставить("GLNМестаДоставки",НайтиGLN(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница,"СтруктурныеЕдиницы"));
	Данные.Вставить("GLNКомуВыставленСчет",""); //Судя по всему для предоплаты - у нас такой инф-ии нет
	Данные.Вставить("Валюта",?(СсылкаДокумента.Валюта.Код="810","RUB",""));
	Данные.Вставить("ТабличнаяЧасть",ЗаполнитьТЗ_АП(СсылкаДокумента));
	Данные.Вставить("ОбщаяСумма",Объект.СуммаИтого);
	
	ОбработкаЗагрузки=Обработки.Izh_Выгрузка.Создать();
	
	Результат=ОбработкаЗагрузки.ВыгрузитьRECADV(Данные);
	
	Если Результат<> Истина тогда
		Сообщить("Не удалось загрузить файл ");
		Возврат Ложь;
	Иначе
		ОтменитьРегистрацию(Объект);
		ЗафиксироватьВРегистре(Объект,СсылкаДокумента.Номер,Перечисления.СтатусыEDIСообщений.Доставлен);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции                                             

Процедура ЗаписатьОшибкуВЛог(Знач ТекстСообщения,Файл,ОшибкиЗагрузки,Лог)
	ТекстСообщения = "Ошибка "+Файл.Имя+" : "+ТекстСообщения;
	Лог.ДобавитьСтроку(ТекстСообщения);
	ОшибкиЗагрузки = ?(ПустаяСтрока(ОшибкиЗагрузки),"",Символы.ПС) + ТекстСообщения;
КонецПроцедуры

Функция ЗагрузитьDESADV(Файл,Лог,ОшибкиЗагрузки)
	РезультатПроцедуры = Истина;
	НекорректныйФайл = Ложь;
	Если не Файл.имя.Существует() тогда
		ТекстОшибки = "Файл не существует";
		ЗаписатьОшибкуВЛог(ТекстОшибки,Файл,Лог,ОшибкиЗагрузки);
		Возврат Ложь; 
	КонецЕсли;
	ИмяФайла = Файл.ПолноеИмя;
	ОбработкаЗагрузки=Обработки.Izh_ЗагрузкаDESADV.Создать();
	
	ОшибкаПарсинга = "";
	Попытка 
		Результат=ОбработкаЗагрузки.Загрузить(ИмяФайла,Лог);
	Исключение
		ОшибкаПарсинга = ОписаниеОшибки();
	КонецПопытки;
	
	Если ТипЗнч(Результат)<> Тип("Структура") тогда
		ТекстОшибки = ОшибкаПарсинга;
		ЗаписатьОшибкуВЛог(ТекстОшибки,Файл,Лог,ОшибкиЗагрузки);
		Возврат Ложь;
	Иначе
		Попытка
			// Получим все необходимое
			НомерПокупателя= СокрЛП(Строка(Результат["НомерДокумента"]));
			Дата = Результат["ДатаДокумента"];
			НомерЗаказа= СокрЛП(Строка(Результат["НомерЗаказа"]));
			ДатаЗаказа = Результат["ДатаЗаказа"];
			ТипСообщения = "desadv";
			GLNПокупателя = Результат["GLNПокупателя"];
			GLNПоставщика = Результат["GLNПоставщика"];
			GLNМестаДоставки = Результат["GLNМестаДоставки"];
			Поставщик_ = НайтиПоGLN(GLNПоставщика,"Контрагенты");
			Покупатель_ = НайтиПоGLN(GLNПокупателя,"Организации");
			МестоДоставки_ = НайтиПоGLN(GLNМестаДоставки,"СтруктурныеЕдиницы");
			
			Если Поставщик_=Неопределено тогда
				ТекстОшибки = "Не найден поставщик с GLN "+GLNПоставщика;
				ЗаписатьОшибкуВЛог(ТекстОшибки,Файл,Лог,ОшибкиЗагрузки);
				НекорректныйФайл=Истина;
			КонецЕсли;
			
			Если Покупатель_=Неопределено тогда
				ТекстОшибки = "Не найден покупатель с GLN "+GLNПокупателя;
				ЗаписатьОшибкуВЛог(ТекстОшибки,Файл,Лог,ОшибкиЗагрузки);
				НекорректныйФайл=Истина;
			КонецЕсли;
			
			Если МестоДоставки_= Неопределено тогда
				МестоДоставки_=Справочники.СтруктурныеЕдиницы.ПустаяСсылка();	
			КонецЕсли;	
			
			Если НекорректныйФайл тогда
				Возврат Ложь;	
			КонецЕсли;
			
			//{ СИТЕК БрыляковЕЮ 2014-12-26  Это структура, а не соответствие, если вид сообщения доступен, то он равен Истина, а не наоборот
			УсловияОбмена= ПолучитьУсловияОбменаПоставщиков(Поставщик_); 
			Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин Тогда 
				//{ СИТЕК БрыляковЕЮ 2014-12-26  
				// Исходный текст -->
				// То, что здесь было ушло в модуль Izh_ОбменEDI_Помойка
				// <-- Исходный текст 
				ЗагрузитьDESADV_Магазин(Результат, Поставщик_, Покупатель_, МестоДоставки_, Лог);
				// СИТЕК БрыляковЕЮ 2014-12-26 }
			Иначе 
				
				Если НЕ УсловияОбмена.DESADV Тогда //Грузить DESADV не нужно!!!
					ТекстОшибки = "DESADV от поставщика "+Поставщик_+" загружать не положено!";
					ЗаписатьОшибкуВЛог(ТекстОшибки,Файл,Лог,ОшибкиЗагрузки);
					Возврат Ложь;
				КонецЕсли;
				Если НЕ УсловияОбмена.ORDERS Тогда  //Грузим без заказа
					//Сначала надо проверить - а вдруг уже грузили
					Если  не ДанныйDESADVУжеСформирован("",НомерПокупателя,Дата,Поставщик_) Тогда
						СоздатьАктПриемкиНаОснованииDESADV(Результат,Поставщик_,Покупатель_,МестоДоставки_,"",ИмяФайла,"",Лог);
					Иначе
						Лог.ДобавитьСтроку("Сообщение "+НомерПокупателя+" уже обработан, сообщение будет перенесено в архив.");
					КонецЕсли;
				Иначе //Ищем основание и заполняем акт приемки на основании планируемой поставки	
					ДокументЗаказ = ДокументЗаказаПоНомеруПоставщика("Desadv",ДатаЗаказа,НомерЗаказа);					
					//++БИТ БВО 2015-06-10					
					Поставщик_ = НайтиПоGLN(GLNПоставщика,"Контрагенты", Истина); //Массив всех поставщиков по GLN
					//--БИТ БВО 2015-06-10					
					
					// В случае 
					Если ЗначениеЗаполнено(ДокументЗаказ) тогда
						Если ДанныйDESADVУжеСформирован(НомерЗаказа,НомерПокупателя,Дата,Поставщик_) Тогда
							Лог.ДобавитьСтроку("Сообщение "+НомерПокупателя+" уже обработан, сообщение будет перенесено в архив.");
							Возврат Истина;
						Иначе
							СоздатьАктПриемкиНаОснованииDESADV(Результат,Поставщик_,Покупатель_,МестоДоставки_,ДокументЗаказ,ИмяФайла,НомерЗаказа,Лог);
						КонецЕсли;
						
					Иначе
						ТекстОшибки = "Поставщику не разрешено выполнять отгрузку без предварительного заказа. Номер:"+НомерЗаказа+" ,Дата:"+ДатаЗаказа;
						ЗаписатьОшибкуВЛог(ТекстОшибки,Файл,Лог,ОшибкиЗагрузки);
						//Ищем по номеру и дате акта
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ЗаписатьОшибкуВЛог(ТекстОшибки,Файл,Лог,ОшибкиЗагрузки);
			Возврат Ложь;
		КонецПопытки
	КонецЕсли;
	Возврат РезультатПроцедуры;
	//БредовЮГ 2014-07-23 Достали ошибки в файлах, реализуем через попытку и фиксации в логе , по хорошему переписать бы все это	}
КонецФункции

Процедура ЗагрузитьСлужебныеСообщения(Файл,ТипСообщения)
	ОбработкаЗагрузки=Обработки.Izh_ЗагрузкаDESADV.Создать();
	Результат=ОбработкаЗагрузки.ОбработатьСлужебноеСообщение(Файл);
	ТипСообщения=Результат.Получить("СлужебныйТип");	
	Если ТипСообщения = "ERROR" тогда
		ВидСообщения=Перечисления.СтатусыEDIСообщений.Ошибка;
	ИначеЕсли ТипСообщения = "CONFIRM" тогда   
		ВидСообщения=Перечисления.СтатусыEDIСообщений.Доставлен;
	КонецЕсли;
	//////////Получим номер документа://///////////////
	ВыгруженныйДокумент=Результат.Получить("OriginalFileName");
	//Обрежем расширение файла
	ВыгруженныйДокумент= Лев(ВыгруженныйДокумент,СтрДлина(ВыгруженныйДокумент)-4);
	//Теперь найдем где начинается номер
	Нс = Найти(ВыгруженныйДокумент,"_");                 
	Если НС>0 тогда
		НомерНакладной = Сред(ВыгруженныйДокумент,НС+1,СтрДлина(ВыгруженныйДокумент)-НС);
		нс = Найти(НомерНакладной,"_");   
		Если НС>0 тогда
			НомерНакладной_= Лев(НомерНакладной,НС-1);
			
			ДатаНакладной_ = Прав(НомерНакладной,СтрДлина(НомерНакладной)-нс);
			//Если документ был выслан из 7-ки то формат даты "ДД.ММ.ГГ" - ее нужно преобразовать
			ДатаНакладной = ПреобразоватьВДату(ДатаНакладной_);
		КонецЕсли;
	КонецЕсли;
	
	/////////////////////////////////////////////////////		
	
	
	Если ЗначениеЗаполнено(НомерНакладной_) Тогда
		Если Результат.Получить("MessageType")="заказ" или Результат.Получить("MessageType")="ORDERS" Тогда
			//{БредовЮГ 2015-02-13 Обработка служебных сообщений ORDERS
			Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	Izh_СтатусEDIСообщений.Документ
				|ИЗ
				|	РегистрСведений.Izh_СтатусEDIСообщений КАК Izh_СтатусEDIСообщений
				|ГДЕ
				|	Izh_СтатусEDIСообщений.Документ ССЫЛКА Документ.ПланируемаяПоставка
				|	И Izh_СтатусEDIСообщений.НомерEDIЗаказа = &НомерEDIЗаказа
				|	И Izh_СтатусEDIСообщений.Документ.Дата МЕЖДУ &НачалоДня И &КонецДня");
			ИначеЕсли ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	ПланируемаяПоставка.Ссылка КАК Документ
				|ИЗ
				|	Документ.ПланируемаяПоставка КАК ПланируемаяПоставка
				|ГДЕ
				|	ПланируемаяПоставка.Дата МЕЖДУ &НачалоДня И &КонецДня
				|	И ПланируемаяПоставка.Номер = &НомерEDIЗаказа");
			КонецЕсли;	
			Запрос.УстановитьПараметр("НомерEDIЗаказа", НомерНакладной_);
			Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ДатаНакладной));
			Запрос.УстановитьПараметр("КонецДня", КонецДня(ДатаНакладной));
			Результат = Запрос.Выполнить();
			Если  НЕ Результат.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();			
				ЗафиксироватьВРегистре(ВыборкаДетальныеЗаписи.Документ,НомерНакладной_,ВидСообщения);
			КонецЕсли;
			//БредовЮГ 2015-02-13 Обработка служебных сообщений ORDERS}
		Иначе
			//ПриходнаяНакладная или АктПриемки, только сформирован в этой базе, поэтому ищем по номеру документа
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Izh_СтатусEDIСообщений.Документ,
			|	Izh_СтатусEDIСообщений.НомерEDIЗаказа
			|ПОМЕСТИТЬ АктПриемки
			|ИЗ
			|	РегистрСведений.Izh_СтатусEDIСообщений КАК Izh_СтатусEDIСообщений
			|ГДЕ
			|	Izh_СтатусEDIСообщений.Документ ССЫЛКА Документ.АктПриемки
			|	И Izh_СтатусEDIСообщений.Документ.Номер = &НомерАкта
			|	И Izh_СтатусEDIСообщений.Документ.Дата МЕЖДУ &НачалоДня И &КонецДня
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Izh_СтатусEDIСообщений.Документ
			|ИЗ
			|	АктПриемки КАК АктПриемки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Izh_СтатусEDIСообщений КАК Izh_СтатусEDIСообщений
			|		ПО АктПриемки.Документ = Izh_СтатусEDIСообщений.Документ.ДокАктПриемки
			|			И АктПриемки.НомерEDIЗаказа = Izh_СтатусEDIСообщений.НомерEDIЗаказа
			|ГДЕ
			|	Izh_СтатусEDIСообщений.Документ ССЫЛКА Документ.ПриходнаяНакладная";
			
			Запрос.УстановитьПараметр("НомерАкта", НомерНакладной_);
			Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ДатаНакладной));
			Запрос.УстановитьПараметр("КонецДня", КонецДня(ДатаНакладной));
			Результат = Запрос.Выполнить();
			Если  НЕ Результат.Пустой() Тогда 
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();			
				ЗафиксироватьВРегистре(ВыборкаДетальныеЗаписи.Документ,НомерНакладной_,ВидСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	                                         

// Функции для обмена
Процедура Выгрузить() Экспорт 
	ВыборкаУзлов = ПланыОбмена.Izh_ОбменEDI.Выбрать();
	Пока выборкаУзлов.Следующий() Цикл
		ТекУзел = выборкаУзлов.Ссылка;
		Если ТекУзел = ПланыОбмена.Izh_ОбменEDI.ЭтотУзел() Тогда
			ПРодолжить;
		КонецЕсли; 
		выборкаИзменений = ПланыОбмена.ВыбратьИзменения(ТекУзел, ТекУзел.НомерОтправленного+1);
		Пока выборкаИзменений.Следующий() Цикл
			Объект = выборкаИзменений.Получить();
			Выгрузилось=Ложь;
			Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекУзел, Объект);
				продолжить;
			КонецЕсли;
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПланируемаяПоставка") Тогда
				Выгрузилось = ОтправитьORDERS(Объект);
				//dps+ 05.05.2014   Наряд №000114752
			ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
				Выгрузилось = ОтправитьRETANN(Объект);	
				//dps- 05.05.2014 	
			ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
				//{БредовЮГ 2014-12-01 Наряд №000135381
				//АктПриемки=Объект.ДокАктПриемки;
				//Если ЗначениеЗаполнено(АктПриемки) И  ТипЗнч(АктПриемки) = Тип("ДокументСсылка.АктПриемки") Тогда
				//	Выгрузилось = ОтправитьRECADV(Объект,АктПриемки);
				//КонецЕсли;
				//БредовЮГ 2014-12-01 Наряд №000135381}
			КонецЕсли;
			Если Выгрузилось Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(ТекУзел, Объект);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

Процедура Загрузить() Экспорт 
	ПросканироватьВходящийКаталог();
КонецПроцедуры

Функция ПолучитьКаталог() 
	
	//{ СИТЕК БрыляковЕЮ 2014-12-26  
	Каталог = "";
	Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин Тогда
		
		Каталог = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.КаталогОбменаEDI);
		
	Иначе
		// СИТЕК БрыляковЕЮ 2014-12-26 }
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Izh_КаталогиВыгрузкиEDI.Каталог
		|ИЗ
		|	РегистрСведений.Izh_КаталогиВыгрузкиEDI КАК Izh_КаталогиВыгрузкиEDI
		|ГДЕ
		|	Izh_КаталогиВыгрузкиEDI.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
		
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		
		//{ СИТЕК БрыляковЕЮ 2014-12-26  
		// Исходный текст --> 
		//Результат = Запрос.Выполнить();
		//Если Результат.Пустой() Тогда
		//	Сообщить("Каталог обмена не задан!!!");
		//	Возврат "";                            
		//КонецЕсли;
		//
		//ВыборкаДетальныеЗаписи = Результат.Выбрать();
		//
		//ВыборкаДетальныеЗаписи.Следующий();
		// <-- Исходный текст 
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Каталог = Выборка.Каталог;
		КонецЕсли;
		// СИТЕК БрыляковЕЮ 2014-12-26 }
		
		//{ СИТЕК БрыляковЕЮ 2014-12-26  
	КонецЕсли;
	Возврат Каталог;
	// СИТЕК БрыляковЕЮ 2014-12-26 }
КонецФункции

Функция ПолучитьКаталогЛог() 
	
	//{ СИТЕК БрыляковЕЮ 2014-12-26  
	Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин Тогда
		Каталог = ПолучитьКаталог();
		Если НЕ ПустаяСтрока(Каталог) Тогда
			Каталог = Каталог + "\log";
			Возврат Каталог;
		КонецЕсли;
	Иначе	
		// СИТЕК БрыляковЕЮ 2014-12-26 }
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Izh_КаталогиВыгрузкиEDI.КаталогЛог
		|ИЗ
		|	РегистрСведений.Izh_КаталогиВыгрузкиEDI КАК Izh_КаталогиВыгрузкиEDI
		|ГДЕ
		|	Izh_КаталогиВыгрузкиEDI.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
		
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Неопределено;                            
		КонецЕсли;
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.КаталогЛог;
	КонецЕсли;
КонецФункции

Функция ОпределитьВидСообщения(Файл)
	Путь = СокрЛП(Нрег(Файл.Путь));
	Если Прав(Путь,1)="\" тогда
		Путь=Лев(путь,СтрДлина(Путь)-1);
	КонецЕсли;
	к=СтрДлина(путь);
	Пока Сред(Путь,к,1)<>"\" цикл
		к=к-1;	
	КонецЦикла;
	
	ВидСообщения="";
	Если к>0 тогда
		ВидСообщения = Прав(Путь,СтрДлина(Путь)-к);	
	КонецЕсли;
	
	Возврат ВидСообщения;
КонецФункции

Функция ПросканироватьВходящийКаталог() 
	
	КаталогЛогФайл = ПолучитьКаталогЛог();
	Если НЕ ЗначениеЗаполнено(КаталогЛогФайл)  тогда
		ВызватьИсключение "Указан некорректный каталог лог файла!";
	КонецЕсли;
	
	Файл = Новый Файл(КаталогЛогФайл);
	Если НЕ (Файл.Существует() и Файл.ЭтоКаталог()) тогда
		ВызватьИсключение "Каталог "+КаталогЛогФайл+ " не существует ";
	Конецесли;
	
	КаталогЛогФайл = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогЛогФайл);
	
	КаталогОбмена = ПолучитьКаталог();
	Каталог = КаталогОбмена;
	Если НЕ ЗначениеЗаполнено(КаталогОбмена) тогда
		ВызватьИсключение "Указан некорректный каталог обмена!";
	КонецЕсли;
	
	Файл = Новый Файл(КаталогОбмена);
	Если НЕ (Файл.Существует() И Файл.ЭтоКаталог()) тогда
		ВызватьИсключение "Каталог "+КаталогОбмена+" не существует ";
	Конецесли;
	
	КаталогОбмена = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогОбмена);
	
	КаталогОбмена=КаталогОбмена+"inbox";
	
	Файл = Новый Файл(КаталогОбмена);
	
	Если НЕ (Файл.Существует() и Файл.ЭтоКаталог()) тогда
		ВызватьИсключение "Не существует каталог"+КаталогОбмена;
	Конецесли;
	
	Лог=Новый ТекстовыйДокумент;
	
	НайденныеФайлы = НайтиФайлы(КаталогОбмена,"*",Истина);
	ТекстОшибки = "";
	Для каждого Файл из НайденныеФайлы цикл
		Если Не Файл.ЭтоКаталог() тогда
			ИмяФайла = файл.Имя;
			к=Найти(ИмяФайла,"#");
			Если к>0 тогда
				ИмяФайла = Лев(ИмяФайла,к-1);
				ИмяФайла=Файл.Путь+ИмяФайла;
				ПереместитьФайл(Файл.ПолноеИмя,ИмяФайла);
				Файл = Новый Файл(ИмяФайла);
			КонецЕсли;
			
			Сообщить("Обрабатываем файл "+Файл.ПолноеИмя);
			Лог.ДобавитьСтроку("Обрабатываем файл "+Файл.ПолноеИмя);
			ВидСообщения = ОпределитьВидСообщения(Файл);	
			Если ВидСообщения= "desadv" тогда
				Результат = ЗагрузитьDESADV(Файл,Лог,ТекстОшибки);
				Если Результат Тогда
					ПеренесенныйФайл = ПеренестиСообщениеВАрхив(Каталог,Файл);
					Файл_ = новый Файл(ПеренесенныйФайл);
					Если Не Файл_.Существует() Тогда 
						ЗаписатьОшибкуВЛог("Не найден в архиве файл "+ ПеренесенныйФайл,Файл,ТекстОшибки,Лог);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (ВидСообщения="orders") или (ВидСообщения="recadv") тогда
				ИмяФайла = Файл.ПолноеИмя;
				ЗагрузитьСлужебныеСообщения(ИмяФайла,ВидСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаписатьЛог(КаталогЛогФайл,Лог);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецФункции

// Заполнение данных документов
Функция НайтиПоGLN(GLNПоставщика,Вид, ВыгружатьВсехПоGLN = Ложь)
//--БИТ БВО 2015-06-10
	//{БредовЮГ 2014-07-24 Наряд №000122252
	Результат = Неопределено;
	ТекстУсловия = "";
	Если Константы.ИспользоватьПодразделенияПоставщиков.Получить() И Вид = "Контрагенты" Тогда
		ТекСтруктурнаяЕдиница = ПланыОбмена.ОбменРБД.ЭтотУзел().СтруктурнаяЕдиница;
		Если ТекСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад тогда
			ТекстУсловия = "
			|И EDIПровайдерыПоставщиков.Контрагент.ПротоколРЦ
			|И EDIПровайдерыПоставщиков.Контрагент.Статус "
		КонецЕсли;
	КонецЕсли;
	//БредовЮГ 2014-07-24 Наряд №000122252}
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EDIПровайдерыПоставщиков.Контрагент
	|ИЗ
	|	РегистрСведений.EDIПровайдерыПоставщиков КАК EDIПровайдерыПоставщиков
	|ГДЕ
	|	EDIПровайдерыПоставщиков.GLN = &GLN
	|	И EDIПровайдерыПоставщиков.Контрагент ССЫЛКА Справочник."+Вид+"
	//{БредовЮГ 2014-07-24 Наряд №000122252
	|"+ТекстУсловия;
	//БредовЮГ 2014-07-24 Наряд №000122252}
	
	Запрос.УстановитьПараметр("GLN", GLNПоставщика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если ВыгружатьВсехПоGLN Тогда	
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контрагент");
	Иначе
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
			ВыборкаДетальныеЗаписи.Следующий();			
			Результат = ВыборкаДетальныеЗаписи.Контрагент;
		КонецЕсли;			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//++Котлячкова ЕВ 10,01,15 Ошибки обмена EDI в магазине
Функция НайтиGLN(Контрагент,Вид)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EDIПровайдерыПоставщиков.GLN
	|ИЗ
	|	РегистрСведений.EDIПровайдерыПоставщиков КАК EDIПровайдерыПоставщиков
	|ГДЕ
	|	EDIПровайдерыПоставщиков.Контрагент = &Контрагент
	|	И EDIПровайдерыПоставщиков.Основной
	|	И EDIПровайдерыПоставщиков.Контрагент ССЫЛКА Справочник."+Вид;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат СокрЛП(ВыборкаДетальныеЗаписи.GLN);
	КонецЕсли;
	
КонецФункции
//--Котлячкова ЕВ 10,01,15 Ошибки обмена EDI в магазине

Функция ДокументЗаказаПоНомеруПоставщика(ТипСообщения,Дата,НомерEDIЗаказа)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыEDI.Документ,
	|	СтатусыEDI.Статус
	|ИЗ
	|	РегистрСведений.Izh_СтатусEDIСообщений КАК СтатусыEDI
	|ГДЕ
	|	СтатусыEDI.НомерEDIЗаказа = &НомерEDIЗаказа
	|	И СтатусыEDI.Документ ССЫЛКА Документ.ПланируемаяПоставка
	|	И СтатусыEDI.Статус = &Статус
	|	И НАЧАЛОПЕРИОДА(СтатусыEDI.Документ.Дата, ДЕНЬ) = &Дата";
	
	Запрос.УстановитьПараметр("НомерEDIЗаказа", НомерEDIЗаказа);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыEDIСообщений.Доставлен);
	Запрос.УстановитьПараметр("Дата", Дата(Дата));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Документы.ПланируемаяПоставка.ПустаяСсылка();
	Иначе
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Документ=ВыборкаДетальныеЗаписи.Документ;
		
	КонецЕсли;
	Возврат Документ;
	
КонецФункции

Функция НомерЗаказаПоДокументу(Документ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыEDI.Документ,
	|	СтатусыEDI.Статус,
	|	СтатусыEDI.НомерEDIЗаказа
	|ИЗ
	|	РегистрСведений.Izh_СтатусEDIСообщений КАК СтатусыEDI
	|ГДЕ
	|	СтатусыEDI.Статус = &Статус
	|	И СтатусыEDI.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыEDIСообщений.Доставлен);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Документ=ВыборкаДетальныеЗаписи.НомерEDIЗаказа;
		
	КонецЕсли;
	Возврат Документ;
	
КонецФункции

Функция ДанныйDESADVУжеСформирован(НомерEDIЗаказа,НомерПокупателя,ДатаПоставщика,Поставщик)

	Если НомерEDIЗаказа<>"" Тогда
		//сначала проверим, загружали такой DESADV по заказу:
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Izh_СтатусEDIСообщений.Документ.ДатаДокумента КАК Дата,
		|	Izh_СтатусEDIСообщений.Документ.НомерДокумента КАК Номер
		|ИЗ
		|	РегистрСведений.Izh_СтатусEDIСообщений КАК Izh_СтатусEDIСообщений
		|ГДЕ
		|	Izh_СтатусEDIСообщений.НомерEDIЗаказа = &НомерEDIЗаказа
		|	И Izh_СтатусEDIСообщений.Статус = &Статус
		|	И Izh_СтатусEDIСообщений.Документ ССЫЛКА Документ.АктПриемки
		|	И Izh_СтатусEDIСообщений.Документ.Контрагент В (&Контрагенты)";
		
		Запрос.УстановитьПараметр("НомерEDIЗаказа"	, НомерEDIЗаказа);
		Запрос.УстановитьПараметр("Статус"			, Перечисления.СтатусыEDIСообщений.Получен);
		Запрос.УстановитьПараметр("Контрагенты"		, Поставщик); //Может передаваться массив
		Результат = Запрос.Выполнить();	
		Если не Результат.Пустой() Тогда
			ВыборкаДетальныеЗаписи = Результат.Выбрать();		
			ВыборкаДетальныеЗаписи.Следующий();
			Возврат СокрЛП(НомерПокупателя)=СокрЛП(ВыборкаДетальныеЗаписи.Номер)
		КонецЕсли;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктПриемки.Ссылка
		|ИЗ
		|	Документ.АктПриемки КАК АктПриемки
		|ГДЕ
		|	АктПриемки.Контрагент В (&Контрагенты)
		|	И НАЧАЛОПЕРИОДА(АктПриемки.ДатаДокумента,День) = &ДатаДокумента
		|	И АктПриемки.НомерДокумента = &НомерДокумента";
		
		Запрос.УстановитьПараметр("ДатаДокумента"	, Дата(ДатаПоставщика));
		Запрос.УстановитьПараметр("НомерДокумента"	, НомерПокупателя);
		Запрос.УстановитьПараметр("Контрагенты"		, Поставщик);  //Может передаваться массив
		
		Результат = Запрос.Выполнить();
		Возврат НЕ Результат.Пустой();
	КонецЕсли;
	
	
	
	Возврат Ложь;
КонецФункции

Процедура СоздатьАктПриемкиНаОснованииDESADV(Результат,Поставщик,Покупатель,МестоДоставки,ДокументЗаказ,ИмяФайла,НомерЗаказа,Лог)
	
	//++БИТ БВО 2015-06-10
	Если ТипЗнч(Поставщик) = Тип("Массив") Тогда
		Поставщик = ДокументЗаказ.Контрагент			
	КонецЕсли;
	//--БИТ БВО 2015-06-10
	
	НомерПокупателя = СокрЛП(Строка(Результат["НомерДокумента"]));
	Дата = Результат["ДатаДокумента"];
	ДокументDESADV = Документы.АктПриемки.СоздатьДокумент();
	ДокументDESADV.ИнициализироватьДокумент();
	ДокументDESADV.НомерДокумента	= НомерПокупателя;
	ДокументDESADV.ДатаДокумента	= Дата;
	ДокументDESADV.Дата				= ТекущаяДата();
	ДокументDESADV.ДокОснование		= ДокументЗаказ;	
	ДокументDESADV.Грузоотправитель	= Поставщик;
	ДокументDESADV.Контрагент		= Поставщик;		
	ДокументDESADV.Фирма			= Покупатель;
	ДокументDESADV.Комментарий="Загружен DESADV: "+ИмяФайла;
	Для каждого СтрокаТЗ Из Результат["ТабличнаяЧасть"] Цикл
		СтрокаТЧ=ДокументDESADV.Состав.Добавить();
		Номенклатура=ПодобратьНоменклатуру(СтрокаТЗ.КодПокупателя,СтрокаТЗ.GTIN);
		СтрокаТЧ.Ключ=Новый УникальныйИдентификатор;
		
		Если Номенклатура=0 Тогда
			Лог.ДобавитьСтроку("Не найдена номенклатура по коду "+СтрокаТЗ.КодПокупателя+" или по ШК "+СтрокаТЗ.GTIN);
			СтрокаТЧ.Номенклатура=Справочники.Номенклатура.НайтиПоКоду("0104140");
			СтрокаТЧ.КоличествоПоДокументу=СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧ.Количество=0;
			СтрокаТЧ.РКоличество=0-СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧ.Сумма=0;
			СтрокаТЧ.РСумма=0-СтрокаТз.Сумма;
			СтрокаТЧПричины=ДокументDESADV.ПричиныРасхождений.Добавить();
			СтрокаТЧПричины.Ключ=СтрокаТЧ.Ключ;
			СтрокаТЧПричины.Количество=СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧПричины.Причина=Перечисления.РезультатПриемки.НеСогласован;
		ИначеЕсли СвязкаТоварПоставщик(Номенклатура,Поставщик) Тогда
			СтрокаТЧ.Номенклатура=Номенклатура;
			СтрокаТЧ.КоличествоПоДокументу=СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧ.Количество=СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧ.Сумма=СтрокаТЗ.Сумма;
		Иначе
			Лог.ДобавитьСтроку("У поставщика "+Поставщик+" нет номенклатуры "+Номенклатура);
			СтрокаТЧ.Номенклатура=Номенклатура;
			СтрокаТЧ.КоличествоПоДокументу=СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧ.Количество=0;
			СтрокаТЧ.Сумма=0;
			СтрокаТЧПричины=ДокументDESADV.ПричиныРасхождений.Добавить();
			СтрокаТЧПричины.Ключ=СтрокаТЧ.Ключ;
			СтрокаТЧПричины.Количество=СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧПричины.Причина=Перечисления.РезультатПриемки.НеСогласован;
			//Дописать лог по товару без 
		КонецЕсли;
		
		СтрокаТЧ.Цена=?(СтрокаТз.Цена>0,СтрокаТз.Цена,ПолучитьЦенуПоставщика(Номенклатура,Поставщик));
		СтрокаТЧ.СуммаПоДокументу=СтрокаТЗ.Сумма;
		СтрокаТЧ.СтавкаНДС=Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",СтрокаТЗ.СтавкаНДС);
		СтруктураДанных = Новый Структура;    	
		СтруктураДанных.Вставить("Номенклатура",	 СтрокаТЧ.Номенклатура);
		СтруктураДанных.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураДанных.Вставить("Коэффициент",СтрокаТЧ.Коэффициент);
		ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтруктураДанных);
	КонецЦикла;
	ДокументDESADV.Записать(РежимЗаписиДокумента.Запись);
	
	//Зафиксируем загруженный документ
	ЗаписьСтарая = РегистрыСведений.Izh_СтатусEDIСообщений.СоздатьМенеджерЗаписи();
	ЗаписьСтарая.Документ = ДокументDESADV.Ссылка;
	ЗаписьСтарая.Статус =Перечисления.СтатусыEDIСообщений.Получен;
	ЗаписьСтарая.НомерEDIЗаказа = НомерЗаказа;
	ЗаписьСтарая.Файл=ИмяФайла;
	ЗаписьСтарая.Записать();
		
КонецПроцедуры

//dps+ 000124501

Процедура СоздатьПННаОснованииDESADV(Результат,Поставщик,Покупатель,МестоДоставки,ДокументЗаказ,ИмяФайла,НомерЗаказа,ORDERS, Лог)
	НомерПокупателя= СокрЛП(Строка(Результат["НомерДокумента"]));
	Дата = Результат["ДатаДокумента"];
	ДокументDESADV=Документы.ПриходнаяНакладная.СоздатьДокумент();
	ДокументDESADV.ИнициализироватьДокумент();
	ДокументDESADV.Дата=ТекущаяДата();
	ДокументDESADV.ДокОснование = ДокументЗаказ;
	ДокументDESADV.Фирма = Покупатель;
	ДокументDESADV.Контрагент = ДокументЗаказ.Контрагент;
	ДокументDESADV.Грузоотправитель = ДокументDESADV.Контрагент;
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ВидЗапасов = &ВидЗапасов
	|	И Склады.Владелец = &Владелец
	|	И НЕ Склады.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВидЗапасов",Перечисления.ВидыЗапасов.Продаваемые);
	Запрос.УстановитьПараметр("Владелец",МестоДоставки);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда  
		ДокументDESADV.Склад = Рез.Ссылка;	
	КонецЕсли;
	ДокументDESADV.НомерДокумента = НомерПокупателя;
	ДокументDESADV.ДатаДокумента = Дата;
	ДокументDESADV.Комментарий="Загружен DESADV: "+ИмяФайла;
	ДокументDESADV.ТипДоговора = Перечисления.ТипыДоговоров.КупляПродажа;
	НесанкционированнаяПоставка = Справочники.Номенклатура.НайтиПоКоду(Разработка_Ижтрейдинг_Сервер.ПолучитьСлужебноеЗначение(ПланыВидовХарактеристик.СлужебныеЗначения.КодНесанкционированнаяПоставка));
	Для каждого СтрокаТЗ Из Результат["ТабличнаяЧасть"] Цикл
		СтрокаТЧ=ДокументDESADV.Состав.Добавить();
		Номенклатура=ПодобратьНоменклатуру(СтрокаТЗ.КодПокупателя,СтрокаТЗ.GTIN);
		
		//СтрокаТЧ.Ключ=Новый УникальныйИдентификатор;
		Если Номенклатура=0 Тогда
			Лог.ДобавитьСтроку("Не найдена номенклатура по коду "+СтрокаТЗ.КодПокупателя+" или по ШК "+СтрокаТЗ.GTIN);
			СтрокаТЧ.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			СтрокаТЧ.КоличествоПоДокументу = СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧ.Количество = 0;
			//СтрокаТЧ.СтавкаНДС = Номенклатура.СтавкаНДС;
			//СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена; 
			//СтрокаТЧ.Цена = ;
		ИначеЕсли НЕ СвязкаТоварПоставщик(Номенклатура,ДокументЗаказ.Контрагент) Тогда 
			Лог.ДобавитьСтроку("Нет связки товар-поставщик"+Номенклатура+" - "+ДокументЗаказ.Контрагент);
			СтрокаТЧ.Номенклатура = Номенклатура;
			СтрокаТЧ.КоличествоПоДокументу = СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧ.Количество = 0;
			СтрокаТЧ.СтавкаНДС = Номенклатура.СтавкаНДС;
			Если ORDERS Тогда 
				СтрокаТЧ.Цена = ПолучитьЦенуПоставщика(Номенклатура,ДокументЗаказ.Контрагент);
			Иначе
				СтрокаТЧ.Цена = ЦенаКолвоВПланируемойПоставке(Номенклатура, ДокументЗаказ.Состав.Выгрузить(), "Цена");
			КонецЕсли;
			СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена; 
			//СтрокаТЧ. = "Не согласован";
		ИначеЕсли НЕ СтатусТоварСЕ(Номенклатура,МестоДоставки) Тогда
			Лог.ДобавитьСтроку("Вне матрицы "+Номенклатура+" - "+МестоДоставки);
			СтрокаТЧ.Номенклатура = Номенклатура;
			СтрокаТЧ.КоличествоПоДокументу = СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧ.Количество = 0;
			СтрокаТЧ.СтавкаНДС = Номенклатура.СтавкаНДС;
			Если ORDERS Тогда 
				СтрокаТЧ.Цена = ПолучитьЦенуПоставщика(Номенклатура,ДокументЗаказ.Контрагент);
			Иначе
				СтрокаТЧ.Цена = ЦенаКолвоВПланируемойПоставке(Номенклатура, ДокументЗаказ.Состав.Выгрузить(), "Цена");
			КонецЕсли;
			СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена; 
		ИначеЕсли ДокументЗаказ.Состав.Выгрузить().Найти(Номенклатура,"Номенклатура") = Неопределено Тогда 
			СтрокаТЧ.Номенклатура = Номенклатура;
			СтрокаТЧ.СтавкаНДС = Номенклатура.СтавкаНДС;
			СтрокаТЧ.Цена = ПолучитьЦенуПоставщика(Номенклатура,ДокументЗаказ.Контрагент);
			СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена; 
			СтрокаТЧ.КоличествоПоДокументу = СтрокаТЗ.ПоставлКоличество;
			Если ЗначениеЗаполнено(ДокументЗаказ.Контрагент.ДатаДопСоглашенияАПП) Тогда 
				СтрокаТЧ.Количество = 0;
				//СтрокаТЧ. = "Свехзаказа";
			Иначе 
				СтрокаТЧ.Количество = СтрокаТЗ.Количество;
			КонецЕсли;
		Иначе 
			СтрокаТЧ.Номенклатура = Номенклатура;
			СтрокаТЧ.КоличествоПоДокументу = СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧ.Количество = СтрокаТЗ.ПоставлКоличество;
			СтрокаТЧ.СтавкаНДС = Номенклатура.СтавкаНДС;
			Если ORDERS Тогда 
				СтрокаТЧ.Цена = ПолучитьЦенуПоставщика(Номенклатура,ДокументЗаказ.Контрагент);
			Иначе
				СтрокаТЧ.Цена = ЦенаКолвоВПланируемойПоставке(Номенклатура, ДокументЗаказ.Состав.Выгрузить(), "Цена");
			КонецЕсли;
			СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена; 
			СтрокаТЧ.СуммаНДС = Окр((СтрокаТЧ.Сумма*СтрокаТЧ.СтавкаНДС.Ставка)/(СтрокаТЧ.СтавкаНДС.Ставка+100),2); 
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;    	
		СтруктураДанных.Вставить("Номенклатура",	 СтрокаТЧ.Номенклатура);
		СтруктураДанных.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураДанных.Вставить("Коэффициент",СтрокаТЧ.Коэффициент);
		ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтруктураДанных);
	КонецЦикла;
	ДокументDESADV.Записать(РежимЗаписиДокумента.Запись);
	//Зафиксируем загруженный документ
	ЗаписьСтарая = РегистрыСведений.Izh_СтатусEDIСообщений.СоздатьМенеджерЗаписи();
	ЗаписьСтарая.Документ = ДокументDESADV.Ссылка;
	ЗаписьСтарая.Статус =Перечисления.СтатусыEDIСообщений.Получен;
	ЗаписьСтарая.НомерEDIЗаказа = НомерЗаказа;
	ЗаписьСтарая.Файл=ИмяФайла;
	ЗаписьСтарая.Записать();
КонецПроцедуры

Процедура СоздатьПННаОснованииDESADVБезЗаказа(Результат,Поставщик,Покупатель,МестоДоставки,ИмяФайла,НомерЗаказа,ORDERS, Лог)
	тзНоменклатура = Новый ТаблицаЗначений;
	тзНоменклатура.Колонки.Добавить("Номенклатура");
	тзНоменклатура.Колонки.Добавить("Количество");
	Для каждого СтрокаТЗ Из Результат["ТабличнаяЧасть"] Цикл
		Номенклатура=ПодобратьНоменклатуру(СтрокаТЗ.КодПокупателя,СтрокаТЗ.GTIN);
		Если Номенклатура=0 Тогда
			Лог.ДобавитьСтроку("Не найдена номенклатура по коду "+СтрокаТЗ.КодПокупателя+" или по ШК "+СтрокаТЗ.GTIN);
		Иначе
			НоваяСтрока = тзНоменклатура.Добавить();
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Количество = СтрокаТЗ.ПоставлКоличество;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагента.Контрагент КАК Контрагент,
	|	НоменклатураКонтрагента.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагента.Цена
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ГДЕ
	|	НоменклатураКонтрагента.ОсновнойПоставщик
	|	И НоменклатураКонтрагента.Номенклатура В(&Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	
	Запрос.УстановитьПараметр("Номенклатура", тзНоменклатура.ВыгрузитьКолонку("Номенклатура"));
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	НомерПокупателя= СокрЛП(Строка(Результат["НомерДокумента"]));
	Дата = Результат["ДатаДокумента"];
	ДокументDESADV=Документы.ПриходнаяНакладная.СоздатьДокумент();
	ДокументDESADV.ИнициализироватьДокумент();
	ДокументDESADV.Дата=ТекущаяДата();
	ДокументDESADV.Фирма = Покупатель;
	ДокументDESADV.Грузополучатель = Покупатель; 
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ВидЗапасов = &ВидЗапасов
	|	И Склады.Владелец = &Владелец
	|	И НЕ Склады.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВидЗапасов",Перечисления.ВидыЗапасов.Продаваемые);
	Запрос.УстановитьПараметр("Владелец",МестоДоставки);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда  
		Склад = Рез.Ссылка;	
	КонецЕсли;
	ДокументDESADV.Склад = Склад;
	ДокументDESADV.НомерДокумента = НомерПокупателя;
	ДокументDESADV.ДатаДокумента = Дата;
	ДокументDESADV.Комментарий="Загружен DESADV: "+ИмяФайла;
	ДокументDESADV.ТипДоговора = Перечисления.ТипыДоговоров.КупляПродажа;
	Пока РезультатЗапроса.Следующий() Цикл
		Номенклатура = РезультатЗапроса.Номенклатура;
		Контрагент = РезультатЗапроса.Контрагент;
		Если НЕ ЗначениеЗаполнено(ДокументDESADV.Контрагент) Тогда 
			ДокументDESADV.Контрагент = Контрагент;
			ДокументDESADV.Грузоотправитель = ДокументDESADV.Контрагент;
		КонецЕсли;
		Если Контрагент <> ДокументDESADV.Контрагент Тогда 
			ДокументDESADV.Записать(РежимЗаписиДокумента.Запись);
			//Зафиксируем загруженный документ
			ЗаписьСтарая = РегистрыСведений.Izh_СтатусEDIСообщений.СоздатьМенеджерЗаписи();
			ЗаписьСтарая.Документ = ДокументDESADV.Ссылка;
			ЗаписьСтарая.Статус =Перечисления.СтатусыEDIСообщений.Получен;
			ЗаписьСтарая.НомерEDIЗаказа = НомерЗаказа;
			ЗаписьСтарая.Файл=ИмяФайла;
			ЗаписьСтарая.Записать();
			
			ДокументDESADV=Документы.ПриходнаяНакладная.СоздатьДокумент();
			ДокументDESADV.ИнициализироватьДокумент();
			ДокументDESADV.Дата=ТекущаяДата();
			ДокументDESADV.Фирма = Покупатель;
			ДокументDESADV.Грузополучатель = Покупатель;
			ДокументDESADV.Склад = Склад;
			ДокументDESADV.НомерДокумента = НомерПокупателя;
			ДокументDESADV.ДатаДокумента = Дата;
			ДокументDESADV.Комментарий="Загружен DESADV: "+ИмяФайла;
			ДокументDESADV.ТипДоговора = Перечисления.ТипыДоговоров.КупляПродажа;
			ДокументDESADV.Контрагент = Контрагент;
			ДокументDESADV.Грузоотправитель = ДокументDESADV.Контрагент;
		КонецЕсли;
		СтрокаТЧ = ДокументDESADV.Состав.Добавить();
		СтрокаТЧ.Номенклатура = Номенклатура;
		НайденаяСтрока = тзНоменклатура.Найти(Номенклатура, "Номенклатура");
		СтрокаТЧ.КоличествоПоДокументу = НайденаяСтрока.Количество;
		СтрокаТЧ.Количество = СтрокаТЧ.КоличествоПоДокументу; 
		СтрокаТЧ.Цена = ПолучитьЦенуПоставщика(Номенклатура,Поставщик);
		СтрокаТЧ.СтавкаНДС = Номенклатура.СтавкаНДС;
		СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена; 
		СтрокаТЧ.СуммаНДС = Окр((СтрокаТЧ.Сумма*СтрокаТЧ.СтавкаНДС.Ставка)/(СтрокаТЧ.СтавкаНДС.Ставка+100),2); 
		СтруктураДанных = Новый Структура;    	
		СтруктураДанных.Вставить("Номенклатура",	 СтрокаТЧ.Номенклатура);
		СтруктураДанных.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураДанных.Вставить("Коэффициент",СтрокаТЧ.Коэффициент);
		ОбработкаТабличныхЧастейСервер.ПолучитьДанныеОбъектов(СтруктураДанных);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтруктураДанных);
	КонецЦикла;
	ДокументDESADV.Записать(РежимЗаписиДокумента.Запись);
	//Зафиксируем загруженный документ
	ЗаписьСтарая = РегистрыСведений.Izh_СтатусEDIСообщений.СоздатьМенеджерЗаписи();
	ЗаписьСтарая.Документ = ДокументDESADV.Ссылка;
	ЗаписьСтарая.Статус =Перечисления.СтатусыEDIСообщений.Получен;
	ЗаписьСтарая.НомерEDIЗаказа = НомерЗаказа;
	ЗаписьСтарая.Файл=ИмяФайла;
	ЗаписьСтарая.Записать();
КонецПроцедуры

Функция ОпределитьКонтрагентаПоНоменклатуре(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагента.Контрагент
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ГДЕ
	|	НоменклатураКонтрагента.Номенклатура = &Номенклатура
	|	И НоменклатураКонтрагента.ОсновнойПоставщик";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество()>0 Тогда 
		Результат.Следующий();
		Возврат Результат.Контрагент;
	Иначе Возврат Неопределено;	
	КонецЕсли;
КонецФункции


Функция ЦенаКолвоВПланируемойПоставке(Номенклатура, ТЗ, Вернуть)
	Строка = ТЗ.Найти(Номенклатура,"Номенклатура");
	Если Строка = Неопределено Тогда
		Возврат 0;
	Иначе 
		Возврат Строка[Вернуть];
	КонецЕсли;
КонецФункции

Функция СтатусТоварСЕ(Номенклатура,СтруктурнаяЕдиница)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыНоменклатуры.Номенклатура
	|ИЗ
	|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|ГДЕ
	|	СтатусыНоменклатуры.Номенклатура = &Номенклатура
	|	И СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И СтатусыНоменклатуры.Статус = &Статус";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыТоваров.Активный);
	
	Результат = Запрос.Выполнить();
	Возврат не Результат.Пустой();
КонецФункции

//dps- 000124501


Функция ПолучитьУсловияОбменаПоставщиков(Контрагент)
	
	//{ СИТЕК БрыляковЕЮ 2014-12-25  С соответствием неудобно работать
	Результат = Новый Структура("ORDERS, DESADV, RECADV, RETANN, КоличествоORDERS");
	// СИТЕК БрыляковЕЮ 2014-12-25 }
	
	Соотвествие=Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	EDIПровайдерыПоставщиков.ORDERS,
	|	EDIПровайдерыПоставщиков.DESADV,
	|	EDIПровайдерыПоставщиков.RECADV,
	|	EDIПровайдерыПоставщиков.RETANN,
	|	EDIПровайдерыПоставщиков.Izh_РазрешитьПовторнуюОтправкуORDERS КАК КоличествоORDERS
	|ИЗ
	|	РегистрСведений.EDIПровайдерыПоставщиков КАК EDIПровайдерыПоставщиков
	|ГДЕ
	|	EDIПровайдерыПоставщиков.Контрагент = &Контрагент
	|	И EDIПровайдерыПоставщиков.Основной";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	//{ СИТЕК БрыляковЕЮ 2014-12-25  Я сделал реверс полученных значений, теперь если вид сообщения отключен, то это Ложь
	// Исходный текст --> 
	//Результат = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Соотвествие.Вставить("ORDERS",ВыборкаДетальныеЗаписи.ORDERS);
	//	Соотвествие.Вставить("DESADV",ВыборкаДетальныеЗаписи.DESADV);
	//	Соотвествие.Вставить("RECADV",ВыборкаДетальныеЗаписи.RECADV); 
	//	Соотвествие.Вставить("RETANN",ВыборкаДетальныеЗаписи.RETANN);				
	//КонецЦикла;
	//Возврат Соотвествие;
	// <-- Исходный текст 
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьЧтото = Выборка.Следующий();
	
	Для каждого Элемент Из Результат Цикл
		Результат[Элемент.Ключ] = ?(ЕстьЧтото, НЕ Выборка[Элемент.Ключ], Ложь);
	КонецЦикла;
	
	Возврат Результат;
	// СИТЕК БрыляковЕЮ 2014-12-25 }
	
КонецФункции

Функция ПодобратьНоменклатуру(КодПокупателя,GTIN)
	//Ищем по коду
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код
	|	И Номенклатура.Транзакционный";
	
	Запрос.УстановитьПараметр("Код", КодПокупателя);
	
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	//Ищем по ШК
	ЗапросШК = Новый Запрос;
	ЗапросШК.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код
	|	И НЕ Номенклатура.Транзакционный";
	
	ЗапросШК.УстановитьПараметр("Код", GTIN);
	
	РезультатШК = ЗапросШК.Выполнить();
	Если не РезультатШК.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатШК.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Родитель;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция СвязкаТоварПоставщик(Номенклатура,Поставщик)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагента.Контрагент,
	|	НоменклатураКонтрагента.Номенклатура
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ГДЕ
	|	НоменклатураКонтрагента.Контрагент = &Контрагент
	|	И НоменклатураКонтрагента.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Контрагент", Поставщик);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	Возврат не Результат.Пустой();
КонецФункции

Функция ПолучитьЦенуПоставщика(Номенклатура,Поставщик) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагента.Контрагент,
	|	НоменклатураКонтрагента.Номенклатура,
	|	НоменклатураКонтрагента.Цена
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ГДЕ
	|	НоменклатураКонтрагента.Контрагент = &Контрагент
	|	И НоменклатураКонтрагента.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Контрагент", Поставщик);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка=Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Цена;
	КонецЕсли;
	
КонецФункции

Функция ПеренестиСообщениеВАрхив(МедиаторАгент,Файл) Экспорт
	
	МедиаторАгент = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(МедиаторАгент);
	
	КаталогАрхива = МедиаторАгент+"Архив";
	Архив = Новый Файл(КаталогАрхива);
	Если Не Архив.Существует() тогда
		СоздатьКаталог(КаталогАрхива);
	КонецЕсли;	
	КаталогАрхива = КаталогАрхива+"\"+ПреобразоватьДату(ТекущаяДата(),"102");
	Архив = Новый Файл(КаталогАрхива);
	Если Не Архив.Существует() тогда
		СоздатьКаталог(КаталогАрхива);
	КонецЕсли;		
	ПереместитьФайл(Файл.ПолноеИмя,КаталогАрхива+"\"+Файл.Имя);
	Возврат КаталогАрхива+"\"+Файл.Имя;
КонецФункции

Функция ЗаписатьЛог(ЛогКаталог,Лог);
	_ЛогКаталог=ЛогКаталог+ПреобразоватьДату(ТекущаяДата(),"102")+"\";
	_Каталог = Новый Файл(_ЛогКаталог);
	Если Не _Каталог.Существует() или Не _Каталог.ЭтоКаталог() тогда
		СоздатьКаталог(_ЛогКаталог);
	КонецЕсли;
	
	ЛогФайл = _ЛогКаталог+ПреобразоватьДату(ТекущаяДата(),"204")+".log";
	Лог.Записать(ЛогФайл);
	
	Возврат ЛогФайл;
КонецФункции

Функция ПреобразоватьДату(Дата,Формат) Экспорт
	Если Формат="203" тогда
		Возврат Формат(Дата,"ДФ=""ггггММддЧЧммсс""");
	ИначеЕсли Формат="204" тогда
		Возврат Формат(Дата,"ДФ=""ггггММдд_ЧЧммсс""");	
	Иначе
		Возврат Формат(Дата,"ДФ=""ггггММдд""");
	КонецЕсли;
КонецФункции

Функция ПолучитьEDIПрвайдера(Контрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EDIПровайдерыПоставщиков.EDIПровайдер
	|ИЗ
	|	РегистрСведений.EDIПровайдерыПоставщиков КАК EDIПровайдерыПоставщиков
	|ГДЕ
	|	EDIПровайдерыПоставщиков.Контрагент = &Контрагент
	|	И EDIПровайдерыПоставщиков.Основной";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.EDIПровайдер;
	КонецЕсли;
КонецФункции

Функция ЗаполнитьТЗ(Документ)
	Тз = Новый ТаблицаЗначений();
	Тз.Колонки.Добавить("ПорядковыйНомер",Новый ОписаниеТипов("Число")); 
	Тз.Колонки.Добавить("GTIN",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("КодПокупателя",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("КодПоставщика",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("КодТовара",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("НаименованиеТовара",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("ЦенаБезНДС",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("ЦенаСНДС",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("СуммаНДС",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("СуммаЗаказа",Новый ОписаниеТипов("Число")); 
	//Тз.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("Строка")); 
	ТипКодов=Новый Массив;
	ТипКодов.Добавить("EAN13");
	ТипКодов.Добавить("EAN13S");
	ТипКодов.Добавить("UCC14");
	ТипКодов.Добавить("EAN8");
	ТипКодов.Добавить("ISBN10");
	ТипКодов.Добавить("ISBN13");
	ТипКодов.Добавить("NDC");
	ТипКодов.Добавить("ITEM");
	ТипКодов.Добавить("PLU");
	ТипКодов.Добавить("VPLU");
	ТипКодов.Добавить("UPC-A");
	ТипКодов.Добавить("UPC-AS");
	ТипКодов.Добавить("UPC-E");
	ТипКодов.Добавить("UPC-ES");
	ТипКодов.Добавить("MANL");
	ТипКодов.Добавить("SSCC");
	Тз.Очистить();
	НомерСтроки=1;
	МассивНоменклатура=Новый Массив;
	Для каждого СтрокаТЧ Из Документ.Состав Цикл
		СтрокаТЗ=Тз.Добавить();
		Номенклатура=СтрокаТЧ.Номенклатура;
		ШтрихКода=ШтриховыеКоды.ПолучитьМассивНоменклатурыСШК(Номенклатура,ТипКодов);
		Если ШтрихКода.Количество()>0 Тогда
			GTIN=ШтрихКода[0].Код;
		КонецЕсли;
		СтрокаТЗ.ПорядковыйНомер=НомерСтроки;
		СтрокаТЗ.GTIN=?(ЗначениеЗаполнено(GTIN),GTIN,СокрЛП(Номенклатура.Код));
		СтрокаТЗ.КодПокупателя=СокрЛП(Номенклатура.Код);
		СтрокаТЗ.КодПоставщика="";
		СтрокаТЗ.КодТовара=СокрЛП(Номенклатура.Код);
		СтрокаТЗ.НаименованиеТовара=СокрЛП(Номенклатура.Наименование);
		СтрокаТЗ.Количество=СтрокаТЧ.Количество*СтрокаТЧ.Коэффициент;
		СтрокаТЗ.ЦенаБезНДС=0;
		СтрокаТЗ.ЦенаСНДС=СтрокаТЧ.Цена;
		СтрокаТЗ.ЕдиницаИзмерения=?(Номенклатура.ТипТовара=Перечисления.ТипыТоваров.Весовой,"KGM","PCE");
		СтрокаТЗ.СуммаЗаказа=СтрокаТЧ.Сумма;
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда 
			СтрокаТЗ.СуммаНДС=СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		НомерСтроки=НомерСтроки+1;
	КонецЦикла;
	
	
	Возврат ТЗ;
КонецФункции

Функция ЗаполнитьТЗ_АП(Документ)
	Тз = Новый ТаблицаЗначений();
	Тз.Колонки.Добавить("ПорядковыйНомер",Новый ОписаниеТипов("Число")); 
	Тз.Колонки.Добавить("GTIN",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("КодПокупателя",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("КодПоставщика",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("НаименованиеТовара",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("КоличествоЗаказа",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("КоличествоНакладной",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("ЦенаБезНДС",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("ЦенаСНДС",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("СуммаЗаказа",Новый ОписаниеТипов("Число")); 
	//Тз.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("Строка")); 
	Тз.Колонки.Добавить("Причина",Новый ОписаниеТипов("Строка"));
	ТипКодов=Новый Массив;
	ТипКодов.Добавить(Справочники.СлужебныеКоды.НайтиПоКоду("EAN13"));
	Тз.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктПриемкиСостав.Номенклатура,
	|	АктПриемкиСостав.Количество,
	|	АктПриемкиСостав.КоличествоПоДокументу,
	|	АктПриемкиСостав.ЕдиницаИзмерения,
	|	АктПриемкиСостав.НомерСтроки,
	|	АктПриемкиСостав.Сумма,
	|	АктПриемкиСостав.Цена,
	|	АктПриемкиСостав.СтавкаНДС,
	|	АктПриемкиПричиныРасхождений.Причина,
	|	АктПриемкиСостав.Ссылка,
	|	АктПриемкиСостав.Коэффициент
	|ПОМЕСТИТЬ АП
	|ИЗ
	|	Документ.АктПриемки.Состав КАК АктПриемкиСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПриемки.ПричиныРасхождений КАК АктПриемкиПричиныРасхождений
	|		ПО АктПриемкиСостав.Ключ = АктПриемкиПричиныРасхождений.Ключ
	|ГДЕ
	|	АктПриемкиПричиныРасхождений.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(АП.Номенклатура, ПланируемаяПоставкаСостав.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(АП.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(АП.КоличествоПоДокументу, 0) КАК КоличествоНакладной,
	|	ЕСТЬNULL(АП.ЕдиницаИзмерения, ПланируемаяПоставкаСостав.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(АП.НомерСтроки, 0) КАК НомерСтроки,
	|	ЕСТЬNULL(АП.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(АП.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(АП.СтавкаНДС, 0) КАК СтавкаНДС,
	|	АП.Причина КАК Причина,
	|	ЕСТЬNULL(ПланируемаяПоставкаСостав.Количество, 0) КАК КоличествоЗаказ,
	|	ЕСТЬNULL(АП.Коэффициент, ПланируемаяПоставкаСостав.Коэффициент) КАК Коэффициент
	|ИЗ
	|	АП КАК АП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланируемаяПоставка.Состав КАК ПланируемаяПоставкаСостав
	|		ПО АП.Номенклатура = ПланируемаяПоставкаСостав.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	НомерСтроки=1;
	МассивНоменклатура=Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТЗ=Тз.Добавить();
		Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
		ШтрихКода=ШтриховыеКоды.ПолучитьМассивНоменклатурыСШК(Номенклатура,ТипКодов);
		Если ШтрихКода.Количество()>0 Тогда
			GTIN=ШтрихКода[0].Код;
		КонецЕсли;
		СтрокаТЗ.ПорядковыйНомер=НомерСтроки;
		СтрокаТЗ.GTIN=GTIN;
		СтрокаТЗ.КодПокупателя=СокрЛП(Номенклатура.Код);
		СтрокаТЗ.КодПоставщика="";
		СтрокаТЗ.НаименованиеТовара=СокрЛП(Номенклатура.Наименование);
		СтрокаТЗ.Количество=ВыборкаДетальныеЗаписи.Количество*ВыборкаДетальныеЗаписи.Коэффициент;
		СтрокаТЗ.КоличествоЗаказа=ВыборкаДетальныеЗаписи.КоличествоЗаказ*ВыборкаДетальныеЗаписи.Коэффициент;
		СтрокаТЗ.КоличествоНакладной=ВыборкаДетальныеЗаписи.КоличествоНакладной*ВыборкаДетальныеЗаписи.Коэффициент;
		СтрокаТЗ.ЦенаБезНДС=0;
		СтрокаТЗ.ЦенаСНДС=ВыборкаДетальныеЗаписи.Цена;
		СтрокаТЗ.ЕдиницаИзмерения=?(Номенклатура.ТипТовара=Перечисления.ТипыТоваров.Весовой,"KGM","PCE");
		СтрокаТЗ.СуммаЗаказа=ВыборкаДетальныеЗаписи.Сумма;
		СтрокаТЗ.Причина=ВыборкаДетальныеЗаписи.Причина;
		НомерСтроки=НомерСтроки+1;
	КонецЦикла;
	
	
	Возврат ТЗ;
КонецФункции

Функция ПреобразоватьВДату(СтрокаСДатой)
	//Не верно, но некогда переписывать
	Если Найти(СтрокаСДатой,".")>0 Тогда
		Первый=Найти(СтрокаСДатой,".");
		День=Лев(СтрокаСДатой,Первый-1);
		ПерваяСтрока=Сред(СтрокаСДатой,Первый+1,СтрДлина(СтрокаСДатой));
		Второй=Найти(ПерваяСтрока,".");
		Месяц=Лев(ПерваяСтрока,Второй-1);
		Год_=Прав(ПерваяСтрока,СтрДлина(ПерваяСтрока)-Второй);
		Год=?(СтрДлина(Год_)=2,"20"+Год_,Год_);
		Возврат Дата(Год,Месяц,День);
	ИначеЕсли Найти(СтрокаСДатой,",")>0 Тогда
		Первый=Найти(СтрокаСДатой,",");
		День=Лев(СтрокаСДатой,Первый-1);
		ПерваяСтрока=Сред(СтрокаСДатой,Первый+1,СтрДлина(СтрокаСДатой));
		Второй=Найти(ПерваяСтрока,",");
		Месяц=Лев(ПерваяСтрока,Второй-1);
		Год_=Прав(ПерваяСтрока,СтрДлина(ПерваяСтрока)-Второй);
		Год=?(СтрДлина(Год_)=2,"20"+Год_,Год_);
		Возврат Дата(Год,Месяц,День);
	Иначе
		Возврат Дата(СтрокаСДатой);
	КонецЕсли;
КонецФункции



//Рег документов
Процедура  РегПланируемаяПоставка(Документ) Экспорт
	
	//Проверим работает ли поставшик по EDI
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EDIПровайдерыПоставщиков.EDIПровайдер
	|ИЗ
	|	РегистрСведений.EDIПровайдерыПоставщиков КАК EDIПровайдерыПоставщиков
	|ГДЕ
	|	EDIПровайдерыПоставщиков.Контрагент = &Контрагент
	|	И EDIПровайдерыПоставщиков.GLN <> &GLN
	|	И НЕ EDIПровайдерыПоставщиков.ORDERS";  //Нужно ли отправить ORDERS у этого поставщика
	
	Запрос.УстановитьПараметр("GLN", "");
	Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой()Тогда	
		//Проврим есть ли запись о статусе EDI сообщения
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Izh_СтатусEDIСообщений.Документ
		|ИЗ
		|	РегистрСведений.Izh_СтатусEDIСообщений КАК Izh_СтатусEDIСообщений
		|ГДЕ
		|	Izh_СтатусEDIСообщений.Документ ССЫЛКА Документ.ПланируемаяПоставка
		|	И Izh_СтатусEDIСообщений.Документ = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Узел = ПланыОбмена.Izh_ОбменEDI.НайтиПоКоду(1);
			Если НЕ Узел.Пустая() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(Узел,Документ.ПолучитьОбъект());	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//dps+ 05.05.2014   Наряд №000114752
Процедура РегистрацияДокументовEDI (Источник) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		//Ошибка = РегРасходнаяНакладная(Источник);
	КонецЕсли;
КонецПроцедуры

Функция  РегРасходнаяНакладная(Документ) 
	
	Если НЕ Документ.Возврат Тогда 
		Возврат "Не возвратная накладная";
	КонецЕсли;
		
	Если ТипЗнч(Документ.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда 
		Возврат "Возвращаем не контрагенту";
	КонецЕсли;	
	//++БИТ БВО 2015-10-01
	Если ТипЗнч(Документ.ДокОснование) <> Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Возврат "Только РН, созданные основании ПН попадают в обмен EDI";
	КонецЕсли;
	//--БИТ БВО 2015-10-01
	
	//Проверим работает ли поставшик по EDI
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EDIПровайдерыПоставщиков.EDIПровайдер
	|ИЗ
	|	РегистрСведений.EDIПровайдерыПоставщиков КАК EDIПровайдерыПоставщиков
	|ГДЕ
	|	EDIПровайдерыПоставщиков.Контрагент = &Контрагент
	|	И EDIПровайдерыПоставщиков.GLN <> &GLN
	|	И НЕ EDIПровайдерыПоставщиков.RETANN"; //Нужно ли отправить RETANN у этого поставщика
	
	Запрос.УстановитьПараметр("GLN", "");
	Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой()Тогда		
		Узел = ПланыОбмена.Izh_ОбменEDI.НайтиПоКоду(1);
		Если НЕ Узел.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел,Документ.Ссылка);	
		КонецЕсли;
		Возврат "";
	Иначе 
		Возврат "Контрагент не работает по RETANN";
	КонецЕсли;
КонецФункции

Функция ОтправитьRETANN(Объект)
	Данные = Новый Соответствие;
	ОператорEDI=ПолучитьEDIПрвайдера(Объект.Контрагент);
	ДокВид=Объект.Метаданные().Имя;
	ДокВид=ОпределитьИмяФайла(ОператорEDI,Перечисления.Izh_ВидыEDIДокументов.RETANN);
	Каталог=КаталогВыгрузки(Каталог, Объект.Контрагент, "RETANN");
	ИмяФайла=Каталог+ДокВид+"_"+Объект.Номер+"_"+Формат(Объект.Дата,"ДФ=yyyyMMdd")+".xml";
	
	Данные.Вставить("ИмяФайла",ИмяФайла);
	Данные.Вставить("НомерСообщения",Объект.Ссылка.УникальныйИдентификатор());
	Данные.Вставить("НомерДокумента",Объект.Номер);
	Данные.Вставить("ДатаДокумента",Объект.Дата);
	Данные.Вставить("НомерПротокола","");
	Данные.Вставить("ДатаПротокола","");
	Если ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда  //dps+ 15.09.24
		Данные.Вставить("НомерDESADV",Объект.ДокОснование.НомерДокумента);
		Данные.Вставить("ДатаDESADV",Объект.ДокОснование.ДатаДокумента);
	Иначе 
		Данные.Вставить("НомерDESADV","");
		Данные.Вставить("ДатаDESADV","");
	КонецЕсли;
	Данные.Вставить("GLNПоставщика",НайтиGLN(Объект.Контрагент,"Контрагенты"));
	Данные.Вставить("GLNПокупателя",НайтиGLN(Объект.Фирма,"Организации"));
	Данные.Вставить("GLNМестаДоставки",НайтиGLN(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница,"СтруктурныеЕдиницы"));
	Данные.Вставить("ТабличнаяЧасть",ЗаполнитьТЗ(Объект));
	Данные.Вставить("Сумма",Объект.Состав.Итог("Сумма"));
	Данные.Вставить("СуммаНДС",Объект.Состав.Итог("СуммаНДС"));
	Данные.Вставить("Количество",Объект.Состав.Итог("Количество"));
	
	Результат=ВыгрузитьRETANN(Данные,ИмяФайла);
	
	Если Результат<> Истина тогда
		Сообщить("Не удалось загрузить файл ");           
		Возврат Ложь;
	Иначе
		ОтменитьРегистрацию(Объект);
		ЗафиксироватьВРегистре(Объект,"",Перечисления.СтатусыEDIСообщений.Выгружен);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьRETANN(Данные, ИмяФайла = "\\fileserver\k\Exchange\dps\test.xml") Экспорт
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://local/retann").КорневыеСвойства;
	RETANN = КорневыеСвойства.Получить("RETANN").Тип;
	ПакетRETANN = ФабрикаXDTO.Создать(RETANN);
	КолВоСегментов = 0;
	
	UNH = КорневыеСвойства.Получить("UNH").Тип;
	ПакетUNH = ФабрикаXDTO.Создать(UNH);
	ПакетUNH.E0062 = Строка(Данные.Получить("НомерСообщения"));
	КолВоСегментов = КолВоСегментов + 1;
	ПакетUNHS009 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("S009").Тип);
	ПакетUNHS009.E0065 = "RETANN";
	ПакетUNHS009.E0052 = "D";
	ПакетUNHS009.E0054 = "01B";
	ПакетUNHS009.E0051 = "UN";
	ПакетUNHS009.E0057 = "EAN003";
	ПакетUNH.S009 = ПакетUNHS009;
	КолВоСегментов = КолВоСегментов + 1;
	ПакетRETANN.UNH = ПакетUNH;
	
	BGM = КорневыеСвойства.Получить("BGM").Тип;
	ПакетBGM = ФабрикаXDTO.Создать(BGM);
	ПакетBGMC002 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C002").Тип); 
	ПакетBGMC002.E1001 = "70E";
	ПакетBGMC002.E3055 = "9";
	ПакетBGM.C002 = ПакетBGMC002;
	КолВоСегментов = КолВоСегментов + 1;
	ПакетBGMC106 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C106").Тип); 
	ПакетBGMC106.E1004 = Данные.Получить("НомерДокумента");
	ПакетBGM.C106 = ПакетBGMC106;
	КолВоСегментов = КолВоСегментов + 1;
	ПакетBGM.E1225 = "9";
	КолВоСегментов = КолВоСегментов + 1;
	ПакетRETANN.BGM = ПакетBGM;
	
	DTM = КорневыеСвойства.Получить("DTM").Тип;
	ПакетDTM = ФабрикаXDTO.Создать(DTM);
	ПакетDTMC507 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C507").Тип); 
	ПакетDTMC507.E2005 = "137";
	ПакетDTMC507.E2380 = Формат(Данные.Получить("ДатаДокумента"),"ДФ=""ггггММдд""");;
	ПакетDTMC507.E2379 = "102";
	ПакетDTM.C507 = ПакетDTMC507;
	КолВоСегментов = КолВоСегментов + 1;
	ПакетRETANN.DTM.Добавить(ПакетDTM);
	
	DTM = КорневыеСвойства.Получить("DTM").Тип;
	ПакетDTM = ФабрикаXDTO.Создать(DTM);
	ПакетDTMC507 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C507").Тип); 
	ПакетDTMC507.E2005 = "44";
	ПакетDTMC507.E2380 = Формат(Данные.Получить("ДатаДокумента"),"ДФ=""ггггММдд""");;
	ПакетDTMC507.E2379 = "102";
	ПакетDTM.C507 = ПакетDTMC507;
	КолВоСегментов = КолВоСегментов + 1;
	ПакетRETANN.DTM.Добавить(ПакетDTM);
	
	Если ЗначениеЗаполнено(Данные.Получить("НомерDESADV")) Тогда 
		SG2 = КорневыеСвойства.Получить("SG2").Тип;
		ПакетSG2 = ФабрикаXDTO.Создать(SG2);
		ПакетSG2RFF = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("RFF").Тип); 
		ПакетSG2RFFC506 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C506").Тип);
		ПакетSG2RFFC506.E1153 = "AAK";
		ПакетSG2RFFC506.E1154 = Данные.Получить("НомерDESADV");
		ПакетSG2RFF.C506 = ПакетSG2RFFC506;
		ПакетSG2.RFF = ПакетSG2RFF; 
		КолВоСегментов = КолВоСегментов + 1;
		
		ПакетSG2DTM = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("DTM").Тип); 
		ПакетSG2DTMC507 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C507").Тип);
		ПакетSG2DTMC507.E2005 = "171";
		ПакетSG2DTMC507.E2380 = Формат(Данные.Получить("ДатаDESADV"),"ДФ=""ггггММдд""");
		ПакетSG2DTMC507.E2379 = "102";
		ПакетSG2DTM.C507 = ПакетSG2DTMC507;
		ПакетSG2.DTM = ПакетSG2DTM;
		КолВоСегментов = КолВоСегментов + 1;
		ПакетRETANN.SG2.Добавить(ПакетSG2);
	КонецЕсли;
	
	SG3 = КорневыеСвойства.Получить("SG3").Тип;
	ПакетSG3 = ФабрикаXDTO.Создать(SG3);
	ПакетSG3NAD = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("NAD").Тип); 
	ПакетSG3NAD.E3035 = "SU"; 
	ПакетSG3NADC082 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C082").Тип);
	ПакетSG3NADC082.E3039 = Данные.Получить("GLNПоставщика"); 
	ПакетSG3NADC082.E3055 = "9";
	ПакетSG3NAD.C082 = ПакетSG3NADC082;
	ПакетSG3.NAD = ПакетSG3NAD; 
	КолВоСегментов = КолВоСегментов + 1;
	ПакетRETANN.SG3.Добавить(ПакетSG3);
	
	SG3 = КорневыеСвойства.Получить("SG3").Тип;
	ПакетSG3 = ФабрикаXDTO.Создать(SG3);
	ПакетSG3NAD = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("NAD").Тип); 
	ПакетSG3NAD.E3035 = "BY"; 
	ПакетSG3NADC082 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C082").Тип);
	ПакетSG3NADC082.E3039 = Данные.Получить("GLNПокупателя"); 
	ПакетSG3NADC082.E3055 = "9";
	ПакетSG3NAD.C082 = ПакетSG3NADC082;
	ПакетSG3.NAD = ПакетSG3NAD; 
	КолВоСегментов = КолВоСегментов + 1;
	ПакетRETANN.SG3.Добавить(ПакетSG3);
	
	SG3 = КорневыеСвойства.Получить("SG3").Тип;
	ПакетSG3 = ФабрикаXDTO.Создать(SG3);
	ПакетSG3NAD = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("NAD").Тип); 
	ПакетSG3NAD.E3035 = "DP"; 
	ПакетSG3NADC082 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C082").Тип);
	ПакетSG3NADC082.E3039 = Данные.Получить("GLNМестаДоставки"); 
	ПакетSG3NADC082.E3055 = "9";
	ПакетSG3NAD.C082 = ПакетSG3NADC082;
	ПакетSG3.NAD = ПакетSG3NAD; 
	КолВоСегментов = КолВоСегментов + 1;
	ПакетRETANN.SG3.Добавить(ПакетSG3);
	
	Состав = Данные.Получить("ТабличнаяЧасть");
	Счетчик = 0;
	Для Каждого Строка Из Состав Цикл
		SG11 = КорневыеСвойства.Получить("SG11").Тип;
		ПакетSG11 = ФабрикаXDTO.Создать(SG11);
		
		ПакетSG11LIN = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("LIN").Тип); 
		ПакетSG11LIN.E1082 = Строка.ПорядковыйНомер;
		ПакетSG11LINC212 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C212").Тип);
		ПакетSG11LINC212.E7140 = СокрЛП(Строка.GTIN);
		ПакетSG11LINC212.E7143 = "SRV";
		ПакетSG11LIN.C212 = ПакетSG11LINC212;
		ПакетSG11.LIN = ПакетSG11LIN;
		КолВоСегментов = КолВоСегментов + 1;
		
		ПакетSG11PIA = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("PIA").Тип); 
		ПакетSG11PIA.E4347 = "1";
		ПакетSG11PIAC212 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C212").Тип);
		ПакетSG11PIAC212.E7140 = Строка.КодТовара;
		ПакетSG11PIAC212.E7143 = "IN";
		ПакетSG11PIA.C212.Добавить(ПакетSG11PIAC212);
		ПакетSG11.PIA.Добавить(ПакетSG11PIA);
		КолВоСегментов = КолВоСегментов + 1;
		
		ПакетSG11IMD = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("IMD").Тип); 
		ПакетSG11IMD.E7077 = "F";
		ПакетSG11IMDC273 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C273").Тип);
		ПакетSG11IMDC273.E7008.Добавить(Лев(Строка.НаименованиеТовара,255));
		ПакетSG11IMD.C273 = ПакетSG11IMDC273;
		ПакетSG11.IMD.Добавить(ПакетSG11IMD);
		КолВоСегментов = КолВоСегментов + 1;
		
		Если ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда 
			ПакетSG11PRI = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("PRI").Тип); 
			ПакетSG11PRIC509 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C509").Тип);
			ПакетSG11PRIC509.E5125 = "AAE";
			ПакетSG11PRIC509.E5118 = Строка.ЦенаСНДС;
			ПакетSG11PRI.C509 = ПакетSG11PRIC509;
			ПакетSG11.PRI.Добавить(ПакетSG11PRI);
			КолВоСегментов = КолВоСегментов + 1;
		КонецЕсли; 	
		Если ЗначениеЗаполнено(Строка.ЦенаБезНДС) Тогда 
			ПакетSG11PRI = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("PRI").Тип); 
			ПакетSG11PRIC509 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C509").Тип);
			ПакетSG11PRIC509.E5125 = "AAA";
			ПакетSG11PRIC509.E5118 = Строка.ЦенаБезНДС;
			ПакетSG11PRI.C509 = ПакетSG11PRIC509;
			ПакетSG11.PRI.Добавить(ПакетSG11PRI);
			КолВоСегментов = КолВоСегментов + 1;
		КонецЕсли; 	
		
		
		ПакетSG11MOA = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("MOA").Тип); 
		ПакетSG11MOAC516 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C516").Тип);
		ПакетSG11MOAC516.E5025 = "79";
		ПакетSG11MOAC516.E5004 = Строка.СуммаЗаказа;
		ПакетSG11MOA.C516 = ПакетSG11MOAC516;
		ПакетSG11.MOA.Добавить(ПакетSG11MOA);
		КолВоСегментов = КолВоСегментов + 1;
		
		ПакетSG11MOA = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("MOA").Тип); 
		ПакетSG11MOAC516 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C516").Тип);
		ПакетSG11MOAC516.E5025 = "124";
		ПакетSG11MOAC516.E5004 = Строка.СуммаНДС;
		ПакетSG11MOA.C516 = ПакетSG11MOAC516;
		ПакетSG11.MOA.Добавить(ПакетSG11MOA);
		КолВоСегментов = КолВоСегментов + 1;
		
		ПакетSG11SG13 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("SG13").Тип); 
		ПакетSG11SG13QTY = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("QTY").Тип);
		ПакетSG11SG13QTYC186 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C186").Тип);
		ПакетSG11SG13QTYC186.E6063 = "61";
		ПакетSG11SG13QTYC186.E6060 = Строка.Количество;
		ПакетSG11SG13QTYC186.E6411 = Строка.ЕдиницаИзмерения;
		ПакетSG11SG13QTY.C186 = ПакетSG11SG13QTYC186;
		ПакетSG11SG13.QTY.Добавить(ПакетSG11SG13QTY);
		ПакетSG11.SG13.Добавить(ПакетSG11SG13);
		КолВоСегментов = КолВоСегментов + 1;
		
		ПакетRETANN.SG11.Добавить(ПакетSG11);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	UNS = КорневыеСвойства.Получить("UNS").Тип;
	ПакетUNS = ФабрикаXDTO.Создать(UNS);
	ПакетUNS.E0081 = "S";
	КолВоСегментов = КолВоСегментов + 1;
	ПакетRETANN.UNS = ПакетUNS;
	
	CNT = КорневыеСвойства.Получить("CNT").Тип;
	ПакетCNT = ФабрикаXDTO.Создать(CNT);
	ПакетCNTC270 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C270").Тип); 
	ПакетCNTC270.E6069 = "2";
	ПакетCNTC270.E6066 = Счетчик;
	ПакетCNT.C270 = ПакетCNTC270;
	КолВоСегментов = КолВоСегментов + 1;
	ПакетRETANN.CNT.Добавить(ПакетCNT);
	
	//CNT = КорневыеСвойства.Получить("CNT").Тип;
	//ПакетCNT = ФабрикаXDTO.Создать(CNT);
	//ПакетCNTC270 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C270").Тип); 
	//ПакетCNTC270.E6069 = "1";
	//ПакетCNTC270.E6066 = Данные.Получить("Количество");
	//ПакетCNT.C270 = ПакетCNTC270;
	//ПакетRETANN.CNT.Добавить(ПакетCNT);
	//
	//ПакетMOA = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("MOA").Тип); 
	//ПакетMOAC516 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C516").Тип);
	//ПакетMOAC516.E5025 = "79";//"98";
	//ПакетMOAC516.E5004 = Число(Данные.Получить("Сумма"))-Число(Данные.Получить("СуммаНДС"));
	//ПакетMOA.C516 = ПакетMOAC516;
	//ПакетRETANN.MOA.Добавить(ПакетMOA);
	//
	//ПакетMOA = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("MOA").Тип); 
	//ПакетMOAC516 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C516").Тип);
	//ПакетMOAC516.E5025 = 146;//"9";
	//ПакетMOAC516.E5004 = Данные.Получить("Сумма");
	//ПакетMOA.C516 = ПакетMOAC516;
	//ПакетRETANN.MOA.Добавить(ПакетMOA);
	//
	//ПакетMOA = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("MOA").Тип); 
	//ПакетMOAC516 = ФабрикаXDTO.Создать(КорневыеСвойства.Получить("C516").Тип);
	//ПакетMOAC516.E5025 = "124";
	//ПакетMOAC516.E5004 = Данные.Получить("СуммаНДС");
	//ПакетMOA.C516 = ПакетMOAC516;
	//ПакетRETANN.MOA.Добавить(ПакетMOA);
	
	UNT = КорневыеСвойства.Получить("UNT").Тип;
	ПакетUNT = ФабрикаXDTO.Создать(UNT);
	ПакетUNT.E0074 = КолВоСегментов;
	ПакетUNT.E0062 = Строка(Данные.Получить("НомерСообщения"));
	ПакетRETANN.UNT = ПакетUNT;
	
	Результат = Истина;
	Попытка
		ЗаписьXML1 = Новый ЗаписьXML;
		ЗаписьXML1.ОткрытьФайл(ИмяФайла,"windows-1251");
		ЗаписьXML1.ЗаписатьОбъявлениеXML();                             
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML1,ПакетRETANN,"RETANN",,,);
		ЗаписьXML1.Закрыть();
		Текст = новый ТекстовыйДокумент;                                //dps+ 15.08.19 0000136466 костыль. убираем пространство имен.
    	Текст.Прочитать(ИмяФайла);
    	Текст.ЗаменитьСтроку(2,"<RETANN>");
    	текст.Записать(ИмяФайла,"windows-1251");
	Исключение
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции
//dps- 05.05.2014 

Процедура  РегПриходнаяНакладная(Документ) Экспорт
	
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		//Проверим работает ли поставшик по EDI
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	EDIПровайдерыПоставщиков.EDIПровайдер
		|ИЗ
		|	РегистрСведений.EDIПровайдерыПоставщиков КАК EDIПровайдерыПоставщиков
		|ГДЕ
		|	EDIПровайдерыПоставщиков.Контрагент = &Контрагент
		|	И EDIПровайдерыПоставщиков.GLN <> &GLN
		|	И НЕ EDIПровайдерыПоставщиков.RECADV"; //Нужно ли отправить RECADV у этого поставщика
		
		Запрос.УстановитьПараметр("GLN", "");
		Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой()Тогда		
			Запрос = Новый Запрос;
			Запрос.Текст =						
			"ВЫБРАТЬ
			|	Izh_DESADV.Поставка
			|ИЗ
			|	Документ.Izh_DESADV КАК Izh_DESADV
			|ГДЕ
			|	Izh_DESADV.Поставка = &Поставка";
			Запрос.УстановитьПараметр("Поставка", Документ.Ссылка);
			
			Запрос.УстановитьПараметр("Документ", Документ.ДокАктПриемки);
			Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыEDIСообщений.Получен);
			
			Результат = Запрос.Выполнить();
			Если не Результат.Пустой() Тогда 
				
				Узел = ПланыОбмена.Izh_ОбменEDI.НайтиПоКоду(1);
				Если НЕ Узел.Пустая() Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(Узел,Документ.ПолучитьОбъект());	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;
КонецПроцедуры

Процедура ОтменитьРегистрацию(Объект)
	Узел = ПланыОбмена.Izh_ОбменEDI.НайтиПоКоду(1);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Объект);	
КонецПроцедуры

Процедура ЗафиксироватьВРегистре(Знач Объект,НомерЗаказа, Статус)
	
	//{ СИТЕК БрыляковЕЮ 2014-12-26  
	Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		// СИТЕК БрыляковЕЮ 2014-12-26 }
		
		НаборЗаписей = РегистрыСведений.Izh_СтатусEDIСообщений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = Объект.Ссылка;
		НоваяЗапись.НомерEDIЗаказа = НомерЗаказа;
		НоваяЗапись.Статус = Статус;
		НаборЗаписей.Записать();
		
		//{ СИТЕК БрыляковЕЮ 2014-12-26  
	ИначеЕсли ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Магазин Тогда
		
		Если НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
			Объект = Объект.Ссылка;
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.Izh_ДокументыEDI.СоздатьМенеджерЗаписи();
		НоваяЗапись.Период = ТекущаяДата();
		НоваяЗапись.Документ = ?(Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)), Объект, Объект.Ссылка);
		НоваяЗапись.НомерПервичногоДокумента = НомерЗаказа;
		НоваяЗапись.Статус = Статус;
		
		Если Статус = Перечисления.СтатусыEDIСообщений.Выгружен Тогда
			ТекущийСтатус = РегистрыСведений.Izh_ДокументыEDI.ПолучитьПоследнее(, Новый Структура("Документ", Объект));
			НоваяЗапись.ОтправленРаз = ТекущийСтатус.ОтправленРаз + 1;
		КонецЕсли;
		
		НоваяЗапись.Записать(Истина);
		
	КонецЕсли;
	// СИТЕК БрыляковЕЮ 2014-12-26 }
	
КонецПроцедуры


//{ СИТЕК БрыляковЕЮ 2014-12-19  
Процедура Izh_РегистрацияОбменEDIОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	// !!!! efim
	#Если _ Тогда
		Источник = Документы.ПланируемаяПоставка.СоздатьДокумент();
	#КонецЕсли
	// !!!!
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПланируемаяПоставка") Тогда
		Если ТипЗнч(Источник.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			РегПланируемаяПоставка(Источник.Ссылка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		Если ТипЗнч(Источник.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			РегПриходнаяНакладная(Источник.Ссылка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		Если ТипЗнч(Источник.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Сообщение = РегРасходнаяНакладная(Источник.Ссылка);			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура Izh_ИсполнениеПоставокОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	// !!!! efim
	//Возврат;
	// !!!!
	
	// !!!! efim
	#Если _ Тогда
		Источник = Документы.ПланируемаяПоставка.СоздатьДокумент();
	#КонецЕсли
	// !!!!
	
	Если ТипЗнч(Источник.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Источник.Движения.Izh_ИсполнениеПоставок;
	
	ОбщиеЗначения = Новый Структура(
		"Период, Заказ, ПланФакт",
		Источник.Дата,
		Источник.Ссылка,
		Истина
	);
	
	Для каждого СтрокаТЧ Из Источник.Состав Цикл
		
		НоваяСтрока = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеЗначения);
		
		НоваяСтрока.Количество = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
		НоваяСтрока.Цена = СтрокаТЧ.Цена / СтрокаТЧ.Коэффициент;
		
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры


Процедура ЗагрузитьDESADV_Магазин(Файл, Знач Поставщик, Знач Покупатель, Знач МестоДоставки, Лог)
	
	// !!!! efim
	#Если _ Тогда
		Лог = Новый ТекстовыйДокумент;
		МестоДоставки = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	#КонецЕсли
	// !!!!
	
	ТекстОшибкиНельзяЗагружать = НСтр("ru = 'DESADV от поставщика %1 загружать не положено!'");
	ТекстОшибкиУжеЗагружен = НСтр("ru = 'DESADV %1 уже обработан.'");
	ТекстОшибкиБезЗаказа = НСтр("ru = 'Поставщику %1 не разрешено выполнять отгрузку без предварительного заказа.'");
	ТекстОшибкиСЕ = НСтр("ru = 'Место доставки было определно как %1, мы принимаем в %2.'");
	ТекстОшибкиНеНайденаНоменклатура = НСтр("ru = 'Не найдена номенклатура ""%1"" с кодом %2 и кодом ШК %3'");
	
	ТекстСообщенияСозданДокумент = НСтр("ru = 'Создан документ %1'");
	
	
	УсловияОбмена = ПолучитьУсловияОбменаПоставщиков(Поставщик);
	
	Если НЕ УсловияОбмена.DESADV Тогда
		ДобавитьЗаписьВЛог(Лог, ТекстОшибкиНельзяЗагружать, Поставщик);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МестоДоставки) Тогда
		МестоДоставки = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	ИначеЕсли НЕ (МестоДоставки = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница ИЛИ МестоДоставки.ПринадлежитЭлементу(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница)) Тогда
		ДобавитьЗаписьВЛог(Лог, ТекстОшибкиСЕ, МестоДоставки, ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		Возврат;
	КонецЕсли;
	
	Поставка = НайтиСтарыйDESADV_Магазин(Поставщик, Файл.НомерДокумента, Файл.ДатаДокумента);
	Если ТипЗнч(Поставка) = Тип("ДокументСсылка.Izh_DESADV") Тогда
		ДобавитьЗаписьВЛог(Лог, ТекстОшибкиУжеЗагружен, Файл.НомерДокумента);
		Возврат; // уже загружен
	КонецЕсли;
	
	Заказ = Неопределено;
	Если ЗначениеЗаполнено(Файл.НомерЗаказа) Тогда
		Заказ = НайтиЗаказ_Магазин(Файл.НомерЗаказа, Файл.ДатаЗаказа);
	КонецЕсли;
		
	//{++ ВетровИА 30.03.2015 Наряд №000146613}
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Если УсловияОбмена.ORDERS Тогда
			ДобавитьЗаписьВЛог(Лог, ТекстОшибкиБезЗаказа, Поставщик);
			Возврат;
		КонецЕсли	
	Иначе
		Поставщик = Заказ.Контрагент;
	КонецЕсли;
	//{-- ВетровИА 30.03.2015 Наряд №000146613}
	
	ЗагруженныеДанные = Файл.ТабличнаяЧасть;
	
	// требуется допил колонок напильником
	Колонки = "КодПокупателя, GTIN";
	Колонки = Izh_СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Колонки,,, Истина);
	Для каждого Колонка Из Колонки Цикл
		Izh_ОбработкаКоллекций.СменитьТипКолонки(ЗагруженныеДанные, Колонка, "Строка,100");
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗагруженныеДанные", ЗагруженныеДанные);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗагруженныеДанные.GTIN,
	|	ЗагруженныеДанные.КодПокупателя,
	|	ЗагруженныеДанные.НаименованиеТовара,
	|	ЗагруженныеДанные.ПоставлКоличество,
	|	ЗагруженныеДанные.Цена,
	|	ЗагруженныеДанные.Сумма,
	|	ЗагруженныеДанные.СтавкаНДС,
	|	ЗагруженныеДанные.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТ_ЗагруженныеДанные
	|ИЗ
	|	&ЗагруженныеДанные КАК ЗагруженныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Номенклатура.Ссылка, Штрихкоды.Родитель) КАК Номенклатура,
	|	ВТ_ЗагруженныеДанные.НаименованиеТовара КАК НоменклатураDESADV,
	|	ЕСТЬNULL(СтавкиНДС.Ссылка, СпрНоменклатура.СтавкаНДС) КАК СтавкаНДС,
	|	ВТ_ЗагруженныеДанные.СтавкаНДС КАК СтавкаНДСDESADV,
	|	ВТ_ЗагруженныеДанные.ПоставлКоличество КАК Количество,
	|	ВТ_ЗагруженныеДанные.Цена КАК Цена,
	|	ВТ_ЗагруженныеДанные.Сумма КАК Сумма,
	|	ЕдиницыИзмерений.Ссылка КАК ЕдиницаИзмерения,
	|	ВТ_ЗагруженныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмеренияDESADV,
	|	ВТ_ЗагруженныеДанные.КодПокупателя,
	|	ВТ_ЗагруженныеДанные.GTIN
	|ИЗ
	|	ВТ_ЗагруженныеДанные КАК ВТ_ЗагруженныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Номенклатура.Ссылка) КАК Ссылка,
	|			Номенклатура.Код КАК Код
	|		ИЗ
	|			Справочник.Номенклатура КАК Номенклатура
	|		ГДЕ
	|			Номенклатура.Транзакционный
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Номенклатура.Код) КАК Номенклатура
	|		ПО ВТ_ЗагруженныеДанные.КодПокупателя = Номенклатура.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Номенклатура.Родитель) КАК Родитель,
	|			Номенклатура.Код КАК Код
	|		ИЗ
	|			Справочник.Номенклатура КАК Номенклатура
	|		ГДЕ
	|			НЕ Номенклатура.Транзакционный
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Номенклатура.Код) КАК Штрихкоды
	|		ПО ВТ_ЗагруженныеДанные.GTIN = Штрихкоды.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ВТ_ЗагруженныеДанные.СтавкаНДС = СтавкиНДС.Ставка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ЕдиницыИзмерения.Владелец КАК Владелец,
	|				ЕдиницыИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору,
	|				МАКСИМУМ(ЕдиницыИзмерения.Ссылка) КАК Ссылка
	|			ИЗ
	|				Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|			ГДЕ
	|				НЕ ЕдиницыИзмерения.ПометкаУдаления
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЕдиницыИзмерения.Владелец,
	|				ЕдиницыИзмерения.ЕдиницаПоКлассификатору) КАК ЕдиницыИзмерений
	|			ПО СпрНоменклатура.БазоваяЕдиницаИзмерения = ЕдиницыИзмерений.ЕдиницаПоКлассификатору
	|				И СпрНоменклатура.Ссылка = ЕдиницыИзмерений.Владелец
	|		ПО (ЕСТЬNULL(Номенклатура.Ссылка, Штрихкоды.Родитель) = СпрНоменклатура.Ссылка)";         //dps+ 15.10.12 исключение Единиц измерения помеченных на удаление.
	Состав = Запрос.Выполнить().Выгрузить();
	
	НесПоставка = НесанкционированнаяПоставка();
	ПерваяНоменклатура=1;
	Протокол = Поставщик;
	Для каждого СтрокаСостав Из Состав Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСостав.Номенклатура) Тогда
			СтрокаСостав.Номенклатура = НесПоставка;
			ДобавитьЗаписьВЛог(Лог, ТекстОшибкиНеНайденаНоменклатура,
				СтрокаСостав.НоменклатураDESADV,
				СтрокаСостав.КодПокупателя,
				СтрокаСостав.GTIN
			);
		ИначеЕсли ПерваяНоменклатура=1 и не ЗначениеЗаполнено(Заказ) тогда
			Протокол = ПодобратьПротоколПоНоменклатуреИКонтрагенту(СтрокаСостав.Номенклатура,Поставщик.Родитель);
			ПерваяНоменклатура=0;
		КонецЕсли;
	КонецЦикла;
	
	ДокументDESADV = Документы.Izh_DESADV.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументDESADV, Новый Структура(
		"Номер, Дата, Покупатель, Поставщик, СтруктурнаяЕдиница",
		Файл.НомерДокумента,
		Файл.ДатаДокумента,
		Покупатель,
		Протокол,
		МестоДоставки
	));
	ЗаполнитьЗначенияСвойств(ДокументDESADV, Файл, "НомерЗаказа, ДатаЗаказа");
	ДокументDESADV.Заказ = Заказ;
	
	ДокументDESADV.Состав.Загрузить(Состав);
	СуммаВключаетНДС = ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ВключатьНДСВЦеныКонтрагентов");
	Для каждого СтрокаТЧ Из ДокументDESADV.Состав Цикл
		СтрокаТЧ.СуммаНДС = Izh_ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СуммаВключаетНДС, СтрокаТЧ.СтавкаНДСDESADV);
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДокументDESADV.Записать(РежимЗаписиДокумента.Запись);
		
		Если ТипЗнч(Поставка) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			
			ДокументDESADV.Опоздал = Истина;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Заказ) 
			// только одна приходная накладная на заказ
			ИЛИ НЕ ЗначениеЗаполнено(Документы.ПриходнаяНакладная.НайтиПоРеквизиту("ДокОснование", Заказ)) Тогда
			
			Поставка = НоваяПриходнаяНакладнаяНаОснованииDESADV_Магазин(ДокументDESADV, Лог);
			ЗафиксироватьВРегистре(Поставка, ?(ЗначениеЗаполнено(Заказ), Файл.НомерЗаказа, Файл.НомерДокумента), Перечисления.СтатусыEDIСообщений.Получен);
			
			ДобавитьЗаписьВЛог(Лог, ТекстСообщенияСозданДокумент, Поставка);
			
		КонецЕсли;
		
		ДокументDESADV.Поставка = Поставка;
		
		ДокументDESADV.Записать(РежимЗаписиДокумента.Проведение);
		
		ДобавитьЗаписьВЛог(Лог, ТекстСообщенияСозданДокумент, ДокументDESADV.Ссылка);
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция НайтиСтарыйDESADV_Магазин(Знач Поставщик, Знач НомерДокумента, Знач ДатаДокумента)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поставщик", Поставщик.Родитель);
	Запрос.УстановитьПараметр("НомерДокумента", НомерДокумента);
	Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(ДатаДокумента));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Документы.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Izh_DESADV.Ссылка КАК Ссылка,
	|		Izh_DESADV.Поставщик КАК Поставщик,
	|		Izh_DESADV.Номер КАК НомерДокумента,
	|		Izh_DESADV.Дата КАК ДатаДокумента,
	|		0 КАК Порядок
	|	ИЗ
	|		Документ.Izh_DESADV КАК Izh_DESADV
	|	ГДЕ
	|		Izh_DESADV.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходнаяНакладная.Ссылка,
	|		ПриходнаяНакладная.Контрагент,
	|		ПриходнаяНакладная.НомерДокумента,
	|		ПриходнаяНакладная.ДатаДокумента,
	|		1
	|	ИЗ
	|		Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|	ГДЕ
	|		НЕ ПриходнаяНакладная.ПометкаУдаления) КАК Документы
	|ГДЕ
	|	Документы.Поставщик.Родитель = &Поставщик
	|	И Документы.НомерДокумента = &НомерДокумента
	|	И НАЧАЛОПЕРИОДА(Документы.ДатаДокумента, ДЕНЬ) = &ДатаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.Порядок";
	НайденныйДокумент = Запрос.Выполнить().Выбрать();
	
	Если НайденныйДокумент.Следующий() Тогда
		Возврат НайденныйДокумент.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЗаказ_Магазин(Знач НомерЗаказа, Знач ДатаЗаказа)
	
	Статус = Новый Массив();
	Статус.Добавить(Перечисления.СтатусыEDIСообщений.Выгружен);
	Статус.Добавить(Перечисления.СтатусыEDIСообщений.Доставлен);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Отправлен", Статус);
	Запрос.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
	//Котлячкова++ 5,04,15 Наряд 000146776 от 02.04.2015 16:22:32	
	//Запрос.УстановитьПараметр("ДатаЗаказа", НачалоДня(ДатаЗаказа));
	//Котлячкова-- 5,04,15 Наряд 000146776 от 02.04.2015 16:22:32
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Izh_ДокументыEDIСрезПоследних.Документ КАК Ссылка
	|ИЗ
	|	РегистрСведений.Izh_ДокументыEDI.СрезПоследних(
	|			,
	|			Документ ССЫЛКА Документ.ПланируемаяПоставка
	//Котлячкова++ 5,04,15 Наряд 000146776 от 02.04.2015 16:22:32
	//|				И НАЧАЛОПЕРИОДА(Документ.Дата, ДЕНЬ) = &ДатаЗаказа 
	//Котлячкова-- 5,04,15 Наряд 000146776 от 02.04.2015 16:22:32
	|				И Документ.Номер = &НомерЗаказа) КАК Izh_ДокументыEDIСрезПоследних
	|ГДЕ
	|	Izh_ДокументыEDIСрезПоследних.Статус В(&Отправлен)";
	Заказ = Запрос.Выполнить().Выбрать();
	
	Если Заказ.Следующий() Тогда
		Возврат Заказ.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НоваяПриходнаяНакладнаяНаОснованииDESADV_Магазин(Знач ДокументDESADV, Лог)
	
	// !!!! efim
	#Если _ Тогда
		Лог = Новый ТекстовыйДокумент;
		ДокументDESADV = Документы.Izh_DESADV.ПустаяСсылка();
	#КонецЕсли
	// !!!!
	
	// {ВетровИА 2015-05-13 Наряд №000150185
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Izh_ТипыДоговоровПоУмолчаниюСрезПоследних.ТипДоговора КАК Тип
	|ИЗ
	|	РегистрСведений.Izh_ТипыДоговоровПоУмолчанию.СрезПоследних(
	|			&Дата,
	|			Контрагент = &Контрагент
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И Фирма = &Фирма) КАК Izh_ТипыДоговоровПоУмолчаниюСрезПоследних";
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", ДокументDESADV.Поставщик);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ДокументDESADV.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Фирма", ДокументDESADV.Покупатель);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ТекущийТипДоговора = Результат.Тип;
	КонецЕсли;
	// ВетровИА 2015-05-13 Наряд №000150185}

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("DESADV", ДокументDESADV.Ссылка);
	Запрос.УстановитьПараметр("БезЗаказа", НЕ ЗначениеЗаполнено(ДокументDESADV.Заказ));
	Запрос.УстановитьПараметр("Заказ", ДокументDESADV.Заказ);
	Запрос.УстановитьПараметр("Поставщик", ДокументDESADV.Поставщик);
	Запрос.УстановитьПараметр("Тара", Перечисления.ВидыТоваров.Тара);
	Запрос.УстановитьПараметр("НеПоставка", НесанкционированнаяПоставка());
	Запрос.УстановитьПараметр("ТекущийТипДоговора", ТекущийТипДоговора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Поставка.ЭтоТара
	|				ТОГДА Поставка.Номенклатура
	|			КОГДА &БезЗаказа
	|				ТОГДА НоменклатураКонтрагента.Номенклатура
	|			ИНАЧЕ Izh_ИсполнениеПоставокОбороты.Номенклатура
	|		КОНЕЦ, &НеПоставка) КАК Номенклатура,
	|	Поставка.Количество КАК КоличествоПоДокументу,
	|	ЕСТЬNULL(Izh_ИсполнениеПоставокОбороты.КоличествоОборот, 0) КАК КоличествоЗаказ,
	|	Izh_ИсполнениеПоставокОбороты.Цена КАК ЦенаЗаказ,
	|	НоменклатураКонтрагента.Цена КАК ЦенаПротокол,
	|	Поставка.Цена КАК ЦенаПоДокументу,
	|	Поставка.ЭтоТара,
	|	ЕСТЬNULL(Izh_ИсполнениеПоставокОбороты.СтавкаНДС, Поставка.СтавкаНДС) КАК СтавкаНДС,
	|	Поставка.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Поставка.Номенклатура ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА НоменклатураКонтрагента.Номенклатура ЕСТЬ NULL 
	|						ТОГДА 1
	|					КОГДА Izh_ИсполнениеПоставокОбороты.Номенклатура ЕСТЬ NULL 
	|							И НЕ &БезЗаказа
	|						ТОГДА 2
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Ошибка,
	|	Поставка.Номенклатура КАК НоменклатураПоставки,
	|	Поставка.ТипТовара,
	|	НоменклатураКонтрагента.ОтклонениеВесаПлюс,
	|	НоменклатураКонтрагента.ТипОтклонения
	|ПОМЕСТИТЬ ВТ_ПредвРезультат
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпрНоменклатура.Ссылка КАК Номенклатура,
	|		Izh_DESADVСостав.Цена КАК Цена,
	|		Izh_DESADVСостав.СтавкаНДС КАК СтавкаНДС,
	|		Izh_DESADVСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Izh_DESADVСостав.Количество КАК Количество,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА СпрНоменклатура.ВидТовара = &Тара
	|					ТОГДА ИСТИНА
	|			КОНЕЦ, ЛОЖЬ) КАК ЭтоТара,
	|		СпрНоменклатура.ТипТовара КАК ТипТовара
	|	ИЗ
	|		Документ.Izh_DESADV.Состав КАК Izh_DESADVСостав
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО Izh_DESADVСостав.Номенклатура = СпрНоменклатура.Ссылка
	|	ГДЕ
	|		Izh_DESADVСостав.Ссылка = &DESADV) КАК Поставка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Izh_ИсполнениеПоставок.Обороты(
	|				,
	|				,
	|				,
	|				НЕ &БезЗаказа
	|					И Заказ = &Заказ
	|					И ПланФакт = ИСТИНА) КАК Izh_ИсполнениеПоставокОбороты
	|		ПО Поставка.Номенклатура = Izh_ИсполнениеПоставокОбороты.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|		ПО Поставка.Номенклатура = НоменклатураКонтрагента.Номенклатура
	|			И (НоменклатураКонтрагента.Контрагент = &Поставщик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПредвРезультат.Номенклатура,
	|	ВТ_ПредвРезультат.КоличествоПоДокументу,
	|	ВЫБОР
	|		КОГДА ВТ_ПредвРезультат.Номенклатура = &НеПоставка
	|			ТОГДА 0
	|		КОГДА НЕ &БезЗаказа
	|				И ВТ_ПредвРезультат.КоличествоЗаказ < ВТ_ПредвРезультат.КоличествоПоДокументу
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ПредвРезультат.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Весовой)
	|							И ВТ_ПредвРезультат.ТипОтклонения = ЗНАЧЕНИЕ(Перечисление.ТипыОтклонений.Единица)
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_ПредвРезультат.КоличествоЗаказ + ВТ_ПредвРезультат.ОтклонениеВесаПлюс < ВТ_ПредвРезультат.КоличествоПоДокументу
	|									ТОГДА ВТ_ПредвРезультат.КоличествоЗаказ + ВТ_ПредвРезультат.ОтклонениеВесаПлюс
	|								ИНАЧЕ ВТ_ПредвРезультат.КоличествоПоДокументу
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_ПредвРезультат.КоличествоЗаказ
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ПредвРезультат.КоличествоПоДокументу
	|	КОНЕЦ КАК Количество,
	//++БИТ БВО 2015-09-30 - 0000140081 Необходимо брать цену протокола на дату создания документа.
	//|	ВЫБОР
	//|		КОГДА &ТекущийТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Комиссия)
	//|			ТОГДА ВТ_ПредвРезультат.ЦенаПротокол
	//|		КОГДА ВТ_ПредвРезультат.ЭтоТара
	//|			ТОГДА ВТ_ПредвРезультат.ЦенаПоДокументу
	//|		КОГДА ВТ_ПредвРезультат.Номенклатура = &НеПоставка
	//|			ТОГДА ВТ_ПредвРезультат.ЦенаПоДокументу
	//|		КОГДА НЕ &БезЗаказа
	//|			ТОГДА ВТ_ПредвРезультат.ЦенаЗаказ
	//|		ИНАЧЕ ВТ_ПредвРезультат.ЦенаПротокол
	//|	КОНЕЦ КАК Цена,
	|	ВТ_ПредвРезультат.ЦенаПротокол КАК Цена,
	//--БИТ БВО 2015-09-30 - 0000140081 Необходимо брать цену протокола на дату создания документа.
	|	ВТ_ПредвРезультат.СтавкаНДС,
	|	ВТ_ПредвРезультат.ЕдиницаИзмерения,
	|	ВТ_ПредвРезультат.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ВТ_ПредвРезультат.Ошибка,
	|	ВТ_ПредвРезультат.НоменклатураПоставки
	|ИЗ
	|	ВТ_ПредвРезультат КАК ВТ_ПредвРезультат";
	Состав = Запрос.Выполнить().Выгрузить();
	
	ТекстОшибкиПротокол = НСтр("ru = 'Номенклатуры ""%1"" нет в протоколе поставщика %2'");
	ТекстОшибкиПоставка = НСтр("ru = 'Номенклатуры ""%1"" нет в заказе'");
	Для каждого СтрокаСостав Из Состав Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаСостав.Ошибка) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибки = "";
		Если СтрокаСостав.Ошибка = 1 Тогда
			ТекстОшибки = ТекстОшибкиПротокол;
		ИначеЕсли СтрокаСостав.Ошибка = 2 Тогда
			ТекстОшибки = ТекстОшибкиПоставка;
		КонецЕсли;
		
		ДобавитьЗаписьВЛог(Лог, ТекстОшибки, 
			СтрокаСостав.НоменклатураПоставки,
			ДокументDESADV.Поставщик
		);
		
	КонецЦикла;
		
	Поставка = Документы.ПриходнаяНакладная.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Поставка, Новый Структура(
		"Дата, Контрагент, Грузоотправитель, Фирма, СтруктурнаяЕдиница, Склад",
		ТекущаяДата(),
		?(ЗначениеЗаполнено(ДокументDESADV.Заказ),ДокументDESADV.Заказ.Контрагент,ДокументDESADV.Поставщик),
		?(ЗначениеЗаполнено(ДокументDESADV.Заказ),ДокументDESADV.Заказ.Контрагент,ДокументDESADV.Поставщик),
		ДокументDESADV.Покупатель,
		ДокументDESADV.СтруктурнаяЕдиница,
		ДокументDESADV.СтруктурнаяЕдиница.СкладТорговогоЗала
	));
	Поставка.ИнициализироватьДокумент();
	ЗаполнитьЗначенияСвойств(Поставка, Новый Структура(
		"ДокОснование, ТипДоговора, НомерДокумента, ДатаДокумента",
		ДокументDESADV.Заказ,
		ТекущийТипДоговора,
		ДокументDESADV.Номер,
		ДокументDESADV.Дата
	));
	 //Колтячкова++ 6,07,15 Исправление ошибки - требование Адаевой
	 Поставка.Грузоотправитель =  Поставка.Контрагент;
	 //Колтячкова-- 6,07,15 Исправление ошибки
	Поставка.Состав.Загрузить(Состав);
	Для каждого СтрокаТЧ Из Поставка.Состав Цикл
		Izh_ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ);
	КонецЦикла;
	
	Поставка.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат Поставка.Ссылка;
	
КонецФункции

Процедура ДобавитьЗаписьВЛог(Лог, Знач ТекстСообщения, 
	Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено)
	
	// !!!! efim
	#Если _ Тогда
		Лог = Новый ТекстовыйДокумент;
	#КонецЕсли
	// !!!!
	
	Если Параметр1 <> Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, 
			Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6
		);
	КонецЕсли;
	
	Лог.ДобавитьСтроку(ТекстСообщения);
	Сообщить(ТекстСообщения);
	
КонецПроцедуры

Функция НесанкционированнаяПоставка() Экспорт 
	
	Результат = Справочники.Номенклатура.НайтиПоКоду(
		ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодНесанкционированнаяПоставка)
	);
	
	Возврат Результат;
	
КонецФункции

Функция ПодобратьПротоколПоНоменклатуреИКонтрагенту(Номенклатура,Поставщик) 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураКонтрагента.Контрагент  как Протокол
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
		|ГДЕ
		|	НоменклатураКонтрагента.Номенклатура = &Номенклатура
		|	И НоменклатураКонтрагента.Контрагент.Родитель = &Родитель";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Родитель", Поставщик);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ВыборкаДетальныеЗаписи.Следующий();	
	
	Возврат ВыборкаДетальныеЗаписи.Протокол;
	
КонецФункции



Функция ПланПоставкаОтправленаПолностью(Объект) Экспорт 
	
	// !!!! efim
	#Если _ Тогда
		Объект = Документы.ПланируемаяПоставка.ПустаяСсылка();
	#КонецЕсли
	// !!!!
	
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийСтатус = РегистрыСведений.Izh_ДокументыEDI.СрезПоследних(, Новый Структура("Документ", Объект));
	Если ТекущийСтатус.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийСтатус = ТекущийСтатус[0];
	Если ЗначениеЗаполнено(ТекущийСтатус.Период) 
		И НачалоДня(ТекущийСтатус.Период) < НачалоДня(ТекущаяДата()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УсловияОбмена = ПолучитьУсловияОбменаПоставщиков(Объект.Контрагент);
	
	Результат = ТекущийСтатус.ОтправленРаз >= УсловияОбмена.КоличествоORDERS;
	
	Возврат Результат;
	
КонецФункции


Функция ОтправитьRECADV_Магазин(Объект)
	
	// !!!! efim
	#Если _ Тогда
		Объект = Документы.ПриходнаяНакладная.СоздатьДокумент();
	#КонецЕсли
	// !!!!
	
	Если ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Магазин Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГЛНПоставщика = НайтиGLN(Объект.Контрагент, "Контрагенты");
	
	ОператорEDI=ПолучитьEDIПрвайдера(Объект.Контрагент);
	ДокВид=Объект.Метаданные().Имя;
	ДокВид=ОпределитьИмяФайла(ОператорEDI,Перечисления.Izh_ВидыEDIДокументов.RECADV);
	Каталог=КаталогВыгрузки(Каталог, Объект.Контрагент, "RECADV");
	ИмяФайла=Каталог+ДокВид+"_"+Объект.Номер+"_"+Формат(Объект.Дата,"ДФ=yyyyMMdd")+".xml";

	
	Шапка = ШапкаRECADV(Объект);
	ТабличнаяЧасть = ТабличнаяЧастьRECADV(Объект);
	
	ЕщеРеквизиты = Новый Структура(
		"ИмяФайла, ФункцияСообщения, ФорматДатыДокумента, ФорматДатыПоставки, ТабличнаяЧасть, ОбщаяСумма",
		ИмяФайла,
		"9",
		"102",
		"102",
		ТабличнаяЧасть,
		Объект.СуммаИтого
	);
	
	Данные = Новый Соответствие();
	Для каждого Элемент Из Шапка Цикл
		Данные.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	Для каждого Элемент Из ЕщеРеквизиты Цикл
		Данные.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	ОбработкаВыгрузки = Обработки.Izh_Выгрузка.Создать();
	
	Результат = ОбработкаВыгрузки.ВыгрузитьRECADV(Данные);
	
	Если Результат <> Истина Тогда
		Сообщить("Не удалось выгрузить RECADV для документа " + Объект.Ссылка);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ШапкаRECADV(Объект)
	
	// !!!! efim
	#Если _ Тогда
		Объект = Документы.ПриходнаяНакладная.СоздатьДокумент();
	#КонецЕсли
	// !!!!
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Номер КАК НомерДокумента,
	|	ПриходнаяНакладная.Дата КАК ДатаДокумента,
	|	ПриходнаяНакладная.НомерДокумента КАК НомерНакладной,
	|	ПриходнаяНакладная.ДатаДокумента КАК ДатаНакладной,
	|	ПриходнаяНакладная.ДатаДокумента КАК ДатаПоставки,
	|	ПланируемаяПоставка.Номер КАК НомерЗаказа,
	|	ПланируемаяПоставка.Дата КАК ДатаЗаказа
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланируемаяПоставка КАК ПланируемаяПоставка
	|		ПО ПриходнаяНакладная.ДокОснование = ПланируемаяПоставка.Ссылка
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка = &Ссылка";
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Структура(
		"НомерСообщения, Соглашение, Валюта, GLNПоставщика, GLNПокупателя, GLNМестаДоставки, GLNПлательщика, GLNКомуВыставленСчет",
		Объект.Ссылка.УникальныйИдентификатор(),
		"",
		"RUB",
		НайтиGLN(Объект.Контрагент, "Контрагенты"),
		НайтиGLN(Объект.Фирма, "Организации"),
		НайтиGLN(Объект.СтруктурнаяЕдиница, "СтруктурныеЕдиницы"),
		"",
		""
	);
	
	Для каждого Колонка Из Шапка.Колонки Цикл
		Результат.Вставить(Колонка.Имя, Шапка[0][Колонка.Имя]);
	КонецЦикла;
	//{БредовЮГ 2015-06-10 Наряд 000153176 от 10.06.2015 14:41:19
	//Возврат Шапка;
	Возврат Результат;
	//БредовЮГ  2015-06-10 Наряд 000153176 от 10.06.2015 14:41:19 } 
	
	
КонецФункции
//Котлячкова ++ Ошибки выгрузки  RECADV 26,06,15
Функция ТабличнаяЧастьRECADV(Объект)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поставка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Заказ", Объект.ДокОснование);
	Запрос.УстановитьПараметр("Весовой", Перечисления.ТипыТоваров.Весовой);
	Запрос.УстановитьПараметр("ЕдИзмКг", "KGM");
	Запрос.УстановитьПараметр("ЕдИзмШт", "PCE");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходнаяНакладнаяСостав.Ссылка КАК Ссылка,
	|	ПриходнаяНакладнаяСостав.Номенклатура КАК Номенклатура,
	|	СУММА(ПриходнаяНакладнаяСостав.Количество) КАК Количество,
	|	СУММА(ПриходнаяНакладнаяСостав.КоличествоПоДокументу) КАК КоличествоПоДокументу,
	|	ПриходнаяНакладнаяСостав.Цена КАК ЦенаСНДС
	|ПОМЕСТИТЬ ВТ_Состав
	|ИЗ
	|	Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
	|ГДЕ
	|	ПриходнаяНакладнаяСостав.Ссылка = &Поставка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходнаяНакладнаяСостав.Ссылка,
	|	ПриходнаяНакладнаяСостав.Номенклатура,
	|	ПриходнаяНакладнаяСостав.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Состав.Номенклатура,
	|	ВТ_Состав.Количество,
	|	ВТ_Состав.КоличествоПоДокументу,
	|	ВТ_Состав.Номенклатура.Код КАК КодПокупателя,
	|	NULL КАК GTIN,
	|	ВТ_Состав.Номенклатура.Наименование КАК НаименованиеТовара,
	|	ВЫБОР ВТ_Состав.Номенклатура.ТипТовара
	|		КОГДА &Весовой
	|			ТОГДА &ЕдИзмКг
	|		ИНАЧЕ &ЕдИзмШт
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Причины.Причина.ПризнакПриемки = ЗНАЧЕНИЕ(Перечисление.РезультатПриемки.Брак)
	|			ТОГДА ""Брак""
	|		ИНАЧЕ ""НеБрак""
	|	КОНЕЦ КАК Причина,
	|	ВТ_Состав.ЦенаСНДС
	|ПОМЕСТИТЬ ВТ_Поставка
	|ИЗ
	|	ВТ_Состав КАК ВТ_Состав
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Izh_РасхожденияПриПриемкеОбороты.Номенклатура КАК Номенклатура,
	|			МИНИМУМ(Izh_РасхожденияПриПриемкеОбороты.Причина) КАК Причина
	|		ИЗ
	|			РегистрНакопления.Izh_РасхожденияПриПриемке.Обороты(, , Регистратор, ) КАК Izh_РасхожденияПриПриемкеОбороты
	|		ГДЕ
	|			Izh_РасхожденияПриПриемкеОбороты.Регистратор = &Поставка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Izh_РасхожденияПриПриемкеОбороты.Номенклатура) КАК Причины
	|		ПО ВТ_Состав.Номенклатура = Причины.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Izh_СоставDESADVОбороты.Номенклатура,
	|	0,
	|	Izh_СоставDESADVОбороты.КоличествоОборот,
	|	Izh_СоставDESADVОбороты.КодПокупателя,
	|	Izh_СоставDESADVОбороты.GTIN,
	|	Izh_СоставDESADVОбороты.НоменклатураDESADV,
	|	Izh_СоставDESADVОбороты.ЕдиницаИзмеренияDESADV,
	|	""НеБрак"",
	|	Izh_СоставDESADVОбороты.Цена
	|ИЗ
	|	РегистрНакопления.Izh_СоставDESADV.Обороты(
	|			,
	|			,
	|			,
	|			Заказ = &Заказ
	|				И Поставка = &Поставка
	|				И НЕ Номенклатура В
	|						(ВЫБРАТЬ
	|							ВТ_Состав.Номенклатура
	|						ИЗ
	|							ВТ_Состав КАК ВТ_Состав)) КАК Izh_СоставDESADVОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Поставка.Номенклатура,
	|	ВТ_Поставка.Количество,
	|	ВТ_Поставка.КоличествоПоДокументу КАК КоличествоНакладной,
	|	ЕСТЬNULL(Izh_ИсполнениеПоставокОбороты.КоличествоОборот, 0) КАК КоличествоЗаказа,
	|	ВТ_Поставка.КодПокупателя,
	|	ВТ_Поставка.GTIN,
	|	ВТ_Поставка.НаименованиеТовара,
	|	ВТ_Поставка.ЕдиницаИзмерения,
	|	ВТ_Поставка.Причина,
	|	Izh_ИсполнениеПоставокОбороты.СуммаОборот КАК СуммаЗаказа,
	|	ВТ_Поставка.ЦенаСНДС
	|ИЗ
	|	ВТ_Поставка КАК ВТ_Поставка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Izh_ИсполнениеПоставок.Обороты(
	|				,
	|				,
	|				,
	|				Заказ = &Заказ
	|					И ПланФакт) КАК Izh_ИсполнениеПоставокОбороты
	|		ПО ВТ_Поставка.Номенклатура = Izh_ИсполнениеПоставокОбороты.Номенклатура";
	ТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	ТипыШтрихкодов = Новый Массив();
	ТипыШтрихкодов.Добавить(Справочники.СлужебныеКоды.НайтиПоКоду("EAN13"));
	
	Для каждого СтрокаТЗ Из ТабличнаяЧасть Цикл
		Если СтрокаТЗ.GTIN = Null Тогда
			Штрихкоды = ШтриховыеКоды.ПолучитьМассивНоменклатурыСШК(СтрокаТЗ.Номенклатура, ТипыШтрихкодов);
			Если Штрихкоды.Количество() > 0 Тогда
				СтрокаТЗ.GTIN = Штрихкоды[0].Код;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции
//Котлячкова -- Ошибки выгрузки  RECADV 26,06,15
Процедура ВыгрузитьRECADV() Экспорт 
	
	Фильтр = Новый Массив();
	Фильтр.Добавить(Метаданные.Документы.ПриходнаяНакладная);
	
	Узел = ПланыОбмена.Izh_ОбменEDI.Выбрать();
	Пока Узел.Следующий() Цикл
		
		Если Узел.Ссылка = ПланыОбмена.Izh_ОбменEDI.ЭтотУзел() Тогда
			Продолжить;
		КонецЕсли;
		
		Изменения = ПланыОбмена.ВыбратьИзменения(Узел.Ссылка, Узел.НомерОтправленного + 1, Фильтр);
		Пока Изменения.Следующий() Цикл
			
			Выгрузилось = Ложь;
			
			Объект = Изменения.Получить();
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
				Выгрузилось = ОтправитьRECADV_Магазин(Объект);
			ИначеЕсли ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
				Выгрузилось = Истина;
			КонецЕсли;
			
			Если Выгрузилось Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел.Ссылка, Объект);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Izh_ЗапретИзмененияORDERSОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Отказ = ПланПоставкаОтправленаПолностью(Источник.Ссылка);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Запрещено изменение! Исчерпан лимит отправки ORDERS!'"),
			Источник
		);
	КонецЕсли;
	
КонецПроцедуры

// СИТЕК БрыляковЕЮ 2014-12-19 }
