////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеанса() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	Возврат Обработчики;
	
КонецФункции


// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура УстановитьПредставлениеПредмета(СсылкаНаПредмет, Представление) Экспорт
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	// _Демо начало примера
	//_ДемоСтандартныеПодсистемы.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	// _Демо конец примера
	
КонецПроцедуры

// Устарела. Будет удалена в следующей редакции. См. ПриОпределенииОбщихПараметровБазовойФункциональности.
Процедура ИмяФормыПерсональныхНастроек(ИмяФормы) Экспорт
	
	
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации при завершении, т.е. в обработчиках:
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при завершении.
//
// Пример реализации:
//   Для установки параметров работы клиента при завершении можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиентаПриЗавершении(Параметры) Экспорт
	
КонецПроцедуры

// Устарела. Будет удалена в следующей редакции. См. ПриОпределенииОбщихПараметровБазовойФункциональности.
Процедура ПолучитьМинимальноНеобходимуюВерсиюПлатформы(ПараметрыПроверки) Экспорт
	
КонецПроцедуры

// Позволяет настроить общие параметры базовой функциональности.
//
// Параметры:
//  ОбщиеПараметры (Структура) Набор параметров базовой функциональности:
//    Ранее определялись в ОбщегоНазначенияПереопределяемый.ИмяФормыПерсональныхНастроек():
//      |- ИмяФормыПерсональныхНастроек (Строка) Имя формы для редактирования персональных настроек.
//    Ранее определялись в ОбщегоНазначенияПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы():
//      |- МинимальноНеобходимаяВерсияПлатформы (Строка) Номер версии платформы для запуска программы.
//      |- РаботаВПрограммеЗапрещена (Булево) Начальное значение Ложь.
//    Не имеют аналогов в переопределяемых модулях:
//      |- ЗапрашиватьПодтверждениеПриЗавершенииПрограммы (Булево) Определяет значение по умолчанию для флажка
//         "Больше не задавать этот вопрос" диалога "Завершить работу с программой?".
//         Значение по умолчанию Истина.
//         Если установить Ложь, то пользователь не увидит диалог, пока явно не включит его отображение через свои настройки.
//      |- ОтключитьСправочникИдентификаторыОбъектовМетаданных (Булево) - отключает заполнение справочника
//         ИдентификаторыОбъектовМетаданных, процедуры выгрузки и загрузки элементов справочника в узлах РИБ.
//         Востребовано при частичном встраивании БСП в конфигурации на платформе 8.1
//
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	// _Демо начало примера
	//_ДемоСтандартныеПодсистемы.ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры);
	// _Демо конец примера
	
КонецПроцедуры

// Обработчик события "Перед загрузкой идентификаторов объектов метаданных в подчиненном РИБ узле".
// Выполняет заполнение настроек размещения сообщения обмена данными или
// нестандартную загрузку идентификаторов объектов метаданных из главного узла.
//
// Параметры:
//  СтандартнаяОбработка - Булево, начальное значение Истина, если установить Ложь, тогда стандартная загрузка
//                идентификаторов объектов метаданных с помощью подсистемы ОбменДанными будет пропущена (тоже
//                будет и в случае, если подсистемы ОбменДанными нет).
//
Процедура ПередЗагрузкойИдентификаторовОбъектовМетаданныхВПодчиненномРИБУзле(СтандартнаяОбработка) Экспорт
	
	// _Демо начало примера
	//Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
	//	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") <> Истина Тогда
	//		// Конвертировать настройки транспорта обмена, как возможно.
	//		// Включить синхронизацию данных.
	//	КонецЕсли;
	//Иначе
	//	СтандартнаяОбработка = Ложь;
	//	// Загрузить идентификаторы объектов метаданных из сообщения обмена.
	//КонецЕсли;
	// _Демо конец примера
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1"); 
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
	
	
КонецПроцедуры

// Функция ПолучитьИсключенияПоискаСсылок возвращает список имен объектов метаданных,
// которые могут ссылаться на различные объекты метаданных без влияния на бизнес-логику приложения,
//
// Пример:
// Для документ "Реализация товаров и услуг" настроена подсистема версионирования объектов,
// и подсистема свойств. При этом на экземпляр документа может быть множество ссылок 
// в информационной базе (из других документов, регистров). Часть ссылок имеют значение для бизнес-логики
// (например движения по регистрам). Другая часть ссылок - "техногенные" ссылки на объект из объектов ИБ,
// которые относятся к подсистеме версионирования объектов и подсистеме свойств. Такие техногенные
// ссылки должны быть отфильтрованы в обработке удаления помеченных и при поиске ссылок на объект
// в подсистеме запрета редактирования ключевых реквизитов.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ПолучитьИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	// Валюты
	Массив.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	// Конец Валюты
	
	
	
	// УправлениеДоступом
	Массив.Добавить(Метаданные.РегистрыСведений.ГруппыЗначенийДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ЗначенияГруппДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ТаблицыГруппДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.ПолноеИмя());
	// Конец УправлениеДоступом
	
	//// БизнесПроцессыИЗадачи
	//Массив.Добавить(Метаданные.РегистрыСведений.ИсполнителиЗадач.ПолноеИмя());
	//Массив.Добавить(Метаданные.РегистрыСведений.СписокБизнесПроцессов.ПолноеИмя());
	//// Конец БизнесПроцессыИЗадачи
	
	//// ФизическиеЛица
	//Массив.Добавить(Метаданные.РегистрыСведений.ДокументыФизическихЛиц.ПолноеИмя());
	//// Конец ФизическиеЛица
	
	
	Возврат Массив;
	
КонецФункции // ПолучитьИсключенияПоискаСсылок()


Функция ТекстРазделителяЗапросовПакета() Экспорт

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

