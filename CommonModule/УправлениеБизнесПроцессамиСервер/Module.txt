Функция СоздатьБПНоваяЦена(Основание, обПараметры)
	
	оБПНоваяЦена = БизнесПроцессы.НоваяЦена.СоздатьБизнесПроцесс();
	оБПНоваяЦена.Дата = Основание;
	оБПНоваяЦена.СтруктурнаяЕдиница = обПараметры.СтруктурнаяЕдиница;
	оБПНоваяЦена.Основание = Основание;

	Возврат оБПНоваяЦена;
КонецФункции

Функция ЗапуститьБизнесПроцессСДопУсловиями(обПараметры) Экспорт
	
	сткДопРеквизитыБП = обПараметры.ДопРеквизитыБП;
	Если Не обПараметры.БизнесПроцесс = БизнесПроцессы.НоваяЦена 
		//Или сткДопРеквизитыБП.Свойство("ВариантСозданияБП") = Ложь
		//Или Не сткДопРеквизитыБП.ВариантСозданияБП = Перечисления.ВариантыСозданияБПНоваяЦена.ПоКатегории
		//Или Не сткДопРеквизитыБП.ВариантСозданияБП = Перечисления.ВариантыСозданияБПНоваяЦена.ПоПакету
		//Или сткДопРеквизитыБП.Свойство("МаксимальноеКоличествоТоваров") = Ложь
		//Или Не сткДопРеквизитыБП.МаксимальноеКоличествоТоваров = 0
		Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//тзСостав = Новый ТаблицаЗначений;	//сюда пишем состав для бп
	//тзСостав.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя), ));
	//тзСостав.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//тзСостав.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	//тзСостав.Колонки.Добавить("ID", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	//тзСостав.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2)));
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("тз", обПараметры.Основание.Состав);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", обПараметры.СтруктурнаяЕдиница);
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ тз ИЗ &тз КАК тз";
	Запрос.Выполнить();
	
	Если сткДопРеквизитыБП.ВариантСозданияБП = Перечисления.ВариантыСозданияБПНоваяЦена.ПоПакету Тогда	//всегда новый бп
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(тз.Период, ДЕНЬ) КАК Период,
		|	тз.Номенклатура КАК Номенклатура,
		|	тз.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	тз.ID КАК ID,
		|	тз.ШаблонЦенника КАК ШаблонЦенника,
		|	тз.Цена КАК Цена,
		|	тз.ТекДата КАК ТекДата,
		|	тз.Фирма КАК Фирма
		|ИЗ
		|	тз КАК тз
		|ИТОГИ ПО
		|	ТекДата";
		ВыборкаДень = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДень.Следующий() Цикл
			//оБПНоваяЦена = БизнесПроцессы.НоваяЦена.СоздатьБизнесПроцесс();
			//оБПНоваяЦена.СтруктурнаяЕдиница = обПараметры.СтруктурнаяЕдиница;
			//оБПНоваяЦена.Основание = ВыборкаДень.Период;
			оБПНоваяЦена = СоздатьБПНоваяЦена(ВыборкаДень.ТекДата, обПараметры);
			Сч = 0;
			Выборка = ВыборкаДень.Выбрать();
			Пока Выборка.Следующий() Цикл
				сСостав = оБПНоваяЦена.Состав.Добавить();
				//сСостав.Номенклатура = Выборка.Номенклатура;
				//сСостав.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				//сСостав.ID = Выборка.ID;
				//сСостав.Цена = Выборка.Цена;
				ЗаполнитьЗначенияСвойств(сСостав, Выборка);
				сСостав.ШаблонЦенника = Выборка.ШаблонЦенника;
				Сч = Сч + 1;
				Если Сч = сткДопРеквизитыБП.МаксимальноеКоличествоТоваров Тогда
					оБПНоваяЦена.Записать(); // сохраним бзнес-процесс
					Если НЕ оБПНоваяЦена.Стартован Тогда
						оБПНоваяЦена.Старт(); // запустим бизнес-процесс
					КонецЕсли;
					
					оБПНоваяЦена = СоздатьБПНоваяЦена(ВыборкаДень.ТекДата, обПараметры);
					Сч = 0;
				КонецЕсли;
			КонецЦикла;
			Если Сч > 0 Тогда
				оБПНоваяЦена.Записать(); // сохраним бзнес-процесс
				Если НЕ оБПНоваяЦена.Стартован Тогда
					оБПНоваяЦена.Старт(); // запустим бизнес-процесс
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли сткДопРеквизитыБП.ВариантСозданияБП = Перечисления.ВариантыСозданияБПНоваяЦена.ПоКатегории Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(тз.Период, ДЕНЬ) КАК Период,
			|	тз.Номенклатура КАК Номенклатура,
			|	тз.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	тз.ID КАК ID,
			|	тз.Цена КАК Цена,
			|	тз.Категория КАК Категория,
			|	БПНоваяЦена.БизнесПроцесс КАК БизнесПроцесс,
			|	БПНоваяЦена.Задача КАК Задача
			|ИЗ
			|	(ВЫБРАТЬ
			|		тз.Период КАК Период,
			|		тз.Номенклатура КАК Номенклатура,
			|		тз.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|		тз.ID КАК ID,
			|		тз.Цена КАК Цена,
			|		спрНоменклатура.Родитель.Родитель.Родитель КАК Категория
			|	ИЗ
			|		тз КАК тз
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
			|			ПО тз.Номенклатура = спрНоменклатура.Ссылка) КАК тз
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			НоваяЦена.Основание КАК Основание,
			|			МАКСИМУМ(ЗадачаИсполнителя.Ссылка) КАК Задача,
			|			ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
			|			Категории.Категория КАК Категория
			|		ИЗ
			|			Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|				ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.НоваяЦена КАК НоваяЦена
			|				ПО ЗадачаИсполнителя.БизнесПроцесс = НоваяЦена.Ссылка
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|					НоваяЦенаСостав.Ссылка КАК Ссылка,
			|					КОЛИЧЕСТВО(НоваяЦенаСостав.НомерСтроки) КАК КоличествоСтрок
			|				ИЗ
			|					БизнесПроцесс.НоваяЦена.Состав КАК НоваяЦенаСостав
			|				ГДЕ
			|					НоваяЦенаСостав.Ссылка.Завершен = ЛОЖЬ
			|				
			|				СГРУППИРОВАТЬ ПО
			|					НоваяЦенаСостав.Ссылка
			|				
			|				ИМЕЮЩИЕ
			|					КОЛИЧЕСТВО(НоваяЦенаСостав.НомерСтроки) < &МаксимальноеКоличествоТоваров) КАК ВложенныйЗапрос
			|				ПО ЗадачаИсполнителя.БизнесПроцесс = ВложенныйЗапрос.Ссылка
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|					НоваяЦенаСостав.Ссылка КАК Ссылка,
			|					МАКСИМУМ(НоваяЦенаСостав.Номенклатура.Родитель.Родитель.Родитель) КАК Категория
			|				ИЗ
			|					БизнесПроцесс.НоваяЦена.Состав КАК НоваяЦенаСостав
			|				ГДЕ
			|					НоваяЦенаСостав.Ссылка.Завершен = ЛОЖЬ
			|				
			|				СГРУППИРОВАТЬ ПО
			|					НоваяЦенаСостав.Ссылка) КАК Категории
			|				ПО ЗадачаИсполнителя.БизнесПроцесс = Категории.Ссылка
			|		ГДЕ
			|			НЕ ЗадачаИсполнителя.Выполнена
			|			И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
			|		
			|		СГРУППИРОВАТЬ ПО
			|			НоваяЦена.Основание,
			|			ЗадачаИсполнителя.БизнесПроцесс,
			|			Категории.Категория) КАК БПНоваяЦена
			|		ПО тз.Период = БПНоваяЦена.Основание
			|			И тз.Категория = БПНоваяЦена.Категория
			|ИТОГИ ПО
			|	Период,
			|	Категория";
		
		Запрос.УстановитьПараметр("ТочкаМаршрута", обПараметры.ТочкаМаршрута);
		Запрос.УстановитьПараметр("МаксимальноеКоличествоТоваров", ?(сткДопРеквизитыБП.МаксимальноеКоличествоТоваров = 0, 10000000, сткДопРеквизитыБП.МаксимальноеКоличествоТоваров));
		
		ВыборкаДень = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДень.Следующий() Цикл
			ВыборкаКатегория = ВыборкаДень.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКатегория.Следующий() Цикл
				//оБПНоваяЦена = БизнесПроцессы.НоваяЦена.СоздатьБизнесПроцесс();
				//оБПНоваяЦена.СтруктурнаяЕдиница = обПараметры.СтруктурнаяЕдиница;
				//оБПНоваяЦена.Основание = ВыборкаДень.Период;
				//оБПНоваяЦена = СоздатьБПНоваяЦена(ВыборкаДень.Период, обПараметры);
				оБПНоваяЦена = Неопределено;
				оЗадача = Неопределено;
				Сч = 0;
				Выборка = ВыборкаКатегория.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если оБПНоваяЦена = Неопределено Тогда
						Если Выборка.БизнесПроцесс = Null Тогда
							оБПНоваяЦена = СоздатьБПНоваяЦена(ВыборкаДень.Период, обПараметры);
						Иначе
							оБПНоваяЦена = Выборка.БизнесПроцесс.ПолучитьОбъект();
							оЗадача = Выборка.Задача.ПолучитьОбъект();
							Попытка
								оБПНоваяЦена.Заблокировать();
								оЗадача.Заблокировать();
							Исключение
								оБПНоваяЦена = СоздатьБПНоваяЦена(ВыборкаДень.Период, обПараметры);
								оЗадача = Неопределено;
							КонецПопытки;	
							Сч = оБПНоваяЦена.Состав.Количество();
						КонецЕсли;
					КонецЕсли;
					
					сСостав = оБПНоваяЦена.Состав.Добавить();
					//сСостав.Номенклатура = Выборка.Номенклатура;
					//сСостав.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
					//сСостав.ID = Выборка.ID;
					//сСостав.Цена = Выборка.Цена;
					ЗаполнитьЗначенияСвойств(сСостав, Выборка);
					Сч = Сч + 1;
					Если Сч = сткДопРеквизитыБП.МаксимальноеКоличествоТоваров Тогда
						оБПНоваяЦена.Записать(); // сохраним бзнес-процесс
						Если НЕ оБПНоваяЦена.Стартован Тогда
							оБПНоваяЦена.Старт(); // запустим бизнес-процесс
						КонецЕсли;
						
						Если Не оЗадача = Неопределено Тогда
							Если оЗадача.Заблокирован() Тогда
								оЗадача.Разблокировать();
							КонецЕсли;
							Если оБПНоваяЦена.Заблокирован() Тогда
								оБПНоваяЦена.Разблокировать();
							КонецЕсли;
						КонецЕсли;
						
						оБПНоваяЦена = СоздатьБПНоваяЦена(ВыборкаДень.Период, обПараметры);
						Сч = 0;
					КонецЕсли;
				КонецЦикла;
				Если Сч > 0 Тогда
					оБПНоваяЦена.Записать(); // сохраним бзнес-процесс
					Если НЕ оБПНоваяЦена.Стартован Тогда
						оБПНоваяЦена.Старт(); // запустим бизнес-процесс
					КонецЕсли;
					
					Если Не оЗадача = Неопределено Тогда
						Если оЗадача.Заблокирован() Тогда
							оЗадача.Разблокировать();
						КонецЕсли;
						Если оБПНоваяЦена.Заблокирован() Тогда
							оБПНоваяЦена.Разблокировать();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		//Если сткДопРеквизитыБП.МаксимальноеКоличествоТоваров > 0 Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(тз.Период, ДЕНЬ) КАК Период,
			|	тз.Номенклатура КАК Номенклатура,
			|	тз.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	тз.ID КАК ID,
			|	тз.Цена КАК Цена,
			|	БПНоваяЦена.БизнесПроцесс КАК БизнесПроцесс,
			|	БПНоваяЦена.Задача КАК Задача
			|ИЗ
			|	тз КАК тз
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			НоваяЦена.Основание КАК Основание,
			|			МАКСИМУМ(ЗадачаИсполнителя.Ссылка) КАК Задача,
			|			МАКСИМУМ(ЗадачаИсполнителя.БизнесПроцесс) КАК БизнесПроцесс
			|		ИЗ
			|			Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|				ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.НоваяЦена КАК НоваяЦена
			|				ПО ЗадачаИсполнителя.БизнесПроцесс = НоваяЦена.Ссылка
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|					НоваяЦенаСостав.Ссылка КАК Ссылка,
			|					КОЛИЧЕСТВО(НоваяЦенаСостав.НомерСтроки) КАК КоличествоСтрок
			|				ИЗ
			|					БизнесПроцесс.НоваяЦена.Состав КАК НоваяЦенаСостав
			|				
			|				СГРУППИРОВАТЬ ПО
			|					НоваяЦенаСостав.Ссылка
			|				
			|				ИМЕЮЩИЕ
			|					КОЛИЧЕСТВО(НоваяЦенаСостав.НомерСтроки) < &МаксимальноеКоличествоТоваров) КАК ВложенныйЗапрос
			|				ПО ЗадачаИсполнителя.БизнесПроцесс = ВложенныйЗапрос.Ссылка
			|		ГДЕ
			|			НЕ ЗадачаИсполнителя.Выполнена
			|			И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
			|		
			|		СГРУППИРОВАТЬ ПО
			|			НоваяЦена.Основание) КАК БПНоваяЦена
			|		ПО тз.Период = БПНоваяЦена.Основание
			|ИТОГИ ПО
			|	Период";
		
		Запрос.УстановитьПараметр("ТочкаМаршрута", обПараметры.ТочкаМаршрута);
		Запрос.УстановитьПараметр("МаксимальноеКоличествоТоваров", ?(сткДопРеквизитыБП.МаксимальноеКоличествоТоваров = 0, 10000000, сткДопРеквизитыБП.МаксимальноеКоличествоТоваров));
		
		ВыборкаДень = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДень.Следующий() Цикл
			//оБПНоваяЦена = БизнесПроцессы.НоваяЦена.СоздатьБизнесПроцесс();
			//оБПНоваяЦена.СтруктурнаяЕдиница = обПараметры.СтруктурнаяЕдиница;
			//оБПНоваяЦена.Основание = ВыборкаДень.Период;
			//оБПНоваяЦена = СоздатьБПНоваяЦена(ВыборкаДень.Период, обПараметры);
			оБПНоваяЦена = Неопределено;
			оЗадача = Неопределено;
			Сч = 0;
			Выборка = ВыборкаДень.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если оБПНоваяЦена = Неопределено Тогда
					Если Выборка.БизнесПроцесс = Null Тогда
						оБПНоваяЦена = СоздатьБПНоваяЦена(ВыборкаДень.Период, обПараметры);
					Иначе
						оБПНоваяЦена = Выборка.БизнесПроцесс.ПолучитьОбъект();
						оЗадача = Выборка.Задача.ПолучитьОбъект();
						Попытка
							оБПНоваяЦена.Заблокировать();
							оЗадача.Заблокировать();
						Исключение
							оБПНоваяЦена = СоздатьБПНоваяЦена(ВыборкаДень.Период, обПараметры);
							оЗадача = Неопределено;
						КонецПопытки;	
						Сч = оБПНоваяЦена.Состав.Количество();
					КонецЕсли;
				КонецЕсли;
					
				сСостав = оБПНоваяЦена.Состав.Добавить();
				//сСостав.Номенклатура = Выборка.Номенклатура;
				//сСостав.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				//сСостав.ID = Выборка.ID;
				//сСостав.Цена = Выборка.Цена;
				ЗаполнитьЗначенияСвойств(сСостав, Выборка);
				Сч = Сч + 1;
				Если Сч = сткДопРеквизитыБП.МаксимальноеКоличествоТоваров Тогда
					оБПНоваяЦена.Записать(); // сохраним бзнес-процесс
					Если НЕ оБПНоваяЦена.Стартован Тогда
						оБПНоваяЦена.Старт(); // запустим бизнес-процесс
					КонецЕсли;
					
					Если Не оЗадача = Неопределено Тогда
						Если оЗадача.Заблокирован() Тогда
							оЗадача.Разблокировать();
						КонецЕсли;
						Если оБПНоваяЦена.Заблокирован() Тогда
							оБПНоваяЦена.Разблокировать();
						КонецЕсли;
					КонецЕсли;
					
					оБПНоваяЦена = СоздатьБПНоваяЦена(ВыборкаДень.Период, обПараметры);
					Сч = 0;
				КонецЕсли;
			КонецЦикла;
			Если Сч > 0 Тогда
				оБПНоваяЦена.Записать(); // сохраним бзнес-процесс
				Если НЕ оБПНоваяЦена.Стартован Тогда
					оБПНоваяЦена.Старт(); // запустим бизнес-процесс
				КонецЕсли;
				
				Если Не оЗадача = Неопределено Тогда
					Если оЗадача.Заблокирован() Тогда
						оЗадача.Разблокировать();
					КонецЕсли;
					Если оБПНоваяЦена.Заблокирован() Тогда
						оБПНоваяЦена.Разблокировать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Процедура предназначена для запуска бизнес-процесса из порождающего объекта
// Любой бизнес-процесс должен иметь реквизит Основание, который содержит объект,
// породивший запускаемый бизнес-процесс. Тип реквизита определяется в объекте бизнес-процесс
// Параметры:
//	обБизнесПроцесс - менеджер запускаемого бизнес-процесса
//	обОснование - объект-основание для запуска бизнес-процесса, если не равно Неопределено, тогда
//		произойдет поиск существующего бизнес-процесса с таким основанием и его перезапуск. В противном
//		случае будет просто создан новый бизнес-процесс.
//	флИскатьСуществующий - определяет, нужно или нет искать существующий бизнес-процесс с переданным
//		объектом-основанием. По умолчанию - Истина (искать). Ложь - не выполнять поиск и создать новый
//		бизнес-процесс.
//	флРестарт - признак того, что нужно найти существующий бизнес-процесс с указанным основанием и его
//		перезапустить. По умолчанию - Ложь.
функция ЗапуститьБизнесПроцесс(обПараметры) Экспорт
	Если обПараметры.БизнесПроцесс = Неопределено Тогда
		Возврат неопределено;  // это не бизнес-процесс, в данном случае б-п не существует как объекта
	КонецЕсли;	
	//типПроцесс = ТипЗнч(обПараметры.БизнесПроцесс);
	бпПроцесс = Неопределено; // пока никакого бизнес-процесса нет
	// проверим, а нам на вход действительно что-то из рода бизнес-процессов передали?
	бпПустая = обПараметры.БизнесПроцесс.ПустаяСсылка();
	Если не БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(бпПустая)) Тогда
		Возврат неопределено; // это не бизнес-процесс
	КонецЕсли;
	Если не БизнесПроцессРазрешен(бпПустая) Тогда
		// переданный бизнес-процесс запрещен в настройках конфигурации, просто выйдем
		Возврат неопределено;
	КонецЕсли;
	//спар нн{
	Если обПараметры.Свойство("ДопРеквизитыБП") Тогда
		Рез = ЗапуститьБизнесПроцессСДопУсловиями(обПараметры);
		Если Рез = Истина Тогда
			Возврат обПараметры.БизнесПроцесс.ПустаяСсылка();	//пока
		КонецЕсли;
	КонецЕсли;
	//}спар нн
	НужнаяЗадача = Неопределено;
	Если обПараметры.Свойство("Основание") и обПараметры.Искать Тогда
		// пытаемся найти существующий бизнес процесс по объекту-основанию
		// если такого объекта нет - создаем, если есть - получим объект нужного бизнес-процесса
		Если ТипЗнч(обПараметры.Основание) = Тип("Структура") Тогда
			бпПроцесс = обПараметры.БизнесПроцесс.НайтиПоРеквизиту("Основание", обПараметры.Основание.Основание);
		Иначе
			бпПроцесс = обПараметры.БизнесПроцесс.НайтиПоРеквизиту("Основание", обПараметры.Основание);
		КонецЕсли;
		Если бпПроцесс.Пустая() Тогда
			// найденная ссылка - пустая: все равно будем создавать новый БП
			бпПроцесс = обПараметры.БизнесПроцесс.СоздатьБизнесПроцесс();
		Иначе
			// бизнес-процесс существует ...
			// теперь надо посмотреть на флаг перезапуска и принять решение, перезапускаемся мы или нет
			Если не обПараметры.Удалять Тогда
				Возврат бпПроцесс;
			КонецЕсли;
			// флаг рестарта установлен - перезапускаемся
			бпПроцесс = бпПроцесс.ПолучитьОбъект();
			бпПроцесс.ПометкаУдаления = Ложь;
			бпПроцесс.Стартован = Ложь; // пометим бизнес-процесс как не стартованный
			// надо отменить признак завершения бизнес-процесса (если так есть)
			Если бпПроцесс.Завершен Тогда
				бпПроцесс.Завершен = Ложь;
			КонецЕсли;
			// здесь еще надо убить все задачи по данному бизнес-процессу (чтобы не мешались)
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ
			|	Задача.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задача
			|ГДЕ
			|	Задача.БизнесПроцесс = &БизнесПроцесс";
			Запрос.УстановитьПараметр("БизнесПроцесс", бпПроцесс.Ссылка);
			Результат = Запрос.Выполнить();
			выбРезультат = Результат.Выбрать();
			Пока выбРезультат.Следующий() Цикл
				выбРезультат.Ссылка.ПолучитьОбъект().Удалить(); // убили задачу ...
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли обПараметры.Свойство("ТочкаМаршрута") И обПараметры.Свойство("Основание") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
		              |	Задача.БизнесПроцесс,
		              |	Задача.Ссылка
		              |ИЗ
		              |	Задача.ЗадачаИсполнителя КАК Задача
		              |ГДЕ
		              |	(НЕ Задача.Выполнена)
		              |	И Задача.ТочкаМаршрута = &ТочкаМаршрута
		              |	И Задача.БизнесПроцесс.Основание = &Основание";
		Если обПараметры.Свойство("СтруктурнаяЕдиница") Тогда
			Запрос.Текст = Запрос.Текст + "
					|	И Задача.БизнесПроцесс.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", обПараметры.СтруктурнаяЕдиница);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТочкаМаршрута", обПараметры.ТочкаМаршрута);
		Запрос.УстановитьПараметр("Основание", обПараметры.Основание.Основание);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			бпПроцесс = обПараметры.БизнесПроцесс.СоздатьБизнесПроцесс();
		Иначе	
			выбРезультат = Результат.Выбрать();
			выбРезультат.Следующий();
			бпПроцесс = выбРезультат.БизнесПроцесс.ПолучитьОбъект();
			//Блокировка = Новый БлокировкаДанных;
			//Элемент = Блокировка.Добавить("БизнесПроцесс."+бпПустая.Метаданные().Имя);
			//Элемент.Режим = РежимБлокировкиДанных.Исключительный;
			//Элемент.ИсточникДанных = Результат;
			//Блокировка.Заблокировать();
			//ЗаблокироватьДанныеДляРедактирования(выбРезультат.Ссылка);
			//РазблокироватьДанныеДляРедактирования(выбРезультат.Ссылка);
			НужнаяЗадача = выбРезультат.Ссылка.ПолучитьОбъект();
			Попытка
				бпПроцесс.Заблокировать();
	        	НужнаяЗадача.Заблокировать();
			Исключение
				бпПроцесс = обПараметры.БизнесПроцесс.СоздатьБизнесПроцесс();
			КонецПопытки;	
		КонецЕсли;	
	Иначе
		бпПроцесс = обПараметры.БизнесПроцесс.СоздатьБизнесПроцесс();
	КонецЕсли;
	
	Если обПараметры.Свойство("СтруктурнаяЕдиница") Тогда
		бпПроцесс.СтруктурнаяЕдиница = обПараметры.СтруктурнаяЕдиница;
	КонецЕсли;
	Если обПараметры.Свойство("Основание") Тогда
		Основание = обПараметры.Основание;
		бпПроцесс.Заполнить(Основание); // зададим бизнес-процессу исходные данные
	КонецЕсли;
	//Попытка
	бпПроцесс.Записать(); // сохраним бзнес-процесс
	Если НЕ бпПроцесс.Стартован Тогда
		бпПроцесс.Старт(); // запустим бизнес-процесс
	КонецЕсли;	
	Если НужнаяЗадача <> Неопределено Тогда
		Если НужнаяЗадача.Заблокирован() Тогда
			НужнаяЗадача.Разблокировать();
		КонецЕсли;	
		Если бпПроцесс.Заблокирован() Тогда
			бпПроцесс.Разблокировать();
		КонецЕсли;	
	КонецЕсли;	
	
	
	//Исключение
	//	Сообщить("Ошибка запуска бизнес-процесса "+обПараметры.БизнесПроцесс+" по причине: "+ОписаниеОшибки(), СтатусСообщения.Важное);
	//КонецПопытки;
	Возврат БпПроцесс;
КонецФункции // ЗапуститьБизнесПроцесс()

// Функция предназначена для проверки доступности для использования выбранного бизнес-процесса.
// Если искомого бизнес-процесса нет в справочнике - он запрещен "по умолчанию"
// Параметры:
//	обБизнесПроцесс - бизнес-процесс любого почти-объектного типа (ссылка, объект)
// Возвращаемое значение:
//	Истина - разрешен к использованию
//	Ложь - запрещен к использованию
Функция БизнесПроцессРазрешен(обБизнесПроцесс) Экспорт
	Результат = Ложь;
	Если Метаданные.БизнесПроцессы.Содержит(обБизнесПроцесс.Метаданные()) Тогда
		стрИмяБизнесПроцесса = обБизнесПроцесс.Метаданные().Имя;
		// теперь определим доступность бизнес-процесса через соответствующий справочник
		спрНастройка = Справочники.НастройкаБизнесПроцессов.НайтиПоКоду(стрИмяБизнесПроцесса,,,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница); //V
		Результат = ?(спрНастройка.Пустая(), Ложь, спрНастройка.Использование);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции // БизнесПроцессРазрешен()

// Функция предназначена для получения исполнителя с учетом замещений
// Параметры:
//	спрРоль - в какой роли ищем заменителя
//	спрИсполнитель - для кого ищем реального исполнителя
// Возвращаемое значение:
//	Ссылка на сотрудника, который является заменителем для исходного, в рамках данной роли.
//	Если заменителя нет - возвращается переданный сотрудник
Функция РеальныйИсполнитель(спрРоль, спрИсполнитель) Экспорт
	мзЗаменители = РегистрыСведений.АдресацияЗаменители.СоздатьМенеджерЗаписи();
	мзЗаменители.РольИсполнителя = спрРоль;
	мзЗаменители.Сотрудник = спрИсполнитель;
	мзЗаменители.Прочитать();
	Возврат ?(мзЗаменители.Выбран(), мзЗаменители.Заменитель, спрИсполнитель);
КонецФункции // РеальныйИсполнитель()

// Функция предназначена для создания задачи для точки маршрута бизнес-процесса. Для создания
// используется справочник настроек параметров бизнес-процесса.
// Параметры:
//	бпПроцесс - для какого бизнес-процесса создается задача
//	ТочкаМаршрута - для какой точки маршрута создается задача
//	Исполнитель - какой исполнитель планируется в данной задаче
// Возвращаемое значение:
//	Созданная задача - если все хорошо
//	Неопределено - есть проблемы
Функция СоздатьЗадачу(бпПроцесс, ТочкаМаршрута, Исполнитель=неопределено,Описание = "", СтруктурнаяЕдиница = Неопределено) Экспорт
//kons 07.04.14: добавил ЗапасНаОповещение и параметр СтруктурнаяЕдиница (т.к. хорошо бы уже начать учитывать то что текущая может быть группой)
//				логику оставил прежнюю (хорошо бы причесать функцию полностью)

	Если СтруктурнаяЕдиница = Неопределено Тогда
		СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	КонецЕсли;
	
	сткНастройкиТочкиМаршрута = ПолучитьНастройкиТочкиМаршрута(бпПроцесс, ТочкаМаршрута, СтруктурнаяЕдиница);
	Если Не сткНастройкиТочкиМаршрута.Выполнять Или Не ТочкаМаршрута.Вид = ВидТочкиМаршрутаБизнесПроцесса.Действие Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	здчЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	// общие параметры
	здчЗадача.БизнесПроцесс = бпПроцесс.Ссылка;
	здчЗадача.ЗаполнитьПоУмолчанию();
	здчЗадача.Дата = Макс(ТекущаяДата(), бпПроцесс.Дата - сткНастройкиТочкиМаршрута.ЗапасНаОповещение * 60); // датой задачи будет максимум между текущей датой и датой формирования бизнес-процесса
	//здчЗадача.ДатаНапоминания = здчЗадача.Дата;//?(здчЗадача.Дата > КонецДня(ТекущаяДата()), здчЗадача.Дата, ТекущаяДата()); // напоминание начнем делать прямо с текущей даты, если задача на сегодня, или датой задачи в противном случае
	здчЗадача.ТочкаМаршрута = ТочкаМаршрута;
	здчЗадача.Наименование = ТочкаМаршрута.НаименованиеЗадачи;
	здчЗадача.Описание = ?(Описание = "",ТочкаМаршрута.Пояснение,Описание);
	здчЗадача.Напоминать = Истина;
	здчЗадача.Важность = 2;

	
	// параметры адресации
	//ОповещатьПоEMail = Ложь;
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ФункциональныеОбязанности") Тогда
		здчЗадача.РольИсполнителя = Исполнитель;
	Иначе	
		здчЗадача.РольИсполнителя = ТочкаМаршрута.РольИсполнителя; // это - из карты маршрута
		здчЗадача.Исполнитель = Исполнитель; // это - из вызываемого кода
		здчЗадача.ИсполнительБазовый = Исполнитель; // запомним исполнителя, который должен быть в задаче, т.к. фактический исполнитель может совсем поменяться дальше (в этом коде)
		// а здесь - пройдемся по настройкам и поймем - что и куда ставить нужно
		// здесь мы будем переопределять роль и исполнителя
		//спрНастройка = Справочники.НастройкаБизнесПроцессов.НайтиПоКоду(бпПроцесс.Метаданные().Имя,,,параметрысеанса.ТекущаяСтруктурнаяЕдиница);//V
		//Если спрНастройка <> Справочники.НастройкаБизнесПроцессов.ПустаяСсылка() Тогда
		//	// есть настройка, разбираемся дальше, если мы сюда не попали - все пойдет с настройками из карты маршрута
		//	НастройкаТочки = спрНастройка.НастройкиТочекМаршрута.Найти(ТочкаМаршрута, "ТочкаМаршрута");
		//	Если НастройкаТочки <> Неопределено Тогда
		//		// есть настройка для выбранной точки - разбираемся дальше
		//		Если НЕ НастройкаТочки.Выполнять Тогда
		//			Возврат Неопределено;
		//		КонецЕсли;	
				
				если ЗначениеЗаполнено(сткНастройкиТочкиМаршрута.РольИсполнителя) тогда
					здчЗадача.РольИсполнителя = сткНастройкиТочкиМаршрута.РольИсполнителя; // роль переопределяем всегда
				конецесли;
				//Если НастройкаТочки.ПриоритетНастройки Тогда
				//	// исполнитель берется из настройки
				если ЗначениеЗаполнено(сткНастройкиТочкиМаршрута.Исполнитель) тогда
					здчЗадача.Исполнитель = сткНастройкиТочкиМаршрута.Исполнитель;
				конецесли;
				здчЗадача.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				//Иначе
				//	// исполнитель берется из параметра, и так как исполнитель уже задан - ничего больше не делаем
				//КонецЕсли;
				//ОповещатьПоEMail = НастройкаТочки.ОповещатьПоEMail;
		//	Иначе
		//		Если ТочкаМаршрута.Вид = ВидТочкиМаршрутаБизнесПроцесса.Действие Тогда
		//			Возврат Неопределено;
		//		КонецЕсли;	
		//	КонецЕсли;
		//КонецЕсли;
		// теперь откорректируем исполнителя с учетом заменителей
		здчЗадача.Исполнитель = РеальныйИсполнитель(здчЗадача.РольИсполнителя, здчЗадача.Исполнитель);
	КонецЕсли;	
	здчЗадача.Записать();
	Если сткНастройкиТочкиМаршрута.ОповещатьПоEMail тогда
		Ключ = Строка(здчЗадача);
		Наименование = "Отправить уведомление о новой задаче по E-mail";
		ПараметрыЗадания = Новый Массив(1);
		ПараметрыЗадания[0] = здчЗадача.Ссылка;
		ФоновыеЗадания.Выполнить("УправлениеБизнесПроцессамиСервер.ОтправитьУведомлениеОНовойЗадаче",ПараметрыЗадания,Ключ,Наименование);
	Конецесли;
	
	Возврат здчЗадача;
КонецФункции

// Функция предназначена для создания набора задача (для групповой адресации)
// Параметры:
//	струкКомпоненты - список библиотек системы (нам нужен модуль сообщений)
//	бпПроцесс - для какого бизнес-процесса создается задача
//	ТочкаМаршрута - для какой точки маршрута создается задача
//	здчФормируемые - список формируемы задач
// Возвращаемое значение:
//	Истина - удачное формирование
//	Ложь - есть ошибки
Функция СоздатьСписокЗадач(струкКомпоненты, бпПроцесс, ТочкаМаршрута, здчФормируемые) Экспорт
	Если ТочкаМаршрута.Групповая Тогда
		// нужно сделать много задач - точка групповая
		рзЗапрос = ПолучитьИсполнителейДляТочкиМаршрута(бпПроцесс.Ссылка, ТочкаМаршрута);
		Если рзЗапрос.Пустой() Тогда
			// тут понимаем, что у нас не запрограммирована адресация
			// выдадим диагностику и сделаем одну задачу - пусть деруться сами :))
			здчЗадача = СоздатьЗадачу(бпПроцесс.Ссылка, ТочкаМаршрута);
			здчФормируемые.Добавить(здчЗадача);
		Иначе
			// здесь делаем нужное количетво задач
			выбЗапрос = рзЗапрос.Выбрать();
			Пока выбЗапрос.Следующий() Цикл
				здчЗадача = СоздатьЗадачу(бпПроцесс.Ссылка, ТочкаМаршрута, выбЗапрос.Исполнитель);
				здчФормируемые.Добавить(здчЗадача);
			КонецЦикла;
		КонецЕсли;
	Иначе
		// делаем одну задачу - точка не групповая
		здчЗадача = СоздатьЗадачу(бпПроцесс.Ссылка, ТочкаМаршрута);
		здчФормируемые.Добавить(здчЗадача);
	КонецЕсли;
	Возврат Истина;
КонецФункции // СоздатьСписокЗадач()

// Функция предназначена для получения роли из настройки бизнес-процессов для выбранной точки маршрута
// Параметры:
//	бпПроцесс - для какого бизнес-процесса создается задача
//	ТочкаМаршрута - для какой точки маршрута создается задача
// Возвращаемое значение:
//	Роль для выбранной точки маршрута
Функция ПолучитьРолиДляТочки(бпПроцесс, ТочкаМаршрута) Экспорт
	спрРоль = ТочкаМаршрута.РольИсполнителя;
	спрНастройка = Справочники.НастройкаБизнесПроцессов.НайтиПоКоду(бпПроцесс.Метаданные().Имя,,,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница); //V
	Если спрНастройка <> Неопределено Тогда
		// есть настройка, разбираемся дальше, если мы сюда не попали - все пойдет с настройками из карты маршрута
		НастройкаТочки = спрНастройка.НастройкиТочекМаршрута.Найти(ТочкаМаршрута, "ТочкаМаршрута");
		Если НастройкаТочки <> Неопределено Тогда
			спрРоль = НастройкаТочки.РольИсполнителя; // роль взяли из настройки
		КонецЕсли;
	КонецЕсли;
	Возврат спрРоль;
КонецФункции // ПолучитьРолиДляТочки()

// Функция предназначена для получения списка исполнителей для точки маршрута (с учетом переопределения ролей в настройках)
// Параметры:
//	бпПроцесс - для какого бизнес-процесса создается задача
//	ТочкаМаршрута - для какой точки маршрута создается задача
// Возвращаемое значение:
// Результат запроса, в котором есть только исполнители
Функция ПолучитьИсполнителейДляТочкиМаршрута(бпПроцесс, ТочкаМаршрута) Экспорт
	спрРоль = ПолучитьРолиДляТочки(бпПроцесс.Ссылка, ТочкаМаршрута);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Адресация.Исполнитель как Исполнитель
	|ИЗ
	|	РегистрСведений.Адресация КАК Адресация
	|
	|ГДЕ
	|	Адресация.РольИсполнителя = &РольИсполнителя И
	|	Адресация.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	Запрос.УстановитьПараметр("РольИсполнителя", спрРоль);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);  //V
	Возврат Запрос.Выполнить(); // результат вернем
КонецФункции // ПолучитьИсполнителейДляТочкиМаршрута()

Функция ПолучитьДопРеквизитыНастройкиБизнеснесПроцесса(БизнесПроцессСылка) Экспорт

	Рез = Новый Структура("ВариантСозданияБП, МаксимальноеКоличествоТоваров");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(МАКСИМУМ(ВложенныйЗапрос.ВариантСозданияБП), НЕОПРЕДЕЛЕНО) КАК ВариантСозданияБП,
	               |	ЕСТЬNULL(МАКСИМУМ(ВложенныйЗапрос.МаксимальноеКоличествоТоваров), 0) КАК МаксимальноеКоличествоТоваров
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДопРеквизиты.Значение КАК ВариантСозданияБП,
	               |		0 КАК МаксимальноеКоличествоТоваров
	               |	ИЗ
	               |		Справочник.НастройкаБизнесПроцессов.ДополнительныеРеквизиты КАК ДопРеквизиты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкаБизнесПроцессов КАК НастройкаБизнесПроцессов
	               |			ПО ДопРеквизиты.Ссылка = НастройкаБизнесПроцессов.Ссылка
	               |	ГДЕ
	               |		ДопРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыБП.ВариантСозданияБП)
	               |		И НастройкаБизнесПроцессов.Владелец = &СтруктурнаяЕдиница
	               |		И НастройкаБизнесПроцессов.Код = &БизнесПроцессИмя
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		NULL,
	               |		ДопРеквизиты.Значение
	               |	ИЗ
	               |		Справочник.НастройкаБизнесПроцессов.ДополнительныеРеквизиты КАК ДопРеквизиты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкаБизнесПроцессов КАК НастройкаБизнесПроцессов
	               |			ПО ДопРеквизиты.Ссылка = НастройкаБизнесПроцессов.Ссылка
	               |	ГДЕ
	               |		ДопРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыБП.МаксимальноеКоличествоТоваров)
	               |		И НастройкаБизнесПроцессов.Владелец = &СтруктурнаяЕдиница
	               |		И НастройкаБизнесПроцессов.Код = &БизнесПроцессИмя) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("БизнесПроцессИмя", БизнесПроцессСылка.Метаданные().Имя);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	//ЗаполнитьЗначенияСвойств(Рез, Выборка);
	Рез.ВариантСозданияБП = Выборка.ВариантСозданияБП;
	Рез.МаксимальноеКоличествоТоваров = Выборка.МаксимальноеКоличествоТоваров;
	
	Возврат Рез;
КонецФункции

Функция ПолучитьНастройкиТочкиМаршрута(БизнесПроцессСылка, ТочкаМаршрута, СтруктурнаяЕдиница) Экспорт

	Рез = Новый Структура;
	Рез.Вставить("Групповая", Ложь);
	Рез.Вставить("РольИсполнителя", );
	Рез.Вставить("Исполнитель", );
	Рез.Вставить("Выполнять", Истина);
	Рез.Вставить("ОповещатьПоEMail", Ложь);
	Рез.Вставить("ОповещатьПоSMS", Ложь);
	Рез.Вставить("ЗапасНаОповещение", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкаБизнесПроцессовНастройкиТочекМаршрута.Групповая,
	               |	НастройкаБизнесПроцессовНастройкиТочекМаршрута.РольИсполнителя,
	               |	НастройкаБизнесПроцессовНастройкиТочекМаршрута.Исполнитель,
	               |	НастройкаБизнесПроцессовНастройкиТочекМаршрута.Выполнять,
	               |	НастройкаБизнесПроцессовНастройкиТочекМаршрута.ОповещатьПоEmail,
	               |	НастройкаБизнесПроцессовНастройкиТочекМаршрута.ОповещатьПоSMS,
	               |	НастройкаБизнесПроцессовНастройкиТочекМаршрута.ЗапасНаОповещение
	               |ИЗ
	               |	Справочник.НастройкаБизнесПроцессов.НастройкиТочекМаршрута КАК НастройкаБизнесПроцессовНастройкиТочекМаршрута
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкаБизнесПроцессов КАК НастройкаБизнесПроцессов
	               |		ПО НастройкаБизнесПроцессовНастройкиТочекМаршрута.Ссылка = НастройкаБизнесПроцессов.Ссылка
	               |ГДЕ
	               |	НастройкаБизнесПроцессовНастройкиТочекМаршрута.ТочкаМаршрута = &ТочкаМаршрута
	               |	И НастройкаБизнесПроцессов.Владелец = &СтруктурнаяЕдиница
	               |	И НастройкаБизнесПроцессов.Код = &БизнесПроцессИмя";
	
	Запрос.УстановитьПараметр("БизнесПроцессИмя", БизнесПроцессСылка.Метаданные().Имя);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Рез, Выборка);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Процедура предназначена для оповещения владельцев бизнес-процесса о том, что он завершен
// Параметры:
//	бпПроцесс - ссылка на экземпляр бизнес-процесса
//	флСтатусЗавершения - Истина: бизнес-процесс завершен
//			Ложь: бизнес-процесс прерван (через Менеджер задач)
Процедура ОповеститьВладельцев(бпПроцесс, флСтатусЗавершения = Истина) Экспорт
	Если Метаданные.БизнесПроцессы.Содержит(бпПроцесс.Метаданные()) Тогда
		спрНастройка = Справочники.НастройкаБизнесПроцессов.НайтиПоКоду(бпПроцесс.Метаданные().Имя,,,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);  //V
		Для каждого Владелец из спрНастройка.Владельцы Цикл
			Если не Владелец.Оповещать Тогда
				Продолжить; // этого владельца оповещать не надо
			КонецЕсли;
			здчЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			// общие параметры
			здчЗадача.ЗаполнитьПоУмолчанию();
			здчЗадача.БизнесПроцесс = Неопределено;
			здчЗадача.ТочкаМаршрута = Неопределено;
			здчЗадача.Наименование = ?(флСтатусЗавершения, "ЗАВЕРШЕН экземпляр бизнес-процесса", "ПРЕРВАН экземпляр бизнес-процесса");
			здчЗадача.Описание = "Бизнес-процесс: "+бпПроцесс.Метаданные().Синоним+", номер "+бпПроцесс.Номер+", дата создания "+бпПроцесс.Дата+"."+?(флСтатусЗавершения, "", "Прервавщий сотрудник: "+ПараметрыСеанса.ТекущийСотрудник);
			// параметры адресации
			здчЗадача.РольИсполнителя = Неопределено; // нет роли, указана конкретная фамилия
			здчЗадача.Исполнитель = Владелец.Владелец; // владелец бизнес-процесса и здесь переадресация не работает!
			// дополнительные параметры
			здчЗадача.Важность = -1; // низкая важность
			здчЗадача.РазрешитьИнтерактивноеВыполнение = Истина; // по умолчанию - можно выполнять руками
			здчЗадача.Записать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ОповеститьВладельцев()

// Функция предназначена для получения массива, который представляет собой список задач по
// выбранному объекту бизнес-процесса
// Параметры:
//	бпОбъект - тот бизнес-процесс, по которому получаем список задач
// Возвращаемое значение:
//	Массив с задачами, если задач нет - пустой массив
Функция ПолучитьСписокЗадач(бпОбъект) Экспорт
	мсвЗадачи = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задача.Ссылка как Задача
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК Задача
	|ГДЕ
	|	Задача.БизнесПроцесс = &БизнесПроцесс";
	Запрос.УстановитьПараметр("БизнесПроцесс", бпОбъект);
	тз = Запрос.Выполнить().Выгрузить();
	мсвЗадачи = тз.ВыгрузитьКолонку("Задача");
	Возврат мсвЗадачи;
КонецФункции // ПолучитьСписокЗадач()




Процедура ВыполнитьЗадачу(ЗадачаСсылка) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗадачаСсылка);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		ЗадачаОбъект.Прочитать();
		Если ЗначениеЗаполнено(ЗадачаОбъект.БизнесПроцесс) Тогда
			ЗадачаОбъект.Выполнена = Ложь;
			Если ЗадачаОбъект.ПроверитьВыполнение() Тогда
				ЗадачаОбъект.ВыполнитьЗадачу();
			КонецЕсли;
		Иначе
			ЗадачаОбъект.ВыполнитьЗадачу();
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПеренаправитьЗадачи(Знач МассивЗадач, Знач ИнфоОПеренаправлении, Знач ТолькоПроверка = Ложь,
	МассивПеренаправленныхЗадач = Неопределено) Экспорт
	
	// Перенаправление задач доступно всем, кто имеет права на их изменение.
	Если ПравоДоступа("Изменение", Метаданные.Задачи.ЗадачаИсполнителя) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Результат = Истина;
	Для Каждого Задача Из МассивЗадач Цикл
		
		ЗадачаВыполнена = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Задача.Ссылка, "Выполнена");
		Если ЗадачаВыполнена Тогда
			Результат = Ложь;
			Если ТолькоПроверка Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;	
		
		Если ТолькоПроверка Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(МассивПеренаправленныхЗадач) Тогда
			МассивПеренаправленныхЗадач = Новый Массив();
		КонецЕсли;
		
		ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ИнфоОПеренаправлении, 
		"Исполнитель,РольИсполнителя");
		ЗадачаОбъект.Комментарий = ИнфоОПеренаправлении.Комментарий; 
		ЗадачаОбъект.Записать();
		МассивПеренаправленныхЗадач.Добавить(ЗадачаОбъект.Ссылка);
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Получить структуру с описанием формы выполнения задачи.
//
// Параметры
//  ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 В ключе 
//
Функция ПолучитьФормуВыполненияЗадачи(Знач ЗадачаСсылка) Экспорт
	
	Если ТипЗнч(ЗадачаСсылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		  НСтр("ru = 'Неправильный тип параметра ЗадачаСсылка (передан: %1; ожидается: %2)'"),
		  ТипЗнч(ЗадачаСсылка), "ЗадачаСсылка.ЗадачаИсполнителя");
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаСсылка, "БизнесПроцесс,ТочкаМаршрута");
	Если Реквизиты.БизнесПроцесс = Неопределено ИЛИ Реквизиты.БизнесПроцесс.Пустая() Тогда
		Возврат Новый Структура();
	КонецЕсли;
	
	ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(Реквизиты.БизнесПроцесс));
	ПараметрыФормы = БизнесПроцессы[ТипБизнесПроцесса.Имя].ФормаВыполненияЗадачи(ЗадачаСсылка,
		Реквизиты.ТочкаМаршрута);
	Возврат ПараметрыФормы;
	
КонецФункции

// Вызывается при создании формы списка задач на сервере.
//
// Параметры
//  УсловноеОформление - УсловноеОформление - условное оформление списка задач
//
Процедура УстановитьОформлениеЗадач(Знач УсловноеОформление) Экспорт

	// установка оформления для просроченных задач
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = НачалоДня(ТекущаяДата());
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  WebЦвета.Красный; 
	ЭлементЦветаОформления.Использование = Истина;
КонецПроцедуры

Процедура УстановитьПометкуУдаленияЗадач(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда 
        Возврат;  
	КонецЕсли; 
	Если Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления Тогда
		НачатьТранзакцию();
		Попытка
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Задачи.Ссылка КАК Ссылка 
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК Задачи
				|ГДЕ
				|	Задачи.БизнесПроцесс = &БизнесПроцесс");
			Запрос.УстановитьПараметр("БизнесПроцесс", Источник.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ЗадачаОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
			КонецЦикла;	
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), УровеньЖурналаРегистрации.Ошибка, 
				, Источник.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			//ВызватьИсключение;
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьВСписокБизнесПроцессов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда 
        Возврат;  
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.СписокБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Значение = Источник.Ссылка;
	НаборЗаписей.Отбор.БизнесПроцесс.Использование = Истина;
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, Источник, 
		"Номер,Дата,Завершен,Стартован,ПометкаУдаления");
	ПОпытка
		Запись.Наименование = Источник.Метаданные().СИноним;
	Исключение
	конецпопытки;
		Запись.БизнесПроцесс =  Источник.Ссылка;
	
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ОтправитьУведомлениеОНовойЗадаче(Задача)  Экспорт
	Исполнитель = Задача.Исполнитель;
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		ПочтовыйАдресПолучателя = ПолучитьАдресЭлектроннойПочты(Исполнитель);
		Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о новых задачах'"), 
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'"), Строка(Исполнитель)));
			Возврат;
		КонецЕсли;
	Иначе
		Роль = Задача.РольИсполнителя;
		МассивИсполнителей = НайтиИсполнителейПоРоли(Роль);
		МассивАдресов = Новый Массив;
		Для Каждого Исполнитель Из МассивИсполнителей Цикл
			Адрес = ПолучитьАдресЭлектроннойПочты(Исполнитель);
			Если НЕ ПустаяСтрока(Адрес) Тогда
				МассивАдресов.Добавить(Адрес);
			КонецЕсли;	
		КонецЦикла;	
		Если МассивАдресов.Количество() = 0 Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о новых задачах'"), 
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Уведомление не отправлено, так как не указаны почтовые адреса у пользователей роли %1.'"), Строка(Роль)));
			Возврат;
		КонецЕсли;
		ПочтовыйАдресПолучателя = "";
		Для Каждого Адрес Из МассивАдресов Цикл
			ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя+"; "+Адрес;
		КонецЦикла;	
	КонецЕсли;	
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		  НСтр("ru = 'Вам направлена задача - %1'"), Задача.наименование));
	
	ТекстПисьма = "";
	
	ТекстПисьма = ТекстПисьма + СформироватьПредставлениеЗадачи(Задача);
	                        ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
	
	Попытка 
		ЭлектроннаяПочта.ОтправитьСообщение(
			ЭлектроннаяПочта.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о новой задаче'"), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление успешно отправлено на адрес %1.'"), ПочтовыйАдресПолучателя));
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о новой задаче'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			   НСтр("ru = 'Ошибка при отправке уведомления о новых задачах: %1'"), 
			   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

Функция НайтиИсполнителейПоРоли(РольИсполнителя)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Адресация.Исполнитель
		|ИЗ
		|	РегистрСведений.Адресация КАК Адресация
		|ГДЕ
		|	Адресация.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|	И Адресация.РольИсполнителя = &РольИсполнителя";

	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);  //V

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	Возврат Результат;
КонецФункции

Функция СформироватьПредставлениеЗадачи(ЗадачаСтруктура)
	
	ШаблонСтроки = 
		НСтр("ru = '%1") + Символы.ПС;
	Если ЗначениеЗаполнено(Задачаструктура.Исполнитель) Тогда
		ШаблонСтроки = ШаблонСтроки + НСтр("ru = 'Исполнитель: %2'") + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаСтруктура.РольИсполнителя) Тогда
		ШаблонСтроки = ШаблонСтроки + НСтр("ru = 'Роль: %3'") + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаСтруктура.Автор) Тогда
		ШаблонСтроки = ШаблонСтроки + НСтр("ru = 'Автор: %4'") + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаСтруктура.БизнесПроцесс) Тогда
	
		стрОписание = "Бизнес-процесс """+ОбщегоНазначенияСервер.ПолучитьСинонимМетаданных(ЗадачаСтруктура.БизнесПроцесс)+""", "+
						"задача """+ЗадачаСтруктура.Наименование+""" от "+ЗадачаСтруктура.Дата+
						?(ПустаяСтрока(ЗадачаСтруктура.Описание) , "", Символы.ПС+"описание: "+ЗадачаСтруктура.Описание);
		ШаблонСтроки = ШаблонСтроки + Символы.ПС + НСтр("ru = '%5'") + Символы.ПС;
	Иначе
		стрОписание = "";
		Если ЗначениеЗаполнено(ЗадачаСтруктура.Описание) Тогда
			стрОписание = ЗадачаСтруктура.Описание;
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + НСтр("ru = '%5'") + Символы.ПС;
		КонецЕсли;
	КонецЕсли;	
	ШаблонСтроки = ШаблонСтроки + Символы.ПС;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		ЗадачаСтруктура.Ссылка, 
		 ЗадачаСтруктура.Исполнитель,
		ЗадачаСтруктура.РольИсполнителя, ЗадачаСтруктура.Автор,
		стрОписание);
	
КонецФункции

Функция ПометитьНаУдалениеБизнесПроцессы(ВыделенныеСтроки) Экспорт
	
	мОбработаныУспешно = Новый Массив;
	мОбработаныСОшибками = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
		БизнесПроцессСсылка = СтрокаТаблицы.БизнесПроцесс;
		Если БизнесПроцессСсылка = Неопределено ИЛИ БизнесПроцессСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		БизнесПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		Попытка
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НЕ БизнесПроцессОбъект.ПометкаУдаления);
			мОбработаныУспешно.Добавить(БизнесПроцессСсылка);
		Исключение
			мОбработаныСОшибками.Добавить(БизнесПроцессСсылка);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), УровеньЖурналаРегистрации.Ошибка, 
				, БизнесПроцессСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	Возврат Новый Структура("ОбработаныУспешно, ОбработаныСОшибками", мОбработаныУспешно, мОбработаныСОшибками);
КонецФункции

// Возвращает адрес электронной почты пользователя ПользовательСсылка.
//
// Параметры
//  ПользовательСсылка  – СправочникСсылка.Пользователи
//
// Возвращаемое значение:
//   Строка   – адрес электронной почты.
//
Функция ПолучитьАдресЭлектроннойПочты(ПользовательСсылка) Экспорт

	Результат = УправлениеКонтактнойИнформациейСервер.ПолучитьКонтактнуюИнформацияОбъекта(ПользовательСсылка, 
		Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Возврат Результат;
	
КонецФункции 

// Возвращает дату завершения указанного бизнес-процесса,
// полученную как максимальная дата исполнения задач бизнес-процесса.
//
// Параметры
//  БизнесПроцессСсылка  - бизнес-процесс
//
// Возвращаемое значение:
//   Дата 
//
Функция ДатаЗавершенияБизнесПроцесса(БизнесПроцессСсылка) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗадачаИсполнителя.ДатаВыполненияФакт) КАК МаксДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.Выполнена = ИСТИНА";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.МаксДатаИсполнения;
	
КонецФункции	

Процедура ПередУдалениемБизнесПроцесса(Источник, Отказ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК Задача
	|ГДЕ
	|	Задача.БизнесПроцесс = &БизнесПроцесс";
	Запрос.УстановитьПараметр("БизнесПроцесс", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	выбРезультат = Результат.Выбрать();
	Пока выбРезультат.Следующий() Цикл
		выбРезультат.Ссылка.ПолучитьОбъект().Удалить();
	КонецЦикла;
КонецПроцедуры	

Функция ПоучитьБППоГрафикуИнвентаризации(График) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроведениеИнвентаризации.Ссылка КАК БП
		|ИЗ
		|	БизнесПроцесс.ПроведениеИнвентаризации КАК ПроведениеИнвентаризации
		|ГДЕ
		|	ПроведениеИнвентаризации.Основание = &Основание";
	Запрос.УстановитьПараметр("Основание", График);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.БП;
	
КонецФункции	

Функция ЗавершитьБизнесПроцессНаСервере(бпПроцесс, ТекстОшибки = "") Экспорт
	
	флОткат = Ложь;
	Попытка
		НачатьТранзакцию();
		Объект = бпПроцесс.ПолучитьОбъект();
		Объект.Завершен = Истина;
		Объект.Записать();
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Задача.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задача
		|ГДЕ
		|	Задача.БизнесПроцесс = &БизнесПроцесс";
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
		выбЗадачи = Запрос.Выполнить().Выбрать();
		Пока выбЗадачи.Следующий() Цикл
			здчЗадача = выбЗадачи.Ссылка.ПолучитьОбъект();
			здчЗадача.Выполнена = Истина;
			здчЗадача.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОписаниеОшибки();
		флОткат = Истина;
	КонецПопытки;
	
	Возврат Не флОткат;
	
КонецФункции
