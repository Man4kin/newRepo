
Функция УниверсальноеСообщение()
	
	Результат = Новый ФиксированнаяСтруктура(
		"Тип, Имя",
		"RS_ПриложениеПоАлкоголю",
		"DocumentObject_ПриложениеПоАлкоголю_ЦВД"
	);
	
	// !!! Это нужно разкоментировать, когда зададут новое имя для сообщения !!!
	//Результат = Новый ФиксированнаяСтруктура(
	//	"Тип, Имя",
	//	"RS_UniversalMessage",
	//	"DocumentObject_UniversalMessage"
	//);
	
	Возврат Результат;
	
КонецФункции

Функция КодЛокации(Знач Данные)
	
	Если ТипЗнч(Данные) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Данные = Данные.Код;
	КонецЕсли;
	
	Возврат Формат(Данные, "ЧГ=");
	
КонецФункции

Функция ОписаниеПакета(Знач Объект)
	
	// !!!! efim
	#Если _ Тогда
		Объект = Документы.ПриложениеПоАлкоголю.СоздатьДокумент();
	#КонецЕсли
	// !!!!
	
	//ПодсистемаОбмена = "ЦВД";
	//
	//ТипОбъекта = ТипЗнч(Объект);
	//ТипОбъектаСтрокой = СериализаторXDTO.XMLТип(ТипОбъекта).ИмяТипа;
	//
	//ИмяПакета = СтрЗаменить(ТипОбъектаСтрокой, ".", "_") + "_" + ПодсистемаОбмена;
	//ТипПакета = "RS_" + Объект.Метаданные().Имя;
	
	Направление = Неопределено;
	Если НЕ Объект.ДополнительныеСвойства.Свойство("КодЛокации", Направление) Тогда
		// Если не центр, то отрпавляем в центр, если центр, то отправляем в структурную единицу документа
		Направление = ?(ПараметрыСеанса.ЭтоЦентр, Объект.СтруктурнаяЕдиница, "center");
	КонецЕсли;
	
	Описание = Новый Структура(
		"КодЛокации, Имя, Тип, Номер, Дата",
		КодЛокации(Направление)
	);
	
	ЗаполнитьЗначенияСвойств(Описание, УниверсальноеСообщение());
	ЗаполнитьЗначенияСвойств(Описание, Объект, "Номер, Дата");
	
	Если НЕ ЗначениеЗаполнено(Описание.Дата) Тогда
		Описание.Дата = ТекущаяДата();
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция ОтправитьПакет(Знач Пакет, Знач Объект, Знач Прокси, Ошибка) Экспорт 
	
	Семейство = "CID";
	
	Описание = ОписаниеПакета(Объект);
	Сообщение = ОбменДаннымиRIBСервер.УпаковатьВСообщение(
		Описание.Дата,
		Описание.Номер,
		Пакет,
		Описание.Имя,
		Семейство,
		Описание.Тип,
		Описание.КодЛокации
	);
	Результат = ОбменДаннымиRIBСервер.ОтправитьСообщение(Сообщение, Прокси);
	
	Ошибка = Сообщение;
	Возврат Результат;
	
КонецФункции


Функция ОтправитьОбъект(Узел, Знач Объект, Прокси, Ошибка) Экспорт 
	
	Обмен = Izh_ОбменДаннымиRIBПовтИсп.ОбработкаОбменаДанными();
	// !!!! efim
	#Если _ Тогда
		Обмен = Обработки.Izh_СериализацияОбъектовОбмена.Создать();
	#КонецЕсли
	// !!!!
	
	//Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
	//	Объект = Объект.ПолучитьОбъект();
	//КонецЕсли;
	
	ДляВыгрузки = Неопределено;
	
	ВыгрузкаВозвратнойНакладной(Объект, ДляВыгрузки);
	Izh_УчетАлкогольнойПродукции.ВыгрузкаВRIB(Объект, ДляВыгрузки);
	
	Ушло = Ложь;
	Выгружать = ЗначениеЗаполнено(ДляВыгрузки);
	
	Если Выгружать Тогда
		
		Для каждого Объект Из ДляВыгрузки Цикл
			
			Пакет = Обмен.ВыполнитьВыгрузкуОбъекта(Объект);
			
			ТекстОшибки = "";
			Ушло = ОтправитьПакет(Пакет, Объект, Прокси, ТекстОшибки);
			Ошибка = Ошибка + ТекстОшибки;
			
			Если НЕ Ушло Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если Ушло Тогда
		Izh_ОбменДанными.ПометитьКакОтправленный(Объект);
	КонецЕсли;
	
	Если Ушло ИЛИ НЕ Выгружать Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Объект);
	КонецЕсли;
	
	Возврат Ушло;
	
КонецФункции

Функция ПринятьОбъект(ОбъектXDTO, ТипПакета, Пакет) Экспорт 
	
	Обмен = Izh_ОбменДаннымиЦВДПовтИсп.ОбработкаОбменаДанными();
	// !!!! efim
	#Если _ Тогда
		Обмен = Обработки.Izh_СериализацияОбъектовОбмена.Создать();
	#КонецЕсли
	// !!!!
	
	Если ТипПакета <> УниверсальноеСообщение().Тип Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Результат = Обмен.ВыполнитьЗагрузкуОбъекта(ОбъектXDTO, Пакет);
	Исключение
		Пакет = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


Процедура ВыгружатьОбъект(Знач Объект, ДляВыгрузки) Экспорт 
	
	Если ДляВыгрузки = Неопределено Тогда
		ДляВыгрузки = Новый Массив();
	КонецЕсли;
	
	Если ДляВыгрузки.Найти(Объект) = Неопределено Тогда
		ДляВыгрузки.Добавить(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура НеВыгружатьОбъект(Знач Объект, ДляВыгрузки) Экспорт 
	
	Если ДляВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДляВыгрузки.Найти(Объект);
	Если Индекс <> Неопределено Тогда
		ДляВыгрузки.Удалить(Индекс);
	КонецЕсли;
	
КонецПроцедуры


Процедура ВыгрузкаВозвратнойНакладной(Объект, ДляВыгрузки)
	
	// !!!! efim
	#Если _ Тогда
		Объект = Документы.РасходнаяНакладная.СоздатьДокумент();
	#КонецЕсли
	// !!!!
	
	Если НЕ (
			ТипЗнч(Объект) = Тип("ДокументОбъект.РасходнаяНакладная")
			И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
			И Объект.Возврат
		) Тогда
		Возврат;
	КонецЕсли;
	
	ВозвратнаяНакладная = Документы.ВозвратнаяНакладнаяОтПокупателя.СоздатьДокумент();
	ВозвратнаяНакладная.Заполнить(Объект.Ссылка);
	
	вн = ВозвратнаяНакладная;
	вн.Дата = Объект.Дата;
	вн.Контрагент = Объект.Фирма;
	вн.СтруктурнаяЕдиница = Объект.Контрагент;
	
	Если ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		ДокументОснование = Документы.РасходнаяНакладная.ПолучитьСсылку(
			Объект.ДокОснование.УникальныйИдентификатор()
		);
		
		ВозвратнаяНакладная.Фирма = Объект.ДокОснование.Контрагент;
		
	Иначе
	
		ДокументОснование = Неопределено;
		
		// подбор фирмы
		ПравилаПерепродажи = РегистрыСведений.Перепродажа.ПравилаПерепродажи(
			Объект.Состав.ВыгрузитьКолонку("Номенклатура"),
			Объект.СтруктурнаяЕдиница,
			Неопределено,
			Объект.Дата,
			Новый Структура("ФирмаПолучатель", Объект.Фирма)
		);
		Если ПравилаПерепродажи.Количество() > 0 Тогда
			
			ВозвратнаяНакладная.Фирма = ПравилаПерепродажи[0].ФирмаОтправитель;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ВозвратнаяНакладная.ДокОснование = ДокументОснование;
	
	//dps+ 15.08.13 133729
	тзЦенаУпр = ПолучитьЦенуУпр(ВозвратнаяНакладная);  
	Для каждого СтрокаТЧ Из ВозвратнаяНакладная.Состав Цикл
		стрЦенаУпр = тзЦенаУпр.Найти(СтрокаТЧ.Номенклатура,"Номенклатура");
		Если стрЦенаУпр <> Неопределено Тогда
			СтрокаТЧ.СебестоимостьЦенаУпр = стрЦенаУпр.ЦенаУпр;
			СтрокаТЧ.СебестоимостьСуммаУпр = стрЦенаУпр.ЦенаУпр*СтрокаТЧ.Количество;
			СтрокаТЧ.СебестоимостьНДСУпр = ?(СтрокаТЧ.СтавкаНДС.Ставка = 0,0,Окр((стрЦенаУпр.ЦенаУпр*СтрокаТЧ.Количество/СтрокаТЧ.СтавкаНДС.Ставка)*100,2));
		КонецЕсли;
		СтрокаТЧ.ДокОснование = ДокументОснование;
	КонецЦикла;
	//dps- 15.08.13 133729
	
	ВозвратнаяНакладная.УстановитьСсылкуНового(
		Документы.ВозвратнаяНакладнаяОтПокупателя.ПолучитьСсылку(
			Объект.Ссылка.УникальныйИдентификатор()
		)
	);
	
	ВозвратнаяНакладная.ДополнительныеСвойства.Вставить("КодЛокации", ВозвратнаяНакладная.СтруктурнаяЕдиница);
	
	ВыгружатьОбъект(ВозвратнаяНакладная, ДляВыгрузки);
	
КонецПроцедуры

//dps+ 15.08.13 133729
//
// Параметры:
//  Объект	 - 	 ДокументСсылка.ВозвратнаяНакладнаяОтПокупателя, ну или другой какой документ  
// Возвращаемое значение:
// 	ТЗ  - содержит колонки Номенклатура, ЦенаУпр
Функция ПолучитьЦенуУпр(Объект)
	#Если _ Тогда
		Объект = Документы.ВозвратнаяНакладнаяОтПокупателя.СоздатьДокумент();
	#КонецЕсли
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиНоменклатурыОстатки.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ОстаткиНоменклатурыОстатки.КоличествоОстаток = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ ОстаткиНоменклатурыОстатки.СуммаОстаток / ОстаткиНоменклатурыОстатки.КоличествоОстаток
	               |	КОНЕЦ КАК ЦенаУпр
	               |ИЗ
	               |	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	               |			&Дата,
	               |			Номенклатура В (&Номенклатура)) КАК ОстаткиНоменклатурыОстатки";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Номенклатура", Объект.Состав.ВыгрузитьКолонку("Номенклатура"));
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
//dps- 15.08.13 133729
