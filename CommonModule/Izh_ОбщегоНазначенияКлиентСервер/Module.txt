
//{ СИТЕК БрыляковЕЮ 2014-09-30  
Функция ПоМодулю(Знач Значение) Экспорт 
	
	Возврат ?(Значение < 0, -Значение, Значение);
	
КонецФункции

// Возвращает объект ОписаниеТипов, построенный по строке текста
// 
//    Параметры:
//        Текст - строка, описывающая тип. Состоит из обязательного имени типа и необязательных квалификаторов, 
//                разделенных запятыми.
//
//    Для типа "Строка" распознаются необязательные квалификаторы:
//        - максимальная длина (число, по умолчанию 0 - без ограничений)
//        - допустимая длина (строка "Переменная" или "Фиксированная", по умолчанию - переменная)
//
//    Для типа "Число" распознаются необязательные квалификаторы:
//        - число разрядов (число, по умолчанию 0 - без ограничений)
//        - число разрядов дробной части (число, по умолчанию 0)
//        - допустимый знак (строка "Любой" или "Неотрицательный", по умолчанию - любой)
//
//    Для типа "Дата" распознается необязательный квалификатор части даты (строка "Время" или "Дата" или "ДатаВремя",
//    по умолчанию "ДатаВремя")
//
//    Для типа "ДвоичныеДанные" распознаются необязательные квалификаторы:
//        - максимальная длина (число, по умолчанию 0 - без ограничений)
//        - допустимая длина (строка "Переменная" или "Фиксированная", по умолчанию - переменная)
//
//    Для остальных типов обрабатывается только имя типа
//
Функция ОписаниеТипаИзСтроки(Текст) Экспорт
	ЧастиОписания = СтрЗаменить(СтрЗаменить(Текст, Символы.ПС, ""), ",", Символы.ПС);
	КоличествоЧастей = СтрЧислоСтрок(ЧастиОписания);
	
	ИмяИсходногоТипа = СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 1));
	Если КоличествоЧастей=1 Тогда
		Возврат Новый ОписаниеТипов(ИмяИсходногоТипа);
	КонецЕсли;
	
	ИсходныйТип = Тип(ИмяИсходногоТипа);
	Если ИсходныйТип=Тип("Строка") Или ИсходныйТип=Тип("ДвоичныеДанные") Тогда
		МаксимальнаяДлинаСтроки = "0" + СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 2));
		ДопустимаяДлинаСтроки   = СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 3));
		Если ПустаяСтрока(ДопустимаяДлинаСтроки) Тогда
			ДопустимаяДлинаСтроки = "Переменная";
		КонецЕсли;
		Возврат Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(
			Число(МаксимальнаяДлинаСтроки), ДопустимаяДлина[ДопустимаяДлинаСтроки]
		));
		
	ИначеЕсли ИсходныйТип=Тип("Число") Тогда
		ДлинаЧисла          = "0" + СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 2));
		ДлинаДробнойЧасти   = "0" + СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 3));
		ДопустимыйЗнакЧисла = СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 4));
		Если ПустаяСтрока(ДопустимыйЗнакЧисла) Тогда
			ДопустимыйЗнакЧисла = "Любой";
		КонецЕсли;
		Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(
			Число(ДлинаЧисла), Число(ДлинаДробнойЧасти), ДопустимыйЗнак[ДопустимыйЗнакЧисла]
		));
			
	ИначеЕсли ИсходныйТип=Тип("Дата") Тогда
		СоставДаты = СокрЛП(СтрПолучитьСтроку(ЧастиОписания, 2));
		Если ПустаяСтрока(СоставДаты) Тогда
			СоставДаты = "ДатаВремя";
		КонецЕсли;
		Возврат Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты( 
			ЧастиДаты[СоставДаты]
		));
		
	КонецЕсли;

	Возврат Новый ОписаниеТипов(ИмяИсходногоТипа);
КонецФункции

Функция ДобавитьТип(Знач Тип1, Знач Тип2) Экспорт 
	
	Если Тип2 = ОписаниеТипаИзСтроки("Неопределено") Тогда
		
		НовыйТип = Тип2;
		
	Иначе
		
		Квалификаторы = Новый Массив();
		
		Если Тип2.СодержитТип(Тип("Число")) Тогда
			Если Тип1.СодержитТип(Тип("Число")) Тогда
				Кв1 = Тип1.КвалификаторыЧисла;
				Кв2 = Тип2.КвалификаторыЧисла;
				КвЧисло = Новый КвалификаторыЧисла(
					?(Кв1.Разрядность = 0 ИЛИ Кв1.Разрядность > Кв2.Разрядность И Кв2.Разрядность <> 0, Кв1.Разрядность, Кв2.Разрядность),
					?(Кв1.Разрядность = 0 ИЛИ Кв1.РазрядностьДробнойЧасти > Кв2.РазрядностьДробнойЧасти, Кв1.РазрядностьДробнойЧасти, Кв2.РазрядностьДробнойЧасти),
					?(Кв2.ДопустимыйЗнак = ДопустимыйЗнак.Любой, Кв2.ДопустимыйЗнак, Кв1.ДопустимыйЗнак)
				);
			Иначе
				КвЧисло = Тип2.КвалификаторыЧисла;
			КонецЕсли;
			Квалификаторы.Добавить(КвЧисло);
		КонецЕсли;
		
		КвСписок = Новый Структура();
		Если Тип2.СодержитТип(Тип("Строка")) Тогда
			Если Тип1.СодержитТип(Тип("Строка")) Тогда
				КвСписок.Вставить("КвалификаторыСтроки");
			Иначе
				Квалификаторы.Добавить(Тип2.КвалификаторыСтроки);
			КонецЕсли;
		КонецЕсли;
		Если Тип2.СодержитТип(Тип("ДвоичныеДанные")) Тогда
			Если Тип1.СодержитТип(Тип("ДвоичныеДанные")) Тогда
				КвСписок.Вставить("КвалификаторыДвоичныхДанных");
			Иначе
				Квалификаторы.Добавить(Тип2.КвалификаторыДвоичныхДанных);
			КонецЕсли;
		КонецЕсли;
		Для каждого КвИмя Из КвСписок Цикл
			Кв1 = Тип1[КвИмя.Ключ];
			Кв2 = Тип2[КвИмя.Ключ];
			Параметры = Новый Массив();
			Параметры.Добавить(?(Кв1.Длина = 0 ИЛИ Кв1.Длина > Кв2.Длина, Кв1.Длина, Кв2.Длина));
			Параметры.Добавить(Кв2.ДопустимаяДлина);
			Квалификаторы.Добавить(Новый(КвИмя.Ключ, Параметры));
		КонецЦикла;
		
		Если Тип2.СодержитТип(Тип("Дата")) Тогда
			Если Тип1.СодержитТип(Тип("Дата")) Тогда
				Кв1 = Тип1.КвалификаторыДаты;
				Кв2 = Тип2.КвалификаторыДаты;
				КвДата = Новый КвалификаторыДаты(Кв2.ЧастиДаты);
			Иначе
				КвДата = Тип2.КвалификаторыДаты;
			КонецЕсли;
			Квалификаторы.Добавить(КвДата);
		КонецЕсли;
		
		НовыйТип = Новый ОписаниеТипов(Тип1, Тип2.Типы());
		Для каждого Квалификатор Из Квалификаторы Цикл
			НовыйТип = Новый ОписаниеТипов(НовыйТип,,, Квалификатор);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйТип;
	
КонецФункции

Функция ЗначенияВМассиве(
	Знач Значение0, Знач Значение1 = Неопределено, Знач Значение2 = Неопределено, Знач Значение3 = Неопределено, 
	Знач Значение4 = Неопределено, Знач Значение5 = Неопределено, Знач Значение6 = Неопределено, 
	Знач Значение7 = Неопределено, 	Знач Значение8 = Неопределено, Знач Значение9 = Неопределено) Экспорт 
	
	Результат = Новый Массив();
	Результат.Добавить(Значение0);
	Результат.Добавить(Значение1);
	Результат.Добавить(Значение2);
	Результат.Добавить(Значение3);
	Результат.Добавить(Значение4);
	Результат.Добавить(Значение5);
	Результат.Добавить(Значение6);
	Результат.Добавить(Значение7);
	Результат.Добавить(Значение8);
	Результат.Добавить(Значение9);
	
	Количество = Результат.Количество();
	Для Сч = 1 По Количество Цикл
		Индекс = Количество - Сч;
		Если Результат[Индекс] = Неопределено Тогда
			Результат.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// СИТЕК БрыляковЕЮ 2014-09-30 }

//++БИТ БВО 2015-10-30
&НаКлиенте
Процедура ОбработкаНачалоВыбораКонтрагента(ДокИсточник, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументИсточник", ДокИсточник);		
		
	Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора", Параметры);
	Форма.ОткрытьМодально();
	
КонецПроцедуры
//--БИТ БВО 2015-10-30