///////////////////////////EDIКлиент///////////////////

Процедура ОбменДаннымиEDIКлиентОтправка(Ссылка) Экспорт
	Результат = Истина;
	ПараметрыПодключения = Ссылка.EDIПровайдер.КаналОтправки;
	Если ПараметрыПодключения.Тип = 1 Тогда //FTP
		Попытка
			Прокси = Константы.НастройкаПроксиСервера.Получить().Получить();
			Соединение = Новый FTPСоединение(ПараметрыПодключения.URL, ПараметрыПодключения.Порт, ПараметрыПодключения.Имя, ПараметрыПодключения.Пароль, Прокси, ПараметрыПодключения.ПасссивныйРежим, ПараметрыПодключения.Таймаут);
			Каталог = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(ПараметрыПодключения.ИмяКаталога,"");
			Соединение.УстановитьТекущийКаталог(Каталог);
		Исключение
			Ошибка = ОписаниеОшибки();
			ВызватьИсключение(Ошибка);
		КонецПопытки;
	Иначе
		Попытка
			Определение = Новый WSОпределения(ПараметрыПодключения.URL,ПараметрыПодключения.Имя,ПараметрыПодключения.Пароль);
			URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
			ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
			ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
			Соединение = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
			Соединение.Пользователь = ПараметрыПодключения.Имя;
			Соединение.Пароль = ПараметрыПодключения.Пароль;
		Исключение
			Ошибка = ОписаниеОшибки();
			ВызватьИсключение(Ошибка);
		КонецПопытки;
	КонецЕсли;	
	
	ВсеОшибки = "";
	Ошибка = "";
	КоличествоПакетов = 0;
	КоличествоОшибок = 0;
	СчетчикОтправки = 0;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1);
	Пока ВыборкаИзменений.Следующий() Цикл
		СчетчикОтправки = ?(СчетчикОтправки=99,1,СчетчикОтправки+1);
		Ошибка = "";
		Объект = ВыборкаИзменений.Получить();
		Объект.Заблокировать();
		ТипОбъекта = ТипЗнч(Объект);
		Ушло = Ложь;
		Если ТипОбъекта = Тип("ДокументОбъект.ПланируемаяПоставка") Тогда
			Ушло = ОтправитьПланируемаяПоставка(Объект,Ссылка.EDIПровайдер,Соединение,ПараметрыПодключения.Тип,Ошибка,СчетчикОтправки);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
			Ушло = ОтправитьПриходнаяНакладная(Объект,Ссылка.EDIПровайдер,Соединение,ПараметрыПодключения.Тип,Ошибка,СчетчикОтправки);
		КонецЕсли;	
		Если Ушло = Истина Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
		КонецЕсли;
		КоличествоПакетов = КоличествоПакетов + 1;
		Если Ошибка <> "" Тогда
			ВсеОшибки = Ошибка;
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецЕсли;	
		Объект.Разблокировать();
	КонецЦикла;
	
	Если ВсеОшибки <> "" Тогда
		Сообшение = "Всего ошибок - "+КоличествоОшибок+" из "+КоличествоПакетов+"
		| последняя ошибка:
		|"+ВсеОшибки;
		ВызватьИсключение(Сообшение);
	КонецЕсли;	
КонецПроцедуры
 
Процедура ОбменДаннымиEDIКлиентПолучение(Ссылка) Экспорт
	Результат = Истина;
	ВсеОшибки = "";
	Ошибка = "";
	КоличествоПакетов = 0;
	КоличествоОшибок = 0;
	ПараметрыПодключения = Ссылка.EDIПровайдер.КаналПриемки;
	Если ПараметрыПодключения.Тип = 1 Тогда //FTP
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтруктурныеЕдиницы.Ссылка
			|ИЗ
			|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
			|ГДЕ
			|	СтруктурныеЕдиницы.Ссылка В ИЕРАРХИИ(&Ссылка)";

		Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

			Попытка
				Прокси = Константы.НастройкаПроксиСервера.Получить().Получить();
				Соединение = Новый FTPСоединение(ПараметрыПодключения.URL, ПараметрыПодключения.Порт, ПараметрыПодключения.Имя, ПараметрыПодключения.Пароль, Прокси, ПараметрыПодключения.ПасссивныйРежим, ПараметрыПодключения.Таймаут);
				Каталог = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(ПараметрыПодключения.ИмяКаталога,ОбменДаннымиEDIСервер.ПолучитьGLN(ВыборкаДетальныеЗаписи.Ссылка,Ссылка.EDIПровайдер));
				Соединение.УстановитьТекущийКаталог(Каталог);
			Исключение
				Ошибка = ОписаниеОшибки();
				ВызватьИсключение(Ошибка);
			КонецПопытки;
			ПутьДляСохранения = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(),Строка(Новый УникальныйИдентификатор));
			СоздатьКаталог(ПутьДляСохранения);
			НайденныеФайлы = Соединение.НайтиФайлы("", "*.xml");
			Для каждого Файл Из НайденныеФайлы Цикл
				Попытка
					Соединение.Получить(Файл.ПолноеИмя, ПутьДляСохранения+"\"+Файл.Имя);
				Исключение
					Ошибка = Ошибка + ОписаниеОшибки();
				КонецПопытки;
			КонецЦикла;
			Тз=Новый ТаблицаЗначений;
			Тз.Колонки.Добавить("Файл");
			Тз.Колонки.Добавить("ФайлПолноеИмя");
			Тз.Колонки.Добавить("ВремяИзменения");
			НайденныеФайлы = НайтиФайлы(ПутьДляСохранения, "*.xml");
			Для каждого Файл Из НайденныеФайлы Цикл
				Строки = Тз.Добавить();
				Строки.Файл           = Файл;
				Строки.ФайлПолноеИмя  = Файл.ПолноеИмя;
				Строки.ВремяИзменения = Файл.ПолучитьВремяИзменения();	
			КонецЦикла;
			Тз.Сортировать("ВремяИзменения Возр");
			Для каждого СтрокаТз Из Тз Цикл
				Если ПараметрыСеанса.Отладка Тогда
					ЗаписьЖурналаРегистрации("EDIКлиент", УровеньЖурналаРегистрации.Информация,,СтрокаТз.ФайлПолноеИмя);
				КонецЕсли;	
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.ОткрытьФайл(СтрокаТз.ФайлПолноеИмя);
				ЧтениеXML.Прочитать();
				ИмяТипа = ЧтениеXML.Имя;
				
				Попытка
					XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
				Исключение
					ЧтениеXML.Закрыть();
					стрОшибка = ОписаниеОшибки();
					Если ПараметрыСеанса.Отладка  Тогда
						ЗаписьЖурналаРегистрации("EDIКлиент", УровеньЖурналаРегистрации.Информация,,СтрокаТз.ФайлПолноеИмя,стрОшибка);
					КонецЕсли;
					Продолжить;
				КонецПопытки;
				НомерДокумента = "";
				Если ВРЕГ(ИмяТипа) = "ORDRSP" Тогда
					Результат = ЗагрузитьORDRSP(XDTO,НомерДокумента);
				ИначеЕсли ВРЕГ(ИмяТипа) = "DESADV" Тогда
					Результат = ЗагрузитьDESADV(XDTO,Ссылка.EDIПровайдер,НомерДокумента);
				ИначеЕсли ВРЕГ(ИмяТипа) = "STATUS" Тогда
					Результат = ЗагрузитьSTATUS(XDTO,НомерДокумента);
				Иначе
					ЧтениеXML.Закрыть();
					ЗаписьЖурналаРегистрации("EDIКлиент", УровеньЖурналаРегистрации.Ошибка,,СтрокаТз.ФайлПолноеИмя,"Тип объекта неопределен: "+ИмяТипа);
					Продолжить;
				КонецЕсли;
				
				ЧтениеXML.Закрыть();
				Если Результат Тогда
					//Если СокрЛП(НомерДокумента) = "" Тогда
						Соединение.Переместить(СтрокаТз.Файл.Имя, СтрокаТз.Файл.Имя+".loaded");
					//Иначе
					//	Соединение.Переместить(СтрокаТз.Файл.Имя, СтрокаТз.Файл.Имя+"."+СокрЛП(НомерДокумента)+".loaded");
					//КонецЕсли;	
					//ЗаписьЖурналаРегистрации("EDIКлиент", УровеньЖурналаРегистрации.Информация,,СтрокаТз.ФайлПолноеИмя,XDTO);
				Иначе
					Если ТипЗнч(XDTO) <> Тип("Строка") Тогда
						XDTO = ИмяТипа;
					КонецЕсли;	
					стрСообщение = "Ошибка при загрузке из файла: "+СтрокаТз.ФайлПолноеИмя+" 
					|   "+XDTO;
					ЗаписьЖурналаРегистрации("EDIКлиент", УровеньЖурналаРегистрации.Ошибка,,СтрокаТз.ФайлПолноеИмя,XDTO);
					Ошибка = Ошибка + стрСообщение;
					
					Соединение.Переместить(СтрокаТз.Файл.Имя, СтрокаТз.Файл.Имя+".error");
				КонецЕсли;
				КоличествоПакетов = КоличествоПакетов + 1;
				Если Ошибка <> "" Тогда
					ВсеОшибки = Ошибка;
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецЕсли;	
			КонецЦикла;
			Попытка
				УдалитьФайлы(ПутьДляСохранения);
			Исключение
			КонецПопытки;	
		КонецЦикла;
	Иначе
		Попытка
			Определение = Новый WSОпределения(ПараметрыПодключения.URL,ПараметрыПодключения.Имя,ПараметрыПодключения.Пароль);
			URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
			ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
			ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
			Соединение = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
			Соединение.Пользователь = ПараметрыПодключения.Имя;
			Соединение.Пароль = ПараметрыПодключения.Пароль;
		Исключение
			Ошибка = ОписаниеОшибки();
			ВызватьИсключение(Ошибка);
		КонецПопытки;
	КонецЕсли;	
	
	
	
	Если ВсеОшибки <> "" Тогда
		Сообшение = "Всего ошибок - "+КоличествоОшибок+" из "+КоличествоПакетов+"
		| последняя ошибка:
		|"+ВсеОшибки;
		ВызватьИсключение(Сообшение);
	КонецЕсли;	
КонецПроцедуры
 
Функция ОтправитьСообщение(Package,Соединение,Имя,Тип,СчетчикОтправки,КодСЕ)
	ДатаТекущая = ТекущаяДата();
	Дата = Формат(ДатаТекущая,"ДФ=yyyyMMdd");
	Час = ДобавитьСлева(Час(ДатаТекущая),2,0);
	Минута = ДобавитьСлева(Минута(ДатаТекущая),2,0);
	Секунда = ДобавитьСлева(Секунда(ДатаТекущая),2,0);

	ФорматДаты = КодСЕ+"_"+Дата+Час+Минута+Секунда+Формат(СчетчикОтправки,"ЧЦ=2; ЧВН=");
	
	ЗаписьXML = Новый ЗаписьXML;
	стрИмяФайла = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), Имя+"_"+ФорматДаты+".xml");
	стрИмяФайлаПриемникаTMP = Имя+"_"+ФорматДаты+".tmp";
	стрИмяФайлаПриемника = Имя+"_"+ФорматДаты+".xml";
	ЗаписьXML.ОткрытьФайл(стрИмяФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,Package,Имя,,,);
	ЗаписьXML.Закрыть();
	
	Текст = новый ТекстовыйДокумент;
	Текст.Прочитать(стрИмяФайла);
	Текст.ЗаменитьСтроку(2,"<"+Имя+">");
	Текст.Записать(стрИмяФайла,КодировкаТекста.UTF8);
	
	Результат = Истина;
	Попытка
		//Соединение.Записать(стрИмяФайла, стрИмяФайлаПриемникаTMP);
		//Соединение.Переместить(стрИмяФайлаПриемникаTMP, стрИмяФайлаПриемника);
		Соединение.Записать(стрИмяФайла, стрИмяФайлаПриемника);
		Package = "";
	Исключение
		Package = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(),"Обмен EDI Клиент");
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции


Функция ДобавитьСлева(Стр,КоличествоСимволов,Символ)
	Строка = Стр;
	Если СтрДлина(Строка)>=КоличествоСимволов Тогда
		Возврат Лев(Строка,КоличествоСимволов);
	КонецЕсли;	
	Пока СтрДлина(Строка) < КоличествоСимволов Цикл
		Строка = Строка(Символ) + Строка(Строка);
	КонецЦикла;	
	Возврат Строка;
КонецФункции	


Функция ОтправитьПланируемаяПоставка(Объект,EDIПровайдер,Соединение,Тип,Ошибка,СчетчикОтправки)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://exite.com.ua/orders").КорневыеСвойства;
	ORDER = КорневыеСвойства.Получить("ORDER").Тип;
	HEAD = КорневыеСвойства.Получить("HEAD").Тип;
	POSITION = КорневыеСвойства.Получить("POSITION").Тип;
	//CONDITION = КорневыеСвойства.Получить("CONDITION").Тип;
	CHARACTERISTIC = КорневыеСвойства.Получить("CHARACTERISTIC").Тип;
	ПакетORDER = ФабрикаXDTO.Создать(ORDER);
	
	ПакетORDER.DOCUMENTNAME = 220;
	ПакетORDER.NUMBER = Объект.Номер;
	ПакетORDER.DATE = Формат(Объект.Дата,"ДФ=yyyy-MM-dd");
	ПакетORDER.DELIVERYDATE = Формат(Объект.ДатаПоставкиОт,"ДФ=yyyy-MM-dd");
	ПакетORDER.DELIVERYTIME = Формат(Объект.ВремяПоставки,"ДФ=ЧЧ:мм; ДП=00:00");
	//ПакетORDER.CAMPAIGNNUMBER = СокрЛП(Объект.ПромоАкция);
	ПакетORDER.CURRENCY = СокрЛП(Объект.Валюта.Наименование);
	ПакетHEAD = ФабрикаXDTO.Создать(HEAD);
	Если ПараметрыСеанса.ИспользоватьПодразделенияПоставщиков Тогда
		SUPPLIER = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.Контрагент.Родитель,EDIПровайдер);
		Если SUPPLIER = Неопределено Тогда
			SUPPLIER = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.Контрагент,EDIПровайдер);
		КонецЕсли;	
	Иначе
		SUPPLIER = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.Контрагент,EDIПровайдер);
	КонецЕсли;	
	Если SUPPLIER = Неопределено Тогда
		Ошибка = "Не указан GLN-код контрагента "+Объект.Контрагент;
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.SUPPLIER = SUPPLIER;
	BUYER = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.Фирма,EDIПровайдер);
	Если BUYER = Неопределено Тогда
		Ошибка = "Не указан GLN-код организации "+Объект.Фирма;
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.BUYER = BUYER;
	DELIVERYPLACE = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.СтруктурнаяЕдиница,EDIПровайдер);
	Если DELIVERYPLACE = Неопределено Тогда
		Ошибка = "Не указан GLN-код структурной единицы "+Объект.СтруктурнаяЕдиница;
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.DELIVERYPLACE = DELIVERYPLACE;
	//ПакетHEAD.INVOICEPARTNER= BUYER;
	ПакетHEAD.SENDER = DELIVERYPLACE  ;
	ПакетHEAD.RECIPIENT = SUPPLIER;
	//ПакетCONDITION = ФабрикаXDTO.Создать(CONDITION);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланируемаяПоставкаСостав.Ссылка,
		|	ПланируемаяПоставкаСостав.Номенклатура,
		|	ПланируемаяПоставкаСостав.ЕдиницаИзмерения,
		|	ПланируемаяПоставкаСостав.Коэффициент,
		|	ПланируемаяПоставкаСостав.Количество,
		|	ПланируемаяПоставкаСостав.Цена,
		|	ПланируемаяПоставкаСостав.Сумма,
		|	НоменклатураКонтрагента.Артикул,
		|	ПланируемаяПоставкаСостав.Номенклатура.Код КАК Код,
		|	ПланируемаяПоставкаСостав.НомерСтроки,
		|	ПланируемаяПоставкаСостав.Номенклатура.Наименование КАК Наименование,
		|	СправочникНоменклатура.Код КАК ШтрихКод,
		|	EDIПровайдерыЕдиницыИзмерения.ЕдиницаПровайдера,
		|	ПланируемаяПоставкаСостав.СтавкаНДС.Ставка КАК СтавкаНДС
		|ИЗ
		|	Документ.ПланируемаяПоставка.Состав КАК ПланируемаяПоставкаСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
		|		ПО ПланируемаяПоставкаСостав.Номенклатура = НоменклатураКонтрагента.Номенклатура
		|			И ПланируемаяПоставкаСостав.Ссылка.Контрагент = НоменклатураКонтрагента.Контрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ПланируемаяПоставкаСостав.Номенклатура = СправочникНоменклатура.Родитель
		|			И (СправочникНоменклатура.ФлагОсновногоШК)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.EDIПровайдеры.ЕдиницыИзмерения КАК EDIПровайдерыЕдиницыИзмерения
		|		ПО ПланируемаяПоставкаСостав.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = EDIПровайдерыЕдиницыИзмерения.ЕдиницаКлассификатора
		|			И (EDIПровайдерыЕдиницыИзмерения.Ссылка = &EDIПровайдер)
		|ГДЕ
		|	ПланируемаяПоставкаСостав.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("EDIПровайдер", EDIПровайдер);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПакетPOSITION = ФабрикаXDTO.Создать(POSITION);
		ПакетPOSITION.POSITIONNUMBER = ВыборкаДетальныеЗаписи.НомерСтроки;
		ПакетPOSITION.PRODUCT = ОбменДаннымиEDIСервер.ПолучитьШК(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.ШтрихКод);
		ПакетPOSITION.PRODUCTIDSUPPLIER = СокрЛП(ВыборкаДетальныеЗаписи.Артикул);
		ПакетPOSITION.PRODUCTIDBUYER = СокрЛП(ВыборкаДетальныеЗаписи.Код);
		ПакетPOSITION.ORDEREDQUANTITY = ВыборкаДетальныеЗаписи.Количество;
		ПакетPOSITION.ORDERUNIT = СокрЛП(ВыборкаДетальныеЗаписи.ЕдиницаПровайдера);
		ПакетPOSITION.QUANTITYOFCUINTU = ВыборкаДетальныеЗаписи.Коэффициент;
		ПакетPOSITION.PRICEWITHVAT = ВыборкаДетальныеЗаписи.Цена;   //нужна без НДС
		ПакетPOSITION.VAT = ВыборкаДетальныеЗаписи.СтавкаНДС;  
		ПакетCHARACTERISTIC = ФабрикаXDTO.Создать(CHARACTERISTIC);
		ПакетCHARACTERISTIC.DESCRIPTION = ВыборкаДетальныеЗаписи.Наименование;
		ПакетPOSITION.CHARACTERISTIC.Добавить(ПакетCHARACTERISTIC);
		ПакетHEAD.Position.Добавить(ПакетPosition);
	КонецЦикла;
	
	ПакетORDER.HEAD=ПакетHEAD;
	
	Результат = ОтправитьСообщение(ПакетORDER,Соединение,"ORDER",Тип,СчетчикОтправки,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="));
	Ошибка = ПакетORDER;
	Возврат Результат;
КонецФункции


Функция ОтправитьПриходнаяНакладная(Объект,EDIПровайдер,Соединение,Тип,Ошибка,СчетчикОтправки)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://exite.com.ua/recadv").КорневыеСвойства;
	RECADV = КорневыеСвойства.Получить("RECADV").Тип;
	HEAD = КорневыеСвойства.Получить("HEAD").Тип;
	POSITION = КорневыеСвойства.Получить("POSITION").Тип;
	PACKINGSEQUENCE = КорневыеСвойства.Получить("PACKINGSEQUENCE").Тип;
	ПакетRECADV = ФабрикаXDTO.Создать(RECADV);
	
	ПакетRECADV.NUMBER = Объект.Номер;
	ПакетRECADV.DATE = Формат(Объект.Дата,"ДФ=yyyy-MM-dd");
	ПакетRECADV.RECEPTIONDATE = Формат(Объект.Дата,"ДФ=yyyy-MM-dd");
	ПакетRECADV.DESADVNUMBER = Объект.НомерДокумента;
	ПакетHEAD = ФабрикаXDTO.Создать(HEAD);
	SUPPLIER = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.Контрагент,EDIПровайдер);
	Если SUPPLIER = Неопределено Тогда
		Ошибка = "Не указан GLN-код контрагента "+Объект.Контрагент;
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.SUPPLIER = SUPPLIER;
	BUYER = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.Фирма,EDIПровайдер);
	Если BUYER = Неопределено Тогда
		Ошибка = "Не указан GLN-код организации "+Объект.Фирма;
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.BUYER = BUYER;
	DELIVERYPLACE = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.СтруктурнаяЕдиница,EDIПровайдер);
	Если DELIVERYPLACE = Неопределено Тогда
		Ошибка = "Не указан GLN-код структурной единицы "+Объект.СтруктурнаяЕдиница;
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.DELIVERYPLACE = DELIVERYPLACE;
	ПакетHEAD.SENDER = DELIVERYPLACE;
	ПакетHEAD.RECIPIENT = SUPPLIER;
	ПакетPACKINGSEQUENCE = ФабрикаXDTO.Создать(PACKINGSEQUENCE);
	ПакетPACKINGSEQUENCE.HIERARCHICALID = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяНакладнаяСостав.Ссылка,
		|	ПриходнаяНакладнаяСостав.Номенклатура,
		|	ПриходнаяНакладнаяСостав.Количество,
		|	НоменклатураКонтрагента.Артикул,
		|	ПриходнаяНакладнаяСостав.Номенклатура.Код КАК Код,
		|	ПриходнаяНакладнаяСостав.НомерСтроки,
		|	ПриходнаяНакладнаяСостав.Номенклатура.Наименование КАК Наименование,
		|	СправочникНоменклатура.Код КАК ШтрихКод,
		|	ПриходнаяНакладнаяСостав.КоличествоПоДокументу,
		|	ЕСТЬNULL(ПланируемаяПоставкаСостав.Количество,0) КАК КоличествоПоЗаказу
		|ИЗ
		|	Документ.ПриходнаяНакладная.Состав КАК ПриходнаяНакладнаяСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
		|		ПО ПриходнаяНакладнаяСостав.Номенклатура = НоменклатураКонтрагента.Номенклатура
		|			И ПриходнаяНакладнаяСостав.Ссылка.Контрагент = НоменклатураКонтрагента.Контрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ПриходнаяНакладнаяСостав.Номенклатура = СправочникНоменклатура.Родитель
		|			И (СправочникНоменклатура.ФлагОсновногоШК)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланируемаяПоставка.Состав КАК ПланируемаяПоставкаСостав
		|		ПО ПриходнаяНакладнаяСостав.Номенклатура = ПланируемаяПоставкаСостав.Номенклатура
		|			И ПриходнаяНакладнаяСостав.Ссылка.ДокОснование = ПланируемаяПоставкаСостав.Ссылка
		|ГДЕ
		|	ПриходнаяНакладнаяСостав.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("EDIПровайдер", EDIПровайдер);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПакетPOSITION = ФабрикаXDTO.Создать(POSITION);
		ПакетPOSITION.POSITIONNUMBER = ВыборкаДетальныеЗаписи.НомерСтроки;
		ПакетPOSITION.PRODUCT = ОбменДаннымиEDIСервер.ПолучитьШК(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.ШтрихКод);
		ПакетPOSITION.PRODUCTIDSUPPLIER = СокрЛП(ВыборкаДетальныеЗаписи.Артикул);
		ПакетPOSITION.PRODUCTIDBUYER = СокрЛП(ВыборкаДетальныеЗаписи.Код);
		ПакетPOSITION.ACCEPTEDQUANTITY = ВыборкаДетальныеЗаписи.Количество;
		ПакетPOSITION.DELIVERQUANTITY = ВыборкаДетальныеЗаписи.КоличествоПоДокументу;
		ПакетPOSITION.ORDERQUANTITY = ВыборкаДетальныеЗаписи.КоличествоПоЗаказу;
		ПакетPACKINGSEQUENCE.Position.Добавить(ПакетPosition);
	КонецЦикла;
	ПакетHEAD.PACKINGSEQUENCE.Добавить(ПакетPACKINGSEQUENCE);
	
	ПакетRECADV.HEAD=ПакетHEAD;
	
	Результат = ОтправитьСообщение(ПакетRECADV,Соединение,"RECADV",Тип,СчетчикОтправки,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="));
	Ошибка = ПакетRECADV;
	Возврат Результат;
КонецФункции


Функция ЗагрузитьORDRSP(XDTO,НомерДокумента) 
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Ссылка = Документы.ПланируемаяПоставка.НайтиПоНомеру(XDTO.ORDERNUMBER,Дата(СтрЗаменить(XDTO.ORDERDATE,"-","")));
		Если Ссылка.Пустая() Тогда 
			XDTO = " Не найдена Планируемая поставка с номером: "+XDTO.ORDERNUMBER+" от "+XDTO.ORDERDATE;
			Возврат Ложь;
		КонецЕсли;
		Объект = Ссылка.ПолучитьОбъект();
		//Если XDTO.ACTION = 29 Тогда
		//	Объект.Статус = Перечисления.СтатусыПланируемойПоставки.Утвержден;
		//Если XDTO.ACTION = "27" Тогда
		//	Объект.Статус = Перечисления.СтатусыПланируемойПоставки.Закрыт;
		//Иначе
			Объект.Статус = Перечисления.СтатусыПланируемойПоставки.Утвержден;
			Набор = РегистрыСведений.ИсторияЗаказов.СоздатьНаборЗаписей();
			Набор.Отбор.ПланируемаяПоставка.Установить(Ссылка);
			Период = ТекущаяДата();
			Набор.Отбор.Период.Установить(Период);
			Если Тип(XDTO.HEAD.POSITION) = Тип("СписокXDTO") Тогда
				Для Каждого Строка Из XDTO.HEAD.POSITION Цикл
					ЗаполнитьСписокORDRSP(XDTO,Строка,Объект,Набор,Ссылка,СтрНенайденныхКодовТоваров,Период);
				КонецЦикла;
			Иначе
				ЗаполнитьСписокORDRSP(XDTO,XDTO.HEAD.POSITION,Объект,Набор,Ссылка,СтрНенайденныхКодовТоваров,Период);
			КонецЕсли;	
			Набор.Записать();
		//КонецЕсли;	
		
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		НомерДокумента = Объект.Номер;
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = " Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+" Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСписокORDRSP(XDTO,Строка,Объект,Набор,Ссылка,СтрНенайденныхКодовТоваров,Период)
	Запись = Набор.Добавить();
	Запись.Период = Период;
	Запись.ПланируемаяПоставка = Ссылка;
	//Запись.Номенклатура = ОбменДаннымиEDIСервер.ПолучитьНоменклатуруПоШК(Строка.PRODUCT,Строка.PRODUCTIDBUYER,Объект.Контрагент,СтрНенайденныхКодовТоваров);
	Запись.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.PRODUCTIDBUYER,,СтрНенайденныхКодовТоваров);
	Запись.КоличествоЗаказанное = Строка.ORDEREDQUANTITY;
	Запись.КоличествоИмеющееся = Строка.ACCEPTEDQUANTITY;
	Если Строка.Свойства().Получить("PRICEWITHVAT") <> Неопределено Тогда
		Запись.Цена = Строка.PRICEWITHVAT;
	КонецЕсли;	
	Попытка
		Запись.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.VAT));
	Исключение
	КонецПопытки;	
	Если Строка.PRODUCTTYPE = "1" Тогда
		Запись.СтатусПоставки = Перечисления.СтатусыПоставки.ПоставкаБезИзменений;
	ИначеЕсли Строка.PRODUCTTYPE = "2" Тогда
		Запись.СтатусПоставки = Перечисления.СтатусыПоставки.ИзменениеПоставки;
		СтрокаДокумента = Объект.Состав.Найти(Запись.Номенклатура,"Номенклатура");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.Количество = Запись.КоличествоИмеющееся;	
			Если Строка.Свойства().Получить("PRICEWITHVAT") <> Неопределено Тогда
				СтрокаДокумента.Цена = Запись.Цена;
			КонецЕсли;	
			//Если Строка.Свойства().Получить("VAT") <> Неопределено Тогда
			//	СтрокаДокумента.СтавкаНДС = Запись.СтавкаНДС;
			//КонецЕсли;	
			СтрокаДокумента.Сумма = Окр(СтрокаДокумента.Количество * СтрокаДокумента.Цена,2);
			СтрокаДокумента.СуммаНДС =Окр(СтрокаДокумента.СтавкаНДС.Ставка * СтрокаДокумента.Сумма / (100 + СтрокаДокумента.СтавкаНДС.Ставка),2); 
		КонецЕсли;	
	ИначеЕсли Строка.PRODUCTTYPE = "3" Тогда
		Запись.СтатусПоставки = Перечисления.СтатусыПоставки.ОтказаноВПоставке;
		СтрокаДокумента = Объект.Состав.Найти(Запись.Номенклатура,"Номенклатура");
		Если СтрокаДокумента <> Неопределено Тогда
			Объект.Состав.Удалить(СтрокаДокумента);
		КонецЕсли;	
	КонецЕсли;
	Если Строка.Свойства().Получить("INFO") <> Неопределено Тогда
		Запись.Комментарий = Строка.INFO;
	КонецЕсли;	
КонецПроцедуры

Функция ЗагрузитьDESADV(XDTO,EDIПровайдер,НомерДокумента) 
	Попытка
		СтрНенайденныхКодовТоваров = "";
		ПланируемаяПоставка = Документы.ПланируемаяПоставка.НайтиПоНомеру(XDTO.ORDERNUMBER,Дата(СтрЗаменить(XDTO.ORDERDATE,"-","")));
		Если ПланируемаяПоставка.Пустая() Тогда 
			XDTO = " Не найдена Планируемая поставка с номером: "+XDTO.ORDERNUMBER+" от "+XDTO.ORDERDATE;
			Возврат Ложь;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПриходнаяНакладная.Ссылка
			|ИЗ
			|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
			|ГДЕ
			|	ПриходнаяНакладная.ДокОснование.Ссылка = &Ссылка
			|	И ПриходнаяНакладная.НомерДокумента = &НомерДокумента";

		Запрос.УстановитьПараметр("НомерДокумента", XDTO.DELIVERYNOTENUMBER);
		Запрос.УстановитьПараметр("Ссылка", ПланируемаяПоставка);

		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			Объект = Документы.ПриходнаяНакладная.СоздатьДокумент();
			Объект.Дата = ТекущаяДата();
		Иначе	
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			Объект = Ссылка.ПолучитьОбъект();
			Если Объект.ПометкаУдаления ИЛИ Объект.Проведен Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;
		Объект.EDIПровайдер = EDIПровайдер;
		Объект.ОбработкаЗаполнения(ПланируемаяПоставка,Истина);
		Объект.НомерДокумента = XDTO.DELIVERYNOTENUMBER;
		Объект.Состав.Очистить();
		БезНДС = Справочники.СтавкиНДС.БезНДС;
		
		Если Тип(XDTO.HEAD.PACKINGSEQUENCE.POSITION) = Тип("СписокXDTO") Тогда
			Для Каждого Строка Из XDTO.HEAD.PACKINGSEQUENCE.POSITION Цикл
				НоваяСтрока = Объект.Состав.Добавить();
				//НоваяСтрока.Номенклатура = ОбменДаннымиEDIСервер.ПолучитьНоменклатуруПоШК(Строка.PRODUCT,Строка.PRODUCTIDBUYER,Объект.Контрагент,СтрНенайденныхКодовТоваров);
				НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.PRODUCTIDBUYER,,СтрНенайденныхКодовТоваров);
				НоваяСтрока.Количество = Строка.DELIVEREDQUANTITY;
				НоваяСтрока.КоличествоПоДокументу = Строка.DELIVEREDQUANTITY;         //ORDEREDQUANTITY
				Если Строка.Свойства().Получить("DELIVEREDUNIT") <> Неопределено Тогда
					НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(НоваяСтрока.Номенклатура,Строка.DELIVEREDUNIT,EDIПровайдер);
				Иначе
					НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура);
				КонецЕсли;
				//popn+
				Если Строка.Свойства().Получить("PRODUCTIDSUPPLIER") <> Неопределено Тогда
					НоваяСтрока.Артикул = Строка.PRODUCTIDSUPPLIER;
				КонецЕсли;
				//popn-
				НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
				Если Объект.Контрагент.НеПлательщикНДС Тогда
					НоваяСтрока.СтавкаНДС = БезНДС;
				Иначе	
					Если Строка.Свойства().Получить("TAXRATE") <> Неопределено Тогда
						НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.TAXRATE));
					Иначе
						НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
					КонецЕсли;
				КонецЕсли;	
				Если Строка.Свойства().Получить("PRICE") <> Неопределено Тогда
					НоваяСтрока.Цена = Число(Строка.PRICE);
				Иначе
					НоваяСтрока.Цена = ПолучитьЦенуНоменклатуры(НоваяСтрока.Номенклатура,ПланируемаяПоставка);
				КонецЕсли;
				НоваяСтрока.ЦенаДоговора = ПолучитьЦенуНоменклатурыПоДоговору(НоваяСтрока.Номенклатура,Объект.Контрагент);
				НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * НоваяСтрока.Цена,2);
				НоваяСтрока.СуммаНДС =Окр(НоваяСтрока.СтавкаНДС.Ставка * НоваяСтрока.Сумма / (100 + НоваяСтрока.СтавкаНДС.Ставка),2); 
			КонецЦикла;
		Иначе
			Строка = XDTO.HEAD.PACKINGSEQUENCE.POSITION;
			НоваяСтрока = Объект.Состав.Добавить();
			//НоваяСтрока.Номенклатура = ОбменДаннымиEDIСервер.ПолучитьНоменклатуруПоШК(Строка.PRODUCT,Строка.PRODUCTIDBUYER,Объект.Контрагент,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Номенклатура = ОбменДаннымиRIBСервер.ПолучитьНоменклатуруПоКоду(Строка.PRODUCTIDBUYER,,СтрНенайденныхКодовТоваров);
			НоваяСтрока.Количество = Строка.DELIVEREDQUANTITY;
			НоваяСтрока.КоличествоПоДокументу = Строка.DELIVEREDQUANTITY;         //ORDEREDQUANTITY
			Если Строка.Свойства().Получить("DELIVEREDUNIT") <> Неопределено Тогда
				НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(НоваяСтрока.Номенклатура,Строка.DELIVEREDUNIT,EDIПровайдер);
			Иначе
				НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура);
			КонецЕсли;
			//popn+
			Если Строка.Свойства().Получить("PRODUCTIDSUPPLIER") <> Неопределено Тогда
				НоваяСтрока.Артикул = Строка.PRODUCTIDSUPPLIER;
			КонецЕсли;
			//popn-
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			Если Объект.Контрагент.НеПлательщикНДС Тогда
				НоваяСтрока.СтавкаНДС = БезНДС;
			Иначе	
				Если Строка.Свойства().Получить("TAXRATE") <> Неопределено Тогда
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.TAXRATE));
				Иначе
					НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Цена = ПолучитьЦенуНоменклатуры(НоваяСтрока.Номенклатура,ПланируемаяПоставка);
			НоваяСтрока.ЦенаДоговора = ПолучитьЦенуНоменклатурыПоДоговору(НоваяСтрока.Номенклатура,Объект.Контрагент);
			НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * НоваяСтрока.Цена,2);
			НоваяСтрока.СуммаНДС =Окр(НоваяСтрока.СтавкаНДС.Ставка * НоваяСтрока.Сумма / (100 + НоваяСтрока.СтавкаНДС.Ставка),2); 
		КонецЕсли;	
		
		Объект.Записать(РежимЗаписиДокумента.Запись);
		НомерДокумента = Объект.Номер;
		XDTO = Строка(Объект);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = " Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+" Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ПолучитьЦенуНоменклатуры(Номенклатура,ПланируемаяПоставка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланируемаяПоставкаСостав.Цена
		|ИЗ
		|	Документ.ПланируемаяПоставка.Состав КАК ПланируемаяПоставкаСостав
		|ГДЕ
		|	ПланируемаяПоставкаСостав.Ссылка = &Ссылка
		|	И ПланируемаяПоставкаСостав.Номенклатура = &Номенклатура";

	Запрос.УстановитьПараметр("Ссылка", ПланируемаяПоставка);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Цена;
	
КонецФункции	

Функция ПолучитьЦенуНоменклатурыПоДоговору(Номенклатура,Контрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА ВключатьНДСВЦеныКонтрагентов.Значение = ИСТИНА
		|			ТОГДА НоменклатураКонтрагента.Цена
		|		ИНАЧЕ ВЫРАЗИТЬ(НоменклатураКонтрагента.Цена * (100 + НоменклатураКонтрагента.Номенклатура.СтавкаНДС.Ставка) / 100 КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
		|	Константа.ВключатьНДСВЦеныКонтрагентов КАК ВключатьНДСВЦеныКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагента.Контрагент = &Контрагент
		|	И НоменклатураКонтрагента.Номенклатура = &Номенклатура";

	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Цена;
	
КонецФункции	


///////////////////////////EDIПоставщик///////////////////


Процедура ОбменДаннымиEDIПоставщикПолучение(Ссылка) Экспорт
	Результат = Истина;
	ВсеОшибки = "";
	Ошибка = "";
	КоличествоПакетов = 0;
	КоличествоОшибок = 0;
	ПараметрыПодключения = Ссылка.EDIПровайдер.КаналПриемки;
	Если ПараметрыПодключения.Тип = 1 Тогда //FTP
		Попытка
			Прокси = Константы.НастройкаПроксиСервера.Получить().Получить();
			Соединение = Новый FTPСоединение(ПараметрыПодключения.URL, ПараметрыПодключения.Порт, ПараметрыПодключения.Имя, ПараметрыПодключения.Пароль, Прокси, ПараметрыПодключения.ПасссивныйРежим, ПараметрыПодключения.Таймаут);
			Каталог = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(ПараметрыПодключения.ИмяКаталога,"");
			Соединение.УстановитьТекущийКаталог(Каталог);
		Исключение
			Ошибка = ОписаниеОшибки();
			ВызватьИсключение(Ошибка);
		КонецПопытки;
		ПутьДляСохранения = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(),Строка(Новый УникальныйИдентификатор));
		СоздатьКаталог(ПутьДляСохранения);
		НайденныеФайлы = Соединение.НайтиФайлы("", "*.xml");
		Для каждого Файл Из НайденныеФайлы Цикл
			Попытка
				Соединение.Получить(Файл.ПолноеИмя, ПутьДляСохранения+"\"+Файл.Имя);
			Исключение
				Ошибка = Ошибка + ОписаниеОшибки();
			КонецПопытки;
		КонецЦикла;
		Тз=Новый ТаблицаЗначений;
		Тз.Колонки.Добавить("Файл");
		Тз.Колонки.Добавить("ФайлПолноеИмя");
		Тз.Колонки.Добавить("ВремяИзменения");
		НайденныеФайлы = НайтиФайлы(ПутьДляСохранения, "*.xml");
		Для каждого Файл Из НайденныеФайлы Цикл
			Строки = Тз.Добавить();
			Строки.Файл           = Файл;
			Строки.ФайлПолноеИмя  = Файл.ПолноеИмя;
			Строки.ВремяИзменения = Файл.ПолучитьВремяИзменения();	
		КонецЦикла;
		Тз.Сортировать("ВремяИзменения Возр");
		Для каждого СтрокаТз Из Тз Цикл
			Если ПараметрыСеанса.Отладка Тогда
				ЗаписьЖурналаРегистрации("EDIПоставщик", УровеньЖурналаРегистрации.Информация,,СтрокаТз.ФайлПолноеИмя);
			КонецЕсли;	
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(СтрокаТз.ФайлПолноеИмя);
			ЧтениеXML.Прочитать();
			ИмяТипа = ЧтениеXML.Имя;
			
			Попытка
				XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			Исключение
				ЧтениеXML.Закрыть();
				стрОшибка = ОписаниеОшибки();
				Если ПараметрыСеанса.Отладка  Тогда
					ЗаписьЖурналаРегистрации("EDIПоставщик", УровеньЖурналаРегистрации.Информация,,СтрокаТз.ФайлПолноеИмя,стрОшибка);
				КонецЕсли;
				Продолжить;
			КонецПопытки;
			
			НомерДокумента = "";
			Если ВРЕГ(ИмяТипа) = "ORDER" Тогда
				Результат = ЗагрузитьORDER(XDTO,Ссылка.EDIПровайдер,НомерДокумента);
			ИначеЕсли ВРЕГ(ИмяТипа) = "RECADV" Тогда
				Результат = ЗагрузитьRECADV(XDTO,Ссылка.EDIПровайдер,НомерДокумента);
			ИначеЕсли ВРЕГ(ИмяТипа) = "STATUS" Тогда
				Результат = ЗагрузитьSTATUS(XDTO,НомерДокумента);
			Иначе
				ЧтениеXML.Закрыть();
				ЗаписьЖурналаРегистрации("EDIПоставщик", УровеньЖурналаРегистрации.Ошибка,,СтрокаТз.ФайлПолноеИмя,"Тип объекта неопределен: "+ИмяТипа);
				Продолжить;
			КонецЕсли;
			
			ЧтениеXML.Закрыть();
			Если Результат Тогда
				//Если СокрЛП(НомерДокумента) = "" Тогда
					Соединение.Переместить(СтрокаТз.Файл.Имя, СтрокаТз.Файл.Имя+".loaded");
				//Иначе
				//	Соединение.Переместить(СтрокаТз.Файл.Имя, СтрокаТз.Файл.Имя+"."+СокрЛП(НомерДокумента)+".loaded");
				//КонецЕсли;	
				//ЗаписьЖурналаРегистрации("EDIПоставщик", УровеньЖурналаРегистрации.Информация,,СтрокаТз.ФайлПолноеИмя,XDTO);
			Иначе
				стрСообщение = "Ошибка при загрузке из файла: "+СтрокаТз.ФайлПолноеИмя+"
				|   "+XDTO;
				ЗаписьЖурналаРегистрации("EDIПоставщик", УровеньЖурналаРегистрации.Ошибка,,СтрокаТз.ФайлПолноеИмя,XDTO);
				Ошибка = Ошибка + XDTO;
				
				Соединение.Переместить(СтрокаТз.Файл.Имя, СтрокаТз.Файл.Имя+".error");
			КонецЕсли;
			КоличествоПакетов = КоличествоПакетов + 1;
			Если Ошибка <> "" Тогда
				ВсеОшибки = Ошибка;
				КоличествоОшибок = КоличествоОшибок + 1;
			КонецЕсли;	
		КонецЦикла;
		Попытка
			УдалитьФайлы(ПутьДляСохранения);
		Исключение
		КонецПопытки;	
	Иначе
		Попытка
			Определение = Новый WSОпределения(ПараметрыПодключения.URL,ПараметрыПодключения.Имя,ПараметрыПодключения.Пароль);
			URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
			ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
			ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
			Соединение = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
			Соединение.Пользователь = ПараметрыПодключения.Имя;
			Соединение.Пароль = ПараметрыПодключения.Пароль;
		Исключение
			Ошибка = ОписаниеОшибки();
			ВызватьИсключение(Ошибка);
		КонецПопытки;
	КонецЕсли;	
	
	
	
	Если ВсеОшибки <> "" Тогда
		Сообшение = "Всего ошибок - "+КоличествоОшибок+" из "+КоличествоПакетов+"
		| последняя ошибка:
		|"+ВсеОшибки;
		ВызватьИсключение(Сообшение);
	КонецЕсли;	
КонецПроцедуры


Функция ЗагрузитьORDER(XDTO,EDIПровайдер,НомерДокумента) 
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗаказВнешний.Ссылка
			|ИЗ
			|	Документ.ЗаказВнешний КАК ЗаказВнешний
			|ГДЕ
			|	ЗаказВнешний.НомерДокумента = &НомерДокумента
			|	И ЗаказВнешний.Контрагент = &Контрагент
			|	И ЗаказВнешний.ДатаДокумента = &ДатаДокумента";

		Контрагент = ОбменДаннымиEDIСервер.ПолучитьОбъектПоGLN(XDTO.HEAD.DELIVERYPLACE,EDIПровайдер);
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			XDTO = " Не найден контрагент с GLN кодом: "+XDTO.HEAD.DELIVERYPLACE;
			Возврат Ложь;
		КонецЕсли;	
		Запрос.УстановитьПараметр("ДатаДокумента", Дата(СтрЗаменить(XDTO.DATE,"-","")));
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("НомерДокумента", XDTO.NUMBER);

		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда		
			ДокЗаказВПроизводство = Документы.ЗаказВнешний.СоздатьДокумент();
			ДокЗаказВПроизводство.Дата = ТекущаяДата();
			ДокЗаказВПроизводство.ИнициализироватьДокумент();
		Иначе
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
            ДокЗаказВПроизводство = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Если ДокЗаказВПроизводство.ПометкаУдаления ИЛИ ДокЗаказВПроизводство.Проведен Тогда
				Возврат Истина;
			КонецЕсли;	
			ДокЗаказВПроизводство.Состав.Очистить();
		КонецЕсли;
		ДокЗаказВПроизводство.EDIПровайдер = EDIПровайдер;
		ДокЗаказВПроизводство.Контрагент = Контрагент;
		ДокЗаказВПроизводство.НомерДокумента = XDTO.NUMBER;
		ДокЗаказВПроизводство.ДатаДокумента = Дата(СтрЗаменить(XDTO.DATE,"-",""));
		ДокЗаказВПроизводство.Склад = ПолучитьСкладПроизводства();
		ДокЗаказВПроизводство.СтруктурнаяЕдиница = ДокЗаказВПроизводство.Склад.Владелец;
		ДокЗаказВПроизводство.BUYER = XDTO.HEAD.BUYER;
		ДокЗаказВПроизводство.Фирма = ДокЗаказВПроизводство.СтруктурнаяЕдиница.Организация;
		
		
		
		Если Тип(XDTO.HEAD.POSITION) = Тип("СписокXDTO") Тогда
			Для Каждого Строка Из XDTO.HEAD.POSITION Цикл
				Номенклатура = ОбменДаннымиEDIСервер.ПолучитьНоменклатуруПоШК(Строка.PRODUCT,Строка.PRODUCTIDSUPPLIER,Контрагент,СтрНенайденныхКодовТоваров);
				Если Номенклатура = Неопределено Тогда
					НоваяСтрока = ДокЗаказВПроизводство.Состав.Добавить();
					НоваяСтрока.Код = Строка.PRODUCTIDSUPPLIER;
					//+Зернятко@10.07.2013 14:17:37 - Загрузка ШК 
					НоваяСтрока.Штрихкод = Строка.PRODUCT;
					///Зернятко@ - конец блока 
					НоваяСтрока.Номенклатура = Строка.CHARACTERISTIC.DESCRIPTION;
					НоваяСтрока.Количество = Строка.ORDEREDQUANTITY;
					НоваяСтрока.ЕдиницаИзмерения = Строка.ORDERUNIT;
					НоваяСтрока.Коэффициент = 1;
					НоваяСтрока.ДатаПоставки = Дата(СтрЗаменить(XDTO.DELIVERYDATE,"-",""));
					НоваяСтрока.Цена = Строка.PRICEWITHVAT;
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.VAT));
					НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * НоваяСтрока.Цена,2);
					НоваяСтрока.СуммаНДС =Окр(НоваяСтрока.СтавкаНДС.Ставка * НоваяСтрока.Сумма / (100 + НоваяСтрока.СтавкаНДС.Ставка),2); 
					Продолжить;
				КонецЕсли;
				НоваяСтрока = ДокЗаказВПроизводство.Состав.Добавить();
				НоваяСтрока.Код = Номенклатура.Код;
				//+Зернятко@10.07.2013 14:17:37 - Загрузка ШК 
				НоваяСтрока.Штрихкод = Строка.PRODUCT;
				///Зернятко@ - конец блока 
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.Количество = Строка.ORDEREDQUANTITY;
				Если Строка.Свойства().Получить("ORDERUNIT") <> Неопределено Тогда
					НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(Номенклатура,Строка.ORDERUNIT,EDIПровайдер);
				Иначе
					НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура);
				КонецЕсли;
				НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
				НоваяСтрока.ДатаПоставки = Дата(СтрЗаменить(XDTO.DELIVERYDATE,"-",""));
				НоваяСтрока.Цена = ОбменДаннымиEDIСервер.ПолучитьЦенуНоменклатуры(НоваяСтрока.Номенклатура,ДокЗаказВПроизводство,Строка.PRICEWITHVAT);
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(Строка.VAT));
				НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * НоваяСтрока.Цена,2);
				НоваяСтрока.СуммаНДС =Окр(НоваяСтрока.СтавкаНДС.Ставка * НоваяСтрока.Сумма / (100 + НоваяСтрока.СтавкаНДС.Ставка),2); 
			КонецЦикла;
		Иначе
			Номенклатура = ОбменДаннымиEDIСервер.ПолучитьНоменклатуруПоШК(XDTO.HEAD.POSITION.PRODUCT,XDTO.HEAD.POSITION.PRODUCTIDSUPPLIER,Контрагент,СтрНенайденныхКодовТоваров);
			Если Номенклатура = Неопределено Тогда
				НоваяСтрока = ДокЗаказВПроизводство.Состав.Добавить();
				НоваяСтрока.Код = XDTO.HEAD.POSITION.PRODUCTIDSUPPLIER;
				//+Зернятко@10.07.2013 14:17:37 - Загрузка ШК 
				НоваяСтрока.Штрихкод = XDTO.HEAD.POSITION.PRODUCT;
				///Зернятко@ - конец блока 
				НоваяСтрока.Номенклатура = XDTO.HEAD.POSITION.CHARACTERISTIC.DESCRIPTION;
				НоваяСтрока.Количество = XDTO.HEAD.POSITION.ORDEREDQUANTITY;
				НоваяСтрока.ЕдиницаИзмерения = XDTO.HEAD.POSITION.ORDERUNIT;
				НоваяСтрока.Коэффициент = 1;
				НоваяСтрока.ДатаПоставки = Дата(СтрЗаменить(XDTO.DELIVERYDATE,"-",""));
				НоваяСтрока.Цена = XDTO.HEAD.POSITION.PRICEWITHVAT;
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(XDTO.HEAD.POSITION.VAT));
				НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * НоваяСтрока.Цена,2);
				НоваяСтрока.СуммаНДС =Окр(НоваяСтрока.СтавкаНДС.Ставка * НоваяСтрока.Сумма / (100 + НоваяСтрока.СтавкаНДС.Ставка),2); 
			Иначе
				НоваяСтрока = ДокЗаказВПроизводство.Состав.Добавить();
				НоваяСтрока.Код = Номенклатура.Код;
				//+Зернятко@10.07.2013 14:17:37 - Загрузка ШК 
				НоваяСтрока.Штрихкод = XDTO.HEAD.POSITION.PRODUCT;
				///Зернятко@ - конец блока 
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.Количество = XDTO.HEAD.POSITION.ORDEREDQUANTITY;
				Если XDTO.HEAD.POSITION.Свойства().Получить("ORDERUNIT") <> Неопределено Тогда
					НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(Номенклатура,XDTO.HEAD.POSITION.ORDERUNIT,EDIПровайдер);
				Иначе
					НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура);
				КонецЕсли;
				НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
				НоваяСтрока.ДатаПоставки = Дата(СтрЗаменить(XDTO.DELIVERYDATE,"-",""));
				НоваяСтрока.Цена = ОбменДаннымиEDIСервер.ПолучитьЦенуНоменклатуры(НоваяСтрока.Номенклатура,ДокЗаказВПроизводство,XDTO.HEAD.POSITION.PRICEWITHVAT);
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",Число(XDTO.HEAD.POSITION.VAT));
				НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * НоваяСтрока.Цена,2);
				НоваяСтрока.СуммаНДС =Окр(НоваяСтрока.СтавкаНДС.Ставка * НоваяСтрока.Сумма / (100 + НоваяСтрока.СтавкаНДС.Ставка),2); 
			КонецЕсли;	
		КонецЕсли;	
		
		
		ДокЗаказВПроизводство.Записать(РежимЗаписиДокумента.Запись);
		НомерДокумента = ДокЗаказВПроизводство.Номер;
		XDTO = Строка(ДокЗаказВПроизводство);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = " Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+" Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции


Функция ЗагрузитьRECADV(XDTO,EDIПровайдер,НомерДокумента) 
	Попытка
		СтрНенайденныхКодовТоваров = "";
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КорректировкаРеализации.Ссылка
			|ИЗ
			|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|ГДЕ
			|	КорректировкаРеализации.Контрагент = &Контрагент
			|	И ТИПЗНАЧЕНИЯ(КорректировкаРеализации.ДокументРеализации) = ТИП(Документ.РасходнаяНакладная)
			|	И ТИПЗНАЧЕНИЯ(КорректировкаРеализации.ДокументРеализации.ДокОснование) = ТИП(Документ.ЗаказВнешний)
			|	И КорректировкаРеализации.ДокументРеализации.Номер = &Номер
			|	И КорректировкаРеализации.ДокументРеализации.ДокОснование.НомерДокумента = &НомерДокумента
			|	И КорректировкаРеализации.ДокументРеализации.Проведен";

		Контрагент = ОбменДаннымиEDIСервер.ПолучитьОбъектПоGLN(XDTO.HEAD.DELIVERYPLACE,EDIПровайдер);
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			XDTO = " Не найден контрагент с GLN кодом: "+XDTO.HEAD.DELIVERYPLACE;
			Возврат Ложь;
		КонецЕсли;	
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("НомерДокумента", XDTO.ORDERNUMBER);
		Запрос.УстановитьПараметр("Номер", XDTO.DESADVNUMBER);
		

		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда		
			ДокКорректировкаРеализации = Документы.КорректировкаРеализации.СоздатьДокумент();
			ДокКорректировкаРеализации.Дата = ТекущаяДата();
			ДокКорректировкаРеализации.ИнициализироватьДокумент();
			ДокКорректировкаРеализации.РежимКорректировки = Перечисления.РежимыКорректировок.СогласованноеИзменение;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	РасходнаяНакладная.Ссылка
				|ИЗ
				|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
				|ГДЕ
				|	РасходнаяНакладная.Контрагент = &Контрагент
				|	И РасходнаяНакладная.Номер = &Номер
				|	И РасходнаяНакладная.Проведен";
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Номер", XDTO.DESADVNUMBER);

			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда		
				XDTO = " Не найдена отгрузка по заказу: "+XDTO.ORDERNUMBER;
				Возврат Ложь;
			КонецЕсли;	
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ДокКорректировкаРеализации.ДокументРеализации = ВыборкаДетальныеЗаписи.Ссылка;
			ДокКорректировкаРеализации.ИсправляемыйДокумент = ВыборкаДетальныеЗаписи.Ссылка;
		Иначе
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ДокКорректировкаРеализации = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Если ДокКорректировкаРеализации.ПометкаУдаления ИЛИ ДокКорректировкаРеализации.Проведен Тогда
				Возврат Истина;
			КонецЕсли;	
			ДокКорректировкаРеализации.Состав.Очистить();
		КонецЕсли;
		ДокКорректировкаРеализации.ОбработкаЗаполнения(ДокКорректировкаРеализации.ИсправляемыйДокумент,Истина);
		//ДокКорректировкаРеализации.СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
		//ДокКорректировкаРеализации.Фирма = ДокКорректировкаРеализации.СтруктурнаяЕдиница.Организация;
		//ДокКорректировкаРеализации.Контрагент = Контрагент;
		//ДокКорректировкаРеализации.НомерДокумента = XDTO.NUMBER;
		//ДокКорректировкаРеализации.ДатаДокумента = Дата(СтрЗаменить(XDTO.DATE,"-",""));
		Если XDTO.Свойства().Получить("INFO") <> Неопределено Тогда
			ДокКорректировкаРеализации.Комментарий = XDTO.INFO;
		КонецЕсли;
		ЕстьИзменения = Ложь;
		Если Тип(XDTO.HEAD.PACKINGSEQUENCE.POSITION) = Тип("СписокXDTO") Тогда
			Для Каждого Строка Из XDTO.HEAD.PACKINGSEQUENCE.POSITION Цикл
				Номенклатура = ОбменДаннымиEDIСервер.ПолучитьНоменклатуруПоШК(Строка.PRODUCT,Строка.PRODUCTIDSUPPLIER,Контрагент,СтрНенайденныхКодовТоваров);
				Если Номенклатура = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Отбор = Новый Структура("Номенклатура",Номенклатура);
				НайденныеСтроки = ДокКорректировкаРеализации.Состав.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = ДокКорректировкаРеализации.Состав.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура;
					НоваяСтрока.КоличествоДоИзменения = Строка.DELIVERQUANTITY;
					Если Строка.Свойства().Получить("ACCEPTEDUNIT") <> Неопределено Тогда
						НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(Номенклатура,Строка.ACCEPTEDUNIT,EDIПровайдер);
					Иначе
						НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура);
					КонецЕсли;
					НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
					НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
					НоваяСтрока.ЦенаДоИзменения = Строка.PRICE;
					НоваяСтрока.СтавкаНДСДоИзменения = НоваяСтрока.Номенклатура.СтавкаНДС;
					НоваяСтрока.СуммаДоИзменения = Окр(НоваяСтрока.КоличествоДоИзменения * НоваяСтрока.ЦенаДоИзменения,2);
					НоваяСтрока.СуммаНДСДоИзменения =Окр(НоваяСтрока.СтавкаНДСДоИзменения.Ставка * НоваяСтрока.СуммаДоИзменения / (100 + НоваяСтрока.СтавкаНДСДоИзменения.Ставка),2); 
				Иначе	
					НоваяСтрока = НайденныеСтроки[0];
				КонецЕсли;	
				НоваяСтрока.Количество = Строка.ACCEPTEDQUANTITY;
				Если НоваяСтрока.Количество <> НоваяСтрока.КоличествоДоИзменения Тогда
					ЕстьИзменения = Истина;
				КонецЕсли;	
				НоваяСтрока.Цена = Строка.PRICE;
				НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * НоваяСтрока.Цена,2);
				НоваяСтрока.СуммаНДС =Окр(НоваяСтрока.СтавкаНДС.Ставка * НоваяСтрока.Сумма / (100 + НоваяСтрока.СтавкаНДС.Ставка),2); 
			КонецЦикла;
		Иначе
			Номенклатура = ОбменДаннымиEDIСервер.ПолучитьНоменклатуруПоШК(XDTO.HEAD.PACKINGSEQUENCE.POSITION.PRODUCT,XDTO.HEAD.PACKINGSEQUENCE.POSITION.PRODUCTIDSUPPLIER,Контрагент,СтрНенайденныхКодовТоваров);
			Если Номенклатура = Неопределено Тогда
				XDTO = " Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
				Возврат Ложь;
			КонецЕсли;
			Строка = XDTO.HEAD.PACKINGSEQUENCE.POSITION;
			Отбор = Новый Структура("Номенклатура",Номенклатура);
			НайденныеСтроки = ДокКорректировкаРеализации.Состав.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = ДокКорректировкаРеализации.Состав.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.КоличествоДоИзменения = Строка.DELIVERQUANTITY;
				Если Строка.Свойства().Получить("ACCEPTEDUNIT") <> Неопределено Тогда
					НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(Номенклатура,Строка.ACCEPTEDUNIT,EDIПровайдер);
				Иначе
					НоваяСтрока.ЕдиницаИзмерения = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура);
				КонецЕсли;
				НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
				НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
				НоваяСтрока.ЦенаДоИзменения = Строка.PRICE;
				НоваяСтрока.СтавкаНДСДоИзменения = НоваяСтрока.Номенклатура.СтавкаНДС;
				НоваяСтрока.СуммаДоИзменения = Окр(НоваяСтрока.КоличествоДоИзменения * НоваяСтрока.ЦенаДоИзменения,2);
				НоваяСтрока.СуммаНДСДоИзменения =Окр(НоваяСтрока.СтавкаНДСДоИзменения.Ставка * НоваяСтрока.СуммаДоИзменения / (100 + НоваяСтрока.СтавкаНДСДоИзменения.Ставка),2); 
			Иначе	
				НоваяСтрока = НайденныеСтроки[0];
			КонецЕсли;	
			НоваяСтрока.Количество = Строка.ACCEPTEDQUANTITY;
			Если НоваяСтрока.Количество <> НоваяСтрока.КоличествоДоИзменения Тогда
				ЕстьИзменения = Истина;
			КонецЕсли;	
			НоваяСтрока.Цена = Строка.PRICE;
			НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * НоваяСтрока.Цена,2);
			НоваяСтрока.СуммаНДС =Окр(НоваяСтрока.СтавкаНДС.Ставка * НоваяСтрока.Сумма / (100 + НоваяСтрока.СтавкаНДС.Ставка),2); 
		КонецЕсли;	
		
		Если СтрНенайденныхКодовТоваров = "" И ЕстьИзменения = Истина Тогда
			ДокКорректировкаРеализации.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
		НомерДокумента = ДокКорректировкаРеализации.Номер;

		XDTO = Строка(ДокКорректировкаРеализации);
		Результат = Истина;
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = " Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Если Не СтрНенайденныхКодовТоваров = "" Тогда
			XDTO = XDTO+" Не найден товар с кодом: "+Строка(СтрНенайденныхКодовТоваров);
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции


Процедура ОбменДаннымиEDIПоставщикОтправка(Ссылка) Экспорт
	Результат = Истина;
	ПараметрыПодключения = Ссылка.EDIПровайдер.КаналОтправки;
	Если ПараметрыПодключения.Тип = 1 Тогда //FTP
		Попытка
			Прокси = Константы.НастройкаПроксиСервера.Получить().Получить();
			Соединение = Новый FTPСоединение(ПараметрыПодключения.URL, ПараметрыПодключения.Порт, ПараметрыПодключения.Имя, ПараметрыПодключения.Пароль, Прокси, ПараметрыПодключения.ПасссивныйРежим, ПараметрыПодключения.Таймаут);
			Каталог = ОбменДаннымиРБДСервер.ПолучитьИмяФайла(ПараметрыПодключения.ИмяКаталога,"");
			Соединение.УстановитьТекущийКаталог(Каталог);
		Исключение
			Ошибка = ОписаниеОшибки();
			ВызватьИсключение(Ошибка);
		КонецПопытки;
	Иначе
		Попытка
			Определение = Новый WSОпределения(ПараметрыПодключения.URL,ПараметрыПодключения.Имя,ПараметрыПодключения.Пароль);
			URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
			ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
			ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
			Соединение = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
			Соединение.Пользователь = ПараметрыПодключения.Имя;
			Соединение.Пароль = ПараметрыПодключения.Пароль;
		Исключение
			Ошибка = ОписаниеОшибки();
			ВызватьИсключение(Ошибка);
		КонецПопытки;
	КонецЕсли;	
	
	ВсеОшибки = "";
	Ошибка = "";
	КоличествоПакетов = 0;
	КоличествоОшибок = 0;
	СчетчикОтправки = 0;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Ссылка, Ссылка.НомерОтправленного+1);
	Пока ВыборкаИзменений.Следующий() Цикл
		СчетчикОтправки = ?(СчетчикОтправки=99,1,СчетчикОтправки+1);
		Ошибка = "";
		Объект = ВыборкаИзменений.Получить();
		ТипОбъекта = ТипЗнч(Объект);
		Ушло = Ложь;
		Если ТипОбъекта = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
			Ушло = ОтправитьРасходнаяНакладная(Объект,Ссылка.EDIПровайдер,Соединение,ПараметрыПодключения.Тип,Ошибка,СчетчикОтправки);
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказВнешний") Тогда
			Ушло = ОтправитьЗаказВнешний(Объект,Ссылка.EDIПровайдер,Соединение,ПараметрыПодключения.Тип,Ошибка,СчетчикОтправки);
		КонецЕсли;	
		Если Ушло = Истина Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка, Объект);
		КонецЕсли;
		КоличествоПакетов = КоличествоПакетов + 1;
		Если Ошибка <> "" Тогда
			ВсеОшибки = Ошибка;
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецЕсли;	
	КонецЦикла;
	
	Если ВсеОшибки <> "" Тогда
		Сообшение = "Всего ошибок - "+КоличествоОшибок+" из "+КоличествоПакетов+"
		| последняя ошибка:
		|"+ВсеОшибки;
		ВызватьИсключение(Сообшение);
	КонецЕсли;	
КонецПроцедуры



Функция ОтправитьЗаказВнешний(Объект,EDIПровайдер,Соединение,Тип,Ошибка,СчетчикОтправки)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://exite.com.ua/ordrsp").КорневыеСвойства;
	ORDRSP = КорневыеСвойства.Получить("ORDRSP").Тип;
	HEAD = КорневыеСвойства.Получить("HEAD").Тип;
	POSITION = КорневыеСвойства.Получить("POSITION").Тип;
	ПакетORDRSP = ФабрикаXDTO.Создать(ORDRSP);
	
	ПакетORDRSP.NUMBER = Объект.Номер;
	ПакетORDRSP.DATE = Формат(Объект.Дата,"ДФ=yyyy-MM-dd");
	ПакетORDRSP.ORDERNUMBER = СокрЛП(Объект.НомерДокумента);
	ПакетORDRSP.ORDERDATE = Формат(Объект.ДатаДокумента,"ДФ=yyyy-MM-dd");
	ПакетORDRSP.DELIVERYDATE = Формат(Объект.Состав[0].ДатаПоставки,"ДФ=yyyy-MM-dd");
	ПакетHEAD = ФабрикаXDTO.Создать(HEAD);
	BUYER = Объект.BUYER;           
	Если СокрЛП(BUYER) = "" Тогда
		Ошибка = "Не указан GLN-код BUYER ";
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.BUYER = BUYER;
	SUPPLIER = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.СтруктурнаяЕдиница,EDIПровайдер);
	Если SUPPLIER = Неопределено Тогда
		Ошибка = "Не указан GLN-код структурной единицы "+Объект.СтруктурнаяЕдиница;
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.SUPPLIER = SUPPLIER;
	DELIVERYPLACE = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.Контрагент,EDIПровайдер);
	Если DELIVERYPLACE = Неопределено Тогда
		Ошибка = "Не указан GLN-код контрагента "+Объект.Контрагент;
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.DELIVERYPLACE = DELIVERYPLACE;
	ПакетHEAD.SENDER = SUPPLIER;
	ПакетHEAD.RECIPIENT = DELIVERYPLACE;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказВнешнийСостав.Ссылка,
		|	ЗаказВнешнийСостав.Номенклатура,
		|	ЗаказВнешнийСостав.ЕдиницаИзмерения,
		|	ЗаказВнешнийСостав.Коэффициент,
		|	ЗаказВнешнийСостав.Количество,
		|	ЗаказВнешнийСостав.Номенклатура.Код КАК Код,
		|	ЗаказВнешнийСостав.НомерСтроки,
		|	ЗаказВнешнийСостав.Номенклатура.Наименование КАК Наименование,
		|	СправочникНоменклатура.Код КАК ШтрихКод,
		|	EDIПровайдерыЕдиницыИзмерения.ЕдиницаПровайдера
		|ИЗ
		|	Документ.ЗаказВнешний.Состав КАК ЗаказВнешнийСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ЗаказВнешнийСостав.Номенклатура = СправочникНоменклатура.Родитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.EDIПровайдеры.ЕдиницыИзмерения КАК EDIПровайдерыЕдиницыИзмерения
		|		ПО ЗаказВнешнийСостав.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = EDIПровайдерыЕдиницыИзмерения.ЕдиницаКлассификатора
		|			И (EDIПровайдерыЕдиницыИзмерения.Ссылка = &EDIПровайдер)
		|ГДЕ
		|	ЗаказВнешнийСостав.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("EDIПровайдер", EDIПровайдер);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПакетPOSITION = ФабрикаXDTO.Создать(POSITION);
		ПакетPOSITION.POSITIONNUMBER = ВыборкаДетальныеЗаписи.НомерСтроки;
		ПакетPOSITION.PRODUCT = ОбменДаннымиEDIСервер.ПолучитьШК(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.ШтрихКод);
		ПакетPOSITION.PRODUCTIDSUPPLIER = Формат(Число(ВыборкаДетальныеЗаписи.Код),"ЧГ=");
		ПакетPOSITION.PRODUCTIDBUYER = Формат(Число(ВыборкаДетальныеЗаписи.Код),"ЧГ=");
		//ПакетPOSITION.ORDRSPUNIT = СокрЛП(ВыборкаДетальныеЗаписи.ЕдиницаПровайдера);
		//ПакетPOSITION.PRICEWITHVAT = ВыборкаДетальныеЗаписи.Сумма;
		//ПакетPOSITION.VAT = ВыборкаДетальныеЗаписи.СтавкаНДС;
		ПакетPOSITION.PRODUCTTYPE = 1;
		ПакетPOSITION.ORDEREDQUANTITY = ВыборкаДетальныеЗаписи.Количество;
		ПакетPOSITION.ACCEPTEDQUANTITY = ВыборкаДетальныеЗаписи.Количество;
		ПакетHEAD.Position.Добавить(ПакетPosition);
	КонецЦикла;
	
	ПакетORDRSP.HEAD=ПакетHEAD;
	
	Результат = ОтправитьСообщение(ПакетORDRSP,Соединение,"ORDRSP",Тип,СчетчикОтправки,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="));
	Ошибка = ПакетORDRSP;
	Возврат Результат;
КонецФункции

Функция ОтправитьРасходнаяНакладная(Объект,EDIПровайдер,Соединение,Тип,Ошибка,СчетчикОтправки)
	КорневыеСвойства = ФабрикаXDTO.Пакеты.Получить("http://exite.com.ua/desadv").КорневыеСвойства;
	DESADV = КорневыеСвойства.Получить("DESADV").Тип;
	HEAD = КорневыеСвойства.Получить("HEAD").Тип;
	POSITION = КорневыеСвойства.Получить("POSITION").Тип;
	PACKINGSEQUENCE = КорневыеСвойства.Получить("PACKINGSEQUENCE").Тип;
	ПакетDESADV = ФабрикаXDTO.Создать(DESADV);
	
	ПакетDESADV.NUMBER = Объект.Номер;
	ПакетDESADV.DATE = Формат(Объект.Дата,"ДФ=yyyy-MM-dd");
	ПакетDESADV.DELIVERYDATE = Формат(Объект.Дата,"ДФ=yyyy-MM-dd");
	ПакетDESADV.ORDERNUMBER = СокрЛП(Объект.ДокОснование.НомерДокумента);
	ПакетDESADV.ORDERDATE = Формат(Объект.ДокОснование.ДатаДокумента,"ДФ=yyyy-MM-dd");
	ПакетDESADV.DELIVERYNOTENUMBER = Объект.Номер;
	ПакетDESADV.DELIVERYNOTEDATE = Формат(Объект.Дата,"ДФ=yyyy-MM-dd");
	ПакетHEAD = ФабрикаXDTO.Создать(HEAD);
	SUPPLIER = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.СтруктурнаяЕдиница,EDIПровайдер);
	Если SUPPLIER = Неопределено Тогда
		Ошибка = "Не указан GLN-код структурной единицы "+Объект.СтруктурнаяЕдиница;
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.SUPPLIER = SUPPLIER;
	BUYER = Объект.ДокОснование.BUYER;
	Если СокрЛП(BUYER) = "" Тогда
		Ошибка = "Не указан GLN-код BUYER ";
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.BUYER = BUYER;
	DELIVERYPLACE = ОбменДаннымиEDIСервер.ПолучитьGLN(Объект.Контрагент,EDIПровайдер);
	Если DELIVERYPLACE = Неопределено Тогда
		Ошибка = "Не указан GLN-код контрагента "+Объект.Контрагент;
		Возврат Ложь;
	КонецЕсли;	
	ПакетHEAD.DELIVERYPLACE = DELIVERYPLACE;
	ПакетHEAD.SENDER = SUPPLIER;
	ПакетHEAD.RECIPIENT = DELIVERYPLACE;
	ПакетPACKINGSEQUENCE = ФабрикаXDTO.Создать(PACKINGSEQUENCE);
	ПакетPACKINGSEQUENCE.HIERARCHICALID = 1;
	
	Запрос = Новый Запрос;
	//*Зернятко@09.07.2013 13:49:16 - В первую очередь ШК из Заказа, далее должна подбираться номенклтаура с основным флагом ШК и уже потом первая попавшаяся 
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ЗаказВнешнийСостав.Номенклатура,
	//	|	ЕСТЬNULL(РасходнаяНакладнаяСостав.Количество, 0) КАК Количество,
	//	|	ЗаказВнешнийСостав.Количество КАК КоличествоПоЗаказу,
	//	|	ЕСТЬNULL(РасходнаяНакладнаяСостав.Сумма, 0) - ЕСТЬNULL(РасходнаяНакладнаяСостав.СуммаНДС, 0) КАК Сумма,
	//	|	ЗаказВнешнийСостав.Код КАК Код,
	//	|	ЗаказВнешнийСостав.НомерСтроки,
	//	|	СправочникНоменклатура.Код КАК ШтрихКод,
	//	|	ЕСТЬNULL(EDIПровайдерыЕдиницыИзмерения.ЕдиницаПровайдера, ЗаказВнешнийСостав.ЕдиницаИзмерения) КАК ЕдиницаПровайдера,
	//	|	ЕСТЬNULL(РасходнаяНакладнаяСостав.СуммаНДС, 0) КАК СуммаНДС,
	//	|	ЕСТЬNULL(РасходнаяНакладнаяСостав.СтавкаНДС.Ставка, ЗаказВнешнийСостав.СтавкаНДС.Ставка) КАК СтавкаНДС
	//	|ИЗ
	//	|	Документ.ЗаказВнешний.Состав КАК ЗаказВнешнийСостав
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	//	|		ПО ЗаказВнешнийСостав.Номенклатура = СправочникНоменклатура.Родитель
	//	|			И (СправочникНоменклатура.ФлагОсновногоШК)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.EDIПровайдеры.ЕдиницыИзмерения КАК EDIПровайдерыЕдиницыИзмерения
	//	|		ПО ЗаказВнешнийСостав.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = EDIПровайдерыЕдиницыИзмерения.ЕдиницаКлассификатора
	//	|			И (EDIПровайдерыЕдиницыИзмерения.Ссылка = &EDIПровайдер)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
	//	|		ПО (РасходнаяНакладнаяСостав.Ссылка.ДокОснование = ЗаказВнешнийСостав.Ссылка)
	//	|			И (РасходнаяНакладнаяСостав.Номенклатура = ЗаказВнешнийСостав.Номенклатура)
	//	|			И (РасходнаяНакладнаяСостав.Ссылка = &Ссылка)
	//	|ГДЕ
	//	|	ЗаказВнешнийСостав.Ссылка = &Заказ";
 	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказВнешнийСостав.Номенклатура КАК Номенклатура,
		|	СправочникНоменклатура.Код КАК ШтрихКод,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ФлагОсновногоШК
		|			ТОГДА 1
		|		КОГДА СправочникНоменклатура.Ссылка = ЗаказВнешнийСостав.Номенклатура
		|			ТОГДА -1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приоритет
		|ПОМЕСТИТЬ ШКНоменклатуры
		|ИЗ
		|	Документ.ЗаказВнешний.Состав КАК ЗаказВнешнийСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (ЗаказВнешнийСостав.Номенклатура = СправочникНоменклатура.Родитель
		|				ИЛИ ЗаказВнешнийСостав.Номенклатура = СправочникНоменклатура.Ссылка)
		|ГДЕ
		|	ЗаказВнешнийСостав.Ссылка = &Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШКНоменклатуры.Номенклатура,
		|	МИНИМУМ(ШКНоменклатуры.ШтрихКод) КАК ШтрихКод
		|ПОМЕСТИТЬ ПриоритетнейшиеШКНоменклатуры
		|ИЗ
		|	ШКНоменклатуры КАК ШКНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ШКНоменклатуры.Номенклатура КАК Номенклатура,
		|			МАКСИМУМ(ШКНоменклатуры.Приоритет) КАК Приоритет
		|		ИЗ
		|			ШКНоменклатуры КАК ШКНоменклатуры
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ШКНоменклатуры.Номенклатура) КАК МаксимальныеПриоритетыШК
		|		ПО ШКНоменклатуры.Номенклатура = МаксимальныеПриоритетыШК.Номенклатура
		|			И ШКНоменклатуры.Приоритет = МаксимальныеПриоритетыШК.Приоритет
		|
		|СГРУППИРОВАТЬ ПО
		|	ШКНоменклатуры.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказВнешнийСостав.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ЗаказВнешнийСостав.Штрихкод = """"
		|			ТОГДА ПриоритетнейшиеШКНоменклатуры.ШтрихКод
		|		ИНАЧЕ ЗаказВнешнийСостав.Штрихкод
		|	КОНЕЦ КАК ШтрихКод,
		|	ВЫБОР
		|		КОГДА ЗаказВнешнийСостав.Штрихкод = """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ШКИзЗаказа,
		|	ЕСТЬNULL(РасходнаяНакладнаяСостав.Количество, 0) КАК Количество,
		|	ЗаказВнешнийСостав.Количество КАК КоличествоПоЗаказу,
		|	ЕСТЬNULL(РасходнаяНакладнаяСостав.Сумма, 0) - ЕСТЬNULL(РасходнаяНакладнаяСостав.СуммаНДС, 0) КАК Сумма,
		|	ЗаказВнешнийСостав.Код КАК Код,
		|	ЗаказВнешнийСостав.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(EDIПровайдерыЕдиницыИзмерения.ЕдиницаПровайдера, ЗаказВнешнийСостав.ЕдиницаИзмерения) КАК ЕдиницаПровайдера,
		|	ЕСТЬNULL(РасходнаяНакладнаяСостав.СуммаНДС, 0) КАК СуммаНДС,
		|	ЕСТЬNULL(РасходнаяНакладнаяСостав.СтавкаНДС.Ставка, ЗаказВнешнийСостав.СтавкаНДС.Ставка) КАК СтавкаНДС
		|ИЗ
		|	Документ.ЗаказВнешний.Состав КАК ЗаказВнешнийСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.EDIПровайдеры.ЕдиницыИзмерения КАК EDIПровайдерыЕдиницыИзмерения
		|		ПО ЗаказВнешнийСостав.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = EDIПровайдерыЕдиницыИзмерения.ЕдиницаКлассификатора
		|			И (EDIПровайдерыЕдиницыИзмерения.Ссылка = &EDIПровайдер)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Состав КАК РасходнаяНакладнаяСостав
		|		ПО (РасходнаяНакладнаяСостав.Ссылка.ДокОснование = ЗаказВнешнийСостав.Ссылка)
		|			И (РасходнаяНакладнаяСостав.Номенклатура = ЗаказВнешнийСостав.Номенклатура)
		|			И (РасходнаяНакладнаяСостав.Ссылка = &Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриоритетнейшиеШКНоменклатуры КАК ПриоритетнейшиеШКНоменклатуры
		|		ПО ЗаказВнешнийСостав.Номенклатура = ПриоритетнейшиеШКНоменклатуры.Номенклатура
		|ГДЕ
		|	ЗаказВнешнийСостав.Ссылка = &Заказ";
    ///Зернятко@ - конец блока 
		

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка.ДокОснование);
	Запрос.УстановитьПараметр("EDIПровайдер", EDIПровайдер);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПакетPOSITION = ФабрикаXDTO.Создать(POSITION);
		ПакетPOSITION.POSITIONNUMBER = ВыборкаДетальныеЗаписи.НомерСтроки;
		//*Зернятко@09.07.2013 13:49:16 - ШК из заказа
		//ПакетPOSITION.PRODUCT = ?(ВыборкаДетальныеЗаписи.ШтрихКод = NULL,ОбменДаннымиEDIСервер.ПолучитьШК(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.Код),ОбменДаннымиEDIСервер.ПолучитьШК(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.ШтрихКод));
		Если ВыборкаДетальныеЗаписи.ШКИзЗаказа = Истина Тогда
			ПакетPOSITION.PRODUCT = ВыборкаДетальныеЗаписи.ШтрихКод;
		ИНаче
			ПакетPOSITION.PRODUCT = ?(ВыборкаДетальныеЗаписи.ШтрихКод = NULL,ОбменДаннымиEDIСервер.ПолучитьШК(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.Код),ОбменДаннымиEDIСервер.ПолучитьШК(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.ШтрихКод));
		КонецЕсли;	
		///Зернятко@ - конец блока 
		ПакетPOSITION.PRODUCTIDSUPPLIER = Формат(Число(ВыборкаДетальныеЗаписи.Код),"ЧГ=");
		ПакетPOSITION.PRODUCTIDBUYER = Формат(Число(ВыборкаДетальныеЗаписи.Код),"ЧГ=");
		ПакетPOSITION.DELIVEREDQUANTITY = ВыборкаДетальныеЗаписи.Количество;
		ПакетPOSITION.DELIVEREDUNIT = СокрЛП(ВыборкаДетальныеЗаписи.ЕдиницаПровайдера);
		ПакетPOSITION.ORDEREDQUANTITY = ВыборкаДетальныеЗаписи.КоличествоПоЗаказу;
		ПакетPOSITION.ORDERUNIT = СокрЛП(ВыборкаДетальныеЗаписи.ЕдиницаПровайдера);
		ПакетPOSITION.AMOUNT = ВыборкаДетальныеЗаписи.Сумма;
		ПакетPOSITION.TAXRATE = ВыборкаДетальныеЗаписи.СтавкаНДС;
		ПакетPACKINGSEQUENCE.Position.Добавить(ПакетPosition);
	КонецЦикла;
	ПакетHEAD.PACKINGSEQUENCE.Добавить(ПакетPACKINGSEQUENCE);
	
	ПакетDESADV.HEAD=ПакетHEAD;
	
	Результат = ОтправитьСообщение(ПакетDESADV,Соединение,"DESADV",Тип,СчетчикОтправки,Формат(Объект.СтруктурнаяЕдиница.Код,"ЧГ="));
	Ошибка = ПакетDESADV;
	Возврат Результат;
КонецФункции


Функция ПолучитьЕдиницуИзмерения(Номенклатура,НаименованиеЕдиницы,EDIПровайдер)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕдиницыИзмерения.Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.EDIПровайдеры.ЕдиницыИзмерения КАК EDIПровайдерыЕдиницыИзмерения
		|		ПО ЕдиницыИзмерения.ЕдиницаПоКлассификатору = EDIПровайдерыЕдиницыИзмерения.ЕдиницаКлассификатора
		|			И (EDIПровайдерыЕдиницыИзмерения.ЕдиницаПровайдера = &Наименование)
		|			И (EDIПровайдерыЕдиницыИзмерения.Ссылка = &EDIПровайдер)
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("Наименование", НаименованиеЕдиницы);
	Запрос.УстановитьПараметр("EDIПровайдер", EDIПровайдер);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции	

Функция ПолучитьСкладПроизводства()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Владелец В ИЕРАРХИИ (&Владелец)
		|	И Склады.ВидСклада = &ВидСклада";

	Запрос.УстановитьПараметр("Владелец", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница); //V
	Запрос.УстановитьПараметр("ВидСклада", Перечисления.ВидыСкладов.Производство);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции	

///////////////////////////////////////////////////////////


Функция ЗагрузитьSTATUS(XDTO,НомерДокумента) 
	Попытка
		Если XDTO.MESSAGECLASS = "ORDER" Тогда
			Ссылка = Документы.ПланируемаяПоставка.НайтиПоНомеру(XDTO.CUSTOMERICID,Дата(СтрЗаменить(XDTO.DATEIN,"-","")));
			Если Ссылка.Пустая() Тогда 
				XDTO = " Не найдена Планируемая поставка с номером: "+XDTO.CUSTOMERICID+" от "+XDTO.DATEIN;
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли XDTO.MESSAGECLASS = "ORDRSP" Тогда
			Ссылка = Документы.ЗаказВнешний.НайтиПоНомеру(XDTO.CUSTOMERICID,Дата(СтрЗаменить(XDTO.DATEIN,"-","")));
			Если Ссылка.Пустая() Тогда 
				XDTO = " Не найден Заказ в производство с номером: "+XDTO.CUSTOMERICID+" от "+XDTO.DATEIN;
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли XDTO.MESSAGECLASS = "DESADV" Тогда
			Ссылка = Документы.РасходнаяНакладная.НайтиПоНомеру(XDTO.CUSTOMERICID,Дата(СтрЗаменить(XDTO.DATEIN,"-","")));
			Если Ссылка.Пустая() Тогда 
				XDTO = " Не найдена Расходная накладная с номером: "+XDTO.CUSTOMERICID+" от "+XDTO.DATEIN;
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли XDTO.MESSAGECLASS = "RECADV" Тогда
			Ссылка = Документы.ПриходнаяНакладная.НайтиПоНомеру(XDTO.CUSTOMERICID,Дата(СтрЗаменить(XDTO.DATEIN,"-","")));
			Если Ссылка.Пустая() Тогда 
				XDTO = " Не найдена Приходная накладная с номером: "+XDTO.CUSTOMERICID+" от "+XDTO.DATEIN;
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
			
			
		Запись = РегистрыСведений.СтатусыEDI.СоздатьМенеджерЗаписи();
		Запись.Документ = Ссылка;
		Запись.Статус = Число(XDTO.STATUS)+1;
		Если XDTO.Свойства().Получить("DESCRIPTION") <> Неопределено Тогда
			Запись.ОписаниеОшибки = XDTO.DESCRIPTION;
		КонецЕсли;
		Запись.ДатаИзменения = Дата(СтрЗаменить(XDTO.DATEIN,"-","")+СтрЗаменить(XDTO.TIMEIN,":",""));
		Если XDTO.Свойства().Получить("DATEOUT") <> Неопределено И XDTO.Свойства().Получить("TIMEOUT") <> Неопределено Тогда
			Запись.ДатаИзменения = Дата(СтрЗаменить(XDTO.DATEOUT,"-","")+СтрЗаменить(XDTO.TIMEOUT,":",""));
		КонецЕсли;
		Запись.Записать();
		НомерДокумента = Ссылка.Номер;
		XDTO = Строка(Ссылка);
		Результат = Истина;
	Исключение
		XDTO = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

