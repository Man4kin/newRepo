
//{ СИТЕК БрыляковЕЮ 2014-10-08

// Стандартная проверка заполнения не умеет выводить сообщения в форму, где проверяемый объект не назначен основным реквизитом,
// поэтому был написан сей костыль имитирующий её работу. Вызывать только из обработчика ОбработкаПроверкиЗаполнения!
//
// Параметры:
//	Объект					- ЛюбойОбъект - Практический любой объект, который можно получить из ссылки методом ПолучитьОбъект()
//	ПроверяемыеРеквизиты	- Массив - Массив проверяемых реквизитов из обработчика ОбработкаПроверкиЗаполнения
//	ПутьКДанным				- Строка - Путь к представлению объекта в управляемой форме, можно без точки в конце
//
// Возвращаемое значение:
//	Булево - Результат выполнения проверки
//
Функция ПроверитьЗаполнениеОбъекта(Объект, ПроверяемыеРеквизиты, Знач ПутьКДанным = "Объект.") Экспорт 
	
	// !!!! efim
	#Если _ Тогда
		Объект = БизнесПроцессы.иж_ПриемкаТоваров.СоздатьБизнесПроцесс();
	#КонецЕсли
	// !!!!
	
	ШаблонРеквизит = НСтр("ru = 'Поле ""%1"" не заполнено'");
	ШаблонТЧ = НСтр("ru = 'Не введено ни одной строки в список ""%1""'");
	ШаблонРеквизитТЧ = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %3 списка ""%2""'");
	
	Если НЕ ПустаяСтрока(ПутьКДанным) И Прав(ПутьКДанным, 1) <> "." Тогда
		ПутьКДанным = ПутьКДанным + ".";
	КонецЕсли;
	
	Реквизиты = Новый Массив();
	ТабличныеЧасти = Новый Соответствие();
	
	Для каждого ПутьКРеквизиту Из ПроверяемыеРеквизиты Цикл
		
		ПутьКРеквизиту = Izh_СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКРеквизиту, ".",, Ложь);
		Если ПутьКРеквизиту.Количество() = 1 Тогда
			
			Реквизиты.Добавить(ПутьКРеквизиту[0]);
			
		ИначеЕсли ПутьКРеквизиту.Количество() = 2 Тогда
			
			ИмяТЧ = ПутьКРеквизиту[0];
			ИмяРеквизита = ПутьКРеквизиту[1];
			
			ТЧ = ТабличныеЧасти[ИмяТЧ];
			Если ТЧ = Неопределено Тогда
				ТЧ = Новый Массив();
				ТабличныеЧасти.Вставить(ИмяТЧ, ТЧ);
			КонецЕсли;
			
			ТЧ.Добавить(ИмяРеквизита);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектМетаданные = Объект.Метаданные();
	Ошибки = Неопределено;
	
	Для каждого Реквизит Из Реквизиты Цикл
		Если НЕ ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			
			Если ОбъектМетаданные.ТабличныеЧасти.Найти(Реквизит) = Неопределено Тогда
				ТекстСообщения = ШаблонРеквизит;
			Иначе
				ТекстСообщения = ШаблонТЧ;
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПредставлениеРеквизита(ОбъектМетаданные, Реквизит));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДанным + Реквизит,
				ТекстСообщения
			);
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТабличнаяЧасть Из ОбъектМетаданные.ТабличныеЧасти Цикл
		
		Реквизиты = ТабличныеЧасти[ТабличнаяЧасть.Имя];
		Если Реквизиты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из Объект[ТабличнаяЧасть.Имя] Цикл
			Для каждого Реквизит Из Реквизиты Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ[Реквизит]) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонРеквизитТЧ,
						ПредставлениеРеквизита(ТабличнаяЧасть, Реквизит),
						ТабличнаяЧасть.Представление(),
						СтрокаТЧ.НомерСтроки
					);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						ПутьКДанным + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%2[%3].%1",
							Реквизит,
							ТабличнаяЧасть.Имя,
							XMLСтрока(СтрокаТЧ.НомерСтроки - 1)
						),
						ТекстСообщения
					);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Отказ = Ложь;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	ПроверяемыеРеквизиты.Очистить();
	
	Возврат НЕ Отказ;
	
КонецФункции

Функция ПредставлениеРеквизита(ОбъектМетаданные, ИмяРеквизита)
	
	// !!!! efim
	#Если _ Тогда
		ОбъектМетаданные = Метаданные.БизнесПроцессы.иж_ПриемкаТоваров;
	#КонецЕсли
	// !!!!
	
	Для каждого Реквизит Из ОбъектМетаданные.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			Возврат Реквизит.Представление();
		КонецЕсли;
	КонецЦикла;
	
	НаборыРеквизитов = Новый Массив();
	НаборыРеквизитов.Добавить(ОбъектМетаданные.Реквизиты);
	Попытка
		НаборыРеквизитов.Добавить(ОбъектМетаданные.ТабличныеЧасти);
	Исключение
	КонецПопытки;
	
	Для каждого Реквизиты Из НаборыРеквизитов Цикл
		Реквизит = Реквизиты.Найти(ИмяРеквизита);
		Если Реквизит <> Неопределено Тогда
			Возврат Реквизит.Представление();
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции


Процедура УстановитьОтборПостроителя(Построитель, Знач Отбор) Экспорт 
	
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") ИЛИ ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив")
			ИЛИ ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
			
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
				Значение = ЭлементОтбора.Значение;
			ИначеЕсли ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
				Значение = Новый СписокЗначений();
				Для каждого Элемент Из ЭлементОтбора.Значение Цикл
					Значение.Добавить(Элемент);
				КонецЦикла;
			Иначе
				Значение = Новый СписокЗначений();
				Значение.ЗагрузитьЗначения(ЭлементОтбора.Значение);
			КонецЕсли;
			
			НовыйОтбор = Построитель.Отбор.Добавить(ЭлементОтбора.Ключ);
			НовыйОтбор.ВидСравнения = ВидСравнения.ВСписке;
			НовыйОтбор.Значение = Значение;
			НовыйОтбор.Использование = Истина;
			
		Иначе
			
			Построитель.Отбор.Добавить(ЭлементОтбора.Ключ).Установить(ЭлементОтбора.Значение);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьВТ(Знач МенеджерВТ, Знач ИмяВременнойТаблицы, Знач Поля = "") Экспорт 
	
	Если ПустаяСтрока(Поля) Тогда
		Поля = "*";
	Иначе
		СписокПолей = Новый Структура(Поля);
		Поля = "";
		Для каждого Поле Из СписокПолей Цикл
			Поля = Поля + ИмяВременнойТаблицы + "." + Поле.Ключ + ", ";
		КонецЦикла;
		Поля = Лев(Поля, СтрДлина(Поля) - 2);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ " + Поля + " ИЗ " + ИмяВременнойТаблицы;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// СИТЕК БрыляковЕЮ 2014-10-08 }

// {ВетровИА 2015-08-04 Обращение 0000134688

// Функция - Получить данные по акционному товару
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура для которой необходимо получить информацияю по скидке.	 
//  Дата	- 	Дата -  Дата на которую необходимо получить информацию.
// Возвращаемое значение:
//  Соответствие - Данные по акции(Номенклатура, ДатаНачала, ДатаОкончания, Цена, ТипПромо)
// Если акции по указанной 
Функция ПолучитьДанныеПоАкционномуТовару(Номенклатура, Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПромоАкцииНоменклатура.Номенклатура КАК Номенклатура,
	               |	ПромоАкции.ДатаНачала КАК ДатаНачала,
	               |	ПромоАкции.ДатаОкончания КАК ДатаОкончания,
	               |	МИНИМУМ(ПромоАкцииНоменклатура.Цена) КАК Цена,
	               |	ПромоАкцииПороги.ТипПромо КАК ТипПромо
	               |ИЗ
	               |	РегистрСведений.ПромоАкции КАК ПромоАкции
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
	               |		ПО ПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
	               |			И ПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
	               |			И ПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
	               |			И ПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
	               |			И ПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
	               |			И (НАЧАЛОПЕРИОДА(ПромоАкции.ДатаНачала, ДЕНЬ) <= &Дата)
	               |			И (КОНЕЦПЕРИОДА(ПромоАкции.ДатаОкончания, ДЕНЬ) >= &Дата)
	               |			И (ПромоАкции.ФлагОкончания = ЛОЖЬ)
	               |			И (ПромоАкции.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииПороги КАК ПромоАкцииПороги
	               |		ПО ПромоАкции.IDПромо = ПромоАкцииПороги.IDПромо
	               |			И ПромоАкции.IDКомпоненты = ПромоАкцииПороги.IDКомпоненты
	               |			И ПромоАкции.IDГруппы = ПромоАкцииПороги.IDГруппы
	               |			И ПромоАкции.IDДеталей = ПромоАкцииПороги.IDДеталей
	               |ГДЕ
	               |	ПромоАкцииНоменклатура.Номенклатура = &Номенклатура
	               |	И ПромоАкцииНоменклатура.Цена <> 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПромоАкцииНоменклатура.Номенклатура,
	               |	ПромоАкции.ДатаНачала,
	               |	ПромоАкции.ДатаОкончания,
	               |	ПромоАкцииПороги.ТипПромо";
				   
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		НоменклатураАкция = Новый Структура;
		НоменклатураАкция.Вставить("Номенклатура", РезультатЗапроса.Номенклатура);
		НоменклатураАкция.Вставить("ДатаНачала", РезультатЗапроса.ДатаНачала);
		НоменклатураАкция.Вставить("ДатаОкончания", РезультатЗапроса.ДатаОкончания);
		НоменклатураАкция.Вставить("Цена", РезультатЗапроса.Цена);
		НоменклатураАкция.Вставить("ТипПромо", РезультатЗапроса.ТипПромо);	
		Возврат НоменклатураАкция;
	Иначе
		Возврат Неопределено;
	КонецЕсли	
КонецФункции

// ВетровИА 2015-08-04 Обращение 0000134688}

//dps+ 15,10,05 функция подбора единицы измерения
// Функция возвращает Единицу измерения по Наименованию и Владельцу
// Если у Владельца несколько Единиц измерения с таким наименованием, то возвращается первая не помеченная на удаление.
// Параметры:
//  Наименование		 - 	 Строка, по которой осуществляется поиск Единицы измерения. 
//  Владелец			 - 	 Номенклатура, у которой ищется Единица измерения. 
//  ТочноеСоответствие	 - 	 Булево. Необязательный параметр. Если истина, то ищется точное соответствие Наименования, иначе "Подобно". По умолчанию Истина. 
// Возвращаемое значение:
//   СправочникСсылка.ЕдиницыИзмерения. Если ничего не найдено, возвращается пустая ссылка. 
Функция ПолучитьЕдиницуИзмеренияПоНаименованию(Наименование, Владелец, ТочноеСоответствие = Истина)  Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	|	ЕдиницыИзмерения.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕдиницыИзмерения.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Наименование "+?(ТочноеСоответствие,"=","ПОДОБНО")+" &Наименование
	|	И ЕдиницыИзмерения.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Наименование));
	Запрос.УстановитьПараметр("Владелец", Владелец);
	рез = Запрос.Выполнить().Выбрать();
	Если рез.Следующий() Тогда 
		Возврат рез.Ссылка;
	Иначе 
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка(); 
	КонецЕсли;
КонецФункции
//dps- 15,10,05 функция подбора единицы измерения

//dps+ 15.11.03 144016 костыль по удалению шт из наименования.
//
// Параметры:
//  Ном - Тип СправочникСсылка.Номенклатура либо Строка.
// Возвращаемое значение:
// Строка - Возвращает Наименование без "ХХХшт", где ХХХ КоэффициентЯщика основоного поставщика из РС НоменклатураКонтрагента.  
Функция ВернутьНаименованиеБезШТ(Ном)  Экспорт
	Если ТипЗнч(Ном) = Тип("СправочникСсылка.Номенклатура") Тогда 
		Наименование = Ном.Наименование;
	ИначеЕсли  ТипЗнч(Ном) = Тип("Строка") Тогда 
		Наименование = Ном
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	КолШТ = СтрЧислоВхождений(Наименование,"шт");
	Если КолШТ > 0 Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НоменклатураКонтрагента.КоэффициентЯщика КАК Кол
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
		|ГДЕ
		|	НоменклатураКонтрагента.Номенклатура = &Номенклатура
		|	И НоменклатураКонтрагента.ОсновнойПоставщик
		|	И НоменклатураКонтрагента.КоэффициентЯщика <> 0";
		Запрос.УстановитьПараметр("Номенклатура", Ном);
		результатЗапроса = Запрос.Выполнить().Выбрать();
		Если результатЗапроса.Следующий() Тогда 
			стрКоличество = Формат(результатЗапроса.Кол,"ЧГ=");                    
			Возврат СтрЗаменить(Наименование,стрКоличество+"шт","");
		Иначе 
			Возврат Наименование;
		КонецЕсли;
	Иначе 
		Возврат Наименование;
	КонецЕсли;
КонецФункции
//dps- 15.11.03 144016 костыль по удалению шт из наименования.