
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Общие

Функция ПолучитьИнформациюОбОшибке(Знач ИнформацияОбОшибке, ИмяСобытия = "WebService SMS")
	
	ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Если ПараметрыСеанса.Отладка Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
КонецФункции

Функция ПолучитьПрокси(СтруктурнаяЕдиница)

	ВебСервис = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВебСервисSMS, СтруктурнаяЕдиница);
	
	Если Не ЗначениеЗаполнено(ВебСервис) Тогда
		Сообшение = "Проверьте настройки подключения к SIS";
		ВызватьИсключение(Сообшение);
	ИначеЕсли ТипЗнч(ВебСервис) = Тип("Строка") Тогда
		URL = ВебСервис;
		Имя = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПользовательВебСервисSMS, СтруктурнаяЕдиница);
		Пароль = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПарольВебСервисSMS, СтруктурнаяЕдиница);
	Иначе
		URL = ВебСервис.URL;
		Имя = ВебСервис.Имя;
		Пароль = ВебСервис.Пароль;
	КонецЕсли;	
	
	Попытка
		Определение = Новый WSОпределения(URL, Имя, Пароль);
		URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси = Новый WSПрокси(Определение, URIПространстваИмен, ИмяСервиса, ИмяТочки);
		Прокси.Пользователь = Имя;
		Прокси.Пароль = Пароль;
	Исключение
		Сообшение = "WebService SMS недоступен";
		//Сообшение = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(), "WebService SMS");
		ВызватьИсключение(Сообшение);
	КонецПопытки;

	Возврат Прокси;
КонецФункции

Функция ВэбсервисДоступен(Параметры)
	
	//ПараметрыПакета = Параметры.ПараметрыПакета;
	//
	//ПакетPacket = ФабрикаXDTO.Создать(ПараметрыПакета.ТипPacket);
	//ПакетPacket.Source = ПараметрыПакета.Источник;
	//ПакетPacket.Version = ПараметрыПакета.Версия;
	//ПакетPacket.Command = "GetDBInfo";//"DatabaseInfo";	//пока так
	//
	//Рез = ОтправитьПакет(ПакетPacket, Параметры.Прокси, Параметры.ОписаниеОшибки);
	Попытка
		Рез = Параметры.Прокси.Ping();	
	Исключение
		Рез = Ложь;
	КонецПопытки;
	
	Возврат Рез;
КонецФункции

Функция ПолучитьЭлементДанныхXDTO(СтрокаXML, ИмяТипа)
	
	Если Не ЗначениеЗаполнено(СтрокаXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ЧтениеXML.ПервоеОбъявление();
	ЧтениеXML.Прочитать();
	
	ЭлементXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("http://1c-astor.ru/SMS", ИмяТипа));
	
	Возврат ЭлементXDTO;
КонецФункции

Функция ПроверитьРезультатОтправкиПакета(Результат)
	
	Если Результат = Неопределено Или Результат = "" Или Найти(Результат, "Events") = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	XDTOEvents = ПолучитьЭлементДанныхXDTO(Результат, "Events");
	
	Если XDTOEvents.Event = Неопределено Или XDTOEvents.Event.Count() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяСобытия = "WebService SMS";
	
	Рез = Истина;
	
	Для каждого Событие Из XDTOEvents.Event Цикл
		ВремяСообщения = Событие.EventTime;
		ТипСообщения = Событие.Type;
		ТекстСообщения = Событие.Message;
		Если ТипСообщения = "2" OR ТипСообщения = "WARN" OR ТипСообщения = "WARNING" OR ТипСообщения = "WAR" Тогда
			Уровень = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли ТипСообщения = "3" OR ТипСообщения = "ERR" OR ТипСообщения = "ERROR" Тогда
			Уровень = УровеньЖурналаРегистрации.Ошибка;
			Рез = Ложь;
		ИначеЕсли ТипСообщения = "4" Тогда	//тоже error
			Уровень = УровеньЖурналаРегистрации.Ошибка;
			Рез = Ложь;
		Иначе
			Уровень = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,,,ТекстСообщения);
	КонецЦикла;
	
	Return Рез;
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Выгрузка вспомогательные

Функция ПроверитьРеквизитыНоменклатуры(НаборДанных)

	//вот такая вот проверка допреквизитов...
	СрокХранения = Неопределено;
	ПроцентСпирта = Неопределено;
	МаксимальныйПроцентСкидки = Неопределено;
	МинимальнаяЦена = Неопределено;
	Попытка
		СрокХранения = Число(НаборДанных.СрокХранения);
		ПроцентСпирта = Число(НаборДанных.ПроцентСпирта);
		МаксимальныйПроцентСкидки = Число(НаборДанных.МаксимальныйПроцентСкидки);
		МинимальнаяЦена = Число(НаборДанных.МинимальнаяЦена);
		ОшибкаДопРеквизитов = Ложь;
	Исключение
		ОписаниеОшибки = "У товара """ + НаборДанных.Ссылка + """ некорректно заполнен реквизит ";
		Если СрокХранения = Неопределено Тогда
			ОписаниеОшибки = ОписаниеОшибки + "СрокХранения";
		ИначеЕсли ПроцентСпирта = Неопределено Тогда
			ОписаниеОшибки = ОписаниеОшибки + "ПроцентСпирта";
		ИначеЕсли МаксимальныйПроцентСкидки = Неопределено Тогда
			ОписаниеОшибки = ОписаниеОшибки + "МаксимальныйПроцентСкидки";
		ИначеЕсли МинимальнаяЦена = Неопределено Тогда
			ОписаниеОшибки = ОписаниеОшибки + "МинимальнаяЦена";
		КонецЕсли;
		ЗаписьЖурналаРегистрации("WebService SMS", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		ОшибкаДопРеквизитов = Истина;
	КонецПопытки;
	
	Если ОшибкаДопРеквизитов Тогда
		Рез = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(НаборДанных.ЕдиницаИзмерения) Тогда	//товар без основной единицы измерения
		Рез = Ложь;
		ОписаниеОшибки = "У товара """ + НаборДанных.Ссылка + """ нет основной единицы измерения";
		ЗаписьЖурналаРегистрации("WebService SMS", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	Иначе
		Рез = Истина;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции
Функция ПолучитьИменаИзмеренийОсновногоОтбораРегистраСведенийСтрокой(ИмяРегистраСведений)

	ОбъектМетаданных = Метаданные.РегистрыСведений.Найти(ИмяРегистраСведений);
	Если ОбъектМетаданных = Неопределено Тогда
		Рез = "";
	Иначе
		Если ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
			Рез = ", Период";
		Иначе
			Рез = "";
		КонецЕсли;
		Для каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Если Измерение.ОсновнойОтбор Тогда
				Рез = Рез + ", " + Измерение.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Сред(Рез, 3);
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Выгрузка

Функция ПолучитьТипыИзмененныхОбъектов(УзелСсылка)

	ТекстШаблонаЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	""ТаблицаИзменений"" КАК Поле1
		|ИЗ
		|	ТаблицаИзменений.Изменения КАК тИзменения
		|ГДЕ
		|	тИзменения.Узел = &Узел";
	ТекстОбъединить = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.ВесовойТовар"				) + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.ККМ"							) + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.КлассификаторЕдиницИзмерения") + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.КредитныеКарты"				) + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.Номенклатура"				) + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.Организации"					) + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.ПерсоналККМ"					) + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.ПрофилиПользователейККМ"		) + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.Склады"						) + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.СтавкиНДС"					) + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Справочник.СтруктурныеЕдиницы"			) + ТекстОбъединить;
	//ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "ПланВидовХарактеристик.ХарактеристикиНоменклатуры") + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "РегистрСведений.ПромоАкции"				) + ТекстОбъединить;
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "РегистрСведений.ЦеныНоменклатуры"		);
	
	//пока постараемся поддержать совместимость с типовой
	Если Не Метаданные.Константы.Найти("ЗапасВремениВыгрузкиЦенВТорговоеОборудование") = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединить;
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстШаблонаЗапроса, "ТаблицаИзменений", "Константа.ЗапасВремениВыгрузкиЦенВТорговоеОборудование");
	КонецЕсли;
	//
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", УзелСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Рез = Новый Массив;
	Иначе
		Рез = Результат.Выгрузить().ВыгрузитьКолонку(0);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции
Функция ИнициализироватьПараметрыВыгрузки(УзелСсылка, НомерСообщения)

	СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	Прокси = ПолучитьПрокси(СтруктурнаяЕдиница);
	
	МаксимальныйРазмерПакета = УзелСсылка.МаксимальныйРазмерПакета;
	КоэффициентУменьшенияПакетаПриОшибке = УзелСсылка.КоэффициентУменьшенияПакетаПриОшибке;
	
	сткПараметрыПакета = Новый Структура;
	сткПараметрыПакета.Вставить("ТипPacket", ФабрикаXDTO.Тип("http://1c-astor.ru/SMS", "Packet"));
	сткПараметрыПакета.Вставить("Источник", XMLСтрока(ПланыОбмена.ОбменРБД.ЭтотУзел()));
	сткПараметрыПакета.Вставить("Версия", "1.0");
	сткПараметрыПакета.Вставить("ИмяОбъекта", "");	//подставим когда будем выгружать объект
	сткПараметрыПакета.Вставить("ИмяАтрибута", "");	//подставим когда будем выгружать объект
	сткПараметрыПакета.Вставить("МаксимальныйРазмерПакета", ?(МаксимальныйРазмерПакета = 0, 1000, МаксимальныйРазмерПакета));
	сткПараметрыПакета.Вставить("КоэффициентУменьшенияПакетаПриОшибке", ?(КоэффициентУменьшенияПакетаПриОшибке < 2, 10, КоэффициентУменьшенияПакетаПриОшибке));
	
	сткПараметры = Новый Структура;
	сткПараметры.Вставить("Прокси", Прокси);
	сткПараметры.Вставить("УзелСсылка", УзелСсылка);
	сткПараметры.Вставить("НомерСообщения", НомерСообщения);
	сткПараметры.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	сткПараметры.Вставить("НачальныйИндекс", 0);
	сткПараметры.Вставить("КонечныйИндекс", 0);
	сткПараметры.Вставить("МаксимальныйИндекс", 0);
	сткПараметры.Вставить("КоличествоОтправленныхОбъектов", 0);
	сткПараметры.Вставить("КоличествоНеОтправленныхОбъектов", 0);
	сткПараметры.Вставить("ОписаниеОшибки", "");
	сткПараметры.Вставить("МассивОшибок", Новый Массив);
	сткПараметры.Вставить("ПараметрыПакета", сткПараметрыПакета);
	
	Возврат сткПараметры;
КонецФункции

Функция ОтправитьПакет(Package, Прокси, Результат)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Package, "Packet");
	Данные = ЗаписьXML.Закрыть();
	Попытка
		Результат = Прокси.SendPacket(Данные);
		Рез = ПроверитьРезультатОтправкиПакета(Результат);
	Исключение
		Результат = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке(), "WebService SMS");
		Рез = Ложь;
	КонецПопытки;
	
	Возврат Рез;
КонецФункции

Функция ВыгрузитьПакет(мДанные, Параметры, мИндексыНеотправленныхЭлементов)
	
	ПараметрыПакета = Параметры.ПараметрыПакета;
	
	ПакетPacket = ФабрикаXDTO.Создать(ПараметрыПакета.ТипPacket);
	ПакетPacket.Source = ПараметрыПакета.Источник;
	ПакетPacket.Version = ПараметрыПакета.Версия;
	ПакетPacket.ObjectName = ПараметрыПакета.ИмяОбъекта;
	
	Для Сч = Параметры.НачальныйИндекс По Параметры.КонечныйИндекс Цикл
		ПакетPacket[ПараметрыПакета.ИмяАтрибута].Добавить(мДанные[Сч].ПакетДанных);	
	КонецЦикла;
	
	Результат = ОтправитьПакет(ПакетPacket, Параметры.Прокси, Параметры.ОписаниеОшибки);
	
	ПакетPacket = Неопределено;
	
	Если Результат = Истина Тогда
		Если Параметры.МаксимальныйИндекс = Параметры.КонечныйИндекс Тогда	//выгрузил что могли
			РазмерСледующегоПакета = 0;
		Иначе
			Параметры.НачальныйИндекс = Параметры.КонечныйИндекс + 1;	//следующий диапазон
			РазмерСледующегоПакета = Мин(ПараметрыПакета.МаксимальныйРазмерПакета, Параметры.МаксимальныйИндекс - Параметры.НачальныйИндекс + 1);
		КонецЕсли; 
	Иначе
		Если Параметры.НачальныйИндекс = Параметры.КонечныйИндекс Тогда	//пытались отправить 1 объект, не получилось
			мИндексыНеотправленныхЭлементов.Добавить(Параметры.НачальныйИндекс);
			
			Если Параметры.МаксимальныйИндекс = Параметры.НачальныйИндекс Тогда	//выгрузил что могли
				РазмерСледующегоПакета = 0;
			Иначе
				Параметры.НачальныйИндекс = Параметры.НачальныйИндекс + 1;	//продолжим со следующего
				РазмерСледующегоПакета = Мин(ПараметрыПакета.МаксимальныйРазмерПакета, Параметры.МаксимальныйИндекс - Параметры.НачальныйИндекс + 1);	//увеличим до максимально допустимого
			КонецЕсли; 
		Иначе	//уменьшим размер пакета
			//Параметры.НачальныйИндекс = Параметры.НачальныйИндекс;	//оставляем какой был
			РазмерСледующегоПакета = Макс(Цел((Параметры.КонечныйИндекс - Параметры.НачальныйИндекс) / ПараметрыПакета.КоэффициентУменьшенияПакетаПриОшибке), 1);
		КонецЕсли;
	КонецЕсли;
	
	Если РазмерСледующегоПакета > 0 Тогда
		Параметры.КонечныйИндекс = Параметры.НачальныйИндекс + РазмерСледующегоПакета - 1;
		ВыгрузитьПакет(мДанные, Параметры, мИндексыНеотправленныхЭлементов);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции
Функция ЗарегистрироватьИзмененияПовторно(мДанные, Параметры, мИндексыНеотправленныхЭлементов)

	КоличествоНеОтправленныхОбъектов = мИндексыНеотправленныхЭлементов.Количество();
	Параметры.КоличествоНеОтправленныхОбъектов = Параметры.КоличествоНеОтправленныхОбъектов + КоличествоНеОтправленныхОбъектов;
	Параметры.КоличествоОтправленныхОбъектов = Параметры.КоличествоОтправленныхОбъектов + Параметры.МаксимальныйИндекс + 1 - КоличествоНеОтправленныхОбъектов;

	Для каждого Инд Из мИндексыНеотправленныхЭлементов Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелСсылка, мДанные[Инд].Объект);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ОтправитьКлассификаторЕдиницИзмерения(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторЕдиницИзмеренияИзменения.Ссылка,
		|	КлассификаторЕдиницИзмерения.Код,
		|	КлассификаторЕдиницИзмерения.Наименование,
		|	ВЫБОР
		|		КОГДА КлассификаторЕдиницИзмерения.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ КлассификаторЕдиницИзмерения.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения.Изменения КАК КлассификаторЕдиницИзмеренияИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|		ПО КлассификаторЕдиницИзмеренияИзменения.Ссылка = КлассификаторЕдиницИзмерения.Ссылка
		|ГДЕ
		|	КлассификаторЕдиницИзмеренияИзменения.Узел = &Узел
		|	И КлассификаторЕдиницИзмеренияИзменения.НомерСообщения = &НомерСообщения";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "Unit";
	Параметры.ПараметрыПакета.ИмяОбъекта = "КлассификаторЕдиницИзмерения";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
		ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		Если Выборка.ПометкаУдаления = Ложь Тогда
			ПакетДанных.ID = Выборка.Код;
			ПакетДанных.Name = Выборка.Наименование;
		КонецЕсли;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции
Функция ОтправитьСтруктурныеЕдиницы(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницыИзменения.Ссылка,
		|	СтруктурныеЕдиницы.Код,
		|	СтруктурныеЕдиницы.Наименование,
		|	ВЫБОР
		|		КОГДА СтруктурныеЕдиницы.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ СтруктурныеЕдиницы.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы.Изменения КАК СтруктурныеЕдиницыИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО СтруктурныеЕдиницыИзменения.Ссылка = СтруктурныеЕдиницы.Ссылка
		|ГДЕ
		|	СтруктурныеЕдиницыИзменения.Узел = &Узел
		|	И СтруктурныеЕдиницыИзменения.НомерСообщения = &НомерСообщения
		|	И (СтруктурныеЕдиницы.Ссылка В ИЕРАРХИИ (&СтруктурнаяЕдиница)
		|			ИЛИ СтруктурныеЕдиницы.Ссылка ЕСТЬ NULL )";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.СтруктурнаяЕдиница);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "Store";
	Параметры.ПараметрыПакета.ИмяОбъекта = "СтруктурныеЕдиницы";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	ТипPriceListCategory = ТипДанных.Свойства.Получить("PriceListCategory").Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
		ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		Если Выборка.ПометкаУдаления = Ложь Тогда
			ПакетДанных.ID = Выборка.Код;
			ПакетДанных.Name = Выборка.Наименование;
			
			ПакетPriceListCategory = ФабрикаXDTO.Создать(ТипPriceListCategory);
			ПакетPriceListCategory.UID = "00000000-0000-0000-0000-000000000000";
			ПакетPriceListCategory.Name = "категория цен";
			
			ПакетДанных.PriceListCategory.Добавить(ПакетPriceListCategory);
		КонецЕсли;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции
Функция ОтправитьОрганизации(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОрганизацииИзменения.Ссылка,
		|	Организации.Код,
		|	Организации.Наименование,
		|	ВЫБОР
		|		КОГДА Организации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ Организации.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Организации.Изменения КАК ОрганизацииИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ОрганизацииИзменения.Ссылка = Организации.Ссылка
		|ГДЕ
		|	ОрганизацииИзменения.Узел = &Узел
		|	И ОрганизацииИзменения.НомерСообщения = &НомерСообщения";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "LegalPerson";
	Параметры.ПараметрыПакета.ИмяОбъекта = "Организации";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
		ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		Если Выборка.ПометкаУдаления = Ложь Тогда
			ПакетДанных.ID = Выборка.Код;
			ПакетДанных.Name = Выборка.Наименование;
		КонецЕсли;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции
Функция ОтправитьСклады(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыИзменения.Ссылка,
		|	Склады.Код,
		|	Склады.Наименование,
		|	ВЫБОР
		|		КОГДА Склады.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ Склады.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления,
		|	Склады.Владелец
		|ИЗ
		|	Справочник.Склады.Изменения КАК СкладыИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СкладыИзменения.Ссылка = Склады.Ссылка
		|ГДЕ
		|	СкладыИзменения.Узел = &Узел
		|	И СкладыИзменения.НомерСообщения = &НомерСообщения
		|	И (Склады.Владелец В ИЕРАРХИИ (&СтруктурнаяЕдиница)
		|				И Склады.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Розничный)
		|			ИЛИ Склады.Ссылка ЕСТЬ NULL )";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.СтруктурнаяЕдиница);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "Section";
	Параметры.ПараметрыПакета.ИмяОбъекта = "Склады";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
		ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		Если Выборка.ПометкаУдаления = Ложь Тогда
			ПакетДанных.ID = Выборка.Код;
			ПакетДанных.Name = Выборка.Наименование;
			ПакетДанных.StoreUID = XMLСтрока(Выборка.Владелец);
		КонецЕсли;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции
Функция ОтправитьСтавкиНДС(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДСИзменения.Ссылка,
		|	СтавкиНДС.Код,
		|	СтавкиНДС.Наименование,
		|	ВЫБОР
		|		КОГДА СтавкиНДС.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ СтавкиНДС.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления,
		|	СтавкиНДС.Ставка
		|ИЗ
		|	Справочник.СтавкиНДС.Изменения КАК СтавкиНДСИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
		|		ПО СтавкиНДСИзменения.Ссылка = СтавкиНДС.Ссылка
		|ГДЕ
		|	СтавкиНДСИзменения.Узел = &Узел
		|	И СтавкиНДСИзменения.НомерСообщения = &НомерСообщения";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "Tax";
	Параметры.ПараметрыПакета.ИмяОбъекта = "СтавкиНДС";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	//ТипTax = ТипPacket.Свойства.Получить("Tax").Тип;
	//ТипTaxGroup = ТипPacket.Свойства.Получить("TaxGroup").Тип;	не используется
	//ТипTaxSchema = ТипPacket.Свойства.Получить("TaxSchema").Тип;	не используется	
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
		ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		Если Выборка.ПометкаУдаления = Ложь Тогда
			ПакетДанных.ID = Выборка.Код;
			ПакетДанных.Name = Выборка.Наименование;
			ПакетДанных.TaxRate = Выборка.Ставка;
			
			//ПакетTaxGroup.UID = XMLСтрока(Выборка.Ссылка);	не используется
			//ПакетTaxGroup.ID = Выборка.Код;
			//ПакетTaxGroup.Name = Выборка.Наименование;
			//ПакетTaxGroup.IsDeleted = Выборка.ПометкаУдаления;
			//
			//ПакетTaxSchema.UID = XMLСтрока(Выборка.Ссылка);;	не используется
			//ПакетTaxSchema.TaxUID = XMLСтрока(Выборка.Ссылка);;
			//ПакетTaxSchema.TaxGroupUID = XMLСтрока(Выборка.Ссылка);;
			//ПакетTaxSchema.Level = 1;
			//ПакетTaxSchema.IsDeleted = Выборка.ПометкаУдаления;
		КонецЕсли;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции
Функция ОтправитьПрофилиПользователейККМ(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиПользователейККМИзменения.Ссылка,
		|	ПрофилиПользователейККМ.Код,
		|	ПрофилиПользователейККМ.Наименование,
		|	ВЫБОР
		|		КОГДА ПрофилиПользователейККМ.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ПрофилиПользователейККМ.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления
		|ИЗ
		|	Справочник.ПрофилиПользователейККМ.Изменения КАК ПрофилиПользователейККМИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиПользователейККМ КАК ПрофилиПользователейККМ
		|		ПО ПрофилиПользователейККМИзменения.Ссылка = ПрофилиПользователейККМ.Ссылка
		|ГДЕ
		|	ПрофилиПользователейККМИзменения.Узел = &Узел
		|	И ПрофилиПользователейККМИзменения.НомерСообщения = &НомерСообщения";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "EmployerRole";
	Параметры.ПараметрыПакета.ИмяОбъекта = "ПрофилиПользователейККМ";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
		ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		Если Выборка.ПометкаУдаления = Ложь Тогда
			ПакетДанных.ID = Выборка.Код;
			ПакетДанных.Name = Выборка.Наименование;
		КонецЕсли;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции
Функция ОтправитьКредитныеКарты(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеКартыИзменения.Ссылка,
		|	КредитныеКарты.Код КАК Код,
		|	КредитныеКарты.Наименование,
		|	ВЫБОР
		|		КОГДА КредитныеКарты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ КредитныеКарты.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА КредитныеКарты.Ссылка = ЗНАЧЕНИЕ(Справочник.КредитныеКарты.Наличные)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоНаличные,
		|	ВЫБОР
		|		КОГДА КредитныеКарты.Ссылка = ЗНАЧЕНИЕ(Справочник.КредитныеКарты.Наличные)
		|			ТОГДА ""CH""
		|		КОГДА КредитныеКарты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта)
		|			ТОГДА ""CV""
		|		КОГДА КредитныеКарты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.КредитнаяКарта)
		|			ТОГДА ""СС""
		|		КОГДА КредитныеКарты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БонусыКупоны)
		|			ТОГДА ""CP""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Тип
		|ИЗ
		|	Справочник.КредитныеКарты.Изменения КАК КредитныеКартыИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КредитныеКарты КАК КредитныеКарты
		|		ПО КредитныеКартыИзменения.Ссылка = КредитныеКарты.Ссылка
		|ГДЕ
		|	КредитныеКартыИзменения.Узел = &Узел
		|	И КредитныеКартыИзменения.НомерСообщения = &НомерСообщения";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "Payment";
	Параметры.ПараметрыПакета.ИмяОбъекта = "КредитныеКарты";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
		ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		Если Выборка.ПометкаУдаления = Ложь Тогда
			ПакетДанных.ID = Выборка.Код;
			ПакетДанных.Name = Выборка.Наименование;
			ПакетДанных.IsCash = Выборка.ЭтоНаличные;
			ПакетДанных.Type = Выборка.Тип;
		КонецЕсли;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции
Функция ОтправитьДисконтныеКарты(Параметры)	//не вызывается
	//ТипPacket = ФабрикаXDTO.Тип("http://1c-astor.ru/SMS", "Packet");
	//ТипДанных = ТипPacket.Свойства.Получить("DiscountCard").Тип;
	//ПакетPacket = ФабрикаXDTO.Создать(ТипPacket);
	//ПакетPacket.Source = Строка(ПланыОбмена.ОбменРБД.ЭтотУзел().УникальныйИдентификатор());
	//ПакетPacket.Version = "1.0";
	//ПакетPacket.ObjectName = "ДисконтныеКарты";   
	//ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
	//ПакетДанных.UID = Строка(Объект.Ссылка.УникальныйИдентификатор());
	//ПакетДанных.ID = Объект.Код;
	//ПакетДанных.DiscountCardGroupUID = Строка(Объект.Родитель.УникальныйИдентификатор());
	//ПакетДанных.Number = Объект.Код;
	//ПакетДанных.IsDeleted = Объект.ПометкаУдаления;
	//ПакетPacket.DiscountCard.Добавить(ПакетДанных);	
	//Результат = ОтправитьПакет(ПакетPacket,Прокси);
	//Ошибка = ПакетPacket;
	//Возврат Результат;
КонецФункции

Функция ОтправитьПерсоналККМ(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПерсоналККМИзменения.Ссылка,
		|	ПерсоналККМ.Код,
		|	ПерсоналККМ.Наименование,
		|	ВЫБОР
		|		КОГДА ПерсоналККМ.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ПерсоналККМ.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления,
		|	ПерсоналККМ.Владелец,
		|	ПерсоналККМ.Пароль,
		|	ПерсоналККМ.ПользовательККМ,
		|	ПерсоналККМ.Продавец,
		|	ПерсоналККМ.ПрофильПользователяККМ,
		|	ВЫБОР
		|		КОГДА ПерсоналККМ.ПрофильПользователяККМ = ЗНАЧЕНИЕ(Справочник.ПрофилиПользователейККМ.ПустаяСсылка)
		|				Или ПерсоналККМ.ПрофильПользователяККМ ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПрофильУстановлен
		|ИЗ
		|	Справочник.ПерсоналККМ.Изменения КАК ПерсоналККМИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПерсоналККМ КАК ПерсоналККМ
		|		ПО ПерсоналККМИзменения.Ссылка = ПерсоналККМ.Ссылка
		|ГДЕ
		|	ПерсоналККМИзменения.Узел = &Узел
		|	И ПерсоналККМИзменения.НомерСообщения = &НомерСообщения
		|	И (ПерсоналККМ.Владелец В ИЕРАРХИИ (&СтруктурнаяЕдиница)
		|			ИЛИ ПерсоналККМ.Владелец ЕСТЬ NULL )";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.СтруктурнаяЕдиница);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "Employer";
	Параметры.ПараметрыПакета.ИмяОбъекта = "ПерсоналККМ";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	ТипEmployerRole = ТипДанных.Свойства.Получить("EmployerRole").Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
		ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		Если Выборка.ПометкаУдаления = Ложь Тогда
			ПакетДанных.ID = Выборка.Код;
			ПакетДанных.PosCode = Выборка.Код;
			ПакетДанных.StoreUID =  XMLСтрока(Выборка.Владелец);
			ПакетДанных.Name = Выборка.Наименование;
			ПакетДанных.Password = Выборка.Пароль;
			ПакетДанных.PasswordType = "Password";
			ПакетДанных.IsCashier = Выборка.ПользовательККМ;
			ПакетДанных.IsSalesPerson = Выборка.Продавец;
			
			Если Выборка.ПрофильУстановлен Тогда
				ПакетEmployerRole = ФабрикаXDTO.Создать(ТипEmployerRole);
				ПакетEmployerRole.UID = XMLСтрока(Выборка.ПрофильПользователяККМ);
				
				ПакетДанных.EmployerRole.Добавить(ПакетEmployerRole);
			КонецЕсли;
		КонецЕсли;
			
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции
Функция ОтправитьККМ(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ККМИзменения.Ссылка,
		|	ККМ.Код,
		|	ККМ.Наименование,
		|	ВЫБОР
		|		КОГДА ККМ.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ККМ.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления,
		|	ККМ.Владелец,
		|	ККМ.Кассиры.(
		|		Кассир
		|	),
		|	ККМ.Отделы.(
		|		Отдел
		|	)
		|ИЗ
		|	Справочник.ККМ.Изменения КАК ККМИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ККМ КАК ККМ
		|		ПО ККМИзменения.Ссылка = ККМ.Ссылка
		|ГДЕ
		|	ККМИзменения.Узел = &Узел
		|	И ККМИзменения.НомерСообщения = &НомерСообщения";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "POS";
	Параметры.ПараметрыПакета.ИмяОбъекта = "ККМ";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	ТипSection = ТипДанных.Свойства.Получить("Section").Тип;
	ТипEmployer = ТипДанных.Свойства.Получить("Employer").Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
		ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		Если Выборка.ПометкаУдаления = Ложь Тогда
			ПакетДанных.ID = Выборка.Код;
			ПакетДанных.Name = Выборка.Наименование;
			ПакетДанных.StoreUID = XMLСтрока(Выборка.Владелец);
			
			ВыборкаКассиры = Выборка.Кассиры.Выбрать();
			Пока ВыборкаКассиры.Следующий() Цикл
				ПакетEmployer = ФабрикаXDTO.Создать(ТипEmployer);
				ПакетEmployer.UID = XMLСтрока(ВыборкаКассиры.Кассир);
				ПакетДанных.Employer.Добавить(ПакетEmployer);	
			КонецЦикла;
			
			ВыборкаОтделы = Выборка.Отделы.Выбрать();
			Пока ВыборкаОтделы.Следующий() Цикл
				ПакетSection = ФабрикаXDTO.Создать(ТипSection);
				ПакетSection.UID = XMLСтрока(ВыборкаОтделы.Отдел);
				ПакетДанных.Section.Добавить(ПакетSection);	
			КонецЦикла;
		КонецЕсли;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции

Функция ОтправитьНоменклатуру(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА Номенклатура.Ссылка ЕСТЬ NULL 
		|				ИЛИ Номенклатура.Группа = 1
		|			ТОГДА НоменклатураИзменения.Ссылка
		|		КОГДА Номенклатура.Транзакционный
		|			ТОГДА Номенклатура.Ссылка
		|		КОГДА Номенклатура.Родитель.Транзакционный
		|			ТОГДА Номенклатура.Родитель
		|		ИНАЧЕ НоменклатураИзменения.Ссылка
		|	КОНЕЦ КАК Ссылка,
		|	Номенклатура.Группа КАК Группа,
		|	Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА Номенклатура.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		КОГДА Номенклатура.Группа = 1
		|				ИЛИ Номенклатура.Транзакционный
		|			ТОГДА Номенклатура.ПометкаУдаления
		|		КОГДА Номенклатура.Родитель.Транзакционный
		|			ТОГДА Номенклатура.Родитель.ПометкаУдаления
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПометкаУдаления
		|ПОМЕСТИТЬ тНоменклатура
		|ИЗ
		|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО НоменклатураИзменения.Ссылка = Номенклатура.Ссылка
		|ГДЕ
		|	НоменклатураИзменения.Узел = &Узел
		|	И НоменклатураИзменения.НомерСообщения = &НомерСообщения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СлужебныеКоды.Ссылка
		|ПОМЕСТИТЬ тТипыКодовШК
		|ИЗ
		|	Справочник.СлужебныеКоды КАК СлужебныеКоды
		|ГДЕ
		|	(СлужебныеКоды.Код = ""VPLU""
		|			ИЛИ СлужебныеКоды.Код = ""PLU""
		|			ИЛИ ПОДСТРОКА(СлужебныеКоды.Код, 1, 3) = ""EAN""
		|			ИЛИ ПОДСТРОКА(СлужебныеКоды.Код, 1, 3) = ""UPC""
		|			ИЛИ ПОДСТРОКА(СлужебныеКоды.Код, 1, 3) = ""UCC""
		|			ИЛИ ПОДСТРОКА(СлужебныеКоды.Код, 1, 4) = ""ISBN"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Владелец В ИЕРАРХИИ(&СтруктурнаяЕдиница)
		|	И Склады.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Розничный)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка В ИЕРАРХИИ(&СтруктурнаяЕдиница)
		|	И СтруктурныеЕдиницы.ЭтоГруппа = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Родитель КАК Родитель,
		|	ВЫБОР
		|		КОГДА СлужебныеКоды.Код = ""VPLU""
		|			ТОГДА Номенклатура.ПрефиксPLU + Номенклатура.Код
		|		ИНАЧЕ Номенклатура.Код
		|	КОНЕЦ КАК Код
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СлужебныеКоды КАК СлужебныеКоды
		|		ПО Номенклатура.ТипКода = СлужебныеКоды.Ссылка
		|ГДЕ
		|	Номенклатура.Родитель В
		|			(ВЫБРАТЬ
		|				тНоменклатура.Ссылка
		|			ИЗ
		|				тНоменклатура)
		|	И Номенклатура.ТипКода В
		|			(ВЫБРАТЬ
		|				тТипыКодовШК.Ссылка
		|			ИЗ
		|				тТипыКодовШК КАК тТипыКодовШК)
		|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Родитель
		|ИТОГИ ПО
		|	Родитель
		//|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тНоменклатура.Ссылка,
		|	тНоменклатура.ПометкаУдаления,
		|	Номенклатура.Код КАК Код,
		|	Номенклатура.Наименование,
		|	Номенклатура.Родитель
		|ИЗ
		|	тНоменклатура КАК тНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО тНоменклатура.Ссылка = Номенклатура.Ссылка
		|ГДЕ
		|	(тНоменклатура.Группа = 1
		|			ИЛИ тНоменклатура.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тНоменклатура.Ссылка КАК Ссылка,
		|	тНоменклатура.ПометкаУдаления,
		|	Номенклатура.Код,
		|	ВЫБОР
		|		КОГДА Номенклатура.ТипКода В
		|				(ВЫБРАТЬ
		|					СлужебныеКоды.Ссылка
		|				ИЗ
		|					Справочник.СлужебныеКоды КАК СлужебныеКоды
		|				ГДЕ
		|					(СлужебныеКоды.Код = ""ITEM""
		|						ИЛИ СлужебныеКоды.Код = ""MANL""
		|						ИЛИ СлужебныеКоды.Код = ""VPLU""
		|						ИЛИ СлужебныеКоды.Код = ""PLU""
		|						ИЛИ СлужебныеКоды.Код = ""NDC""
		|						ИЛИ СлужебныеКоды.Код = ""SSCC""
		|						ИЛИ ПОДСТРОКА(СлужебныеКоды.Код, 1, 4) = ""ISBN""))
		|			ТОГДА Номенклатура.Код
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Артикул,
		|	ВЫБОР
		|		КОГДА Номенклатура.ПолноеНаименование = """"
		|			ТОГДА Номенклатура.Наименование
		|		ИНАЧЕ Номенклатура.ПолноеНаименование
		|	КОНЕЦ КАК Наименование,
		|	ВЫБОР
		|		КОГДА Номенклатура.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТоваров.Весовой)
		|			ТОГДА ""W""
		|		ИНАЧЕ ""P""
		|	КОНЕЦ КАК ТипТовара,
		|	Номенклатура.БазоваяЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА Номенклатура.Родитель.Группа = 1
		|			ТОГДА Номенклатура.Родитель
		|		ИНАЧЕ Номенклатура.Родитель.Родитель
		|	КОНЕЦ КАК Родитель,
		|	Номенклатура.СтавкаНДС,
		|	ЕСТЬNULL(тДополнительныеРеквизиты.СрокХранения, 0) КАК СрокХранения,
		|	0 КАК ВесТары,
		|	ЕСТЬNULL(тДополнительныеРеквизиты.ПроцентСпирта, 0) КАК ПроцентСпирта,
		|	ЕСТЬNULL(тДополнительныеРеквизиты.МинимальнаяЦена, -1) КАК МинимальнаяЦена,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(тДополнительныеРеквизиты.ЗапретСкидки, """") = ""Y""
		|			ТОГДА -1
		|		ИНАЧЕ ЕСТЬNULL(тДополнительныеРеквизиты.МаксимальныйПроцентСкидки, -1)
		|	КОНЕЦ КАК МаксимальныйПроцентСкидки,
		|	тЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
		|	тЕдиницыИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору,
		|	тЕдиницыИзмерения.ПометкаУдаления КАК ЕдиницыИзмеренияПометкаУдаления,
		|	ВЫБОР
		|		КОГДА Номенклатура.ТипКода В
		|				(ВЫБРАТЬ
		|					тТипыКодовШК.Ссылка
		|				ИЗ
		|					тТипыКодовШК КАК тТипыКодовШК)
		|			ТОГДА ВЫБОР
		|					КОГДА СлужебныеКоды.Код = ""VPLU""
		|						ТОГДА Номенклатура.ПрефиксPLU + Номенклатура.Код
		|					ИНАЧЕ Номенклатура.Код
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ШК
		|ИЗ
		|	тНоменклатура КАК тНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СлужебныеКоды КАК СлужебныеКоды
		|			ПО Номенклатура.ТипКода = СлужебныеКоды.Ссылка
		|		ПО тНоменклатура.Ссылка = Номенклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЕдиницыИзмерения.Ссылка КАК Ссылка,
		|			ЕдиницыИзмерения.Владелец КАК Владелец,
		|			ЕдиницыИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору,
		|			ЕдиницыИзмерения.ПометкаУдаления КАК ПометкаУдаления
		|		ИЗ
		|			Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ГДЕ
		|			ЕдиницыИзмерения.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК тЕдиницыИзмерения
		|		ПО тНоменклатура.Ссылка = тЕдиницыИзмерения.Владелец
		|			И тНоменклатура.БазоваяЕдиницаИзмерения = тЕдиницыИзмерения.ЕдиницаПоКлассификатору
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДополнительныеРеквизиты.Ссылка КАК Ссылка,
		|			МАКСИМУМ(ДополнительныеРеквизиты.СрокХранения) КАК СрокХранения,
		|			МАКСИМУМ(ДополнительныеРеквизиты.ПроцентСпирта) КАК ПроцентСпирта,
		|			МАКСИМУМ(ДополнительныеРеквизиты.МаксимальныйПроцентСкидки) КАК МаксимальныйПроцентСкидки,
		|			МАКСИМУМ(ДополнительныеРеквизиты.МинимальнаяЦена) КАК МинимальнаяЦена,
		|			МАКСИМУМ(ДополнительныеРеквизиты.ЗапретСкидки) КАК ЗапретСкидки
		|		ИЗ
		|			(ВЫБРАТЬ
		|				НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
		|				НоменклатураДополнительныеРеквизиты.Значение КАК СрокХранения,
		|				0 КАК ПроцентСпирта,
		|				0 КАК МаксимальныйПроцентСкидки,
		|				0 КАК МинимальнаяЦена,
		|				"""" КАК ЗапретСкидки
		|			ИЗ
		|				Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК ДополнительныеРеквизитыНоменклатуры
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеЗначения КАК СлужебныеЗначения
		|						ПО ДополнительныеРеквизитыНоменклатуры.Код = СлужебныеЗначения.Значение
		|							И (СлужебныеЗначения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СлужебныеЗначения.КодРеквизитаСрокХранения))
		|					ПО НоменклатураДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыНоменклатуры.Ссылка
		|			ГДЕ
		|				НоменклатураДополнительныеРеквизиты.Ссылка В
		|						(ВЫБРАТЬ
		|							тНоменклатура.Ссылка
		|						ИЗ
		|							тНоменклатура)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				НоменклатураДополнительныеРеквизиты.Ссылка,
		|				0,
		|				НоменклатураДополнительныеРеквизиты.Значение,
		|				0,
		|				0,
		|				""""
		|			ИЗ
		|				Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК ДополнительныеРеквизитыНоменклатуры
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеЗначения КАК СлужебныеЗначения
		|						ПО ДополнительныеРеквизитыНоменклатуры.Код = СлужебныеЗначения.Значение
		|							И (СлужебныеЗначения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СлужебныеЗначения.КодРеквизитаКрепость))
		|					ПО НоменклатураДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыНоменклатуры.Ссылка
		|			ГДЕ
		|				НоменклатураДополнительныеРеквизиты.Ссылка В
		|						(ВЫБРАТЬ
		|							тНоменклатура.Ссылка
		|						ИЗ
		|							тНоменклатура)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				НоменклатураДополнительныеРеквизиты.Ссылка,
		|				0,
		|				0,
		|				НоменклатураДополнительныеРеквизиты.Значение,
		|				0,
		|				""""
		|			ИЗ
		|				Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК ДополнительныеРеквизитыНоменклатуры
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеЗначения КАК СлужебныеЗначения
		|						ПО ДополнительныеРеквизитыНоменклатуры.Код = СлужебныеЗначения.Значение
		|							И (СлужебныеЗначения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СлужебныеЗначения.КодРеквизитаМаксимальныйПроцентСкидки))
		|					ПО НоменклатураДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыНоменклатуры.Ссылка
		|			ГДЕ
		|				НоменклатураДополнительныеРеквизиты.Ссылка В
		|						(ВЫБРАТЬ
		|							тНоменклатура.Ссылка
		|						ИЗ
		|							тНоменклатура)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				НоменклатураДополнительныеРеквизиты.Ссылка,
		|				0,
		|				0,
		|				0,
		|				НоменклатураДополнительныеРеквизиты.Значение,
		|				""""
		|			ИЗ
		|				Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК ДополнительныеРеквизитыНоменклатуры
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеЗначения КАК СлужебныеЗначения
		|						ПО ДополнительныеРеквизитыНоменклатуры.Код = СлужебныеЗначения.Значение
		|							И (СлужебныеЗначения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СлужебныеЗначения.КодРеквизитаМинимальнаяЦена))
		|					ПО НоменклатураДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыНоменклатуры.Ссылка
		|			ГДЕ
		|				НоменклатураДополнительныеРеквизиты.Ссылка В
		|						(ВЫБРАТЬ
		|							тНоменклатура.Ссылка
		|						ИЗ
		|							тНоменклатура)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				НоменклатураДополнительныеРеквизиты.Ссылка,
		|				0,
		|				0,
		|				0,
		|				0,
		|				НоменклатураДополнительныеРеквизиты.Значение
		|			ИЗ
		|				Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК ДополнительныеРеквизитыНоменклатуры
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеЗначения КАК СлужебныеЗначения
		|						ПО ДополнительныеРеквизитыНоменклатуры.Код = СлужебныеЗначения.Значение
		|							И (СлужебныеЗначения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СлужебныеЗначения.КодРеквизитаЗапретСкидки))
		|					ПО НоменклатураДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыНоменклатуры.Ссылка
		|			ГДЕ
		|				НоменклатураДополнительныеРеквизиты.Ссылка В
		|						(ВЫБРАТЬ
		|							тНоменклатура.Ссылка
		|						ИЗ
		|							тНоменклатура)) КАК ДополнительныеРеквизиты
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДополнительныеРеквизиты.Ссылка) КАК тДополнительныеРеквизиты
		|		ПО тНоменклатура.Ссылка = тДополнительныеРеквизиты.Ссылка
		|ГДЕ
		|	(тНоменклатура.Группа = 0
		|			ИЛИ тНоменклатура.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		//|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ тТипыКодовШК";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.СтруктурнаяЕдиница);

	Результат = Запрос.ВыполнитьПакет();
	
	РезультатГруппы = Результат[5];
	РезультатТовары = Результат[6];
	
	//Группы{
	Если Не РезультатГруппы.Пустой() Тогда
		Выборка = РезультатГруппы.Выбрать();
		КоличествоОбъектов = Выборка.Количество();
		мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
		мИндексыНеотправленныхЭлементов = Новый Массив;
		
		Параметры.ПараметрыПакета.ИмяАтрибута = "ItemGroup";
		Параметры.ПараметрыПакета.ИмяОбъекта = "Номенклатура";
		Параметры.НачальныйИндекс = 0;
		Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
		Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
		
		ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
		
		Пока Выборка.Следующий() Цикл
			ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
			ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
			ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
			Если Выборка.ПометкаУдаления = Ложь Тогда
				ПакетДанных.ID = Выборка.Код;
				ПакетДанных.Name = Выборка.Наименование;
				ПакетДанных.ParentItemGroupUID = XMLСтрока(Выборка.Родитель);
				//ПакетДанных.MaxDiscount = ;
			КонецЕсли;
			
			мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
		КонецЦикла;
		
		ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
		ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	КонецЕсли;
	//Группы}
	
	//Товары{
	Если Не РезультатТовары.Пустой() Тогда
		ВыборкаСклады = Результат[2].Выбрать();
		ВыборкаСЕ = Результат[3].Выбрать();
		ВыборкаПоШК = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Выборка = РезультатТовары.Выбрать();
		КоличествоОбъектов = Выборка.Количество();
		мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
		мИндексыНеотправленныхЭлементов = Новый Массив;
		
		Параметры.ПараметрыПакета.ИмяАтрибута = "Item";
		Параметры.ПараметрыПакета.ИмяОбъекта = "Номенклатура";
		Параметры.НачальныйИндекс = 0;
		Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
		Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
		
		ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
		ТипItemRestriction = ТипДанных.Свойства.Получить("ItemRestriction").Тип;
		ТипItemUnitSchema = ТипДанных.Свойства.Получить("ItemUnitSchema").Тип;
		ТипSaleItem = ТипItemUnitSchema.Свойства.Получить("SaleItem").Тип;
		ТипBarcode = ТипSaleItem.Свойства.Получить("Barcode").Тип;
		ТипSection = ТипSaleItem.Свойства.Получить("Section").Тип;
		//ТипItemScale = ТипSaleItem.Свойства.Получить("Scale").Тип;
		//ТипLegalPersonTaxGroup = ТипSaleItem.Свойства.Получить("LegalPersonTaxGroup").Тип;
		
		Пока Выборка.Следующий() Цикл
			ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
			ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
			
			РезультатПроверки = ПроверитьРеквизитыНоменклатуры(Выборка);
			ПометкаУдаления = Не РезультатПроверки Или Выборка.ПометкаУдаления;
			
			ПакетДанных.IsDeleted = ПометкаУдаления;
			Если ПометкаУдаления = Ложь Тогда
				ПакетДанных.ID = Выборка.Код;
				ПакетДанных.Articul = Выборка.Артикул;
				ПакетДанных.Name = Выборка.Наименование;
				ПакетДанных.Type = Выборка.ТипТовара;
				ПакетДанных.BaseUnitUID = XMLСтрока(Выборка.БазоваяЕдиницаИзмерения);
				ПакетДанных.ParentItemGroupUID = XMLСтрока(Выборка.Родитель);
				ПакетДанных.TaxGroupUID = XMLСтрока(Выборка.СтавкаНДС);
				ПакетДанных.PeriodOfStorage = Выборка.СрокХранения;
				ПакетДанных.TareWeight = Выборка.ВесТары;
				ПакетДанных.AlcoholPercentage = Выборка.ПроцентСпирта;
				
				ВыборкаСЕ.Сбросить();
				Пока ВыборкаСЕ.Следующий() Цикл
					ПакетItemRestriction = ФабрикаXDTO.Создать(ТипItemRestriction);
					//ПакетItemRestriction.UID = ;
					ПакетItemRestriction.PriceListCategoryUID = "00000000-0000-0000-0000-000000000000";
					//ПакетItemRestriction.ItemUID = XMLСтрока(Выборка.Ссылка);
					ПакетItemRestriction.StoreUID = XMLСтрока(ВыборкаСЕ.Ссылка);
					ПакетItemRestriction.MinPrice = Выборка.МинимальнаяЦена;
					ПакетItemRestriction.MaxDiscountPercent = Выборка.МаксимальныйПроцентСкидки;
					
					ПакетДанных.ItemRestriction.Добавить(ПакетItemRestriction);
				КонецЦикла;
				
				//Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
					ПакетItemUnitSchema = ФабрикаXDTO.Создать(ТипItemUnitSchema);
					ПакетItemUnitSchema.UID = XMLСтрока(Выборка.ЕдиницаИзмерения);
					ПакетItemUnitSchema.UnitUID = XMLСтрока(Выборка.ЕдиницаПоКлассификатору);
					ПакетItemUnitSchema.ConvertRatioToBase = 1;
					ПакетItemUnitSchema.IsDeleted = Выборка.ЕдиницыИзмеренияПометкаУдаления;
					
					ПакетSaleItem = ФабрикаXDTO.Создать(ТипSaleItem);
					ПакетSaleItem.UID = XMLСтрока(Выборка.Ссылка);
					ПакетSaleItem.ReturnUID = XMLСтрока(Выборка.Ссылка);
					
					ВыборкаСклады.Сбросить();
					Пока ВыборкаСклады.Следующий() Цикл
						ПакетSection = ФабрикаXDTO.Создать(ТипSection);
						ПакетSection.UID = XMLСтрока(ВыборкаСклады.Ссылка);
						ПакетSaleItem.Section.Добавить(ПакетSection);
					КонецЦикла;
					
					Если Выборка.ШК <> Null Тогда	//шк на транзакционном уровне отдельно
						ПакетBarcode = ФабрикаXDTO.Создать(ТипBarcode);
						ПакетBarcode.ID = Выборка.ШК;
						ПакетBarcode.ReturnUID = XMLСтрока(Выборка.Ссылка);
						ПакетSaleItem.Barcode.Добавить(ПакетBarcode);
					КонецЕсли;
					
					Если ВыборкаПоШК.НайтиСледующий(Выборка.Ссылка, "Родитель") Тогда
						ВыборкаШК = ВыборкаПоШК.Выбрать();
						Пока ВыборкаШК.Следующий() Цикл
							ПакетBarcode = ФабрикаXDTO.Создать(ТипBarcode);
							ПакетBarcode.ID = ВыборкаШК.Код;
							ПакетBarcode.ReturnUID = XMLСтрока(ВыборкаШК.Родитель);
							ПакетSaleItem.Barcode.Добавить(ПакетBarcode);
						КонецЦикла;
					КонецЕсли;
					
					ПакетItemUnitSchema.SaleItem.Добавить(ПакетSaleItem);
					ПакетДанных.ItemUnitSchema.Добавить(ПакетItemUnitSchema);
				//КонецЕсли;
			КонецЕсли;
			
			мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
		КонецЦикла;
		
		ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
		ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	КонецЕсли;
	//Товары}
	
	Возврат Истина;
КонецФункции
Функция ОтправитьХарактеристикиНоменклатуры(Параметры)	//не будем выгружать
//нет isdeleted
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатурыИзменения.Ссылка КАК Ссылка,
		|	пвхХарактеристикиНоменклатуры.Код,
		|	пвхХарактеристикиНоменклатуры.Наименование,
		|	ВЫБОР
		|		КОГДА пвхХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ пвхХарактеристикиНоменклатуры.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления,
		|	спрХарактеристикиНоменклатуры.Ссылка КАК СвойствоСсылка,
		|	спрХарактеристикиНоменклатуры.Код КАК СвойствоКод,
		|	спрХарактеристикиНоменклатуры.Наименование КАК СвойствоНаименование
		|ИЗ
		|	ПланВидовХарактеристик.ХарактеристикиНоменклатуры.Изменения КАК ХарактеристикиНоменклатурыИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ХарактеристикиНоменклатуры КАК пвхХарактеристикиНоменклатуры
		|		ПО ХарактеристикиНоменклатурыИзменения.Ссылка = пвхХарактеристикиНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК спрХарактеристикиНоменклатуры
		|		ПО ХарактеристикиНоменклатурыИзменения.Ссылка = спрХарактеристикиНоменклатуры.Владелец
		|ГДЕ
		|	ХарактеристикиНоменклатурыИзменения.Узел = &Узел
		|	И ХарактеристикиНоменклатурыИзменения.НомерСообщения = &НомерСообщения
		|ИТОГИ ПО
		|	Ссылка";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "PropertyScale";
	Параметры.ПараметрыПакета.ИмяОбъекта = "ХарактеристикиНоменклатуры";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	ТипProperty = ТипДанных.Свойства.Получить("Property").Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
		//ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		//Если Выборка.ПометкаУдаления = Ложь Тогда
			ПакетДанных.ID = Выборка.Код;
			ПакетДанных.Name = Выборка.Наименование;
			
			ВыборкаСвойства = Выборка.Выбрать();
			Пока ВыборкаСвойства.Следующий() Цикл
				ПакетProperty = ФабрикаXDTO.Создать(ТипProperty);
				ПакетProperty.UID = XMLСтрока(ВыборкаСвойства.СвойствоСсылка);
				ПакетProperty.ID = ВыборкаСвойства.СвойствоКод;
				ПакетProperty.Value = ВыборкаСвойства.СвойствоНаименование;
				ПакетДанных.Property.Добавить(ПакетProperty);	
			КонецЦикла;	
		//КонецЕсли;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции
Функция ОтправитьВесовойТовар(Параметры)
//нет isdeleted	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВесовойТоварИзменения.Ссылка,
		|	ВесовойТовар.Код,
		|	ВЫБОР
		|		КОГДА ВесовойТовар.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ВесовойТовар.ПометкаУдаления
		|	КОНЕЦ КАК ПометкаУдаления,
		|	ВесовойТовар.Владелец,
		|	ВЫБОР
		|		КОГДА ВесовойТовар.Номенклатура.Транзакционный
		|			ТОГДА ВесовойТовар.Номенклатура
		|		ИНАЧЕ ВесовойТовар.Номенклатура.Родитель
		|	КОНЕЦ КАК ТранзакционныйТовар,
		|	ВЫБОР
		|		КОГДА ВесовойТовар.Номенклатура.Транзакционный
		|			ТОГДА ВесовойТовар.Номенклатура.БазоваяЕдиницаИзмерения
		|		ИНАЧЕ ВесовойТовар.Номенклатура.Родитель.БазоваяЕдиницаИзмерения
		|	КОНЕЦ КАК БазоваяЕдиницаИзмерения
		|ПОМЕСТИТЬ ВесовойТовар
		|ИЗ
		|	Справочник.ВесовойТовар.Изменения КАК ВесовойТоварИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВесовойТовар КАК ВесовойТовар
		|		ПО ВесовойТоварИзменения.Ссылка = ВесовойТовар.Ссылка
		|ГДЕ
		|	ВесовойТоварИзменения.Узел = &Узел
		|	И ВесовойТоварИзменения.НомерСообщения = &НомерСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Весы.Ссылка КАК Ссылка,
		|	Весы.Наименование,
		|	Весы.СтруктурнаяЕдиница,
		|	ВесовойТовар.Ссылка КАК ВесовойТоварСсылка,
		|	ВесовойТовар.ПометкаУдаления КАК ВесовойТоварПометкаУдаления,
		|	ВесовойТовар.ТранзакционныйТовар,
		//|	ЕдиницыИзмерения.Ссылка КАК ЕдиницыИзмеренияСсылка,
		|	ВесовойТовар.БазоваяЕдиницаИзмерения,
		|	ВесовойТовар.Код
		|ИЗ
		|	ВесовойТовар КАК ВесовойТовар
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Весы КАК Весы
		|		ПО (ВЫБОР
		|				КОГДА Весы.ВыгружатьТоварыТолькоЭтихВесов = ИСТИНА
		|					ТОГДА Весы.Ссылка = ВесовойТовар.Владелец
		|				ИНАЧЕ Весы.Ссылка = ВесовойТовар.Владелец
		|						ИЛИ Весы.Родитель.Ссылка = ВесовойТовар.Владелец
		|						ИЛИ Весы.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
		|						ИЛИ Весы.Родитель.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
		|						ИЛИ Весы.Родитель.Родитель.Родитель.Родитель.Ссылка = ВесовойТовар.Владелец
		|			КОНЕЦ)
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		//|		ПО ВесовойТовар.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
		//|			И ВесовойТовар.ТранзакционныйТовар = ЕдиницыИзмерения.Владелец
		|ИТОГИ ПО
		|	Ссылка";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "Scale";
	Параметры.ПараметрыПакета.ИмяОбъекта = "ВесовойТовар";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	ТипItem = ТипДанных.Свойства.Получить("Item").Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		Если Не Выборка.Ссылка = Null Тогда	//здесь по-хитрому
			ПакетДанных.UID = XMLСтрока(Выборка.Ссылка);
			//ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
			ПакетДанных.Name = Выборка.Наименование;
			ПакетДанных.StoreUID = XMLСтрока(Выборка.СтруктурнаяЕдиница);
		КонецЕсли;
		
		ВыборкаВесовойТовар = Выборка.Выбрать();
		Пока ВыборкаВесовойТовар.Следующий() Цикл
			ПакетItem = ФабрикаXDTO.Создать(ТипItem);
			ПакетItem.UID = XMLСтрока(ВыборкаВесовойТовар.ВесовойТоварСсылка);
			ПакетItem.IsDeleted = ВыборкаВесовойТовар.ВесовойТоварПометкаУдаления;
			Если ВыборкаВесовойТовар.ВесовойТоварПометкаУдаления = Ложь Тогда
				ПакетItem.ItemUID = XMLСтрока(ВыборкаВесовойТовар.ТранзакционныйТовар);
				//ПакетItem.UnitUID = XMLСтрока(ВыборкаВесовойТовар.ЕдиницыИзмеренияСсылка);
				ПакетItem.UnitUID = XMLСтрока(ВыборкаВесовойТовар.БазоваяЕдиницаИзмерения);
				//ПакетItem.Property1 = XMLСтрока(ВыборкаВесовойТовар.Характеристика);
				ПакетItem.PLU = ВыборкаВесовойТовар.Код;
			КонецЕсли;
			ПакетДанных.Item.Добавить(ПакетItem);
		КонецЦикла;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Выборка.Ссылка, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции

Функция ОтправитьЦеныНоменклатуры(Параметры)
	
	//в создании временной таблицы
	//	|	МАКСИМУМ(ЦеныНоменклатурыИзменения.ID) КАК ID	//(любой, исключительно для случая неудачной выгрузки записи единственной на какую-то дату удаленной или не активной)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыИзменения.Период КАК Период,
		|	ЦеныНоменклатурыИзменения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ЦеныНоменклатурыИзменения.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыИзменения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	МАКСИМУМ(ЦеныНоменклатурыИзменения.ID) КАК ID	//(любой, исключительно для случая неудачной выгрузки записи единственной на какую-то дату удаленной или не активной)
		|ПОМЕСТИТЬ ЦеныНоменклатурыИзменения
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.Изменения КАК ЦеныНоменклатурыИзменения
		|ГДЕ
		|	ЦеныНоменклатурыИзменения.Узел = &Узел
		|	И ЦеныНоменклатурыИзменения.НомерСообщения = &НомерСообщения
		|	И ЦеныНоменклатурыИзменения.СтруктурнаяЕдиница В ИЕРАРХИИ(&СтруктурнаяЕдиница)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыИзменения.СтруктурнаяЕдиница,
		|	ЦеныНоменклатурыИзменения.Номенклатура,
		|	ЦеныНоменклатурыИзменения.ЕдиницаИзмерения,
		|	ЦеныНоменклатурыИзменения.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	СтруктурнаяЕдиница,
		|	Номенклатура,
		|	ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыИзменения.Период,
		|	ЦеныНоменклатурыИзменения.СтруктурнаяЕдиница,
		|	ЦеныНоменклатурыИзменения.Номенклатура,
		|	ЦеныНоменклатурыИзменения.ЕдиницаИзмерения,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ID, ЦеныНоменклатурыИзменения.ID) КАК ID,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(ЦеныНоменклатуры.АктивностьЗаписи, ЛОЖЬ) КАК АктивностьЗаписи
		|ИЗ
		|	ЦеныНоменклатурыИзменения КАК ЦеныНоменклатурыИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВложенныйЗапрос.Период КАК Период,
		|			ВложенныйЗапрос.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|			ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|			ВложенныйЗапрос.ID КАК ID,
		|			ЦеныНоменклатуры.Цена КАК Цена,
		|			ЦеныНоменклатуры.АктивностьЗаписи КАК АктивностьЗаписи
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ЦеныНоменклатурыИзменения.Период КАК Период,
		|				ЦеныНоменклатурыИзменения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|				ЦеныНоменклатурыИзменения.Номенклатура КАК Номенклатура,
		|				ЦеныНоменклатурыИзменения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|				МАКСИМУМ(ЦеныНоменклатуры.ID) КАК ID
		|			ИЗ
		|				ЦеныНоменклатурыИзменения КАК ЦеныНоменклатурыИзменения
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|					ПО ЦеныНоменклатурыИзменения.Период = ЦеныНоменклатуры.Период
		|						И ЦеныНоменклатурыИзменения.СтруктурнаяЕдиница = ЦеныНоменклатуры.СтруктурнаяЕдиница
		|						И ЦеныНоменклатурыИзменения.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|						И ЦеныНоменклатурыИзменения.ЕдиницаИзмерения = ЦеныНоменклатуры.ЕдиницаИзмерения
		|						И (ЦеныНоменклатуры.АктивностьЗаписи = ИСТИНА)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ЦеныНоменклатурыИзменения.Период,
		|				ЦеныНоменклатурыИзменения.СтруктурнаяЕдиница,
		|				ЦеныНоменклатурыИзменения.Номенклатура,
		|				ЦеныНоменклатурыИзменения.ЕдиницаИзмерения) КАК ВложенныйЗапрос
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|				ПО ВложенныйЗапрос.Период = ЦеныНоменклатуры.Период
		|					И ВложенныйЗапрос.СтруктурнаяЕдиница = ЦеныНоменклатуры.СтруктурнаяЕдиница
		|					И ВложенныйЗапрос.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|					И ВложенныйЗапрос.ЕдиницаИзмерения = ЦеныНоменклатуры.ЕдиницаИзмерения
		|					И ВложенныйЗапрос.ID = ЦеныНоменклатуры.ID) КАК ЦеныНоменклатуры
		|		ПО ЦеныНоменклатурыИзменения.Период = ЦеныНоменклатуры.Период
		|			И ЦеныНоменклатурыИзменения.СтруктурнаяЕдиница = ЦеныНоменклатуры.СтруктурнаяЕдиница
		|			И ЦеныНоменклатурыИзменения.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И ЦеныНоменклатурыИзменения.ЕдиницаИзмерения = ЦеныНоменклатуры.ЕдиницаИзмерения";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.СтруктурнаяЕдиница);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "PriceList";
	Параметры.ПараметрыПакета.ИмяОбъекта = "Цены";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	//ТипDocument = ТипДанных.Свойства.Получить("Document").Тип;
	
	ИменаИзмеренийОсновногоОтбораСтрокой = ПолучитьИменаИзмеренийОсновногоОтбораРегистраСведенийСтрокой("ЦеныНоменклатуры");
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.ItemUnitSchemaUID = XMLСтрока(Выборка.ЕдиницаИзмерения);
		//ПакетДанных.SaleItemUID = XMLСтрока(Выборка.Номенклатура);
		ПакетДанных.StoreUID = XMLСтрока(Выборка.СтруктурнаяЕдиница);
		//ПакетДанных.SectionUID = ;
		ПакетДанных.FromDate = Выборка.Период;
		//ПакетДанных.ToDate = Выборка.ДатаОкончания;
		ПакетДанных.Value = Выборка.Цена;
		//ПакетДанных.PriceListCategoryUID = ;
		ПакетДанных.IsAdvertising = Ложь;
		ПакетДанных.IsActive = Выборка.АктивностьЗаписи;
		//ПакетДанных.AdverType = ;
		//ПакетДанных.DocumentUID = XMLСтрока(Выборка.Документ);
		
		//ПакетDocument = ФабрикаXDTO.Создать(ТипDocument);
		//ПакетDocument.UID = XMLСтрока(ВыборкаДокументов.Документ);
		//ПакетDocument.IsDeleted = ВыборкаДокументов.ПометкаУдаления;
		//ПакетPacket.Document.Добавить(ПакетDocument);
		
		//СтруктураОтбора =  Новый Структура("Период, СтруктурнаяЕдиница, Номенклатура, ЕдиницаИзмерения, ID", Выборка.Период, Выборка.СтруктурнаяЕдиница, Выборка.Номенклатура, Выборка.ЕдиницаИзмерения, Выборка.ID);
		СтруктураОтбора =  Новый Структура(ИменаИзмеренийОсновногоОтбораСтрокой);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", СтруктураОтбора, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	Для каждого Инд Из мИндексыНеотправленныхЭлементов Цикл
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		СтруктураОтбора = мДанныеПакета[Инд].Объект;
		Для каждого КлючИЗначение Из СтруктураОтбора Цикл
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;
		мДанныеПакета[Инд].Объект = НаборЗаписей;
	КонецЦикла;
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции
Функция ОтправитьПромоАкции(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПромоАкцииИзменения.IDПромо,
		|	ПромоАкцииИзменения.IDКомпоненты,
		|	ПромоАкцииИзменения.IDГруппы,
		|	ПромоАкцииИзменения.IDДеталей,
		|	ПромоАкцииИзменения.СтруктурнаяЕдиница,
		|	ПромоАкцииИзменения.СтруктурнаяЕдиница.Код КАК СтруктурнаяЕдиницаКод,
		|	ВЫБОР
		|		КОГДА ПромоАкции.IDПромо ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА НоваяПромоАкция.Ссылка ЕСТЬ NULL 
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		КОГДА ПромоАкции.IDПромо ЕСТЬ NULL 
		|				ИЛИ ПромоАкции.ФлагОкончания
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ПромоАкции.ФлагНачала
		|	КОНЕЦ КАК АктивностьЗаписи,
		|	ПромоАкции.ДатаНачала,
		|	ПромоАкции.ДатаОкончания,
		|	ПромоАкции.Название,
		|	ПромоАкции.ОписаниеКомпонента,
		|	ПромоАкции.ТипКомпонента,
		|	ПромоАкции.ТипПокупателя
		|ПОМЕСТИТЬ тПромоАкции
		|ИЗ
		|	РегистрСведений.ПромоАкции.Изменения КАК ПромоАкцииИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкции КАК ПромоАкции
		|		ПО ПромоАкцииИзменения.IDПромо = ПромоАкции.IDПромо
		|			И ПромоАкцииИзменения.IDКомпоненты = ПромоАкции.IDКомпоненты
		|			И ПромоАкцииИзменения.IDГруппы = ПромоАкции.IDГруппы
		|			И ПромоАкцииИзменения.IDДеталей = ПромоАкции.IDДеталей
		|			И ПромоАкцииИзменения.СтруктурнаяЕдиница = ПромоАкции.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.НоваяПромоАкция КАК НоваяПромоАкция
		|		ПО ПромоАкцииИзменения.IDДеталей = НоваяПромоАкция.Основание
		|			И ПромоАкцииИзменения.СтруктурнаяЕдиница = НоваяПромоАкция.СтруктурнаяЕдиница
		|ГДЕ
		|	ПромоАкцииИзменения.Узел = &Узел
		|	И ПромоАкцииИзменения.НомерСообщения = &НомерСообщения
		|	И ПромоАкцииИзменения.СтруктурнаяЕдиница В ИЕРАРХИИ(&СтруктурнаяЕдиница)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тПромоАкции.IDПромо,
		|	тПромоАкции.IDКомпоненты,
		|	тПромоАкции.IDГруппы,
		|	тПромоАкции.IDДеталей КАК IDДеталей,
		|	тПромоАкции.СтруктурнаяЕдиница,
		|	тПромоАкции.СтруктурнаяЕдиницаКод,
		|	тПромоАкции.ПометкаУдаления,
		|	тПромоАкции.АктивностьЗаписи,
		|	тПромоАкции.ДатаНачала,
		|	тПромоАкции.ДатаОкончания,
		|	тПромоАкции.Название,
		|	тПромоАкции.ОписаниеКомпонента,
		|	тПромоАкции.ТипКомпонента,
		|	тПромоАкции.ТипПокупателя
		|ИЗ
		|	тПромоАкции КАК тПромоАкции
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDДеталей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тПромоАкции.IDДеталей КАК IDДеталей,
		|	тПромоАкции.СтруктурнаяЕдиница.Код КАК Код
		|ИЗ
		|	тПромоАкции КАК тПромоАкции
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDДеталей
		|ИТОГИ ПО
		|	IDДеталей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПромоАкцииНоменклатура.IDДеталей КАК IDДеталей,
		|	ПромоАкцииНоменклатура.Номенклатура.Код КАК Код
		|ИЗ
		|	тПромоАкции КАК тПромоАкции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииНоменклатура КАК ПромоАкцииНоменклатура
		|		ПО тПромоАкции.IDПромо = ПромоАкцииНоменклатура.IDПромо
		|			И тПромоАкции.IDКомпоненты = ПромоАкцииНоменклатура.IDКомпоненты
		|			И тПромоАкции.IDГруппы = ПромоАкцииНоменклатура.IDГруппы
		|			И тПромоАкции.IDДеталей = ПромоАкцииНоменклатура.IDДеталей
		|			И (тПромоАкции.СтруктурнаяЕдиница = ПромоАкцииНоменклатура.СтруктурнаяЕдиница
		|				ИЛИ ПромоАкцииНоменклатура.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDДеталей
		|ИТОГИ ПО
		|	IDДеталей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПромоАкцииПороги.IDДеталей КАК IDДеталей,
		|	ВЫБОР
		|		КОГДА ПромоАкцииПороги.ТипПорога = ЗНАЧЕНИЕ(Перечисление.ТипыПорога.Сумма)
		|			ТОГДА 1
		|		КОГДА ПромоАкцииПороги.ТипПорога = ЗНАЧЕНИЕ(Перечисление.ТипыПорога.Количество)
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК ТипПорога,
		|	ПромоАкцииПороги.ЗначениеПорога КАК ЗначениеПорога,
		|	ВЫБОР
		|		КОГДА ПромоАкцииПороги.ТипПромо = ЗНАЧЕНИЕ(Перечисление.ТипыИзмененияПромо.ПроцентСкидки)
		|			ТОГДА 0
		|		КОГДА ПромоАкцииПороги.ТипПромо = ЗНАЧЕНИЕ(Перечисление.ТипыИзмененияПромо.СуммаСкидки)
		|			ТОГДА 1
		|		КОГДА ПромоАкцииПороги.ТипПромо = ЗНАЧЕНИЕ(Перечисление.ТипыИзмененияПромо.ФиксированнаяЦена)
		|			ТОГДА 2
		|		КОГДА ПромоАкцииПороги.ТипПромо = ЗНАЧЕНИЕ(Перечисление.ТипыИзмененияПромо.БезИзменения)
		|			ТОГДА -1
		|		КОГДА ПромоАкцииПороги.ТипПромо = ЗНАЧЕНИЕ(Перечисление.ТипыИзмененияПромо.Исключить)
		|			ТОГДА 4
		|		КОГДА ПромоАкцииПороги.ТипПромо = ЗНАЧЕНИЕ(Перечисление.ТипыИзмененияПромо.СамыйДешевыйБесплатно)
		|			ТОГДА 6
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТипПромо,
		|	ВЫБОР
		|		КОГДА ПромоАкцииПороги.ТипПромо = ЗНАЧЕНИЕ(Перечисление.ТипыИзмененияПромо.ПроцентСкидки)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ПромоАкцииПороги.Значение
		|	КОНЕЦ КАК Значение,
		|	ВЫБОР
		|		КОГДА ПромоАкцииПороги.ТипПромо = ЗНАЧЕНИЕ(Перечисление.ТипыИзмененияПромо.ПроцентСкидки)
		|			ТОГДА ПромоАкцииПороги.Значение
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Процент
		|ИЗ
		|	тПромоАкции КАК тПромоАкции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПромоАкцииПороги КАК ПромоАкцииПороги
		|		ПО тПромоАкции.IDПромо = ПромоАкцииПороги.IDПромо
		|			И тПромоАкции.IDКомпоненты = ПромоАкцииПороги.IDКомпоненты
		|			И тПромоАкции.IDГруппы = ПромоАкцииПороги.IDГруппы
		|			И тПромоАкции.IDДеталей = ПромоАкцииПороги.IDДеталей
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDДеталей
		|ИТОГИ ПО
		|	IDДеталей";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.СтруктурнаяЕдиница);

	Результат = Запрос.ВыполнитьПакет();
	
	РезультатПромоАкции = Результат[1];
	Если РезультатПромоАкции.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	ВыборкаПоСЕ = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоНоменклатуре = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоПорогам = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Выборка = РезультатПромоАкции.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "PromotionDesc";
	Параметры.ПараметрыПакета.ИмяОбъекта = "ПромоАкции";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	
	ИменаИзмеренийОсновногоОтбораСтрокой = ПолучитьИменаИзмеренийОсновногоОтбораРегистраСведенийСтрокой("ПромоАкции");
	
	// rib-овский пакет PromotionDesc
	ТипRIBDate = ФабрикаXDTO.Тип("http://www.oracle.com/retail/integration/payload/RIBDate","RIBDate");
	КорневыеСвойстваPromotionDesc = ФабрикаXDTO.Пакеты.Получить("http://www.oracle.com/retail/integration/payload/PromotionDesc").КорневыеСвойства;
	ТипPromotionDesc = КорневыеСвойстваPromotionDesc.Получить("PromotionDesc").Тип;
	ТипLocationList = КорневыеСвойстваPromotionDesc.Получить("LocationList").Тип;
	ТипListGroup = КорневыеСвойстваPromotionDesc.Получить("ListGroup").Тип;
	ТипListDtl = КорневыеСвойстваPromotionDesc.Получить("ListDtl").Тип;
	ТипDiscountLadder = КорневыеСвойстваPromotionDesc.Получить("DiscountLadder").Тип;
	ТипItemList = КорневыеСвойстваPromotionDesc.Получить("ItemList").Тип;
	
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.promo_id = Выборка.IDПромо;
		ПакетДанных.promo_comp_id = Выборка.IDКомпоненты;
		//ПакетДанных.promo_ГРУППА_id = Выборка.IDГруппы;
		ПакетДанных.promo_dtl_id = Выборка.IDДеталей;
		ПакетДанных.StoreUID = XMLСтрока(Выборка.СтруктурнаяЕдиница);
		ПакетДанных.IsActive = Выборка.АктивностьЗаписи;
		ПакетДанных.IsDeleted = Выборка.ПометкаУдаления;
		Если Выборка.ПометкаУдаления = Ложь Тогда
			//создаем rib-овский пакет
			ПакетPromotionDesc = ФабрикаXDTO.Создать(ТипPromotionDesc);
			ПакетPromotionDesc.promo_id = Выборка.IDПромо;
			ПакетPromotionDesc.promo_comp_id = Выборка.IDКомпоненты;
			ПакетPromotionDesc.promo_dtl_id = Выборка.IDДеталей;
			ПакетPromotionDesc.promo_name = Выборка.Название;
			ПакетPromotionDesc.promo_comp_desc = Выборка.ОписаниеКомпонента;
			ПакетPromotionDesc.promo_comp_type = Выборка.ТипКомпонента;
			ПакетPromotionDesc.customer_type_id = Выборка.ТипПокупателя;
			ПакетPromotionDesc.start_date = ПолучитьRibDate(Выборка.ДатаНачала, ТипRIBDate);
			ПакетPromotionDesc.end_date = ПолучитьRibDate(Выборка.ДатаОкончания, ТипRIBDate);
			
			ВыборкаПоСЕ.НайтиСледующий(Выборка.IDДеталей, "IDДеталей");
			ВыборкаСЕ = ВыборкаПоСЕ.Выбрать();
			Пока ВыборкаСЕ.Следующий() Цикл
				ПакетLocationList = ФабрикаXDTO.Создать(ТипLocationList);
				ПакетLocationList.location = ВыборкаСЕ.Код;
				ПакетPromotionDesc.LocationList.Добавить(ПакетLocationList);
			КонецЦикла;
			
			ПакетListGroup = ФабрикаXDTO.Создать(ТипListGroup);
			ПакетListDtl = ФабрикаXDTO.Создать(ТипListDtl);
			
			Если ВыборкаПоНоменклатуре.НайтиСледующий(Выборка.IDДеталей, "IDДеталей") Тогда
				ВыборкаНоменклатура = ВыборкаПоНоменклатуре.Выбрать();
				Пока ВыборкаНоменклатура.Следующий() Цикл
					ПакетItemList = ФабрикаXDTO.Создать(ТипItemList);
					ПакетItemList.item_num = ВыборкаНоменклатура.Код;
					ПакетListDtl.ItemList.Добавить(ПакетItemList);
				КонецЦикла;
			КонецЕсли;
			
			Если ВыборкаПоПорогам.НайтиСледующий(Выборка.IDДеталей, "IDДеталей") Тогда
				ВыборкаПороги = ВыборкаПоПорогам.Выбрать();
				Пока ВыборкаПороги.Следующий() Цикл
					ПакетDiscountLadder = ФабрикаXDTO.Создать(ТипDiscountLadder);
					ПакетDiscountLadder.qual_type = ВыборкаПороги.ТипПорога;
					ПакетDiscountLadder.qual_value = ВыборкаПороги.ЗначениеПорога;
					ПакетDiscountLadder.chg_type = ВыборкаПороги.ТипПромо;
					Если Не ВыборкаПороги.Значение = Неопределено Тогда	//пока придется делать проверку, т.к. chg_amt пока не может принимать такое значение
					ПакетDiscountLadder.chg_amt = ВыборкаПороги.Значение;
					КонецЕсли;
					ПакетDiscountLadder.chg_percent = ВыборкаПороги.Процент;
					ПакетListDtl.DiscountLadder.Добавить(ПакетDiscountLadder);
				КонецЦикла;
			КонецЕсли;
			ПакетListGroup.ListDtl.Добавить(ПакетListDtl);
			ПакетPromotionDesc.ListGroup.Добавить(ПакетListGroup);
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПакетPromotionDesc, "PromotionDesc");
			ДанныеPromotionDesc = ЗаписьXML.Закрыть();
			
			ПакетДанных.Packet = ДанныеPromotionDesc;
		КонецЕсли;
		
		//СтруктураОтбора =  Новый Структура("СтруктурнаяЕдиница, IDПромо, IDКомпоненты, IDГруппы, IDДеталей", Выборка.СтруктурнаяЕдиница, Выборка.IDПромо, Выборка.IDКомпоненты, Выборка.IDГруппы, Выборка.IDДеталей);
		СтруктураОтбора =  Новый Структура(ИменаИзмеренийОсновногоОтбораСтрокой);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", СтруктураОтбора, ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	Для каждого Инд Из мИндексыНеотправленныхЭлементов Цикл
		НаборЗаписей = РегистрыСведений.ПромоАкции.СоздатьНаборЗаписей();
		СтруктураОтбора = мДанныеПакета[Инд].Объект;
		Для каждого КлючИЗначение Из СтруктураОтбора Цикл
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;
		мДанныеПакета[Инд].Объект = НаборЗаписей;
	КонецЦикла;
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	
	Возврат Истина;
КонецФункции

Функция ОтправитьКонстанты(Параметры)
	
	//пока постараемся поддержать совместимость с типовой
	Если Не Метаданные.Константы.Найти("ЗапасВремениВыгрузкиЦенВТорговоеОборудование") = Неопределено Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""ЗапасВремениВыгрузкиЦенВТорговоеОборудование"" КАК КонстантаИмя,
		|	Константы.Значение КАК КонстантаЗначение
		|ИЗ
		|	Константа.ЗапасВремениВыгрузкиЦенВТорговоеОборудование.Изменения КАК КонстантыИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ЗапасВремениВыгрузкиЦенВТорговоеОборудование КАК Константы
		|		ПО (ИСТИНА)
		|ГДЕ
		|	КонстантыИзменения.Узел = &Узел
		|	И КонстантыИзменения.НомерСообщения = &НомерСообщения";

	Запрос.УстановитьПараметр("Узел", Параметры.УзелСсылка);
	Запрос.УстановитьПараметр("НомерСообщения", Параметры.НомерСообщения);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоОбъектов = Выборка.Количество();
	мДанныеПакета = Новый Массив;//(КоличествоОбъектов);
	мИндексыНеотправленныхЭлементов = Новый Массив;
	
	Параметры.ПараметрыПакета.ИмяАтрибута = "Constant";
	Параметры.ПараметрыПакета.ИмяОбъекта = "Константы";
	Параметры.НачальныйИндекс = 0;
	Параметры.КонечныйИндекс = Мин(КоличествоОбъектов, Параметры.ПараметрыПакета.МаксимальныйРазмерПакета) - 1;
	Параметры.МаксимальныйИндекс = КоличествоОбъектов - 1;
	
	ТипДанных = Параметры.ПараметрыПакета.ТипPacket.Свойства.Получить(Параметры.ПараметрыПакета.ИмяАтрибута).Тип;
	
	Пока Выборка.Следующий() Цикл
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.ConstantName = Выборка.КонстантаИмя;
		ПакетДанных.ConstantValue = Выборка.КонстантаЗначение;
		
		мДанныеПакета.Добавить(Новый Структура("Объект, ПакетДанных", Метаданные.Константы[Выборка.КонстантаИмя], ПакетДанных));
	КонецЦикла;
	
	ВыгрузитьПакет(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	ЗарегистрироватьИзмененияПовторно(мДанныеПакета, Параметры, мИндексыНеотправленныхЭлементов);
	КонецЕсли;	////пока постараемся поддержать совместимость с типовой
	
	Возврат Истина;
КонецФункции

//////
Функция ПолучитьRibDate(Дата, ТипRIBDate)
	
	ПакетRIBDate = ФабрикаXDTO.Создать(ТипRIBDate);
	ПакетRIBDate.year = Год(Дата);
	ПакетRIBDate.month = Месяц(Дата);
	ПакетRIBDate.day = День(Дата);
	ПакетRIBDate.hour = Час(Дата);
	ПакетRIBDate.minute = Минута(Дата);
	ПакетRIBDate.second = Секунда(Дата);
	
	Возврат ПакетRIBDate; 
КонецФункции
//////


Процедура ОтправкаДанныхSMS(УзелСсылка) Экспорт
	
	мТипыОбъектов = ПолучитьТипыИзмененныхОбъектов(УзелСсылка);
	Если мТипыОбъектов.Количество() = 0 Тогда	//нет изменений
		Возврат;
	КонецЕсли;
	
	НомерСообщения = УзелСсылка.НомерОтправленного + 1;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелСсылка, НомерСообщения);	//проставляем номер сообщения
	
	сткПараметры = ИнициализироватьПараметрыВыгрузки(УзелСсылка, НомерСообщения);
	
	Если Не ВэбсервисДоступен(сткПараметры) Тогда
		Сообшение = "Вэб-сервис SIS недоступен." + Символы.ПС + сткПараметры.ОписаниеОшибки;
		ВызватьИсключение(Сообшение);
	КонецЕсли;
	
	Если Не мТипыОбъектов.Найти("Справочник.КлассификаторЕдиницИзмерения") = Неопределено Тогда
		ОтправитьКлассификаторЕдиницИзмерения(сткПараметры);
	КонецЕсли;
	Если Не мТипыОбъектов.Найти("Справочник.СтруктурныеЕдиницы") = Неопределено Тогда
		ОтправитьСтруктурныеЕдиницы(сткПараметры);
	КонецЕсли;
	Если Не мТипыОбъектов.Найти("Справочник.Организации") = Неопределено Тогда
		ОтправитьОрганизации(сткПараметры);
	КонецЕсли;
	Если Не мТипыОбъектов.Найти("Справочник.Склады") = Неопределено Тогда
		ОтправитьСклады(сткПараметры);
	КонецЕсли;
	Если Не мТипыОбъектов.Найти("Справочник.СтавкиНДС") = Неопределено Тогда
		ОтправитьСтавкиНДС(сткПараметры);
	КонецЕсли;
	Если Не мТипыОбъектов.Найти("Справочник.ПрофилиПользователейККМ") = Неопределено Тогда
		ОтправитьПрофилиПользователейККМ(сткПараметры);
	КонецЕсли;
	Если Не мТипыОбъектов.Найти("Справочник.КредитныеКарты") = Неопределено Тогда
		ОтправитьКредитныеКарты(сткПараметры);
	КонецЕсли;
	Если Не мТипыОбъектов.Найти("Справочник.ПерсоналККМ") = Неопределено Тогда
		ОтправитьПерсоналККМ(сткПараметры);
	КонецЕсли;
	Если Не мТипыОбъектов.Найти("Справочник.ККМ") = Неопределено Тогда
		ОтправитьККМ(сткПараметры);
	КонецЕсли;
	
	//ОтправитьДисконтныеКарты(Параметры);	
	
	Если Не мТипыОбъектов.Найти("Справочник.Номенклатура") = Неопределено Тогда
		ОтправитьНоменклатуру(сткПараметры);
	КонецЕсли;
	
	//Если Не мТипыОбъектов.Найти("ПланВидовХарактеристик.ХарактеристикиНоменклатуры") = Неопределено Тогда	не будем выгружать
	//	ОтправитьХарактеристикиНоменклатуры(Параметры);
	//КонецЕсли;
	
	Если Не мТипыОбъектов.Найти("Справочник.ВесовойТовар") = Неопределено Тогда
		ОтправитьВесовойТовар(сткПараметры);
	КонецЕсли;
	
	Если Не мТипыОбъектов.Найти("РегистрСведений.ЦеныНоменклатуры") = Неопределено Тогда
		ОтправитьЦеныНоменклатуры(сткПараметры);
	КонецЕсли;
	Если Не мТипыОбъектов.Найти("РегистрСведений.ПромоАкции") = Неопределено Тогда
		ОтправитьПромоАкции(сткПараметры);
	КонецЕсли;
	
	Если Не мТипыОбъектов.Найти("Константа.ЗапасВремениВыгрузкиЦенВТорговоеОборудование") = Неопределено
		Или Ложь Тогда	//сюда дописывать другие константы
		ОтправитьКонстанты(сткПараметры);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелСсылка, НомерСообщения);
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Загрузка (будем допеределывать, когда соберемся загружать консолидированный z-отчет)

Функция ЗагрузитьZОтчет(XDTO, Ссылка) Экспорт
	Попытка
		НовыйДокумент = ложь;
		Ссылка = Документы.Zотчет.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Shift[0].UID));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда 
			НовыйДокумент = Истина;
			Объект = Документы.Zотчет.СоздатьДокумент();
			Ссылка = Документы.Zотчет.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Shift[0].UID));
			Объект.УстановитьСсылкуНового(Ссылка);
			Объект.Дата = XDTO.Shift[0].CloseTime; 
		КонецЕсли;
		//popn+
		//убрал обновление даты для случая, когда документ уже есть в системе
		//оставил присвоение даты только для случая создания нового документа
		//Объект.Дата = XDTO.Shift[0].CloseTime + СмещениеВремени; 
		//popn-
		//Объект.Номер = XDTO.Shift[0].No; 
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.Выручка.Очистить();
		Для Каждого Строка Из XDTO.Shift Цикл
			СтрокаВыручки = Объект.Выручка.Добавить();
			СтрокаВыручки.ПОС = Справочники.ККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.PosUID));
			Если НЕ ЗначениеЗаполнено(Объект.Фирма) Тогда
				Объект.Фирма = СтрокаВыручки.ПОС.Фирма;
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
				Объект.СтруктурнаяЕдиница = СтрокаВыручки.ПОС.Владелец;
			КонецЕсли;	
			СтрокаВыручки.ДатаСмены = Строка.CloseTime;
			СтрокаВыручки.Смена = Строка.No;
			СтрокаВыручки.Сумма = Строка.Amount;
			СтрокаВыручки.СуммаНал = Строка.AmountCash;
			//СтрокаВыручки.СвободнаяСумма = Строка.СвободнаяСумма;
		КонецЦикла;
		Объект.Карты.Очистить();
		Если XDTO.Свойства().Получить("Payment") <> Неопределено Тогда
			Если Тип(XDTO.Payment) = Тип("СписокXDTO") Тогда
				Для Каждого Строка Из XDTO.Payment Цикл
					НоваяСтрока = Объект.Карты.Добавить();
					НоваяСтрока.ТипКарты = Справочники.КредитныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Type));
					НоваяСтрока.Сумма = Строка.Amount;
				КонецЦикла;
			Иначе
				НоваяСтрока = Объект.Карты.Добавить();
				НоваяСтрока.ТипКарты = Справочники.КредитныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(XDTO.Payment.Type));
				НоваяСтрока.Сумма = XDTO.Payment.Amount;
			КонецЕсли;	
		КонецЕсли;
		Объект.Состав.Очистить();
		Для Каждого Строка Из XDTO.Sale Цикл
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.ItemUID));
			НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.ItemUnitSchemaUID));
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Количество = Строка.Quantity;
			НоваяСтрока.Сумма = Строка.Amount;
			НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
			НоваяСтрока.СуммаНДС = ОбработкаТабличныхЧастейСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,Истина,НоваяСтрока.СтавкаНДС.Ставка);
			НоваяСтрока.Склад = Объект.СтруктурнаяЕдиница.СкладТорговогоЗала;
	    КонецЦикла;
		Объект.Записать(РежимЗаписиДокумента.Запись);
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщенияОбОшибке = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		КонецПопытки;
		Результат = Истина;
		Если НовыйДокумент = Истина Тогда
			струкПараметры = Новый Структура;
			струкПараметры.Вставить("БизнесПроцесс", БизнесПроцессы.ОформлениеСнятияВыручки);
			струкПараметры.Вставить("Основание", Объект.Ссылка);
			струкПараметры.Вставить("Удалять", Истина); 
			струкПараметры.Вставить("Искать", Истина);
			БП = УправлениеБизнесПроцессамиСервер.ЗапуститьБизнесПроцесс(струкПараметры);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ТекстСообщенияОбОшибке = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение(ТекстСообщенияОбОшибке);
	КонецПопытки;
	Возврат Результат;
КонецФункции
Процедура ПолучениеДанныхSMS(Ссылка) Экспорт
	
	СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	Прокси = ПолучитьПрокси(СтруктурнаяЕдиница);
	
	Source = Строка(Ссылка.УникальныйИдентификатор());
	
	ТипPacket = ФабрикаXDTO.Тип("http://1c-astor.ru/SMS", "Packet");
	ТипДанных = ТипPacket.Свойства.Получить("Params").Тип;
	ПакетPacket = ФабрикаXDTO.Создать(ТипPacket);
	ПакетPacket.Source = Source;
	ПакетPacket.Version = "1.0";
	ПакетPacket.Command = "GetShiftsInfo";   
	ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
	ПакетДанных.TypeOfSelect = "New";
	ПакетPacket.Params.Добавить(ПакетДанных);	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,ПакетPacket,"Packet");
	Данные = ЗаписьXML.Закрыть();
	
	Попытка
		Результат = Прокси.SendPacket(Данные);
		XDTOСпискаСмен = ПолучитьЭлементДанныхXDTO(Результат, "Shifts");
	Исключение
		ТекстСообщенияОбОшибке = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение(ТекстСообщенияОбОшибке);
	КонецПопытки;
	
	Если XDTOСпискаСмен = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТипPacket = ФабрикаXDTO.Тип("http://1c-astor.ru/SMS", "Packet");
	ТипДанных = ТипPacket.Свойства.Получить("ShiftFilter").Тип;
	
	Для каждого Строка Из XDTOСпискаСмен.Shift Цикл
		ПакетPacket = ФабрикаXDTO.Создать(ТипPacket);
		ПакетPacket.Source = Source;
		ПакетPacket.Version = "1.0";
		ПакетPacket.Command = "GetZReportRetailSuiteStore";
		UIDСмены = Строка.UID;	
		ПакетДанных = ФабрикаXDTO.Создать(ТипДанных);
		ПакетДанных.ShiftUID = UIDСмены;
		ПакетPacket.ShiftFilter.Добавить(ПакетДанных);	
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,ПакетPacket,"Packet");
		Данные = ЗаписьXML.Закрыть();
		Попытка
			Результат = Прокси.SendPacket(Данные);
			XDTOZОтчетов = ПолучитьЭлементДанныхXDTO(Результат, "ZReport");
		Исключение
			ТекстСообщенияОбОшибке = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
			ВызватьИсключение(ТекстСообщенияОбОшибке);
		КонецПопытки;
		
		Если XDTOСпискаСмен = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗагрузитьZОтчет(XDTOZОтчетов, Неопределено) Тогда
			ТипParams = ТипPacket.Свойства.Получить("Params").Тип;
			ТипShift = ТипPacket.Свойства.Получить("ShiftFilter").Тип;
			ПакетПодтверждения = ФабрикаXDTO.Создать(ТипPacket);
			ПакетПодтверждения.Source = Source;
			ПакетПодтверждения.Version = "1.0";
			ПакетПодтверждения.Command = "SetProcessedStatus";   
			ПакетПараметров = ФабрикаXDTO.Создать(ТипParams);
			ПакетПараметров.Status = 1;
			ПакетПодтверждения.Params.Добавить(ПакетПараметров);
			//Для каждого Строка Из XDTOСпискаСмен.Shifts Цикл
			//	UIDСмены = Строка.Shift;	
				ПакетСмен = ФабрикаXDTO.Создать(ТипShift);
				ПакетСмен.ShiftUID = UIDСмены;
				ПакетПодтверждения.ShiftFilter.Добавить(ПакетСмен);	
			//КонецЦикла;	
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,ПакетПодтверждения,"Packet");
			Данные = ЗаписьXML.Закрыть();
			Попытка
				Результат = Прокси.SendPacket(Данные);
			Исключение
				ТекстСообщенияОбОшибке = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
				ВызватьИсключение(ТекстСообщенияОбОшибке);
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//старые процедуры (пока не удалять)

Функция СоздатьПакетНоменклатура(ТипPacket, НоменклатураСсылка, СтруктурнаяЕдиница)
	
	ТипItem = ТипPacket.Свойства.Получить("Item").Тип;
	ТипItemUnitSchema = ТипItem.Свойства.Получить("ItemUnitSchema").Тип;
	ТипSaleItem = ТипItemUnitSchema.Свойства.Получить("SaleItem").Тип;
	ТипBarcode = ТипSaleItem.Свойства.Получить("Barcode").Тип;
	ТипSection = ТипSaleItem.Свойства.Получить("Section").Тип;
	//ТипItemScale = ТипSaleItem.Свойства.Получить("Scale").Тип;
	//ТипLegalPersonTaxGroup = ТипSaleItem.Свойства.Получить("LegalPersonTaxGroup").Тип;
	
	НоменклатураUID = XMLСтрока(НоменклатураСсылка);
	
	ПакетItem = ФабрикаXDTO.Создать(ТипItem);
	ПакетItem.UID = НоменклатураUID;
	ПакетItem.ID = НоменклатураСсылка.Код;
	ПакетItem.Name = НоменклатураСсылка.ПолноеНаименование;//Наименование;
	ПакетItem.IsDeleted = НоменклатураСсылка.ПометкаУдаления;
	ПакетItem.Articul = ПолучитьАртикул(НоменклатураСсылка);
	ПакетItem.Type = ?(НоменклатураСсылка.ТипТовара = Перечисления.ТипыТоваров.Весовой, "W", "P");
	БазоваяЕдиница = ОбработкаТабличныхЧастейСервер.ПолучитьЕдиницуИзмеренияНоменклатурыПоУмолчанию(НоменклатураСсылка);
	Если БазоваяЕдиница = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	ПакетItem.BaseUnitUID = XMLСтрока(НоменклатураСсылка.БазоваяЕдиницаИзмерения);
	Родитель = НоменклатураСсылка.Родитель;
	Пока НЕ Родитель.Пустая() И Родитель.Группа <> 1 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;
	Если Родитель.Группа = 1 Тогда
		ПакетItem.ParentItemGroupUID = XMLСтрока(Родитель);
	КонецЕсли;
	ПакетItem.TaxGroupUID = XMLСтрока(НоменклатураСсылка.СтавкаНДС);
	сткДополнительныеРеквизиты = ПолучитьДополнительныеРеквизиты(НоменклатураСсылка);
	ПакетItem.PeriodOfStorage = сткДополнительныеРеквизиты.СрокХранения;
	ПакетItem.TareWeight = 0;
	ПакетItem.AlcoholPercentage = сткДополнительныеРеквизиты.ПроцентСпирта;
	
	ПакетItemUnitSchema = ФабрикаXDTO.Создать(ТипItemUnitSchema);
	ПакетItemUnitSchema.UID = XMLСтрока(БазоваяЕдиница);
	ПакетItemUnitSchema.UnitUID = XMLСтрока(НоменклатураСсылка.БазоваяЕдиницаИзмерения);
	ПакетItemUnitSchema.ConvertRatioToBase = 1;
	ПакетItemUnitSchema.IsDeleted = БазоваяЕдиница.ПометкаУдаления;
	
	ПакетSaleItem = ФабрикаXDTO.Создать(ТипSaleItem);
	ПакетSaleItem.UID = НоменклатураUID;
	ПакетSaleItem.ReturnUID = НоменклатураUID;
	//Если ЗначениеЗаполнено(НоменклатураСсылка.ЗначениеХарактеристики1) Тогда
	//	ПакетSaleItem.Property1 = XMLСтрока(НоменклатураСсылка.ЗначениеХарактеристики1);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(НоменклатураСсылка.ЗначениеХарактеристики2) Тогда
	//	ПакетSaleItem.Property2 = XMLСтрока(НоменклатураСсылка.ЗначениеХарактеристики2);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(НоменклатураСсылка.ЗначениеХарактеристики3) Тогда
	//	ПакетSaleItem.Property3 = XMLСтрока(НоменклатураСсылка.ЗначениеХарактеристики3);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(НоменклатураСсылка.ЗначениеХарактеристики4) Тогда
	//	ПакетSaleItem.Property4 = XMLСтрока(НоменклатураСсылка.ЗначениеХарактеристики4);
	//КонецЕсли;
	
	ДобавитьВПакетШК(ПакетSaleItem, ТипBarcode, НоменклатураСсылка, НоменклатураUID);
	ДобавитьВПакетОтделы(ПакетSaleItem, ТипSection);
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//всёравно всёпереписывать...
	ТипItemRestriction = ТипPacket.Свойства.Получить("ItemRestriction").Тип;
	ПакетItemRestriction = ФабрикаXDTO.Создать(ТипItemRestriction);
	ПакетItemRestriction.PriceListCategoryUID = "00000000-0000-0000-0000-000000000000";
	ПакетItemRestriction.ItemUID = НоменклатураUID;
	ПакетItemRestriction.StoreUID = XMLСтрока(СтруктурнаяЕдиница);
	ПакетItemRestriction.MinPrice = сткДополнительныеРеквизиты.МинимальнаяЦена;
	ПакетItemRestriction.MaxDiscountPercent =  сткДополнительныеРеквизиты.МаксимальныйПроцентСкидки;
	
	Возврат Новый Структура("ПакетItem, ПакетItemUnitSchema, ПакетSaleItem, ПакетItemRestriction", ПакетItem, ПакетItemUnitSchema, ПакетSaleItem, ПакетItemRestriction);
КонецФункции
Функция ДобавитьВПакетШК(ПакетSaleItem, ТипBarcode, НоменклатураСсылка, UIDТранзакционногоТовара, ПоПравиламСлужебныхКодов = Истина)

	ШК = ПолучитьШК(НоменклатураСсылка, ПоПравиламСлужебныхКодов);
	Если Не ШК = Неопределено Тогда
		//ТипBarcode = ТипSaleItem.Свойства.Получить("Barcode").Тип;
		ПакетBarcode = ФабрикаXDTO.Создать(ТипBarcode);
		ПакетBarcode.ID = ШК;
		ПакетBarcode.ReturnUID = UIDТранзакционногоТовара;
		ПакетSaleItem.Barcode.Добавить(ПакетBarcode);
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции // ДобавитьВПакетШК()
Функция ДобавитьВПакетОтделы(ПакетSaleItem, ТипSection)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Владелец В ИЕРАРХИИ (&Владелец)
		|	И Склады.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Розничный)";

	Запрос.УстановитьПараметр("Владелец", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница); //V

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПакетSection = ФабрикаXDTO.Создать(ТипSection);
		ПакетSection.UID = XMLСтрока(Выборка.Ссылка);
		ПакетSaleItem.Section.Добавить(ПакетSection);
	КонецЦикла;

	Возврат Истина;
КонецФункции // ДобавитьВПакетОтделы()

Функция ОтправитьНоменклатуру1(Объект,Прокси,Ошибка, СтруктурнаяЕдиница)
	UID = Строка(Объект.Ссылка.УникальныйИдентификатор());
	ТипPacket = ФабрикаXDTO.Тип("http://1c-astor.ru/SMS", "Packet");
	ПакетPacket = ФабрикаXDTO.Создать(ТипPacket);
	ПакетPacket.Source = Строка(ПланыОбмена.ОбменРБД.ЭтотУзел().УникальныйИдентификатор());
	ПакетPacket.Version = "1.0";
	ПакетPacket.ObjectName = "Номенклатура";   
	Если Объект.Группа = 1 Тогда
		ТипItem = ТипPacket.Свойства.Получить("ItemGroup").Тип;
		ПакетItem = ФабрикаXDTO.Создать(ТипItem);
		ПакетItem.UID = UID;
		ПакетItem.ID = Объект.Код;
		ПакетItem.Name = Объект.Наименование;
		ПакетItem.IsDeleted = Объект.ПометкаУдаления;
		ПакетItem.ParentItemGroupUID = Строка(Объект.Родитель.УникальныйИдентификатор());
		ПакетPacket.ItemGroup.Добавить(ПакетItem);
	ИначеЕсли Объект.Родитель.Группа = 0 Тогда
		Возврат Истина;
	Иначе	
		ТипItem = ТипPacket.Свойства.Получить("Item").Тип;
		ТипItemUnitSchema = ТипItem.Свойства.Получить("ItemUnitSchema").Тип;
		ТипSaleItem = ТипItemUnitSchema.Свойства.Получить("SaleItem").Тип;
		ТипBarcode = ТипSaleItem.Свойства.Получить("Barcode").Тип;
		//ТипPriceList = ТипSaleItem.Свойства.Получить("PriceList").Тип;
		
		//UIDТранзакционногоТовара = UID;
		Если Объект.Транзакционный Тогда
			UIDТранзакционногоТовара = UID;
			
			сткПакет = СоздатьПакетНоменклатура(ТипPacket, Объект.Ссылка, СтруктурнаяЕдиница);
			Если Не ТипЗнч(сткПакет) = Тип("Структура") Тогда
				Ошибка = "Ошибка создания пакета";
				Возврат Ложь;
			КонецЕсли;
			ПакетItem = сткПакет.ПакетItem;
			ПакетItemUnitSchema = сткПакет.ПакетItemUnitSchema;
			ПакетSaleItem = сткПакет.ПакетSaleItem;
			ПакетItemRestriction = сткПакет.ПакетItemRestriction;
		КонецЕсли;
		
		ВыборкаВторойУровень = Справочники.Номенклатура.Выбрать(Объект.Ссылка);
		Пока ВыборкаВторойУровень.Следующий() Цикл
			Если ВыборкаВторойУровень.Транзакционный Тогда
				UIDТранзакционногоТовара = XMLСтрока(ВыборкаВторойУровень.Ссылка);
				
				сткПакет = СоздатьПакетНоменклатура(ТипPacket, ВыборкаВторойУровень.Ссылка, СтруктурнаяЕдиница);
				Если Не ТипЗнч(сткПакет) = Тип("Структура") Тогда
					Ошибка = "Ошибка создания пакета";
					Возврат Ложь;
				КонецЕсли;
				ПакетItem = сткПакет.ПакетItem;
				ПакетItemUnitSchema = сткПакет.ПакетItemUnitSchema;
				ПакетSaleItem = сткПакет.ПакетSaleItem;
				ПакетItemRestriction = сткПакет.ПакетItemRestriction;
				
			ИначеЕсли Объект.Транзакционный Тогда//просто добавляем ШК
				ДобавитьВПакетШК(ПакетSaleItem, ТипBarcode, ВыборкаВторойУровень.Ссылка, UIDТранзакционногоТовара, Ложь);
			//Иначе остается только транзакционный третий уровень
			КонецЕсли;
			
			ВыборкаТретийУровень = Справочники.Номенклатура.Выбрать(ВыборкаВторойУровень.Ссылка);
			Пока ВыборкаТретийУровень.Следующий() Цикл
				Если ВыборкаТретийУровень.Транзакционный Тогда
					сткПакет = СоздатьПакетНоменклатура(ТипPacket, ВыборкаТретийУровень.Ссылка, СтруктурнаяЕдиница);
					Если Не ТипЗнч(сткПакет) = Тип("Структура") Тогда
						Ошибка = "Ошибка создания пакета";
						Возврат Ложь;
					КонецЕсли;
					ПакетItem = сткПакет.ПакетItem;
					ПакетItemUnitSchema = сткПакет.ПакетItemUnitSchema;
					ПакетSaleItem = сткПакет.ПакетSaleItem;
					ПакетItemRestriction = сткПакет.ПакетItemRestriction;
					
					//сразу добавим в пакет
					ПакетItemUnitSchema.SaleItem.Добавить(ПакетSaleItem);
					ПакетItem.ItemUnitSchema.Добавить(ПакетItemUnitSchema);	
					ПакетPacket.Item.Добавить(ПакетItem);
					ПакетPacket.ItemRestriction.Добавить(ПакетItemRestriction);
				ИначеЕсли Объект.Транзакционный Или ВыборкаВторойУровень.Транзакционный Тогда//просто добавляем ШК
					ДобавитьВПакетШК(ПакетSaleItem, ТипBarcode, ВыборкаТретийУровень.Ссылка, XMLСтрока(ВыборкаТретийУровень.Ссылка), Ложь);
				//Иначе не было ни одного из трех уровня транзакционного
				КонецЕсли;	
			КонецЦикла;
			
			Если ВыборкаВторойУровень.Транзакционный Тогда	//создавали пакет, надо добавить его
				ПакетItemUnitSchema.SaleItem.Добавить(ПакетSaleItem);
				ПакетItem.ItemUnitSchema.Добавить(ПакетItemUnitSchema);	
				ПакетPacket.Item.Добавить(ПакетItem);
				ПакетPacket.ItemRestriction.Добавить(ПакетItemRestriction);
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.Транзакционный Тогда	//создавали пакет, надо добавить его
			ПакетItemUnitSchema.SaleItem.Добавить(ПакетSaleItem);	
			ПакетItem.ItemUnitSchema.Добавить(ПакетItemUnitSchema);	
			ПакетPacket.Item.Добавить(ПакетItem);
			ПакетPacket.ItemRestriction.Добавить(ПакетItemRestriction);
		КонецЕсли;	
	КонецЕсли;	
	Результат = Истина;//ОтправитьПакет(ПакетPacket,Прокси);
	Ошибка = ПакетPacket;
	// !!! пока не удаляем след строки !!!
	//Если Результат <> Ложь И Объект.ТипТовара = Перечисления.ТипыТоваров.Весовой Тогда
	//	Результат = УправлениеВесамиСервер.ЗагрузитьНоменклатуруВоВсеВесы(Объект);
	//КонецЕсли;	
	Возврат Результат;
КонецФункции

Процедура ПриЗаписиНоменклатуры(Объект, Отказ) Экспорт
	Возврат;
	//Родитель = Объект.Ссылка;
	//Номенклатура = Родитель;
	//Пока Не Родитель.Пустая() И Родитель.Группа <> 1 Цикл
	//	Номенклатура = Родитель;
	//	Родитель = Родитель.Родитель;
	//КонецЦикла;
	//Выборка = ПланыОбмена.ОбменSMS.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.Ссылка = ПланыОбмена.ОбменSMS.ЭтотУзел() Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Номенклатура);
	//КонецЦикла;	
КонецПроцедуры	
Функция ПолучитьШК(Объект, ПоПравиламСлужебныхКодов = Ложь)
	
	СлужебныйКод = ВРег(СокрЛП(Объект.ТипКода.Код));
	
	Если СлужебныйКод = "VPLU" Тогда
		Результат = Объект.ПрефиксPLU + Объект.Код;
	ИначеЕсли ПоПравиламСлужебныхКодов Тогда
		Если Лев(СлужебныйКод, 3) = "EAN"
			Или Лев(СлужебныйКод, 3) = "UPC"
			Или Лев(СлужебныйКод, 3) = "UCC"
			//Или СлужебныйКод = "VPLU"
			//Или СлужебныйКод = "MANL"
			Тогда
			Результат = Объект.Код;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
	Иначе
		Результат = Объект.Код;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьШК()
Функция ПолучитьАртикул(Объект)

	СлужебныйКод = ВРег(СокрЛП(Объект.ТипКода.Код));
	
	Если Лев(СлужебныйКод, 4) = "ISBN"
		Или СлужебныйКод = "MANL" И Объект.Транзакционный
		Или СлужебныйКод = "VPLU" И Объект.Транзакционный
		Или СлужебныйКод = "ITEM"
		Или СлужебныйКод = "NDC"
		Или СлужебныйКод = "PLU"
		Или СлужебныйКод = "SSCC" Тогда
		Результат = Объект.Код;
	Иначе
		Результат = "";
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
Функция ПолучитьДополнительныеРеквизиты(НоменклатураСсылка)

	сткДополнительныеРеквизиты = Новый Структура("СрокХранения, ПроцентСпирта, МаксимальныйПроцентСкидки, МинимальнаяЦена");
	
	//пвхСрокХранения = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоНаименованию("Срок хранения");
	//пвхПроцентСпирта = ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры.НайтиПоКоду(ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаКрепость));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДополнительныеРеквизиты.СрокХранения) КАК СрокХранения,
		|	МАКСИМУМ(ДополнительныеРеквизиты.ПроцентСпирта) КАК ПроцентСпирта,
		|	МАКСИМУМ(ДополнительныеРеквизиты.МаксимальныйПроцентСкидки) КАК МаксимальныйПроцентСкидки,
		|	МАКСИМУМ(ДополнительныеРеквизиты.МинимальнаяЦена) КАК МинимальнаяЦена
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(МАКСИМУМ(НоменклатураДополнительныеРеквизиты.Значение), 0) КАК СрокХранения,
		|		0 КАК ПроцентСпирта,
		|		0 КАК МаксимальныйПроцентСкидки,
		|		0 КАК МинимальнаяЦена
		|	ИЗ
		|		Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК ДополнительныеРеквизитыНоменклатуры
		|			ПО НоменклатураДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыНоменклатуры.Ссылка
		|				И (ДополнительныеРеквизитыНоменклатуры.Код = &КодРеквизитаСрокХранения)
		|	ГДЕ
		|		НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		ЕСТЬNULL(МАКСИМУМ(НоменклатураДополнительныеРеквизиты.Значение), 0),
		|		0,
		|		0
		|	ИЗ
		|		Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК ДополнительныеРеквизитыНоменклатуры
		|			ПО НоменклатураДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыНоменклатуры.Ссылка
		|				И (ДополнительныеРеквизитыНоменклатуры.Код = &КодРеквизитаКрепость)
		|	ГДЕ
		|		НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		ЕСТЬNULL(МАКСИМУМ(НоменклатураДополнительныеРеквизиты.Значение), 0),
		|		0
		|	ИЗ
		|		Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК ДополнительныеРеквизитыНоменклатуры
		|			ПО НоменклатураДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыНоменклатуры.Ссылка
		|				И (ДополнительныеРеквизитыНоменклатуры.Код = &КодРеквизитаМаксимальныйПроцентСкидки)
		|	ГДЕ
		|		НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		0,
		|		ЕСТЬNULL(МАКСИМУМ(НоменклатураДополнительныеРеквизиты.Значение), 0)
		|	ИЗ
		|		Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры КАК ДополнительныеРеквизитыНоменклатуры
		|			ПО НоменклатураДополнительныеРеквизиты.Свойство = ДополнительныеРеквизитыНоменклатуры.Ссылка
		|				И (ДополнительныеРеквизитыНоменклатуры.Код = &КодРеквизитаМинимальнаяЦена)
		|	ГДЕ
		|		НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка) КАК ДополнительныеРеквизиты";

	Запрос.УстановитьПараметр("Ссылка", НоменклатураСсылка);
	Запрос.УстановитьПараметр("КодРеквизитаСрокХранения", ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаСрокХранения));
	Запрос.УстановитьПараметр("КодРеквизитаКрепость",     ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаКрепость));
	Запрос.УстановитьПараметр("КодРеквизитаМаксимальныйПроцентСкидки", ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаМаксимальныйПроцентСкидки));
	Запрос.УстановитьПараметр("КодРеквизитаМинимальнаяЦена", ОбщегоНазначения.ПолучитьЗначениеСвойстваСлужебногоЗначения(ПланыВидовХарактеристик.СлужебныеЗначения.КодРеквизитаМинимальнаяЦена));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	//ЗаполнитьЗначенияСвойств(сткДополнительныеРеквизиты, Выборка);
	сткДополнительныеРеквизиты.СрокХранения = Число(Формат(Выборка.СрокХранения,"ЧН=0; ЧГ=0"));
	сткДополнительныеРеквизиты.ПроцентСпирта = Число(Формат(Выборка.ПроцентСпирта,"ЧН=0; ЧГ=0"));
	сткДополнительныеРеквизиты.МаксимальныйПроцентСкидки = Число(Формат(Выборка.МаксимальныйПроцентСкидки,"ЧН=0; ЧГ=0"));
	сткДополнительныеРеквизиты.МинимальнаяЦена = Число(Формат(Выборка.МинимальнаяЦена,"ЧН=0; ЧГ=0"));
	
	Возврат сткДополнительныеРеквизиты;
	
КонецФункции
