
// Функция АвторизованныйПользователь возвращает
// текущего пользователя сеанса.
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи.
// 
Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

// Функция ЭтоПолноправныйПользовательИБ проверяет,
// является ли полноправным текущий пользователь ИБ или
// пользователь ИБ заданного пользователя (обычного или внешнего).
//
//  Полноправными считается:
// а) пользователь ИБ при пустом списке пользователей ИБ,
//    если основная роль не задана или ПолныеПрава,
// б) пользователь ИБ с ролью ПолныеПрава.
//
//
// Параметры:
//  Пользователь - Неопределено (проверяется текущий пользователь ИБ),
//                 Справочник.Пользователи
//                 (осуществляется поиск пользователя ИБ по уникальному
//                  идентификатору,
//                  если пользователь ИБ не найден, возвращается Ложь).
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПолноправныйПользовательИБ(Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Пользователь) И Пользователь <> АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПолучитьУникальныйИдентификаторПользователяИБ(Пользователь));
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;
	
	Если ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		
		Если ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
			
			Возврат РольДоступна("ПолныеПрава");
		Иначе
			// Авторизован пустой пользователь - список пользователей пуст,
			// если основная роль пустая - все права разрешены.
			Если Метаданные.ОсновнаяРоль = Неопределено ИЛИ
				 Метаданные.ОсновнаяРоль = Метаданные.Роли.ПолныеПрава Тогда
				
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
	КонецЕсли;
	
КонецФункции


Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежим() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	ИначеЕсли Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ТекущийПользовательИБ;
	Иначе
		// Задан не текущий пользователь.
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьРольПолныеПрава = Истина;
	ПроверитьРольАдминистратораСистемы = Истина;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Если ПроверятьПраваАдминистрированияСистемы Тогда
			ПроверитьРольПолныеПрава = Ложь;
		Иначе
			ПроверитьРольАдминистратораСистемы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательИБ.УникальныйИдентификатор <> ТекущийПользовательИБ.УникальныйИдентификатор Тогда
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы()) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Если СтандартныеПодсистемыПовтИсп.ПривилегированныйРежимУстановленПриЗапуске() Тогда
			// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
			// пользователь является полноправным, если привилегированный режим установлен.
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя) И Метаданные.ОсновнаяРоль = Неопределено Тогда
			// Когда основная роль не указана, тогда у неуказанного пользователя
			// есть все права (как в привилегированном режиме).
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя)
		   И ПривилегированныйРежим()
		   И ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
			// Когда у неуказанного пользователя есть право Администрирование,
			// тогда привилегированный режим учитывается всегда для поддержки
			// параметра запуска UsePrivilegedMode у не клиентских приложений.
			Возврат Истина;
		КонецЕсли;
		
		// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
		// а роли в текущем сеансе.
		Если ПроверитьРольПолныеПрава
		   И НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ РольДоступна(РольАдминистратораСистемы()) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции


// Проверить, что запуск программы выполнен от имени внешнего пользователя 
// и выбросить исключение в этом случае.
//
// Параметры
//  ТекстСообщения  - Строка - текст исключения. Если не задан, 
//                             используется текст по умолчанию.
//
// Пример использования:
//    ПрерватьВыполнениеЕслиАвторизованВнешнийПользователь();
//    ... далее располагается фрагмент кода, который рассчитывает только на выполнение 
//        из-под "обычного" пользователя.
//
Процедура ПрерватьВыполнениеЕслиАвторизованВнешнийПользователь(Знач ТекстСообщения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		ТекстИсключения = ТекстСообщения;
		Если ПустаяСтрока(ТекстИсключения) Тогда
			ТекстИсключения = НСтр("ru = 'Данная операция не доступна внешнему пользователю системы.'");
		КонецЕсли;	
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры	
	
////////////////////////////////////////////////////////////////////////////////
// Интерфейсные процедуры и функции

// Функция СформироватьДанныеВыбораПользователя возвращает список
// пользователей, групп пользователей, внешних пользователей
// не помеченных на удаление.
//  Используется в обработчиках событий ОкончаниеВводаТекста и АвтоПодбор.
//
// Параметры:
//  Текст        - Строка, символы введенные пользователем.
//  ВключаяГруппы - Булево, если Истина, включать группы пользователей.
//  
//
Функция СформироватьДанныеВыбораПользователя(Знач Текст, Знач ВключаяГруппы = Истина, Знач ВключаяВнешнихПользователей = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК Наименование,
	|	КОГДА ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница = &ТекущаяСтруктурнаяЕдиница 
	|		ТОГДА ВЫБОР
	|				КОГДА Пользователи.ПометкаУдаления
	|					ТОГДА 0
	|				КОГДА ПользователиСтруктурныхЕдиниц.УникальныйИдентификатор = &ПустойУникальныйИдентификатор
	|					ТОГДА 4
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	ИНАЧЕ ВЫБОР
	|			КОГДА Пользователи.ПометкаУдаления
	|				ТОГДА 6
	|			КОГДА ПользователиСтруктурныхЕдиниц.УникальныйИдентификатор = &ПустойУникальныйИдентификатор
	|				ТОГДА 10
	|			ИНАЧЕ 7
	|		КОНЕЦ
	|КОНЕЦ КАК НомерКартинки,
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
	|			ПО ПользователиСтруктурныхЕдиниц.Пользователь = Пользователи.Ссылка
	|			И (ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница = &ТекущаяСтруктурнаяЕдиница)
	|ГДЕ
	|	(НЕ Пользователи.ПометкаУдаления)
	|	И Пользователи.Наименование ПОДОБНО &Текст
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГруппыПользователей.Ссылка,
	|	ГруппыПользователей.Наименование,
	|	3
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	&ВключаяГруппы
	|	И (НЕ ГруппыПользователей.ПометкаУдаления)
	|	И ГруппыПользователей.Наименование ПОДОБНО &Текст";
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ВключаяГруппы", ВключаяГруппы);
	Запрос.УстановитьПараметр("ТекущаяСтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	УстановитьПривилегированныйРежим(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование, , БиблиотекаКартинок["ПиктограммыПользователя" + Формат(Выборка.НомерКартинки + 1, "ЧЦ=2; ЧВН=; ЧГ=")]);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Процедура ЗаполнитьНомераКартинокПользователей заполняет номера картинок
// пользователей, групп пользователей, внешних пользователей и групп внешних пользователей.
// 
// Параметры:
//  Таблица      - ДанныеФормыКоллекция.
//  ИмяПоляПользователь - Строка, имя поля содержащего ссылку на пользователя, группу пользователей,
//                 внешнего пользователя или группу внешних пользователей.
//  ИмяПоляНомераКартинки - Строка, имя поля содержащего номер картинки, который нужно установить.
//  ИдентификаторСтроки  - Неопределено, Число, идентификатор строки (не порядковый номер),
//                 когда Неопределено, заполнить картинки для всех строк таблицы.
//
Процедура ЗаполнитьНомераКартинокПользователей(Таблица, ИмяПоляПользователь, ИмяПоляНомераКартинки, ИдентификаторСтроки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.#ИмяПоляПользователь КАК Пользователь
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	&Пользователи КАК Пользователи
	|;
	|
	|ВЫБРАТЬ
	|	Пользователи.Пользователь,
	|	ВЫБОР
	|		КОГДА Пользователи.Пользователь = Неопределено
	|			ТОГДА -1
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.Пользователи)
	|			ТОГДА ВЫБОР
	|					КОГДА Пользователи.Пользователь.ПометкаУдаления
	|						ТОГДА 0
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПользователиСтруктурныхЕдиниц.УникальныйИдентификатор = &ПустойУникальныйИдентификатор
	|								ТОГДА 4
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыПользователей)
	|			ТОГДА ВЫБОР
	|				КОГДА Пользователи.Пользователь.ПометкаУдаления
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|		ИНАЧЕ -2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
	|	ПО ПользователиСтруктурныхЕдиниц.Пользователь = Пользователи.Пользователь
	|		И (ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница = &ТекущаяСтруктурнаяЕдиница)", "#ИмяПоляПользователь", ИмяПоляПользователь));
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("ТекущаяСтруктурнаяЕдиница", ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		
		Запрос.УстановитьПараметр("Пользователи", Таблица.Выгрузить(, ИмяПоляПользователь));
		НомераКартинок = Запрос.Выполнить().Выгрузить();
		
		Для каждого Строка Из Таблица Цикл
			Строка[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка[ИмяПоляПользователь], "Пользователь").НомерКартинки;
		КонецЦикла;
	Иначе
		Строка = Таблица.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Строка);
		Запрос.УстановитьПараметр("Пользователи", Таблица.Выгрузить(МассивСтрок, ИмяПоляПользователь));
		НомераКартинок = Запрос.Выполнить().Выгрузить();
		
		Строка[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка[ИмяПоляПользователь], "Пользователь").НомерКартинки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы для внутренних нужд

// Функция ПрочитатьПользователяИБ считывает свойства пользователя
// информационной базы по строковому или уникальному идентификатору.
//
// Параметры:
//  Идентификатор - Неопределено, Строка, УникальныйИдентификатор (идентификатор пользователя).
//  Свойства     - Структура:
//                 ПользовательИнфБазыУникальныйИдентификатор   - УникальныйИдентификатор
//                 ПользовательИнфБазыИмя                       - Строка
//                 ПользовательИнфБазыПолноеИмя                 - Строка
//
//                 ПользовательИнфБазыАутентификацияСтандартная - Булево
//                 ПользовательИнфБазыПоказыватьВСпискеВыбора   - Булево
//                 ПользовательИнфБазыПароль                    - Неопределено
//                 ПользовательИнфБазыСохраняемоеЗначениеПароля - Строка
//                 ПользовательИнфБазыПарольУстановлен          - Булево
//                 ПользовательИнфБазыЗапрещеноИзменятьПароль   - Булево
//
//                 ПользовательИнфБазыАутентификацияОС          - Булево
//                 ПользовательИнфБазыПользовательОС            - Строка
//
//                 ПользовательИнфБазыОсновнойИнтерфейс         - Строка (имя интерфейса из коллекции Метаданные.Интерфейсы)
//                 ПользовательИнфБазыРежимЗапуска              - Строка (значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение")
//                 ПользовательИнфБазыЯзык                      - Строка (имя языка из коллекции Метаданные.Языки)
//
//  Роли           - Массив значений типа Строка (имена ролей из коллекции Метаданные.Роли)
//  
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ПрочитатьПользователяИБ(Знач Идентификатор, Свойства = Неопределено, Роли = Неопределено, ОписаниеОшибки = "", ПользовательИБ = Неопределено,СтруктурнаяЕдиница = Неопределено) Экспорт
	
	// Подготовка структур возвращаемых данных
	Свойства = Новый Структура;
	Свойства.Вставить("ПользовательИнфБазыУникальныйИдентификатор",   Новый УникальныйИдентификатор);
	Свойства.Вставить("ПользовательИнфБазыИмя",                       "");
	Свойства.Вставить("ПользовательИнфБазыПолноеИмя",                 "");
	Свойства.Вставить("ПользовательИнфБазыАутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПользовательИнфБазыПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыПароль",                    Неопределено);
	Свойства.Вставить("ПользовательИнфБазыСохраняемоеЗначениеПароля", "");
	Свойства.Вставить("ПользовательИнфБазыПарольУстановлен",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыАутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыПользовательОС",            "");
	Свойства.Вставить("ПользовательИнфБазыОсновнойИнтерфейс",         ?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	Свойства.Вставить("ПользовательИнфБазыРежимЗапуска",              "Авто");
	Свойства.Вставить("ПользовательИнфБазыЯзык",                      ?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Роли = Новый Массив;
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		Если Идентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
			ПользовательИБ = Неопределено;
		Иначе	
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
			Если ПользовательИБ = Неопределено И ПараметрыСеанса.ЭтоЦентр Тогда
				ПользовательИБ = НайтиПользователяПериферийнойБызы(Идентификатор,СтруктурнаяЕдиница);
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Если Идентификатор = "" ИЛИ Идентификатор = "<Не указан>" Тогда
			ПользовательИБ = Неопределено;
		Иначе	
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
			Если ПользовательИБ = Неопределено И ПараметрыСеанса.ЭтоЦентр Тогда
				ПользовательИБ = НайтиПользователяПериферийнойБызы(Идентификатор,СтруктурнаяЕдиница);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		ОписаниеОшибки = СтрЗаменить(НСтр("ru = 'Пользователь информационной базы ""%1""' не найден!"), "%1", Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	Свойства.ПользовательИнфБазыУникальныйИдентификатор     = ПользовательИБ.УникальныйИдентификатор;
	Свойства.ПользовательИнфБазыИмя                         = ПользовательИБ.Имя;
	Свойства.ПользовательИнфБазыПолноеИмя                   = ПользовательИБ.ПолноеИмя;
	Свойства.ПользовательИнфБазыАутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
	Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора     = ПользовательИБ.ПоказыватьВСпискеВыбора;
	//Свойства.ПользовательИнфБазыСохраняемоеЗначениеПароля   = ПользовательИБ.СохраняемоеЗначениеПароля;
	Свойства.ПользовательИнфБазыПарольУстановлен            = ПользовательИБ.ПарольУстановлен;
	Попытка 
		Свойства.ПользовательИнфБазыПароль                  = ПользовательИБ.Пароль;
	Исключение
		Попытка 
			ПользовательИБ_Регистр = НайтиПользователяПериферийнойБызы(Идентификатор,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
			Свойства.ПользовательИнфБазыПароль                  = ПользовательИБ_Регистр.Пароль;
			Свойства.ПользовательИнфБазыПарольУстановлен        = ЗначениеЗаполнено(Свойства.ПользовательИнфБазыПароль);
		Исключение
			Свойства.ПользовательИнфБазыПарольУстановлен            = Ложь;
		КонецПопытки;	
	КонецПопытки;	
	Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль     = ПользовательИБ.ЗапрещеноИзменятьПароль;
	Свойства.ПользовательИнфБазыАутентификацияОС            = ПользовательИБ.АутентификацияОС;
	Свойства.ПользовательИнфБазыПользовательОС              = ПользовательИБ.ПользовательОС;
	ОсновнойИнтерфейс = ПользовательИБ.ОсновнойИнтерфейс;
	Свойства.ПользовательИнфБазыОсновнойИнтерфейс           = ?(ОсновнойИнтерфейс = Неопределено ИЛИ ОсновнойИнтерфейс = "", "", ОсновнойИнтерфейс.Имя);
	Свойства.ПользовательИнфБазыРежимЗапуска                = ?(ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение,
	                                                            "ОбычноеПриложение",
	                                                            ?(ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение,
	                                                              "УправляемоеПриложение",
	                                                              "Авто"));
	Свойства.ПользовательИнфБазыЯзык                        = ?(ПользовательИБ.Язык = Неопределено, "", Строка(ПользовательИБ.Язык));
	
	Если ТипЗнч(ПользовательИБ.Роли) = Тип("РолиПользователя") Тогда
		Для каждого Роль Из ПользовательИБ.Роли Цикл
			Роли.Добавить(Роль.Имя);
		КонецЦикла;
	Иначе	
		СписокРолей = ПользовательИБ.Роли.Получить();
		Если СписокРолей <> Неопределено Тогда
			Для каждого Роль Из СписокРолей Цикл
				Роли.Добавить(Роль);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;	
	
	
	Возврат Истина;
	
КонецФункции

Функция НайтиПользователяПериферийнойБызы(Идентификатор,СтруктурнаяЕдиница = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ПользователиСтруктурныхЕдиниц.Имя,
	                      |	ПользователиСтруктурныхЕдиниц.ПолноеИмя,
	                      |	ПользователиСтруктурныхЕдиниц.АутентификацияСтандартная,
	                      |	ПользователиСтруктурныхЕдиниц.ПоказыватьВСпискеВыбора,
	                      |	ПользователиСтруктурныхЕдиниц.Пароль,
	                      |	ПользователиСтруктурныхЕдиниц.ЗапрещеноИзменятьПароль,
	                      |	ПользователиСтруктурныхЕдиниц.АутентификацияОС,
	                      |	ПользователиСтруктурныхЕдиниц.ПользовательОС,
	                      |	ПользователиСтруктурныхЕдиниц.РежимЗапуска,
	                      |	ПользователиСтруктурныхЕдиниц.Язык,
	                      |	ПользователиСтруктурныхЕдиниц.Роли,
	                      |	ПользователиСтруктурныхЕдиниц.УникальныйИдентификатор,
	                      |	ПользователиСтруктурныхЕдиниц.ОсновнойИнтерфейс,
	                      |	ПользователиСтруктурныхЕдиниц.ПарольУстановлен
	                      |ИЗ
	                      |	РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
	                      |ГДЕ";
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		Запрос.Текст = Запрос.Текст + "
	                      |	ПользователиСтруктурныхЕдиниц.УникальныйИдентификатор = &УникальныйИдентификатор";
	Иначе
		Запрос.Текст = Запрос.Текст + "
	                      |	ПользователиСтруктурныхЕдиниц.Имя = &УникальныйИдентификатор ИЛИ ПользователиСтруктурныхЕдиниц.ПолноеИмя = &УникальныйИдентификатор";
	КонецЕсли;
	Если СтруктурнаяЕдиница <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
	                      |	И ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",СтруктурнаяЕдиница);
	КонецЕсли;
	Запрос.УстановитьПараметр("УникальныйИдентификатор",Идентификатор);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка;
КонецФункции	

// Функция ЗаписатьПользователяИБ
// либо перезаписывает свойства пользователяИБ,
//      найденного по строковому или уникальному идентификатору,
// либо создает нового пользователяИБ, когда задано создать,
//      при этому, если пользовательИБ найден будет ошибка
//
// Параметры:
//  Идентификатор - Строка, УникальныйИдентификатор (идентификатор пользователя).
//  НовыеСвойства - Структура (свойство может быть не указано,
//                            тогда используется прочитанное или начальное значение)
//                 ПользовательИнфБазыИмя                       - Неопределено, Строка
//                 ПользовательИнфБазыПолноеИмя                 - Неопределено, Строка
//
//                 ПользовательИнфБазыАутентификацияСтандартная - Неопределено, Булево
//                 ПользовательИнфБазыПоказыватьВСпискеВыбора   - Неопределено, Булево
//                 ПользовательИнфБазыПароль                    - Неопределено, Строка
//                 ПользовательИнфБазыСохраняемоеЗначениеПароля - Неопределено, Строка
//                 ПользовательИнфБазыПарольУстановлен          - Неопределено, Булево
//                 ПользовательИнфБазыЗапрещеноИзменятьПароль   - Неопределено, Булево
//
//                 ПользовательИнфБазыАутентификацияОС          - Неопределено, Булево
//                 ПользовательИнфБазыПользовательОС            - Неопределено, Строка
//
//                 ПользовательИнфБазыОсновнойИнтерфейс         - Неопределено, Строка (имя интерфейса из коллекции Метаданные.Интерфейсы)
//                 ПользовательИнфБазыРежимЗапуска              - Неопределено, Строка (значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение")
//                 ПользовательИнфБазыЯзык                      - Неопределено, Строка (имя языка из коллекции Метаданные.Языки)
//
//  НовыеРоли      - Неопределено, Массив значений типа Строка (имена ролей из коллекции Метаданные.Роли)
//
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ЗаписатьПользователяИБ(Знач Идентификатор, Знач НовыеСвойства, Знач НовыеРоли, Знач СоздатьНового = Ложь, ОписаниеОшибки = "") Экспорт
	
	ПользовательИБ = Неопределено;
	Свойства       = Неопределено;
	Роли           = Неопределено;
	
	ОкончательноеЧтение = ПрочитатьПользователяИБ(Идентификатор, Свойства, Роли, ОписаниеОшибки, ПользовательИБ,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	
	Если НЕ ОкончательноеЧтение ИЛИ ТипЗнч(ПользовательИБ) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Если СоздатьНового Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	//ИначеЕсли СоздатьНового Тогда
	//	ОписаниеОшибки = СтрЗаменить(НСтр("ru = 'Невозможно создать пользователя информационной базы ""%1""
	//											|так как он уже существует!'"), "%1", Идентификатор);
	//	Возврат Ложь;
	КонецЕсли;
	
	//Если ТипЗнч(ПользовательИБ) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
	//	Возврат Ложь;
	//КонецЕсли;	
	
	// Подготовка новых значений свойств
	Для каждого КлючИЗначение Из Свойства Цикл
		Если НовыеСвойства.Свойство(КлючИЗначение.Ключ) И НовыеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
			Свойства[КлючИЗначение.Ключ] = НовыеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеРоли <> Неопределено Тогда
		Роли = НовыеРоли;
	КонецЕсли;
	
	// Установка новых значений свойств
	
	ПользовательИБ.Имя                         = Свойства.ПользовательИнфБазыИмя;
	ПользовательИБ.ПолноеИмя                   = Свойства.ПользовательИнфБазыПолноеИмя;
	ПользовательИБ.АутентификацияСтандартная   = Свойства.ПользовательИнфБазыАутентификацияСтандартная;
	ПользовательИБ.ПоказыватьВСпискеВыбора     = Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора;
	Если Свойства.ПользовательИнфБазыПароль <> Неопределено 
		//И ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр 
		Тогда
		ПользовательИБ.Пароль                  = Свойства.ПользовательИнфБазыПароль;
	КонецЕсли;
	ПользовательИБ.ЗапрещеноИзменятьПароль     = Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль;
	ПользовательИБ.АутентификацияОС            = Свойства.ПользовательИнфБазыАутентификацияОС;
	ПользовательИБ.ПользовательОС              = Свойства.ПользовательИнфБазыПользовательОС;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыОсновнойИнтерфейс) Тогда
	    ПользовательИБ.ОсновнойИнтерфейс       = Метаданные.Интерфейсы[Свойства.ПользовательИнфБазыОсновнойИнтерфейс];
	Иначе
	    ПользовательИБ.ОсновнойИнтерфейс       = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыРежимЗапуска) Тогда
	    ПользовательИБ.РежимЗапуска            = РежимЗапускаКлиентскогоПриложения[Свойства.ПользовательИнфБазыРежимЗапуска];
	КонецЕсли;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыЯзык) Тогда
	    ПользовательИБ.Язык                    = Метаданные.Языки[Свойства.ПользовательИнфБазыЯзык];
	Иначе
	    ПользовательИБ.Язык                    = Неопределено;
	КонецЕсли;
	
	ПользовательИБ.Роли.Очистить();
	Для каждого Роль Из Роли Цикл
		Попытка
			ПользовательИБ.Роли.Добавить(Метаданные.Роли[Роль]);
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	// Добавление роли ПолныеПрава, при попытке создать первого пользователя с пустым списком ролей
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 И
	     НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
	КонецЕсли;
	
	// Попытка записи нового или измененного пользователяИБ
	Попытка
		ПользовательИБ.Записать();
		НовыеСвойства.ПользовательИнфБазыУникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор;
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка при записи пользователя информационной базы:'") + Символы.ПС + ИнформацияОбОшибке().Причина.Описание+" Полное имя: "+ПользовательИБ.ПолноеИмя;
		Возврат Ложь;
	КонецПопытки;
	
	
	Возврат Истина;
	
КонецФункции

// Функция удаляет пользователя информационной базы
// по строковому или уникальному идентификатору.
//
// Параметры:
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция УдалитьПользователяИБ(Знач Идентификатор, ОписаниеОшибки = "") Экспорт
	
	ПользовательИБ = Неопределено;
	Свойства       = Неопределено;
	Роли           = Неопределено;
	
	Если НЕ ПрочитатьПользователяИБ(Идентификатор, Свойства, Роли, ОписаниеОшибки, ПользовательИБ) Тогда
		Возврат Ложь;
	Иначе
		Попытка
			ПользовательИБ.Удалить();
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка при удалении пользователя информационной базы:'");// + Символы.ПС + ИнформацияОбОшибке().Причина.Описание;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ПользователиПереопределяемый.ПослеУдаленияПользователяИнформационнойБазы(Свойства);
	
	Возврат Истина;
	
КонецФункции

// Функция проверяет существования пользователя информационной базы
// Параметры
// Идентификатор - УникальныйИдентификатор, Строка
//                 УИД пользователяИБ или Имя пользователяИБ
//
// Возвращаемое значение:
//  Булево
//
Функция ПользовательИБСуществует(Знач Идентификатор) Экспорт
	Если Идентификатор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура, определяет пользователя, под которым запущен сеанс и пытается
// найти соответсвие ему в справочнике Пользователи. Если соответствие
// не найдено - создается новый элемент. Параметр сеанса ТекущийПользователь
// устанавливается как ссылка на найденный (созданный) элемент справочника.
//
Процедура ОпределитьТекущегоПользователя(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяПараметра <> "ТекущийПользователь" Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательНеНайден = Ложь;
	СоздатьПользователя  = Ложь;
	
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		
		Если ЭтоПолноправныйПользовательИБ() Тогда
			
			Админ = Пользователи.НайтиАдминистратора();
			Если ПараметрыСеанса.ЭтоЦентр Тогда
				Если Админ.Пустая() Тогда
					
					#Если ВнешнееСоединение Тогда
					#Иначе
					ТекстСообщенияОбОшибке = НСтр("ru = 'Не найден пользователь с административными или полными правами. 
					|Для создания пользователя используйте Конфигуратор'");
					ВызватьИсключение ТекстСообщенияОбОшибке;
					#КонецЕсли

				Иначе
					ПараметрыСеанса.ТекущийПользователь = Админ;
				КонецЕсли;
			Иначе
				ПараметрыСеанса.ТекущийПользователь = Админ;
			КонецЕсли;
			
			ТекущаяСтруктурнаяЕдиница = ПланыОбмена.ОбменРБД.ЭтотУзел().СтруктурнаяЕдиница;
			Если ТекущаяСтруктурнаяЕдиница.Пустая() Тогда
				ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр;
			КонецЕсли;	
			
			ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = ТекущаяСтруктурнаяЕдиница;
			ПараметрыСеанса.ЗапретВводаДробногоКоличества  = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ЗапретВводаДробногоКоличества, ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
			ПараметрыСеанса.ЗапретРедактированияЦенПродажи = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ЗапретРедактированияЦенПродажи, ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
			
		Иначе
			ПользовательНеНайден = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		
		Запрос = Новый Запрос;
		Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
		
		ТекущаяСтруктурнаяЕдиница = ПланыОбмена.ОбменРБД.ЭтотУзел().СтруктурнаяЕдиница;
		Если ТекущаяСтруктурнаяЕдиница.Пустая() Тогда
			ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр;
		КонецЕсли;	
		
		Запрос.Параметры.Вставить("СтруктурнаяЕдиница", ТекущаяСтруктурнаяЕдиница);
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПользователиСтруктурныхЕдиниц.Пользователь,
		|	ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
		|ГДЕ
		|	ПользователиСтруктурныхЕдиниц.УникальныйИдентификатор = &ИдентификаторПользователяИБ
		|	И (ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|			ИЛИ ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница.Родитель = &СтруктурнаяЕдиница)";
		РезультатПользователи = Запрос.Выполнить();
		
		
		Если РезультатПользователи.Пустой() Тогда
			Если ЭтоПолноправныйПользовательИБ() Тогда
				
				ТекущийПользователь         = ПользователиИнформационнойБазы.ТекущийПользователь();
				ИмяПользователя             = ТекущийПользователь.Имя;
				ПолноеИмяПользователя       = ТекущийПользователь.ПолноеИмя;
				ИдентификаторПользователяИБ = ТекущийПользователь.УникальныйИдентификатор;
				ПользовательПоНаименованию  = СсылкаПользователяПоПолномуНаименованию(ПолноеИмяПользователя);
				
				Если ПользовательПоНаименованию = Неопределено Тогда
					ПользовательНеНайден = Истина;
					СоздатьПользователя  = Истина;
				Иначе
					ПараметрыСеанса.ТекущийПользователь       = ПользовательПоНаименованию;
					ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = ТекущаяСтруктурнаяЕдиница;
					ПараметрыСеанса.ЗапретВводаДробногоКоличества  = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ЗапретВводаДробногоКоличества, ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
					ПараметрыСеанса.ЗапретРедактированияЦенПродажи = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ЗапретРедактированияЦенПродажи, ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
				КонецЕсли;
			Иначе
				ПользовательНеНайден = Истина;
			КонецЕсли;
		Иначе
			Выборка = РезультатПользователи.Выбрать();
			Выборка.Следующий();
			ПараметрыСеанса.ТекущийПользователь = Выборка.Пользователь;
			ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
			ПараметрыСеанса.ЗапретВводаДробногоКоличества  = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ЗапретВводаДробногоКоличества, ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
			ПараметрыСеанса.ЗапретРедактированияЦенПродажи = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ЗапретРедактированияЦенПродажи, ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьПользователя Тогда
		СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		ПараметрыСеанса.ТекущийПользователь = СсылкаНового;
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Наименование                = ПолноеИмяПользователя;
		НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
		
		Попытка
			НовыйПользователь.Записать();
		Исключение
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                           НСтр("ru = 'Пользователь: %1 не найден в справочнике ""Пользователи"".
			                                      |Возникла ошибка при добавлении пользователя в справочник.
			                                      |%2'"),
			                           ИмяПользователя,
			                           ОписаниеОшибки() );
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецПопытки;
		Запись = РегистрыСведений.ПользователиСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
		Запись.Пользователь = НовыйПользователь.Ссылка;
		Если ТекущаяСтруктурнаяЕдиница.Пустая() Тогда
			ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.Центр;
		Иначе
			ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница = ТекущаяСтруктурнаяЕдиница;
		КонецЕсли;
		ПараметрыСеанса.ЗапретВводаДробногоКоличества  = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ЗапретВводаДробногоКоличества, ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		ПараметрыСеанса.ЗапретРедактированияЦенПродажи = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ЗапретРедактированияЦенПродажи, ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		Запись.СтруктурнаяЕдиница = ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
		Запись.УникальныйИдентификатор = ИдентификаторПользователяИБ;
		Запись.Имя = ИмяПользователя;
		Запись.ПолноеИмя = ПолноеИмяПользователя;
		Запись.Записать();
		
	ИначеЕсли ПользовательНеНайден Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Пользователь: %1 не найден в справочнике ""Пользователи""!'");
		
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ИмяПользователя);
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	УстановленныеПараметры.Добавить(ИмяПараметра);
	
КонецПроцедуры

Функция ПользовательПоИдентификаторуСуществует(ПолноеИмя, СсылкаНаТекущего = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
	               |ГДЕ
	               |	ПользователиСтруктурныхЕдиниц.ПолноеИмя = &ПолноеИмя
	               |	И ПользователиСтруктурныхЕдиниц.Пользователь <> &СсылкаНаТекущего";
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПользовательИБНеЗанят(знач ИмяПользователя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПользовательПоИдентификаторуСуществует(ИмяПользователя) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли
	
КонецФункции

// Процедура ОбновитьСоставГруппПользователей обновляет в регистре сведений
// "Состав групп пользователей" соответствие групп пользователей и пользователей
// с учетом иерархии групп пользователей (родитель включает пользователей порожденных групп).
//  Эти данные требуются для формы списка и формы выбора пользователей.
//  Данные регистра могут быть применены в других целях для повышения производительности,
// т.к. не требуется работать с иерархией на языке запросов.
//
// Параметры:
//  ГруппаПользователей - СправочникСсылка.ГруппыПользователей
//
Процедура ОбновитьСоставГруппПользователей(Знач ГруппаПользователей) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка групп родителей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаГруппРодителей.Родитель,
	|	ТаблицаГруппРодителей.Ссылка
	|ПОМЕСТИТЬ ТаблицаГруппРодителей
	|ИЗ
	|	&ТаблицаГруппРодителей КАК ТаблицаГруппРодителей");
	Запрос.УстановитьПараметр("ТаблицаГруппРодителей", ТаблицаГруппРодителей("Справочник.ГруппыПользователей"));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ИзмененныеПользователи = Новый ТаблицаЗначений;
	ИзмененныеПользователи.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ИзмененныеГруппыПользователей = Новый ТаблицаЗначений;
	ИзмененныеГруппыПользователей.Колонки.Добавить("ГруппаПользователей", Новый ОписаниеТипов("СправочникСсылка.ГруппыПользователей"));
	ИзмененныеГруппыПользователей.Индексы.Добавить("ГруппаПользователей");
	
	// Выполнение для текущий группы и каждой группы-родителя.
	Пока НЕ ГруппаПользователей.Пустая() Цикл
		
		Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
		
		
		Если ГруппаПользователей <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
			// Удаление связей для удаленных пользователей.
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоставГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставГруппПользователей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаГруппРодителей КАК ТаблицаГруппРодителей
			|			ПО (ТаблицаГруппРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
			|				И (ТаблицаГруппРодителей.Родитель = &ГруппаПользователей)
			|		ПО (СоставГруппПользователей.ГруппаПользователей = &ГруппаПользователей)
			|			И СоставГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь
			|ГДЕ
			|	СоставГруппПользователей.ГруппаПользователей = &ГруппаПользователей
			|	И ГруппыПользователейСостав.Ссылка ЕСТЬ NULL ";
			ПользователиУдаленныеИзГруппы = Запрос.Выполнить().Выбрать();
			МенеджерЗаписи = РегистрыСведений.СоставыГруппПользователей.СоздатьМенеджерЗаписи();
			Пока ПользователиУдаленныеИзГруппы.Следующий() Цикл
				МенеджерЗаписи.ГруппаПользователей = ГруппаПользователей;
				МенеджерЗаписи.Пользователь        = ПользователиУдаленныеИзГруппы.Пользователь;
				МенеджерЗаписи.Удалить();
				Если ИзмененныеГруппыПользователей.Найти(ГруппаПользователей, "ГруппаПользователей") = Неопределено Тогда
					ИзмененныеГруппыПользователей.Добавить().ГруппаПользователей = ГруппаПользователей;
				КонецЕсли;
				ИзмененныеПользователи.Добавить().Пользователь = ПользователиУдаленныеИзГруппы.Пользователь;
			КонецЦикла;
		КонецЕсли;
		
		// Добавление связей для добавленных пользователей.
		Если ГруппаПользователей = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи) КАК ГруппаПользователей,
			|	Пользователи.Ссылка КАК Пользователь
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставГруппПользователей
			|		ПО (СоставГруппПользователей.ГруппаПользователей = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
			|			И (СоставГруппПользователей.Пользователь = Пользователи.Ссылка)
			|ГДЕ
			|	СоставГруппПользователей.Пользователь ЕСТЬ NULL ";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ГруппаПользователей КАК ГруппаПользователей,
			|	ГруппыПользователейСостав.Пользователь
			|ИЗ
			|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаГруппРодителей КАК ТаблицаГруппРодителей
			|		ПО (ТаблицаГруппРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
			|			И (ТаблицаГруппРодителей.Родитель = &ГруппаПользователей)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставГруппПользователей
			|		ПО (СоставГруппПользователей.ГруппаПользователей = &ГруппаПользователей)
			|			И (СоставГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь)
			|ГДЕ
			|	СоставГруппПользователей.Пользователь ЕСТЬ NULL ";
		КонецЕсли;
		ПользователиДобавленныеВГруппу = Запрос.Выполнить().Выгрузить();
		Если ПользователиДобавленныеВГруппу.Количество() > 0 Тогда
			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(ПользователиДобавленныеВГруппу);
			НаборЗаписей.Записать(Ложь); // Добавление недостающих записей связей.
			Для каждого ОписаниеПользователя Из ПользователиДобавленныеВГруппу Цикл
				Если ИзмененныеГруппыПользователей.Найти(ГруппаПользователей, "ГруппаПользователей") = Неопределено Тогда
					ИзмененныеГруппыПользователей.Добавить().ГруппаПользователей = ГруппаПользователей;
				КонецЕсли;
				ИзмененныеПользователи.Добавить().Пользователь = ОписаниеПользователя.Пользователь;
			КонецЦикла;
		КонецЕсли;
		
		ГруппаПользователей = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ГруппаПользователей, "Родитель");
	КонецЦикла;
	
КонецПроцедуры

// Функция ТаблицаГруппРодителей используется в процедурах ОбновитьСоставГруппПользователей,
// ОбновитьСоставГруппВнешнихПользователей.
//
Функция ТаблицаГруппРодителей(Таблица) Экспорт
	
	// Подготовка состава групп родителей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыТаблицы.Ссылка,
	|	ГруппыТаблицы.Родитель
	|ИЗ
	|	" + Таблица + " КАК ГруппыТаблицы");
	ТаблицаЭлементов = Запрос.Выполнить().Выгрузить();
	ТаблицаЭлементов.Индексы.Добавить("Родитель");
	ТаблицаГруппРодителей = ТаблицаЭлементов.Скопировать(Новый Массив);
	
	Для каждого ОписаниеЭлемента Из ТаблицаЭлементов Цикл
		СамоописаниеГруппыРодителя = ТаблицаГруппРодителей.Добавить();
		СамоописаниеГруппыРодителя.Родитель = ОписаниеЭлемента.Ссылка;
		СамоописаниеГруппыРодителя.Ссылка   = ОписаниеЭлемента.Ссылка;
		ЗаполнитьГруппыРодителя(ОписаниеЭлемента.Ссылка, ОписаниеЭлемента.Ссылка, ТаблицаЭлементов, ТаблицаГруппРодителей);
	КонецЦикла;
	
	Возврат ТаблицаГруппРодителей;
	
КонецФункции

Процедура ЗаполнитьГруппыРодителя(Знач Родитель, Знач ТекущийРодитель, Знач ТаблицаЭлементов, Знач ТаблицаРодителей)
	
	ОписанияГруппРодителя = ТаблицаЭлементов.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));
	Для каждого ОписаниеГруппы Из ОписанияГруппРодителя Цикл
		ОписаниеГруппыРодителя = ТаблицаРодителей.Добавить();
		ОписаниеГруппыРодителя.Родитель = Родитель;
		ОписаниеГруппыРодителя.Ссылка   = ОписаниеГруппы.Ссылка;
		ЗаполнитьГруппыРодителя(Родитель, ОписаниеГруппы.Ссылка, ТаблицаЭлементов, ТаблицаРодителей);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры-обработчики обновления данных подсистемы

Функция СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Пользователи КАК Пользователи
					|ГДЕ
					|	Пользователи.Наименование = &ПолноеИмя";
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Пользователь = Выборка.Ссылка;
	
	Если ПользовательИБНеЗанят(Пользователь.Наименование) Тогда
		Возврат Пользователь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


Функция ПолучитьУникальныйИдентификаторПользователяИБ(Пользователь,СтруктурнаяЕдиница = Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПользователиСтруктурныхЕдиниц.УникальныйИдентификатор
	                      |ИЗ
	                      |	РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
	                      |ГДЕ
	                      |	ПользователиСтруктурныхЕдиниц.Пользователь = &Пользователь
	                      |	И (ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
							|			ИЛИ ПользователиСтруктурныхЕдиниц.СтруктурнаяЕдиница.Родитель = &СтруктурнаяЕдиница)");
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	Если СтруктурнаяЕдиница = Неопределено Тогда
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
	Иначе
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",СтруктурнаяЕдиница);
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.УникальныйИдентификатор;
КонецФункции	

Функция ПолучитьИмяПользователяИБ(Пользователь) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ПользователиСтруктурныхЕдиниц.Имя
	                      |ИЗ
	                      |	РегистрСведений.ПользователиСтруктурныхЕдиниц КАК ПользователиСтруктурныхЕдиниц
	                      |ГДЕ
	                      |	ПользователиСтруктурныхЕдиниц.Пользователь = &Пользователь");
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Имя;
КонецФункции	

// Возвращает роль, предоставляющую права администрирования системы.
//
// Возвращаемое значение:
//  ОбъектМетаданных: Роль.
//
Функция РольАдминистратораСистемы() Экспорт
	
	РольАдминистратораСистемы = Метаданные.Роли.АдминистрированиеБД;
	
	Если ПравоДоступа("Администрирование", Метаданные, Метаданные.Роли.ПолныеПрава)
	 ИЛИ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		
		РольАдминистратораСистемы = Метаданные.Роли.ПолныеПрава;
	КонецЕсли;
	
	Возврат РольАдминистратораСистемы;
	
КонецФункции


//popn+
Функция НайтиАдминистратора() Экспорт
	
	Админ = Справочники.Пользователи.ПустаяСсылка();
	НашлиАдминистратора = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат = Пользователи.НайтиПользователяПериферийнойБызы(Выборка.Ссылка.Наименование);
		Если Результат <> Неопределено Тогда
			Если Результат.АутентификацияОС = Ложь Тогда
				СписокРолей = Результат.Роли.Получить();
				Если СписокРолей = Неопределено Тогда
					Пользователи.ПрочитатьПользователяИБ(Выборка.Ссылка.Наименование,,СписокРолей);
				КонецЕсли;	
				Для каждого Роль Из СписокРолей Цикл
					Если (ВРег(Роль) = ВРег("ПолныеПрава") ИЛИ ВРег(Роль) = ВРег("АдминистрированиеБД")) И (Результат.АутентификацияСтандартная ИЛИ Результат.АутентификацияОС)Тогда
						Админ = Выборка.Ссылка;
						НашлиАдминистратора = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		Если НашлиАдминистратора = Истина Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Админ;
	
КонецФункции
//popn-

// Возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного) без учета привилегированного режима.
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция РолиДоступны(Знач ИменаРолей, Пользователь = Неопределено) Экспорт
	
	Если ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	Иначе
		// Указан не текущий пользователь.
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УказанТекущийПользовательИБ = ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МассивИменРолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРолей);
	Для каждого ИмяРоли Из МассивИменРолей Цикл
		
		Если УказанТекущийПользовательИБ Тогда
			Если РольДоступна(СокрЛП(ИмяРоли)) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти(СокрЛП(ИмяРоли))) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// См. ПользователиКлиентСервер.ТекущийПользователь().
Функция ТекущийПользователь() Экспорт
	
	//popn+
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

// Используется при обновлении и начальном заполнении информационной базы.
// 1) Создает первого администратора и связывает его с новым или существующим
//    пользователем в справочнике Пользователи.
// 2) Связывает администратора, указанного в параметре ПользовательИБ с новым или
//    существующим пользователем в справочнике Пользователи.
//
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы - используется, когда нужно связать
//                   существующего администратора с новым или существующим пользователем
//                   в справочнике Пользователи.
//
// Возвращаемое значение:
//  Неопределено                  - пользователь, связанный с пользователем ИБ с административными
//                                  правами уже существует.
//  СправочникСсылка.Пользователи - пользователь, который был связан с первым администратором или
//                                  администратором, указанным в параметре ПользовательИБ.
//
Функция СоздатьАдминистратора(ПользовательИБ = Неопределено) Экспорт
	//popn+
	Возврат НЕОПРЕДЕЛЕНО;
	
КонецФункции
