
// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
 	Результат = Истина;
	
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ВыходныеПараметры = Новый Массив();
	
	Если ТипЗнч(ОбъектДрайвера) = тип("comобъект") Тогда
				
		// Проверка настроенных параметров
		Модель			= Неопределено;
		Интерфейс       = Неопределено;
		Порт			= Неопределено;
		Скорость     	= Неопределено;
		IPАдрес       	= Неопределено;
		IPПорт       	= Неопределено;
		Наименование 	= Неопределено;
		
		Параметры.Свойство("Модель"     	, Модель);
		Параметры.Свойство("Интерфейс"     	, Интерфейс);
		Параметры.Свойство("Порт"     	 	, Порт);
		Параметры.Свойство("Скорость"   	, Скорость);
		Параметры.Свойство("IPАдрес"		, IPАдрес);
		Параметры.Свойство("IPПорт"    		, IPПорт);
		Параметры.Свойство("Наименование"	, Наименование);
		
		Если Интерфейс      = Неопределено
		 Или Порт     		= Неопределено
		 Или Скорость     	= Неопределено
		 Или IPАдрес      	= Неопределено
		 Или IPПорт 		= Неопределено Тогда
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
			|Для корректной работы устройства необходимо задать параметры его работы.
			|Сделать это можно при помощи формы ""Настройка параметров"" модели
			|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));
			
			Результат = Ложь;	
		КонецЕсли; 	// Конец: Проверка параметров устройства

		Если Результат Тогда
			Если Интерфейс = 0 Тогда
				ОбъектДрайвера.IP = Порт;
				ОбъектДрайвера.Port = Скорость;
			Иначе
				ОбъектДрайвера.IP = IPАдрес;
				ОбъектДрайвера.Port = IPПорт;
			КонецЕсли;
			
			ОбъектДрайвера.Type = Модель;
			ОбъектДрайвера.Open();
						
		КонецЕсли;
	Иначе 
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Если ТипЗнч(ОбъектДрайвера) = тип("comобъект") Тогда
		ОбъектДрайвера.Close();
	КонецЕсли;
	
	Результат = Истина;
	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
     
	Результат = Истина;
	ВыходныеПараметры = Новый Массив();

	// Выгрузка товаров в весы с печатью этикеток
	Если Команда = "ВыгрузитьТовары" Тогда
		Товары 				= ВходныеПараметры[0];
		ЧастичнаяВыгрузка 	= ВходныеПараметры[1];
		Результат = ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры);
											  
	// Очистить базу весов с печатью этикеток
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		Результат = ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	    //ВыгрузитьНаименованиемагазина(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	ИначеЕсли Команда = "ВыгрузитьНаименованиеМагазина" Тогда
		Результат = ВыгрузитьНаименованиеМагазина(ОбъектДрайвера, ВходныеПараметры, ПараметрыПодключения, ВыходныеПараметры);
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВыгрузитьНаименованиеМагазина(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 
	
	//scale.SendShopName(3, "12", "23", "34");
	//scale.SendDateTime(5, 6, 7, 8, 9, 0);
	
	//SendDateTime(uint year, uint month, uint day, uint hour, uint min, uint sec);
	//SendShopName(uint shopNumber, string name1, string name2orAddress, string name3telnumber);
    Результат = Истина;  
	
	//dps лукавила надпись то...
	//Состояние(НСтр("ru = 'Выполняется очистка товаров в весах с печатью этикеток...'"));
	Состояние(НСтр("ru = 'Выполняется выгрузка информации о магазине в весы с печатью этикеток...'"));
	
	Попытка
		текДата = Параметры.ДатаВремя;
		Организация = Параметры.Организация;
		Наборщик = Параметры.Наборщик;
		
		год = формат(текДата,"ДФ=yy");
		месяц = формат(текДата,"ДФ=M");
		день = формат(текДата,"ДФ=d");
		час = формат(текДата,"ДФ=h");
		минута = формат(текДата,"ДФ=m");
		секунда = формат(текДата,"ДФ=s");
		
		//кастыль для 5000j, v21. Исправить драйвер
		Попытка
			ОбъектДрайвера.SendShopName(1, Организация, Наборщик, "");
		Исключение
		КонецПопытки;
		//ОбъектДрайвера.SendShopName(2, "сообщение 2", "телефон 2", "хз 2");
		//ОбъектДрайвера.SendShopName(3, "сообщение 3", "телефон 3", "хз 3");
		//кастыль для 5000j, v21. Исправить драйвер
		Попытка
			ОбъектДрайвера.SendDateTime(год, месяц, день, час, минута, секунда);
		Исключение
		КонецПопытки;

	Исключение
	    ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОписаниеОшибки());
		Результат = Ложь;
	КонецПопытки;
		
	Возврат Результат;

КонецФункции
                                                          
// Функция осуществляет выгрузку таблицы товаров в весы с печатью этикеток
//
Функция ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры) 
	
	Результат = Истина;
		
	Если Товары.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Возврат Ложь;
	КонецЕсли;

	ТекущийПроцент = 0;
	Состояние(НСтр("ru='Выгрузка товаров...'"), ТекущийПроцент);	
	
	Если НЕ ЧастичнаяВыгрузка Тогда	
		Попытка
			ОбъектДрайвера.ClearPluAndMsg();
		Исключение
		    ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры.Добавить(ОписаниеОшибки());
			Результат = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ПроцентИнкремент = 100 / Товары.Количество();

	Для Итератор = 0 По Товары.Количество() - 1 Цикл
		ОбъектДрайвера.pluDept = 1; // номер отдела
		
		ОбъектДрайвера.pluDatePack = 0; // дата упаковки в днях
		
		ОбъектДрайвера.pluTimePack = 0; // время упаковки в часах
		
		ОбъектДрайвера.pluDateCreate = 0;
		//Если Товары[Итератор].Свойство("СрокХранения") Тогда
		//	ОбъектДрайвера.pluDateLife = Товары[Итератор].СрокХранения; // срок годности
		//Иначе
		//	ОбъектДрайвера.pluDateLife = 150405; // срок годности
		//	ОбъектДрайвера.pluDateCreate = 0;
		//КонецЕсли; 

		ОбъектДрайвера.pluNumberMsg = 1;
		
		ОбъектДрайвера.pluExtOrigin = 11; // номер страны производителя
		
		РезультирующаяСтрокаОписаниеТовара = "";
		РезультирующаяСтрокаПроизводитель = "";
		Если Товары[Итератор].Свойство("Производитель") И ЗначениеЗаполнено(Товары[Итератор].Производитель) Тогда
			Производитель = Товары[Итератор].Производитель;
			РезультирующаяСтрокаПроизводитель = Лев("Производитель: "+Производитель,50);
		КонецЕсли;	
		
		Если Товары[Итератор].Свойство("ОписаниеТовара") И ЗначениеЗаполнено(Товары[Итератор].ОписаниеТовара) Тогда
			КоличествоСимволовВСтроке = 50;
			//{БредовЮГ 2015-01-09 убираем дохренилион пробелов
			Буфер = "";
			стрБуфер = Товары[Итератор].ОписаниеТовара;
			стрБуфер = СтрЗаменить(стрБуфер," ",Символы.ПС);
			Для ъ=1 По СтрЧислоСтрок(стрБуфер) Цикл
				ТекСтрока = СтрПолучитьСтроку(стрБуфер,ъ);
				Буфер  = Буфер + ?(ПустаяСтрока(ТекСтрока),""," "+ТекСтрока);
			КонецЦикла;
			
			КоличествоИтераций = Цел(СтрДлина(Буфер)/КоличествоСимволовВСтроке);
			РезультирующаяСтрокаОписаниеТовара = "";
			Если КоличествоИтераций=0 Тогда
				РезультирующаяСтрокаОписаниеТовара = Буфер;
			Иначе	
				КоличествоСтрокИнфо = 4;
				ДописыватьПоследнююСтроку = Истина;
				Если ПустаяСтрока(РезультирующаяСтрокаПроизводитель) тогда
					КоличествоСтрокИнфо = 5	
				КонецЕсли;
				Если КоличествоИтераций >= КоличествоСтрокИнфо Тогда
					ДописыватьПоследнююСтроку = Ложь;
					КоличествоИтераций = КоличествоСтрокИнфо;
				КонецЕсли;
				Для ъ=1 По КоличествоИтераций Цикл
					СтрокаБуфера = Лев(Буфер,КоличествоСимволовВСтроке);
					Буфер = Сред(Буфер,КоличествоСимволовВСтроке+1,СтрДлина(Буфер)-КоличествоСимволовВСтроке);
					РезультирующаяСтрокаОписаниеТовара = РезультирующаяСтрокаОписаниеТовара + ?(ПустаяСтрока(РезультирующаяСтрокаОписаниеТовара),"",Символы.ПС)+Izh_СтроковыеФункцииКлиентСервер.ДополнитьСтрокуПробелами(СтрокаБуфера,КоличествоСимволовВСтроке);
				КонецЦикла;
				Если ДописыватьПоследнююСтроку Тогда
					РезультирующаяСтрокаОписаниеТовара = РезультирующаяСтрокаОписаниеТовара + ?(ПустаяСтрока(РезультирующаяСтрокаОписаниеТовара),"",Символы.ПС)+Izh_СтроковыеФункцииКлиентСервер.ДополнитьСтрокуПробелами(Буфер,КоличествоСимволовВСтроке);
				КонецЕсли;
			КонецЕсли;
			//БредовЮГ 2015-01-09 убираем дохренилион пробелов}
		КонецЕсли;
		
		
		ОбъектДрайвера.pluTextMessage = РезультирующаяСтрокаПроизводитель + ?(ПустаяСтрока(РезультирующаяСтрокаПроизводитель),"",Символы.ПС) + РезультирующаяСтрокаОписаниеТовара;			

		ОбъектДрайвера.pluType = 1; //весовой товар
		
		
		//КоличествоСимволовВСтроке = 30;
		//НаименованиеДляЭтикетки = Товары[Итератор].Наименование;
		//ОбъектДрайвера.pluName1 =  Izh_СтроковыеФункцииКлиентСервер.ДополнитьСтрокуПробелами(Лев(НаименованиеДляЭтикетки, КоличествоСимволовВСтроке),КоличествоСимволовВСтроке);
		//Если СтрДлина(наименованиеДляЭтикетки) > КоличествоСимволовВСтроке Тогда
		//	ОбъектДрайвера.pluName2= Izh_СтроковыеФункцииКлиентСервер.ДополнитьСтрокуПробелами(Сред(наименованиеДляЭтикетки, КоличествоСимволовВСтроке+1, КоличествоСимволовВСтроке),КоличествоСимволовВСтроке);
		//Иначе
		//	ОбъектДрайвера.pluName2 = "";
		//КонецЕсли;
		КоличествоСимволовВСтроке = 28; //!!!
		НаименованиеДляЭтикетки =Товары[Итератор].Наименование;// "Скумбрия атл. кусочки х/к в/у 1/350гр. УдмуртРыба (косичка) 1*10";//
		НаименованиеДляЭтикетки  = Izh_СтроковыеФункцииКлиентСервер.ДополнитьСтрокуПробелами(НаименованиеДляЭтикетки, КоличествоСимволовВСтроке*2);
		строка1 = лев(НаименованиеДляЭтикетки, КоличествоСимволовВСтроке);
		строка2 = прав(НаименованиеДляЭтикетки, КоличествоСимволовВСтроке);
  
  		ОбъектДрайвера.pluName1  = строка1;
  		ОбъектДрайвера.pluName2= строка2;		
		
		 		
		ОбъектДрайвера.pluStrLogo = ""; // строка, которая печатается под логотипом
		
		
		ОбъектДрайвера.pluNumber = Товары[Итератор].PLU;
		ОбъектДрайвера.pluItemCode = Товары[Итератор].Код; // код товара
				
				
		
		Если Товары[Итератор].Свойство("Цена") Тогда
			Цена = 100*Товары[Итератор].Цена;
			//ОбъектДрайвера.pluFixedPrice = 0; 
			ОбъектДрайвера.pluPrice = Цена; 		
		КонецЕсли;
		
		ОбъектДрайвера.pluWeightTare = 0;
		ОбъектДрайвера.pluGroupCode = 23;
		
		
		Попытка
			ОбъектДрайвера.SendPlu();
		    ВыходныеПараметры.Добавить(""); 
			ВыходныеПараметры.Добавить(Неопределено)
		Исключение
		    ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры.Добавить(ОписаниеОшибки());
			Результат = Ложь;
			Возврат Результат;
		КонецПопытки;

		ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
		Состояние(НСтр("ru='Выгрузка товаров...'"), Окр(ТекущийПроцент));	

	КонецЦикла;
	
	
	Возврат Результат;

КонецФункции

// Функция осуществляет очистку таблицы товаров в весы с печатью этикеток.
//
Функция ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 

	Результат = Истина;  
	
	Состояние(НСтр("ru = 'Выполняется очистка товаров в весах с печатью этикеток...'"));
	
	Попытка
		ОбъектДрайвера.ClearPluAndMsg();
	Исключение
	    ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОписаниеОшибки());
		Результат = Ложь;
	КонецПопытки;
		
	Возврат Результат;

КонецФункции

// Функция осуществляет тест устройства
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 
	
	Результат = Истина;            
	РезультатТеста = "";

	Результат = ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	Если Результат Тогда
		ОбъектДрайвера.ReadCurrentStatus();
		РезультатТеста = Строка(ОбъектДрайвера.statusWeight);
		Сообщить(РезультатТеста);
		ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		ВыходныеПараметры.Добавить(?(Результат, 0, 999));
		ВыходныеПараметры.Добавить(РезультатТеста);
	Иначе
		Результат = Ложь;	
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Функция возвращает версию установленного драйвера
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка                                     
		ВыходныеПараметры[1] = "есть"; //ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
	КонецПопытки;

	Возврат Результат;   

КонецФункции


