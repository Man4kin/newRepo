Функция ВыгрузкаДанных(Ссылка) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("УзелИнформационнойБазы",    Ссылка);
		СтруктураЗаписи.Вставить("ДействиеПриОбмене",         Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
		
		СтруктураЗаписи.Вставить("РезультатВыполненияОбмена", Перечисления.РезультатыВыполненияОбмена.Выполнено);
		СтруктураЗаписи.Вставить("ДатаНачала",                ТекущаяДата());
		
		URL = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПутьПубликацииВебСервисов,Ссылка.СтруктурнаяЕдиница);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ВызватьИсключение(НСтр("ru = 'Не указан адрес Web-сервиса!'"));
		КонецЕсли;	
			
		стрПутьФайла = КаталогВременныхФайлов()+Строка(Новый УникальныйИдентификатор()); 
		СоздатьКаталог(стрПутьФайла); 
		стрИмяФайла = ПолучитьИмяФайла(стрПутьФайла, "MSG_"+СокрЛП(Ссылка.Код)+".xml");
		стрИмяФайлаZIP = ПолучитьИмяФайла(стрПутьФайла, "MSG_"+СокрЛП(Ссылка.Код)+".zip");
		
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(стрИмяФайла);
		//ЗаписьXML.УстановитьСтроку();
		ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML,Ссылка);
		ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения);
		ЗаписьСообщения.ЗакончитьЗапись();
		//Данные = ЗаписьXML.Закрыть();
		ЗаписьXML.Закрыть();
		
		Zip = Новый ЗаписьZipФайла(стрИмяФайлаZIP, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
		Zip.Добавить(стрИмяФайла);
		Zip.Записать();
		
		Данные = Новый ДвоичныеДанные(стрИмяФайлаZIP);
		Данные = Base64Строка(Данные);
		
		URL = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(URL)+"ws/DistributedDataBase?wsdl";
		Имя = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПользовательВебСервисов,Ссылка.СтруктурнаяЕдиница);
		Пароль = УправлениеПараметрамиСЕСервер.ПолучитьЗначениеСвойства(ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ПарольВебСервисов,Ссылка.СтруктурнаяЕдиница);
		
		//ЗаписьЖурналаРегистрации("Обмен данными", УровеньЖурналаРегистрации.Информация, , ,Имя+" - "+Пароль);
		
		Определение = Новый WSОпределения(URL,Имя,Пароль);
		URIПространстваИмен = Определение.Сервисы.Получить(0).URIПространстваИмен;
		ИмяСервиса = Определение.Сервисы.Получить(0).Имя;
		ИмяТочки = Определение.Сервисы.Получить(0).ТочкиПодключения.Получить(0).Имя;
		Прокси = Новый WSПрокси(Определение,URIПространстваИмен,ИмяСервиса,ИмяТочки);
		Прокси.Пользователь = Имя;
		Прокси.Пароль = Пароль;
		
		
		Операция = "DataExchange";
		Строка = "Прокси."+Операция+"(Данные)";
		Результат = Вычислить(Строка);
		Ссылка = Данные;
		ЗаписьЖурналаРегистрации("Обмен данными", УровеньЖурналаРегистрации.Информация, , , "Данные отправлены "+URL);
		
	Исключение
		Ссылка = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
		СтруктураЗаписи.Вставить("РезультатВыполненияОбмена", Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения);
		
		ЗаписьЖурналаРегистрации("Обмен данными", УровеньЖурналаРегистрации.Ошибка, , , Ссылка);
		СтруктураЗаписи.Вставить("ОписаниеОшибки", Ссылка);
	КонецПопытки;
	Если Результат = "false" Тогда
		СтруктураЗаписи.Вставить("РезультатВыполненияОбмена", Перечисления.РезультатыВыполненияОбмена.Ошибка);
		СтруктураЗаписи.Вставить("ОписаниеОшибки", "Ответ: "+Ссылка);
	ИначеЕсли Результат = "ОжиданиеОбновления" Тогда
		СтруктураЗаписи.Вставить("РезультатВыполненияОбмена", Перечисления.РезультатыВыполненияОбмена.ОжиданиеОбновления);
		СтруктураЗаписи.Вставить("ОписаниеОшибки", "Ожидание обновления конфигурации удаленного узла.");
	КонецЕсли;	
	СтруктураЗаписи.Вставить("ДатаОкончания", ТекущаяДата());
	Если ПараметрыСеанса.ЭтоЦентр Тогда
		РегистрыСведений.СостояниеОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
	КонецЕсли;
	Попытка
		УдалитьФайлы(стрПутьФайла);
	Исключение
		ОписаниеОшибки = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Обмен данными", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецПопытки;	
	Возврат Результат; 
КонецФункции

Процедура ОбновлениеКонфигурации() Экспорт
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено И КонфигурацияИзменена() Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запуск БАТ файла перезагрузки'"), УровеньЖурналаРегистрации.Информация, , , "Запущено фоновое задание");
		ПредложитьПерезагрузкуПрограммы();
	Конецесли;
КонецПроцедуры

Процедура ПредложитьПерезагрузкуПрограммы() Экспорт
	
	ТекстБатФайла = СформироватьТекстБатФайлаПоНастройкам();
	
	ТекстовайДокумент = Новый ТекстовыйДокумент();
	ТекстовайДокумент.УстановитьТекст(ТекстБатФайла);
	ТекстовайДокумент.Вывод = ИспользованиеВывода.Разрешить;
	Каталог = КаталогВременныхФайлов();
	//ИмяФайла = "Upd1C_"+Строка(ПланыОбмена.ОбменРБД.ЭтотУзел().СтруктурнаяЕдиница.Код)+".bat";
	//ИмяБАТФайла = ПолучитьИмяВременногоФайла("bat");
	
	ИмяФайла = "Upd1C_"+ПолучитьИмяБазыДанных()+".bat";
	
	ИмяБАТФайла = ПолучитьИмяФайла(Каталог, ИмяФайла);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'БАТ файл'"), УровеньЖурналаРегистрации.Информация, , , "БАТ файл "+ИмяБАТФайла);
	
	ТекстовайДокумент.Записать(ИмяБАТФайла, КодировкаТекста.OEM);
			
	// запускаем БАТ файл перезагрузки
	
	Попытка
		Нашли = Ложь;
		objWMIService = ПолучитьCOMОбъект("winmgmts:\\.\root\CIMV2");
		colItems = objWMIService.ExecQuery("SELECT * FROM Win32_Process WHERE Name = 'cmd.exe'","WQL",48);
		Для Каждого e Из colItems Цикл
			Если  Найти(e.CommandLine,ИмяБАТФайла) <> 0 Тогда
				Нашли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если  Нашли = Ложь Тогда
			КомОбъект = Новый COMObject("wScript.Shell");
			КомОбъект.Run("""" + ИмяБАТФайла + """");
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Запущен БАТ файл'"), УровеньЖурналаРегистрации.Информация, , , "Запущен БАТ файл "+ИмяБАТФайла);
		Иначе	
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Уже запущен БАТ файл'"), УровеньЖурналаРегистрации.Информация, , , "Уже запущен БАТ файл "+ИмяБАТФайла);
		КонецЕсли;

		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка запуска БАТ файла'"), УровеньЖурналаРегистрации.Информация, , , ОписаниеОшибки());
	КонецПопытки;
	
	//ЗапуститьПриложение(ИмяФайла,Каталог,Ложь);
	
КонецПроцедуры // ПредложитьПерезагрузкуПрограммы

Функция СформироватьТекстБатФайлаПоНастройкам()
	
	ТекстФайла = "";
	
			
	ИмяАдминистратораИнформационнойБазы = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	//ИдентификаторПользователяИБ = Пользователи.ПолучитьУникальныйИдентификаторПользователяИБ(ИмяАдминистратораИнформационнойБазы);
	//ИмяАдминистратораИнформационнойБазы = ?(ЗначениеЗаполнено(ИдентификаторПользователяИБ),ИмяАдминистратораИнформационнойБазы,"");
	
	
	ИмяФайлаДляЗаписиОшибок = "";
			
	ИмяЗапускаПрограммы = "";
			
	ТекстФайла = СформироватьЧастьОбъявленийПодключенияТекущегоПользователя(ИмяЗапускаПрограммы);
		
	ТекстФайла = ТекстФайла + СформироватьЧастьВызоваОбновленияКонфигурации(ИмяАдминистратораИнформационнойБазы, ИмяФайлаДляЗаписиОшибок);
		
	Возврат ТекстФайла;
	
КонецФункции

Функция СформироватьЧастьОбъявленийПодключенияТекущегоПользователя(ИмяПрограммыЗапуска = "")
	
	Перем ИмяПользователяБД, ИмяПрограммыЗапускаПоУмолчанию, ПутьКБД, ФайловаяБД;
	
	СформироватьПараметрыДляОбновленияКонфигурации(ИмяПользователяБД, ИмяПрограммыЗапускаПоУмолчанию, ПутьКБД, ФайловаяБД);
	Если ПустаяСтрока(ИмяПрограммыЗапуска) Тогда
		ИмяПрограммыЗапуска = ИмяПрограммыЗапускаПоУмолчанию;
	КонецЕсли;
	
	ТекстФайлаПоУмолчанию = Символы.ПС;
	
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set v8exe=""" + ИмяПрограммыЗапуска + """" + Символы.ПС;
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBaseName=" + ПутьКБД + Символы.ПС;
	
	Если ФайловаяБД Тогда	
		ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBase=/F%DataBaseName%" + Символы.ПС;
	Иначе
		ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBase=/S%DataBaseName%" + Символы.ПС;
	КонецЕсли;
	
	ПользовательБД = СформироватьЛогинПодключенияКИБ(ИмяПользователяБД);
	
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set User=" + ПользовательБД + Символы.ПС;

	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

Процедура СформироватьПараметрыДляОбновленияКонфигурации(ИмяПользователяБД, ИмяПрограммыЗапуска, ПутьКБД, ФайловаяБД)
	
	// создается BAT файл по установленному макету и запускается
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД);
			
	Если ЭтоФайловаяИБ Тогда
		ПутьКБД = Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
		ФайловаяБД = Истина;
	Иначе
	    // надо к имени сервера прибавить имя пути информационной базы
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат;
		КонецЕсли;
				
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКБД = """" + ИмяСервера + "/" + ИмяИБНаСервере + """";
		ФайловаяБД = Ложь;
		
	КонецЕсли;
	
	ИмяПрограммыЗапуска = ПолучитьИмяФайла(КаталогПрограммы(), "1cv8.exe");
	
	Файл = Новый Файл(ИмяПрограммыЗапуска);
	Если НЕ Файл.Существует() Тогда
		ИмяПрограммыЗапуска = СтрЗаменить(ИмяПрограммыЗапуска,"Program Files","Program Files (x86)");
	КонецЕсли;
    	
	ИмяПользователяБД = ИмяПользователя();
	
КонецПроцедуры

Функция ПолучитьИмяБазыДанных()

	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД);
			
	Если ЭтоФайловаяИБ Тогда
		ПутьКБД = Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
		ПутьКБД = СтрЗаменить(ПутьКБД,":","_");
		ПутьКБД = СтрЗаменить(ПутьКБД,"/","_");
		ПутьКБД = СтрЗаменить(ПутьКБД,"\","_");
		ПутьКБД = СтрЗаменить(ПутьКБД,"""","");
		
	Иначе
	    // надо к имени сервера прибавить имя пути информационной базы
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат "";
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат "";
		КонецЕсли;
				
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКБД = ИмяСервера + "_" + ИмяИБНаСервере;
		
	КонецЕсли;
	
    	
	Возврат ПутьКБД;
	
КонецФункции

Функция ПолучитьИмяФайла(ИмяКаталога, ИмяФайла) Экспорт

	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Слэш = "";
		Если (Прав(ИмяКаталога, 1) <> "\") И (Прав(ИмяКаталога, 1) <> "/") Тогда
			Слэш = ?(Найти(ИмяКаталога, "\") = 0, "/", "\");
		КонецЕсли;
		
		Возврат ИмяКаталога + Слэш + ИмяФайла;	
	Иначе
		Возврат ИмяКаталога;
	КонецЕсли;

КонецФункции // ПолучитьИмяФайла()

Функция ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции

Функция СформироватьЛогинПодключенияКИБ(Знач ИмяПользователяБД)
	
	Если Не ПустаяСтрока(ИмяПользователяБД) Тогда
		
		ТребуетсяАвторизацияОС = НаличиеУПользователяWindowsАвторизации(ИмяПользователяБД);
		
		КлючАвторизации = ?(ТребуетсяАвторизацияОС, "/WA+", "/WA-");
		
		
		ПользовательБазы = Пользователи.НайтиПользователяПериферийнойБызы(ИмяПользователяБД,ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);
		
		
		Если ПользовательБазы = Неопределено Тогда
			ПользовательБД = "/N""" + ИмяПользователяБД + """ " + КлючАвторизации;
		Иначе	
			ПользовательБД = "/N""" + ИмяПользователяБД + """ " + КлючАвторизации + "/P"""+ПользовательБазы.Пароль+"""";
		КонецЕсли;	
	Иначе
		ПользовательБД = "";
	КонецЕсли;
	
	Возврат ПользовательБД;
	
КонецФункции

Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции

Функция СформироватьЧастьВызоваОбновленияКонфигурации(Знач ИмяАдминистратораИБ = "", Знач ИмяФайлаИнформацииОбОшибках = "", 
	Знач ИспользоватьФайлОбОшибкахСПустымИменем = Ложь)
	
	ИмяЛогинаАдминистратора = ?(ПустаяСтрока(ИмяАдминистратораИБ), "", СформироватьЛогинПодключенияКИБ(ИмяАдминистратораИБ));
	
	СтрокаОбъявленияФайлаСообщенийОбОшибках = "";
	СтрокаДляВыводаДанныхВФайл = "";
		
	Если НЕ ПустаяСтрока(ИмяФайлаИнформацииОбОшибках) ИЛИ ИспользоватьФайлОбОшибкахСПустымИменем Тогда
		
		// надо проверить наличие файла для обмена, есл его нет то создать его
		СтрокаИмениФайлаИнформацииОбОшибках = СокрЛП(ИмяФайлаИнформацииОбОшибках);
							
		СтрокаОбъявленияФайлаСообщенийОбОшибках = "
			|REM Путь к файлу для ошибок и сообщений
			|set FileInformation=""" + СтрокаИмениФайлаИнформацииОбОшибках + """
			|
			|date /t >> %FileInformation%
			|time /t >> %FileInformation%
			|set DataBaseName>>%FileInformation%";
				
		СтрокаДляВыводаДанныхВФайл = "/Out%FileInformation% -NoTruncate";
					
	КонецЕсли;	
	
	 // основной текст
	ТекстФайлаПоУмолчанию = "
		|REM Логин администратора системы
		|set AdminUser=" + ИмяЛогинаАдминистратора + "
        |
		|" + СтрокаОбъявленияФайлаСообщенийОбОшибках + " 
		|
		|rem Завершение работы пользователей
		|start """" /wait %v8exe% ENTERPRISE %DataBase% %AdminUser% /CЗавершитьРаботуПользователей	/UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + " /DisableStartupMessages
        |
		|start """" /wait %v8exe% CONFIG     %DataBase% %AdminUser% /UpdateDBCfg /UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + "
        |
		|rem Разрешение работы пользователей
		|start """" /wait %v8exe% ENTERPRISE %DataBase% %AdminUser% /CРазрешитьРаботуПользователей	/UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + " /DisableStartupMessages";
		
	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

Процедура ЗагрузкаДанныхПослеОбновленияКонфигурации() Экспорт
	Если НЕ КонфигурацияИзменена() Тогда
		Package = Константы.ХранилищеПакетаРБД.Получить().Получить();
		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Пакет'"), УровеньЖурналаРегистрации.Информация, ,Package ,);
		Если ЗначениеЗаполнено(Package) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка данных после обновления'"), УровеньЖурналаРегистрации.Информация, , ,);
			стрПутьФайла = КаталогВременныхФайлов()+Строка(Новый УникальныйИдентификатор()); 
			СоздатьКаталог(стрПутьФайла); 
			стрИмяФайлаZIP = ПолучитьИмяФайла(стрПутьФайла, "MSG_"+СокрЛП(ПланыОбмена.ОбменРБД.ЭтотУзел().Код)+".zip");
			стрИмяФайла = ПолучитьИмяФайла(стрПутьФайла, "MSG_"+СокрЛП(ПланыОбмена.ОбменРБД.ЭтотУзел().Код)+".xml");
			Данные = Base64Значение(Package);
			Данные.Записать(стрИмяФайлаZIP);
			ЧтениеZIP = Новый ЧтениеZipФайла(стрИмяФайлаZIP);
			ЧтениеZIP.ИзвлечьВсе(стрПутьФайла,РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			ЧтениеZIP.Закрыть();
			ДатаНачала = ТекущаяДата();
				
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.ОткрытьФайл(стрИмяФайла);
				ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
				ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
				ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения);
				ЧтениеСообщения.ЗакончитьЧтение();
				ЧтениеXML.Закрыть();
			Исключение
				СтруктураЗаписи = Новый Структура;
				СтруктураЗаписи.Вставить("УзелИнформационнойБазы",    ПланыОбмена.ОбменРБД.ЭтотУзел());
				СтруктураЗаписи.Вставить("ДействиеПриОбмене",         Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
				
				СтруктураЗаписи.Вставить("РезультатВыполненияОбмена", Перечисления.РезультатыВыполненияОбмена.Ошибка);
				СтруктураЗаписи.Вставить("ДатаНачала",                ДатаНачала);
				СтруктураЗаписи.Вставить("ДатаОкончания",             ТекущаяДата());
				Package = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
				СтруктураЗаписи.Вставить("ОписаниеОшибки",Package);
				РегистрыСведений.СостояниеОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
			КонецПопытки;	
			Попытка
				УдалитьФайлы(стрПутьФайла);
			Исключение
				ОписаниеОшибки = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("Обмен данными", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			КонецПопытки;	
			Константы.ХранилищеПакетаРБД.Установить(Новый ХранилищеЗначения(""));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка в центр подтверждения о приеме данных'"), УровеньЖурналаРегистрации.Информация, , ,);
			//ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.ГлавныйУзел());
			ВыгрузкаДанных(ПланыОбмена.ГлавныйУзел());
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ЗапускФоновогоЗаданияПоДозагрузке() Экспорт
	ФоновыеЗадания.Выполнить("ОбменДаннымиРБДСервер.ЗагрузкаДанныхПослеОбновленияКонфигурации",,ПараметрыСеанса.ТекущийПользователь.Наименование);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка данных после если обновление конфигурации'"), УровеньЖурналаРегистрации.Информация, ,"КонфигурацияИзменена() "+КонфигурацияИзменена() ,);
КонецПроцедуры

Процедура ЗапускФоновогоЗаданияПоВыгрузке(УзелИнформационнойБазы) Экспорт
	Если  УзелИнформационнойБазы.СтруктурнаяЕдиница.РежимРаботы = Перечисления.РежимРаботыСЕ.НеРаботает Тогда
		Возврат;
	КонецЕсли;
	Ключ = Строка(УзелИнформационнойБазы);
	Наименование = "Обмен данными РБД";
	ПараметрыЗадания = Новый Массив(1);
	ПараметрыЗадания[0] = УзелИнформационнойБазы;
	Попытка
		ФоновыеЗадания.Выполнить("ОбменДаннымиРБДСервер.ВыгрузкаДанных",ПараметрыЗадания,Ключ,Наименование);
	Исключение
	КонецПопытки;	
КонецПроцедуры


Процедура ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	// добавляем только одну запись в новый набор записей
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// заполняем значения свойств записи из переданной структуры
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// создаем набор записей регистра
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	// устанавливаем отбор по измерениям регистра
	Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
КонецФункции

Процедура ВыполнитьОбменДаннымиДляВсехУзловПоРасписанию() Экспорт
	Если ПараметрыСеанса.ЭтоЦентр Тогда
		СписокУзлов = Новый СписокЗначений;
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ОбменРБД.Ссылка
		                      |ИЗ
		                      |	ПланОбмена.ОбменРБД КАК ОбменРБД
		                      |ГДЕ
		                      |	НЕ ОбменРБД.ПометкаУдаления
		                      |	И ОбменРБД.Ссылка <> &Ссылка
		                      |	И ОбменРБД.СтруктурнаяЕдиница.РежимРаботы <> &РежимРаботы");	
		Запрос.УстановитьПараметр("Ссылка",ПланыОбмена.ОбменРБД.ЭтотУзел());
		Запрос.УстановитьПараметр("РежимРаботы",Перечисления.РежимРаботыСЕ.НеРаботает);
		СписокУзлов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		Для Каждого Строка Из СписокУзлов Цикл
			ОбменДаннымиРБДСервер.ЗапускФоновогоЗаданияПоВыгрузке(Строка.Значение);
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

Функция НетУзловКромеТекущего(ПланОбмена) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Обмен.Ссылка
	                      |ИЗ
	                      |	ПланОбмена."+ПланОбмена+" КАК Обмен
	                      |ГДЕ
	                      |	Обмен.Ссылка <> &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ПланыОбмена[ПланОбмена].ЭтотУзел());					  
	Результат = Запрос.Выполнить();
	Возврат Результат.Пустой();
КонецФункции	

Процедура ЗарегистрироватьИзмененияДляНовогоУзла(Узел) Экспорт
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.Справочники.ВидыКонтактнойИнформации);	
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.Справочники.Контрагенты);	
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.Справочники.Организации);	
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.Справочники.ВидыСписания);	
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.Справочники.ФизическиеЛица);	
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.Справочники.КредитныеКарты);
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.РегистрыСведений.УчетнаяПолитикаНалоговыйУчет);
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.Справочники.СлужебныеКоды);	
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.Справочники.ХарактеристикиНоменклатуры);	
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыНоменклатуры);	
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.ПланыВидовХарактеристик.ХарактеристикиНоменклатуры);
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел,Метаданные.Справочники.КлассификаторСтранМира);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ тНоменклатура
	|ИЗ
	|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|ГДЕ
	|	СтатусыНоменклатуры.СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыНоменклатуры.Номенклатура.Родитель
	|ИЗ
	|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|ГДЕ
	|	СтатусыНоменклатуры.СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)
	|	И СтатусыНоменклатуры.Номенклатура.Родитель.Группа = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыНоменклатуры.Номенклатура.Родитель.Родитель
	|ИЗ
	|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|ГДЕ
	|	СтатусыНоменклатуры.СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)
	|	И СтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Группа = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|		ПО (СтатусыНоменклатуры.Номенклатура = СпрНоменклатура.Родитель
	|				ИЛИ СтатусыНоменклатуры.Номенклатура = СпрНоменклатура.Родитель.Родитель)
	|ГДЕ
	|	СтатусыНоменклатуры.СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тНоменклатура.Номенклатура КАК Номенклатура,
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	тНоменклатура КАК тНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО тНоменклатура.Номенклатура = ЕдиницыИзмерения.Владелец
	|ИТОГИ ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("Группа", 1);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Узел.СтруктурнаяЕдиница);
	
	Результат = Запрос.Выполнить();
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Узел,ВыборкаНоменклатура.Номенклатура);
		
		ВыборкаДетали = ВыборкаНоменклатура.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДетали.ЕдиницаИзмерения) Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(Узел,ВыборкаДетали.ЕдиницаИзмерения);
			КонецЕсли;	
			
		КонецЦикла;	
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыНоменклатуры.Номенклатура
	|ИЗ
	|	РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
	|ГДЕ
	|	СтатусыНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Узел.СтруктурнаяЕдиница);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	НаборЗаписей = РегистрыСведений.СтатусыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Узел.СтруктурнаяЕдиница);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел,НаборЗаписей);
		КонецЕсли;	
	КонецЦикла;

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Ссылка
	|ИЗ
	|	тНоменклатура КАК тНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО тНоменклатура.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Значение ССЫЛКА Справочник.ЗначенияСвойствОбъектов
	|	И НоменклатураДополнительныеРеквизиты.Значение <> Значение(Справочник.ЗначенияСвойствОбъектов.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Узел,ВыборкаДетальныеЗаписи.Ссылка);	
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагента.Контрагент,
	|	НоменклатураКонтрагента.Номенклатура
	|ИЗ
	|	тНоменклатура КАК тНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|		ПО тНоменклатура.Номенклатура = НоменклатураКонтрагента.Номенклатура";
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.НоменклатураКонтрагента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписей.Отбор.Контрагент.Установить(ВыборкаДетальныеЗаписи.Контрагент);
		ПланыОбмена.ЗарегистрироватьИзменения(Узел,НаборЗаписей);	
	КонецЦикла;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.ID,
	|	ЦеныНоменклатурыСрезПоследних.СтруктурнаяЕдиница
	|ИЗ
	|	тНоменклатура КАК тНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, СтруктурнаяЕдиница В ИЕРАРХИИ (&СтруктурнаяЕдиница)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО тНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Узел.СтруктурнаяЕдиница);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Узел.СтруктурнаяЕдиница);
		НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписей.Отбор.ЕдиницаИзмерения.Установить(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		НаборЗаписей.Отбор.ID.Установить(ВыборкаДетальныеЗаписи.ID);
		ПланыОбмена.ЗарегистрироватьИзменения(Узел,НаборЗаписей);	
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ тНоменклатура";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродукцияПоЦехам.ТехнологическаяКарта,
	|	ПродукцияПоЦехам.Склад,
	|	ПродукцияПоЦехам.Продукция
	|ИЗ
	|	РегистрСведений.ПродукцияПоЦехам КАК ПродукцияПоЦехам
	|ГДЕ
	|	ПродукцияПоЦехам.Склад.Владелец В ИЕРАРХИИ (&Владелец)
	|	И ПродукцияПоЦехам.Склад.ВидСклада = &ВидСклада";
	
	Запрос.УстановитьПараметр("ВидСклада", Перечисления.ВидыСкладов.Производство);
	Запрос.УстановитьПараметр("Владелец", Узел.СтруктурнаяЕдиница);
	УзелRIB = ПланыОбмена.ОбменRIB.НайтиПоКоду(1);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПродукцияПоЦехам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТехнологическаяКарта.Установить(ВыборкаДетальныеЗаписи.ТехнологическаяКарта);
		НаборЗаписей.Отбор.Склад.Установить(ВыборкаДетальныеЗаписи.Склад);
		НаборЗаписей.Отбор.Продукция.Установить(ВыборкаДетальныеЗаписи.Продукция);
		ПланыОбмена.ЗарегистрироватьИзменения(УзелRIB,НаборЗаписей);	
	КонецЦикла;
КонецПроцедуры	

Функция ЗагрузкаДанныхФайл(стрПутьФайла,стрПутьФайлаВыгрузка=Неопределено) Экспорт
	Результат = Ложь;
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		стрИмяФайла = ПолучитьИмяФайла(стрПутьФайла, "MSG.xml");
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(стрИмяФайла);
		ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
		ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения);
		
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		Результат = Истина;
		
		Попытка
			УдалитьФайлы(стрПутьФайла);		
		Исключение
		КонецПопытки;
		
		Если НЕ ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка в центр подтверждения о приеме данных'"), УровеньЖурналаРегистрации.Информация, , ,);
			Package = ПланыОбмена.ГлавныйУзел();
			Результат = ОбменДаннымиРБДСервер.ВыгрузкаДанныхФайл(Package,стрПутьФайлаВыгрузка);
		КонецЕсли;	
		
	Исключение
		Если ЧтениеСообщения <> Неопределено Тогда
			ЧтениеСообщения.ПрерватьЧтение(); 
		КонецЕсли;	
		Ссылка = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
		ЗаписьЖурналаРегистрации("Обмен данными", УровеньЖурналаРегистрации.Ошибка, , , Ссылка);
	КонецПопытки;
	
	
	Возврат Результат; 
КонецФункции

Функция ВыгрузкаДанныхФайл(Ссылка,стрПутьФайла=Неопределено) Экспорт
	
	Результат = Ложь;
	Попытка
		
		стрПутьФайла = КаталогВременныхФайлов()+Строка(Новый УникальныйИдентификатор()); 
		СоздатьКаталог(стрПутьФайла); 
		стрИмяФайла = ПолучитьИмяФайла(стрПутьФайла, "MSG.xml");
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(стрИмяФайла);
		ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML,Ссылка);
		ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения);
		ЗаписьСообщения.ЗакончитьЗапись();
		ЗаписьXML.Закрыть();
		
		Результат = Истина;
		ЗаписьЖурналаРегистрации("Обмен данными", УровеньЖурналаРегистрации.Информация, , , "Данные отправлены "+Ссылка.Код);
		
	Исключение
		Ссылка = ОбменДаннымиRIBСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Результат = Ложь;
		ЗаписьЖурналаРегистрации("Обмен данными", УровеньЖурналаРегистрации.Ошибка, , , Ссылка);
	КонецПопытки;
	
	Возврат Результат; 
КонецФункции
