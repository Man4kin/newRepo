////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции 

Функция СообщитьОбОшибкеЗаполненияПоля(знач ЭтотОбъект,
                                       знач ТекстСообщенияПользователю,
                                       знач Поле = "",
                                            Отказ = Ложь) Экспорт

	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	Сообщение.УстановитьДанные(ЭтотОбъект);
	Сообщение.Сообщить();
	Отказ = Истина;

КонецФункции

// Выполнить экспортную процедуру без параметров по имени.
//
// Параметры
//  ИмяЭкспортнойПроцедуры – Строка    – имя экспортной процедуры в формате 
//										 <имя объекта>.<имя процедуры>, где <имя объекта> - это
// 										 общий модуль или модуль менеджера объекта.
//
// Пример:
//  ВыполнитьБезопасно("МойОбщийМодуль.МояПроцедура"); 
//
Процедура ВыполнитьБезопасно(Знач ИмяЭкспортнойПроцедуры) Экспорт
	
	// Проверка предусловий на формат ИмяЭкспортнойПроцедуры.
	ЧастиИмени = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ИмяЭкспортнойПроцедуры, ".");
	Если ЧастиИмени.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку(
			НСтр("ru=""Неправильный формат параметра ИмяЭкспортнойПроцедуры (%ИмяЭкспортнойПроцедуры)"""), 
			Новый Структура("ИмяЭкспортнойПроцедуры", ИмяЭкспортнойПроцедуры));
	КонецЕсли;

	ИмяОбъекта = ЧастиИмени[0];
	Если (Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено)
 		И (Метаданные.Обработки.Найти(ИмяОбъекта) = Неопределено) 
 		И (Метаданные.Документы.Найти(ИмяОбъекта) = Неопределено) 
 		И (Метаданные.Справочники.Найти(ИмяОбъекта) = Неопределено)
 		И (Метаданные.Обработки.Найти(ИмяОбъекта) = Неопределено) Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку(
			НСтр("ru=""Неправильный формат параметра ИмяЭкспортнойПроцедуры (%ИмяЭкспортнойПроцедуры)"""), 
			Новый Структура("ИмяЭкспортнойПроцедуры", ИмяЭкспортнойПроцедуры));
	КонецЕсли;

	Выполнить ИмяЭкспортнойПроцедуры + "();";
	
КонецПроцедуры

// По переданной структуре полей формирует запрос к таблице объекта. Возвращает выборку из результата запроса.
//
// Параметры:
//  Ссылка       - ссылка на объект.
//  СтруктураПолей - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса.
//
// Возвращаемое значение:
//  Структура из результата запроса - содержит значения требуемых полей.
//
Функция ПолучитьЗначенияРеквизитовОбъекта(Ссылка, СтруктураПолей) Экспорт

	Результат = Новый Структура;
	Для Каждого КлючИЗначение ИЗ СтруктураПолей Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
		
	ТекстЗапроса = "";
	
	ОбъектМетаданных = Ссылка.Метаданные();

	Для Каждого Элемент Из СтруктураПолей Цикл
		
		ИмяПоля = Элемент.Значение;
		
		Если НЕ ЗначениеЗаполнено(ИмяПоля) Тогда
			ИмяПоля = СокрЛП(Элемент.Ключ);
		КонецЕсли;
		
		ТекстЗапроса  = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ",") + "
		|	ТаблицаОбъекта." + ИмяПоля + " КАК " + СокрЛП(Элемент.Ключ);
	КонецЦикла;

	Запрос = Новый Запрос();

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстЗапроса + "
	|ИЗ
	|	" + ОбъектМетаданных.ПолноеИмя() + " КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка" , Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Для Каждого КлючИЗначение ИЗ СтруктураПолей Цикл
			Результат[КлючИЗначение.Ключ] = Выборка[КлючИЗначение.Ключ];
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Получает настройку из системного хранилища
//
Функция ПолучитьНастройкуСистемногоХранилища(знач КлючОбъекта,
                                             знач КлючНастроек = Неопределено,
                                             знач ОписаниеНастроек = Неопределено,
                                             знач ИдентификаторПользователя = Неопределено) Экспорт
	
	Результат = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИдентификаторПользователя);
	
	Возврат Результат;
	
КонецФункции

// Сохраняет настройку в системное хранилище
//
Функция СохранитьНастройкуСистемногоХранилища(знач КлючОбъекта,
                                              знач Настройка,
                                              знач КлючНастроек = Неопределено,
                                              знач ОписаниеНастроек = Неопределено,
                                              знач ИдентификаторПользователя = Неопределено) Экспорт
	
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройка, ОписаниеНастроек, ИдентификаторПользователя);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с массивами и таблицами значений

// Функция возвращает результат вычитания элементов множества таблицы
// ТаблицаВычитаемая из ТаблицаОсновная.
//
Функция ВычестьТаблицу(ТаблицаОсновная, ТаблицаВычитаемая) Экспорт
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат = ТаблицаОсновная.Скопировать();	
	
	Для Каждого Элемент Из ТаблицаВычитаемая Цикл
		Значение = Элемент.Получить(0);
		НайденнаяСтрока = ТаблицаРезультат.Найти(Значение);
		Если НайденнаяСтрока <> Неопределено Тогда
			ТаблицаРезультат.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Функция возвращает таблицу созданную на основе ТаблицаИнициализации.
// Если ТаблицаИнициализации не указана, то создается пустая таблица.
//
Функция СоздатьТаблицуСравнения(ТаблицаИнициализации = Неопределено, 
                                ИмяКолонкиСравнения = Неопределено) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Значение");
	
	Если ТаблицаИнициализации <> Неопределено Тогда
		
		МассивЗначений = ТаблицаИнициализации.ВыгрузитьКолонку(ИмяКолонкиСравнения);
		
		Для Каждого Элемент Из ТаблицаИнициализации Цикл
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Установить(0, Элемент[ИмяКолонкиСравнения]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;

КонецФункции

// Функция возвращает таблицу созданную на основе ТаблицаИнициализации.
// Если ТаблицаИнициализации не указана, то создается пустая таблица.
//
Функция СоздатьТаблицуСравненияНаОсновеМассиваЗначений(МассивЗначений) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Значение");
	
	Если МассивЗначений <> Неопределено Тогда
		
		Для Каждого Элемент Из МассивЗначений Цикл
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Установить(0, Элемент);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;

КонецФункции

// Функция возвращает таблицу созданную на основе ТаблицаИнициализации.
// Если ТаблицаИнициализации не указана, то создается пустая таблица.
//
Функция СоздатьМассивНаОсновеТаблицыЗначений(знач Таблица,
                                             знач ИмяКолонки = "Значение") Экспорт
	
	Массив = Новый Массив;
	
	Если Таблица <> Неопределено Тогда
		
		Для Каждого Элемент Из Таблица Цикл
			Значение = Элемент[ИмяКолонки];
			Массив.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Массив;

КонецФункции

// Функция возвращает таблицу созданную на основе таблицы значений Таблица.
// Если Таблица не указана, то создается пустая таблица.
//
Функция СоздатьМассивПоТаблице(знач Таблица) Экспорт
	
	Массив = Новый Массив;

	Если Таблица <> Неопределено Тогда
		
		Для Каждого Элемент Из Таблица Цикл
			
			НовыйЭлемент = Новый Структура;
			
			Для Каждого Колонка Из Таблица.Колонки Цикл
				НовыйЭлемент.Вставить(Колонка.Имя, Элемент[Колонка.Имя]);
			КонецЦикла;
			
			Массив.Добавить(НовыйЭлемент);

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Массив;

КонецФункции

Процедура ПреобразоватьДатуФайлаКДатеСервера(ВремяИзменения) Экспорт
	//смещение = СмещениеЛетнегоВремени();
	//
	//// приводим к зимнему времени
	//Если ВремяЛетнее(ВремяИзменения) Тогда
	//	ВремяИзменения = ВремяИзменения - смещение;
	// КонецЕсли;
	//
	// коррекция NTFS - если сезон файла и текущий отличается (зима-лето или лето-зима)
	//Если ВремяЛетнее(ТекущаяДата()) Тогда
	//	Если НЕ ВремяЛетнее(ВремяИзменения) Тогда
	//		ВремяИзменения = ВремяИзменения - смещение;
	//	КонецЕсли;
	//Иначе
	//	Если ВремяЛетнее(ВремяИзменения) Тогда
	//		ВремяИзменения = ВремяИзменения + смещение;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// преобразует к зимнему времени и еще учитывает NTFS коррекцию
Функция СформироватьЗаголовокПриложенияСервер(ТекущийЗаголовокПриложения) Экспорт
	
	ПредставлениеЗаголовка = СокрЛП(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница);  //V
	
	Если ПредставлениеЗаголовка = "" Тогда
		ПредставлениеЗаголовка = СокрЛП(ТекущийЗаголовокПриложения);
	КонецЕсли;
	
	Если ПредставлениеЗаголовка <> "" Тогда
		ПредставлениеЗаголовка = ПредставлениеЗаголовка + " / ";
	КонецЕсли;
	
	ПредставлениеПользователя = Строка(ПараметрыСеанса.ТекущийПользователь);
	
	Если СокрЛП(Строка(ПредставлениеПользователя)) <> "" Тогда
		ПредставлениеПользователя = ПредставлениеПользователя + " /";
	КонецЕсли;

	ЗаголовокПриложения = СокрЛП(ПредставлениеЗаголовка + ПредставлениеПользователя);
	
	Возврат ЗаголовокПриложения;
	
КонецФункции

Функция ПолучитьСтавкуНДС(СсылкаСтавкаНДС) Экспорт
	Возврат ?(ЗначениеЗаполнено(СсылкаСтавкаНДС),СсылкаСтавкаНДС.Ставка,0);
КонецФункции

Функция ПолучитьСинонимМетаданных(Объект)  Экспорт
	Возврат Объект.Метаданные().Синоним;
КонецФункции

Функция ПолучитьЗначениеКонстанты(Имя) экспорт
	Возврат Константы[Имя].Получить();
КонецФункции

Функция ПолучитьЗначениеПараметраСеанса(Имя) экспорт
	Возврат ПараметрыСеанса[Имя];
КонецФункции

Функция ПолучитьСвойствоПоСсылке(Ссылка,Свойство) экспорт
	Значение = ссылка[свойство];
	возврат Значение;
КонецФункции

Функция ПолучитьДанныеСтрокиДокументаОснованияДляВозвратнойНакладной(Ссылка,Номенклатура) экспорт
	
	ИмяДокумента = Ссылка.Метаданные().Имя;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Состав.СтавкаНДС,
	|	ВЫРАЗИТЬ(Состав.Сумма / Состав.Количество КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	Документ."+ИмяДокумента+".Состав КАК Состав
	|ГДЕ
	|	Состав.Номенклатура = &Номенклатура
	|	И Состав.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("СтавкаНДС,Цена",Выборка.СтавкаНДС,Выборка.Цена);
	Иначе	
		 Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ "+?(счетчикТаблиц=1," Разрешенные ","")+" ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			//|ИЗ " + Движение.ПолноеИмя() + "
			//|
			//|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьОсновнуюСтавкуНДС() Экспорт
	СтавкаНДСЧисло = Константы.ОсновнаяСтавкаНДС.Получить();
	СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",СтавкаНДСЧисло);
	Если СтавкаНДС.Пустая() Тогда
		СтавкаОбъект = Справочники.СтавкиНДС.СоздатьЭлемент();
		СтавкаОбъект.Ставка = СтавкаНДСЧисло;
		СтавкаОбъект.Наименование = "" + СокрЛП(СтавкаНДСЧисло) + "%";
		СтавкаОбъект.Записать();
		СтавкаНДС = СтавкаОбъект.Ссылка;
	КонецЕсли;	
	Возврат СтавкаНДС;
КонецФункции

Процедура ЗапретМодификацииОбъектов(Форма,Элемент = Неопределено) Экспорт
	Если НЕ ПараметрыСеанса.ЭтоЦентр Тогда
		Если НЕ ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница.РежимРаботы = Перечисления.РежимРаботыСЕ.Продуктив Тогда //V
			Форма.ТолькоПросмотр = Истина;
			Если Элемент <> Неопределено Тогда
				Элемент.Доступность = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьУчетнуюПолитикуФирмы(Фирма,Дата) экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СхемаНалогообложения,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ВыпускПродукцииПоПлановымЦенам,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.АвтоматическоеФормированиеСчетаФактуры,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Izh_ПлательщикНДС КАК ПлательщикНДС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&Дата, Организация = &Фирма) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних");
	Запрос.УстановитьПараметр("Фирма",Фирма);
	Запрос.УстановитьПараметр("Дата",Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("СхемаНалогообложения,ВыпускПродукцииПоПлановымЦенам,АвтоматическоеФормированиеСчетаФактуры,ПлательщикНДС",Выборка.СхемаНалогообложения,Выборка.ВыпускПродукцииПоПлановымЦенам,Выборка.АвтоматическоеФормированиеСчетаФактуры,Выборка.ПлательщикНДС);
	Иначе
		Возврат Новый Структура("СхемаНалогообложения,ВыпускПродукцииПоПлановымЦенам,АвтоматическоеФормированиеСчетаФактуры,ПлательщикНДС",Перечисления.СхемыНалогообложения.Общая,Ложь,Ложь,Ложь);
	КонецЕсли;	
	
КонецФункции	

Процедура ЗапретТовародвиженияПриИнвентаризации(Объект, Отказ, Режим) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если Константы.ФлагЗапретаТовародвижения.Получить() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Установлен запрет на товародвижение!'"),Объект.Ссылка);
		Отказ = Истина;
	Иначе
		мТовары = ПолучитьМассивТоваровДокументаОбъекта(Объект);
		Если ТоварыПрисутствуютВНеЗавершенныхБизнесПроцессахПроведениеИнвентаризации(мТовары) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'В документе присутствуют товары, который участвуют в инвентаризации!'"),Объект.Ссылка);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьМассивТоваровДокументаОбъекта(ДокументОбъект)
	
	мТовары = Новый Массив;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВводОстатков") Тогда
		мТовары = ДокументОбъект.КупленныеТовары.ВыгрузитьКолонку("Номенклатура");
		Для каждого сКомиссионныеТовары Из ДокументОбъект.КомиссионныеТовары Цикл
			мТовары.Добавить(сКомиссионныеТовары.Номенклатура);
		КонецЦикла;
		Для каждого сХранимыеТовары Из ДокументОбъект.ХранимыеТовары Цикл
			мТовары.Добавить(сХранимыеТовары.Номенклатура);
		КонецЦикла;
		Для каждого сТоварыПереданныеНаКомиссию Из ДокументОбъект.ТоварыПереданныеНаКомиссию Цикл
			мТовары.Добавить(сТоварыПереданныеНаКомиссию.Номенклатура);
		КонецЦикла;
		Для каждого сРеализованныеТовары Из ДокументОбъект.РеализованныеТовары Цикл
			мТовары.Добавить(сРеализованныеТовары.Номенклатура);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ГотоваяПродукция") Тогда
		мТовары = ДокументОбъект.Состав.ВыгрузитьКолонку("Номенклатура");
		Для каждого сПродукция Из ДокументОбъект.Продукция Цикл
			мТовары.Добавить(сПродукция.Номенклатура);
		КонецЦикла;
	Иначе
		Если Не ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("Состав") = Неопределено Тогда
			//Если Не ДокументОбъект.Метаданные().ТабличныеЧасти.Состав.Реквизиты.Найти("Номенклатура") = Неопределено Тогда
				мТовары = ДокументОбъект.Состав.ВыгрузитьКолонку("Номенклатура");
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат мТовары;
КонецФункции

Функция ТоварыПрисутствуютВНеЗавершенныхБизнесПроцессахПроведениеИнвентаризации(мТовары)

	Рез = Ложь;
	
	тзТовары = Новый ТаблицаЗначений;
	тзТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для Сч = 1 По мТовары.Количество() Цикл
		тзТовары.Добавить();
	КонецЦикла;
	тзТовары.ЗагрузитьКолонку(мТовары, "Номенклатура");
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("тТовары", тзТовары);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	тТовары.Номенклатура
	               |ПОМЕСТИТЬ тТовары
	               |ИЗ
	               |	&тТовары КАК тТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тТовары.Номенклатура
	               |ИЗ
	               |	тТовары КАК тТовары
	               |ГДЕ
	               |	тТовары.Номенклатура В ИЕРАРХИИ
	               |			(ВЫБРАТЬ
	               |				ТоварыБП.Номенклатура
	               |			ИЗ
	               |				(ВЫБРАТЬ
	               |					ГрафикИнвентаризацийСостав.Департамент КАК Номенклатура
	               |				ИЗ
	               |					БизнесПроцесс.ПроведениеИнвентаризации КАК ПроведениеИнвентаризации ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГрафикИнвентаризаций.Состав КАК ГрафикИнвентаризацийСостав
	               |						ПО
	               |							ПроведениеИнвентаризации.Основание = ГрафикИнвентаризацийСостав.Ссылка
	               |				ГДЕ
	               |					ПроведениеИнвентаризации.Стартован
	               |					И ПроведениеИнвентаризации.Завершен = ЛОЖЬ
	               |		
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |				ВЫБРАТЬ
	               |					ГрафикИнвентаризацийСостав.Класс
	               |				ИЗ
	               |					БизнесПроцесс.ПроведениеИнвентаризации КАК ПроведениеИнвентаризации ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГрафикИнвентаризаций.Состав КАК ГрафикИнвентаризацийСостав
	               |						ПО
	               |							ПроведениеИнвентаризации.Основание = ГрафикИнвентаризацийСостав.Ссылка
	               |				ГДЕ
	               |					ПроведениеИнвентаризации.Стартован
	               |					И ПроведениеИнвентаризации.Завершен = ЛОЖЬ
	               |		
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |				ВЫБРАТЬ
	               |					ГрафикИнвентаризацийСостав.ПодКласс
	               |				ИЗ
	               |					БизнесПроцесс.ПроведениеИнвентаризации КАК ПроведениеИнвентаризации ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГрафикИнвентаризаций.Состав КАК ГрафикИнвентаризацийСостав
	               |						ПО
	               |							ПроведениеИнвентаризации.Основание = ГрафикИнвентаризацийСостав.Ссылка
	               |				ГДЕ
	               |					ПроведениеИнвентаризации.Стартован
	               |					И ПроведениеИнвентаризации.Завершен = ЛОЖЬ
	               |				) КАК ТоварыБП
	               |			ГДЕ
	               |				ТоварыБП.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))";
	
	Результат = Запрос.Выполнить();
	
	Рез = Не Результат.Пустой();
	
	Возврат Рез;
КонецФункции

Функция ВГрафикеИнвентаризацийЕстьГруппы(ДокументСсылка) Экспорт

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ГрафикИнвентаризаций") И ЗначениеЗаполнено(ДокументСсылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Документ.ГрафикИнвентаризаций.Состав КАК ГрафикИнвентаризацийСостав
		|ГДЕ
		|	ГрафикИнвентаризацийСостав.Ссылка = &Ссылка
		|	И (ГрафикИнвентаризацийСостав.Департамент <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ ГрафикИнвентаризацийСостав.Класс <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ ГрафикИнвентаризацийСостав.ПодКласс <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Рез = Не Запрос.Выполнить().Пустой();
	Иначе
		Рез = Ложь;
	КонецЕсли;
	
	Возврат Рез;

КонецФункции

Функция ПолучитьФлагЗапретаТовародвижения() Экспорт
	Возврат Константы.ФлагЗапретаТовародвижения.Получить();
КонецФункции


//popn+
Функция ПолучитьТекущуюСтруктурнуюЕдиницу() Экспорт
	
	Возврат ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	
КонецФункции

Функция ПолучитьПараметрФункциональнойОпцииАлкоголь() Экспорт
	
	Возврат ПланыВидовХарактеристик.ПараметрыСтруктурныхЕдиниц.ВестиУчетАлкоголяВРазрезеПроизводителей;
	
КонецФункции

Функция ЕстьПравоСмотретьСебестоимость() Экспорт
	
	Возврат РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ПросмотрСебестоимости");
	
КонецФункции

Функция ЗапретВводаДробногоКоличестваШтучногоТовара() Экспорт
	
	ЗапретВводаДробногоКоличества = ПараметрыСеанса.ЗапретВводаДробногоКоличества;
	Возврат ЗапретВводаДробногоКоличества;
	
КонецФункции

Функция ЗапретРедактированияЦенПродажи() Экспорт
	
	ЗапретРедактированияЦенПродажи = ПараметрыСеанса.ЗапретРедактированияЦенПродажи;
	Возврат ЗапретРедактированияЦенПродажи;
	
КонецФункции

Функция ЭтоШтучныйТовар(Товар) Экспорт
	
	Возврат Товар.ТипТовара = ПредопределенноеЗначение("Перечисление.ТипыТоваров.Штучный");
	
КонецФункции

Функция ЕстьСвязьКонтрагентаИФирмы(Контрагент, Фирма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвязьФирмИКонтрагентов.Контрагент,
		|	СвязьФирмИКонтрагентов.Фирма
		|ИЗ
		|	РегистрСведений.СвязьФирмИКонтрагентов КАК СвязьФирмИКонтрагентов
		|ГДЕ
		|	СвязьФирмИКонтрагентов.Контрагент = &Контрагент
		|	И СвязьФирмИКонтрагентов.Фирма = &Фирма";

	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Фирма", Фирма);

	Результат = Запрос.Выполнить();

    Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция КонтрагентПустаяСсылка() Экспорт
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции
//popn-

Процедура ПроверкаДокументаПриКопировании(Объект,ОбъектКопирования) Экспорт
	Если ТипЗнч(ОбъектКопирования.Контрагент) = Тип("СправочникСсылка.Контрагенты") И НЕ ОбъектКопирования.Контрагент.Статус Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрагент не активен!",Объект);
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьПодКлассНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Номенклатура.Родитель.Группа = 1
		|			ТОГДА Номенклатура.Родитель
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Номенклатура.Родитель.Родитель.Группа = 1
		|					ТОГДА Номенклатура.Родитель.Родитель
		|				ИНАЧЕ ВЫБОР
		|						КОГДА Номенклатура.Родитель.Родитель.Родитель.Группа = 1
		|							ТОГДА Номенклатура.Родитель.Родитель.Родитель
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ПодКласс
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Номенклатура);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Рез = Выборка.ПодКласс;
	Иначе
		Рез = Неопределено;
	КонецЕсли;
	
	Возврат Рез;	
КонецФункции


Процедура ПроверкаСтатусаНоменклатурыПриКопировании(Объект,ОбъектКопирования) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ДокументСостав.*
		|ИЗ
		|	Документ."+Объект.Метаданные().Имя+".Состав КАК ДокументСостав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатуры КАК СтатусыНоменклатуры
		|		ПО ДокументСостав.Номенклатура = СтатусыНоменклатуры.Номенклатура
		|			И ДокументСостав.Ссылка.СтруктурнаяЕдиница = СтатусыНоменклатуры.СтруктурнаяЕдиница
		|			И (СтатусыНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТоваров.Активный))
		|ГДЕ ДокументСостав.Ссылка = &Ссылка";
    Запрос.УстановитьПараметр("Ссылка",ОбъектКопирования.Ссылка);
	Результат = Запрос.Выполнить();

	Объект.Состав.Загрузить(Результат.Выгрузить());

КонецПроцедуры	

