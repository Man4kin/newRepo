//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
//

// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПЕЧАТНЫХ ФОРМ

// Функция проверяет, проведен документ или нет, и вызывает процедуру печати
// документа.
//
// Параметры:
//  ПараметрКоманды	- Параметр вызвавшей функцию команды
//  ИмяМакета    - Текст - имя макета, который будет напечатан.
//
Функция ПечатнаяФорма(ПараметрКоманды, ИмяМакета = "") Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Сформирован = Ложь;
	
	Для Каждого Ссылка Из ПараметрКоманды Цикл
		
		Если Ссылка = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Документ = Ссылка.ПолучитьОбъект();
		Если Документ.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить И Не Документ.Проведен Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен: '") + Строка(Документ),ССылка);
			Продолжить;
		КонецЕсли;	
		Документ.ПечатнаяФорма(ТабличныйДокумент, ИмяМакета);
		Сформирован = Истина;
	КонецЦикла;	
	
	Если Сформирован Тогда
		Возврат ТабличныйДокумент;
	Иначе 	
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции // ПечатнаяФорма()

// Функция возвращает совокупность данных о физическом лице в виде структуры, 
// В совокупность данных входит ФИО, должность в заданной организации, 
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица
//                 включает фамилию и инициалы, если Ложь - фамилию и полностью
//                 имя и отчество.
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 "Фамилия",
//                 "Имя"
//                 "Отчетсво"
//                 "Представление (Фамилия И.О.)"
//                 "Подразделение"
//                 "ДокументВид"
//                 "ДокументСерия"
//                 "ДокументНомер"
//                 "ДокументДатаВыдачи"
//                 "ДокументКемВыдан"
//                 "ДокументКодПодразделения".
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт
	
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.УстановитьПараметр("Работает", Перечисления.СостояниеСотрудников.Работает);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	Сотрудники.ТабельныйНомер,
	|	Сотрудники.Должность,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Серия КАК ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Номер КАК ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.Период КАК ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.КемВыдан КАК ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.КодПодразделения КАК ДокументКодПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизическиеЛица.Ссылка КАК ФизЛицо
	|	ИЗ
	|		Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ГДЕ
	|		ФизическиеЛица.Ссылка = &ФизЛицо) КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизЛица.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФизЛица.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Сотрудники.ТабельныйНомер КАК ТабельныйНомер,
	|			Сотрудники.ФизЛицо КАК ФизЛицо,
	|			Сотрудники.Должность КАК Должность,
	|			Сотрудники.Подразделение КАК Подразделение
	|		ИЗ
	|			РегистрСведений.Сотрудники.СрезПоследних(
	|					&ДатаСреза,
	|					ФизЛицо = &ФизЛицо
	|						И Организация = &Организация) КАК Сотрудники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСотрудников.СрезПоследних(
	|						&ДатаСреза,
	|						ФизЛицо = &ФизЛицо
	|							И Организация = &Организация) КАК СостояниеСотрудниковСрезПоследних
	|				ПО Сотрудники.ФизЛицо = СостояниеСотрудниковСрезПоследних.ФизЛицо
	|		ГДЕ
	|			СостояниеСотрудниковСрезПоследних.Состояние = &Работает) КАК Сотрудники
	|		ПО ФизЛица.ФизЛицо = Сотрудники.ФизЛицо";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Данные.Следующий();
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
	|ТабельныйНомер, Должность, Подразделение, 
	|ДокументВид, ДокументСерия, ДокументНомер,  
	|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, 
	|ПредставлениеДокумента");
	
	ЗаполнитьЗначенияСвойств(Результат, Данные);
	
	Результат.Представление          = ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество, ФИОКратко);
	Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);
	
	Возврат Результат;
	
КонецФункции // ДанныеФизЛица()

// Функция возвращает информацию об ответственных лицах организации и их
// должностях.
//
// Параметры:
//  Организация - Составной тип: СправочникСсылка.Организации,
//                 СправочникСсылка.Кассы, СправочникСсылка.МестаХранения,
//                 организационная единица, для которой необходимо молучить
//                 информацию об ответственных лицах
//  ДатаСреза    - Дата - дата, на которую считываются данные.
//+Зернятко А.В.@06.11.2013 - //AKB-374. Ответственные лица СЕ
//  СтруктурнаяЕдиница    - СправочникСсылка.СтруктурныеЕдиницы, структурная единица для которой необходимо получить информацию об ответсвенных лицах.
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физических лицах
//                 структурной единицы.
//
Функция ОтветственныеЛицаОрганизационнойЕдиницы(ОрганизационнаяЕдиница, ДатаСреза, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	Результат = Новый Структура("ФИОРуководителя, РуководительДолжность, ФИОГлавногоБухгалтера, ФИОКассира, ФИОКладовщика, КладовщикДолжность");
	
	Если ОрганизационнаяЕдиница <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
		Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизационнаяЕдиница);
		//*Зернятко А.В.@06.11.2013 - //AKB-374. Ответственные лица СЕ
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ОтветственныеЛицаСрезПоследних.Организация КАК ОрганизационнаяЕдиница,
		//|	ОтветственныеЛицаСрезПоследних.ТипОтветственногоЛица КАК ТипОтветственногоЛица,
		//|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо.Наименование КАК ФизическоеЛицо,
		//|	ОтветственныеЛицаСрезПоследних.НазваниеДолжности КАК НазваниеДолжности
		//|ИЗ
		//|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, Организация = &ОрганизационнаяЕдиница) КАК ОтветственныеЛицаСрезПоследних";
		
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		
		//Двухуровневый запрос, получает даныне об ответсвенных лица по переданной СЕ или по "пустой СЕ" в случае, если по переданной значения не заполнены.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаСрезПоследних.Организация КАК ОрганизационнаяЕдиница,
		|	ОтветственныеЛицаСрезПоследних.ТипОтветственногоЛица КАК ТипОтветственногоЛица,
		|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница,
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо.Наименование КАК ФизическоеЛицо,
		|	ОтветственныеЛицаСрезПоследних.НазваниеДолжности КАК НазваниеДолжности,
		|	0 КАК Приоритет
		|ПОМЕСТИТЬ ОтветсвенныеЛицаСЕиОрганизации
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(
		|			&ДатаСреза,
		|			Организация = &ОрганизационнаяЕдиница
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛицаСрезПоследних
		|ГДЕ
		|	НЕ ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтветственныеЛицаСрезПоследних.Организация,
		|	ОтветственныеЛицаСрезПоследних.ТипОтветственногоЛица,
		|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница,
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо.Наименование,
		|	ОтветственныеЛицаСрезПоследних.НазваниеДолжности,
		|	1
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, Организация = &ОрганизационнаяЕдиница) КАК ОтветственныеЛицаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтветсвенныеЛицаСЕиОрганизации.ОрганизационнаяЕдиница,
		|	ОтветсвенныеЛицаСЕиОрганизации.ТипОтветственногоЛица,
		|	ОтветсвенныеЛицаСЕиОрганизации.СтруктурнаяЕдиница,
		|	ОтветсвенныеЛицаСЕиОрганизации.ФизическоеЛицо,
		|	ОтветсвенныеЛицаСЕиОрганизации.НазваниеДолжности
		|ИЗ
		|	ОтветсвенныеЛицаСЕиОрганизации КАК ОтветсвенныеЛицаСЕиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОтветсвенныеЛицаСЕиОрганизации.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
		|			ОтветсвенныеЛицаСЕиОрганизации.ТипОтветственногоЛица КАК ТипОтветственногоЛица,
		|			МИНИМУМ(ОтветсвенныеЛицаСЕиОрганизации.Приоритет) КАК Приоритет
		|		ИЗ
		|			ОтветсвенныеЛицаСЕиОрганизации КАК ОтветсвенныеЛицаСЕиОрганизации
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОтветсвенныеЛицаСЕиОрганизации.ТипОтветственногоЛица,
		|			ОтветсвенныеЛицаСЕиОрганизации.ОрганизационнаяЕдиница) КАК МинимальныеПриоритетыПоТипуОтветственногоЛица
		|		ПО ОтветсвенныеЛицаСЕиОрганизации.ТипОтветственногоЛица = МинимальныеПриоритетыПоТипуОтветственногоЛица.ТипОтветственногоЛица
		|			И ОтветсвенныеЛицаСЕиОрганизации.ОрганизационнаяЕдиница = МинимальныеПриоритетыПоТипуОтветственногоЛица.ОрганизационнаяЕдиница";
		///Зернятко А.В.@ - конец блока
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипОтветственногоЛица 		= Перечисления.ТипыОтветственныхЛиц.Руководитель Тогда
				Результат.ФИОРуководителя       = Выборка.ФизическоеЛицо;
				Результат.РуководительДолжность = Выборка.НазваниеДолжности;
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.ГлавныйБухгалтер Тогда
				Результат.ФИОГлавногоБухгалтера = Выборка.ФизическоеЛицо;
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.Кассир Тогда
				Результат.ФИОКассира            = Выборка.ФизическоеЛицо;
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.Кладовщик Тогда
				Результат.ФИОКладовщика			= Выборка.ФизическоеЛицо;
				Результат.КладовщикДолжность    = Выборка.НазваниеДолжности;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции // ОтветственныеЛицаОрганизационнойЕдиницы()

// Функция формирует фамилию, имя и отчество одной строкой.
//
// Параметры
//  Фамилия      - фамилия физ. лица
//  Имя          - имя физ. лица
//  Отчество     - отчество физ. лица
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица
//                 включает фамилию и инициалы, если Ложь - фамилию и полностью
//                 имя и отчество.
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
	
	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
		?(НЕ ПустаяСтрока(Отчество) , 
		Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя + 
		?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
	КонецЕсли;
	
КонецФункции // ПолучитьФамилиюИмяОтчество()

// Получение представления для документа, удостоверяющего личность.
//
// Параметры
//  ДанныеФизЛица – Коллекция данных физ. лица (структура, строка таблицы, ...),
//                 содержащая значения: ДокументВид, ДокументСерия,
//                 ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан.  
//
// Возвращаемое значение:
//   Строка      – Представление документа, удостоверяющего личность.
//
Функция ПолучитьПредставлениеДокументаФизЛица(ДанныеФизЛица) Экспорт
	
	Возврат Строка(ДанныеФизЛица.ДокументВид) + " серия " +
	ДанныеФизЛица.ДокументСерия       + ", номер " +
	ДанныеФизЛица.ДокументНомер       + ", выданный " +
	Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
	ДанныеФизЛица.ДокументКемВыдан;
	
КонецФункции // ПолучитьПредставлениеДокументаФизЛица()


//Процедура выводит строку заголовка при печати накладных
// параметры:
//	макет - макет
//	ТабДок - табличный документ, в который выводится печатная форма
//	ИмяРеквизита - имя реквизита для печти
//	ЗначениеРеквизита - значение реквизита для печти
Процедура ВывестиСтрокуЗаголовкаДляНакладной(Макет,ТабДок,имяРеквизита,ЗначениеРеквизита) Экспорт
	Область = Макет.ПолучитьОбласть("СтрокаЗаголовка");
	Область.Параметры.Установить(0,ИмяРеквизита);
	Область.Параметры.Установить(1,ЗначениеРеквизита);
	ТабДок.Вывести(Область);	
КонецПроцедуры	


// Процедура предназначена для преобразования номера документа.
//
// Параметры:
//  Документ     - (ДокументСсылка), документ, чей номер надо получить для
//                 печати.
//
// Возвращаемое значение.
//  Строка       - номер документа для печати
//
Функция ПолучитьНомерНаПечать(Документ) Экспорт
	
	Если Документ = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;
	
	Номер   = СокрЛП(Документ.Номер);
	Префикс = "";
	
	Организация = Документ.Фирма;
	
	
	Если ЗначениеЗаполнено(Организация) Тогда		
		Префикс = СокрЛП(Организация.Префикс);		
	КонецЕсли;
	
	// удаление префикса из номера документа
	Если Найти(Номер, Префикс)=1 Тогда 
		Номер = Сред(Номер, СтрДлина(Префикс)+1);
	КонецЕсли;
	
	// так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;
	
	
	Возврат Номер;
	
КонецФункции // ПолучитьНомерНаПечать()

// Возвращает структуру данных со сводным описанием контрагента.
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,КПП,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 
	
	Результат = "";
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",		" ");
	СоответствиеПараметров.Вставить("ИНН",						" ИНН ");
	СоответствиеПараметров.Вставить("КПП",						" КПП ");
	СоответствиеПараметров.Вставить("ОГРН",						" ОГРН ");
	СоответствиеПараметров.Вставить("СвидетельствоСерияНомер",	" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			" ");
	СоответствиеПараметров.Вставить("Телефоны",					" тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",				" р/с ");
	СоответствиеПараметров.Вставить("Банк",               		" в банке ");
	СоответствиеПараметров.Вставить("БИК",                		" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           		" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          		" Код по ОКПО ");
	
	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);
				
				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;
				
				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 
				
				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
				
			Исключение
				
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
				
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ОписаниеОрганизации()

// Стандартная функция форматирования прописи количества.
//
// Параметры:
//  Количество   - число, которое мы хотим форматировать.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт
	
	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);
	
	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;
	
	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);
	
КонецФункции // КоличествоПрописью()

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода,СтруктурнаяЕдиница=Неопределено,ДляФизЛицаТолькоИнициалы = Истина) Экспорт
	//{ ВетровИА 04.03.2015 Добавил Поля ОГРН, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи} 
	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка, ОГРН, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;
	Если ЮрФизЛицо = Неопределено Тогда
		Возврат Сведения;
	КонецЕсли;
	Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ИмяСправочника = "БанковскиеСчета";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ИмяСправочника = "СтруктурныеЕдиницы";
	Иначе
		Возврат Сведения;
	КонецЕсли;
	Если ИмяСправочника = "Организации" ТОгда
		ИмяРеквизитаБанка = "ОсновнойБанковскийСчет";
		ДопТекстЗапроса = "
		|	ИНН,
		|	КПП,
		|	КодПоОКПО КАК КодПоОКПО,
		|   ОГРН КАК ОГРН,
		|   СвидетельствоСерияНомер КАК СвидетельствоСерияНомер,
		|   СвидетельствоДатаВыдачи КАК СвидетельствоДатаВыдачи,
		|	ОсновнойБанковскийСчет.НомерСчета КАК НомерСчета,
		|	ОсновнойБанковскийСчет.НаименованиеБанка КАК Банк,
		|	ОсновнойБанковскийСчет.БИКБанка КАК БИК,
		|	ОсновнойБанковскийСчет.КоррСчетБанка КАК КоррСчет,
		|	ОсновнойБанковскийСчет.АдресБанка КАК АдресБанка,";
	ИначеЕсли ИмяСправочника = "Контрагенты" тогда
		ИмяРеквизитаБанка = "ОсновнойБанковскийСчет";
		ДопТекстЗапроса = "
		|	ИНН,
		|	КПП,
		|	КодПоОКПО КАК КодПоОКПО,
		|   "" "" КАК ОГРН,
		|   "" "" КАК СвидетельствоСерияНомер,
		|   "" "" КАК СвидетельствоДатаВыдачи,

		|	"+ИмяРеквизитаБанка+" КАК НомерСчета,
		|	"" "" КАК Банк,
		|	"" ""    КАК БИК,
		|	"" "" КАК КоррСчет,
		|	"" ""    КАК АдресБанка,";
	Иначе
		ИмяРеквизитаБанка = " ";
		ДопТекстЗапроса = "
		|	"" "" как ИНН,
		|	"" "" как КПП,
		|	"" "" КАК КодПоОКПО,
		|   "" "" КАК ОГРН,
		|   "" "" КАК СвидетельствоСерияНомер,
		|   "" "" КАК СвидетельствоДатаВыдачи,

		|	"" "" КАК НомерСчета,
		|	"" "" КАК Банк,
		|	"" ""    КАК БИК,
		|	"" "" КАК КоррСчет,
		|	"" ""    КАК АдресБанка,";
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Представление КАК Наименование,      "+ДопТекстЗапроса+"
	|	""Бла-бла-бла""    КАК БлаБлаБла
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК Организации
	|
	|ГДЕ
	|	Организации.Ссылка = &ПарЮрФизЛицо";
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();
	Сведения.Вставить("КодПоОКПО", "");
	Сведения.Вставить("КПП",       "");
	Сведения.КодПоОКПО = Данные.КодПоОКПО;
	КППСЕ = Неопределено;
	Если ИмяСправочника = "Организации" и  СтруктурнаяЕдиница<>Неопределено тогда
		ЗапросПоКПП = Новый Запрос;
		ЗапросПОКПП.Текст = "ВЫБРАТЬ
		|	СтруктурныеЕдиницыДополнительныеРеквизиты.Значение КАК КПП
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы.ДополнительныеРеквизиты КАК СтруктурныеЕдиницыДополнительныеРеквизиты
		|ГДЕ
		|	СтруктурныеЕдиницыДополнительныеРеквизиты.Ссылка = &СтруктурнаяЕдиница
		|	И СтруктурныеЕдиницыДополнительныеРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыСтруктурныхЕдиниц.КППОбособленногоПодразделения)";
		ЗапросПоКПП.УстановитьПараметр("СтруктурнаяЕдиница",СтруктурнаяЕдиница);
		рез = ЗапросПоКПП.Выполнить();
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() цикл
			КППСЕ = ВЫборка.КПП;	
		Конеццикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(КППСЕ) тогда
		Сведения.КПП = КППСЕ;
	Иначе
		Сведения.КПП       = Данные.КПП;
	КОнецЕсли;
	Представление = ?(ЮрФизЛицо.Метаданные().Реквизиты.Найти("ПолноеНаименование")=Неопределено,ЮрФизЛицо.Наименование,?(ЗначениеЗаполнено(ЮрфизЛицо.ПолноеНаименование),ЮрФизЛицо.ПолноеНаименование,ЮрФизЛицо.Наименование));
	Сведения.Вставить("ПолноеНаименование", Представление);
	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление",   Представление);
		Сведения.Вставить("ИНН",              Данные.ИНН);
		Сведения.Вставить("Телефоны",         ПолучитьКонтактнуюИнформациюДляСведенийОЮрФизЛице(ЮрФизЛицо,ИмяСправочника,"Телефон"));
		Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
		Сведения.Вставить("Банк",             Данные.Банк);
		Сведения.Вставить("БИК",              Данные.БИК);
		Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
		Сведения.Вставить("ЮридическийАдрес", ПолучитьКонтактнуюИнформациюДляСведенийОЮрФизЛице(ЮрФизЛицо,ИмяСправочника,"ЮридическийАдрес"));
		Сведения.Вставить("ФактическийАдрес",    ПолучитьКонтактнуюИнформациюДляСведенийОЮрФизЛице(ЮрФизЛицо,ИмяСправочника,"ФактическийАдрес"));
		Сведения.Вставить("ОГРН",         Данные.ОГРН);
		Сведения.Вставить("СвидетельствоСерияНомер",         Данные.СвидетельствоСерияНомер);
		Сведения.Вставить("СвидетельствоДатаВыдачи",         Формат(Данные.СвидетельствоДатаВыдачи, "ДФ=дд.ММ.гггг"));
		Если Не ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;
	Возврат Сведения;
	//{ ВетровИА 04.03.2015 Добавил Поля ОГРН, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи} 
КонецФункции
// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект       - СправочникСсылка, объект контактной информации
//  ТипАдреса    - тип контактной информации.
//
// Возвращаемое значение
//  Строка - представление найденного адреса.
//                                          
Функция ПолучитьКонтактнуюИнформациюДляСведенийОЮрФизЛице(ОбъектКонтактнойИнформации,ИмяСправочника,ВидКонтактнойИнформации) 
	Сведения = Неопределено;
	Если ВидКонтактнойИнформации = "ЮридическийАдрес" тогда
		Если ИмяСправочника = "Организации" тогда
			Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ИначеЕсли ИмяСправочника = "Контрагенты" тогда
			Вид =  Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		КонецЕсли;
	ИначеЕсли ВидКонтактнойИнформации = "ФактическийАдрес" тогда
		Если  ИмяСправочника = "Организации" тогда
			Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ИначеЕсли ИмяСправочника = "Контрагенты" тогда
			Вид =  Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		ИначеЕсли ИмяСправочника = "СтруктурныеЕдиницы" тогда
			Вид =  Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы;
		КонецЕсли;
	ИначеЕсли ВидКонтактнойИнформации = "Телефон" тогда
		Если  ИмяСправочника =  "Организации" тогда
			Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		ИначеЕсли ИмяСправочника = "Контрагенты" тогда
			Вид =  Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ИначеЕсли ИмяСправочника = "СтруктурныеЕдиницы" тогда
			Вид =  Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы;
		КонецЕсли;
	КонецЕсли;
	Сведения = УправлениеКонтактнойИнформациейСервер.ПолучитьКонтактнуюИнформацияОбъекта(ОбъектКонтактнойИнформации,Вид);
	Возврат Сведения;	
КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Стандартная для данной конфигурации функция форматирования сумм.
//
// Параметры: 
//  Сумма        - число, которое мы хотим форматировать 
//  Валюта       - ссылка на элемент справочника валют, если задан, то к в
//                 результирующую строку будет добавлено представление валюты
//  ЧН           - строка, представляющая нулевое значение числа
//  ЧРГ          - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
	?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
	?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции // ФорматСумм()

// Функция формирует представление суммы прописью в указанной валюте.
//
// Возвращаемое значение:
//  Строка - сумма прописью.
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт
	
	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, , Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;
	
КонецФункции // СформироватьСуммуПрописью()

// Форматирует сумму банковского платежного документа.
//
// Параметры:
//  Сумма        - число - реквизит, который надо отформатировать
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Отформатированная строка.
//
Функция ФорматироватьСуммуПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, Найти(Результат, "="));
		Иначе
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПлатежногоДокумента()

// Форматирует сумму прописью банковского платежного документа.
//
// Параметры:
//  Сумма        - число - реквизит, который надо представить прописью 
//  Валюта       - СправочникСсылка.Валюты - валюта, в которой нужно представить
//                 сумму
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Отформатированная строка.
//
Функция ФорматироватьСуммуПрописьюПлатежногоДокумента(Сумма, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат     = Сумма;
	ЦелаяЧасть    = Цел(Сумма);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = Валюта.ПараметрыПрописиНаРусском;
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
			Результат = Лев(Результат, Найти(Результат, "0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописьюПлатежногоДокумента()

Функция ПечатьНакладнойОбщая(МассивОбъектов,ОбъектыПечати,ИмяТабЧасти,СтрукРеквизитыШапки,СтрукРеквизитыТабЧасть) Экспорт
	Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.Накладная");
	ТабДок = Новый ТабличныйДокумент;
	НомерСтрокиНачало = 0;
	Если СтрукРеквизитыТабЧасть.Свойство("Номенклатура") тогда
		СтрукРеквизитыТабЧасть.Вставить("Код");
	КонецЕсли;
	для каждого Док из МассивОбъектов цикл
		Объект = Док.Ссылка.ПолучитьОбъект().Метаданные().Имя;	
		ЗапросШапка = Новый Запрос;
		Текст = "ВЫбрать разрешенные ";
		для каждого строка из СтрукРеквизитыШапки цикл
			Текст = Текст + "ДокументОбъект.ссылка."+Строка.Ключ+" как "+Строка.ключ+",";
		конеццикла;
		Текст = Сред(Текст,0,СТрДлина(Текст)-1);
		Текст = Текст + "
		|из Документ."+Объект+" как ДокументОбъект где ДокументОбъект.ссылка = &ТекущийДокумент ";
		ЗапросШапка.Текст = Текст;
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент",Док.Ссылка);
		Результат = ЗапросШапка.Выполнить();
		ВыборкаШапка = Результат.Выбрать();
		ВыборкаШапка.Следующий();
		ЗапросТабЧасть = Новый Запрос;
		Текст = "
		|Выбрать ";
		для каждого Строка из СтрукРеквизитыТабЧасть цикл
			Если ПроверкаНаСебестоимость(Строка.Ключ) тогда
				Если Строка.Ключ = "Код" тогда
					Текст= Текст + "ДокументОбъект.Номенклатура."+Строка.Ключ+","
				Иначе					
					Текст= Текст + "ДокументОбъект."+Строка.Ключ+","
				КонецЕсли;	
			Конецесли;
		конеццикла;
		Текст = Сред(Текст,0,СТрДлина(Текст)-1);
		Текст = Текст + "
		|из Документ."+Объект+"."+ИмяТабЧасти+" как ДокументОбъект где ДокументОбъект.ссылка = &ТекущийДокумент Итоги ";
		Итоги = Ложь;	
		для каждого строка из СтрукРеквизитыТабЧАсть цикл
			если проверкаНАСебестоимость(строка.Ключ) тогда
				Если ТипЗнч(Строка.Значение) = Тип("Булево") и СТрока.Значение тогда		
					Текст = Текст + "
					|Сумма("+Строка.Ключ+"),";
					Итоги = Истина;
				конецесли;
			конецесли;
		конеццикла;
		Текст = Сред(Текст,0,СТрДлина(Текст)-1);
		Текст = Текст + " По Общие ";
		ЗапросТабЧасть.Текст = Текст;
		ЗапросТабЧасть.УстановитьПараметр("ТекущийДокумент",Док.Ссылка);
		Результат = ЗапросТабЧасть.Выполнить();
		Если Не Результат.Пустой() тогда
			ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_"+Док.Метаданные().Имя+"_НакладнаяВнутренняя";
			ОбластьЗаголовок=  Макет.ПолучитьОбласть("Заголовок|ЗаголовокКолонка");
			ОбластьЗаголовок.Параметры.ПечЗаголовок = Док.Ссылка.ПолучитьОбъект().Метаданные().Синоним;
			ОбластьЗаголовок.Параметры.Дата = Формат(Док.Ссылка.Дата,"ДФ=dd.MM.yyyy");
			ОбластьЗаголовок.Параметры.Номер = Док.Ссылка.Номер;
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДок, Макет, ОбластьЗаголовок, Док);
			ТабДок.Вывести(ОбластьЗаголовок);
			//ОбластьСтрокаРеквизита = Макет.ПолучитьОбласть("СтрокаРеквизита");
			//ОбластьСтрокаРеквизита.Параметры.ИмяРеквизита = "Фирма";
			//ОбластьСтрокаРеквизита.Параметры.значениеРеквизита = Константы.Организация.Получить();
			//ТабДок.Вывести(ОбластьСтрокаРеквизита);
			для каждого строка из СтрукРеквизитыШапки цикл
				ЗначениеРеквизитаШапки = ВыборкаШапка[Строка.Ключ];
				Если ЗначениеЗаполнено(ЗначениеРеквизитаШапки) Тогда
					ОбластьСтрокаРеквизита = Макет.ПолучитьОбласть("СтрокаРеквизита");
					ОбластьСтрокаРеквизита.Параметры.ИмяРеквизита = Строка.Значение;
					Если ТипЗнч(ЗначениеРеквизитаШапки) = Тип("Дата") Тогда
						ОбластьСтрокаРеквизита.Параметры.значениеРеквизита = Формат(ЗначениеРеквизитаШапки,"ДФ=dd.MM.yyyy");
					Иначе
						Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеРеквизитаШапки)) тогда
							Представление = ?(ЗначениеРеквизитаШапки.Метаданные().Реквизиты.Найти("ПолноеНаименование")=Неопределено,ЗначениеРеквизитаШапки,?(ЗначениеЗаполнено(ЗначениеРеквизитаШапки.ПолноеНаименование),ЗначениеРеквизитаШапки.ПолноеНаименование,ЗначениеРеквизитаШапки));
						Иначе
							Представление = ЗначениеРеквизитаШапки;
						КонецЕсли;
						ОбластьСтрокаРеквизита.Параметры.значениеРеквизита = Представление;
					КонецЕсли;	
					ТабДок.Вывести(ОбластьСтрокаРеквизита);
				КонецЕсли;	
			конеццикла;
			Флаг = Истина;
			для каждого строка из СтрукРеквизитыТабЧасть цикл
				ИмяРеквизитаТабЧасть = СТрока.Ключ;
				Если Макет.Области.Найти(ИмяРеквизитаТабЧасть) = неопределено тогда        продолжить; конецесли;
				ОбластьШапка = Макет.получитьОбласть("Шапка|"+ИмяРеквизитаТабЧасть);
				Если Флаг тогда
					ТабДок.Вывести(ОбластьШапка);
				иначе
					ТабДок.Присоединить(ОбластьШапка);
				конецесли;
				ФЛаг = Ложь;
			конеццикла;
			ВыборкаОбщиеИтогиТабЧасть = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОбщиеИтогиТабЧасть.Следующий() цикл
				ВыборкаТабЧасть = ВыборкаОбщиеИтогиТабЧасть.Выбрать();
				Пока выборкаТабЧасть.Следующий() цикл
					Флаг = Истина;
					для каждого строка из СтрукРеквизитыТабЧасть цикл
						ИмяРеквизитаТабЧасть = Строка.Ключ;
						если Макет.Области.Найти(ИмяРеквизитаТабЧасть) = неопределено тогда продолжить; конецесли;
						ОбластьСтрока = Макет.ПолучитьОбласть("Строка|"+ИмяРеквизитаТабЧасть);
						ОбластьСтрока.Параметры.Заполнить(ВыборкаТабЧасть);
						
						Если ИмяРеквизитаТабЧасть = "ЕдиницаИзмерения" Тогда
							Если ЗначениеЗаполнено(ВыборкаТабЧасть.ЕдиницаИзмерения) тогда
								ОбластьСтрока.Параметры.ЕдиницаИзмерения = ВыборкаТабЧасть.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.ПолноеНаименование;
							Конецесли;
						КонецЕсли;
						
						если Флаг тогда				
							ТабДок.Вывести(ОбластьСтрока);
						Иначе
							ТабДок.Присоединить(ОбластьСтрока);
						конецесли;
						Флаг = Ложь;	
					Конеццикла;
				конеццикла;
				если Итоги тогда
					Флаг = Истина;
					для каждого строка из СтрукРЕквизитыТабЧасть цикл                                     
						ИмяРеквизитаТабЧасти = Строка.Ключ;
						Если Макет.Области.Найти(ИмяРеквизитаТабЧасти) = неопределено тогда продолжить; конецесли;
						ОбластьИтоги = Макет.ПолучитьОбласть("Итоги|"+ИмяРеквизитаТабЧасти);
						ОбластьИтоги.Параметры.Заполнить(ВыборкаОбщиеИтогиТабЧасть);
						если Флаг тогда
							ТабДок.Вывести(ОбластьИтоги);		
						Иначе
							ТабДок.Присоединить(ОбластьИтоги);
						Конецесли;
						Флаг = ЛожЬ;
					конеццикла;
				Конецесли;
			конеццикла;
		КонецЕсли;
		Если   ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная") тогда
		Область = Макет.ПолучитьОбласть("Подвал");
		ТабДок.Вывести(Область);
		КонецЕсли;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 
		НомерСтрокиНачало, ОбъектыПечати,Док.Ссылка);
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы+1;
	Конеццикла;
	Возврат ТабДок;
КонецФункции

ФУнкция ПроверкаНаСебестоимость(ИмяПоля) Экспорт
	флаг = Истина;
	Если ИмяПоля = "Цена" или ИмяПоля = "СуммаНДС" или ИмяПоля = "Сумма" или ИмяПоля="Всего" или ИмяПоля="СуммаСНДС" или ИмяПОля = "СтавкаНДС" тогда
		если НЕ(РольДоступна("ПолныеПрава") или РольДоступна("ПросмотрСебестоимости")) тогда
			флаг = Ложь;
		конецесли;
	Конецесли;
	возврат флаг;
конецфункции

//Печать ТОРГ-12 из документов вида Расходная накладная, Приходная накадная и Возвратная накладная с видом возврата "поставщику".
Функция ПечатьТОРГ12Общая(МассивОбъектов,ОбъектыПечати,ИмяТабЧасти,СтрукРеквизитыШапки,СтрукРеквизитыТабЧасть) экспорт
	ТабДок = новый ТабличныйДокумент;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу = 0;
	ТабДок.ПолеСлева = 0;
	ТабДок.ПолеСправа = 0;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ТОРГ12");
	НомерСтрокиНачало = 0;
	для каждого док из массивобъектов цикл
		Объект = Док.ПолучитьОбъект().Метаданные().Имя;
		ЗапросШапка = новый Запрос;
		Текст = "ВЫбрать ";
		
		//Котлячкова 29,03,13 гораздо удобнее если в ключе СтрукРеквизитыШапки будет элемент элемент шапки а в значении его представление
		
		для каждого параметр из СтрукРеквизитыШапки цикл
			
			Текст = Текст + "Документобъект."+Параметр.Значение +" как "+Параметр.Ключ+",";
		конеццикла;
		Текст = Сред(Текст,0,СТрДлина(Текст)-1);
		Текст = Текст + "
		|из Документ."+Объект+" как ДокументОбъект где ДокументОбъект.ссылка = &ТекущийДокумент";
		ЗапросШапка.Текст = Текст;
		ЗапросШапка.установитьПараметр("ТекущийДокумент",Док.Ссылка);
		Результат = ЗапросШапка.выполнить();
		Выборка = Результат.выбрать();
		Выборка.Следующий();
		ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_"+Док.Метаданные().Имя+"_ТОРГ12";
		Область = Макет.ПолучитьОбласть("Шапка");
		
		//тут тоже исправим
		для каждого Параметр из СтрукРеквизитыШапки цикл
			Если Макет.Области.Найти(Параметр.Ключ)<>Неопределено тогда
				Если Макет.Области.Найти(Параметр.Значение)<>Неопределено тогда
					ЗначениеПараметра = выборка[Параметр.Значение];
					Область.Параметры[Параметр.Значение]=ЗначениеПараметра;
				конецесли;	
			конецесли;
		конеццикла;
		
		//*Зернятко А.В.@06.11.2013 - //RSS-341. Фактический адрес грузоотправителя = Адрес СЕ
		//Грузоотправитель = ?(ЗначениеЗаполнено(Выборка.Грузоотправитель),Выборка.Грузоотправитель, ?(ЗначениеЗаполнено(Выборка.СтруктурнаяЕдиница),Выборка.СтруктурнаяЕдиница,Выборка.Поставщик));
		///Зернятко А.В.@ - конец блока
		//ШиловМВ 24.04.14
		Грузоотправитель = ?(ЗначениеЗаполнено(Выборка.Грузоотправитель),Выборка.Грузоотправитель, ?(ЗначениеЗаполнено(Выборка.Поставщик),Выборка.Поставщик,Выборка.СтруктурнаяЕдиница));
		//ШиловМВ
		Грузополучатель  = ?(ЗначениеЗаполнено(Выборка.Грузополучатель),Выборка.Грузополучатель,Выборка.Покупатель);
		
		СведенияОГрузполучателе = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Грузополучатель,Док.Ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница);
		Если ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") тогда
			ФирмаГрузополучатель = Грузополучатель.Организация;
			СведенияОФирмеГрузополучателе = ОбработкаПечатиСервер.СведенияОЮрФизЛице(ФирмаГрузополучатель,Док.Ссылка.Дата,Грузополучатель);
			//bros- 
			ФактическийАдресГрузополучателя = обработкаПечатиСервер.ОписаниеОрганизации(СведенияОгрузполучателе,"ФактическийАдрес");
			ПредставлениеФирмыГрузополучателяЧасть1 = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОФирмеГрузополучателе,"ПолноеНаименование,ИНН,КПП,Свидетельство");
			ПредставлениеФирмыГрузополучателяЧасть2 = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОФирмеГрузополучателе,"Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			ПредставлениеГрузополучателя = ""+Грузополучатель+","+ ПредставлениеФирмыГрузополучателяЧасть1+?(ЗначениеЗаполнено(ПредставлениеФирмыГрузополучателяЧасть1) и ЗначениеЗаполнено(ФактическийАдресГрузополучателя),",","")+ФактическийАдресГрузополучателя+?(((ЗначениеЗаполнено(ПредставлениеФирмыГрузополучателяЧасть1) или ЗначениеЗаполнено(ФактическийАдресГрузополучателя)) или ЗначениеЗаполнено(ПредставлениеФирмыГрузополучателяЧасть2)),",","")+ПредставлениеФирмыГрузополучателяЧасть2;
		Иначе
			ПредставлениеГрузополучателя = обработкаПечатиСервер.ОписаниеОрганизации(СведенияОгрузполучателе,"ПолноеНаименование,ИНН,КПП,Свидетельство,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		Если ТипЗнч(Грузоотправитель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") тогда
			ФирмаГрузоотправитель = Грузоотправитель.Организация;
			СведенияОФирмеГрузоотправителе = ОбработкаПечатиСервер.СведенияОЮрФизЛице(ФирмаГрузоотправитель,Док.Ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница);
			СведенияОГрузоотправителе = обработкаПечатиСервер.СведенияОЮрФизЛице(Грузоотправитель,Док.Дата,Грузоотправитель);
			//bros- 
			ФактическийАдресГрузоотправителя = обработкаПечатиСервер.ОписаниеОрганизации(СведенияОГрузоотправителе,"ФактическийАдрес");
			///Зернятко А.В.@ - конец блока
			ПредставлениеФирмыГрузоотправителяЧасть1 = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОФирмеГрузоотправителе,"ПолноеНаименование,ИНН,КПП,Свидетельство");
			ПредставлениеФирмыГрузоотправителяЧасть2 = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОФирмеГрузоотправителе,"Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			ПредставлениеГрузоотправителя = ПредставлениеФирмыГрузоотправителяЧасть1+?(ЗначениеЗаполнено(ПредставлениеФирмыГрузоотправителяЧасть1) и ЗначениеЗаполнено(ФактическийАдресГрузоотправителя),",","")+ФактическийАдресГрузоотправителя+?(((ЗначениеЗаполнено(ПредставлениеФирмыГрузоотправителяЧасть1) или ЗначениеЗаполнено(ФактическийАдресГрузоотправителя)) или ЗначениеЗаполнено(ПредставлениеФирмыГрузоотправителяЧасть2)),",","")+ПредставлениеФирмыГрузоотправителяЧасть2;
		Иначе
			СведенияОГрузоотправителе = обработкаПечатиСервер.СведенияОЮрФизЛице(Грузоотправитель,Док.ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница);
			ПредставлениеГрузоотправителя = обработкаПечатиСервер.ОписаниеОрганизации(СведенияОГрузоотправителе,"ПолноеНаименование,ИНН,КПП,Свидетельство,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		Если ТипЗнч(Выборка.Поставщик) = Тип("СправочникСсылка.СтруктурныеЕдиницы") тогда
			ФирмаПоставщик = Выборка.Поставщик.Организация;
			СведенияОФирмеПоставщике = ОбработкаПечатиСервер.СведенияОЮрФизЛице(ФирмаПоставщик,Док.Ссылка.Дата,Выборка.Поставщик);
			//bros-
			ФактическийАдресПоставщика = обработкаПечатиСервер.ОписаниеОрганизации(СведенияОФирмеПоставщике,"ЮридическийАдрес");
			ПредставлениеФирмыПоставщикаЧасть1 = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОФирмеПоставщике,"ПолноеНаименование,ИНН,КПП,Свидетельство");
			ПредставлениеФирмыПоставщикаЧасть2 = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОФирмеПоставщике,"Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			ПредставлениеПоставщика = ПредставлениеФирмыПоставщикаЧасть1+?(ЗначениеЗаполнено(ПредставлениеФирмыПоставщикаЧасть1) и ЗначениеЗаполнено(ФактическийАдресПоставщика),",","")+ФактическийАдресПоставщика+?(((ЗначениеЗаполнено(ПредставлениеФирмыПоставщикаЧасть1) или ЗначениеЗаполнено(ФактическийАдресПоставщика)) или ЗначениеЗаполнено(ПредставлениеФирмыПоставщикаЧасть2)),",","")+ПредставлениеФирмыПоставщикаЧасть2;
		Иначе
			
			СведенияОПоставщике = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Выборка.Поставщик,Док.Ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница);
			ПредставлениеПоставщика = обработкаПечатиСервер.ОписаниеОрганизации(СведенияОПоставщике,"ПолноеНаименование,ИНН,КПП,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		Если ТипЗнч(Выборка.Покупатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") тогда
			Плательщик = Выборка.Покупатель.Организация;
			СведенияОПлательщике = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Плательщик,Док.Ссылка.Дата,Выборка.Покупатель);
			//bros-
			ПредставлениеПлательщика = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПлательщике,"ПолноеНаименование,ИНН,КПП,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		Иначе
			СведенияОПлательщике = обработкаПечатиСервер.СведенияОЮрФизЛице(ВЫборка.Покупатель,Док.Ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница);
			ПредставлениеПлательщика = ОбработкаПечатиСервер.ОписаниеОрганизации(СведенияОПлательщике,"ПолноеНаименование,ИНН,КПП,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;        
		Область.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
		//{{ШиловМВ 30.12.14 №000138544
		Область.Параметры.ПредставлениеОрганизации = СтрЗаменить(ПредставлениеГрузоотправителя,", КПП 0        ","");
		//}}ШиловМВ 30.12.14 №000138544
		//{{ШиловМВ 29.12.14 №000138544
		Если ТипЗнч(Док)=Тип("ДокументСсылка.РасходнаяНакладная") тогда
			//dps+
			//{{ШиловМВ 12.01.15 №000138544
			Область.Параметры.ОрганизацияПоОКПО = ?(ЗначениеЗаполнено(Док.Ссылка.Грузоотправитель), Док.Ссылка.Грузоотправитель.КодПоОКПО, Док.Ссылка.Фирма.КодПоОКПО);
			Если ЗначениеЗаполнено(Док.Ссылка.Грузополучатель) Тогда 
				Область.Параметры.ГрузополучательПоОКПО = ?(ТипЗнч(Док.Ссылка.Грузополучатель) = Тип("СправочникСсылка.Контрагенты"),Док.Ссылка.Грузополучатель.КодПоОКПО,"");
			Иначе 
				Область.Параметры.ГрузополучательПоОКПО = ?(ТипЗнч(Док.Ссылка.Контрагент) = Тип("СправочникСсылка.Контрагенты"),Док.Ссылка.Контрагент.КодПоОКПО,"");
			КонецЕсли;
			Область.Параметры.ПоставщикПоОКПО = Док.Ссылка.Фирма.КодПоОКПО;
			Область.Параметры.ПлательщикПоОКПО = ?(ТипЗнч(Док.Ссылка.Контрагент) = Тип("СправочникСсылка.Контрагенты"),Док.Ссылка.Контрагент.КодПоОКПО,"");
			//}}ШиловМВ 12.01.15 №000138544
			//dps-
			Область.Параметры.ТранспортнаяНакладнаяНомер = Док.Ссылка.Номер;
			Область.Параметры.ТранспортнаяНакладнаяДата = Док.Ссылка.Дата;
		КонецЕсли;
		//}}ШиловМВ 29.12.14 №000138544
		Если ТипЗнч(Док)<>Тип("ДокументСсылка.ПриходнаяНакладная") тогда
			//ШиловМВ 24.04.14
			//Область.параметры.представлениеСтруктурнойЕдиницы = Выборка.СтруктурнаяЕДиница;
			//Область.параметры.представлениеСтруктурнойЕдиницы = Выборка.Поставщик;
			//dps+
			Область.параметры.представлениеСтруктурнойЕдиницы = УправлениеКонтактнойИнформациейСервер.ПолучитьКонтактнуюИнформацияОбъекта(ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница,Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
			//dps-
			//ШиловМВ
		КонецЕсли;
		
		//Основание
		Если (СтрукРеквизитыШапки.Свойство("ДокОснование") или СтрукРеквизитыШапки.Свойство("ИсправляемыйДокумент")) и ЗначениеЗаполнено(Выборка.ДокОснование) тогда
			Область.Параметры.Основание = ""+Выборка.ДокОснование.ПолучитьОбъект().Метаданные().Синоним+" №"+Выборка.ДокОснование.Номер+" от "+Формат(Выборка.ДокОснование.Дата,"ДФ=dd.MM.yyyy");
			Если ТипЗнч(Док)<>Тип("ДокументСсылка.ЗаказВнешний") тогда
				//ШиловМВ 15.04.13
				Если ТипЗнч(Док[СтрукРеквизитыШапки.ДокОснование]) = Тип("ДокументСсылка.ПриходнаяНакладная") и ЗначениеЗаполнено(Док[СтрукРеквизитыШапки.ДокОснование]) тогда
					//++Минин
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("Возврат",Док.ПолучитьОбъект().Метаданные()) И док.возврат Тогда 
						Область.Параметры.Основание = Док.Основание;
					Иначе
						//--Минин
						Область.Параметры.Основание = "Приходная накладная №"+Док[СтрукРеквизитыШапки.ДокОснование].Номер+" от "+Формат(Док[СтрукРеквизитыШапки.ДокОснование].Дата,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				//ШиловМВ
			КонецЕсли;
		КонецЕсли;
		Область.Параметры.ПредставлениеПлательщика = ПредставлениеПлательщика;
		//{{ШиловМВ 30.12.14 №000138544
		Область.Параметры.представлениепоставщика = СтрЗаменить(представлениеПоставщика,", КПП 0        ","");
		//}}ШиловМВ 30.12.14 №000138544
		Область.параметры.номер = Док.Ссылка.Номер;
		область.параметры.Дата = Док.Ссылка.Дата;
		//++Минин 0000143963 2015-10-30
		Область.Параметры.Черновик = ?(док.Проведен,"","ЧЕРНОВИК");
		//--Минин 0000143963 2015-10-30
		ТабДок.Вывести(Область);
		ЗапросТабЧасть = новый Запрос;
		Текст = "
		|Выбрать ";                         
		для каждого Строка из СтрукРеквизитыТабЧасть цикл
			Флаг = Истина;
			Если ТипЗнч(Док) = Тип("ДокументСсылка.ПриходнаяНакладная") тогда
				Если Не ПроверкаНаСебестоимость(Строка.Ключ) тогда 
					флаг = Ложь;
				конецесли;
			конецесли;
			Если Флаг тогда
				Текст= Текст + "ДокументОбъект."+Строка.Ключ+" как "+Строка.Ключ+","
			Конецесли;
		конеццикла;
		Текст = Сред(Текст,0,СТрДлина(Текст)-1);
		Текст = Текст + "
		|из Документ."+Объект+"."+ИмяТабЧасти+" как ДокументОбъект где ДокументОбъект.ссылка = &ТекущийДокумент ";
		Текст = Сред(Текст,0,СТрДлина(Текст)-1);
		ЗапросТабЧасть.Текст = Текст;
		ЗапросТабЧасть.УстановитьПараметр("ТекущийДокумент",Док.Ссылка);
		Результат = ЗапросТабЧасть.Выполнить();
		Область = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ТабДок.Вывести(Область);
		ВыборкаТабЧасть = Результат.Выбрать();
		СтрокНаСтранице = 20;
		СтрокШапки      = 10;
		СтрокПодвала    = 9;
		НомерСтраницы   = 1;
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		//ТабДок.Вывести(ЗаголовокТаблицы);
		КоличествоСтрок = ВыборкаТабЧасть.Количество();
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		ИтогПоСтраницеКоличество = 0;
		ИтогПоСтраницеСуммАБезНДС = 0;
		ИтогПоСтраницеСУммаНДС = 0;
		ИтогПостраницеСуммаСНДС = 0;
		ИтогКоличество = 0;
		ИтогСуммаБезНДС=0;
		ИтогСуммаНДС = 0;
		ИтогСуммаСНДС = 0;
		КоличествоЛистов = 1;
		Ном = 0;
		Пока ВыборкаТабЧасть.Следующий() цикл
			Если Не ЗначениеЗаполнено(ВыборкаТабЧасть.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			Ном           = Ном + 1;
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогПоСтраницеКоличество;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммаБезНДСПоСтранице      = ИтогПоСтраницеСуммаБезНДС;
				ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогПоСтраницеСуммаНДС;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммаСНДСПоСтранице  = ИТогПоСтраницеСуммаСНДС;
				ТабДок.Вывести(ОбластьИтоговПоСтранице);
				ИтогПоСтраницеКоличество = 0;
				ИтогПоСтраницеСуммаБезНДС = 0;
				ИтогПоСтраницеСуммаНДС = 0;
				ИтогПоСтраницеСуммаСНДС = 0;
				НомерСтраницы = НомерСтраницы + 1;
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДок.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(ВыборкаТабЧасть);
			Область.параметры.НоменклатураКод = ВыборкаТабЧАсть.Номенклатура.Код;
			Если ЗначениеЗАполнено(ВыборкаТабЧасть.ЕДиницаИзмерения) тогда
				Область.Параметры.ЕдиницаИзмерения = ВыборкаТабЧасть.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.ПолноеНаименование;
				Область.Параметры.ЕдиницаИзмеренияКод = ВыборкаТабЧасть.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
			Конецесли;
			Количество = ВыборкаТабЧасть.Количество;
			Если флаг тогда
				СуммаНДС = ВыборкаТабЧасть.СУммаНДС;
				СуммаСНДС =ВыборкаТабЧасть.Сумма;
				СуммаБезНДС = СуммаСНДС - СуммаНДС;
				Если Количество = 0 или Количество = 1 тогда
					Цена = СуммаБезНДС;
				Иначе
					Цена = СуммаБезНДС/Количество;
				КонецЕсли;
				Область.Параметры.Цена = Цена;
				Область.Параметры.СуммаБезНДС = СуммаБезНДС;
				Область.параметры.суммаНДС = СуммаНДС;
				оБласть.параметры.СуммаСНДС = СуммаСНДС;
			Конецесли;
			ИтогПоСтраницеКоличество = ИтогПоСтраницеКоличество + Количество;
			ИтогКоличество = ИтогКоличество + Количество;
			Если Флаг тогда
				ИтогПоСтраницеСуммаНДС = ИтогПоСтраницеСуммаНДС + СуммаНДС;
				ИтогСуммаНДС = ИтогСуммаНДС + СуммаНДС;
				ИтогПоСтраницеСуммаБЕзНДС = ИтогПоСтраницеСуммаБезНДС + СУммаБезНДС;
				ИтогСуммаБезНДС = ИтогСуммаБезНДС + СуммаБЕзНДС;
				ИтогПоСТраницеСуммаСНДС = ИТогПоСтраницеСуммаСНДС + СуммаСНДС;
				ИтогСуммаСНДС = ИтогСуммаСНДС + суммаСНДС;
			Конецесли;
			ТабДок.Вывести(Область); 
		конеццикла;
		ОбластьИтогПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтогПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогПоСтраницеКоличество;
		Если флаг тогда
			ОбластьИтогПоСтранице.Параметры.ИтогСуммаСНДСПоСТранице = ИтогПоСТраницеСуммаСНДС;
			ОбластьИтогПоСтранице.Параметры.ИтогСуммаБезНДСПоСТранице = ИтогПоСтраницеСуммаБезНДС;
			ОбластьИтогПоСтранице.Параметры.ИтогНДСПоСтранице = ИтогПоСтраницеСуммаНДС;
		Конецесли;
		ТабДок.Вывести(ОбластьИтогПоСтранице);
		Область = Макет.ПолучитьОбласть("Всего");
		Область.Параметры.ИтогКоличество = ИтогКоличество;
		Если флаг тогда
			Область.Параметры.ИтогНДС = ИтогСуммаНДС;
			Область.Параметры.ИтогСуммаБезНДС = ИтогСуммаБезНДС;
			Область.Параметры.ИтогСуммаСНДС = ИтогСуммаСНДС;
		Конецесли;
		ТабДок.Вывести(Область);
		Область = Макет.ПолучитьОбласть("Подвал");
		КоличествоСтрок = ВыборкаТабЧасть.Количество();
		//Область.параметры.количествоЛистов = ЧислоПрописью(КоличествоЛистов,,",,,,,,,,0");
		Область.Параметры.КоличествоСтрокПрописью = ЧислоПрописью(КоличествоСтрок,,",,,,,,,,0");
		Если флаг тогда
			Область.Параметры.СуммаПрописью = ЧислоПрописью(ИтогСуммаСНДС,,"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
		Конецесли;
		
		//{{ШиловМВ 29.12.14 №000138544
		Если ТипЗнч(Док)=Тип("ДокументСсылка.РасходнаяНакладная") тогда
			//dps+ 14.01.15
			Руководители = ОтветственныеЛицаОрганизационнойЕдиницы(док.Фирма, док.Дата, док.СтруктурнаяЕдиница);
			Область.Параметры.ДолжностьКладовщика = "Старший продавец";
			Область.Параметры.ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
			Область.Параметры.ФИООтпускРазрешил = Руководители.ФИОРуководителя;//СтрЗаменить(Док.Ссылка.Фирма.Наименование,"ИП","");
			Область.Параметры.ФИОГлавБухгалтера = Руководители.ФИОГлавногоБухгалтера;//СтрЗаменить(Док.Ссылка.Фирма.Наименование,"ИП","");
			//dps-
			//Область.Параметры.ФИОКладовщика = Результат.ФизЛицо;
		КонецЕсли;
		//}}ШиловМВ 29.12.14 №000138544
		
		ТабДок.Вывести(Область);
		//ТабДок.ПолеСверху = 0;
		//ТабДок.ПолеСнизу = 0;
		//ТабДок.ПолеСлева = 10;
		//ТабДок.ПолеСправа = 20;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 
		НомерСтрокиНачало, ОбъектыПечати,Док.Ссылка);
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы+1;
	конеццикла;
	Возврат ТабДок;
конецФункции

Функция ПечатьТОРГ13Общая(МассивОбъектов,ОбъектыПечати,ИмяТабЧАсти,СтрукреквизитыШапки,СтрукРеквизитыТабЧасть) экспорт
	ТабДок = новый ТабличныйДокумент;
	//Макет = ПолучитьОбщийМакет("ТОРГ13");
	Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ТОРГ13");
	НомерСтрокиНачало = 0;
	для каждого док из массивобъектов цикл
		Объект = Док.Ссылка.ПолучитьОбъект().Метаданные().Имя;
		ЗапросШапка = новый Запрос;
		Текст = "ВЫбрать ";
		для каждого параметр из СтрукРеквизитыШапки цикл
			Текст = Текст + "Документобъект."+Параметр.Значение +" как "+Параметр.Ключ+",";
		конеццикла;
		Текст = Сред(Текст,0,СТрДлина(Текст)-1);
		Текст = Текст + "
		|из Документ."+Объект+" как ДокументОбъект где ДокументОбъект.ссылка = &ТекущийДокумент";
		ЗапросШапка.Текст = Текст;
		ЗапросШапка.установитьПараметр("ТекущийДокумент",Док.Ссылка);
		Результат = ЗапросШапка.выполнить();
		Выборка = Результат.выбрать();
		Выборка.Следующий();
		ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Перемещение_ТОРГ13";
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ВЫборка);
		ОбластьМакета.параметры.Дата = Док.Ссылка.Дата;
		ОбластьМакета.параметры.Номер = Док.ССылка.Номер;
		ОбластьМакета.параметры.ВидОперации = "расход";
		Если ЗначениеЗаполнено(ВЫборка.Фирма) Тогда
			СведенияОбОрганизации = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Выборка.Фирма, Док.Ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница);
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбработкаПечатиСервер.ОписаниеОрганизации(ОбработкаПечатиСервер.СведенияОЮрФизЛице(Выборка.Фирма, Док.Ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница));
			ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		КонецЕсли;
		ОтправительПодразделение = Выборка.Отправитель;
		ПолучательПодразделение = Выборка.получатель;
		//Если ТипЗнч(ОтправительПодразделение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") тогда
		//	ОтправительПодразделение = ОбработкаПечатиСервер.ОписаниеОрганизации(ОбработкаПечатиСервер.СведенияОЮрФизЛице(ОтправительПодразделение.Организация, Док.Ссылка.Дата));
		//КонецЕсли;
		//Если ТипЗнч(ПолучательПодразделение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") тогда
		//	ПолучательПодразделение = ОбработкаПечатиСервер.ОписаниеОрганизации(ОбработкаПечатиСервер.СведенияОЮрФизЛице(ПолучательПодразделение.Организация, Док.Ссылка.Дата));
		//КонецЕсли;
		Если ЗначениеЗаполнено(ОтправительПодразделение) тогда
			ОбластьМакета.Параметры.ОтправительПодразделение =?(Не ЗначениеЗаполнено(ОтправительПодразделение),"",?(ТипЗнч(ОтправительПодразделение) = Тип("СправочникСсылка.Склады"),""+ОтправительПодразделение.Владелец+" ("+ОтправительПодразделение+")",ОтправительПодразделение));
		Конецесли;
		Если ЗначениеЗаполнено(ПолучательПодразделение) тогда
			ОбластьМакета.Параметры.ПолучательПОдразделение =?(Не ЗначениеЗАполнено(ПолучательПодразделение),"",?(ТипЗнч(ПолучательПодразделение) = Тип("СправочникСсылка.Склады"),""+ПолучательПодразделение.Владелец+" ("+ПолучательПодразделение+")",ПолучательПодразделение));
		Конецесли;
		ТабДок.Вывести(ОбластьМакета);
		
		ЗапросТабЧасть = новый Запрос;
		Текст = "ВЫБРАТЬ
		|	Движения.КоличествоМест,
		|	Движения.Количество,
		|	Движения.ТоварКод,
		|	Движения.Номенклатура,
		|	Движения.Сумма,
		|	Движения.Цена,
		|	Движения.ТоварНаименование
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ОстаткиНоменклатуры.Количество) КАК КоличествоМест,
		|		СУММА(ОстаткиНоменклатуры.Количество) КАК Количество,
		|		ОстаткиНоменклатуры.Номенклатура.Код КАК ТоварКод,
		|		ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
		|		СУММА(ОстаткиНоменклатуры.Сумма-ОстаткиНоменклатуры.СуммаНДС) КАК Сумма,
		|		СУММА(ВЫБОР
		|				КОГДА ОстаткиНоменклатуры.Количество = 0
		|					ТОГДА (ОстаткиНоменклатуры.Сумма-ОстаткиНоменклатуры.СуммаНДС)
		|				ИНАЧЕ (ОстаткиНоменклатуры.Сумма-ОстаткиНоменклатуры.СуммаНДС) / ОстаткиНоменклатуры.Количество
		|			КОНЕЦ) КАК Цена,
		|		ОстаткиНоменклатуры.Номенклатура.Наименование КАК ТоварНаименование
		|	ИЗ
		|		РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
		|	ГДЕ
		|		ОстаткиНоменклатуры.Регистратор = &Ссылка  и (ОстаткиНоменклатуры.КодОперации = Значение(Перечисление.КодыОпераций.ПеремещениеРасход) или ОстаткиНоменклатуры.КодОперации = Значение(Перечисление.КодыОпераций.ПерепродажаПродажаОпт))
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиНоменклатуры.Номенклатура,
		|		ОстаткиНоменклатуры.Номенклатура.Код,
		|		ОстаткиНоменклатуры.Номенклатура.Наименование) КАК Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ."+Объект+"."+ИмяТабЧасти+" как ДокументОбъект 
		|		ПО Движения.Номенклатура = ДокументОбъект.Номенклатура
		|		И  ДокументОбъект.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОбъект.НомерСтроки";
		ЗапросТабЧасть.Текст = Текст;
		ЗапросТабЧасть.УстановитьПараметр("Ссылка",Док.Ссылка);
		Результат = ЗапросТабЧасть.Выполнить();
		ВыборкаТабЧасть = Результат.Выбрать();
		СтрокНаСтранице = 23;
		СтрокШапки      = 10;
		СтрокПодвала    = 9;
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДок.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ВыборкаТабЧАсть.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// инициализация итогов по странице
		ИтогКоличествоМестПоСтранице = 0;
		ИтогМассаБруттоПоСтранице    = 0;
		ИтогМассыНеттоПоСтранице     = 0;
		ИтогСуммыПоСтранице          = 0;
		
		// инициализация итогов по документу
		ИтогоКоличество  = 0;
		ИтогоМассаБрутто = 0;
		ИтогоМассаНетто  = 0;
		ИтогоСумма       = 0;
		
		Ном = 0;
		
		// Выводим многострочную часть докмента
		
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Пока ВыборкаТабЧасть.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВЫборкаТабЧасть.Номенклатура) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" одной из строк не заполнено значение номенклатуры - строка при печати пропущена.");
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
				
				ТабДок.Вывести(ОбластьИтоговПоСтранице);
				
				// инициализация итогов по странице
				ИтогКоличествоМестПоСтранице = 0;
				ИтогМассаБруттоПоСтранице    = 0;
				ИтогМассаНеттоПоСтранице     = 0;
				ИтогСуммыПоСтранице          = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДок.вывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДок.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ЕдиницаИзмерения = ВыборкаТабЧасть.Номенклатура.БазоваяЕдиницаИзмерения;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаТабЧАсть);
			Сумма = ВыборкаТАбЧАсть.Сумма;
			
			Если ПроверкаНАСебестоимость("Сумма") тогда
				ОбластьМакета.Параметры.Сумма = Сумма;
			Конецесли;
			ОбластьМакета.Параметры.ТоварНаименование = ВыборкаТабЧАсть.Номенклатура;
			ОбластьМакета.Параметры.ЕдиницаИзмеренияНаименование = ЕдиницаИзмерения.ПолноеНаименование;
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКодПоОКЕИ    = ЕдиницаИзмерения.Код;
			Цена = ?(ВыборкаТабЧАсть.количество = 1 или ВыборкаТабЧАсть.Количество = 0,Сумма,сумма/выборкаТабЧасть.количество);
			Если ПроверкаНаСебестоимость("Цена") тогда
				ОбластьМакета.Параметры.цена = Цена;
			конецесли;
			ТабДок.Вывести(ОбластьМакета);
			
			// Обновим итоги по странице
			ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаТабЧасть.КоличествоМест;
			ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
			ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
			ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;
			
			// Обновим итогов по документу
			ИтогоКоличество  = ИтогоКоличество  + ВыборкаТабЧАсть.Количество;
			ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
			ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
			ИтогоСумма       = ИтогоСумма       + Сумма;
		КонецЦикла;
		
		ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
		
		ТабДок.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
		ОбластьМакета.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
		ОбластьМакета.Параметры.ИтогоСумма          = ИтогоСумма;
		
		ТабДок.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Выборка);
		ОбластьМакета.Параметры.ИтогоСуммаПрописью =ЧислоПрописью(ИтогоСумма,,"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
		ТабДок.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабДок.ПолеСверху = 0;
		ТабДок.ПолеСлева  = 0;
		ТабДок.ПолеСнизу  = 0;
		ТабДок.ПолеСправа = 0;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 
		НомерСтрокиНачало, ОбъектыПечати,Док.Ссылка);
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы+1;
	конеццикла;
	
	Возврат ТабДок;
КонецФУнкции

Функция ПечатьОП3Общая(МассивОбъектов,ОбъектыПечати,ИмяТабЧАсти,СтрукреквизитыШапки,СтрукРеквизитыТабЧасть) экспорт
	ТабДок = новый ТабличныйДокумент;
	//Макет = ПолучитьОбщийМакет("ОП3");
	Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ОП3");
	НомерСтрокиНачало = 0;
	для каждого док из массивобъектов цикл
		Объект = Док.Ссылка.ПолучитьОбъект().Метаданные().Имя;
		ЗапросШапка = новый Запрос;
		Текст = "ВЫбрать ";
		для каждого параметр из СтрукРеквизитыШапки цикл
			Текст = Текст + "Документобъект."+Параметр.Значение +" как "+Параметр.Ключ+",";
		конеццикла;
		Текст = Сред(Текст,0,СТрДлина(Текст)-1);
		Текст = Текст + "
		|из Документ."+Объект+" как ДокументОбъект где ДокументОбъект.ссылка = &ТекущийДокумент";
		ЗапросШапка.Текст = Текст;
		ЗапросШапка.установитьПараметр("ТекущийДокумент",Док.Ссылка);
		Результат = ЗапросШапка.выполнить();
		Выборка = Результат.выбрать();
		Выборка.Следующий();
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Перемещение_ОП3";
		ОбластьМакета.Параметры.Заполнить(ВЫборка);
		ОбластьМакета.параметры.Дата = Док.Дата;
		ОбластьМакета.параметры.Номер = Док.Номер;
		Если ЗначениеЗаполнено(ВЫборка.Фирма) Тогда
			СведенияОбОрганизации = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Выборка.Фирма, Док.Ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница);
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбработкаПечатиСервер.ОписаниеОрганизации(ОбработкаПечатиСервер.СведенияОЮрФизЛице(Выборка.Фирма, Док.Ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница));
			ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		КонецЕсли;
		ОтправительПодразделение = Выборка.Отправитель;
		ПолучательПодразделение = Выборка.получатель;
		Если ЗначениеЗаполнено(ОтправительПодразделение) тогда
			ОбластьМакета.Параметры.ОтправительПодразделение =?(Не ЗначениеЗаполнено(ОтправительПодразделение),"",""+ОтправительПодразделение.Владелец+" ("+ОтправительПодразделение+")");
		Конецесли;
		Если ЗначениеЗаполнено(ПолучательПодразделение) тогда
			ОбластьМакета.Параметры.ПолучательПОдразделение =?(Не ЗначениеЗАполнено(ПолучательПодразделение),"",""+ПолучательПодразделение.Владелец+" ("+ПолучательПодразделение+")");
		Конецесли;
		//ОбластьМакета.Параметры.Ответственный = Док.Автор;
		ТабДок.Вывести(ОбластьМакета);
		
		ЗапросТабЧасть = новый Запрос;
		Текст = "ВЫБРАТЬ
		|	ДокументОбъект.Номенклатура,
		|	ДокументОбъект.ЕдиницаИзмерения,
		|	ДокументОбъект.Количество,
		|	ДокументОбъект.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ."+Объект+"."+ИмяТабЧасти+" КАК ДокументОбъект
		|ГДЕ
		|	ДокументОбъект.Ссылка = &Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		ЗапросТабЧасть.Текст = Текст;
		ЗапросТабЧасть.УстановитьПараметр("Ссылка",Док.Ссылка);
		Результат = ЗапросТабЧасть.Выполнить();
		ВыборкаТабЧасть = Результат.Выбрать();
		СтрокНаСтранице = 65;
		СтрокШапки      = 22;
		СтрокМалойШапки = 1;
		СтрокПодвала    = 6;
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДок.Вывести(ЗаголовокТаблицы);
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ТабДок.Вывести(ОбластьШапка);
		
		КоличествоСтрок = ВыборкаТабЧАсть.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокМалойШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		
		Ном = 0;
		
		// Выводим многострочную часть докмента
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьНомераКолонок = Макет.ПолучитьОбласть("НомераКолонок");
		Пока ВыборкаТабЧасть.Следующий() Цикл
			
			Ном = Ном + 1;
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДок.вывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДок.Вывести(ЗаголовокТаблицы);
				ТабДок.Вывести(ОбластьНомераКолонок);
			КонецЕсли;
			
			ЕдиницаИзмерения = ВыборкаТабЧасть.Номенклатура.БазоваяЕдиницаИзмерения;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаТабЧАсть);
			ОбластьМакета.Параметры.НоменклатураКод = ВыборкаТабЧасть.Номенклатура.Код;
			ОбластьМакета.Параметры.ЕдиницаИзмерения = ЕдиницаИзмерения.Наименование;
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = ЕдиницаИзмерения.Код;
			ТабДок.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ТабДок.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабДок.ПолеСверху = 0;
		ТабДок.ПолеСлева  = 0;
		ТабДок.ПолеСнизу  = 0;
		ТабДок.ПолеСправа = 0;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 
		НомерСтрокиНачало, ОбъектыПечати,Док.Ссылка);
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы+1;
	конеццикла;
	
	Возврат ТабДок;
КонецФУнкции


Функция ПечатьОП4Общая(МассивОбъектов,ОбъектыПечати,ИмяТабЧАсти,СтрукреквизитыШапки,СтрукРеквизитыТабЧасть) экспорт
	ТабДок = новый ТабличныйДокумент;
	//Макет = ПолучитьОбщийМакет("ОП4");
	Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ОП4");
	НомерСтрокиНачало = 0;
	для каждого док из массивобъектов цикл
		Объект = Док.Ссылка.ПолучитьОбъект().Метаданные().Имя;
		ЗапросШапка = новый Запрос;
		Текст = "ВЫбрать ";
		для каждого параметр из СтрукРеквизитыШапки цикл
			Текст = Текст + "Документобъект."+Параметр.Значение +" как "+Параметр.Ключ+",";
		конеццикла;
		Текст = Сред(Текст,0,СТрДлина(Текст)-1);
		Текст = Текст + "
		|из Документ."+Объект+" как ДокументОбъект где ДокументОбъект.ссылка = &ТекущийДокумент";
		ЗапросШапка.Текст = Текст;
		ЗапросШапка.установитьПараметр("ТекущийДокумент",Док.Ссылка);
		Результат = ЗапросШапка.выполнить();
		Выборка = Результат.выбрать();
		Выборка.Следующий();
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Перемещение_ОП4";
		ОбластьМакета.Параметры.Заполнить(ВЫборка);
		ОбластьМакета.параметры.Дата = Док.Дата;
		ОбластьМакета.параметры.Номер = Док.Номер;
		Если ЗначениеЗаполнено(ВЫборка.Фирма) Тогда
			СведенияОбОрганизации = ОбработкаПечатиСервер.СведенияОЮрФизЛице(Выборка.Фирма, Док.Ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница);
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбработкаПечатиСервер.ОписаниеОрганизации(ОбработкаПечатиСервер.СведенияОЮрФизЛице(Выборка.Фирма, Док.Ссылка.Дата,Док.Ссылка.СтруктурнаяЕдиница));
			ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		КонецЕсли;
		ОтправительПодразделение = Выборка.Отправитель;
		ПолучательПодразделение = Выборка.получатель;
		Если ЗначениеЗаполнено(ОтправительПодразделение) тогда
			ОбластьМакета.Параметры.ОтправительПодразделение =?(Не ЗначениеЗаполнено(ОтправительПодразделение),"",""+ОтправительПодразделение.Владелец+" ("+ОтправительПодразделение+")");
		Конецесли;
		Если ЗначениеЗаполнено(ПолучательПодразделение) тогда
			ОбластьМакета.Параметры.ПолучательПОдразделение =?(Не ЗначениеЗАполнено(ПолучательПодразделение),"",""+ПолучательПодразделение.Владелец+" ("+ПолучательПодразделение+")");
		Конецесли;
		//ОбластьМакета.Параметры.Ответственный = Док.Автор;
		ТабДок.Вывести(ОбластьМакета);
		
		ЗапросТабЧасть = новый Запрос;
		Текст = "ВЫБРАТЬ
		|	Движения.КоличествоЗатребовано,
		|	Движения.КоличествоОтпущено,
		|	1 КАК КоличествоВОдномМесте,
		|	Движения.КоличествоОтпущено КАК КоличествоВсего,
		|	Движения.НоменклатураКод,
		|	Движения.Номенклатура,
		|	Движения.Сумма КАК СебестоимостьСумма,
		|	Движения.Цена КАК СебестоимостьЦена,
		|	Движения.ТоварНаименование,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ЦенаПродажи,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * Движения.КоличествоОтпущено КАК СуммаПродажи,
		|	ДокументОбъект.НомерСтроки
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ОстаткиНоменклатуры.Количество) КАК КоличествоЗатребовано,
		|		СУММА(ОстаткиНоменклатуры.Количество) КАК КоличествоОтпущено,
		|		ОстаткиНоменклатуры.Номенклатура.Код КАК НоменклатураКод,
		|		ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
		|		СУММА(ОстаткиНоменклатуры.Сумма - ОстаткиНоменклатуры.СуммаНДС) КАК Сумма,
		|		СУММА(ВЫБОР
		|				КОГДА ОстаткиНоменклатуры.Количество = 0
		|					ТОГДА ОстаткиНоменклатуры.Сумма - ОстаткиНоменклатуры.СуммаНДС
		|				ИНАЧЕ (ОстаткиНоменклатуры.Сумма - ОстаткиНоменклатуры.СуммаНДС) / ОстаткиНоменклатуры.Количество
		|			КОНЕЦ) КАК Цена,
		|		ОстаткиНоменклатуры.Номенклатура.Наименование КАК ТоварНаименование
		|	ИЗ
		|		РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
		|	ГДЕ
		|		ОстаткиНоменклатуры.Регистратор = &Ссылка
		|		И (ОстаткиНоменклатуры.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПеремещениеРасход)
		|				ИЛИ ОстаткиНоменклатуры.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОпераций.ПерепродажаПродажаОпт))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиНоменклатуры.Номенклатура,
		|		ОстаткиНоменклатуры.Номенклатура.Код,
		|		ОстаткиНоменклатуры.Номенклатура.Наименование) КАК Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Перемещение.Состав КАК ДокументОбъект
		|		ПО Движения.Номенклатура = ДокументОбъект.Номенклатура
		|			И (ДокументОбъект.Ссылка = &Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|			ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|			ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|		ИЗ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Граница, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦеныНоменклатурыСрезПоследних
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|					МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.ID) КАК ID
		|				ИЗ
		|					РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Граница, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦеныНоменклатурыСрезПоследних
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|							МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
		|						ИЗ
		|							РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Граница, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЦеныНоменклатурыСрезПоследних
		|						ГДЕ
		|							ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
		|						
		|						СГРУППИРОВАТЬ ПО
		|							ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|							ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
		|						ПО ЦеныНоменклатурыСрезПоследних.Период = ВложенныйЗапрос.Период
		|							И ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
		|							И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
		|				ГДЕ
		|					ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|					ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) КАК ВложенныйЗапрос
		|				ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура
		|					И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
		|					И ЦеныНоменклатурыСрезПоследних.ID = ВложенныйЗапрос.ID
		|		ГДЕ
		|			ЦеныНоменклатурыСрезПоследних.АктивностьЗаписи) КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.Номенклатура = ДокументОбъект.Номенклатура)
		|			И (ЦеныНоменклатуры.ЕдиницаИзмерения = ДокументОбъект.ЕдиницаИзмерения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОбъект.НомерСтроки";
		
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ."+Объект+"."+ИмяТабЧасти+" как ДокументОбъект 
		ЗапросТабЧасть.Текст = Текст;
		ЗапросТабЧасть.УстановитьПараметр("Ссылка",Док.Ссылка);
		ЗапросТабЧасть.УстановитьПараметр("СтруктурнаяЕдиница",Док.СтруктурнаяЕдиница);
		ЗапросТабЧасть.УстановитьПараметр("Граница",Новый Граница(Док.Ссылка.МоментВремени(),ВидГраницы.Включая));
		Результат = ЗапросТабЧасть.Выполнить();
		ВыборкаТабЧасть = Результат.Выбрать();
		СтрокНаСтранице = 43;
		СтрокШапки      = 24;
		СтрокМалойШапки = 1;
		СтрокПодвала    = 7;
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		//ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		//ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		//ТабДок.Вывести(ЗаголовокТаблицы);
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ТабДок.Вывести(ОбластьШапка);
		
		КоличествоСтрок = ВыборкаТабЧАсть.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокМалойШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		
		Ном = 0;
		
		ВсегоКоличествоЗатребовано = 0;
		ВсегоКоличествоОтпущено = 0;
		ВсегоКоличествоВсего = 0;
		ВсегоСебестоимостьСумма = 0;
		ВсегоСуммаПродажи = 0;
		
		
		// Выводим многострочную часть докмента
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьНомераКолонок = Макет.ПолучитьОбласть("НомераКолонок");
		ОбластьОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");
		Пока ВыборкаТабЧасть.Следующий() Цикл
			
			Ном = Ном + 1;
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДок.вывестиГоризонтальныйРазделительСтраниц();
				//ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДок.Вывести(ОбластьОборотнаяСторона);
				ТабДок.Вывести(ОбластьНомераКолонок);
			КонецЕсли;
			
			ЕдиницаИзмерения = ВыборкаТабЧасть.Номенклатура.БазоваяЕдиницаИзмерения;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаТабЧАсть);
			ОбластьМакета.Параметры.НоменклатураКод = ВыборкаТабЧасть.Номенклатура.Код;
			ОбластьМакета.Параметры.ЕдиницаИзмерения = ЕдиницаИзмерения.Наименование;
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = ЕдиницаИзмерения.Код;
			//ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = ЕдиницаИзмерения..Код;
			ТабДок.Вывести(ОбластьМакета);
			ВсегоКоличествоЗатребовано = ВсегоКоличествоЗатребовано + ВыборкаТабЧасть.КоличествоЗатребовано;
			ВсегоКоличествоОтпущено = ВсегоКоличествоОтпущено + ВыборкаТабЧасть.КоличествоОтпущено;
			ВсегоКоличествоВсего = ВсегоКоличествоВсего + ВыборкаТабЧасть.КоличествоВсего;
			ВсегоСебестоимостьСумма = ВсегоСебестоимостьСумма + ВыборкаТабЧасть.СебестоимостьСумма;
			ВсегоСуммаПродажи = ВсегоСуммаПродажи + ВыборкаТабЧасть.СуммаПродажи;
		КонецЦикла;
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВсего");
		ОбластьМакета.Параметры.ВсегоКоличествоЗатребовано = ВсегоКоличествоЗатребовано;
		ОбластьМакета.Параметры.ВсегоКоличествоОтпущено = ВсегоКоличествоОтпущено;
		ОбластьМакета.Параметры.ВсегоКоличествоВсего = ВсегоКоличествоВсего;
		ОбластьМакета.Параметры.ВсегоСебестоимостьСумма = ВсегоСебестоимостьСумма;
		ОбластьМакета.Параметры.ВсегоСуммаПродажи = ВсегоСуммаПродажи;
		ТабДок.Вывести(ОбластьМакета);
		
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ТабДок.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабДок.ПолеСверху = 0;
		ТабДок.ПолеСлева  = 0;
		ТабДок.ПолеСнизу  = 0;
		ТабДок.ПолеСправа = 0;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 
		НомерСтрокиНачало, ОбъектыПечати,Док.Ссылка);
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы+1;
	конеццикла;
	
	Возврат ТабДок;
КонецФУнкции

Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт
	Возврат НазваниеДокумента + " № " + СокрЛП(ДокументОбъект.Номер)
	+ " от " + Формат(ДокументОбъект.Дата, "ДЛФ=DD");
КонецФункции // СформироватьЗаголовокДокумента()

ФУнкция ОбщаяПечатьОтчетаКомитентуОПродажах(МассивОбъектов,ОбъектыПечати,Получатель,Поставщик,ФИрма) экспорт
	ТабДокумент = Новый ТабличныйДокумент;
	НомерСтрокиНачало = 0;
	для каждого Док из МассивОбъектов цикл
		ЗапросШапка = Новый Запрос;
		ИмяДокумента = Док.Ссылка.Метаданные().Имя;
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Док.Ссылка);
		ЗапросШапка.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг."+Получатель+" КАК Получатель,
		|	РеализацияТоваровУслуг."+Поставщик+" КАК Поставщик,
		|	РеализацияТоваровУслуг."+Фирма+" как Фирма,
		|	РеализацияТоваровУслуг.Валюта
		|ИЗ
		|	Документ."+ИмяДокумента+" КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		//Макет       = ПолучитьОбщийМакет("ОтчетКомитентуОПродажах");
		Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ОтчетКомитентуОПродажах");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка =ОбработкаПечатиСервер.СформироватьЗаголовокДокумента(Шапка, "Отчет комитенту");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ОбработкаПечатиСервер.ОписаниеОрганизации(ОбработкаПечатиСервер.СведенияОЮрФизЛице(Шапка.Фирма, Док.Ссылка.Дата, "ПолноеНаименование,"));
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ОбработкаПечатиСервер.ОписаниеОрганизации(обработкаПечатиСервер.СведенияОЮрФизЛице(Док.Ссылка[Получатель], Док.Ссылка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(0) КАК КомиссионноеВознаграждение,
		|	СУММА(0) КАК СуммаНДСКомиссионногоВознаграждения,
		|	ОтчетРеализатораСостав.Номенклатура,
		|	СУММА(ОтчетРеализатораСостав.Количество) КАК Количество,
		|	ОтчетРеализатораСостав.ЕдиницаИзмерения,
		|	ОтчетРеализатораСостав.Цена,
		|	СУММА(ОтчетРеализатораСостав.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ОтчетРеализатора.Состав КАК ОтчетРеализатораСостав
		|ГДЕ
		|	ОтчетРеализатораСостав.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетРеализатораСостав.Номенклатура,
		|	ОтчетРеализатораСостав.ЕдиницаИзмерения,
		|	ОтчетРеализатораСостав.Цена
		|ИТОГИ
		|	СУММА(КомиссионноеВознаграждение),
		|	СУММА(СуммаНДСКомиссионногоВознаграждения),
		|	СУММА(Сумма)
		|ПО
		|	ОБЩИЕ";
		Запрос.УстановитьПараметр("Ссылка", Шапка.Ссылка);			   
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ИтогоСумма = ?(Выборка.Сумма = Неопределено, 0, Выборка.Сумма);
		ИтогоКомиссионноеВознаграждение = ?(Выборка.КомиссионноеВознаграждение = Неопределено, 0, Выборка.КомиссионноеВознаграждение);
		ИтогоСуммаНДСКомиссионногоВознаграждения = Выборка.СуммаНДСКомиссионногоВознаграждения;
		номСтроки = 0;
		Пока Выборка.Следующий() Цикл
			номСтроки = номСтроки + 1;
			ОбластьМакета.Параметры.НомерСтроки = номСтроки;
			ОбластьМакета.Параметры.Товар = Выборка.Номенклатура;
			ОбластьМакета.Параметры.Количество = Выборка.Количество;
			ОбластьМакета.Параметры.ЕдиницаХранения = Выборка.ЕдиницаИзмерения;
			ОбластьМакета.Параметры.ЦенаПоступления = Выборка.Цена;
			ОбластьМакета.Параметры.СуммаПоступления = Выборка.Сумма;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла; 
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ИтогоСумма;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + НомСтроки
		+ ", на сумму " + ОбработкаПечатиСервер.ФорматСумм(ИтогоСумма, Шапка.Валюта);
		Если ИтогоСумма > 0 Тогда
			ОбластьМакета.Параметры.СуммаПрописью = обработкаПечатиСервер.СформироватьСуммуПрописью(ИтогоСумма,Шапка.Валюта);
		КонецЕсли; 	
		Если ИтогоКомиссионноеВознаграждение > 0 Тогда
			ОбластьМакета.Параметры.СуммаВознаграждения = "Сумма комиссионного вознаграждения составила:" + ОбработкаПечатиСервер.СформироватьСуммуПрописью(ИтогоКомиссионноеВознаграждение, Шапка.Валюта);
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати,Док.Ссылка);
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы+1;
	конеццикла;
	Возврат ТабДокумент;
КонецФункции
// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)   экспорт
	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
			и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
			и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
			и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
			и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли Не ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

